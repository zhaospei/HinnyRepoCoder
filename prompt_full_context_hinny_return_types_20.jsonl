{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JdbcSecurityUtil {\n\n    /**\n     * \u8fde\u63a5\u9a71\u52a8\u6f0f\u6d1e \u6700\u65b0\u7248\u672c\u4fee\u590d\u540e\uff0c\u53ef\u5220\u9664\u76f8\u5e94\u7684key\n     * postgre\uff1aauthenticationPluginClassName, sslhostnameverifier, socketFactory, sslfactory, sslpasswordcallback\n     * https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-v7wg-cpwc-24m4\n     * \n     */\n    public static final String[] notAllowedProps = new String[]{\"authenticationPluginClassName\", \"sslhostnameverifier\", \"socketFactory\", \"sslfactory\", \"sslpasswordcallback\"};\n\n    /**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */\n    public static void validate(String jdbcUrl){<FILL_FUNCTION_BODY>}\n    \n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/78", "ground_truth": "\n        if(oConvertUtils.isEmpty(jdbcUrl)){\n            return;\n        }\n        String urlConcatChar = \"?\";\n        if(jdbcUrl.indexOf(urlConcatChar)<0){\n            return;\n        }\n        String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n        String[] keyAndValues = argString.split(\"&\");\n        for(String temp: keyAndValues){\n            String key = temp.split(\"=\")[0];\n            for(String prop: notAllowedProps){\n                if(prop.equalsIgnoreCase(key)){\n                    throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\"+key+\"\u3011\");\n                }\n            }\n        }\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "common", "util", "security", "JdbcSecurityUtil.java"], "context_start_lineno": 0, "function_name": "validate", "left_context": "class JdbcSecurityUtil {\n\n    /**\n     * \u8fde\u63a5\u9a71\u52a8\u6f0f\u6d1e \u6700\u65b0\u7248\u672c\u4fee\u590d\u540e\uff0c\u53ef\u5220\u9664\u76f8\u5e94\u7684key\n     * postgre\uff1aauthenticationPluginClassName, sslhostnameverifier, socketFactory, sslfactory, sslpasswordcallback\n     * https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-v7wg-cpwc-24m4\n     * \n     */\n    public static final String[] notAllowedProps = new String[]{\"authenticationPluginClassName\", \"sslhostnameverifier\", \"socketFactory\", \"sslfactory\", \"sslpasswordcallback\"};\n\n    /**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */\n    public static void validate(String jdbcUrl){", "right_context": "}\n    \n}", "class_name": "JdbcSecurityUtil", "return_type": "void", "parameters": [{"type": "String", "name": "jdbcUrl"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SystemSendMsgHandle implements ISendMsgHandle {\n\n    public static final String FROM_USER=\"system\";\n\n    @Resource\n    private SysAnnouncementMapper sysAnnouncementMapper;\n\n    @Resource\n    private SysUserMapper userMapper;\n\n    @Resource\n    private SysAnnouncementSendMapper sysAnnouncementSendMapper;\n\n    @Resource\n    private WebSocket webSocket;\n\n    /**\n     * \u8be5\u65b9\u6cd5\u4f1a\u53d1\u90013\u79cd\u6d88\u606f\uff1a\u7cfb\u7edf\u6d88\u606f\u3001\u4f01\u4e1a\u5fae\u4fe1 \u9489\u9489\n     * @param esReceiver \u53d1\u9001\u4eba\n     * @param esTitle \u6807\u9898\n     * @param esContent \u5185\u5bb9\n     */\n    @Override\n    public void sendMsg(String esReceiver, String esTitle, String esContent) {\n        if(oConvertUtils.isEmpty(esReceiver)){\n            throw  new JeecgBootException(\"\u88ab\u53d1\u9001\u4eba\u4e0d\u80fd\u4e3a\u7a7a\");\n        }\n        ISysBaseAPI sysBaseApi = SpringContextUtils.getBean(ISysBaseAPI.class);\n        MessageDTO messageDTO = new MessageDTO(FROM_USER,esReceiver,esTitle,esContent);\n        sysBaseApi.sendSysAnnouncement(messageDTO);\n    }\n\n    /**\n     * \u4ec5\u53d1\u9001\u7cfb\u7edf\u6d88\u606f\n     * @param messageDTO\n     */\n    @Override\n    public void sendMessage(MessageDTO messageDTO) {\n        //\u539f\u65b9\u6cd5\u4e0d\u652f\u6301 sysBaseApi.sendSysAnnouncement(messageDTO);  \u6709\u4f01\u4e1a\u5fae\u4fe1\u6d88\u606f\u903b\u8f91\uff0c\n        String title = messageDTO.getTitle();\n        String content = messageDTO.getContent();\n        String fromUser = messageDTO.getFromUser();\n        Map<String,Object> data = messageDTO.getData();\n        String[] arr = messageDTO.getToUser().split(\",\");\n        for(String username: arr){\n            doSend(title, content, fromUser, username, data);\n        }\n    }\n\n    private void doSend(String title, String msgContent, String fromUser, String toUser, Map<String, Object> data){<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/84", "ground_truth": "\n        SysAnnouncement announcement = new SysAnnouncement();\n        if(data!=null){\n            //\u6458\u8981\u4fe1\u606f\n            Object msgAbstract = data.get(CommonConstant.NOTICE_MSG_SUMMARY);\n            if(msgAbstract!=null){\n                announcement.setMsgAbstract(msgAbstract.toString());\n            }\n            // \u4efb\u52a1\u8282\u70b9ID\n            Object taskId = data.get(CommonConstant.NOTICE_MSG_BUS_ID);\n            if(taskId!=null){\n                announcement.setBusId(taskId.toString());\n                announcement.setBusType(Vue3MessageHrefEnum.BPM_TASK.getBusType());\n            }\n\n            // \u6d41\u7a0b\u5185\u6d88\u606f\u8282\u70b9 \u53d1\u6d88\u606f\u4f1a\u4f20\u4e00\u4e2abusType\n            Object busType = data.get(CommonConstant.NOTICE_MSG_BUS_TYPE);\n            if(busType!=null){\n                announcement.setBusType(busType.toString());\n            }\n        }\n        announcement.setTitile(title);\n        announcement.setMsgContent(msgContent);\n        announcement.setSender(fromUser);\n        announcement.setPriority(CommonConstant.PRIORITY_M);\n        announcement.setMsgType(CommonConstant.MSG_TYPE_UESR);\n        announcement.setSendStatus(CommonConstant.HAS_SEND);\n        announcement.setSendTime(new Date());\n        //\u7cfb\u7edf\u6d88\u606f\n        announcement.setMsgCategory(\"2\");\n        announcement.setDelFlag(String.valueOf(CommonConstant.DEL_FLAG_0));\n        sysAnnouncementMapper.insert(announcement);\n        // 2.\u63d2\u5165\u7528\u6237\u901a\u544a\u9605\u8bfb\u6807\u8bb0\u8868\u8bb0\u5f55\n        String userId = toUser;\n        String[] userIds = userId.split(\",\");\n        String anntId = announcement.getId();\n        for(int i=0;i<userIds.length;i++) {\n            if(oConvertUtils.isNotEmpty(userIds[i])) {\n                SysUser sysUser = userMapper.getUserByName(userIds[i]);\n                if(sysUser==null) {\n                    continue;\n                }\n                SysAnnouncementSend announcementSend = new SysAnnouncementSend();\n                announcementSend.setAnntId(anntId);\n                announcementSend.setUserId(sysUser.getId());\n                announcementSend.setReadFlag(CommonConstant.NO_READ_FLAG);\n                sysAnnouncementSendMapper.insert(announcementSend);\n                JSONObject obj = new JSONObject();\n                obj.put(WebsocketConst.MSG_CMD, WebsocketConst.CMD_USER);\n                obj.put(WebsocketConst.MSG_USER_ID, sysUser.getId());\n                obj.put(WebsocketConst.MSG_ID, announcement.getId());\n                obj.put(WebsocketConst.MSG_TXT, announcement.getTitile());\n                webSocket.sendMessage(sysUser.getId(), obj.toJSONString());\n            }\n        }\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "message", "handle", "impl", "SystemSendMsgHandle.java"], "context_start_lineno": 0, "function_name": "doSend", "left_context": "class SystemSendMsgHandle implements ISendMsgHandle {\n\n    public static final String FROM_USER=\"system\";\n\n    @Resource\n    private SysAnnouncementMapper sysAnnouncementMapper;\n\n    @Resource\n    private SysUserMapper userMapper;\n\n    @Resource\n    private SysAnnouncementSendMapper sysAnnouncementSendMapper;\n\n    @Resource\n    private WebSocket webSocket;\n\n    /**\n     * \u8be5\u65b9\u6cd5\u4f1a\u53d1\u90013\u79cd\u6d88\u606f\uff1a\u7cfb\u7edf\u6d88\u606f\u3001\u4f01\u4e1a\u5fae\u4fe1 \u9489\u9489\n     * @param esReceiver \u53d1\u9001\u4eba\n     * @param esTitle \u6807\u9898\n     * @param esContent \u5185\u5bb9\n     */\n    @Override\n    public void sendMsg(String esReceiver, String esTitle, String esContent) {\n        if(oConvertUtils.isEmpty(esReceiver)){\n            throw  new JeecgBootException(\"\u88ab\u53d1\u9001\u4eba\u4e0d\u80fd\u4e3a\u7a7a\");\n        }\n        ISysBaseAPI sysBaseApi = SpringContextUtils.getBean(ISysBaseAPI.class);\n        MessageDTO messageDTO = new MessageDTO(FROM_USER,esReceiver,esTitle,esContent);\n        sysBaseApi.sendSysAnnouncement(messageDTO);\n    }\n\n    /**\n     * \u4ec5\u53d1\u9001\u7cfb\u7edf\u6d88\u606f\n     * @param messageDTO\n     */\n    @Override\n    public void sendMessage(MessageDTO messageDTO) {\n        //\u539f\u65b9\u6cd5\u4e0d\u652f\u6301 sysBaseApi.sendSysAnnouncement(messageDTO);  \u6709\u4f01\u4e1a\u5fae\u4fe1\u6d88\u606f\u903b\u8f91\uff0c\n        String title = messageDTO.getTitle();\n        String content = messageDTO.getContent();\n        String fromUser = messageDTO.getFromUser();\n        Map<String,Object> data = messageDTO.getData();\n        String[] arr = messageDTO.getToUser().split(\",\");\n        for(String username: arr){\n            doSend(title, content, fromUser, username, data);\n        }\n    }\n\n    private void doSend(String title, String msgContent, String fromUser, String toUser, Map<String, Object> data){", "right_context": "}\n}", "class_name": "SystemSendMsgHandle", "return_type": "void", "parameters": [{"type": "String", "name": "title"}, {"type": "String", "name": "msgContent"}, {"type": "String", "name": "fromUser"}, {"type": "String", "name": "toUser"}, {"type": "Map<String,Object>", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDataSourceController.java\n// --------------------------------------------------\n// @GetMapping(value=\"/options\") public Result<?> queryOptions(SysDataSource sysDataSource,HttpServletRequest req){\n//   if (MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n//     sysDataSource.setTenantId(oConvertUtils.getInt(TenantContext.getTenant(),0));\n//   }\n//   QueryWrapper<SysDataSource> queryWrapper=QueryGenerator.initQueryWrapper(sysDataSource,req.getParameterMap());\n//   List<SysDataSource> pageList=sysDataSourceService.list(queryWrapper);\n//   JSONArray array=new JSONArray(pageList.size());\n//   for (  SysDataSource item : pageList) {\n//     JSONObject option=new JSONObject(3);\n//     option.put(\"value\",item.getCode());\n//     option.put(\"label\",item.getName());\n//     option.put(\"text\",item.getName());\n//     array.add(option);\n//   }\n//   return Result.ok(array);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDataSourceController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @AutoLog(value=\"\u591a\u6570\u636e\u6e90\u7ba1\u7406-\u901a\u8fc7id\u67e5\u8be2\") @ApiOperation(value=\"\u591a\u6570\u636e\u6e90\u7ba1\u7406-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u591a\u6570\u636e\u6e90\u7ba1\u7406-\u901a\u8fc7id\u67e5\u8be2\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\") String id) throws InterruptedException {\n//   SysDataSource sysDataSource=sysDataSourceService.getById(id);\n//   String dbPassword=sysDataSource.getDbPassword();\n//   if (StringUtils.isNotBlank(dbPassword)) {\n//     String decodedStr=SecurityUtil.jiemi(dbPassword);\n//     sysDataSource.setDbPassword(decodedStr);\n//   }\n//   return Result.ok(sysDataSource);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDepartPermissionController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @ApiOperation(value=\"\u90e8\u95e8\u6743\u9650\u8868-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u90e8\u95e8\u6743\u9650\u8868-\u901a\u8fc7id\u67e5\u8be2\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   SysDepartPermission sysDepartPermission=sysDepartPermissionService.getById(id);\n//   return Result.ok(sysDepartPermission);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDepartRoleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @ApiOperation(value=\"\u90e8\u95e8\u89d2\u8272-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u90e8\u95e8\u89d2\u8272-\u901a\u8fc7id\u67e5\u8be2\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   SysDepartRole sysDepartRole=sysDepartRoleService.getById(id);\n//   return Result.ok(sysDepartRole);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysFillRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @AutoLog(value=\"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\") @ApiOperation(value=\"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   SysFillRule sysFillRule=sysFillRuleService.getById(id);\n//   return Result.ok(sysFillRule);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysFormFileController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @AutoLog(value=\"\u8868\u5355\u8bc4\u8bba\u6587\u4ef6-\u901a\u8fc7id\u67e5\u8be2\") @ApiOperation(value=\"\u8868\u5355\u8bc4\u8bba\u6587\u4ef6-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u8868\u5355\u8bc4\u8bba\u6587\u4ef6-\u901a\u8fc7id\u67e5\u8be2\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   SysFormFile sysFormFile=sysFormFileService.getById(id);\n//   return Result.OK(sysFormFile);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysRoleIndexController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @AutoLog(value=\"\u89d2\u8272\u9996\u9875\u914d\u7f6e-\u901a\u8fc7id\u67e5\u8be2\") @ApiOperation(value=\"\u89d2\u8272\u9996\u9875\u914d\u7f6e-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u89d2\u8272\u9996\u9875\u914d\u7f6e-\u901a\u8fc7id\u67e5\u8be2\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   SysRoleIndex sysRoleIndex=sysRoleIndexService.getById(id);\n//   return Result.OK(sysRoleIndex);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysTableWhiteListController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @AutoLog(value=\"\u7cfb\u7edf\u8868\u767d\u540d\u5355-\u901a\u8fc7id\u67e5\u8be2\") @ApiOperation(value=\"\u7cfb\u7edf\u8868\u767d\u540d\u5355-\u901a\u8fc7id\u67e5\u8be2\",notes=\"\u7cfb\u7edf\u8868\u767d\u540d\u5355-\u901a\u8fc7id\u67e5\u8be2\") @RequiresRoles(\"admin\") @GetMapping(value=\"/queryById\") public Result<?> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   SysTableWhiteList sysTableWhiteList=sysTableWhiteListService.getById(id);\n//   return Result.OK(sysTableWhiteList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysUserController.java\n// --------------------------------------------------\n// /** \n//  * \u6839\u636e orgCode \u67e5\u8be2\u7528\u6237\uff0c\u5305\u62ec\u5b50\u90e8\u95e8\u4e0b\u7684\u7528\u6237 \u9488\u5bf9\u901a\u8baf\u5f55\u6a21\u5757\u505a\u7684\u63a5\u53e3\uff0c\u5c06\u591a\u4e2a\u90e8\u95e8\u7684\u7528\u6237\u5408\u5e76\u6210\u4e00\u6761\u8bb0\u5f55\uff0c\u5e76\u8f6c\u6210\u5bf9\u524d\u7aef\u53cb\u597d\u7684\u683c\u5f0f\n//  */\n// @GetMapping(\"/queryByOrgCodeForAddressList\") public Result<?> queryByOrgCodeForAddressList(@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,@RequestParam(name=\"orgCode\",required=false) String orgCode,SysUser userParams){\n//   IPage page=new Page(pageNo,pageSize);\n//   IPage<SysUserSysDepartModel> pageList=sysUserService.queryUserByOrgCode(orgCode,userParams,page);\n//   List<SysUserSysDepartModel> list=pageList.getRecords();\n//   Map<String,JSONObject> hasUser=new HashMap<>(list.size());\n//   JSONArray resultJson=new JSONArray(list.size());\n//   for (  SysUserSysDepartModel item : list) {\n//     String userId=item.getId();\n//     JSONObject getModel=hasUser.get(userId);\n//     if (getModel != null) {\n//       String departName=getModel.get(\"departName\").toString();\n//       getModel.put(\"departName\",(departName + \" | \" + item.getDepartName()));\n//     }\n//  else {\n//       JSONObject json=JSON.parseObject(JSON.toJSONString(item));\n//       json.remove(\"id\");\n//       json.put(\"userId\",userId);\n//       json.put(\"departId\",item.getDepartId());\n//       json.put(\"departName\",item.getDepartName());\n//       resultJson.add(json);\n//       hasUser.put(userId,json);\n//     }\n//   }\n//   IPage<JSONObject> result=new Page<>(pageNo,pageSize,pageList.getTotal());\n//   result.setRecords(resultJson.toJavaList(JSONObject.class));\n//   return Result.ok(result);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-demo/src/main/java/org/jeecg/modules/demo/test/controller/JeecgOrderMainController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param jeecgOrderMain\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @GetMapping(value=\"/list\") public Result<?> queryPageList(JeecgOrderMain jeecgOrderMain,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<JeecgOrderMain> queryWrapper=QueryGenerator.initQueryWrapper(jeecgOrderMain,req.getParameterMap());\n//   Page<JeecgOrderMain> page=new Page<JeecgOrderMain>(pageNo,pageSize);\n//   IPage<JeecgOrderMain> pageList=jeecgOrderMainService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/message/controller/SysMessageTemplateController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysMessageTemplate\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @GetMapping(value=\"/list\") public Result<?> queryPageList(SysMessageTemplate sysMessageTemplate,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<SysMessageTemplate> queryWrapper=QueryGenerator.initQueryWrapper(sysMessageTemplate,req.getParameterMap());\n//   Page<SysMessageTemplate> page=new Page<SysMessageTemplate>(pageNo,pageSize);\n//   IPage<SysMessageTemplate> pageList=sysMessageTemplateService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/quartz/controller/QuartzJobController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param quartzJob\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @RequestMapping(value=\"/list\",method=RequestMethod.GET) public Result<?> queryPageList(QuartzJob quartzJob,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<QuartzJob> queryWrapper=QueryGenerator.initQueryWrapper(quartzJob,req.getParameterMap());\n//   Page<QuartzJob> page=new Page<QuartzJob>(pageNo,pageSize);\n//   IPage<QuartzJob> pageList=quartzJobService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDataSourceController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysDataSource\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @AutoLog(value=\"\u591a\u6570\u636e\u6e90\u7ba1\u7406-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @ApiOperation(value=\"\u591a\u6570\u636e\u6e90\u7ba1\u7406-\u5206\u9875\u5217\u8868\u67e5\u8be2\",notes=\"\u591a\u6570\u636e\u6e90\u7ba1\u7406-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @RequiresPermissions(\"system:datasource:list\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysDataSource sysDataSource,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   if (MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n//     sysDataSource.setTenantId(oConvertUtils.getInt(TenantContext.getTenant(),0));\n//   }\n//   QueryWrapper<SysDataSource> queryWrapper=QueryGenerator.initQueryWrapper(sysDataSource,req.getParameterMap());\n//   Page<SysDataSource> page=new Page<>(pageNo,pageSize);\n//   IPage<SysDataSource> pageList=sysDataSourceService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDepartPermissionController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysDepartPermission\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @ApiOperation(value=\"\u90e8\u95e8\u6743\u9650\u8868-\u5206\u9875\u5217\u8868\u67e5\u8be2\",notes=\"\u90e8\u95e8\u6743\u9650\u8868-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysDepartPermission sysDepartPermission,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<SysDepartPermission> queryWrapper=QueryGenerator.initQueryWrapper(sysDepartPermission,req.getParameterMap());\n//   Page<SysDepartPermission> page=new Page<SysDepartPermission>(pageNo,pageSize);\n//   IPage<SysDepartPermission> pageList=sysDepartPermissionService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysDepartRoleController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysDepartRole\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @ApiOperation(value=\"\u90e8\u95e8\u89d2\u8272-\u5206\u9875\u5217\u8868\u67e5\u8be2\",notes=\"\u90e8\u95e8\u89d2\u8272-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysDepartRole sysDepartRole,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,@RequestParam(name=\"deptId\",required=false) String deptId,HttpServletRequest req){\n//   QueryWrapper<SysDepartRole> queryWrapper=QueryGenerator.initQueryWrapper(sysDepartRole,req.getParameterMap());\n//   Page<SysDepartRole> page=new Page<SysDepartRole>(pageNo,pageSize);\n//   if (oConvertUtils.isNotEmpty(deptId)) {\n//     queryWrapper.eq(\"depart_id\",deptId);\n//   }\n//   IPage<SysDepartRole> pageList=sysDepartRoleService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysFillRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysFillRule\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @AutoLog(value=\"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @ApiOperation(value=\"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\",notes=\"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysFillRule sysFillRule,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<SysFillRule> queryWrapper=QueryGenerator.initQueryWrapper(sysFillRule,req.getParameterMap());\n//   Page<SysFillRule> page=new Page<>(pageNo,pageSize);\n//   IPage<SysFillRule> pageList=sysFillRuleService.page(page,queryWrapper);\n//   return Result.ok(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysFormFileController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysFormFile\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @AutoLog(value=\"\u8868\u5355\u8bc4\u8bba\u6587\u4ef6-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @ApiOperation(value=\"\u8868\u5355\u8bc4\u8bba\u6587\u4ef6-\u5206\u9875\u5217\u8868\u67e5\u8be2\",notes=\"\u8868\u5355\u8bc4\u8bba\u6587\u4ef6-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysFormFile sysFormFile,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<SysFormFile> queryWrapper=QueryGenerator.initQueryWrapper(sysFormFile,req.getParameterMap());\n//   Page<SysFormFile> page=new Page<SysFormFile>(pageNo,pageSize);\n//   IPage<SysFormFile> pageList=sysFormFileService.page(page,queryWrapper);\n//   return Result.OK(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysGatewayRouteController.java\n// --------------------------------------------------\n// @GetMapping(value=\"/list\") public Result<?> queryPageList(SysGatewayRoute sysGatewayRoute){\n//   LambdaQueryWrapper<SysGatewayRoute> query=new LambdaQueryWrapper<>();\n//   List<SysGatewayRoute> ls=sysGatewayRouteService.list(query);\n//   JSONArray array=new JSONArray();\n//   for (  SysGatewayRoute rt : ls) {\n//     JSONObject obj=(JSONObject)JSONObject.toJSON(rt);\n//     if (oConvertUtils.isNotEmpty(rt.getPredicates())) {\n//       obj.put(\"predicates\",JSONArray.parseArray(rt.getPredicates()));\n//     }\n//     if (oConvertUtils.isNotEmpty(rt.getFilters())) {\n//       obj.put(\"filters\",JSONArray.parseArray(rt.getFilters()));\n//     }\n//     array.add(obj);\n//   }\n//   return Result.ok(array);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysRoleIndexController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysRoleIndex\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @AutoLog(value=\"\u89d2\u8272\u9996\u9875\u914d\u7f6e-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @ApiOperation(value=\"\u89d2\u8272\u9996\u9875\u914d\u7f6e-\u5206\u9875\u5217\u8868\u67e5\u8be2\",notes=\"\u89d2\u8272\u9996\u9875\u914d\u7f6e-\u5206\u9875\u5217\u8868\u67e5\u8be2\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysRoleIndex sysRoleIndex,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<SysRoleIndex> queryWrapper=QueryGenerator.initQueryWrapper(sysRoleIndex,req.getParameterMap());\n//   Page<SysRoleIndex> page=new Page<SysRoleIndex>(pageNo,pageSize);\n//   IPage<SysRoleIndex> pageList=sysRoleIndexService.page(page,queryWrapper);\n//   return Result.OK(pageList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysTableWhiteListController.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u9875\u5217\u8868\u67e5\u8be2\n//  * @param sysTableWhiteList\n//  * @param pageNo\n//  * @param pageSize\n//  * @param req\n//  * @return\n//  */\n// @RequiresRoles(\"admin\") @GetMapping(value=\"/list\") public Result<?> queryPageList(SysTableWhiteList sysTableWhiteList,@RequestParam(name=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(name=\"pageSize\",defaultValue=\"10\") Integer pageSize,HttpServletRequest req){\n//   QueryWrapper<SysTableWhiteList> queryWrapper=QueryGenerator.initQueryWrapper(sysTableWhiteList,req.getParameterMap());\n//   Page<SysTableWhiteList> page=new Page<>(pageNo,pageSize);\n//   IPage<SysTableWhiteList> pageList=sysTableWhiteListService.page(page,queryWrapper);\n//   return Result.OK(pageList);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysMessageController extends JeecgController<SysMessage, ISysMessageService> {\n\t@Autowired\n\tprivate ISysMessageService sysMessageService;\n\n\t/**\n\t * \u5206\u9875\u5217\u8868\u67e5\u8be2\n\t * \n\t * @param sysMessage\n\t * @param pageNo\n\t * @param pageSize\n\t * @param req\n\t * @return\n\t */\n\t@GetMapping(value = \"/list\")\n\tpublic Result<?> queryPageList(SysMessage sysMessage, @RequestParam(name = \"pageNo\", defaultValue = \"1\") Integer pageNo,\n\t\t\t@RequestParam(name = \"pageSize\", defaultValue = \"10\") Integer pageSize, HttpServletRequest req) {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * \u6dfb\u52a0\n\t * \n\t * @param sysMessage\n\t * @return\n\t */\n\t@PostMapping(value = \"/add\")\n\tpublic Result<?> add(@RequestBody SysMessage sysMessage) {\n\t\tsysMessageService.save(sysMessage);\n\t\treturn Result.ok(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n\t}\n\n\t/**\n\t * \u7f16\u8f91\n\t * \n\t * @param sysMessage\n\t * @return\n\t */\n\t@PutMapping(value = \"/edit\")\n\tpublic Result<?> edit(@RequestBody SysMessage sysMessage) {\t\n\t\tsysMessageService.updateById(sysMessage);\n        return Result.ok(\"\u4fee\u6539\u6210\u529f!\");\n\n\t}\n\n\t/**\n\t * \u901a\u8fc7id\u5220\u9664\n\t * \n\t * @param id\n\t * @return\n\t */\n\t@DeleteMapping(value = \"/delete\")\n\tpublic Result<?> delete(@RequestParam(name = \"id\", required = true) String id) {\n\t\tsysMessageService.removeById(id);\n        return Result.ok(\"\u5220\u9664\u6210\u529f!\");\n\t}\n\n\t/**\n\t * \u6279\u91cf\u5220\u9664\n\t * \n\t * @param ids\n\t * @return\n\t */\n\t@DeleteMapping(value = \"/deleteBatch\")\n\tpublic Result<?> deleteBatch(@RequestParam(name = \"ids\", required = true) String ids) {\n\n\t\tthis.sysMessageService.removeByIds(Arrays.asList(ids.split(\",\")));\n\t    return Result.ok(\"\u6279\u91cf\u5220\u9664\u6210\u529f\uff01\");\n\t}\n\n\t/**\n\t * \u901a\u8fc7id\u67e5\u8be2\n\t * \n\t * @param id\n\t * @return\n\t */\n\t@GetMapping(value = \"/queryById\")\n\tpublic Result<?> queryById(@RequestParam(name = \"id\", required = true) String id) {\n\t\tSysMessage sysMessage = sysMessageService.getById(id);\n\t\treturn Result.ok(sysMessage);\n\t}\n\n\t/**\n\t * \u5bfc\u51faexcel\n\t *\n\t * @param request\n\t */\n\t@GetMapping(value = \"/exportXls\")\n\tpublic ModelAndView exportXls(HttpServletRequest request, SysMessage sysMessage) {\n\t\treturn super.exportXls(request,sysMessage,SysMessage.class, \"\u63a8\u9001\u6d88\u606f\u6a21\u677f\");\n\t}\n\n\t/**\n\t * excel\u5bfc\u5165\n\t *\n\t * @param request\n\t * @param response\n\t * @return\n\t */\n\t@PostMapping(value = \"/importExcel\")\n\tpublic Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {\n\t\treturn super.importExcel(request, response, SysMessage.class);\n\t}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/98", "ground_truth": "\n\t\tQueryWrapper<SysMessage> queryWrapper = QueryGenerator.initQueryWrapper(sysMessage, req.getParameterMap());\n\t\tPage<SysMessage> page = new Page<SysMessage>(pageNo, pageSize);\n\t\tIPage<SysMessage> pageList = sysMessageService.page(page, queryWrapper);\n        return Result.ok(pageList);\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "message", "controller", "SysMessageController.java"], "context_start_lineno": 0, "function_name": "queryPageList", "left_context": "class SysMessageController extends JeecgController<SysMessage, ISysMessageService> {\n\t@Autowired\n\tprivate ISysMessageService sysMessageService;\n\n\t/**\n\t * \u5206\u9875\u5217\u8868\u67e5\u8be2\n\t * \n\t * @param sysMessage\n\t * @param pageNo\n\t * @param pageSize\n\t * @param req\n\t * @return\n\t */\n\t@GetMapping(value = \"/list\")\n\tpublic Result<?> queryPageList(SysMessage sysMessage, @RequestParam(name = \"pageNo\", defaultValue = \"1\") Integer pageNo,\n\t\t\t@RequestParam(name = \"pageSize\", defaultValue = \"10\") Integer pageSize, HttpServletRequest req) {", "right_context": "}\n\n\t/**\n\t * \u6dfb\u52a0\n\t * \n\t * @param sysMessage\n\t * @return\n\t */\n\t@PostMapping(value = \"/add\")\n\tpublic Result<?> add(@RequestBody SysMessage sysMessage) {\n\t\tsysMessageService.save(sysMessage);\n\t\treturn Result.ok(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n\t}\n\n\t/**\n\t * \u7f16\u8f91\n\t * \n\t * @param sysMessage\n\t * @return\n\t */\n\t@PutMapping(value = \"/edit\")\n\tpublic Result<?> edit(@RequestBody SysMessage sysMessage) {\t\n\t\tsysMessageService.updateById(sysMessage);\n        return Result.ok(\"\u4fee\u6539\u6210\u529f!\");\n\n\t}\n\n\t/**\n\t * \u901a\u8fc7id\u5220\u9664\n\t * \n\t * @param id\n\t * @return\n\t */\n\t@DeleteMapping(value = \"/delete\")\n\tpublic Result<?> delete(@RequestParam(name = \"id\", required = true) String id) {\n\t\tsysMessageService.removeById(id);\n        return Result.ok(\"\u5220\u9664\u6210\u529f!\");\n\t}\n\n\t/**\n\t * \u6279\u91cf\u5220\u9664\n\t * \n\t * @param ids\n\t * @return\n\t */\n\t@DeleteMapping(value = \"/deleteBatch\")\n\tpublic Result<?> deleteBatch(@RequestParam(name = \"ids\", required = true) String ids) {\n\n\t\tthis.sysMessageService.removeByIds(Arrays.asList(ids.split(\",\")));\n\t    return Result.ok(\"\u6279\u91cf\u5220\u9664\u6210\u529f\uff01\");\n\t}\n\n\t/**\n\t * \u901a\u8fc7id\u67e5\u8be2\n\t * \n\t * @param id\n\t * @return\n\t */\n\t@GetMapping(value = \"/queryById\")\n\tpublic Result<?> queryById(@RequestParam(name = \"id\", required = true) String id) {\n\t\tSysMessage sysMessage = sysMessageService.getById(id);\n\t\treturn Result.ok(sysMessage);\n\t}\n\n\t/**\n\t * \u5bfc\u51faexcel\n\t *\n\t * @param request\n\t */\n\t@GetMapping(value = \"/exportXls\")\n\tpublic ModelAndView exportXls(HttpServletRequest request, SysMessage sysMessage) {\n\t\treturn super.exportXls(request,sysMessage,SysMessage.class, \"\u63a8\u9001\u6d88\u606f\u6a21\u677f\");\n\t}\n\n\t/**\n\t * excel\u5bfc\u5165\n\t *\n\t * @param request\n\t * @param response\n\t * @return\n\t */\n\t@PostMapping(value = \"/importExcel\")\n\tpublic Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {\n\t\treturn super.importExcel(request, response, SysMessage.class);\n\t}\n\n}", "class_name": "SysMessageController", "return_type": "Result<?>", "parameters": [{"type": "SysMessage", "name": "sysMessage"}, {"type": "Integer", "name": "pageNo"}, {"type": "Integer", "name": "pageSize"}, {"type": "HttpServletRequest", "name": "req"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VxeSocket {\n\n    /**\n     * \u5f53\u524d session\n     */\n    private Session session;\n    /**\n     * \u5f53\u524d\u7528\u6237id\n     */\n    private String userId;\n    /**\n     * \u9875\u9762id\uff0c\u7528\u4e8e\u6807\u8bc6\u540c\u4e00\u7528\u6237\uff0c\u4e0d\u540c\u9875\u9762\u7684\u6570\u636e\n     */\n    private String pageId;\n    /**\n     * \u5f53\u524dsocket\u552f\u4e00id\n     */\n    private String socketId;\n\n    /**\n     * \u7528\u6237\u8fde\u63a5\u6c60\uff0c\u5305\u542b\u5355\u4e2a\u7528\u6237\u7684\u6240\u6709socket\u8fde\u63a5\uff1b\n     * \u56e0\u4e3a\u4e00\u4e2a\u7528\u6237\u53ef\u80fd\u6253\u5f00\u591a\u4e2a\u9875\u9762\uff0c\u591a\u4e2a\u9875\u9762\u5c31\u4f1a\u6709\u591a\u4e2a\u8fde\u63a5\uff1b\n     * key\u662fuserId\uff0cvalue\u662fMap\u5bf9\u8c61\uff1b\u5b50Map\u7684key\u662fpageId\uff0cvalue\u662fVXESocket\u5bf9\u8c61\n     */\n    private static Map<String, Map<String, VxeSocket>> userPool = new HashMap<>();\n    /**\n     * \u8fde\u63a5\u6c60\uff0c\u5305\u542b\u6240\u6709WebSocket\u8fde\u63a5\uff1b\n     * key\u662fsocketId\uff0cvalue\u662fVXESocket\u5bf9\u8c61\n     */\n    private static Map<String, VxeSocket> socketPool = new HashMap<>();\n\n    /**\n     * \u83b7\u53d6\u67d0\u4e2a\u7528\u6237\u6240\u6709\u7684\u9875\u9762\n     */\n    public static Map<String, VxeSocket> getUserPool(String userId) {\n        return userPool.computeIfAbsent(userId, k -> new HashMap<>(5));\n    }\n\n    /**\n     * \u5411\u5f53\u524d\u7528\u6237\u53d1\u9001\u6d88\u606f\n     *\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public void sendMessage(String message) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u5c01\u88c5\u6d88\u606fjson\n     *\n     * @param data \u6d88\u606f\u5185\u5bb9\n     */\n    public static String packageMessage(String type, Object data) {\n        JSONObject message = new JSONObject();\n        message.put(VxeSocketConst.TYPE, type);\n        message.put(VxeSocketConst.DATA, data);\n        return message.toJSONString();\n    }\n\n    /**\n     * \u5411\u6307\u5b9a\u7528\u6237\u7684\u6240\u6709\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param userId  \u63a5\u6536\u6d88\u606f\u7684\u7528\u6237ID\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageTo(String userId, String message) {\n        Collection<VxeSocket> values = getUserPool(userId).values();\n        if (values.size() > 0) {\n            for (VxeSocket socketItem : values) {\n                socketItem.sendMessage(message);\n            }\n        } else {\n            log.warn(\"\u3010vxeSocket\u3011\u6d88\u606f\u53d1\u9001\u5931\u8d25\uff1auserId\\\"\" + userId + \"\\\"\u4e0d\u5b58\u5728\u6216\u672a\u5728\u7ebf\uff01\");\n        }\n    }\n\n    /**\n     * \u5411\u6307\u5b9a\u7528\u6237\u7684\u6307\u5b9a\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param userId  \u63a5\u6536\u6d88\u606f\u7684\u7528\u6237ID\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageTo(String userId, String pageId, String message) {\n        VxeSocket socketItem = getUserPool(userId).get(pageId);\n        if (socketItem != null) {\n            socketItem.sendMessage(message);\n        } else {\n            log.warn(\"\u3010vxeSocket\u3011\u6d88\u606f\u53d1\u9001\u5931\u8d25\uff1auserId\\\"\" + userId + \"\\\"\u7684pageId\\\"\" + pageId + \"\\\"\u4e0d\u5b58\u5728\u6216\u672a\u5728\u7ebf\uff01\");\n        }\n    }\n\n    /**\n     * \u5411\u591a\u4e2a\u7528\u6237\u7684\u6240\u6709\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param userIds \u63a5\u6536\u6d88\u606f\u7684\u7528\u6237ID\u6570\u7ec4\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageTo(String[] userIds, String message) {\n        for (String userId : userIds) {\n            VxeSocket.sendMessageTo(userId, message);\n        }\n    }\n\n    /**\n     * \u5411\u6240\u6709\u7528\u6237\u7684\u6240\u6709\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageToAll(String message) {\n        for (VxeSocket socketItem : socketPool.values()) {\n            socketItem.sendMessage(message);\n        }\n    }\n\n    /**\n     * websocket \u5f00\u542f\u8fde\u63a5\n     */\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"userId\") String userId, @PathParam(\"pageId\") String pageId) {\n        try {\n            this.userId = userId;\n            this.pageId = pageId;\n            this.socketId = userId + pageId;\n            this.session = session;\n\n            socketPool.put(this.socketId, this);\n            getUserPool(userId).put(this.pageId, this);\n\n            log.info(\"\u3010vxeSocket\u3011\u6709\u65b0\u7684\u8fde\u63a5\uff0c\u603b\u6570\u4e3a:\" + socketPool.size());\n        } catch (Exception ignored) {\n        }\n    }\n\n    /**\n     * websocket \u65ad\u5f00\u8fde\u63a5\n     */\n    @OnClose\n    public void onClose() {\n        try {\n            socketPool.remove(this.socketId);\n            getUserPool(this.userId).remove(this.pageId);\n\n            log.info(\"\u3010vxeSocket\u3011\u8fde\u63a5\u65ad\u5f00\uff0c\u603b\u6570\u4e3a:\" + socketPool.size());\n        } catch (Exception ignored) {\n        }\n    }\n\n    /**\n     * websocket \u6536\u5230\u6d88\u606f\n     */\n    @OnMessage\n    public void onMessage(String message) {\n        // log.info(\"\u3010vxeSocket\u3011onMessage:\" + message);\n        JSONObject json;\n        try {\n            json = JSON.parseObject(message);\n        } catch (Exception e) {\n            log.warn(\"\u3010vxeSocket\u3011\u6536\u5230\u4e0d\u5408\u6cd5\u7684\u6d88\u606f:\" + message);\n            return;\n        }\n        String type = json.getString(VxeSocketConst.TYPE);\n        switch (type) {\n            // \u5fc3\u8df3\u68c0\u6d4b\n            case VxeSocketConst.TYPE_HB:\n                this.sendMessage(VxeSocket.packageMessage(type, true));\n                break;\n            // \u66f4\u65b0form\u6570\u636e\n            case VxeSocketConst.TYPE_UVT:\n                this.handleUpdateForm(json);\n                break;\n            default:\n                log.warn(\"\u3010vxeSocket\u3011\u6536\u5230\u4e0d\u8bc6\u522b\u7684\u6d88\u606f\u7c7b\u578b:\" + type);\n                break;\n        }\n\n\n    }\n\n    /**\n     * \u5904\u7406 UpdateForm \u4e8b\u4ef6\n     */\n    private void handleUpdateForm(JSONObject json) {\n        // \u5c06\u4e8b\u4ef6\u8f6c\u53d1\u7ed9\u6240\u6709\u4eba\n        JSONObject data = json.getJSONObject(VxeSocketConst.DATA);\n        VxeSocket.sendMessageToAll(VxeSocket.packageMessage(VxeSocketConst.TYPE_UVT, data));\n    }\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/111", "ground_truth": "\n        try {\n            this.session.getAsyncRemote().sendText(message);\n        } catch (Exception e) {\n            log.error(\"\u3010vxeSocket\u3011\u6d88\u606f\u53d1\u9001\u5931\u8d25\uff1a\" + e.getMessage());\n        }\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-demo", "src", "main", "java", "org", "jeecg", "modules", "demo", "mock", "vxe", "websocket", "VxeSocket.java"], "context_start_lineno": 0, "function_name": "sendMessage", "left_context": "class VxeSocket {\n\n    /**\n     * \u5f53\u524d session\n     */\n    private Session session;\n    /**\n     * \u5f53\u524d\u7528\u6237id\n     */\n    private String userId;\n    /**\n     * \u9875\u9762id\uff0c\u7528\u4e8e\u6807\u8bc6\u540c\u4e00\u7528\u6237\uff0c\u4e0d\u540c\u9875\u9762\u7684\u6570\u636e\n     */\n    private String pageId;\n    /**\n     * \u5f53\u524dsocket\u552f\u4e00id\n     */\n    private String socketId;\n\n    /**\n     * \u7528\u6237\u8fde\u63a5\u6c60\uff0c\u5305\u542b\u5355\u4e2a\u7528\u6237\u7684\u6240\u6709socket\u8fde\u63a5\uff1b\n     * \u56e0\u4e3a\u4e00\u4e2a\u7528\u6237\u53ef\u80fd\u6253\u5f00\u591a\u4e2a\u9875\u9762\uff0c\u591a\u4e2a\u9875\u9762\u5c31\u4f1a\u6709\u591a\u4e2a\u8fde\u63a5\uff1b\n     * key\u662fuserId\uff0cvalue\u662fMap\u5bf9\u8c61\uff1b\u5b50Map\u7684key\u662fpageId\uff0cvalue\u662fVXESocket\u5bf9\u8c61\n     */\n    private static Map<String, Map<String, VxeSocket>> userPool = new HashMap<>();\n    /**\n     * \u8fde\u63a5\u6c60\uff0c\u5305\u542b\u6240\u6709WebSocket\u8fde\u63a5\uff1b\n     * key\u662fsocketId\uff0cvalue\u662fVXESocket\u5bf9\u8c61\n     */\n    private static Map<String, VxeSocket> socketPool = new HashMap<>();\n\n    /**\n     * \u83b7\u53d6\u67d0\u4e2a\u7528\u6237\u6240\u6709\u7684\u9875\u9762\n     */\n    public static Map<String, VxeSocket> getUserPool(String userId) {\n        return userPool.computeIfAbsent(userId, k -> new HashMap<>(5));\n    }\n\n    /**\n     * \u5411\u5f53\u524d\u7528\u6237\u53d1\u9001\u6d88\u606f\n     *\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public void sendMessage(String message) {", "right_context": "}\n\n    /**\n     * \u5c01\u88c5\u6d88\u606fjson\n     *\n     * @param data \u6d88\u606f\u5185\u5bb9\n     */\n    public static String packageMessage(String type, Object data) {\n        JSONObject message = new JSONObject();\n        message.put(VxeSocketConst.TYPE, type);\n        message.put(VxeSocketConst.DATA, data);\n        return message.toJSONString();\n    }\n\n    /**\n     * \u5411\u6307\u5b9a\u7528\u6237\u7684\u6240\u6709\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param userId  \u63a5\u6536\u6d88\u606f\u7684\u7528\u6237ID\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageTo(String userId, String message) {\n        Collection<VxeSocket> values = getUserPool(userId).values();\n        if (values.size() > 0) {\n            for (VxeSocket socketItem : values) {\n                socketItem.sendMessage(message);\n            }\n        } else {\n            log.warn(\"\u3010vxeSocket\u3011\u6d88\u606f\u53d1\u9001\u5931\u8d25\uff1auserId\\\"\" + userId + \"\\\"\u4e0d\u5b58\u5728\u6216\u672a\u5728\u7ebf\uff01\");\n        }\n    }\n\n    /**\n     * \u5411\u6307\u5b9a\u7528\u6237\u7684\u6307\u5b9a\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param userId  \u63a5\u6536\u6d88\u606f\u7684\u7528\u6237ID\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageTo(String userId, String pageId, String message) {\n        VxeSocket socketItem = getUserPool(userId).get(pageId);\n        if (socketItem != null) {\n            socketItem.sendMessage(message);\n        } else {\n            log.warn(\"\u3010vxeSocket\u3011\u6d88\u606f\u53d1\u9001\u5931\u8d25\uff1auserId\\\"\" + userId + \"\\\"\u7684pageId\\\"\" + pageId + \"\\\"\u4e0d\u5b58\u5728\u6216\u672a\u5728\u7ebf\uff01\");\n        }\n    }\n\n    /**\n     * \u5411\u591a\u4e2a\u7528\u6237\u7684\u6240\u6709\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param userIds \u63a5\u6536\u6d88\u606f\u7684\u7528\u6237ID\u6570\u7ec4\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageTo(String[] userIds, String message) {\n        for (String userId : userIds) {\n            VxeSocket.sendMessageTo(userId, message);\n        }\n    }\n\n    /**\n     * \u5411\u6240\u6709\u7528\u6237\u7684\u6240\u6709\u9875\u9762\u53d1\u9001\u6d88\u606f\n     *\n     * @param message \u6d88\u606f\u5185\u5bb9\n     */\n    public static void sendMessageToAll(String message) {\n        for (VxeSocket socketItem : socketPool.values()) {\n            socketItem.sendMessage(message);\n        }\n    }\n\n    /**\n     * websocket \u5f00\u542f\u8fde\u63a5\n     */\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"userId\") String userId, @PathParam(\"pageId\") String pageId) {\n        try {\n            this.userId = userId;\n            this.pageId = pageId;\n            this.socketId = userId + pageId;\n            this.session = session;\n\n            socketPool.put(this.socketId, this);\n            getUserPool(userId).put(this.pageId, this);\n\n            log.info(\"\u3010vxeSocket\u3011\u6709\u65b0\u7684\u8fde\u63a5\uff0c\u603b\u6570\u4e3a:\" + socketPool.size());\n        } catch (Exception ignored) {\n        }\n    }\n\n    /**\n     * websocket \u65ad\u5f00\u8fde\u63a5\n     */\n    @OnClose\n    public void onClose() {\n        try {\n            socketPool.remove(this.socketId);\n            getUserPool(this.userId).remove(this.pageId);\n\n            log.info(\"\u3010vxeSocket\u3011\u8fde\u63a5\u65ad\u5f00\uff0c\u603b\u6570\u4e3a:\" + socketPool.size());\n        } catch (Exception ignored) {\n        }\n    }\n\n    /**\n     * websocket \u6536\u5230\u6d88\u606f\n     */\n    @OnMessage\n    public void onMessage(String message) {\n        // log.info(\"\u3010vxeSocket\u3011onMessage:\" + message);\n        JSONObject json;\n        try {\n            json = JSON.parseObject(message);\n        } catch (Exception e) {\n            log.warn(\"\u3010vxeSocket\u3011\u6536\u5230\u4e0d\u5408\u6cd5\u7684\u6d88\u606f:\" + message);\n            return;\n        }\n        String type = json.getString(VxeSocketConst.TYPE);\n        switch (type) {\n            // \u5fc3\u8df3\u68c0\u6d4b\n            case VxeSocketConst.TYPE_HB:\n                this.sendMessage(VxeSocket.packageMessage(type, true));\n                break;\n            // \u66f4\u65b0form\u6570\u636e\n            case VxeSocketConst.TYPE_UVT:\n                this.handleUpdateForm(json);\n                break;\n            default:\n                log.warn(\"\u3010vxeSocket\u3011\u6536\u5230\u4e0d\u8bc6\u522b\u7684\u6d88\u606f\u7c7b\u578b:\" + type);\n                break;\n        }\n\n\n    }\n\n    /**\n     * \u5904\u7406 UpdateForm \u4e8b\u4ef6\n     */\n    private void handleUpdateForm(JSONObject json) {\n        // \u5c06\u4e8b\u4ef6\u8f6c\u53d1\u7ed9\u6240\u6709\u4eba\n        JSONObject data = json.getJSONObject(VxeSocketConst.DATA);\n        VxeSocket.sendMessageToAll(VxeSocket.packageMessage(VxeSocketConst.TYPE_UVT, data));\n    }\n\n}", "class_name": "VxeSocket", "return_type": "void", "parameters": [{"type": "String", "name": "message"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BaseCommonServiceImpl implements BaseCommonService {\n\n    @Resource\n    private BaseCommonMapper baseCommonMapper;\n\n    @Override\n    public void addLog(LogDTO logDTO) {\n        if(oConvertUtils.isEmpty(logDTO.getId())){\n            logDTO.setId(String.valueOf(IdWorker.getId()));\n        }\n        //\u4fdd\u5b58\u65e5\u5fd7\uff08\u5f02\u5e38\u6355\u83b7\u5904\u7406\uff0c\u9632\u6b62\u6570\u636e\u592a\u5927\u5b58\u50a8\u5931\u8d25\uff0c\u5bfc\u81f4\u4e1a\u52a1\u5931\u8d25\uff09JT-238\n        try {\n            logDTO.setCreateTime(new Date());\n            baseCommonMapper.saveLog(logDTO);\n        } catch (Exception e) {\n            log.warn(\" LogContent length : \"+logDTO.getLogContent().length());\n            log.warn(e.getMessage());\n        }\n    }\n\n    @Override\n    public void addLog(String logContent, Integer logType, Integer operatetype, LoginUser user) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void addLog(String logContent, Integer logType, Integer operateType) {\n        addLog(logContent, logType, operateType, null);\n    }\n\n\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/156", "ground_truth": "\n        LogDTO sysLog = new LogDTO();\n        sysLog.setId(String.valueOf(IdWorker.getId()));\n        //\u6ce8\u89e3\u4e0a\u7684\u63cf\u8ff0,\u64cd\u4f5c\u65e5\u5fd7\u5185\u5bb9\n        sysLog.setLogContent(logContent);\n        sysLog.setLogType(logType);\n        sysLog.setOperateType(operatetype);\n        try {\n            //\u83b7\u53d6request\n            HttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n            //\u8bbe\u7f6eIP\u5730\u5740\n            sysLog.setIp(IpUtils.getIpAddr(request));\n        } catch (Exception e) {\n            sysLog.setIp(\"127.0.0.1\");\n        }\n        //\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n        if(user==null){\n            try {\n                user = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n            } catch (Exception e) {\n                //e.printStackTrace();\n            }\n        }\n        if(user!=null){\n            sysLog.setUserid(user.getUsername());\n            sysLog.setUsername(user.getRealname());\n        }\n        sysLog.setCreateTime(new Date());\n        //\u4fdd\u5b58\u65e5\u5fd7\uff08\u5f02\u5e38\u6355\u83b7\u5904\u7406\uff0c\u9632\u6b62\u6570\u636e\u592a\u5927\u5b58\u50a8\u5931\u8d25\uff0c\u5bfc\u81f4\u4e1a\u52a1\u5931\u8d25\uff09JT-238\n        try {\n            baseCommonMapper.saveLog(sysLog);\n        } catch (Exception e) {\n            log.warn(\" LogContent length : \"+sysLog.getLogContent().length());\n            log.warn(e.getMessage());\n        }\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "modules", "base", "service", "impl", "BaseCommonServiceImpl.java"], "context_start_lineno": 0, "function_name": "addLog", "left_context": "class BaseCommonServiceImpl implements BaseCommonService {\n\n    @Resource\n    private BaseCommonMapper baseCommonMapper;\n\n    @Override\n    public void addLog(LogDTO logDTO) {\n        if(oConvertUtils.isEmpty(logDTO.getId())){\n            logDTO.setId(String.valueOf(IdWorker.getId()));\n        }\n        //\u4fdd\u5b58\u65e5\u5fd7\uff08\u5f02\u5e38\u6355\u83b7\u5904\u7406\uff0c\u9632\u6b62\u6570\u636e\u592a\u5927\u5b58\u50a8\u5931\u8d25\uff0c\u5bfc\u81f4\u4e1a\u52a1\u5931\u8d25\uff09JT-238\n        try {\n            logDTO.setCreateTime(new Date());\n            baseCommonMapper.saveLog(logDTO);\n        } catch (Exception e) {\n            log.warn(\" LogContent length : \"+logDTO.getLogContent().length());\n            log.warn(e.getMessage());\n        }\n    }\n\n    @Override\n    public void addLog(String logContent, Integer logType, Integer operatetype, LoginUser user) {", "right_context": "}\n\n    @Override\n    public void addLog(String logContent, Integer logType, Integer operateType) {\n        addLog(logContent, logType, operateType, null);\n    }\n\n\n\n}", "class_name": "BaseCommonServiceImpl", "return_type": "void", "parameters": [{"type": "String", "name": "logContent"}, {"type": "Integer", "name": "logType"}, {"type": "Integer", "name": "operatetype"}, {"type": "LoginUser", "name": "user"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysDataLog implements Serializable {\n\tprivate static final long serialVersionUID = 1L;\n\t\n\t@TableId(type = IdType.ASSIGN_ID)\n    /**\n     * id\n     */\n\tprivate String id;\n\n    /**\n     * \u521b\u5efa\u4eba\u767b\u5f55\u540d\u79f0\n     */\n\tprivate String createBy;\n\n    /**\n     * \u521b\u5efa\u4eba\u771f\u5b9e\u540d\u79f0\n     */\n\tprivate String createName;\n\n    /**\n     * \u521b\u5efa\u65e5\u671f\n     */\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\tprivate Date createTime;\n\n    /**\n     * \u66f4\u65b0\u4eba\u767b\u5f55\u540d\u79f0\n     */\n\tprivate String updateBy;\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\n    /**\n     * \u66f4\u65b0\u65e5\u671f\n     */\n    private Date updateTime;\n\n    /**\n     * \u8868\u540d\n     */\n    private String dataTable;\n\n    /**\n     * \u6570\u636eID\n     */\n    private String dataId;\n\n    /**\n     * \u6570\u636e\u5185\u5bb9\n     */\n    private String dataContent;\n\n    /**\n     * \u7248\u672c\u53f7\n     */\n    private String dataVersion;\n\n\n    //update-begin-author:taoyan date:2022-7-26 for: \u7528\u4e8e\u8868\u5355\u8bc4\u8bba\u8bb0\u5f55\u65e5\u5fd7 \u533a\u5206\u6570\u636e\n    /**\n     * \u7c7b\u578b\n     */\n    private String type;\n    //update-end-author:taoyan date:2022-7-26 for: \u7528\u4e8e\u8868\u5355\u8bc4\u8bba\u8bb0\u5f55\u65e5\u5fd7 \u533a\u5206\u6570\u636e\n\n    /**\n     * \u901a\u8fc7 loginUser \u8bbe\u7f6e createName\n     */\n    public void autoSetCreateName() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/167", "ground_truth": "\n        try {\n            LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n            this.setCreateName(sysUser.getRealname());\n        } catch (Exception e) {\n            log.warn(\"SecurityUtils.getSubject() \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5f02\u5e38\uff1a\" + e.getMessage());\n        }\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "entity", "SysDataLog.java"], "context_start_lineno": 0, "function_name": "autoSetCreateName", "left_context": "class SysDataLog implements Serializable {\n\tprivate static final long serialVersionUID = 1L;\n\t\n\t@TableId(type = IdType.ASSIGN_ID)\n    /**\n     * id\n     */\n\tprivate String id;\n\n    /**\n     * \u521b\u5efa\u4eba\u767b\u5f55\u540d\u79f0\n     */\n\tprivate String createBy;\n\n    /**\n     * \u521b\u5efa\u4eba\u771f\u5b9e\u540d\u79f0\n     */\n\tprivate String createName;\n\n    /**\n     * \u521b\u5efa\u65e5\u671f\n     */\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\tprivate Date createTime;\n\n    /**\n     * \u66f4\u65b0\u4eba\u767b\u5f55\u540d\u79f0\n     */\n\tprivate String updateBy;\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\n    /**\n     * \u66f4\u65b0\u65e5\u671f\n     */\n    private Date updateTime;\n\n    /**\n     * \u8868\u540d\n     */\n    private String dataTable;\n\n    /**\n     * \u6570\u636eID\n     */\n    private String dataId;\n\n    /**\n     * \u6570\u636e\u5185\u5bb9\n     */\n    private String dataContent;\n\n    /**\n     * \u7248\u672c\u53f7\n     */\n    private String dataVersion;\n\n\n    //update-begin-author:taoyan date:2022-7-26 for: \u7528\u4e8e\u8868\u5355\u8bc4\u8bba\u8bb0\u5f55\u65e5\u5fd7 \u533a\u5206\u6570\u636e\n    /**\n     * \u7c7b\u578b\n     */\n    private String type;\n    //update-end-author:taoyan date:2022-7-26 for: \u7528\u4e8e\u8868\u5355\u8bc4\u8bba\u8bb0\u5f55\u65e5\u5fd7 \u533a\u5206\u6570\u636e\n\n    /**\n     * \u901a\u8fc7 loginUser \u8bbe\u7f6e createName\n     */\n    public void autoSetCreateName() {", "right_context": "}\n\n}", "class_name": "SysDataLog", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-demo/src/main/java/org/jeecg/modules/demo/gpt/controller/ChatController.java\n// --------------------------------------------------\n// /** \n//  * \u521b\u5efasse\u8fde\u63a5\n//  * @return\n//  */\n// @GetMapping(value=\"/send\") public SseEmitter createConnect(@RequestParam(name=\"topicId\",required=false) String topicId,@RequestParam(name=\"message\",required=true) String message){\n//   SseEmitter sse=chatService.createChat();\n//   chatService.sendMessage(topicId,message);\n//   return sse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-demo/src/main/java/org/jeecg/modules/demo/gpt/service/ChatService.java\n// --------------------------------------------------\n// /** \n//  * \u521b\u5efaSSE\n//  * @return\n//  */\n// SseEmitter createChat();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ChatServiceImpl implements ChatService {\n\n    //update-begin---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n    private static final String CACHE_KEY_PREFIX = \"ai:chart:\";\n\n    /**\n     *\n     */\n    private static final String CACHE_KEY_MSG_CONTEXT = \"msg_content\";\n\n\n    /**\n     *\n     */\n    private static final String CACHE_KEY_MSG_HISTORY = \"msg_history\";\n\n    @Autowired\n    RedisTemplate redisTemplate;\n    //update-end---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n\n    private OpenAiStreamClient openAiStreamClient = null;\n\n    //update-begin---author:chenrui ---date:20240131  for\uff1a[QQYUN-8212]fix \u6ca1\u6709\u914d\u7f6e\u542f\u52a8\u62a5\u9519------------\n    public ChatServiceImpl() {\n        try {\n            this.openAiStreamClient = SpringContextUtils.getBean(OpenAiStreamClient.class);\n        } catch (Exception ignored) {\n        }\n    }\n\n    /**\n     * \u9632\u6b62client\u4e0d\u80fd\u6210\u529f\u6ce8\u5165\n     * @return\n     * @author chenrui\n     * @date 2024/2/3 23:08\n     */\n    private OpenAiStreamClient ensureClient(){\n        if(null == this.openAiStreamClient){\n            this.openAiStreamClient = SpringContextUtils.getBean(OpenAiStreamClient.class);\n        }\n        return this.openAiStreamClient;\n    }\n    //update-end---author:chenrui ---date:20240131  for\uff1a[QQYUN-8212]fix \u6ca1\u6709\u914d\u7f6e\u542f\u52a8\u62a5\u9519------------\n\n    private String getUserId() {\n        LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n        return sysUser.getId();\n    }\n\n    @Override\n    public SseEmitter createChat() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void closeChat() {\n        String uid = getUserId();\n        SseEmitter sse = (SseEmitter) LocalCache.CACHE.get(uid);\n        if (sse != null) {\n            sse.complete();\n            //\u79fb\u9664\n            LocalCache.CACHE.remove(uid);\n        }\n    }\n\n    @Override\n    public void sendMessage(String topicId, String message) {\n        String uid = getUserId();\n        if (StrUtil.isBlank(message)) {\n            log.info(\"\u53c2\u6570\u5f02\u5e38\uff0cmessage\u4e3anull\");\n            throw new BaseException(\"\u53c2\u6570\u5f02\u5e38\uff0cmessage\u4e0d\u80fd\u4e3a\u7a7a~\");\n        }\n        if (StrUtil.isBlank(topicId)) {\n            topicId = UUIDGenerator.generate();\n        }\n        //update-begin---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n        log.info(\"\u8bdd\u9898id:{}\", topicId);\n        String cacheKey = CACHE_KEY_PREFIX + uid + \"_\" + topicId;\n        String messageContext = (String) redisTemplate.opsForHash().get(cacheKey, CACHE_KEY_MSG_CONTEXT);\n        List<Message> msgHistory = new ArrayList<>();\n        if (StrUtil.isNotBlank(messageContext)) {\n            List<Message> messages = JSONArray.parseArray(messageContext, Message.class);\n            msgHistory = messages == null ? new ArrayList<>() : messages;\n        }\n        Message currentMessage = Message.builder().content(message).role(Message.Role.USER).build();\n        msgHistory.add(currentMessage);\n\n        SseEmitter sseEmitter = (SseEmitter) LocalCache.CACHE.get(uid);\n        if (sseEmitter == null) {\n            log.info(\"\u804a\u5929\u6d88\u606f\u63a8\u9001\u5931\u8d25uid:[{}],\u6ca1\u6709\u521b\u5efa\u8fde\u63a5\uff0c\u8bf7\u91cd\u8bd5\u3002\", uid);\n            throw new JeecgBootException(\"\u804a\u5929\u6d88\u606f\u63a8\u9001\u5931\u8d25uid:[{}],\u6ca1\u6709\u521b\u5efa\u8fde\u63a5\uff0c\u8bf7\u91cd\u8bd5\u3002~\");\n        }\n        OpenAISSEEventSourceListener openAIEventSourceListener = new OpenAISSEEventSourceListener(topicId, sseEmitter);\n        ChatCompletion completion = ChatCompletion\n                .builder()\n                .messages(msgHistory)\n                .model(ChatCompletion.Model.GPT_3_5_TURBO.getName())\n                .build();\n        ensureClient().streamChatCompletion(completion, openAIEventSourceListener);\n        redisTemplate.opsForHash().put(cacheKey, CACHE_KEY_MSG_CONTEXT, JSONUtil.toJsonStr(msgHistory));\n        //update-end---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n        Result.ok(completion.tokens());\n    }\n\n    //update-begin---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n    @Override\n    public Result<?> saveHistory(ChatHistoryVO chatHistoryVO) {\n        String uid = getUserId();\n        String cacheKey = CACHE_KEY_PREFIX + CACHE_KEY_MSG_HISTORY + \":\" + uid;\n        redisTemplate.opsForValue().set(cacheKey, chatHistoryVO.getContent());\n        return Result.OK(\"\u4fdd\u5b58\u6210\u529f\");\n    }\n\n    @Override\n    public Result<ChatHistoryVO> getHistoryByTopic() {\n        String uid = getUserId();\n        String cacheKey = CACHE_KEY_PREFIX + CACHE_KEY_MSG_HISTORY + \":\" + uid;\n        String historyContent = (String) redisTemplate.opsForValue().get(cacheKey);\n        ChatHistoryVO chatHistoryVO = new ChatHistoryVO();\n        chatHistoryVO.setContent(historyContent);\n        return Result.OK(chatHistoryVO);\n    }\n    //update-end---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/185", "ground_truth": "\n        String uid = getUserId();\n        //\u9ed8\u8ba430\u79d2\u8d85\u65f6,\u8bbe\u7f6e\u4e3a0L\u5219\u6c38\u4e0d\u8d85\u65f6\n        SseEmitter sseEmitter = new SseEmitter(-0L);\n        //\u5b8c\u6210\u540e\u56de\u8c03\n        sseEmitter.onCompletion(() -> {\n            log.info(\"[{}]\u7ed3\u675f\u8fde\u63a5...................\",uid);\n            LocalCache.CACHE.remove(uid);\n        });\n        //\u8d85\u65f6\u56de\u8c03\n        sseEmitter.onTimeout(() -> {\n            log.info(\"[{}]\u8fde\u63a5\u8d85\u65f6...................\", uid);\n        });\n        //\u5f02\u5e38\u56de\u8c03\n        sseEmitter.onError(\n                throwable -> {\n                    try {\n                        log.info(\"[{}]\u8fde\u63a5\u5f02\u5e38,{}\", uid, throwable.toString());\n                        sseEmitter.send(SseEmitter.event()\n                                .id(uid)\n                                .name(\"\u53d1\u751f\u5f02\u5e38\uff01\")\n                                .data(Message.builder().content(\"\u53d1\u751f\u5f02\u5e38\u8bf7\u91cd\u8bd5\uff01\").build())\n                                .reconnectTime(3000));\n                        LocalCache.CACHE.put(uid, sseEmitter);\n                    } catch (IOException e) {\n                        log.error(e.getMessage(),e);\n                    }\n                }\n        );\n        try {\n            sseEmitter.send(SseEmitter.event().reconnectTime(5000));\n        } catch (IOException e) {\n            log.error(e.getMessage(),e);\n        }\n        LocalCache.CACHE.put(uid, sseEmitter);\n        log.info(\"[{}]\u521b\u5efasse\u8fde\u63a5\u6210\u529f\uff01\", uid);\n        return sseEmitter;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-demo", "src", "main", "java", "org", "jeecg", "modules", "demo", "gpt", "service", "impl", "ChatServiceImpl.java"], "context_start_lineno": 0, "function_name": "createChat", "left_context": "class ChatServiceImpl implements ChatService {\n\n    //update-begin---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n    private static final String CACHE_KEY_PREFIX = \"ai:chart:\";\n\n    /**\n     *\n     */\n    private static final String CACHE_KEY_MSG_CONTEXT = \"msg_content\";\n\n\n    /**\n     *\n     */\n    private static final String CACHE_KEY_MSG_HISTORY = \"msg_history\";\n\n    @Autowired\n    RedisTemplate redisTemplate;\n    //update-end---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n\n    private OpenAiStreamClient openAiStreamClient = null;\n\n    //update-begin---author:chenrui ---date:20240131  for\uff1a[QQYUN-8212]fix \u6ca1\u6709\u914d\u7f6e\u542f\u52a8\u62a5\u9519------------\n    public ChatServiceImpl() {\n        try {\n            this.openAiStreamClient = SpringContextUtils.getBean(OpenAiStreamClient.class);\n        } catch (Exception ignored) {\n        }\n    }\n\n    /**\n     * \u9632\u6b62client\u4e0d\u80fd\u6210\u529f\u6ce8\u5165\n     * @return\n     * @author chenrui\n     * @date 2024/2/3 23:08\n     */\n    private OpenAiStreamClient ensureClient(){\n        if(null == this.openAiStreamClient){\n            this.openAiStreamClient = SpringContextUtils.getBean(OpenAiStreamClient.class);\n        }\n        return this.openAiStreamClient;\n    }\n    //update-end---author:chenrui ---date:20240131  for\uff1a[QQYUN-8212]fix \u6ca1\u6709\u914d\u7f6e\u542f\u52a8\u62a5\u9519------------\n\n    private String getUserId() {\n        LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n        return sysUser.getId();\n    }\n\n    @Override\n    public SseEmitter createChat() {", "right_context": "}\n\n    @Override\n    public void closeChat() {\n        String uid = getUserId();\n        SseEmitter sse = (SseEmitter) LocalCache.CACHE.get(uid);\n        if (sse != null) {\n            sse.complete();\n            //\u79fb\u9664\n            LocalCache.CACHE.remove(uid);\n        }\n    }\n\n    @Override\n    public void sendMessage(String topicId, String message) {\n        String uid = getUserId();\n        if (StrUtil.isBlank(message)) {\n            log.info(\"\u53c2\u6570\u5f02\u5e38\uff0cmessage\u4e3anull\");\n            throw new BaseException(\"\u53c2\u6570\u5f02\u5e38\uff0cmessage\u4e0d\u80fd\u4e3a\u7a7a~\");\n        }\n        if (StrUtil.isBlank(topicId)) {\n            topicId = UUIDGenerator.generate();\n        }\n        //update-begin---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n        log.info(\"\u8bdd\u9898id:{}\", topicId);\n        String cacheKey = CACHE_KEY_PREFIX + uid + \"_\" + topicId;\n        String messageContext = (String) redisTemplate.opsForHash().get(cacheKey, CACHE_KEY_MSG_CONTEXT);\n        List<Message> msgHistory = new ArrayList<>();\n        if (StrUtil.isNotBlank(messageContext)) {\n            List<Message> messages = JSONArray.parseArray(messageContext, Message.class);\n            msgHistory = messages == null ? new ArrayList<>() : messages;\n        }\n        Message currentMessage = Message.builder().content(message).role(Message.Role.USER).build();\n        msgHistory.add(currentMessage);\n\n        SseEmitter sseEmitter = (SseEmitter) LocalCache.CACHE.get(uid);\n        if (sseEmitter == null) {\n            log.info(\"\u804a\u5929\u6d88\u606f\u63a8\u9001\u5931\u8d25uid:[{}],\u6ca1\u6709\u521b\u5efa\u8fde\u63a5\uff0c\u8bf7\u91cd\u8bd5\u3002\", uid);\n            throw new JeecgBootException(\"\u804a\u5929\u6d88\u606f\u63a8\u9001\u5931\u8d25uid:[{}],\u6ca1\u6709\u521b\u5efa\u8fde\u63a5\uff0c\u8bf7\u91cd\u8bd5\u3002~\");\n        }\n        OpenAISSEEventSourceListener openAIEventSourceListener = new OpenAISSEEventSourceListener(topicId, sseEmitter);\n        ChatCompletion completion = ChatCompletion\n                .builder()\n                .messages(msgHistory)\n                .model(ChatCompletion.Model.GPT_3_5_TURBO.getName())\n                .build();\n        ensureClient().streamChatCompletion(completion, openAIEventSourceListener);\n        redisTemplate.opsForHash().put(cacheKey, CACHE_KEY_MSG_CONTEXT, JSONUtil.toJsonStr(msgHistory));\n        //update-end---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n        Result.ok(completion.tokens());\n    }\n\n    //update-begin---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n    @Override\n    public Result<?> saveHistory(ChatHistoryVO chatHistoryVO) {\n        String uid = getUserId();\n        String cacheKey = CACHE_KEY_PREFIX + CACHE_KEY_MSG_HISTORY + \":\" + uid;\n        redisTemplate.opsForValue().set(cacheKey, chatHistoryVO.getContent());\n        return Result.OK(\"\u4fdd\u5b58\u6210\u529f\");\n    }\n\n    @Override\n    public Result<ChatHistoryVO> getHistoryByTopic() {\n        String uid = getUserId();\n        String cacheKey = CACHE_KEY_PREFIX + CACHE_KEY_MSG_HISTORY + \":\" + uid;\n        String historyContent = (String) redisTemplate.opsForValue().get(cacheKey);\n        ChatHistoryVO chatHistoryVO = new ChatHistoryVO();\n        chatHistoryVO.setContent(historyContent);\n        return Result.OK(chatHistoryVO);\n    }\n    //update-end---author:chenrui ---date:20240223  for\uff1a[QQYUN-8225]\u804a\u5929\u8bb0\u5f55\u4fdd\u5b58------------\n}", "class_name": "ChatServiceImpl", "return_type": "SseEmitter", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysDataLogController {\n\t@Autowired\n\tprivate ISysDataLogService service;\n\t\n\t@RequestMapping(value = \"/list\", method = RequestMethod.GET)\n\tpublic Result<IPage<SysDataLog>> queryPageList(SysDataLog dataLog,@RequestParam(name=\"pageNo\", defaultValue=\"1\") Integer pageNo,\n\t\t\t\t\t\t\t\t\t  @RequestParam(name=\"pageSize\", defaultValue=\"10\") Integer pageSize,HttpServletRequest req) {\n\t\tResult<IPage<SysDataLog>> result = new Result<IPage<SysDataLog>>();\n\t\tdataLog.setType(CommonConstant.DATA_LOG_TYPE_JSON);\n\t\tQueryWrapper<SysDataLog> queryWrapper = QueryGenerator.initQueryWrapper(dataLog, req.getParameterMap());\n\t\tPage<SysDataLog> page = new Page<SysDataLog>(pageNo, pageSize);\n\t\tIPage<SysDataLog> pageList = service.page(page, queryWrapper);\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\uff1a\"+pageList.getCurrent());\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\u6570\u91cf\uff1a\"+pageList.getSize());\n\t\tlog.info(\"\u67e5\u8be2\u7ed3\u679c\u6570\u91cf\uff1a\"+pageList.getRecords().size());\n\t\tlog.info(\"\u6570\u636e\u603b\u6570\uff1a\"+pageList.getTotal());\n\t\tresult.setSuccess(true);\n\t\tresult.setResult(pageList);\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * \u67e5\u8be2\u5bf9\u6bd4\u6570\u636e\n\t * @param req\n\t * @return\n\t */\n\t@RequestMapping(value = \"/queryCompareList\", method = RequestMethod.GET)\n\tpublic Result<List<SysDataLog>> queryCompareList(HttpServletRequest req) {\n\t\tResult<List<SysDataLog>> result = new Result<>();\n\t\tString dataId1 = req.getParameter(\"dataId1\");\n\t\tString dataId2 = req.getParameter(\"dataId2\");\n\t\tList<String> idList = new ArrayList<String>();\n\t\tidList.add(dataId1);\n\t\tidList.add(dataId2);\n\t\ttry {\n\t\t\tList<SysDataLog> list =  (List<SysDataLog>) service.listByIds(idList);\n\t\t\tresult.setResult(list);\n\t\t\tresult.setSuccess(true);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(),e);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * \u67e5\u8be2\u7248\u672c\u4fe1\u606f\n\t * @param req\n\t * @return\n\t */\n\t@RequestMapping(value = \"/queryDataVerList\", method = RequestMethod.GET)\n\tpublic Result<List<SysDataLog>> queryDataVerList(HttpServletRequest req) {<FILL_FUNCTION_BODY>}\n\t\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/192", "ground_truth": "\n\t\tResult<List<SysDataLog>> result = new Result<>();\n\t\tString dataTable = req.getParameter(\"dataTable\");\n\t\tString dataId = req.getParameter(\"dataId\");\n\t\tQueryWrapper<SysDataLog> queryWrapper = new QueryWrapper<SysDataLog>();\n\t\tqueryWrapper.eq(\"data_table\", dataTable);\n\t\tqueryWrapper.eq(\"data_id\", dataId);\n\t\t//update-begin-author:taoyan date:2022-7-26 for: \u65b0\u589e\u67e5\u8be2\u6761\u4ef6-type\n\t\tString type = req.getParameter(\"type\");\n\t\tif (oConvertUtils.isNotEmpty(type)) {\n\t\t\tqueryWrapper.eq(\"type\", type);\n\t\t}\n\t\t// \u6309\u65f6\u95f4\u5012\u5e8f\u6392\n\t\tqueryWrapper.orderByDesc(\"create_time\");\n\t\t//update-end-author:taoyan date:2022-7-26 for:\u65b0\u589e\u67e5\u8be2\u6761\u4ef6-type\n\n\t\tList<SysDataLog> list = service.list(queryWrapper);\n\t\tif(list==null||list.size()<=0) {\n\t\t\tresult.error500(\"\u672a\u627e\u5230\u7248\u672c\u4fe1\u606f\");\n\t\t}else {\n\t\t\tresult.setResult(list);\n\t\t\tresult.setSuccess(true);\n\t\t}\n\t\treturn result;\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "controller", "SysDataLogController.java"], "context_start_lineno": 0, "function_name": "queryDataVerList", "left_context": "class SysDataLogController {\n\t@Autowired\n\tprivate ISysDataLogService service;\n\t\n\t@RequestMapping(value = \"/list\", method = RequestMethod.GET)\n\tpublic Result<IPage<SysDataLog>> queryPageList(SysDataLog dataLog,@RequestParam(name=\"pageNo\", defaultValue=\"1\") Integer pageNo,\n\t\t\t\t\t\t\t\t\t  @RequestParam(name=\"pageSize\", defaultValue=\"10\") Integer pageSize,HttpServletRequest req) {\n\t\tResult<IPage<SysDataLog>> result = new Result<IPage<SysDataLog>>();\n\t\tdataLog.setType(CommonConstant.DATA_LOG_TYPE_JSON);\n\t\tQueryWrapper<SysDataLog> queryWrapper = QueryGenerator.initQueryWrapper(dataLog, req.getParameterMap());\n\t\tPage<SysDataLog> page = new Page<SysDataLog>(pageNo, pageSize);\n\t\tIPage<SysDataLog> pageList = service.page(page, queryWrapper);\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\uff1a\"+pageList.getCurrent());\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\u6570\u91cf\uff1a\"+pageList.getSize());\n\t\tlog.info(\"\u67e5\u8be2\u7ed3\u679c\u6570\u91cf\uff1a\"+pageList.getRecords().size());\n\t\tlog.info(\"\u6570\u636e\u603b\u6570\uff1a\"+pageList.getTotal());\n\t\tresult.setSuccess(true);\n\t\tresult.setResult(pageList);\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * \u67e5\u8be2\u5bf9\u6bd4\u6570\u636e\n\t * @param req\n\t * @return\n\t */\n\t@RequestMapping(value = \"/queryCompareList\", method = RequestMethod.GET)\n\tpublic Result<List<SysDataLog>> queryCompareList(HttpServletRequest req) {\n\t\tResult<List<SysDataLog>> result = new Result<>();\n\t\tString dataId1 = req.getParameter(\"dataId1\");\n\t\tString dataId2 = req.getParameter(\"dataId2\");\n\t\tList<String> idList = new ArrayList<String>();\n\t\tidList.add(dataId1);\n\t\tidList.add(dataId2);\n\t\ttry {\n\t\t\tList<SysDataLog> list =  (List<SysDataLog>) service.listByIds(idList);\n\t\t\tresult.setResult(list);\n\t\t\tresult.setSuccess(true);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(),e);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * \u67e5\u8be2\u7248\u672c\u4fe1\u606f\n\t * @param req\n\t * @return\n\t */\n\t@RequestMapping(value = \"/queryDataVerList\", method = RequestMethod.GET)\n\tpublic Result<List<SysDataLog>> queryDataVerList(HttpServletRequest req) {", "right_context": "}\n\t\n}", "class_name": "SysDataLogController", "return_type": "Result<List<SysDataLog>>", "parameters": [{"type": "HttpServletRequest", "name": "req"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RandImageUtil {\n\n    public static final String KEY = \"JEECG_LOGIN_KEY\";\n\n    /**\n     * \u5b9a\u4e49\u56fe\u5f62\u5927\u5c0f\n     */\n    private static final int WIDTH = 105;\n    /**\n     * \u5b9a\u4e49\u56fe\u5f62\u5927\u5c0f\n     */\n    private static final int HEIGHT = 35;\n\n    /**\n     * \u5b9a\u4e49\u5e72\u6270\u7ebf\u6570\u91cf\n     */\n    private static final int COUNT = 200;\n\n    /**\n     * \u5e72\u6270\u7ebf\u7684\u957f\u5ea6=1.414*lineWidth\n     */\n    private static final int LINE_WIDTH = 2;\n\n    /**\n     * \u56fe\u7247\u683c\u5f0f\n     */\n    private static final String IMG_FORMAT = \"JPEG\";\n\n    /**\n     * base64 \u56fe\u7247\u524d\u7f00\n     */\n    private static final String BASE64_PRE = \"data:image/jpg;base64,\";\n\n    /**\n     * \u76f4\u63a5\u901a\u8fc7response \u8fd4\u56de\u56fe\u7247\n     * @param response\n     * @param resultCode\n     * @throws IOException\n     */\n    public static void generate(HttpServletResponse response, String resultCode) throws IOException {\n        BufferedImage image = getImageBuffer(resultCode);\n        // \u8f93\u51fa\u56fe\u8c61\u5230\u9875\u9762\n        ImageIO.write(image, IMG_FORMAT, response.getOutputStream());\n    }\n\n    /**\n     * \u751f\u6210base64\u5b57\u7b26\u4e32\n     * @param resultCode\n     * @return\n     * @throws IOException\n     */\n    public static String generate(String resultCode) throws IOException {\n        BufferedImage image = getImageBuffer(resultCode);\n\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        //\u5199\u5165\u6d41\u4e2d\n        ImageIO.write(image, IMG_FORMAT, byteStream);\n        //\u8f6c\u6362\u6210\u5b57\u8282\n        byte[] bytes = byteStream.toByteArray();\n        //\u8f6c\u6362\u6210base64\u4e32\n        String base64 = Base64.getEncoder().encodeToString(bytes).trim();\n        //\u5220\u9664 \\r\\n\n        base64 = base64.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n        //\u5199\u5230\u6307\u5b9a\u4f4d\u7f6e\n        //ImageIO.write(bufferedImage, \"png\", new File(\"\"));\n\n        return BASE64_PRE+base64;\n    }\n\n    private static BufferedImage getImageBuffer(String resultCode){\n        // \u5728\u5185\u5b58\u4e2d\u521b\u5efa\u56fe\u8c61\n        final BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n        // \u83b7\u53d6\u56fe\u5f62\u4e0a\u4e0b\u6587\n        final Graphics2D graphics = (Graphics2D) image.getGraphics();\n        // \u8bbe\u5b9a\u80cc\u666f\u989c\u8272\n        // ---1\n        graphics.setColor(Color.WHITE);\n        graphics.fillRect(0, 0, WIDTH, HEIGHT);\n        // \u8bbe\u5b9a\u8fb9\u6846\u989c\u8272\n//\t\tgraphics.setColor(getRandColor(100, 200)); // ---2\n        graphics.drawRect(0, 0, WIDTH - 1, HEIGHT - 1);\n\n        // SHA1PRNG\u662f-\u79cd\u5e38\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5,\u5904\u7406\u5f31\u968f\u673a\u6570\u95ee\u9898\n        SecureRandom random;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            random = new SecureRandom();\n        }\n        // \u968f\u673a\u4ea7\u751f\u5e72\u6270\u7ebf\uff0c\u4f7f\u56fe\u8c61\u4e2d\u7684\u8ba4\u8bc1\u7801\u4e0d\u6613\u88ab\u5176\u5b83\u7a0b\u5e8f\u63a2\u6d4b\u5230\n        for (int i = 0; i < COUNT; i++) {\n            // ---3\n            graphics.setColor(getRandColor(150, 200));\n\n            // \u4fdd\u8bc1\u753b\u5728\u8fb9\u6846\u4e4b\u5185\n            final int x = random.nextInt(WIDTH - LINE_WIDTH - 1) + 1;\n            final int y = random.nextInt(HEIGHT - LINE_WIDTH - 1) + 1;\n            final int xl = random.nextInt(LINE_WIDTH);\n            final int yl = random.nextInt(LINE_WIDTH);\n            graphics.drawLine(x, y, x + xl, y + yl);\n        }\n        // \u53d6\u968f\u673a\u4ea7\u751f\u7684\u8ba4\u8bc1\u7801\n        for (int i = 0; i < resultCode.length(); i++) {\n            // \u5c06\u8ba4\u8bc1\u7801\u663e\u793a\u5230\u56fe\u8c61\u4e2d,\u8c03\u7528\u51fd\u6570\u51fa\u6765\u7684\u989c\u8272\u76f8\u540c\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u79cd\u5b50\u592a\u63a5\u8fd1\uff0c\u6240\u4ee5\u53ea\u80fd\u76f4\u63a5\u751f\u6210\n            // graphics.setColor(new Color(20 + random.nextInt(130), 20 + random\n            // .nextInt(130), 20 + random.nextInt(130)));\n            // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n            graphics.setColor(Color.BLACK);\n            // \u8bbe\u7f6e\u5b57\u4f53\u6837\u5f0f\n//\t\t\tgraphics.setFont(new Font(\"Arial Black\", Font.ITALIC, 18));\n            graphics.setFont(new Font(\"Times New Roman\", Font.BOLD, 24));\n            // \u8bbe\u7f6e\u5b57\u7b26\uff0c\u5b57\u7b26\u95f4\u8ddd\uff0c\u4e0a\u8fb9\u8ddd\n            graphics.drawString(String.valueOf(resultCode.charAt(i)), (23 * i) + 8, 26);\n        }\n        // \u56fe\u8c61\u751f\u6548\n        graphics.dispose();\n        return image;\n    }\n\n    private static Color getRandColor(int fc, int bc) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/202", "ground_truth": " // \u53d6\u5f97\u7ed9\u5b9a\u8303\u56f4\u968f\u673a\u989c\u8272\n        final Random random = new Random();\n        int length = 255;\n        if (fc > length) {\n            fc = length;\n        }\n        if (bc > length) {\n            bc = length;\n        }\n\n        final int r = fc + random.nextInt(bc - fc);\n        final int g = fc + random.nextInt(bc - fc);\n        final int b = fc + random.nextInt(bc - fc);\n\n        return new Color(r, g, b);\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "util", "RandImageUtil.java"], "context_start_lineno": 0, "function_name": "getRandColor", "left_context": "class RandImageUtil {\n\n    public static final String KEY = \"JEECG_LOGIN_KEY\";\n\n    /**\n     * \u5b9a\u4e49\u56fe\u5f62\u5927\u5c0f\n     */\n    private static final int WIDTH = 105;\n    /**\n     * \u5b9a\u4e49\u56fe\u5f62\u5927\u5c0f\n     */\n    private static final int HEIGHT = 35;\n\n    /**\n     * \u5b9a\u4e49\u5e72\u6270\u7ebf\u6570\u91cf\n     */\n    private static final int COUNT = 200;\n\n    /**\n     * \u5e72\u6270\u7ebf\u7684\u957f\u5ea6=1.414*lineWidth\n     */\n    private static final int LINE_WIDTH = 2;\n\n    /**\n     * \u56fe\u7247\u683c\u5f0f\n     */\n    private static final String IMG_FORMAT = \"JPEG\";\n\n    /**\n     * base64 \u56fe\u7247\u524d\u7f00\n     */\n    private static final String BASE64_PRE = \"data:image/jpg;base64,\";\n\n    /**\n     * \u76f4\u63a5\u901a\u8fc7response \u8fd4\u56de\u56fe\u7247\n     * @param response\n     * @param resultCode\n     * @throws IOException\n     */\n    public static void generate(HttpServletResponse response, String resultCode) throws IOException {\n        BufferedImage image = getImageBuffer(resultCode);\n        // \u8f93\u51fa\u56fe\u8c61\u5230\u9875\u9762\n        ImageIO.write(image, IMG_FORMAT, response.getOutputStream());\n    }\n\n    /**\n     * \u751f\u6210base64\u5b57\u7b26\u4e32\n     * @param resultCode\n     * @return\n     * @throws IOException\n     */\n    public static String generate(String resultCode) throws IOException {\n        BufferedImage image = getImageBuffer(resultCode);\n\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        //\u5199\u5165\u6d41\u4e2d\n        ImageIO.write(image, IMG_FORMAT, byteStream);\n        //\u8f6c\u6362\u6210\u5b57\u8282\n        byte[] bytes = byteStream.toByteArray();\n        //\u8f6c\u6362\u6210base64\u4e32\n        String base64 = Base64.getEncoder().encodeToString(bytes).trim();\n        //\u5220\u9664 \\r\\n\n        base64 = base64.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n        //\u5199\u5230\u6307\u5b9a\u4f4d\u7f6e\n        //ImageIO.write(bufferedImage, \"png\", new File(\"\"));\n\n        return BASE64_PRE+base64;\n    }\n\n    private static BufferedImage getImageBuffer(String resultCode){\n        // \u5728\u5185\u5b58\u4e2d\u521b\u5efa\u56fe\u8c61\n        final BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n        // \u83b7\u53d6\u56fe\u5f62\u4e0a\u4e0b\u6587\n        final Graphics2D graphics = (Graphics2D) image.getGraphics();\n        // \u8bbe\u5b9a\u80cc\u666f\u989c\u8272\n        // ---1\n        graphics.setColor(Color.WHITE);\n        graphics.fillRect(0, 0, WIDTH, HEIGHT);\n        // \u8bbe\u5b9a\u8fb9\u6846\u989c\u8272\n//\t\tgraphics.setColor(getRandColor(100, 200)); // ---2\n        graphics.drawRect(0, 0, WIDTH - 1, HEIGHT - 1);\n\n        // SHA1PRNG\u662f-\u79cd\u5e38\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5,\u5904\u7406\u5f31\u968f\u673a\u6570\u95ee\u9898\n        SecureRandom random;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            random = new SecureRandom();\n        }\n        // \u968f\u673a\u4ea7\u751f\u5e72\u6270\u7ebf\uff0c\u4f7f\u56fe\u8c61\u4e2d\u7684\u8ba4\u8bc1\u7801\u4e0d\u6613\u88ab\u5176\u5b83\u7a0b\u5e8f\u63a2\u6d4b\u5230\n        for (int i = 0; i < COUNT; i++) {\n            // ---3\n            graphics.setColor(getRandColor(150, 200));\n\n            // \u4fdd\u8bc1\u753b\u5728\u8fb9\u6846\u4e4b\u5185\n            final int x = random.nextInt(WIDTH - LINE_WIDTH - 1) + 1;\n            final int y = random.nextInt(HEIGHT - LINE_WIDTH - 1) + 1;\n            final int xl = random.nextInt(LINE_WIDTH);\n            final int yl = random.nextInt(LINE_WIDTH);\n            graphics.drawLine(x, y, x + xl, y + yl);\n        }\n        // \u53d6\u968f\u673a\u4ea7\u751f\u7684\u8ba4\u8bc1\u7801\n        for (int i = 0; i < resultCode.length(); i++) {\n            // \u5c06\u8ba4\u8bc1\u7801\u663e\u793a\u5230\u56fe\u8c61\u4e2d,\u8c03\u7528\u51fd\u6570\u51fa\u6765\u7684\u989c\u8272\u76f8\u540c\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u79cd\u5b50\u592a\u63a5\u8fd1\uff0c\u6240\u4ee5\u53ea\u80fd\u76f4\u63a5\u751f\u6210\n            // graphics.setColor(new Color(20 + random.nextInt(130), 20 + random\n            // .nextInt(130), 20 + random.nextInt(130)));\n            // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n            graphics.setColor(Color.BLACK);\n            // \u8bbe\u7f6e\u5b57\u4f53\u6837\u5f0f\n//\t\t\tgraphics.setFont(new Font(\"Arial Black\", Font.ITALIC, 18));\n            graphics.setFont(new Font(\"Times New Roman\", Font.BOLD, 24));\n            // \u8bbe\u7f6e\u5b57\u7b26\uff0c\u5b57\u7b26\u95f4\u8ddd\uff0c\u4e0a\u8fb9\u8ddd\n            graphics.drawString(String.valueOf(resultCode.charAt(i)), (23 * i) + 8, 26);\n        }\n        // \u56fe\u8c61\u751f\u6548\n        graphics.dispose();\n        return image;\n    }\n\n    private static Color getRandColor(int fc, int bc) {", "right_context": "}\n}", "class_name": "RandImageUtil", "return_type": "Color", "parameters": [{"type": "int", "name": "fc"}, {"type": "int", "name": "bc"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysRolePermissionServiceImpl extends ServiceImpl<SysRolePermissionMapper, SysRolePermission> implements ISysRolePermissionService {\n\n\t@Override\n\tpublic void saveRolePermission(String roleId, String permissionIds) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic void saveRolePermission(String roleId, String permissionIds, String lastPermissionIds) {\n\t\tString ip = \"\";\n\t\ttry {\n\t\t\t//\u83b7\u53d6request\n\t\t\tHttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n\t\t\t//\u83b7\u53d6IP\u5730\u5740\n\t\t\tip = IpUtils.getIpAddr(request);\n\t\t} catch (Exception e) {\n\t\t\tip = \"127.0.0.1\";\n\t\t}\n\t\tList<String> add = getDiff(lastPermissionIds,permissionIds);\n\t\tif(add!=null && add.size()>0) {\n\t\t\tList<SysRolePermission> list = new ArrayList<SysRolePermission>();\n\t\t\tfor (String p : add) {\n\t\t\t\tif(oConvertUtils.isNotEmpty(p)) {\n\t\t\t\t\tSysRolePermission rolepms = new SysRolePermission(roleId, p);\n\t\t\t\t\trolepms.setOperateDate(new Date());\n\t\t\t\t\trolepms.setOperateIp(ip);\n\t\t\t\t\tlist.add(rolepms);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.saveBatch(list);\n\t\t}\n\t\t\n\t\tList<String> delete = getDiff(permissionIds,lastPermissionIds);\n\t\tif(delete!=null && delete.size()>0) {\n\t\t\tfor (String permissionId : delete) {\n\t\t\t\tthis.remove(new QueryWrapper<SysRolePermission>().lambda().eq(SysRolePermission::getRoleId, roleId).eq(SysRolePermission::getPermissionId, permissionId));\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * \u4ecediff\u4e2d\u627e\u51famain\u4e2d\u6ca1\u6709\u7684\u5143\u7d20\n\t * @param main\n\t * @param diff\n\t * @return\n\t */\n\tprivate List<String> getDiff(String main,String diff){\n\t\tif(oConvertUtils.isEmpty(diff)) {\n\t\t\treturn null;\n\t\t}\n\t\tif(oConvertUtils.isEmpty(main)) {\n\t\t\treturn Arrays.asList(diff.split(\",\"));\n\t\t}\n\t\t\n\t\tString[] mainArr = main.split(\",\");\n\t\tString[] diffArr = diff.split(\",\");\n\t\tMap<String, Integer> map = new HashMap(5);\n\t\tfor (String string : mainArr) {\n\t\t\tmap.put(string, 1);\n\t\t}\n\t\tList<String> res = new ArrayList<String>();\n\t\tfor (String key : diffArr) {\n\t\t\tif(oConvertUtils.isNotEmpty(key) && !map.containsKey(key)) {\n\t\t\t\tres.add(key);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/206", "ground_truth": "\n\t\tString ip = \"\";\n\t\ttry {\n\t\t\t//\u83b7\u53d6request\n\t\t\tHttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n\t\t\t//\u83b7\u53d6IP\u5730\u5740\n\t\t\tip = IpUtils.getIpAddr(request);\n\t\t} catch (Exception e) {\n\t\t\tip = \"127.0.0.1\";\n\t\t}\n\t\tLambdaQueryWrapper<SysRolePermission> query = new QueryWrapper<SysRolePermission>().lambda().eq(SysRolePermission::getRoleId, roleId);\n\t\tthis.remove(query);\n\t\tList<SysRolePermission> list = new ArrayList<SysRolePermission>();\n        String[] arr = permissionIds.split(\",\");\n\t\tfor (String p : arr) {\n\t\t\tif(oConvertUtils.isNotEmpty(p)) {\n\t\t\t\tSysRolePermission rolepms = new SysRolePermission(roleId, p);\n\t\t\t\trolepms.setOperateDate(new Date());\n\t\t\t\trolepms.setOperateIp(ip);\n\t\t\t\tlist.add(rolepms);\n\t\t\t}\n\t\t}\n\t\tthis.saveBatch(list);\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "service", "impl", "SysRolePermissionServiceImpl.java"], "context_start_lineno": 0, "function_name": "saveRolePermission", "left_context": "class SysRolePermissionServiceImpl extends ServiceImpl<SysRolePermissionMapper, SysRolePermission> implements ISysRolePermissionService {\n\n\t@Override\n\tpublic void saveRolePermission(String roleId, String permissionIds) {", "right_context": "}\n\n\t@Override\n\tpublic void saveRolePermission(String roleId, String permissionIds, String lastPermissionIds) {\n\t\tString ip = \"\";\n\t\ttry {\n\t\t\t//\u83b7\u53d6request\n\t\t\tHttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n\t\t\t//\u83b7\u53d6IP\u5730\u5740\n\t\t\tip = IpUtils.getIpAddr(request);\n\t\t} catch (Exception e) {\n\t\t\tip = \"127.0.0.1\";\n\t\t}\n\t\tList<String> add = getDiff(lastPermissionIds,permissionIds);\n\t\tif(add!=null && add.size()>0) {\n\t\t\tList<SysRolePermission> list = new ArrayList<SysRolePermission>();\n\t\t\tfor (String p : add) {\n\t\t\t\tif(oConvertUtils.isNotEmpty(p)) {\n\t\t\t\t\tSysRolePermission rolepms = new SysRolePermission(roleId, p);\n\t\t\t\t\trolepms.setOperateDate(new Date());\n\t\t\t\t\trolepms.setOperateIp(ip);\n\t\t\t\t\tlist.add(rolepms);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.saveBatch(list);\n\t\t}\n\t\t\n\t\tList<String> delete = getDiff(permissionIds,lastPermissionIds);\n\t\tif(delete!=null && delete.size()>0) {\n\t\t\tfor (String permissionId : delete) {\n\t\t\t\tthis.remove(new QueryWrapper<SysRolePermission>().lambda().eq(SysRolePermission::getRoleId, roleId).eq(SysRolePermission::getPermissionId, permissionId));\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * \u4ecediff\u4e2d\u627e\u51famain\u4e2d\u6ca1\u6709\u7684\u5143\u7d20\n\t * @param main\n\t * @param diff\n\t * @return\n\t */\n\tprivate List<String> getDiff(String main,String diff){\n\t\tif(oConvertUtils.isEmpty(diff)) {\n\t\t\treturn null;\n\t\t}\n\t\tif(oConvertUtils.isEmpty(main)) {\n\t\t\treturn Arrays.asList(diff.split(\",\"));\n\t\t}\n\t\t\n\t\tString[] mainArr = main.split(\",\");\n\t\tString[] diffArr = diff.split(\",\");\n\t\tMap<String, Integer> map = new HashMap(5);\n\t\tfor (String string : mainArr) {\n\t\t\tmap.put(string, 1);\n\t\t}\n\t\tList<String> res = new ArrayList<String>();\n\t\tfor (String key : diffArr) {\n\t\t\tif(oConvertUtils.isNotEmpty(key) && !map.containsKey(key)) {\n\t\t\t\tres.add(key);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n}", "class_name": "SysRolePermissionServiceImpl", "return_type": "void", "parameters": [{"type": "String", "name": "roleId"}, {"type": "String", "name": "permissionIds"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ResourceCheckFilter extends AccessControlFilter {\n\n    private String errorUrl;\n\n    public String getErrorUrl() {\n        return errorUrl;\n    }\n\n    public void setErrorUrl(String errorUrl) {\n        this.errorUrl = errorUrl;\n    }\n\n    /**\n     * \u8868\u793a\u662f\u5426\u5141\u8bb8\u8bbf\u95ee \uff0c\u5982\u679c\u5141\u8bb8\u8bbf\u95ee\u8fd4\u56detrue\uff0c\u5426\u5219false\uff1b\n     *\n     * @param servletRequest\n     * @param servletResponse\n     * @param o               \u8868\u793a\u5199\u5728\u62e6\u622a\u5668\u4e2d\u62ec\u53f7\u91cc\u9762\u7684\u5b57\u7b26\u4e32 mappedValue \u5c31\u662f [urls] \u914d\u7f6e\u4e2d\u62e6\u622a\u5668\u53c2\u6570\u90e8\u5206\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean isAccessAllowed(ServletRequest servletRequest, ServletResponse servletResponse, Object o) throws Exception {\n        Subject subject = getSubject(servletRequest, servletResponse);\n        String url = getPathWithinApplication(servletRequest);\n        log.info(\"\u5f53\u524d\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u7684 url => \" + url);\n        return subject.isPermitted(url);\n    }\n\n    /**\n     * onAccessDenied\uff1a\u8868\u793a\u5f53\u8bbf\u95ee\u62d2\u7edd\u65f6\u662f\u5426\u5df2\u7ecf\u5904\u7406\u4e86\uff1b \u5982\u679c\u8fd4\u56de true \u8868\u793a\u9700\u8981\u7ee7\u7eed\u5904\u7406\uff1b \u5982\u679c\u8fd4\u56de false\n     * \u8868\u793a\u8be5\u62e6\u622a\u5668\u5b9e\u4f8b\u5df2\u7ecf\u5904\u7406\u4e86\uff0c\u5c06\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u3002\n     *\n     * @param servletRequest\n     * @param servletResponse\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/215", "ground_truth": "\n        log.info(\"\u5f53 isAccessAllowed \u8fd4\u56de false \u7684\u65f6\u5019\uff0c\u624d\u4f1a\u6267\u884c method onAccessDenied \");\n\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n        response.sendRedirect(request.getContextPath() + this.errorUrl);\n\n        // \u8fd4\u56de false \u8868\u793a\u5df2\u7ecf\u5904\u7406\uff0c\u4f8b\u5982\u9875\u9762\u8df3\u8f6c\u5565\u7684\uff0c\u8868\u793a\u4e0d\u5728\u8d70\u4ee5\u4e0b\u7684\u62e6\u622a\u5668\u4e86\uff08\u5982\u679c\u8fd8\u6709\u914d\u7f6e\u7684\u8bdd\uff09\n        return false;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "shiro", "filters", "ResourceCheckFilter.java"], "context_start_lineno": 0, "function_name": "onAccessDenied", "left_context": "class ResourceCheckFilter extends AccessControlFilter {\n\n    private String errorUrl;\n\n    public String getErrorUrl() {\n        return errorUrl;\n    }\n\n    public void setErrorUrl(String errorUrl) {\n        this.errorUrl = errorUrl;\n    }\n\n    /**\n     * \u8868\u793a\u662f\u5426\u5141\u8bb8\u8bbf\u95ee \uff0c\u5982\u679c\u5141\u8bb8\u8bbf\u95ee\u8fd4\u56detrue\uff0c\u5426\u5219false\uff1b\n     *\n     * @param servletRequest\n     * @param servletResponse\n     * @param o               \u8868\u793a\u5199\u5728\u62e6\u622a\u5668\u4e2d\u62ec\u53f7\u91cc\u9762\u7684\u5b57\u7b26\u4e32 mappedValue \u5c31\u662f [urls] \u914d\u7f6e\u4e2d\u62e6\u622a\u5668\u53c2\u6570\u90e8\u5206\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean isAccessAllowed(ServletRequest servletRequest, ServletResponse servletResponse, Object o) throws Exception {\n        Subject subject = getSubject(servletRequest, servletResponse);\n        String url = getPathWithinApplication(servletRequest);\n        log.info(\"\u5f53\u524d\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u7684 url => \" + url);\n        return subject.isPermitted(url);\n    }\n\n    /**\n     * onAccessDenied\uff1a\u8868\u793a\u5f53\u8bbf\u95ee\u62d2\u7edd\u65f6\u662f\u5426\u5df2\u7ecf\u5904\u7406\u4e86\uff1b \u5982\u679c\u8fd4\u56de true \u8868\u793a\u9700\u8981\u7ee7\u7eed\u5904\u7406\uff1b \u5982\u679c\u8fd4\u56de false\n     * \u8868\u793a\u8be5\u62e6\u622a\u5668\u5b9e\u4f8b\u5df2\u7ecf\u5904\u7406\u4e86\uff0c\u5c06\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u3002\n     *\n     * @param servletRequest\n     * @param servletResponse\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception {", "right_context": "}\n\n}", "class_name": "ResourceCheckFilter", "return_type": "boolean", "parameters": [{"type": "ServletRequest", "name": "servletRequest"}, {"type": "ServletResponse", "name": "servletResponse"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysDepart implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n\t/**ID*/\n\t@TableId(type = IdType.ASSIGN_ID)\n\tprivate String id;\n\t/**\u7236\u673a\u6784ID*/\n\tprivate String parentId;\n\t/**\u673a\u6784/\u90e8\u95e8\u540d\u79f0*/\n\t@Excel(name=\"\u673a\u6784/\u90e8\u95e8\u540d\u79f0\",width=15)\n\tprivate String departName;\n\t/**\u82f1\u6587\u540d*/\n\t@Excel(name=\"\u82f1\u6587\u540d\",width=15)\n\tprivate String departNameEn;\n\t/**\u7f29\u5199*/\n\tprivate String departNameAbbr;\n\t/**\u6392\u5e8f*/\n\t@Excel(name=\"\u6392\u5e8f\",width=15)\n\tprivate Integer departOrder;\n\t/**\u63cf\u8ff0*/\n\t@Excel(name=\"\u63cf\u8ff0\",width=15)\n\tprivate String description;\n\t/**\u673a\u6784\u7c7b\u522b 1=\u516c\u53f8\uff0c2=\u7ec4\u7ec7\u673a\u6784\uff0c3=\u5c97\u4f4d*/\n\t@Excel(name=\"\u673a\u6784\u7c7b\u522b\",width=15,dicCode=\"org_category\")\n\tprivate String orgCategory;\n\t/**\u673a\u6784\u7c7b\u578b*/\n\tprivate String orgType;\n\t/**\u673a\u6784\u7f16\u7801*/\n\t@Excel(name=\"\u673a\u6784\u7f16\u7801\",width=15)\n\tprivate String orgCode;\n\t/**\u624b\u673a\u53f7*/\n\t@Excel(name=\"\u624b\u673a\u53f7\",width=15)\n\tprivate String mobile;\n\t/**\u4f20\u771f*/\n\t@Excel(name=\"\u4f20\u771f\",width=15)\n\tprivate String fax;\n\t/**\u5730\u5740*/\n\t@Excel(name=\"\u5730\u5740\",width=15)\n\tprivate String address;\n\t/**\u5907\u6ce8*/\n\t@Excel(name=\"\u5907\u6ce8\",width=15)\n\tprivate String memo;\n\t/**\u72b6\u6001\uff081\u542f\u7528\uff0c0\u4e0d\u542f\u7528\uff09*/\n\t@Dict(dicCode = \"depart_status\")\n\tprivate String status;\n\t/**\u5220\u9664\u72b6\u6001\uff080\uff0c\u6b63\u5e38\uff0c1\u5df2\u5220\u9664\uff09*/\n\t@Dict(dicCode = \"del_flag\")\n\tprivate String delFlag;\n\t/**\u5bf9\u63a5\u4f01\u4e1a\u5fae\u4fe1\u7684ID*/\n\tprivate String qywxIdentifier;\n\t/**\u521b\u5efa\u4eba*/\n\tprivate String createBy;\n\t/**\u521b\u5efa\u65e5\u671f*/\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\tprivate Date createTime;\n\t/**\u66f4\u65b0\u4eba*/\n\tprivate String updateBy;\n\t/**\u66f4\u65b0\u65e5\u671f*/\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\tprivate Date updateTime;\n\t/**\u79df\u6237ID*/\n\tprivate java.lang.Integer tenantId;\n\n\t/**\u662f\u5426\u6709\u53f6\u5b50\u8282\u70b9: 1\u662f0\u5426*/\n\tprivate Integer izLeaf;\n\n    //update-begin---author:wangshuai ---date:20200308  for\uff1a[JTC-119]\u5728\u90e8\u95e8\u7ba1\u7406\u83dc\u5355\u4e0b\u8bbe\u7f6e\u90e8\u95e8\u8d1f\u8d23\u4eba\uff0c\u65b0\u589e\u5b57\u6bb5\u8d1f\u8d23\u4ebaids\u548c\u65e7\u7684\u8d1f\u8d23\u4ebaids\n    /**\u90e8\u95e8\u8d1f\u8d23\u4eba\u7684ids*/\n\t@TableField(exist = false)\n\tprivate String directorUserIds;\n    /**\u65e7\u7684\u90e8\u95e8\u8d1f\u8d23\u4eba\u7684ids(\u7528\u4e8e\u6bd4\u8f83\u5220\u9664\u548c\u65b0\u589e)*/\n\t@TableField(exist = false)\n    private String oldDirectorUserIds;\n    //update-end---author:wangshuai ---date:20200308  for\uff1a[JTC-119]\u65b0\u589e\u5b57\u6bb5\u8d1f\u8d23\u4ebaids\u548c\u65e7\u7684\u8d1f\u8d23\u4ebaids\n\t\n\t/**\n\t * \u91cd\u5199equals\u65b9\u6cd5\n\t */\n    @Override\n    public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u91cd\u5199hashCode\u65b9\u6cd5\n     */\n    @Override\n    public int hashCode() {\n        return Objects.hash(super.hashCode(), id, parentId, departName, \n        \t\tdepartNameEn, departNameAbbr, departOrder, description,orgCategory, \n        \t\torgType, orgCode, mobile, fax, address, memo, status, \n        \t\tdelFlag, createBy, createTime, updateBy, updateTime, tenantId);\n    }\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/223", "ground_truth": "\n        if (this == o) {\n\t\t\treturn true;\n\t\t}\n        if (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n        if (!super.equals(o)) {\n\t\t\treturn false;\n\t\t}\n        SysDepart depart = (SysDepart) o;\n        return Objects.equals(id, depart.id) &&\n                Objects.equals(parentId, depart.parentId) &&\n                Objects.equals(departName, depart.departName) &&\n                Objects.equals(departNameEn, depart.departNameEn) &&\n                Objects.equals(departNameAbbr, depart.departNameAbbr) &&\n                Objects.equals(departOrder, depart.departOrder) &&\n                Objects.equals(description, depart.description) &&\n                Objects.equals(orgCategory, depart.orgCategory) &&\n                Objects.equals(orgType, depart.orgType) &&\n                Objects.equals(orgCode, depart.orgCode) &&\n                Objects.equals(mobile, depart.mobile) &&\n                Objects.equals(fax, depart.fax) &&\n                Objects.equals(address, depart.address) &&\n                Objects.equals(memo, depart.memo) &&\n                Objects.equals(status, depart.status) &&\n                Objects.equals(delFlag, depart.delFlag) &&\n                Objects.equals(createBy, depart.createBy) &&\n                Objects.equals(createTime, depart.createTime) &&\n                Objects.equals(updateBy, depart.updateBy) &&\n                Objects.equals(tenantId, depart.tenantId) &&\n                Objects.equals(updateTime, depart.updateTime);\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "entity", "SysDepart.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class SysDepart implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n\t/**ID*/\n\t@TableId(type = IdType.ASSIGN_ID)\n\tprivate String id;\n\t/**\u7236\u673a\u6784ID*/\n\tprivate String parentId;\n\t/**\u673a\u6784/\u90e8\u95e8\u540d\u79f0*/\n\t@Excel(name=\"\u673a\u6784/\u90e8\u95e8\u540d\u79f0\",width=15)\n\tprivate String departName;\n\t/**\u82f1\u6587\u540d*/\n\t@Excel(name=\"\u82f1\u6587\u540d\",width=15)\n\tprivate String departNameEn;\n\t/**\u7f29\u5199*/\n\tprivate String departNameAbbr;\n\t/**\u6392\u5e8f*/\n\t@Excel(name=\"\u6392\u5e8f\",width=15)\n\tprivate Integer departOrder;\n\t/**\u63cf\u8ff0*/\n\t@Excel(name=\"\u63cf\u8ff0\",width=15)\n\tprivate String description;\n\t/**\u673a\u6784\u7c7b\u522b 1=\u516c\u53f8\uff0c2=\u7ec4\u7ec7\u673a\u6784\uff0c3=\u5c97\u4f4d*/\n\t@Excel(name=\"\u673a\u6784\u7c7b\u522b\",width=15,dicCode=\"org_category\")\n\tprivate String orgCategory;\n\t/**\u673a\u6784\u7c7b\u578b*/\n\tprivate String orgType;\n\t/**\u673a\u6784\u7f16\u7801*/\n\t@Excel(name=\"\u673a\u6784\u7f16\u7801\",width=15)\n\tprivate String orgCode;\n\t/**\u624b\u673a\u53f7*/\n\t@Excel(name=\"\u624b\u673a\u53f7\",width=15)\n\tprivate String mobile;\n\t/**\u4f20\u771f*/\n\t@Excel(name=\"\u4f20\u771f\",width=15)\n\tprivate String fax;\n\t/**\u5730\u5740*/\n\t@Excel(name=\"\u5730\u5740\",width=15)\n\tprivate String address;\n\t/**\u5907\u6ce8*/\n\t@Excel(name=\"\u5907\u6ce8\",width=15)\n\tprivate String memo;\n\t/**\u72b6\u6001\uff081\u542f\u7528\uff0c0\u4e0d\u542f\u7528\uff09*/\n\t@Dict(dicCode = \"depart_status\")\n\tprivate String status;\n\t/**\u5220\u9664\u72b6\u6001\uff080\uff0c\u6b63\u5e38\uff0c1\u5df2\u5220\u9664\uff09*/\n\t@Dict(dicCode = \"del_flag\")\n\tprivate String delFlag;\n\t/**\u5bf9\u63a5\u4f01\u4e1a\u5fae\u4fe1\u7684ID*/\n\tprivate String qywxIdentifier;\n\t/**\u521b\u5efa\u4eba*/\n\tprivate String createBy;\n\t/**\u521b\u5efa\u65e5\u671f*/\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\tprivate Date createTime;\n\t/**\u66f4\u65b0\u4eba*/\n\tprivate String updateBy;\n\t/**\u66f4\u65b0\u65e5\u671f*/\n\t@JsonFormat(timezone = \"GMT+8\",pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n\tprivate Date updateTime;\n\t/**\u79df\u6237ID*/\n\tprivate java.lang.Integer tenantId;\n\n\t/**\u662f\u5426\u6709\u53f6\u5b50\u8282\u70b9: 1\u662f0\u5426*/\n\tprivate Integer izLeaf;\n\n    //update-begin---author:wangshuai ---date:20200308  for\uff1a[JTC-119]\u5728\u90e8\u95e8\u7ba1\u7406\u83dc\u5355\u4e0b\u8bbe\u7f6e\u90e8\u95e8\u8d1f\u8d23\u4eba\uff0c\u65b0\u589e\u5b57\u6bb5\u8d1f\u8d23\u4ebaids\u548c\u65e7\u7684\u8d1f\u8d23\u4ebaids\n    /**\u90e8\u95e8\u8d1f\u8d23\u4eba\u7684ids*/\n\t@TableField(exist = false)\n\tprivate String directorUserIds;\n    /**\u65e7\u7684\u90e8\u95e8\u8d1f\u8d23\u4eba\u7684ids(\u7528\u4e8e\u6bd4\u8f83\u5220\u9664\u548c\u65b0\u589e)*/\n\t@TableField(exist = false)\n    private String oldDirectorUserIds;\n    //update-end---author:wangshuai ---date:20200308  for\uff1a[JTC-119]\u65b0\u589e\u5b57\u6bb5\u8d1f\u8d23\u4ebaids\u548c\u65e7\u7684\u8d1f\u8d23\u4ebaids\n\t\n\t/**\n\t * \u91cd\u5199equals\u65b9\u6cd5\n\t */\n    @Override\n    public boolean equals(Object o) {", "right_context": "}\n\n    /**\n     * \u91cd\u5199hashCode\u65b9\u6cd5\n     */\n    @Override\n    public int hashCode() {\n        return Objects.hash(super.hashCode(), id, parentId, departName, \n        \t\tdepartNameEn, departNameAbbr, departOrder, description,orgCategory, \n        \t\torgType, orgCode, mobile, fax, address, memo, status, \n        \t\tdelFlag, createBy, createTime, updateBy, updateTime, tenantId);\n    }\n}", "class_name": "SysDepart", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u3010\u4f01\u4e1a\u5fae\u4fe1\u3011[\u7528\u6237]\u5230\u672c\u5730\n//  * @param ids \u4f5c\u5e9f\n//  * @return\n//  */\n// @GetMapping(\"/sync/wechatEnterprise/user/toLocal\") public Result syncWechatEnterpriseUserToLocal(@RequestParam(value=\"ids\",required=false) String ids){\n//   return Result.error(\"\u7531\u4e8e\u4f01\u4e1a\u5fae\u4fe1\u63a5\u53e3\u8c03\u6574\uff0c\u540c\u6b65\u5230\u672c\u5730\u529f\u80fd\u5df2\u5931\u6548\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u672c\u5730[\u90e8\u95e8]\u5230\u3010\u4f01\u4e1a\u5fae\u4fe1\u3011\n//  * @param ids\n//  * @return\n//  */\n// @GetMapping(\"/sync/wechatEnterprise/depart/toApp\") public Result syncWechatEnterpriseDepartToApp(@RequestParam(value=\"ids\",required=false) String ids){\n//   Integer tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.QYWX.getType());\n//   if (null != config) {\n//     SyncInfoVo syncInfo=wechatEnterpriseService.syncLocalDepartmentToThirdApp(ids);\n//     if (syncInfo.getFailInfo().size() == 0) {\n//       return Result.OK(\"\u540c\u6b65\u6210\u529f\",null);\n//     }\n//  else {\n//       return Result.error(\"\u540c\u6b65\u5931\u8d25\",syncInfo);\n//     }\n//   }\n//   return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u3010\u4f01\u4e1a\u5fae\u4fe1\u3011[\u90e8\u95e8]\u5230\u672c\u5730\n//  * @param ids\n//  * @return\n//  */\n// @GetMapping(\"/sync/wechatEnterprise/depart/toLocal\") public Result syncWechatEnterpriseDepartToLocal(@RequestParam(value=\"ids\",required=false) String ids){\n//   return Result.error(\"\u7531\u4e8e\u4f01\u4e1a\u5fae\u4fe1\u63a5\u53e3\u8c03\u6574\uff0c\u4f01\u4e1a\u5fae\u4fe1\u540c\u6b65\u672c\u5730\u90e8\u95e8\u5931\u6548\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u672c\u5730[\u90e8\u95e8]\u5230\u3010\u9489\u9489\u3011\n//  * @param ids\n//  * @return\n//  */\n// @GetMapping(\"/sync/dingtalk/depart/toApp\") public Result syncDingtalkDepartToApp(@RequestParam(value=\"ids\",required=false) String ids){\n//   Integer tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.DD.getType());\n//   if (null != config) {\n//     SyncInfoVo syncInfo=dingtalkService.syncLocalDepartmentToThirdApp(ids);\n//     if (syncInfo.getFailInfo().size() == 0) {\n//       return Result.OK(\"\u540c\u6b65\u6210\u529f\",null);\n//     }\n//  else {\n//       return Result.error(\"\u540c\u6b65\u5931\u8d25\",syncInfo);\n//     }\n//   }\n//   return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u672c\u5730[\u7528\u6237]\u5230\u3010\u9489\u9489\u3011\n//  * @param ids\n//  * @return\n//  */\n// @GetMapping(\"/sync/dingtalk/user/toApp\") public Result syncDingtalkUserToApp(@RequestParam(value=\"ids\",required=false) String ids){\n//   int tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   SysThirdAppConfig appConfig=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.DD.getType());\n//   if (null != appConfig) {\n//     SyncInfoVo syncInfo=dingtalkService.syncLocalUserToThirdApp(ids);\n//     if (syncInfo.getFailInfo().size() == 0) {\n//       return Result.OK(\"\u540c\u6b65\u6210\u529f\",syncInfo);\n//     }\n//  else {\n//       return Result.error(\"\u540c\u6b65\u5931\u8d25\",syncInfo);\n//     }\n//   }\n//   return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u53d1\u9001\u6d88\u606f\u6d4b\u8bd5\n//  * @return\n//  */\n// @PostMapping(\"/sendMessageTest\") public Result sendMessageTest(@RequestBody JSONObject params,HttpServletRequest request){\n//   String app=params.getString(\"app\");\n//   boolean sendAll=params.getBooleanValue(\"sendAll\");\n//   String receiver=params.getString(\"receiver\");\n//   String content=params.getString(\"content\");\n//   int tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   String fromUser=JwtUtil.getUserNameByToken(request);\n//   String title=\"\u7b2c\u4e09\u65b9APP\u6d88\u606f\u6d4b\u8bd5\";\n//   MessageDTO message=new MessageDTO(fromUser,receiver,title,content);\n//   message.setToAll(sendAll);\n//   String weChatType=MessageTypeEnum.QYWX.getType();\n//   String dingType=MessageTypeEnum.DD.getType();\n//   if (weChatType.toUpperCase().equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,weChatType);\n//     if (null != config) {\n//       JSONObject response=wechatEnterpriseService.sendMessageResponse(message,false);\n//       return Result.OK(response);\n//     }\n//     return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\");\n//   }\n//  else   if (dingType.toUpperCase().equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,dingType);\n//     if (null != config) {\n//       Response<String> response=dingtalkService.sendMessageResponse(message,false);\n//       return Result.OK(response);\n//     }\n//     return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n//   }\n//   return Result.error(\"\u4e0d\u8bc6\u522b\u7684\u7b2c\u4e09\u65b9APP\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u64a4\u56de\u6d88\u606f\u6d4b\u8bd5\n//  * @return\n//  */\n// @PostMapping(\"/recallMessageTest\") public Result recallMessageTest(@RequestBody JSONObject params){\n//   String app=params.getString(\"app\");\n//   String msgTaskId=params.getString(\"msg_task_id\");\n//   int tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   if (CommonConstant.WECHAT_ENTERPRISE.equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.QYWX.getType());\n//     if (null != config) {\n//       return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u4e0d\u652f\u6301\u64a4\u56de\u6d88\u606f\");\n//     }\n//     return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\");\n//   }\n//  else   if (CommonConstant.DINGTALK.equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.DD.getType());\n//     if (null != config) {\n//       Response<JSONObject> response=dingtalkService.recallMessageResponse(msgTaskId);\n//       if (response.isSuccess()) {\n//         return Result.OK(\"\u64a4\u56de\u6210\u529f\",response);\n//       }\n//  else {\n//         return Result.error(\"\u64a4\u56de\u5931\u8d25\uff1a\" + response.getErrcode() + \"\u2014\u2014\"+ response.getErrmsg(),response);\n//       }\n//     }\n//     return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n//   }\n//   return Result.error(\"\u4e0d\u8bc6\u522b\u7684\u7b2c\u4e09\u65b9APP\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u3010\u9489\u9489\u3011[\u90e8\u95e8\u548c\u7528\u6237]\u5230\u672c\u5730\n//  * @param ids\n//  * @return\n//  */\n// @GetMapping(\"/sync/dingtalk/departAndUser/toLocal\") public Result syncDingTalkDepartAndUserToLocal(@RequestParam(value=\"ids\",required=false) String ids){\n//   Integer tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.DD.getType());\n//   if (null != config) {\n//     SyncInfoVo syncInfo=dingtalkService.syncThirdAppDepartmentUserToLocal();\n//     if (syncInfo.getFailInfo().size() == 0) {\n//       return Result.OK(\"\u540c\u6b65\u6210\u529f\",syncInfo);\n//     }\n//  else {\n//       return Result.error(\"\u540c\u6b65\u5931\u8d25\",syncInfo);\n//     }\n//   }\n//   return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysDataSourceService.java\n// --------------------------------------------------\n// /** \n//  * \u6dfb\u52a0\u6570\u636e\u6e90\n//  * @param sysDataSource\n//  * @return\n//  */\n// Result saveDataSource(SysDataSource sysDataSource);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysDataSourceService.java\n// --------------------------------------------------\n// /** \n//  * \u4fee\u6539\u6570\u636e\u6e90\n//  * @param sysDataSource\n//  * @return\n//  */\n// Result editDataSource(SysDataSource sysDataSource);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysDataSourceService.java\n// --------------------------------------------------\n// /** \n//  * \u5220\u9664\u6570\u636e\u6e90\n//  * @param id\n//  * @return\n//  */\n// Result deleteDataSource(String id);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysUserService.java\n// --------------------------------------------------\n// /** \n//  * \u6821\u9a8c\u7528\u6237\u662f\u5426\u6709\u6548\n//  * @param sysUser\n//  * @return\n//  */\n// Result checkUserIsEffective(SysUser sysUser);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysDataSourceServiceImpl.java\n// --------------------------------------------------\n// @Override public Result saveDataSource(SysDataSource sysDataSource){\n//   try {\n//     long count=checkDbCode(sysDataSource.getCode());\n//     if (count > 0) {\n//       return Result.error(\"\u6570\u636e\u6e90\u7f16\u7801\u5df2\u5b58\u5728\");\n//     }\n//     String dbPassword=sysDataSource.getDbPassword();\n//     if (StringUtils.isNotBlank(dbPassword)) {\n//       String encrypt=SecurityUtil.jiami(dbPassword);\n//       sysDataSource.setDbPassword(encrypt);\n//     }\n//     boolean result=save(sysDataSource);\n//     if (result) {\n//     }\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   return Result.OK(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysDataSourceServiceImpl.java\n// --------------------------------------------------\n// @Override public Result editDataSource(SysDataSource sysDataSource){\n//   try {\n//     SysDataSource d=getById(sysDataSource.getId());\n//     DataSourceCachePool.removeCache(d.getCode());\n//     String dbPassword=sysDataSource.getDbPassword();\n//     if (StringUtils.isNotBlank(dbPassword)) {\n//       String encrypt=SecurityUtil.jiami(dbPassword);\n//       sysDataSource.setDbPassword(encrypt);\n//     }\n//     Boolean result=updateById(sysDataSource);\n//     if (result) {\n//     }\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   return Result.OK(\"\u7f16\u8f91\u6210\u529f!\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysDataSourceServiceImpl.java\n// --------------------------------------------------\n// @Override public Result deleteDataSource(String id){\n//   SysDataSource sysDataSource=getById(id);\n//   DataSourceCachePool.removeCache(sysDataSource.getCode());\n//   removeById(id);\n//   return Result.OK(\"\u5220\u9664\u6210\u529f!\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysFillRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u6279\u91cf\u901a\u8fc7 ruleCode \u6267\u884c\u81ea\u5b9a\u4e49\u586b\u503c\u89c4\u5219\n//  * @param ruleData \u8981\u6267\u884c\u7684\u586b\u503c\u89c4\u5219JSON\u6570\u7ec4\uff1a\u793a\u4f8b\uff1a { \"commonFormData\": {}, rules: [ { \"ruleCode\": \"xxx\", \"formData\": null } ] }\n//  * @return \u8fd0\u884c\u540e\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u793a\u4f8b\uff1a [{\"ruleCode\": \"order_num_rule\", \"result\": \"CN2019111117212984\"}]\n//  */\n// @PutMapping(\"/executeRuleByCodeBatch\") public Result executeByRuleCodeBatch(@RequestBody JSONObject ruleData){\n//   JSONObject commonFormData=ruleData.getJSONObject(\"commonFormData\");\n//   JSONArray rules=ruleData.getJSONArray(\"rules\");\n//   JSONArray results=new JSONArray(rules.size());\n//   for (int i=0; i < rules.size(); i++) {\n//     JSONObject rule=rules.getJSONObject(i);\n//     String ruleCode=rule.getString(\"ruleCode\");\n//     JSONObject formData=rule.getJSONObject(\"formData\");\n//     if (formData == null) {\n//       formData=commonFormData;\n//     }\n//     Object result=FillRuleUtil.executeRule(ruleCode,formData);\n//     JSONObject obj=new JSONObject(rules.size());\n//     obj.put(\"ruleCode\",ruleCode);\n//     obj.put(\"result\",result);\n//     results.add(obj);\n//   }\n//   return Result.ok(results);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysFillRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7 ruleCode \u6267\u884c\u81ea\u5b9a\u4e49\u586b\u503c\u89c4\u5219\n//  * @param ruleCode \u8981\u6267\u884c\u7684\u586b\u503c\u89c4\u5219\u7f16\u7801\n//  * @param formData \u8868\u5355\u6570\u636e\uff0c\u53ef\u6839\u636e\u8868\u5355\u6570\u636e\u7684\u4e0d\u540c\u751f\u6210\u4e0d\u540c\u7684\u586b\u503c\u7ed3\u679c\n//  * @return \u8fd0\u884c\u540e\u7684\u7ed3\u679c\n//  */\n// @PutMapping(\"/executeRuleByCode/{ruleCode}\") public Result executeByRuleCode(@PathVariable(\"ruleCode\") String ruleCode,@RequestBody JSONObject formData){\n//   Object result=FillRuleUtil.executeRule(ruleCode,formData);\n//   return Result.ok(result);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysCheckRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param ruleCode\n//  * @return\n//  */\n// @AutoLog(value=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u901a\u8fc7Code\u6821\u9a8c\u4f20\u5165\u7684\u503c\") @ApiOperation(value=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u901a\u8fc7Code\u6821\u9a8c\u4f20\u5165\u7684\u503c\",notes=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u901a\u8fc7Code\u6821\u9a8c\u4f20\u5165\u7684\u503c\") @GetMapping(value=\"/checkByCode\") public Result checkByCode(@RequestParam(name=\"ruleCode\") String ruleCode,@RequestParam(name=\"value\") String value) throws UnsupportedEncodingException {\n//   SysCheckRule sysCheckRule=sysCheckRuleService.getByCode(ruleCode);\n//   if (sysCheckRule == null) {\n//     return Result.error(\"\u8be5\u7f16\u7801\u4e0d\u5b58\u5728\");\n//   }\n//   JSONObject errorResult=sysCheckRuleService.checkValue(sysCheckRule,URLDecoder.decode(value,\"UTF-8\"));\n//   if (errorResult == null) {\n//     return Result.ok();\n//   }\n//  else {\n//     Result<Object> r=Result.error(errorResult.getString(\"message\"));\n//     r.setResult(errorResult);\n//     return r;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysCheckRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7excel\u5bfc\u5165\u6570\u636e\n//  * @param request\n//  * @param response\n//  * @return\n//  */\n// @RequestMapping(value=\"/importExcel\",method=RequestMethod.POST) public Result importExcel(HttpServletRequest request,HttpServletResponse response){\n//   return super.importExcel(request,response,SysCheckRule.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysRoleService.java\n// --------------------------------------------------\n// /** \n//  * \u5bfc\u5165 excel \uff0c\u68c0\u67e5 roleCode \u7684\u552f\u4e00\u6027\n//  * @param file\n//  * @param params\n//  * @return\n//  * @throws Exception\n//  */\n// Result importExcelCheckRoleCode(MultipartFile file,ImportParams params) throws Exception ;\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysRoleServiceImpl extends ServiceImpl<SysRoleMapper, SysRole> implements ISysRoleService {\n    @Autowired\n    SysRoleMapper sysRoleMapper;\n    @Autowired\n    SysUserMapper sysUserMapper;\n\n    \n    @Override\n    public Page<SysRole> listAllSysRole(Page<SysRole> page, SysRole role) {\n        return page.setRecords(sysRoleMapper.listAllSysRole(page,role));\n    }\n\n    @Override\n    public SysRole getRoleNoTenant(String roleCode) {\n        return sysRoleMapper.getRoleNoTenant(roleCode);\n    }\n\n    @Override\n    public Result importExcelCheckRoleCode(MultipartFile file, ImportParams params) throws Exception {<FILL_FUNCTION_BODY>}\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public boolean deleteRole(String roleid) {\n        //1.\u5220\u9664\u89d2\u8272\u548c\u7528\u6237\u5173\u7cfb\n        sysRoleMapper.deleteRoleUserRelation(roleid);\n        //2.\u5220\u9664\u89d2\u8272\u548c\u6743\u9650\u5173\u7cfb\n        sysRoleMapper.deleteRolePermissionRelation(roleid);\n        //3.\u5220\u9664\u89d2\u8272\n        this.removeById(roleid);\n        return true;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public boolean deleteBatchRole(String[] roleIds) {\n        //1.\u5220\u9664\u89d2\u8272\u548c\u7528\u6237\u5173\u7cfb\n        sysUserMapper.deleteBathRoleUserRelation(roleIds);\n        //2.\u5220\u9664\u89d2\u8272\u548c\u6743\u9650\u5173\u7cfb\n        sysUserMapper.deleteBathRolePermissionRelation(roleIds);\n        //3.\u5220\u9664\u89d2\u8272\n        this.removeByIds(Arrays.asList(roleIds));\n        return true;\n    }\n\n    @Override\n    public Long getRoleCountByTenantId(String id, Integer tenantId) {\n        return sysRoleMapper.getRoleCountByTenantId(id,tenantId);\n    }\n\n    @Override\n    public void checkAdminRoleRejectDel(String ids) {\n        LambdaQueryWrapper<SysRole> query = new  LambdaQueryWrapper<>();\n        query.in(SysRole::getId,Arrays.asList(ids.split(SymbolConstant.COMMA)));\n        query.eq(SysRole::getRoleCode,\"admin\");\n        Long adminRoleCount = sysRoleMapper.selectCount(query);\n        if(adminRoleCount>0){\n            throw new JeecgBootException(\"admin\u89d2\u8272\uff0c\u4e0d\u5141\u8bb8\u5220\u9664\uff01\");\n        }\n    }\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/259", "ground_truth": "\n        List<Object> listSysRoles = ExcelImportUtil.importExcel(file.getInputStream(), SysRole.class, params);\n        int totalCount = listSysRoles.size();\n        List<String> errorStrs = new ArrayList<>();\n\n        // \u53bb\u9664 listSysRoles \u4e2d\u91cd\u590d\u7684\u6570\u636e\n        for (int i = 0; i < listSysRoles.size(); i++) {\n            String roleCodeI =((SysRole)listSysRoles.get(i)).getRoleCode();\n            for (int j = i + 1; j < listSysRoles.size(); j++) {\n                String roleCodeJ =((SysRole)listSysRoles.get(j)).getRoleCode();\n                // \u53d1\u73b0\u91cd\u590d\u6570\u636e\n                if (roleCodeI.equals(roleCodeJ)) {\n                    errorStrs.add(\"\u7b2c \" + (j + 1) + \" \u884c\u7684 roleCode \u503c\uff1a\" + roleCodeI + \" \u5df2\u5b58\u5728\uff0c\u5ffd\u7565\u5bfc\u5165\");\n                    listSysRoles.remove(j);\n                    break;\n                }\n            }\n        }\n        // \u53bb\u6389 sql \u4e2d\u7684\u91cd\u590d\u6570\u636e\n        Integer errorLines=0;\n        Integer successLines=0;\n        List<String> list = ImportExcelUtil.importDateSave(listSysRoles, ISysRoleService.class, errorStrs, CommonConstant.SQL_INDEX_UNIQ_SYS_ROLE_CODE);\n         errorLines+=list.size();\n         successLines+=(listSysRoles.size()-errorLines);\n        return ImportExcelUtil.imporReturnRes(errorLines,successLines,list);\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "service", "impl", "SysRoleServiceImpl.java"], "context_start_lineno": 0, "function_name": "importExcelCheckRoleCode", "left_context": "class SysRoleServiceImpl extends ServiceImpl<SysRoleMapper, SysRole> implements ISysRoleService {\n    @Autowired\n    SysRoleMapper sysRoleMapper;\n    @Autowired\n    SysUserMapper sysUserMapper;\n\n    \n    @Override\n    public Page<SysRole> listAllSysRole(Page<SysRole> page, SysRole role) {\n        return page.setRecords(sysRoleMapper.listAllSysRole(page,role));\n    }\n\n    @Override\n    public SysRole getRoleNoTenant(String roleCode) {\n        return sysRoleMapper.getRoleNoTenant(roleCode);\n    }\n\n    @Override\n    public Result importExcelCheckRoleCode(MultipartFile file, ImportParams params) throws Exception {", "right_context": "}\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public boolean deleteRole(String roleid) {\n        //1.\u5220\u9664\u89d2\u8272\u548c\u7528\u6237\u5173\u7cfb\n        sysRoleMapper.deleteRoleUserRelation(roleid);\n        //2.\u5220\u9664\u89d2\u8272\u548c\u6743\u9650\u5173\u7cfb\n        sysRoleMapper.deleteRolePermissionRelation(roleid);\n        //3.\u5220\u9664\u89d2\u8272\n        this.removeById(roleid);\n        return true;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public boolean deleteBatchRole(String[] roleIds) {\n        //1.\u5220\u9664\u89d2\u8272\u548c\u7528\u6237\u5173\u7cfb\n        sysUserMapper.deleteBathRoleUserRelation(roleIds);\n        //2.\u5220\u9664\u89d2\u8272\u548c\u6743\u9650\u5173\u7cfb\n        sysUserMapper.deleteBathRolePermissionRelation(roleIds);\n        //3.\u5220\u9664\u89d2\u8272\n        this.removeByIds(Arrays.asList(roleIds));\n        return true;\n    }\n\n    @Override\n    public Long getRoleCountByTenantId(String id, Integer tenantId) {\n        return sysRoleMapper.getRoleCountByTenantId(id,tenantId);\n    }\n\n    @Override\n    public void checkAdminRoleRejectDel(String ids) {\n        LambdaQueryWrapper<SysRole> query = new  LambdaQueryWrapper<>();\n        query.in(SysRole::getId,Arrays.asList(ids.split(SymbolConstant.COMMA)));\n        query.eq(SysRole::getRoleCode,\"admin\");\n        Long adminRoleCount = sysRoleMapper.selectCount(query);\n        if(adminRoleCount>0){\n            throw new JeecgBootException(\"admin\u89d2\u8272\uff0c\u4e0d\u5141\u8bb8\u5220\u9664\uff01\");\n        }\n    }\n}", "class_name": "SysRoleServiceImpl", "return_type": "Result", "parameters": [{"type": "MultipartFile", "name": "file"}, {"type": "ImportParams", "name": "params"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractQueryBlackListHandler {\n\n    /**\n     * key-\u8868\u540d\n     * value-\u5b57\u6bb5\u540d\uff0c\u591a\u4e2a\u9017\u53f7\u9694\u5f00\n     * \u4e24\u79cd\u914d\u7f6e\u65b9\u5f0f-- \u5168\u90e8\u914d\u7f6e\u6210\u5c0f\u5199\n     * ruleMap.put(\"sys_user\", \"*\")sys_user\u6240\u6709\u7684\u5b57\u6bb5\u4e0d\u652f\u6301\u67e5\u8be2\n     * ruleMap.put(\"sys_user\", \"username,password\")sys_user\u4e2d\u7684username\u548cpassword\u4e0d\u652f\u6301\u67e5\u8be2\n     */\n    public static Map<String, String> ruleMap = new HashMap<>();\n\n    /**\n     * \u4ee5\u4e0b\u5b57\u7b26\u4e0d\u80fd\u51fa\u73b0\u5728\u8868\u540d\u4e2d\u6216\u662f\u5b57\u6bb5\u540d\u4e2d\n     */\n    public static final Pattern ILLEGAL_NAME_REG = Pattern.compile(\"[-]{2,}\");\n\n    static {\n        ruleMap.put(\"sys_user\", \"password,salt\");\n    }\n\n\n    /**\n     * \u6839\u636e sql\u8bed\u53e5 \u83b7\u53d6\u8868\u548c\u5b57\u6bb5\u4fe1\u606f\uff0c\u9700\u8981\u5230\u5177\u4f53\u7684\u5b9e\u73b0\u7c7b\u91cd\u5199\u6b64\u65b9\u6cd5-\n     * \u4e0d\u540c\u7684\u573a\u666f \u5904\u7406\u53ef\u80fd\u4e0d\u592a\u4e00\u6837 \u9700\u8981\u81ea\u5b9a\u4e49\uff0c\u4f46\u662f\u8fd4\u56de\u503c\u786e\u5b9a\n     * @param sql\n     * @return\n     */\n    protected abstract List<QueryTable> getQueryTableInfo(String sql);\n\n\n    /**\n     * \u6821\u9a8csql\u8bed\u53e5 \u6210\u529f\u8fd4\u56detrue\n     * @param sql\n     * @return\n     */\n    public boolean isPass(String sql) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u6821\u9a8c\u8868\u540d\u548c\u5b57\u6bb5\u540d\u662f\u5426\u6709\u6548\uff0c\u6216\u662f\u662f\u5426\u4f1a\u5e26\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u4e32\u8fdb\u884csql\u6ce8\u5165\n     * issues/4983 SQL Injection in 3.5.1 #4983\n     * @return\n     */\n    private boolean checkTableAndFieldsName(List<QueryTable> list){\n        boolean flag = true;\n        for(QueryTable queryTable: list){\n            String tableName = queryTable.getName();\n            if(hasSpecialString(tableName)){\n                flag = false;\n                log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u540d\u3010\"+tableName+\"\u3011\u5305\u542b\u7279\u6b8a\u5b57\u7b26\");\n                break;\n            }\n            Set<String> fields = queryTable.getFields();\n            for(String name: fields){\n                if(hasSpecialString(name)){\n                    flag = false;\n                    log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u5b57\u6bb5\u540d\u3010\"+name+\"\u3011\u5305\u542b\u7279\u6b8a\u5b57\u7b26\");\n                    break;\n                } \n            }\n        }\n        return flag;\n    }\n\n    /**\n     * \u662f\u5426\u5305\u542b\u7279\u6b8a\u7684\u5b57\u7b26\u4e32\n     * @param name\n     * @return\n     */\n    private boolean hasSpecialString(String name){\n        Matcher m = ILLEGAL_NAME_REG.matcher(name);\n        if (m.find()) {\n            return true;\n        }\n        return false;\n    }\n    \n\n    /**\n     * \u67e5\u8be2\u7684\u8868\u7684\u4fe1\u606f\n     */\n    protected class QueryTable {\n        //\u8868\u540d\n        private String name;\n        //\u8868\u7684\u522b\u540d\n        private String alias;\n        // \u5b57\u6bb5\u540d\u96c6\u5408\n        private Set<String> fields;\n        // \u662f\u5426\u67e5\u8be2\u6240\u6709\u5b57\u6bb5\n        private boolean all;\n\n        public QueryTable() {\n        }\n\n        public QueryTable(String name, String alias) {\n            this.name = name;\n            this.alias = alias;\n            this.all = false;\n            this.fields = new HashSet<>();\n        }\n\n        public void addField(String field) {\n            this.fields.add(field);\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public Set<String> getFields() {\n            return new HashSet<>(fields);\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public void setFields(Set<String> fields) {\n            this.fields = fields;\n        }\n\n        public String getAlias() {\n            return alias;\n        }\n\n        public void setAlias(String alias) {\n            this.alias = alias;\n        }\n\n        public boolean isAll() {\n            return all;\n        }\n\n        public void setAll(boolean all) {\n            this.all = all;\n        }\n\n        /**\n         * \u5224\u65ad\u662f\u5426\u6709\u76f8\u540c\u5b57\u6bb5\n         *\n         * @param fieldString\n         * @return\n         */\n        public boolean existSameField(String fieldString) {\n            String[] controlFields = fieldString.split(\",\");\n            for (String sqlField : fields) {\n                for (String controlField : controlFields) {\n                    if (sqlField.equals(controlField)) {\n                        // \u975e\u5e38\u660e\u786e\u7684\u5217\u76f4\u63a5\u6bd4\u8f83\n                        log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u3010\"+name+\"\u3011\u4e2d\u5b57\u6bb5\u3010\"+controlField+\"\u3011\u7981\u6b62\u67e5\u8be2\");\n                        return true;\n                    } else {\n                        // \u4f7f\u7528\u8868\u8fbe\u5f0f\u7684\u5217 \u53ea\u80fd\u5224\u8bfb\u5b57\u7b26\u4e32\u5305\u542b\u4e86\n                        String aliasColumn = controlField;\n                        if (StringUtils.isNotBlank(alias)) {\n                            aliasColumn = alias + \".\" + controlField;\n                        }\n                        if (sqlField.indexOf(aliasColumn) != -1) {\n                            log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u3010\"+name+\"\u3011\u4e2d\u5b57\u6bb5\u3010\"+controlField+\"\u3011\u7981\u6b62\u67e5\u8be2\");\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        @Override\n        public String toString() {\n            return \"QueryTable{\" +\n                    \"name='\" + name + '\\'' +\n                    \", alias='\" + alias + '\\'' +\n                    \", fields=\" + fields +\n                    \", all=\" + all +\n                    '}';\n        }\n    }\n\n    public String getError(){\n        // TODO\n        return \"\u7cfb\u7edf\u8bbe\u7f6e\u4e86\u5b89\u5168\u89c4\u5219\uff0c\u654f\u611f\u8868\u548c\u654f\u611f\u5b57\u6bb5\u7981\u6b62\u67e5\u8be2\uff0c\u8054\u7cfb\u7ba1\u7406\u5458\u6388\u6743!\";\n    }\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/275", "ground_truth": "\n        List<QueryTable> list = null;\n        //\u3010jeecg-boot/issues/4040\u3011\u5728\u7ebf\u62a5\u8868\u4e0d\u652f\u6301\u5b50\u67e5\u8be2\uff0c\u89e3\u6790\u62a5\u9519 #4040\n        try {\n            list = this.getQueryTableInfo(sql.toLowerCase());\n        } catch (Exception e) {\n            log.warn(\"\u6821\u9a8csql\u8bed\u53e5\uff0c\u89e3\u6790\u62a5\u9519\uff1a{}\",e.getMessage());\n        }\n        \n        if(list==null){\n            return true;\n        }\n        log.info(\"  \u83b7\u53d6sql\u4fe1\u606f \uff1a{} \", list.toString());\n        boolean flag = checkTableAndFieldsName(list);\n        if(flag == false){\n            return false;\n        }\n        for (QueryTable table : list) {\n            String name = table.getName();\n            String fieldRule = ruleMap.get(name);\n            // \u6709\u6ca1\u6709\u914d\u7f6e\u8fd9\u5f20\u8868\n            if (fieldRule != null) {\n                if (\"*\".equals(fieldRule) || table.isAll()) {\n                    flag = false;\n                    log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u3010\"+name+\"\u3011\u7981\u6b62\u67e5\u8be2\");\n                    break;\n                } else if (table.existSameField(fieldRule)) {\n                    flag = false;\n                    break;\n                }\n\n            }\n        }\n\n        // \u8fd4\u56de\u9ed1\u540d\u5355\u6821\u9a8c\u7ed3\u679c\uff08\u4e0d\u5408\u6cd5\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff09\n        if(!flag){\n            log.error(this.getError());\n            throw new JeecgSqlInjectionException(this.getError());\n        }\n        return flag;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "common", "util", "security", "AbstractQueryBlackListHandler.java"], "context_start_lineno": 0, "function_name": "isPass", "left_context": "class AbstractQueryBlackListHandler {\n\n    /**\n     * key-\u8868\u540d\n     * value-\u5b57\u6bb5\u540d\uff0c\u591a\u4e2a\u9017\u53f7\u9694\u5f00\n     * \u4e24\u79cd\u914d\u7f6e\u65b9\u5f0f-- \u5168\u90e8\u914d\u7f6e\u6210\u5c0f\u5199\n     * ruleMap.put(\"sys_user\", \"*\")sys_user\u6240\u6709\u7684\u5b57\u6bb5\u4e0d\u652f\u6301\u67e5\u8be2\n     * ruleMap.put(\"sys_user\", \"username,password\")sys_user\u4e2d\u7684username\u548cpassword\u4e0d\u652f\u6301\u67e5\u8be2\n     */\n    public static Map<String, String> ruleMap = new HashMap<>();\n\n    /**\n     * \u4ee5\u4e0b\u5b57\u7b26\u4e0d\u80fd\u51fa\u73b0\u5728\u8868\u540d\u4e2d\u6216\u662f\u5b57\u6bb5\u540d\u4e2d\n     */\n    public static final Pattern ILLEGAL_NAME_REG = Pattern.compile(\"[-]{2,}\");\n\n    static {\n        ruleMap.put(\"sys_user\", \"password,salt\");\n    }\n\n\n    /**\n     * \u6839\u636e sql\u8bed\u53e5 \u83b7\u53d6\u8868\u548c\u5b57\u6bb5\u4fe1\u606f\uff0c\u9700\u8981\u5230\u5177\u4f53\u7684\u5b9e\u73b0\u7c7b\u91cd\u5199\u6b64\u65b9\u6cd5-\n     * \u4e0d\u540c\u7684\u573a\u666f \u5904\u7406\u53ef\u80fd\u4e0d\u592a\u4e00\u6837 \u9700\u8981\u81ea\u5b9a\u4e49\uff0c\u4f46\u662f\u8fd4\u56de\u503c\u786e\u5b9a\n     * @param sql\n     * @return\n     */\n    protected abstract List<QueryTable> getQueryTableInfo(String sql);\n\n\n    /**\n     * \u6821\u9a8csql\u8bed\u53e5 \u6210\u529f\u8fd4\u56detrue\n     * @param sql\n     * @return\n     */\n    public boolean isPass(String sql) {", "right_context": "}\n\n    /**\n     * \u6821\u9a8c\u8868\u540d\u548c\u5b57\u6bb5\u540d\u662f\u5426\u6709\u6548\uff0c\u6216\u662f\u662f\u5426\u4f1a\u5e26\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u4e32\u8fdb\u884csql\u6ce8\u5165\n     * issues/4983 SQL Injection in 3.5.1 #4983\n     * @return\n     */\n    private boolean checkTableAndFieldsName(List<QueryTable> list){\n        boolean flag = true;\n        for(QueryTable queryTable: list){\n            String tableName = queryTable.getName();\n            if(hasSpecialString(tableName)){\n                flag = false;\n                log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u540d\u3010\"+tableName+\"\u3011\u5305\u542b\u7279\u6b8a\u5b57\u7b26\");\n                break;\n            }\n            Set<String> fields = queryTable.getFields();\n            for(String name: fields){\n                if(hasSpecialString(name)){\n                    flag = false;\n                    log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u5b57\u6bb5\u540d\u3010\"+name+\"\u3011\u5305\u542b\u7279\u6b8a\u5b57\u7b26\");\n                    break;\n                } \n            }\n        }\n        return flag;\n    }\n\n    /**\n     * \u662f\u5426\u5305\u542b\u7279\u6b8a\u7684\u5b57\u7b26\u4e32\n     * @param name\n     * @return\n     */\n    private boolean hasSpecialString(String name){\n        Matcher m = ILLEGAL_NAME_REG.matcher(name);\n        if (m.find()) {\n            return true;\n        }\n        return false;\n    }\n    \n\n    /**\n     * \u67e5\u8be2\u7684\u8868\u7684\u4fe1\u606f\n     */\n    protected class QueryTable {\n        //\u8868\u540d\n        private String name;\n        //\u8868\u7684\u522b\u540d\n        private String alias;\n        // \u5b57\u6bb5\u540d\u96c6\u5408\n        private Set<String> fields;\n        // \u662f\u5426\u67e5\u8be2\u6240\u6709\u5b57\u6bb5\n        private boolean all;\n\n        public QueryTable() {\n        }\n\n        public QueryTable(String name, String alias) {\n            this.name = name;\n            this.alias = alias;\n            this.all = false;\n            this.fields = new HashSet<>();\n        }\n\n        public void addField(String field) {\n            this.fields.add(field);\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public Set<String> getFields() {\n            return new HashSet<>(fields);\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public void setFields(Set<String> fields) {\n            this.fields = fields;\n        }\n\n        public String getAlias() {\n            return alias;\n        }\n\n        public void setAlias(String alias) {\n            this.alias = alias;\n        }\n\n        public boolean isAll() {\n            return all;\n        }\n\n        public void setAll(boolean all) {\n            this.all = all;\n        }\n\n        /**\n         * \u5224\u65ad\u662f\u5426\u6709\u76f8\u540c\u5b57\u6bb5\n         *\n         * @param fieldString\n         * @return\n         */\n        public boolean existSameField(String fieldString) {\n            String[] controlFields = fieldString.split(\",\");\n            for (String sqlField : fields) {\n                for (String controlField : controlFields) {\n                    if (sqlField.equals(controlField)) {\n                        // \u975e\u5e38\u660e\u786e\u7684\u5217\u76f4\u63a5\u6bd4\u8f83\n                        log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u3010\"+name+\"\u3011\u4e2d\u5b57\u6bb5\u3010\"+controlField+\"\u3011\u7981\u6b62\u67e5\u8be2\");\n                        return true;\n                    } else {\n                        // \u4f7f\u7528\u8868\u8fbe\u5f0f\u7684\u5217 \u53ea\u80fd\u5224\u8bfb\u5b57\u7b26\u4e32\u5305\u542b\u4e86\n                        String aliasColumn = controlField;\n                        if (StringUtils.isNotBlank(alias)) {\n                            aliasColumn = alias + \".\" + controlField;\n                        }\n                        if (sqlField.indexOf(aliasColumn) != -1) {\n                            log.warn(\"sql\u9ed1\u540d\u5355\u6821\u9a8c\uff0c\u8868\u3010\"+name+\"\u3011\u4e2d\u5b57\u6bb5\u3010\"+controlField+\"\u3011\u7981\u6b62\u67e5\u8be2\");\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        @Override\n        public String toString() {\n            return \"QueryTable{\" +\n                    \"name='\" + name + '\\'' +\n                    \", alias='\" + alias + '\\'' +\n                    \", fields=\" + fields +\n                    \", all=\" + all +\n                    '}';\n        }\n    }\n\n    public String getError(){\n        // TODO\n        return \"\u7cfb\u7edf\u8bbe\u7f6e\u4e86\u5b89\u5168\u89c4\u5219\uff0c\u654f\u611f\u8868\u548c\u654f\u611f\u5b57\u6bb5\u7981\u6b62\u67e5\u8be2\uff0c\u8054\u7cfb\u7ba1\u7406\u5458\u6388\u6743!\";\n    }\n\n}", "class_name": "AbstractQueryBlackListHandler", "return_type": "boolean", "parameters": [{"type": "String", "name": "sql"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass QywxSendMsgHandle implements ISendMsgHandle {\n\n\t@Autowired\n\tprivate ThirdAppWechatEnterpriseServiceImpl wechatEnterpriseService;\n\n\t@Override\n\tpublic void sendMsg(String esReceiver, String esTitle, String esContent) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic void sendMessage(MessageDTO messageDTO) {\n\t\twechatEnterpriseService.sendMessage(messageDTO, true);\n\t}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/279", "ground_truth": "\n\t\tlog.info(\"\u53d1\u5fae\u4fe1\u6d88\u606f\u6a21\u677f\");\n\t\tMessageDTO messageDTO = new MessageDTO();\n\t\tmessageDTO.setToUser(esReceiver);\n\t\tmessageDTO.setTitle(esTitle);\n\t\tmessageDTO.setContent(esContent);\n\t\tmessageDTO.setToAll(false);\n\t\tsendMessage(messageDTO);\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "message", "handle", "impl", "QywxSendMsgHandle.java"], "context_start_lineno": 0, "function_name": "sendMsg", "left_context": "class QywxSendMsgHandle implements ISendMsgHandle {\n\n\t@Autowired\n\tprivate ThirdAppWechatEnterpriseServiceImpl wechatEnterpriseService;\n\n\t@Override\n\tpublic void sendMsg(String esReceiver, String esTitle, String esContent) {", "right_context": "}\n\n\t@Override\n\tpublic void sendMessage(MessageDTO messageDTO) {\n\t\twechatEnterpriseService.sendMessage(messageDTO, true);\n\t}\n\n}", "class_name": "QywxSendMsgHandle", "return_type": "void", "parameters": [{"type": "String", "name": "esReceiver"}, {"type": "String", "name": "esTitle"}, {"type": "String", "name": "esContent"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PermissionDataAspect {\n    @Lazy\n    @Autowired\n    private CommonAPI commonApi;\n\n    private static final String SPOT_DO = \".do\";\n\n    @Pointcut(\"@annotation(org.jeecg.common.aspect.annotation.PermissionData)\")\n    public void pointCut() {\n\n    }\n\n    @Around(\"pointCut()\")\n    public Object arround(ProceedingJoinPoint point) throws  Throwable{\n        HttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n        MethodSignature signature = (MethodSignature) point.getSignature();\n        Method method = signature.getMethod();\n        PermissionData pd = method.getAnnotation(PermissionData.class);\n        String component = pd.pageComponent();\n        String requestMethod = request.getMethod();\n        String requestPath = request.getRequestURI().substring(request.getContextPath().length());\n        requestPath = filterUrl(requestPath);\n        //update-begin-author:taoyan date:20211027 for:JTC-132\u3010online\u62a5\u8868\u6743\u9650\u3011online\u62a5\u8868\u5e26\u53c2\u6570\u7684\u83dc\u5355\u914d\u7f6e\u6570\u636e\u6743\u9650\u65e0\u6548\n        //\u5148\u5224\u65ad\u662f\u5426online\u62a5\u8868\u8bf7\u6c42\n        if(requestPath.indexOf(UrlMatchEnum.CGREPORT_DATA.getMatchUrl())>=0 || requestPath.indexOf(UrlMatchEnum.CGREPORT_ONLY_DATA.getMatchUrl())>=0){\n            // \u83b7\u53d6\u5730\u5740\u680f\u53c2\u6570\n            String urlParamString = request.getParameter(CommonConstant.ONL_REP_URL_PARAM_STR);\n            if(oConvertUtils.isNotEmpty(urlParamString)){\n                requestPath+=\"?\"+urlParamString;\n            }\n        }\n        //update-end-author:taoyan date:20211027 for:JTC-132\u3010online\u62a5\u8868\u6743\u9650\u3011online\u62a5\u8868\u5e26\u53c2\u6570\u7684\u83dc\u5355\u914d\u7f6e\u6570\u636e\u6743\u9650\u65e0\u6548\n        log.debug(\"\u62e6\u622a\u8bf7\u6c42 >> {} ; \u8bf7\u6c42\u7c7b\u578b >> {} . \", requestPath, requestMethod);\n        String username = JwtUtil.getUserNameByToken(request);\n        //\u67e5\u8be2\u6570\u636e\u6743\u9650\u4fe1\u606f\n        //TODO \u5fae\u670d\u52a1\u60c5\u51b5\u4e0b\u4e5f\u5f97\u652f\u6301\u7f13\u5b58\u673a\u5236\n        List<SysPermissionDataRuleModel> dataRules = commonApi.queryPermissionDataRule(component, requestPath, username);\n        if(dataRules!=null && dataRules.size()>0) {\n            //\u4e34\u65f6\u5b58\u50a8\n            JeecgDataAutorUtils.installDataSearchConditon(request, dataRules);\n            //TODO \u5fae\u670d\u52a1\u60c5\u51b5\u4e0b\u4e5f\u5f97\u652f\u6301\u7f13\u5b58\u673a\u5236\n            SysUserCacheInfo userinfo = commonApi.getCacheUser(username);\n            JeecgDataAutorUtils.installUserInfo(request, userinfo);\n        }\n        return  point.proceed();\n    }\n\n    private String filterUrl(String requestPath){\n        String url = \"\";\n        if(oConvertUtils.isNotEmpty(requestPath)){\n            url = requestPath.replace(\"\\\\\", \"/\");\n            url = url.replace(\"//\", \"/\");\n            if(url.indexOf(SymbolConstant.DOUBLE_SLASH)>=0){\n                url = filterUrl(url);\n            }\n\t\t\t/*if(url.startsWith(\"/\")){\n\t\t\t\turl=url.substring(1);\n\t\t\t}*/\n        }\n        return url;\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42\u5730\u5740\n     * @param request\n     * @return\n     */\n    @Deprecated\n    private String getJgAuthRequsetPath(HttpServletRequest request) {<FILL_FUNCTION_BODY>}\n\n    @Deprecated\n    private boolean moHuContain(List<String> list,String key){\n        for(String str : list){\n            if(key.contains(str)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/312", "ground_truth": "\n        String queryString = request.getQueryString();\n        String requestPath = request.getRequestURI();\n        if(oConvertUtils.isNotEmpty(queryString)){\n            requestPath += \"?\" + queryString;\n        }\n        // \u53bb\u6389\u5176\u4ed6\u53c2\u6570(\u4fdd\u7559\u4e00\u4e2a\u53c2\u6570) \u4f8b\u5982\uff1aloginController.do?login\n        if (requestPath.indexOf(SymbolConstant.AND) > -1) {\n            requestPath = requestPath.substring(0, requestPath.indexOf(\"&\"));\n        }\n        if(requestPath.indexOf(QueryRuleEnum.EQ.getValue())!=-1){\n            if(requestPath.indexOf(SPOT_DO)!=-1){\n                requestPath = requestPath.substring(0,requestPath.indexOf(\".do\")+3);\n            }else{\n                requestPath = requestPath.substring(0,requestPath.indexOf(\"?\"));\n            }\n        }\n        // \u53bb\u6389\u9879\u76ee\u8def\u5f84\n        requestPath = requestPath.substring(request.getContextPath().length() + 1);\n        return filterUrl(requestPath);\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "common", "aspect", "PermissionDataAspect.java"], "context_start_lineno": 0, "function_name": "getJgAuthRequsetPath", "left_context": "class PermissionDataAspect {\n    @Lazy\n    @Autowired\n    private CommonAPI commonApi;\n\n    private static final String SPOT_DO = \".do\";\n\n    @Pointcut(\"@annotation(org.jeecg.common.aspect.annotation.PermissionData)\")\n    public void pointCut() {\n\n    }\n\n    @Around(\"pointCut()\")\n    public Object arround(ProceedingJoinPoint point) throws  Throwable{\n        HttpServletRequest request = SpringContextUtils.getHttpServletRequest();\n        MethodSignature signature = (MethodSignature) point.getSignature();\n        Method method = signature.getMethod();\n        PermissionData pd = method.getAnnotation(PermissionData.class);\n        String component = pd.pageComponent();\n        String requestMethod = request.getMethod();\n        String requestPath = request.getRequestURI().substring(request.getContextPath().length());\n        requestPath = filterUrl(requestPath);\n        //update-begin-author:taoyan date:20211027 for:JTC-132\u3010online\u62a5\u8868\u6743\u9650\u3011online\u62a5\u8868\u5e26\u53c2\u6570\u7684\u83dc\u5355\u914d\u7f6e\u6570\u636e\u6743\u9650\u65e0\u6548\n        //\u5148\u5224\u65ad\u662f\u5426online\u62a5\u8868\u8bf7\u6c42\n        if(requestPath.indexOf(UrlMatchEnum.CGREPORT_DATA.getMatchUrl())>=0 || requestPath.indexOf(UrlMatchEnum.CGREPORT_ONLY_DATA.getMatchUrl())>=0){\n            // \u83b7\u53d6\u5730\u5740\u680f\u53c2\u6570\n            String urlParamString = request.getParameter(CommonConstant.ONL_REP_URL_PARAM_STR);\n            if(oConvertUtils.isNotEmpty(urlParamString)){\n                requestPath+=\"?\"+urlParamString;\n            }\n        }\n        //update-end-author:taoyan date:20211027 for:JTC-132\u3010online\u62a5\u8868\u6743\u9650\u3011online\u62a5\u8868\u5e26\u53c2\u6570\u7684\u83dc\u5355\u914d\u7f6e\u6570\u636e\u6743\u9650\u65e0\u6548\n        log.debug(\"\u62e6\u622a\u8bf7\u6c42 >> {} ; \u8bf7\u6c42\u7c7b\u578b >> {} . \", requestPath, requestMethod);\n        String username = JwtUtil.getUserNameByToken(request);\n        //\u67e5\u8be2\u6570\u636e\u6743\u9650\u4fe1\u606f\n        //TODO \u5fae\u670d\u52a1\u60c5\u51b5\u4e0b\u4e5f\u5f97\u652f\u6301\u7f13\u5b58\u673a\u5236\n        List<SysPermissionDataRuleModel> dataRules = commonApi.queryPermissionDataRule(component, requestPath, username);\n        if(dataRules!=null && dataRules.size()>0) {\n            //\u4e34\u65f6\u5b58\u50a8\n            JeecgDataAutorUtils.installDataSearchConditon(request, dataRules);\n            //TODO \u5fae\u670d\u52a1\u60c5\u51b5\u4e0b\u4e5f\u5f97\u652f\u6301\u7f13\u5b58\u673a\u5236\n            SysUserCacheInfo userinfo = commonApi.getCacheUser(username);\n            JeecgDataAutorUtils.installUserInfo(request, userinfo);\n        }\n        return  point.proceed();\n    }\n\n    private String filterUrl(String requestPath){\n        String url = \"\";\n        if(oConvertUtils.isNotEmpty(requestPath)){\n            url = requestPath.replace(\"\\\\\", \"/\");\n            url = url.replace(\"//\", \"/\");\n            if(url.indexOf(SymbolConstant.DOUBLE_SLASH)>=0){\n                url = filterUrl(url);\n            }\n\t\t\t/*if(url.startsWith(\"/\")){\n\t\t\t\turl=url.substring(1);\n\t\t\t}*/\n        }\n        return url;\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42\u5730\u5740\n     * @param request\n     * @return\n     */\n    @Deprecated\n    private String getJgAuthRequsetPath(HttpServletRequest request) {", "right_context": "}\n\n    @Deprecated\n    private boolean moHuContain(List<String> list,String key){\n        for(String str : list){\n            if(key.contains(str)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n}", "class_name": "PermissionDataAspect", "return_type": "String", "parameters": [{"type": "HttpServletRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/dynamic/db/DynamicDBUtil.java\n// --------------------------------------------------\n// /** \n//  * \u67e5\u8be2\u6570\u91cf\n//  * @param dbKey\n//  * @param sql\n//  * @param param\n//  * @return\n//  */\n// public static Map<String,Object> queryCount(String dbKey,String sql,Map<String,Object> param){\n//   NamedParameterJdbcTemplate npJdbcTemplate=getNamedParameterJdbcTemplate(dbKey);\n//   return npJdbcTemplate.queryForMap(sql,param);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/cas/util/XmlUtils.java\n// --------------------------------------------------\n// public static Map<String,Object> extractCustomAttributes(final String xml){\n//   final SAXParserFactory spf=SAXParserFactory.newInstance();\n//   spf.setNamespaceAware(true);\n//   spf.setValidating(false);\n//   try {\n//     final SAXParser saxParser=spf.newSAXParser();\n//     final XMLReader xmlReader=saxParser.getXMLReader();\n//     final CustomAttributeHandler handler=new CustomAttributeHandler();\n//     xmlReader.setContentHandler(handler);\n//     xmlReader.parse(new InputSource(new StringReader(xml)));\n//     return handler.getAttributes();\n//   }\n//  catch (  final Exception e) {\n//     log.error(e.getMessage(),e);\n//     return Collections.emptyMap();\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/controller/JobGroupController.java\n// --------------------------------------------------\n// @RequestMapping(\"/pageList\") @ResponseBody public Map<String,Object> pageList(HttpServletRequest request,@RequestParam(required=false,defaultValue=\"0\") int start,@RequestParam(required=false,defaultValue=\"10\") int length,String appname,String title){\n//   List<XxlJobGroup> list=xxlJobGroupDao.pageList(start,length,appname,title);\n//   int list_count=xxlJobGroupDao.pageListCount(start,length,appname,title);\n//   Map<String,Object> maps=new HashMap<String,Object>();\n//   maps.put(\"recordsTotal\",list_count);\n//   maps.put(\"recordsFiltered\",list_count);\n//   maps.put(\"data\",list);\n//   return maps;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/controller/JobInfoController.java\n// --------------------------------------------------\n// @RequestMapping(\"/pageList\") @ResponseBody public Map<String,Object> pageList(@RequestParam(required=false,defaultValue=\"0\") int start,@RequestParam(required=false,defaultValue=\"10\") int length,int jobGroup,int triggerStatus,String jobDesc,String executorHandler,String author){\n//   return xxlJobService.pageList(start,length,jobGroup,triggerStatus,jobDesc,executorHandler,author);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/controller/JobLogController.java\n// --------------------------------------------------\n// @RequestMapping(\"/pageList\") @ResponseBody public Map<String,Object> pageList(HttpServletRequest request,@RequestParam(required=false,defaultValue=\"0\") int start,@RequestParam(required=false,defaultValue=\"10\") int length,int jobGroup,int jobId,int logStatus,String filterTime){\n//   JobInfoController.validPermission(request,jobGroup);\n//   Date triggerTimeStart=null;\n//   Date triggerTimeEnd=null;\n//   if (filterTime != null && filterTime.trim().length() > 0) {\n//     String[] temp=filterTime.split(\" - \");\n//     if (temp.length == 2) {\n//       triggerTimeStart=DateUtil.parseDateTime(temp[0]);\n//       triggerTimeEnd=DateUtil.parseDateTime(temp[1]);\n//     }\n//   }\n//   List<XxlJobLog> list=xxlJobLogDao.pageList(start,length,jobGroup,jobId,triggerTimeStart,triggerTimeEnd,logStatus);\n//   int list_count=xxlJobLogDao.pageListCount(start,length,jobGroup,jobId,triggerTimeStart,triggerTimeEnd,logStatus);\n//   Map<String,Object> maps=new HashMap<String,Object>();\n//   maps.put(\"recordsTotal\",list_count);\n//   maps.put(\"recordsFiltered\",list_count);\n//   maps.put(\"data\",list);\n//   return maps;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/controller/UserController.java\n// --------------------------------------------------\n// @RequestMapping(\"/pageList\") @ResponseBody @PermissionLimit(adminuser=true) public Map<String,Object> pageList(@RequestParam(required=false,defaultValue=\"0\") int start,@RequestParam(required=false,defaultValue=\"10\") int length,String username,int role){\n//   List<XxlJobUser> list=xxlJobUserDao.pageList(start,length,username,role);\n//   int list_count=xxlJobUserDao.pageListCount(start,length,username,role);\n//   Map<String,Object> maps=new HashMap<String,Object>();\n//   maps.put(\"recordsTotal\",list_count);\n//   maps.put(\"recordsFiltered\",list_count);\n//   maps.put(\"data\",list);\n//   return maps;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/dao/XxlJobLogDao.java\n// --------------------------------------------------\n// public Map<String,Object> findLogReport(@Param(\"from\") Date from,@Param(\"to\") Date to);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/service/XxlJobService.java\n// --------------------------------------------------\n// /** \n//  * page list\n//  * @param start\n//  * @param length\n//  * @param jobGroup\n//  * @param jobDesc\n//  * @param executorHandler\n//  * @param author\n//  * @return\n//  */\n// public Map<String,Object> pageList(int start,int length,int jobGroup,int triggerStatus,String jobDesc,String executorHandler,String author);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/service/impl/XxlJobServiceImpl.java\n// --------------------------------------------------\n// @Override public Map<String,Object> pageList(int start,int length,int jobGroup,int triggerStatus,String jobDesc,String executorHandler,String author){\n//   List<XxlJobInfo> list=xxlJobInfoDao.pageList(start,length,jobGroup,triggerStatus,jobDesc,executorHandler,author);\n//   int list_count=xxlJobInfoDao.pageListCount(start,length,jobGroup,triggerStatus,jobDesc,executorHandler,author);\n//   Map<String,Object> maps=new HashMap<String,Object>();\n//   maps.put(\"recordsTotal\",list_count);\n//   maps.put(\"recordsFiltered\",list_count);\n//   maps.put(\"data\",list);\n//   return maps;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/monitor/controller/ActuatorRedisController.java\n// --------------------------------------------------\n// @GetMapping(\"/keysSize\") public Map<String,Object> getKeysSize() throws Exception {\n//   return redisService.getKeysSize();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/monitor/service/RedisService.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6 redis key \u6570\u91cf\n//  * @return Map\n//  * @throws RedisConnectException\n//  */\n// Map<String,Object> getKeysSize() throws RedisConnectException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/monitor/service/impl/RedisServiceImpl.java\n// --------------------------------------------------\n// @Override public Map<String,Object> getKeysSize() throws RedisConnectException {\n//   Long dbSize=redisConnectionFactory.getConnection().dbSize();\n//   Map<String,Object> map=new HashMap(5);\n//   map.put(\"create_time\",System.currentTimeMillis());\n//   map.put(\"dbSize\",dbSize);\n//   log.debug(\"--getKeysSize--: \" + map.toString());\n//   return map;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/service/XxlJobService.java\n// --------------------------------------------------\n// /** \n//  * dashboard info\n//  * @return\n//  */\n// public Map<String,Object> dashboardInfo();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/service/impl/XxlJobServiceImpl.java\n// --------------------------------------------------\n// @Override public Map<String,Object> dashboardInfo(){\n//   int jobInfoCount=xxlJobInfoDao.findAllCount();\n//   int jobLogCount=0;\n//   int jobLogSuccessCount=0;\n//   XxlJobLogReport xxlJobLogReport=xxlJobLogReportDao.queryLogReportTotal();\n//   if (xxlJobLogReport != null) {\n//     jobLogCount=xxlJobLogReport.getRunningCount() + xxlJobLogReport.getSucCount() + xxlJobLogReport.getFailCount();\n//     jobLogSuccessCount=xxlJobLogReport.getSucCount();\n//   }\n//   Set<String> executorAddressSet=new HashSet<String>();\n//   List<XxlJobGroup> groupList=xxlJobGroupDao.findAll();\n//   if (groupList != null && !groupList.isEmpty()) {\n//     for (    XxlJobGroup group : groupList) {\n//       if (group.getRegistryList() != null && !group.getRegistryList().isEmpty()) {\n//         executorAddressSet.addAll(group.getRegistryList());\n//       }\n//     }\n//   }\n//   int executorCount=executorAddressSet.size();\n//   Map<String,Object> dashboardMap=new HashMap<String,Object>();\n//   dashboardMap.put(\"jobInfoCount\",jobInfoCount);\n//   dashboardMap.put(\"jobLogCount\",jobLogCount);\n//   dashboardMap.put(\"jobLogSuccessCount\",jobLogSuccessCount);\n//   dashboardMap.put(\"executorCount\",executorCount);\n//   return dashboardMap;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/cas/util/XmlUtils.java\n// --------------------------------------------------\n// public Map<String,Object> getAttributes(){\n//   return this.attributes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/monitor/controller/ActuatorRedisController.java\n// --------------------------------------------------\n// @GetMapping(\"/memoryInfo\") public Map<String,Object> getMemoryInfo() throws Exception {\n//   return redisService.getMemoryInfo();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/monitor/service/RedisService.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6 redis \u5185\u5b58\u4fe1\u606f\n//  * @return Map\n//  * @throws RedisConnectException\n//  */\n// Map<String,Object> getMemoryInfo() throws RedisConnectException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/monitor/service/impl/RedisServiceImpl.java\n// --------------------------------------------------\n// @Override public Map<String,Object> getMemoryInfo() throws RedisConnectException {\n//   Map<String,Object> map=null;\n//   Properties info=redisConnectionFactory.getConnection().info();\n//   for (  Map.Entry<Object,Object> entry : info.entrySet()) {\n//     String key=oConvertUtils.getString(entry.getKey());\n//     if (\"used_memory\".equals(key)) {\n//       map=new HashMap(5);\n//       map.put(\"used_memory\",entry.getValue());\n//       map.put(\"create_time\",System.currentTimeMillis());\n//     }\n//   }\n//   log.debug(\"--getMemoryInfo--: \" + map.toString());\n//   return map;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JimuReportTokenService implements JmReportTokenServiceI {\n    @Autowired\n    private SysBaseApiImpl sysBaseApi;\n    @Autowired\n    @Lazy\n    private RedisUtil redisUtil;\n\n    @Override\n    public String getToken(HttpServletRequest request) {\n        return TokenUtils.getTokenByRequest(request);\n    }\n\n    @Override\n    public String getUsername(String token) {\n        return JwtUtil.getUsername(token);\n    }\n\n    @Override\n    public String[] getRoles(String token) {\n        String username = JwtUtil.getUsername(token);\n        Set roles = sysBaseApi.getUserRoleSet(username);\n        if(CollectionUtils.isEmpty(roles)){\n            return null;\n        }\n        return (String[]) roles.toArray(new String[roles.size()]);\n    }\n\n    @Override\n    public Boolean verifyToken(String token) {\n        return TokenUtils.verifyToken(token, sysBaseApi, redisUtil);\n    }\n\n    @Override\n    public Map<String, Object> getUserInfo(String token) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/313", "ground_truth": "\n        Map<String, Object> map = new HashMap(5);\n        String username = JwtUtil.getUsername(token);\n        //\u6b64\u5904\u901a\u8fc7token\u53ea\u80fd\u62ff\u5230\u4e00\u4e2a\u4fe1\u606f \u7528\u6237\u8d26\u53f7  \u540e\u9762\u7684\u5c31\u662f\u6839\u636e\u8d26\u53f7\u83b7\u53d6\u5176\u4ed6\u4fe1\u606f \u67e5\u8be2\u6570\u636e\u6216\u662f\u8d70redis \u7528\u6237\u6839\u636e\u81ea\u8eab\u4e1a\u52a1\u53ef\u81ea\u5b9a\u4e49\n        SysUserCacheInfo userInfo = null;\n        try {\n            userInfo = sysBaseApi.getCacheUser(username);\n        } catch (Exception e) {\n            log.error(\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5f02\u5e38:\"+ e.getMessage());\n            return map;\n        }\n        //\u8bbe\u7f6e\u8d26\u53f7\u540d\n        map.put(SYS_USER_CODE, userInfo.getSysUserCode());\n        //\u8bbe\u7f6e\u90e8\u95e8\u7f16\u7801\n        map.put(SYS_ORG_CODE, userInfo.getSysOrgCode());\n        // \u5c06\u6240\u6709\u4fe1\u606f\u5b58\u653e\u81f3map \u89e3\u6790sql/api\u4f1a\u6839\u636emap\u7684\u952e\u503c\u89e3\u6790\n        return map;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "config", "jimureport", "JimuReportTokenService.java"], "context_start_lineno": 0, "function_name": "getUserInfo", "left_context": "class JimuReportTokenService implements JmReportTokenServiceI {\n    @Autowired\n    private SysBaseApiImpl sysBaseApi;\n    @Autowired\n    @Lazy\n    private RedisUtil redisUtil;\n\n    @Override\n    public String getToken(HttpServletRequest request) {\n        return TokenUtils.getTokenByRequest(request);\n    }\n\n    @Override\n    public String getUsername(String token) {\n        return JwtUtil.getUsername(token);\n    }\n\n    @Override\n    public String[] getRoles(String token) {\n        String username = JwtUtil.getUsername(token);\n        Set roles = sysBaseApi.getUserRoleSet(username);\n        if(CollectionUtils.isEmpty(roles)){\n            return null;\n        }\n        return (String[]) roles.toArray(new String[roles.size()]);\n    }\n\n    @Override\n    public Boolean verifyToken(String token) {\n        return TokenUtils.verifyToken(token, sysBaseApi, redisUtil);\n    }\n\n    @Override\n    public Map<String, Object> getUserInfo(String token) {", "right_context": "}\n}", "class_name": "JimuReportTokenService", "return_type": "Map<String,Object>", "parameters": [{"type": "String", "name": "token"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DruidConfig {\n\n    /**\n     * \u5e26\u6709\u5e7f\u544a\u7684common.js\u5168\u8def\u5f84\uff0cdruid-1.1.14\n     */\n    private static final String FILE_PATH = \"support/http/resources/js/common.js\";\n    /**\n     * \u539f\u59cb\u811a\u672c\uff0c\u89e6\u53d1\u6784\u5efa\u5e7f\u544a\u7684\u8bed\u53e5\n     */\n    private static final String ORIGIN_JS = \"this.buildFooter();\";\n    /**\n     * \u66ff\u6362\u540e\u7684\u811a\u672c\n     */\n    private static final String NEW_JS = \"//this.buildFooter();\";\n\n    /**\n     * \u53bb\u9664Druid\u76d1\u63a7\u9875\u9762\u7684\u5e7f\u544a\n     *\n     * @param properties DruidStatProperties\u5c5e\u6027\u96c6\u5408\n     * @return {@link FilterRegistrationBean}\n     */\n    @Bean\n    @ConditionalOnWebApplication\n    @ConditionalOnProperty(name = \"spring.datasource.druid.stat-view-servlet.enabled\", havingValue = \"true\")\n    public FilterRegistrationBean<RemoveAdFilter> removeDruidAdFilter(\n            DruidStatProperties properties) throws IOException {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u5220\u9664druid\u7684\u5e7f\u544a\u8fc7\u6ee4\u5668\n     *\n     * @author BBF\n     */\n    private class RemoveAdFilter implements Filter {\n\n        private final String newJs;\n\n        public RemoveAdFilter(String newJs) {\n            this.newJs = newJs;\n        }\n\n        @Override\n        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n                throws IOException, ServletException {\n            chain.doFilter(request, response);\n            // \u91cd\u7f6e\u7f13\u51b2\u533a\uff0c\u54cd\u5e94\u5934\u4e0d\u4f1a\u88ab\u91cd\u7f6e\n            response.resetBuffer();\n            response.getWriter().write(newJs);\n        }\n    }\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/314", "ground_truth": "\n        // \u83b7\u53d6web\u76d1\u63a7\u9875\u9762\u7684\u53c2\u6570\n        DruidStatProperties.StatViewServlet config = properties.getStatViewServlet();\n        // \u63d0\u53d6common.js\u7684\u914d\u7f6e\u8def\u5f84\n        String pattern = config.getUrlPattern() != null ? config.getUrlPattern() : \"/druid/*\";\n        String commonJsPattern = pattern.replaceAll(\"\\\\*\", \"js/common.js\");\n        // \u83b7\u53d6common.js\n        String text = Utils.readFromResource(FILE_PATH);\n        // \u5c4f\u853d this.buildFooter(); \u4e0d\u6784\u5efa\u5e7f\u544a\n        final String newJs = text.replace(ORIGIN_JS, NEW_JS);\n        FilterRegistrationBean<RemoveAdFilter> registration = new FilterRegistrationBean<>();\n        registration.setFilter(new RemoveAdFilter(newJs));\n        registration.addUrlPatterns(commonJsPattern);\n        return registration;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "DruidConfig.java"], "context_start_lineno": 0, "function_name": "removeDruidAdFilter", "left_context": "class DruidConfig {\n\n    /**\n     * \u5e26\u6709\u5e7f\u544a\u7684common.js\u5168\u8def\u5f84\uff0cdruid-1.1.14\n     */\n    private static final String FILE_PATH = \"support/http/resources/js/common.js\";\n    /**\n     * \u539f\u59cb\u811a\u672c\uff0c\u89e6\u53d1\u6784\u5efa\u5e7f\u544a\u7684\u8bed\u53e5\n     */\n    private static final String ORIGIN_JS = \"this.buildFooter();\";\n    /**\n     * \u66ff\u6362\u540e\u7684\u811a\u672c\n     */\n    private static final String NEW_JS = \"//this.buildFooter();\";\n\n    /**\n     * \u53bb\u9664Druid\u76d1\u63a7\u9875\u9762\u7684\u5e7f\u544a\n     *\n     * @param properties DruidStatProperties\u5c5e\u6027\u96c6\u5408\n     * @return {@link FilterRegistrationBean}\n     */\n    @Bean\n    @ConditionalOnWebApplication\n    @ConditionalOnProperty(name = \"spring.datasource.druid.stat-view-servlet.enabled\", havingValue = \"true\")\n    public FilterRegistrationBean<RemoveAdFilter> removeDruidAdFilter(\n            DruidStatProperties properties) throws IOException {", "right_context": "}\n\n    /**\n     * \u5220\u9664druid\u7684\u5e7f\u544a\u8fc7\u6ee4\u5668\n     *\n     * @author BBF\n     */\n    private class RemoveAdFilter implements Filter {\n\n        private final String newJs;\n\n        public RemoveAdFilter(String newJs) {\n            this.newJs = newJs;\n        }\n\n        @Override\n        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n                throws IOException, ServletException {\n            chain.doFilter(request, response);\n            // \u91cd\u7f6e\u7f13\u51b2\u533a\uff0c\u54cd\u5e94\u5934\u4e0d\u4f1a\u88ab\u91cd\u7f6e\n            response.resetBuffer();\n            response.getWriter().write(newJs);\n        }\n    }\n}", "class_name": "DruidConfig", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u53d1\u9001\u6d88\u606f\u6d4b\u8bd5\n//  * @return\n//  */\n// @PostMapping(\"/sendMessageTest\") public Result sendMessageTest(@RequestBody JSONObject params,HttpServletRequest request){\n//   String app=params.getString(\"app\");\n//   boolean sendAll=params.getBooleanValue(\"sendAll\");\n//   String receiver=params.getString(\"receiver\");\n//   String content=params.getString(\"content\");\n//   int tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   String fromUser=JwtUtil.getUserNameByToken(request);\n//   String title=\"\u7b2c\u4e09\u65b9APP\u6d88\u606f\u6d4b\u8bd5\";\n//   MessageDTO message=new MessageDTO(fromUser,receiver,title,content);\n//   message.setToAll(sendAll);\n//   String weChatType=MessageTypeEnum.QYWX.getType();\n//   String dingType=MessageTypeEnum.DD.getType();\n//   if (weChatType.toUpperCase().equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,weChatType);\n//     if (null != config) {\n//       JSONObject response=wechatEnterpriseService.sendMessageResponse(message,false);\n//       return Result.OK(response);\n//     }\n//     return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\");\n//   }\n//  else   if (dingType.toUpperCase().equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,dingType);\n//     if (null != config) {\n//       Response<String> response=dingtalkService.sendMessageResponse(message,false);\n//       return Result.OK(response);\n//     }\n//     return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n//   }\n//   return Result.error(\"\u4e0d\u8bc6\u522b\u7684\u7b2c\u4e09\u65b9APP\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u64a4\u56de\u6d88\u606f\u6d4b\u8bd5\n//  * @return\n//  */\n// @PostMapping(\"/recallMessageTest\") public Result recallMessageTest(@RequestBody JSONObject params){\n//   String app=params.getString(\"app\");\n//   String msgTaskId=params.getString(\"msg_task_id\");\n//   int tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   if (CommonConstant.WECHAT_ENTERPRISE.equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.QYWX.getType());\n//     if (null != config) {\n//       return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u4e0d\u652f\u6301\u64a4\u56de\u6d88\u606f\");\n//     }\n//     return Result.error(\"\u4f01\u4e1a\u5fae\u4fe1\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\");\n//   }\n//  else   if (CommonConstant.DINGTALK.equals(app)) {\n//     SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.DD.getType());\n//     if (null != config) {\n//       Response<JSONObject> response=dingtalkService.recallMessageResponse(msgTaskId);\n//       if (response.isSuccess()) {\n//         return Result.OK(\"\u64a4\u56de\u6210\u529f\",response);\n//       }\n//  else {\n//         return Result.error(\"\u64a4\u56de\u5931\u8d25\uff1a\" + response.getErrcode() + \"\u2014\u2014\"+ response.getErrmsg(),response);\n//       }\n//     }\n//     return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n//   }\n//   return Result.error(\"\u4e0d\u8bc6\u522b\u7684\u7b2c\u4e09\u65b9APP\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/ThirdAppController.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u3010\u9489\u9489\u3011[\u90e8\u95e8\u548c\u7528\u6237]\u5230\u672c\u5730\n//  * @param ids\n//  * @return\n//  */\n// @GetMapping(\"/sync/dingtalk/departAndUser/toLocal\") public Result syncDingTalkDepartAndUserToLocal(@RequestParam(value=\"ids\",required=false) String ids){\n//   Integer tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//   SysThirdAppConfig config=appConfigService.getThirdConfigByThirdType(tenantId,MessageTypeEnum.DD.getType());\n//   if (null != config) {\n//     SyncInfoVo syncInfo=dingtalkService.syncThirdAppDepartmentUserToLocal();\n//     if (syncInfo.getFailInfo().size() == 0) {\n//       return Result.OK(\"\u540c\u6b65\u6210\u529f\",syncInfo);\n//     }\n//  else {\n//       return Result.error(\"\u540c\u6b65\u5931\u8d25\",syncInfo);\n//     }\n//   }\n//   return Result.error(\"\u9489\u9489\u5c1a\u672a\u914d\u7f6e,\u8bf7\u914d\u7f6e\u9489\u9489\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysDataSourceService.java\n// --------------------------------------------------\n// /** \n//  * \u6dfb\u52a0\u6570\u636e\u6e90\n//  * @param sysDataSource\n//  * @return\n//  */\n// Result saveDataSource(SysDataSource sysDataSource);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysDataSourceService.java\n// --------------------------------------------------\n// /** \n//  * \u4fee\u6539\u6570\u636e\u6e90\n//  * @param sysDataSource\n//  * @return\n//  */\n// Result editDataSource(SysDataSource sysDataSource);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysDataSourceService.java\n// --------------------------------------------------\n// /** \n//  * \u5220\u9664\u6570\u636e\u6e90\n//  * @param id\n//  * @return\n//  */\n// Result deleteDataSource(String id);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysUserService.java\n// --------------------------------------------------\n// /** \n//  * \u6821\u9a8c\u7528\u6237\u662f\u5426\u6709\u6548\n//  * @param sysUser\n//  * @return\n//  */\n// Result checkUserIsEffective(SysUser sysUser);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysDataSourceServiceImpl.java\n// --------------------------------------------------\n// @Override public Result saveDataSource(SysDataSource sysDataSource){\n//   try {\n//     long count=checkDbCode(sysDataSource.getCode());\n//     if (count > 0) {\n//       return Result.error(\"\u6570\u636e\u6e90\u7f16\u7801\u5df2\u5b58\u5728\");\n//     }\n//     String dbPassword=sysDataSource.getDbPassword();\n//     if (StringUtils.isNotBlank(dbPassword)) {\n//       String encrypt=SecurityUtil.jiami(dbPassword);\n//       sysDataSource.setDbPassword(encrypt);\n//     }\n//     boolean result=save(sysDataSource);\n//     if (result) {\n//     }\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   return Result.OK(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysDataSourceServiceImpl.java\n// --------------------------------------------------\n// @Override public Result editDataSource(SysDataSource sysDataSource){\n//   try {\n//     SysDataSource d=getById(sysDataSource.getId());\n//     DataSourceCachePool.removeCache(d.getCode());\n//     String dbPassword=sysDataSource.getDbPassword();\n//     if (StringUtils.isNotBlank(dbPassword)) {\n//       String encrypt=SecurityUtil.jiami(dbPassword);\n//       sysDataSource.setDbPassword(encrypt);\n//     }\n//     Boolean result=updateById(sysDataSource);\n//     if (result) {\n//     }\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   return Result.OK(\"\u7f16\u8f91\u6210\u529f!\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysDataSourceServiceImpl.java\n// --------------------------------------------------\n// @Override public Result deleteDataSource(String id){\n//   SysDataSource sysDataSource=getById(id);\n//   DataSourceCachePool.removeCache(sysDataSource.getCode());\n//   removeById(id);\n//   return Result.OK(\"\u5220\u9664\u6210\u529f!\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysRoleService.java\n// --------------------------------------------------\n// /** \n//  * \u5bfc\u5165 excel \uff0c\u68c0\u67e5 roleCode \u7684\u552f\u4e00\u6027\n//  * @param file\n//  * @param params\n//  * @return\n//  * @throws Exception\n//  */\n// Result importExcelCheckRoleCode(MultipartFile file,ImportParams params) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysRoleServiceImpl.java\n// --------------------------------------------------\n// @Override public Result importExcelCheckRoleCode(MultipartFile file,ImportParams params) throws Exception {\n//   List<Object> listSysRoles=ExcelImportUtil.importExcel(file.getInputStream(),SysRole.class,params);\n//   int totalCount=listSysRoles.size();\n//   List<String> errorStrs=new ArrayList<>();\n//   for (int i=0; i < listSysRoles.size(); i++) {\n//     String roleCodeI=((SysRole)listSysRoles.get(i)).getRoleCode();\n//     for (int j=i + 1; j < listSysRoles.size(); j++) {\n//       String roleCodeJ=((SysRole)listSysRoles.get(j)).getRoleCode();\n//       if (roleCodeI.equals(roleCodeJ)) {\n//         errorStrs.add(\"\u7b2c \" + (j + 1) + \" \u884c\u7684 roleCode \u503c\uff1a\"+ roleCodeI+ \" \u5df2\u5b58\u5728\uff0c\u5ffd\u7565\u5bfc\u5165\");\n//         listSysRoles.remove(j);\n//         break;\n//       }\n//     }\n//   }\n//   Integer errorLines=0;\n//   Integer successLines=0;\n//   List<String> list=ImportExcelUtil.importDateSave(listSysRoles,ISysRoleService.class,errorStrs,CommonConstant.SQL_INDEX_UNIQ_SYS_ROLE_CODE);\n//   errorLines+=list.size();\n//   successLines+=(listSysRoles.size() - errorLines);\n//   return ImportExcelUtil.imporReturnRes(errorLines,successLines,list);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysUserController.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u88ab\u903b\u8f91\u5220\u9664\u7684\u7528\u6237\u5217\u8868\uff0c\u65e0\u5206\u9875\n//  * @return logicDeletedUserList\n//  */\n// @GetMapping(\"/recycleBin\") public Result getRecycleBin(){\n//   List<SysUser> logicDeletedUserList=sysUserService.queryLogicDeleted();\n//   if (logicDeletedUserList.size() > 0) {\n//     List<String> userIds=logicDeletedUserList.stream().map(SysUser::getId).collect(Collectors.toList());\n//     Map<String,String> useDepNames=sysUserService.getDepNamesByUserIds(userIds);\n//     logicDeletedUserList.forEach(item -> item.setOrgCode(useDepNames.get(item.getId())));\n//   }\n//   return Result.ok(logicDeletedUserList);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysUserController.java\n// --------------------------------------------------\n// /** \n//  * \u8fd8\u539f\u88ab\u903b\u8f91\u5220\u9664\u7684\u7528\u6237\n//  * @param jsonObject\n//  * @return\n//  */\n// @RequestMapping(value=\"/putRecycleBin\",method=RequestMethod.PUT) public Result putRecycleBin(@RequestBody JSONObject jsonObject,HttpServletRequest request){\n//   String userIds=jsonObject.getString(\"userIds\");\n//   if (StringUtils.isNotBlank(userIds)) {\n//     SysUser updateUser=new SysUser();\n//     updateUser.setUpdateBy(JwtUtil.getUserNameByToken(request));\n//     updateUser.setUpdateTime(new Date());\n//     sysUserService.revertLogicDeleted(Arrays.asList(userIds.split(\",\")),updateUser);\n//   }\n//   return Result.ok(\"\u8fd8\u539f\u6210\u529f\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysUserController.java\n// --------------------------------------------------\n// /** \n//  * \u5f7b\u5e95\u5220\u9664\u7528\u6237\n//  * @param userIds \u88ab\u5220\u9664\u7684\u7528\u6237ID\uff0c\u591a\u4e2aid\u7528\u534a\u89d2\u9017\u53f7\u5206\u5272\n//  * @return\n//  */\n// @RequiresPermissions(\"system:user:deleteRecycleBin\") @RequestMapping(value=\"/deleteRecycleBin\",method=RequestMethod.DELETE) public Result deleteRecycleBin(@RequestParam(\"userIds\") String userIds){\n//   if (StringUtils.isNotBlank(userIds)) {\n//     sysUserService.removeLogicDeleted(Arrays.asList(userIds.split(\",\")));\n//   }\n//   return Result.ok(\"\u5220\u9664\u6210\u529f\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysUserController.java\n// --------------------------------------------------\n// /** \n//  * \u6839\u636euserid\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u548c\u90e8\u95e8\u5458\u5de5\u4fe1\u606f\n//  * @return Result\n//  */\n// @GetMapping(\"/queryChildrenByUsername\") public Result queryChildrenByUsername(@RequestParam(\"userId\") String userId){\n//   Map<String,Object> map=new HashMap(5);\n//   SysUser sysUser=sysUserService.getById(userId);\n//   String username=sysUser.getUsername();\n//   Integer identity=sysUser.getUserIdentity();\n//   map.put(\"sysUser\",sysUser);\n//   if (identity != null && identity == 2) {\n//     String departIds=sysUser.getDepartIds();\n//     if (StringUtils.isNotBlank(departIds)) {\n//       List<String> departIdList=Arrays.asList(departIds.split(\",\"));\n//       List<SysUser> childrenUser=sysUserService.queryByDepIds(departIdList,username);\n//       map.put(\"children\",childrenUser);\n//     }\n//   }\n//   return Result.ok(map);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysPermissionController.java\n// --------------------------------------------------\n// /** \n//  * \u67e5\u8be2\u5b50\u83dc\u5355\n//  * @param parentIds \u7236ID\uff08\u591a\u4e2a\u91c7\u7528\u534a\u89d2\u9017\u53f7\u5206\u5272\uff09\n//  * @return \u8fd4\u56de key-value \u7684 Map\n//  */\n// @GetMapping(\"/getSystemSubmenuBatch\") public Result getSystemSubmenuBatch(@RequestParam(\"parentIds\") String parentIds){\n//   try {\n//     LambdaQueryWrapper<SysPermission> query=new LambdaQueryWrapper<>();\n//     List<String> parentIdList=Arrays.asList(parentIds.split(\",\"));\n//     query.in(SysPermission::getParentId,parentIdList);\n//     query.eq(SysPermission::getDelFlag,CommonConstant.DEL_FLAG_0);\n//     query.orderByAsc(SysPermission::getSortNo);\n//     List<SysPermission> list=sysPermissionService.list(query);\n//     Map<String,List<SysPermissionTree>> listMap=new HashMap(5);\n//     for (    SysPermission item : list) {\n//       String pid=item.getParentId();\n//       if (parentIdList.contains(pid)) {\n//         List<SysPermissionTree> mapList=listMap.get(pid);\n//         if (mapList == null) {\n//           mapList=new ArrayList<>();\n//         }\n//         mapList.add(new SysPermissionTree(item));\n//         listMap.put(pid,mapList);\n//       }\n//     }\n//     return Result.ok(listMap);\n//   }\n//  catch (  Exception e) {\n//     log.error(e.getMessage(),e);\n//     return Result.error(\"\u6279\u91cf\u67e5\u8be2\u5b50\u83dc\u5355\u5931\u8d25\uff1a\" + e.getMessage());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysCategoryController.java\n// --------------------------------------------------\n// /** \n//  * \u6839\u636e\u7236\u7ea7id\u6279\u91cf\u67e5\u8be2\u5b50\u8282\u70b9\n//  * @param parentIds\n//  * @return\n//  */\n// @GetMapping(\"/getChildListBatch\") public Result getChildListBatch(@RequestParam(\"parentIds\") String parentIds){\n//   try {\n//     QueryWrapper<SysCategory> queryWrapper=new QueryWrapper<>();\n//     List<String> parentIdList=Arrays.asList(parentIds.split(\",\"));\n//     queryWrapper.in(\"pid\",parentIdList);\n//     List<SysCategory> list=sysCategoryService.list(queryWrapper);\n//     IPage<SysCategory> pageList=new Page<>(1,10,list.size());\n//     pageList.setRecords(list);\n//     return Result.OK(pageList);\n//   }\n//  catch (  Exception e) {\n//     log.error(e.getMessage(),e);\n//     return Result.error(\"\u6279\u91cf\u67e5\u8be2\u5b50\u8282\u70b9\u5931\u8d25\uff1a\" + e.getMessage());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysCheckRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param ruleCode\n//  * @return\n//  */\n// @AutoLog(value=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u901a\u8fc7Code\u6821\u9a8c\u4f20\u5165\u7684\u503c\") @ApiOperation(value=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u901a\u8fc7Code\u6821\u9a8c\u4f20\u5165\u7684\u503c\",notes=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u901a\u8fc7Code\u6821\u9a8c\u4f20\u5165\u7684\u503c\") @GetMapping(value=\"/checkByCode\") public Result checkByCode(@RequestParam(name=\"ruleCode\") String ruleCode,@RequestParam(name=\"value\") String value) throws UnsupportedEncodingException {\n//   SysCheckRule sysCheckRule=sysCheckRuleService.getByCode(ruleCode);\n//   if (sysCheckRule == null) {\n//     return Result.error(\"\u8be5\u7f16\u7801\u4e0d\u5b58\u5728\");\n//   }\n//   JSONObject errorResult=sysCheckRuleService.checkValue(sysCheckRule,URLDecoder.decode(value,\"UTF-8\"));\n//   if (errorResult == null) {\n//     return Result.ok();\n//   }\n//  else {\n//     Result<Object> r=Result.error(errorResult.getString(\"message\"));\n//     r.setResult(errorResult);\n//     return r;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysCheckRuleController.java\n// --------------------------------------------------\n// /** \n//  * \u6279\u91cf\u5220\u9664\n//  * @param ids\n//  * @return\n//  */\n// @AutoLog(value=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u6279\u91cf\u5220\u9664\") @ApiOperation(value=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u6279\u91cf\u5220\u9664\",notes=\"\u7f16\u7801\u6821\u9a8c\u89c4\u5219-\u6279\u91cf\u5220\u9664\") @DeleteMapping(value=\"/deleteBatch\") public Result deleteBatch(@RequestParam(name=\"ids\",required=true) String ids){\n//   this.sysCheckRuleService.removeByIds(Arrays.asList(ids.split(\",\")));\n//   return Result.ok(\"\u6279\u91cf\u5220\u9664\u6210\u529f\uff01\");\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysFillRuleController extends JeecgController<SysFillRule, ISysFillRuleService> {\n    @Autowired\n    private ISysFillRuleService sysFillRuleService;\n\n    /**\n     * \u5206\u9875\u5217\u8868\u67e5\u8be2\n     *\n     * @param sysFillRule\n     * @param pageNo\n     * @param pageSize\n     * @param req\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\", notes = \"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\")\n    @GetMapping(value = \"/list\")\n    public Result<?> queryPageList(SysFillRule sysFillRule,\n                                   @RequestParam(name = \"pageNo\", defaultValue = \"1\") Integer pageNo,\n                                   @RequestParam(name = \"pageSize\", defaultValue = \"10\") Integer pageSize,\n                                   HttpServletRequest req) {\n        QueryWrapper<SysFillRule> queryWrapper = QueryGenerator.initQueryWrapper(sysFillRule, req.getParameterMap());\n        Page<SysFillRule> page = new Page<>(pageNo, pageSize);\n        IPage<SysFillRule> pageList = sysFillRuleService.page(page, queryWrapper);\n        return Result.ok(pageList);\n    }\n\n    /**\n     * \u6d4b\u8bd5 ruleCode\n     *\n     * @param ruleCode\n     * @return\n     */\n    @GetMapping(value = \"/testFillRule\")\n    public Result testFillRule(@RequestParam(\"ruleCode\") String ruleCode) {\n        Object result = FillRuleUtil.executeRule(ruleCode, new JSONObject());\n        return Result.ok(result);\n    }\n\n    /**\n     * \u6dfb\u52a0\n     *\n     * @param sysFillRule\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u6dfb\u52a0\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u6dfb\u52a0\", notes = \"\u586b\u503c\u89c4\u5219-\u6dfb\u52a0\")\n    @PostMapping(value = \"/add\")\n    public Result<?> add(@RequestBody SysFillRule sysFillRule) {\n        sysFillRuleService.save(sysFillRule);\n        return Result.ok(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n    }\n\n    /**\n     * \u7f16\u8f91\n     *\n     * @param sysFillRule\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u7f16\u8f91\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u7f16\u8f91\", notes = \"\u586b\u503c\u89c4\u5219-\u7f16\u8f91\")\n    @RequestMapping(value = \"/edit\", method = {RequestMethod.PUT,RequestMethod.POST})\n    public Result<?> edit(@RequestBody SysFillRule sysFillRule) {\n        sysFillRuleService.updateById(sysFillRule);\n        return Result.ok(\"\u7f16\u8f91\u6210\u529f!\");\n    }\n\n    /**\n     * \u901a\u8fc7id\u5220\u9664\n     *\n     * @param id\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u5220\u9664\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u5220\u9664\", notes = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u5220\u9664\")\n    @DeleteMapping(value = \"/delete\")\n    public Result<?> delete(@RequestParam(name = \"id\", required = true) String id) {\n        sysFillRuleService.removeById(id);\n        return Result.ok(\"\u5220\u9664\u6210\u529f!\");\n    }\n\n    /**\n     * \u6279\u91cf\u5220\u9664\n     *\n     * @param ids\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u6279\u91cf\u5220\u9664\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u6279\u91cf\u5220\u9664\", notes = \"\u586b\u503c\u89c4\u5219-\u6279\u91cf\u5220\u9664\")\n    @DeleteMapping(value = \"/deleteBatch\")\n    public Result<?> deleteBatch(@RequestParam(name = \"ids\", required = true) String ids) {\n        this.sysFillRuleService.removeByIds(Arrays.asList(ids.split(\",\")));\n        return Result.ok(\"\u6279\u91cf\u5220\u9664\u6210\u529f\uff01\");\n    }\n\n    /**\n     * \u901a\u8fc7id\u67e5\u8be2\n     *\n     * @param id\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\", notes = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\")\n    @GetMapping(value = \"/queryById\")\n    public Result<?> queryById(@RequestParam(name = \"id\", required = true) String id) {\n        SysFillRule sysFillRule = sysFillRuleService.getById(id);\n        return Result.ok(sysFillRule);\n    }\n\n    /**\n     * \u5bfc\u51faexcel\n     *\n     * @param request\n     * @param sysFillRule\n     */\n    @RequestMapping(value = \"/exportXls\")\n    public ModelAndView exportXls(HttpServletRequest request, SysFillRule sysFillRule) {\n        return super.exportXls(request, sysFillRule, SysFillRule.class, \"\u586b\u503c\u89c4\u5219\");\n    }\n\n    /**\n     * \u901a\u8fc7excel\u5bfc\u5165\u6570\u636e\n     *\n     * @param request\n     * @param response\n     * @return\n     */\n    @RequestMapping(value = \"/importExcel\", method = RequestMethod.POST)\n    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {\n        return super.importExcel(request, response, SysFillRule.class);\n    }\n\n    /**\n     * \u901a\u8fc7 ruleCode \u6267\u884c\u81ea\u5b9a\u4e49\u586b\u503c\u89c4\u5219\n     *\n     * @param ruleCode \u8981\u6267\u884c\u7684\u586b\u503c\u89c4\u5219\u7f16\u7801\n     * @param formData \u8868\u5355\u6570\u636e\uff0c\u53ef\u6839\u636e\u8868\u5355\u6570\u636e\u7684\u4e0d\u540c\u751f\u6210\u4e0d\u540c\u7684\u586b\u503c\u7ed3\u679c\n     * @return \u8fd0\u884c\u540e\u7684\u7ed3\u679c\n     */\n    @PutMapping(\"/executeRuleByCode/{ruleCode}\")\n    public Result executeByRuleCode(@PathVariable(\"ruleCode\") String ruleCode, @RequestBody JSONObject formData) {\n        Object result = FillRuleUtil.executeRule(ruleCode, formData);\n        return Result.ok(result);\n    }\n\n\n    /**\n     * \u6279\u91cf\u901a\u8fc7 ruleCode \u6267\u884c\u81ea\u5b9a\u4e49\u586b\u503c\u89c4\u5219\n     *\n     * @param ruleData \u8981\u6267\u884c\u7684\u586b\u503c\u89c4\u5219JSON\u6570\u7ec4\uff1a\n     *                 \u793a\u4f8b\uff1a { \"commonFormData\": {}, rules: [ { \"ruleCode\": \"xxx\", \"formData\": null } ] }\n     * @return \u8fd0\u884c\u540e\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u793a\u4f8b\uff1a [{\"ruleCode\": \"order_num_rule\", \"result\": \"CN2019111117212984\"}]\n     *\n     */\n    @PutMapping(\"/executeRuleByCodeBatch\")\n    public Result executeByRuleCodeBatch(@RequestBody JSONObject ruleData) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/320", "ground_truth": "\n        JSONObject commonFormData = ruleData.getJSONObject(\"commonFormData\");\n        JSONArray rules = ruleData.getJSONArray(\"rules\");\n        // \u904d\u5386 rules \uff0c\u6279\u91cf\u6267\u884c\u89c4\u5219\n        JSONArray results = new JSONArray(rules.size());\n        for (int i = 0; i < rules.size(); i++) {\n            JSONObject rule = rules.getJSONObject(i);\n            String ruleCode = rule.getString(\"ruleCode\");\n            JSONObject formData = rule.getJSONObject(\"formData\");\n            // \u5982\u679c\u6ca1\u6709\u4f20\u9012 formData\uff0c\u5c31\u7528common\u7684\n            if (formData == null) {\n                formData = commonFormData;\n            }\n            // \u6267\u884c\u586b\u503c\u89c4\u5219\n            Object result = FillRuleUtil.executeRule(ruleCode, formData);\n            JSONObject obj = new JSONObject(rules.size());\n            obj.put(\"ruleCode\", ruleCode);\n            obj.put(\"result\", result);\n            results.add(obj);\n        }\n        return Result.ok(results);\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "controller", "SysFillRuleController.java"], "context_start_lineno": 0, "function_name": "executeByRuleCodeBatch", "left_context": "class SysFillRuleController extends JeecgController<SysFillRule, ISysFillRuleService> {\n    @Autowired\n    private ISysFillRuleService sysFillRuleService;\n\n    /**\n     * \u5206\u9875\u5217\u8868\u67e5\u8be2\n     *\n     * @param sysFillRule\n     * @param pageNo\n     * @param pageSize\n     * @param req\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\", notes = \"\u586b\u503c\u89c4\u5219-\u5206\u9875\u5217\u8868\u67e5\u8be2\")\n    @GetMapping(value = \"/list\")\n    public Result<?> queryPageList(SysFillRule sysFillRule,\n                                   @RequestParam(name = \"pageNo\", defaultValue = \"1\") Integer pageNo,\n                                   @RequestParam(name = \"pageSize\", defaultValue = \"10\") Integer pageSize,\n                                   HttpServletRequest req) {\n        QueryWrapper<SysFillRule> queryWrapper = QueryGenerator.initQueryWrapper(sysFillRule, req.getParameterMap());\n        Page<SysFillRule> page = new Page<>(pageNo, pageSize);\n        IPage<SysFillRule> pageList = sysFillRuleService.page(page, queryWrapper);\n        return Result.ok(pageList);\n    }\n\n    /**\n     * \u6d4b\u8bd5 ruleCode\n     *\n     * @param ruleCode\n     * @return\n     */\n    @GetMapping(value = \"/testFillRule\")\n    public Result testFillRule(@RequestParam(\"ruleCode\") String ruleCode) {\n        Object result = FillRuleUtil.executeRule(ruleCode, new JSONObject());\n        return Result.ok(result);\n    }\n\n    /**\n     * \u6dfb\u52a0\n     *\n     * @param sysFillRule\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u6dfb\u52a0\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u6dfb\u52a0\", notes = \"\u586b\u503c\u89c4\u5219-\u6dfb\u52a0\")\n    @PostMapping(value = \"/add\")\n    public Result<?> add(@RequestBody SysFillRule sysFillRule) {\n        sysFillRuleService.save(sysFillRule);\n        return Result.ok(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n    }\n\n    /**\n     * \u7f16\u8f91\n     *\n     * @param sysFillRule\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u7f16\u8f91\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u7f16\u8f91\", notes = \"\u586b\u503c\u89c4\u5219-\u7f16\u8f91\")\n    @RequestMapping(value = \"/edit\", method = {RequestMethod.PUT,RequestMethod.POST})\n    public Result<?> edit(@RequestBody SysFillRule sysFillRule) {\n        sysFillRuleService.updateById(sysFillRule);\n        return Result.ok(\"\u7f16\u8f91\u6210\u529f!\");\n    }\n\n    /**\n     * \u901a\u8fc7id\u5220\u9664\n     *\n     * @param id\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u5220\u9664\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u5220\u9664\", notes = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u5220\u9664\")\n    @DeleteMapping(value = \"/delete\")\n    public Result<?> delete(@RequestParam(name = \"id\", required = true) String id) {\n        sysFillRuleService.removeById(id);\n        return Result.ok(\"\u5220\u9664\u6210\u529f!\");\n    }\n\n    /**\n     * \u6279\u91cf\u5220\u9664\n     *\n     * @param ids\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u6279\u91cf\u5220\u9664\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u6279\u91cf\u5220\u9664\", notes = \"\u586b\u503c\u89c4\u5219-\u6279\u91cf\u5220\u9664\")\n    @DeleteMapping(value = \"/deleteBatch\")\n    public Result<?> deleteBatch(@RequestParam(name = \"ids\", required = true) String ids) {\n        this.sysFillRuleService.removeByIds(Arrays.asList(ids.split(\",\")));\n        return Result.ok(\"\u6279\u91cf\u5220\u9664\u6210\u529f\uff01\");\n    }\n\n    /**\n     * \u901a\u8fc7id\u67e5\u8be2\n     *\n     * @param id\n     * @return\n     */\n    @AutoLog(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\")\n    @ApiOperation(value = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\", notes = \"\u586b\u503c\u89c4\u5219-\u901a\u8fc7id\u67e5\u8be2\")\n    @GetMapping(value = \"/queryById\")\n    public Result<?> queryById(@RequestParam(name = \"id\", required = true) String id) {\n        SysFillRule sysFillRule = sysFillRuleService.getById(id);\n        return Result.ok(sysFillRule);\n    }\n\n    /**\n     * \u5bfc\u51faexcel\n     *\n     * @param request\n     * @param sysFillRule\n     */\n    @RequestMapping(value = \"/exportXls\")\n    public ModelAndView exportXls(HttpServletRequest request, SysFillRule sysFillRule) {\n        return super.exportXls(request, sysFillRule, SysFillRule.class, \"\u586b\u503c\u89c4\u5219\");\n    }\n\n    /**\n     * \u901a\u8fc7excel\u5bfc\u5165\u6570\u636e\n     *\n     * @param request\n     * @param response\n     * @return\n     */\n    @RequestMapping(value = \"/importExcel\", method = RequestMethod.POST)\n    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {\n        return super.importExcel(request, response, SysFillRule.class);\n    }\n\n    /**\n     * \u901a\u8fc7 ruleCode \u6267\u884c\u81ea\u5b9a\u4e49\u586b\u503c\u89c4\u5219\n     *\n     * @param ruleCode \u8981\u6267\u884c\u7684\u586b\u503c\u89c4\u5219\u7f16\u7801\n     * @param formData \u8868\u5355\u6570\u636e\uff0c\u53ef\u6839\u636e\u8868\u5355\u6570\u636e\u7684\u4e0d\u540c\u751f\u6210\u4e0d\u540c\u7684\u586b\u503c\u7ed3\u679c\n     * @return \u8fd0\u884c\u540e\u7684\u7ed3\u679c\n     */\n    @PutMapping(\"/executeRuleByCode/{ruleCode}\")\n    public Result executeByRuleCode(@PathVariable(\"ruleCode\") String ruleCode, @RequestBody JSONObject formData) {\n        Object result = FillRuleUtil.executeRule(ruleCode, formData);\n        return Result.ok(result);\n    }\n\n\n    /**\n     * \u6279\u91cf\u901a\u8fc7 ruleCode \u6267\u884c\u81ea\u5b9a\u4e49\u586b\u503c\u89c4\u5219\n     *\n     * @param ruleData \u8981\u6267\u884c\u7684\u586b\u503c\u89c4\u5219JSON\u6570\u7ec4\uff1a\n     *                 \u793a\u4f8b\uff1a { \"commonFormData\": {}, rules: [ { \"ruleCode\": \"xxx\", \"formData\": null } ] }\n     * @return \u8fd0\u884c\u540e\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u793a\u4f8b\uff1a [{\"ruleCode\": \"order_num_rule\", \"result\": \"CN2019111117212984\"}]\n     *\n     */\n    @PutMapping(\"/executeRuleByCodeBatch\")\n    public Result executeByRuleCodeBatch(@RequestBody JSONObject ruleData) {", "right_context": "}\n\n}", "class_name": "SysFillRuleController", "return_type": "Result", "parameters": [{"type": "JSONObject", "name": "ruleData"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysRoleController.java\n// --------------------------------------------------\n// /** \n//  * \u6dfb\u52a0\n//  * @param role\n//  * @return\n//  */\n// @RequestMapping(value=\"/add\",method=RequestMethod.POST) @RequiresPermissions(\"system:role:add\") public Result<SysRole> add(@RequestBody SysRole role){\n//   Result<SysRole> result=new Result<SysRole>();\n//   try {\n//     if (MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n//       role.setRoleCode(RandomUtil.randomString(10));\n//     }\n//     role.setCreateTime(new Date());\n//     sysRoleService.save(role);\n//     result.success(\"\u6dfb\u52a0\u6210\u529f\uff01\");\n//   }\n//  catch (  Exception e) {\n//     log.error(e.getMessage(),e);\n//     result.error500(\"\u64cd\u4f5c\u5931\u8d25\");\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysRoleController.java\n// --------------------------------------------------\n// /** \n//  * \u7f16\u8f91\n//  * @param role\n//  * @return\n//  */\n// @RequiresPermissions(\"system:role:edit\") @RequestMapping(value=\"/edit\",method={RequestMethod.PUT,RequestMethod.POST}) public Result<SysRole> edit(@RequestBody SysRole role){\n//   Result<SysRole> result=new Result<SysRole>();\n//   SysRole sysrole=sysRoleService.getById(role.getId());\n//   if (sysrole == null) {\n//     result.error500(\"\u672a\u627e\u5230\u5bf9\u5e94\u89d2\u8272\uff01\");\n//   }\n//  else {\n//     role.setUpdateTime(new Date());\n//     if (MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n//       LoginUser sysUser=(LoginUser)SecurityUtils.getSubject().getPrincipal();\n//       Integer tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//       String username=\"admin\";\n//       if (!tenantId.equals(role.getTenantId()) && !username.equals(sysUser.getUsername())) {\n//         baseCommonService.addLog(\"\u672a\u7ecf\u6388\u6743\uff0c\u4fee\u6539\u975e\u672c\u79df\u6237\u4e0b\u7684\u89d2\u8272ID\uff1a\" + role.getId() + \"\uff0c\u64cd\u4f5c\u4eba\uff1a\"+ sysUser.getUsername(),CommonConstant.LOG_TYPE_2,CommonConstant.OPERATE_TYPE_3);\n//         return Result.error(\"\u4fee\u6539\u89d2\u8272\u5931\u8d25,\u5f53\u524d\u89d2\u8272\u4e0d\u5728\u6b64\u79df\u6237\u4e2d\u3002\");\n//       }\n//     }\n//     boolean ok=sysRoleService.updateById(role);\n//     if (ok) {\n//       result.success(\"\u4fee\u6539\u6210\u529f!\");\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysRoleController.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7id\u67e5\u8be2\n//  * @param id\n//  * @return\n//  */\n// @RequestMapping(value=\"/queryById\",method=RequestMethod.GET) public Result<SysRole> queryById(@RequestParam(name=\"id\",required=true) String id){\n//   Result<SysRole> result=new Result<SysRole>();\n//   SysRole sysrole=sysRoleService.getById(id);\n//   if (sysrole == null) {\n//     result.error500(\"\u672a\u627e\u5230\u5bf9\u5e94\u5b9e\u4f53\");\n//   }\n//  else {\n//     result.setResult(sysrole);\n//     result.setSuccess(true);\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/controller/SysRoleController.java\n// --------------------------------------------------\n// /** \n//  * \u6279\u91cf\u5220\u9664\n//  * @param ids\n//  * @return\n//  */\n// @RequiresPermissions(\"system:role:deleteBatch\") @RequestMapping(value=\"/deleteBatch\",method=RequestMethod.DELETE) public Result<SysRole> deleteBatch(@RequestParam(name=\"ids\",required=true) String ids){\n//   baseCommonService.addLog(\"\u5220\u9664\u89d2\u8272\u64cd\u4f5c\uff0c\u89d2\u8272ids\uff1a\" + ids,CommonConstant.LOG_TYPE_2,CommonConstant.OPERATE_TYPE_4);\n//   Result<SysRole> result=new Result<SysRole>();\n//   if (oConvertUtils.isEmpty(ids)) {\n//     result.error500(\"\u672a\u9009\u4e2d\u89d2\u8272\uff01\");\n//   }\n//  else {\n//     if (MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n//       int tenantId=oConvertUtils.getInt(TenantContext.getTenant(),0);\n//       String[] roleIds=ids.split(SymbolConstant.COMMA);\n//       LoginUser sysUser=(LoginUser)SecurityUtils.getSubject().getPrincipal();\n//       String username=\"admin\";\n//       for (      String id : roleIds) {\n//         Long getRoleCount=sysRoleService.getRoleCountByTenantId(id,tenantId);\n//         if (getRoleCount == 0 && !username.equals(sysUser.getUsername())) {\n//           baseCommonService.addLog(\"\u672a\u7ecf\u6388\u6743\uff0c\u5220\u9664\u975e\u672c\u79df\u6237\u4e0b\u7684\u89d2\u8272ID\uff1a\" + id + \"\uff0c\u64cd\u4f5c\u4eba\uff1a\"+ sysUser.getUsername(),CommonConstant.LOG_TYPE_2,CommonConstant.OPERATE_TYPE_4);\n//           return Result.error(\"\u6279\u91cf\u5220\u9664\u89d2\u8272\u5931\u8d25,\u5b58\u5728\u89d2\u8272\u4e0d\u5728\u6b64\u79df\u6237\u4e2d\uff0c\u7981\u6b62\u6279\u91cf\u5220\u9664\");\n//         }\n//       }\n//     }\n//     sysRoleService.checkAdminRoleRejectDel(ids);\n//     sysRoleService.deleteBatchRole(ids.split(\",\"));\n//     result.success(\"\u5220\u9664\u89d2\u8272\u6210\u529f!\");\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysLogController {\n\t\n\t@Autowired\n\tprivate ISysLogService sysLogService;\n\n    /**\n     * \u5168\u90e8\u6e05\u9664\n     */\n\tprivate static final String ALL_ClEAR = \"allclear\";\n\n\t/**\n\t * @\u529f\u80fd\uff1a\u67e5\u8be2\u65e5\u5fd7\u8bb0\u5f55\n\t * @param syslog\n\t * @param pageNo\n\t * @param pageSize\n\t * @param req\n\t * @return\n\t */\n\t@RequestMapping(value = \"/list\", method = RequestMethod.GET)\n\t//@RequiresPermissions(\"system:log:list\")\n\tpublic Result<IPage<SysLog>> queryPageList(SysLog syslog,@RequestParam(name=\"pageNo\", defaultValue=\"1\") Integer pageNo,\n\t\t\t\t\t\t\t\t\t  @RequestParam(name=\"pageSize\", defaultValue=\"10\") Integer pageSize,HttpServletRequest req) {\n\t\tResult<IPage<SysLog>> result = new Result<IPage<SysLog>>();\n\t\tQueryWrapper<SysLog> queryWrapper = QueryGenerator.initQueryWrapper(syslog, req.getParameterMap());\n\t\tPage<SysLog> page = new Page<SysLog>(pageNo, pageSize);\n\t\t//\u65e5\u5fd7\u5173\u952e\u8bcd\n\t\tString keyWord = req.getParameter(\"keyWord\");\n\t\tif(oConvertUtils.isNotEmpty(keyWord)) {\n\t\t\tqueryWrapper.like(\"log_content\",keyWord);\n\t\t}\n\t\t//TODO \u8fc7\u6ee4\u903b\u8f91\u5904\u7406\n\t\t//TODO begin\u3001end\u903b\u8f91\u5904\u7406\n\t\t//TODO \u4e00\u4e2a\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u524d\u7aef\u4f20\u4e00\u4e2a\u5b57\u6bb5\u5b57\u7b26\u4e32\uff0c\u540e\u53f0\u53ea\u8fd4\u56de\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5b57\u6bb5\n\t\t//\u521b\u5efa\u65f6\u95f4/\u521b\u5efa\u4eba\u7684\u8d4b\u503c\n\t\tIPage<SysLog> pageList = sysLogService.page(page, queryWrapper);\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\uff1a\"+pageList.getCurrent());\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\u6570\u91cf\uff1a\"+pageList.getSize());\n\t\tlog.info(\"\u67e5\u8be2\u7ed3\u679c\u6570\u91cf\uff1a\"+pageList.getRecords().size());\n\t\tlog.info(\"\u6570\u636e\u603b\u6570\uff1a\"+pageList.getTotal());\n\t\tresult.setSuccess(true);\n\t\tresult.setResult(pageList);\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * @\u529f\u80fd\uff1a\u5220\u9664\u5355\u4e2a\u65e5\u5fd7\u8bb0\u5f55\n\t * @param id\n\t * @return\n\t */\n\t@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE)\n\t//@RequiresPermissions(\"system:log:delete\")\n\tpublic Result<SysLog> delete(@RequestParam(name=\"id\",required=true) String id) {\n\t\tResult<SysLog> result = new Result<SysLog>();\n\t\tSysLog sysLog = sysLogService.getById(id);\n\t\tif(sysLog==null) {\n\t\t\tresult.error500(\"\u672a\u627e\u5230\u5bf9\u5e94\u5b9e\u4f53\");\n\t\t}else {\n\t\t\tboolean ok = sysLogService.removeById(id);\n\t\t\tif(ok) {\n\t\t\t\tresult.success(\"\u5220\u9664\u6210\u529f!\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * @\u529f\u80fd\uff1a\u6279\u91cf\uff0c\u5168\u90e8\u6e05\u7a7a\u65e5\u5fd7\u8bb0\u5f55\n\t * @param ids\n\t * @return\n\t */\n\t@RequestMapping(value = \"/deleteBatch\", method = RequestMethod.DELETE)\n\t//@RequiresPermissions(\"system:log:deleteBatch\")\n\tpublic Result<SysRole> deleteBatch(@RequestParam(name=\"ids\",required=true) String ids) {<FILL_FUNCTION_BODY>}\n\t\n\t\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/325", "ground_truth": "\n\t\tResult<SysRole> result = new Result<SysRole>();\n\t\tif(ids==null || \"\".equals(ids.trim())) {\n\t\t\tresult.error500(\"\u53c2\u6570\u4e0d\u8bc6\u522b\uff01\");\n\t\t}else {\n\t\t\tif(ALL_ClEAR.equals(ids)) {\n\t\t\t\tthis.sysLogService.removeAll();\n\t\t\t\tresult.success(\"\u6e05\u9664\u6210\u529f!\");\n\t\t\t}\n\t\t\tthis.sysLogService.removeByIds(Arrays.asList(ids.split(\",\")));\n\t\t\tresult.success(\"\u5220\u9664\u6210\u529f!\");\n\t\t}\n\t\treturn result;\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "controller", "SysLogController.java"], "context_start_lineno": 0, "function_name": "deleteBatch", "left_context": "class SysLogController {\n\t\n\t@Autowired\n\tprivate ISysLogService sysLogService;\n\n    /**\n     * \u5168\u90e8\u6e05\u9664\n     */\n\tprivate static final String ALL_ClEAR = \"allclear\";\n\n\t/**\n\t * @\u529f\u80fd\uff1a\u67e5\u8be2\u65e5\u5fd7\u8bb0\u5f55\n\t * @param syslog\n\t * @param pageNo\n\t * @param pageSize\n\t * @param req\n\t * @return\n\t */\n\t@RequestMapping(value = \"/list\", method = RequestMethod.GET)\n\t//@RequiresPermissions(\"system:log:list\")\n\tpublic Result<IPage<SysLog>> queryPageList(SysLog syslog,@RequestParam(name=\"pageNo\", defaultValue=\"1\") Integer pageNo,\n\t\t\t\t\t\t\t\t\t  @RequestParam(name=\"pageSize\", defaultValue=\"10\") Integer pageSize,HttpServletRequest req) {\n\t\tResult<IPage<SysLog>> result = new Result<IPage<SysLog>>();\n\t\tQueryWrapper<SysLog> queryWrapper = QueryGenerator.initQueryWrapper(syslog, req.getParameterMap());\n\t\tPage<SysLog> page = new Page<SysLog>(pageNo, pageSize);\n\t\t//\u65e5\u5fd7\u5173\u952e\u8bcd\n\t\tString keyWord = req.getParameter(\"keyWord\");\n\t\tif(oConvertUtils.isNotEmpty(keyWord)) {\n\t\t\tqueryWrapper.like(\"log_content\",keyWord);\n\t\t}\n\t\t//TODO \u8fc7\u6ee4\u903b\u8f91\u5904\u7406\n\t\t//TODO begin\u3001end\u903b\u8f91\u5904\u7406\n\t\t//TODO \u4e00\u4e2a\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u524d\u7aef\u4f20\u4e00\u4e2a\u5b57\u6bb5\u5b57\u7b26\u4e32\uff0c\u540e\u53f0\u53ea\u8fd4\u56de\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5b57\u6bb5\n\t\t//\u521b\u5efa\u65f6\u95f4/\u521b\u5efa\u4eba\u7684\u8d4b\u503c\n\t\tIPage<SysLog> pageList = sysLogService.page(page, queryWrapper);\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\uff1a\"+pageList.getCurrent());\n\t\tlog.info(\"\u67e5\u8be2\u5f53\u524d\u9875\u6570\u91cf\uff1a\"+pageList.getSize());\n\t\tlog.info(\"\u67e5\u8be2\u7ed3\u679c\u6570\u91cf\uff1a\"+pageList.getRecords().size());\n\t\tlog.info(\"\u6570\u636e\u603b\u6570\uff1a\"+pageList.getTotal());\n\t\tresult.setSuccess(true);\n\t\tresult.setResult(pageList);\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * @\u529f\u80fd\uff1a\u5220\u9664\u5355\u4e2a\u65e5\u5fd7\u8bb0\u5f55\n\t * @param id\n\t * @return\n\t */\n\t@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE)\n\t//@RequiresPermissions(\"system:log:delete\")\n\tpublic Result<SysLog> delete(@RequestParam(name=\"id\",required=true) String id) {\n\t\tResult<SysLog> result = new Result<SysLog>();\n\t\tSysLog sysLog = sysLogService.getById(id);\n\t\tif(sysLog==null) {\n\t\t\tresult.error500(\"\u672a\u627e\u5230\u5bf9\u5e94\u5b9e\u4f53\");\n\t\t}else {\n\t\t\tboolean ok = sysLogService.removeById(id);\n\t\t\tif(ok) {\n\t\t\t\tresult.success(\"\u5220\u9664\u6210\u529f!\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * @\u529f\u80fd\uff1a\u6279\u91cf\uff0c\u5168\u90e8\u6e05\u7a7a\u65e5\u5fd7\u8bb0\u5f55\n\t * @param ids\n\t * @return\n\t */\n\t@RequestMapping(value = \"/deleteBatch\", method = RequestMethod.DELETE)\n\t//@RequiresPermissions(\"system:log:deleteBatch\")\n\tpublic Result<SysRole> deleteBatch(@RequestParam(name=\"ids\",required=true) String ids) {", "right_context": "}\n\t\n\t\n}", "class_name": "SysLogController", "return_type": "Result<SysRole>", "parameters": [{"type": "String", "name": "ids"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/config/shiro/ShiroRealm.java\n// --------------------------------------------------\n// /** \n//  * \u6821\u9a8ctoken\u7684\u6709\u6548\u6027\n//  * @param token\n//  */\n// public LoginUser checkUserTokenIsEffect(String token) throws AuthenticationException {\n//   String username=JwtUtil.getUsername(token);\n//   if (username == null) {\n//     throw new AuthenticationException(\"token\u975e\u6cd5\u65e0\u6548!\");\n//   }\n//   log.debug(\"\u2014\u2014\u2014\u6821\u9a8ctoken\u662f\u5426\u6709\u6548\u2014\u2014\u2014\u2014checkUserTokenIsEffect\u2014\u2014\u2014\u2014\u2014\u2014\u2014 \" + token);\n//   LoginUser loginUser=TokenUtils.getLoginUser(username,commonApi,redisUtil);\n//   if (loginUser == null) {\n//     throw new AuthenticationException(\"\u7528\u6237\u4e0d\u5b58\u5728!\");\n//   }\n//   if (loginUser.getStatus() != 1) {\n//     throw new AuthenticationException(\"\u8d26\u53f7\u5df2\u88ab\u9501\u5b9a,\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458!\");\n//   }\n//   if (!jwtTokenRefresh(token,username,loginUser.getPassword())) {\n//     throw new AuthenticationException(CommonConstant.TOKEN_IS_INVALID_MSG);\n//   }\n//   String userTenantIds=loginUser.getRelTenantIds();\n//   if (oConvertUtils.isNotEmpty(userTenantIds)) {\n//     String contextTenantId=TenantContext.getTenant();\n//     log.debug(\"\u767b\u5f55\u79df\u6237\uff1a\" + contextTenantId);\n//     log.debug(\"\u7528\u6237\u62e5\u6709\u90a3\u4e9b\u79df\u6237\uff1a\" + userTenantIds);\n//     String str=\"0\";\n//     if (oConvertUtils.isNotEmpty(contextTenantId) && !str.equals(contextTenantId)) {\n//       String[] arr=userTenantIds.split(\",\");\n//       if (!oConvertUtils.isIn(contextTenantId,arr)) {\n//         boolean isAuthorization=false;\n//         String loginUserKey=CacheConstant.SYS_USERS_CACHE + \"::\" + username;\n//         redisUtil.del(loginUserKey);\n//         LoginUser loginUserFromDb=commonApi.getUserByName(username);\n//         if (oConvertUtils.isNotEmpty(loginUserFromDb.getRelTenantIds())) {\n//           String[] newArray=loginUserFromDb.getRelTenantIds().split(\",\");\n//           if (oConvertUtils.isIn(contextTenantId,newArray)) {\n//             isAuthorization=true;\n//           }\n//         }\n//         if (!isAuthorization) {\n//           log.info(\"\u79df\u6237\u5f02\u5e38\u2014\u2014\u767b\u5f55\u79df\u6237\uff1a\" + contextTenantId);\n//           log.info(\"\u79df\u6237\u5f02\u5e38\u2014\u2014\u7528\u6237\u62e5\u6709\u79df\u6237\u7ec4\uff1a\" + userTenantIds);\n//           throw new AuthenticationException(\"\u767b\u5f55\u79df\u6237\u6388\u6743\u53d8\u66f4\uff0c\u8bf7\u91cd\u65b0\u767b\u9646!\");\n//         }\n//       }\n//     }\n//   }\n//   return loginUser;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/ISysUserService.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u7528\u6237\u4fe1\u606f \u5b57\u6bb5\u4fe1\u606f\u662f\u52a0\u5bc6\u540e\u7684 \u3010\u52a0\u5bc6\u7528\u6237\u4fe1\u606f\u3011\n//  * @param username\n//  * @return\n//  */\n// LoginUser getEncodeUserInfo(String username);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysUserServiceImpl.java\n// --------------------------------------------------\n// @Override @Cacheable(cacheNames=CacheConstant.SYS_USERS_CACHE,key=\"#username\") @SensitiveEncode public LoginUser getEncodeUserInfo(String username){\n//   if (oConvertUtils.isEmpty(username)) {\n//     return null;\n//   }\n//   LoginUser loginUser=new LoginUser();\n//   SysUser sysUser=userMapper.getUserByName(username);\n//   this.setUserTenantIds(sysUser);\n//   this.userPositionId(sysUser);\n//   if (sysUser == null) {\n//     return null;\n//   }\n//   BeanUtils.copyProperties(sysUser,loginUser);\n//   return loginUser;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/api/CommonAPI.java\n// --------------------------------------------------\n// /** \n//  * 5\u6839\u636e\u7528\u6237\u8d26\u53f7\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n//  * @param username\n//  * @return\n//  */\n// public LoginUser getUserByName(String username);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-api/jeecg-system-cloud-api/src/main/java/org/jeecg/common/system/api/ISysBaseAPI.java\n// --------------------------------------------------\n// /** \n//  * 39\u6839\u636e\u7528\u6237\u8d26\u53f7\u67e5\u8be2\u7528\u6237\u4fe1\u606f CommonAPI\u4e2d\u5b9a\u4e49\n//  * @param username\n//  * @return LoginUser \u7528\u6237\u4fe1\u606f\n//  */\n// @Override @SensitiveDecode @GetMapping(\"/sys/api/getUserByName\") LoginUser getUserByName(@RequestParam(\"username\") String username);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-api/jeecg-system-cloud-api/src/main/java/org/jeecg/common/system/api/fallback/SysBaseAPIFallback.java\n// --------------------------------------------------\n// @Override public LoginUser getUserByName(String username){\n//   log.error(\"jeecg-system\u670d\u52a1\u8282\u70b9\u4e0d\u901a\uff0c\u5bfc\u81f4\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\u5931\u8d25\uff1a \" + cause.getMessage(),cause);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/api/controller/SystemApiController.java\n// --------------------------------------------------\n// /** \n//  * \u6839\u636e\u7528\u6237\u8d26\u53f7\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n//  * @param username\n//  * @return\n//  */\n// @GetMapping(\"/getUserByName\") public LoginUser getUserByName(@RequestParam(\"username\") String username){\n//   LoginUser loginUser=sysBaseApi.getUserByName(username);\n//   try {\n//     SensitiveInfoUtil.handlerObject(loginUser,true);\n//   }\n//  catch (  IllegalAccessException e) {\n//     e.printStackTrace();\n//   }\n//   return loginUser;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysBaseApiImpl.java\n// --------------------------------------------------\n// @Override public LoginUser getUserByName(String username){\n//   if (oConvertUtils.isEmpty(username)) {\n//     return null;\n//   }\n//   LoginUser user=sysUserService.getEncodeUserInfo(username);\n//   try {\n//     SensitiveInfoUtil.handlerObject(user,false);\n//   }\n//  catch (  IllegalAccessException e) {\n//     e.printStackTrace();\n//   }\n//   return user;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-api/jeecg-system-cloud-api/src/main/java/org/jeecg/common/system/api/ISysBaseAPI.java\n// --------------------------------------------------\n// /** \n//  * 6\u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n//  * @param id\n//  * @return\n//  */\n// @SensitiveDecode @GetMapping(\"/sys/api/getUserById\") LoginUser getUserById(@RequestParam(\"id\") String id);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-api/jeecg-system-cloud-api/src/main/java/org/jeecg/common/system/api/fallback/SysBaseAPIFallback.java\n// --------------------------------------------------\n// @Override public LoginUser getUserById(String id){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-api/jeecg-system-local-api/src/main/java/org/jeecg/common/system/api/ISysBaseAPI.java\n// --------------------------------------------------\n// /** \n//  * 6\u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n//  * @param id\n//  * @return\n//  */\n// LoginUser getUserById(String id);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/api/controller/SystemApiController.java\n// --------------------------------------------------\n// /** \n//  * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n//  * @param id\n//  * @return\n//  */\n// @GetMapping(\"/getUserById\") LoginUser getUserById(@RequestParam(\"id\") String id){\n//   LoginUser loginUser=sysBaseApi.getUserById(id);\n//   try {\n//     SensitiveInfoUtil.handlerObject(loginUser,true);\n//   }\n//  catch (  IllegalAccessException e) {\n//     e.printStackTrace();\n//   }\n//   return loginUser;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-module-system/jeecg-system-biz/src/main/java/org/jeecg/modules/system/service/impl/SysBaseApiImpl.java\n// --------------------------------------------------\n// @Override public LoginUser getUserById(String id){\n//   if (oConvertUtils.isEmpty(id)) {\n//     return null;\n//   }\n//   LoginUser loginUser=new LoginUser();\n//   SysUser sysUser=userMapper.selectById(id);\n//   if (sysUser == null) {\n//     return null;\n//   }\n//   BeanUtils.copyProperties(sysUser,loginUser);\n//   loginUser.setPassword(null);\n//   loginUser.setRelTenantIds(null);\n//   loginUser.setDepartIds(null);\n//   return loginUser;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/TokenUtils.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u767b\u5f55\u7528\u6237\n//  * @param commonApi\n//  * @param username\n//  * @return\n//  */\n// public static LoginUser getLoginUser(String username,CommonAPI commonApi,RedisUtil redisUtil){\n//   LoginUser loginUser=null;\n//   String loginUserKey=CacheConstant.SYS_USERS_CACHE + \"::\" + username;\n//   if (redisUtil.hasKey(loginUserKey)) {\n//     try {\n//       loginUser=(LoginUser)redisUtil.get(loginUserKey);\n//       SensitiveInfoUtil.handlerObject(loginUser,false);\n//     }\n//  catch (    IllegalAccessException e) {\n//       e.printStackTrace();\n//     }\n//   }\n//  else {\n//     loginUser=commonApi.getUserByName(username);\n//   }\n//   return loginUser;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MybatisInterceptor implements Interceptor {\n\n\t@Override\n\tpublic Object intercept(Invocation invocation) throws Throwable {\n\t\tMappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];\n\t\tString sqlId = mappedStatement.getId();\n\t\tlog.debug(\"------sqlId------\" + sqlId);\n\t\tSqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();\n\t\tObject parameter = invocation.getArgs()[1];\n\t\tlog.debug(\"------sqlCommandType------\" + sqlCommandType);\n\n\t\tif (parameter == null) {\n\t\t\treturn invocation.proceed();\n\t\t}\n\t\tif (SqlCommandType.INSERT == sqlCommandType) {\n\t\t\tLoginUser sysUser = this.getLoginUser();\n\t\t\tField[] fields = oConvertUtils.getAllFields(parameter);\n\t\t\tfor (Field field : fields) {\n\t\t\t\tlog.debug(\"------field.name------\" + field.getName());\n\t\t\t\ttry {\n\t\t\t\t\tif (\"createBy\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tObject localCreateBy = field.get(parameter);\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\tif (localCreateBy == null || \"\".equals(localCreateBy)) {\n\t\t\t\t\t\t\tif (sysUser != null) {\n\t\t\t\t\t\t\t\t// \u767b\u5f55\u4eba\u8d26\u53f7\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tfield.set(parameter, sysUser.getUsername());\n\t\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// \u6ce8\u5165\u521b\u5efa\u65f6\u95f4\n\t\t\t\t\tif (\"createTime\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tObject localCreateDate = field.get(parameter);\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\tif (localCreateDate == null || \"\".equals(localCreateDate)) {\n\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\tfield.set(parameter, new Date());\n\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//\u6ce8\u5165\u90e8\u95e8\u7f16\u7801\n\t\t\t\t\tif (\"sysOrgCode\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tObject localSysOrgCode = field.get(parameter);\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\tif (localSysOrgCode == null || \"\".equals(localSysOrgCode)) {\n\t\t\t\t\t\t\t// \u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n\t\t\t\t\t\t\tif (sysUser != null) {\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tfield.set(parameter, sysUser.getOrgCode());\n\t\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//------------------------------------------------------------------------------------------------\n\t\t\t\t\t//\u6ce8\u5165\u79df\u6237ID\uff08\u662f\u5426\u5f00\u542f\u7cfb\u7edf\u7ba1\u7406\u6a21\u5757\u7684\u591a\u79df\u6237\u6570\u636e\u9694\u79bb\u3010SAAS\u591a\u79df\u6237\u6a21\u5f0f\u3011\uff09\n\t\t\t\t\tif(MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n\t\t\t\t\t\tif (TenantConstant.TENANT_ID.equals(field.getName())) {\n\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\tObject localTenantId = field.get(parameter);\n\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\tif (localTenantId == null) {\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tfield.set(parameter, oConvertUtils.getInt(TenantContext.getTenant(),0));\n\t\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//------------------------------------------------------------------------------------------------\n\t\t\t\t\t\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (SqlCommandType.UPDATE == sqlCommandType) {\n\t\t\tLoginUser sysUser = this.getLoginUser();\n\t\t\tField[] fields = null;\n\t\t\tif (parameter instanceof ParamMap) {\n\t\t\t\tParamMap<?> p = (ParamMap<?>) parameter;\n\t\t\t\t//update-begin-author:scott date:20190729 for:\u6279\u91cf\u66f4\u65b0\u62a5\u9519issues/IZA3Q--\n                String et = \"et\";\n\t\t\t\tif (p.containsKey(et)) {\n\t\t\t\t\tparameter = p.get(et);\n\t\t\t\t} else {\n\t\t\t\t\tparameter = p.get(\"param1\");\n\t\t\t\t}\n\t\t\t\t//update-end-author:scott date:20190729 for:\u6279\u91cf\u66f4\u65b0\u62a5\u9519issues/IZA3Q-\n\n\t\t\t\t//update-begin-author:scott date:20190729 for:\u66f4\u65b0\u6307\u5b9a\u5b57\u6bb5\u65f6\u62a5\u9519 issues/#516-\n\t\t\t\tif (parameter == null) {\n\t\t\t\t\treturn invocation.proceed();\n\t\t\t\t}\n\t\t\t\t//update-end-author:scott date:20190729 for:\u66f4\u65b0\u6307\u5b9a\u5b57\u6bb5\u65f6\u62a5\u9519 issues/#516-\n\n\t\t\t\tfields = oConvertUtils.getAllFields(parameter);\n\t\t\t} else {\n\t\t\t\tfields = oConvertUtils.getAllFields(parameter);\n\t\t\t}\n\n\t\t\tfor (Field field : fields) {\n\t\t\t\tlog.debug(\"------field.name------\" + field.getName());\n\t\t\t\ttry {\n\t\t\t\t\tif (\"updateBy\".equals(field.getName())) {\n\t\t\t\t\t\t//\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n\t\t\t\t\t\tif (sysUser != null) {\n\t\t\t\t\t\t\t// \u767b\u5f55\u8d26\u53f7\n\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\tfield.set(parameter, sysUser.getUsername());\n\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (\"updateTime\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tfield.set(parameter, new Date());\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn invocation.proceed();\n\t}\n\n\t@Override\n\tpublic Object plugin(Object target) {\n\t\treturn Plugin.wrap(target, this);\n\t}\n\n\t@Override\n\tpublic void setProperties(Properties properties) {\n\t\t// TODO Auto-generated method stub\n\t}\n\n\t//update-begin--Author:scott  Date:20191213 for\uff1a\u5173\u4e8e\u4f7f\u7528Quzrtz \u5f00\u542f\u7ebf\u7a0b\u4efb\u52a1\uff0c #465\n    /**\n     * \u83b7\u53d6\u767b\u5f55\u7528\u6237\n     * @return\n     */\n\tprivate LoginUser getLoginUser() {<FILL_FUNCTION_BODY>}\n\t//update-end--Author:scott  Date:20191213 for\uff1a\u5173\u4e8e\u4f7f\u7528Quzrtz \u5f00\u542f\u7ebf\u7a0b\u4efb\u52a1\uff0c #465\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/342", "ground_truth": "\n\t\tLoginUser sysUser = null;\n\t\ttry {\n\t\t\tsysUser = SecurityUtils.getSubject().getPrincipal() != null ? (LoginUser) SecurityUtils.getSubject().getPrincipal() : null;\n\t\t} catch (Exception e) {\n\t\t\t//e.printStackTrace();\n\t\t\tsysUser = null;\n\t\t}\n\t\treturn sysUser;\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "mybatis", "MybatisInterceptor.java"], "context_start_lineno": 0, "function_name": "getLoginUser", "left_context": "class MybatisInterceptor implements Interceptor {\n\n\t@Override\n\tpublic Object intercept(Invocation invocation) throws Throwable {\n\t\tMappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];\n\t\tString sqlId = mappedStatement.getId();\n\t\tlog.debug(\"------sqlId------\" + sqlId);\n\t\tSqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();\n\t\tObject parameter = invocation.getArgs()[1];\n\t\tlog.debug(\"------sqlCommandType------\" + sqlCommandType);\n\n\t\tif (parameter == null) {\n\t\t\treturn invocation.proceed();\n\t\t}\n\t\tif (SqlCommandType.INSERT == sqlCommandType) {\n\t\t\tLoginUser sysUser = this.getLoginUser();\n\t\t\tField[] fields = oConvertUtils.getAllFields(parameter);\n\t\t\tfor (Field field : fields) {\n\t\t\t\tlog.debug(\"------field.name------\" + field.getName());\n\t\t\t\ttry {\n\t\t\t\t\tif (\"createBy\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tObject localCreateBy = field.get(parameter);\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\tif (localCreateBy == null || \"\".equals(localCreateBy)) {\n\t\t\t\t\t\t\tif (sysUser != null) {\n\t\t\t\t\t\t\t\t// \u767b\u5f55\u4eba\u8d26\u53f7\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tfield.set(parameter, sysUser.getUsername());\n\t\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// \u6ce8\u5165\u521b\u5efa\u65f6\u95f4\n\t\t\t\t\tif (\"createTime\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tObject localCreateDate = field.get(parameter);\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\tif (localCreateDate == null || \"\".equals(localCreateDate)) {\n\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\tfield.set(parameter, new Date());\n\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//\u6ce8\u5165\u90e8\u95e8\u7f16\u7801\n\t\t\t\t\tif (\"sysOrgCode\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tObject localSysOrgCode = field.get(parameter);\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\tif (localSysOrgCode == null || \"\".equals(localSysOrgCode)) {\n\t\t\t\t\t\t\t// \u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n\t\t\t\t\t\t\tif (sysUser != null) {\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tfield.set(parameter, sysUser.getOrgCode());\n\t\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//------------------------------------------------------------------------------------------------\n\t\t\t\t\t//\u6ce8\u5165\u79df\u6237ID\uff08\u662f\u5426\u5f00\u542f\u7cfb\u7edf\u7ba1\u7406\u6a21\u5757\u7684\u591a\u79df\u6237\u6570\u636e\u9694\u79bb\u3010SAAS\u591a\u79df\u6237\u6a21\u5f0f\u3011\uff09\n\t\t\t\t\tif(MybatisPlusSaasConfig.OPEN_SYSTEM_TENANT_CONTROL) {\n\t\t\t\t\t\tif (TenantConstant.TENANT_ID.equals(field.getName())) {\n\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\tObject localTenantId = field.get(parameter);\n\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\tif (localTenantId == null) {\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tfield.set(parameter, oConvertUtils.getInt(TenantContext.getTenant(),0));\n\t\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//------------------------------------------------------------------------------------------------\n\t\t\t\t\t\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (SqlCommandType.UPDATE == sqlCommandType) {\n\t\t\tLoginUser sysUser = this.getLoginUser();\n\t\t\tField[] fields = null;\n\t\t\tif (parameter instanceof ParamMap) {\n\t\t\t\tParamMap<?> p = (ParamMap<?>) parameter;\n\t\t\t\t//update-begin-author:scott date:20190729 for:\u6279\u91cf\u66f4\u65b0\u62a5\u9519issues/IZA3Q--\n                String et = \"et\";\n\t\t\t\tif (p.containsKey(et)) {\n\t\t\t\t\tparameter = p.get(et);\n\t\t\t\t} else {\n\t\t\t\t\tparameter = p.get(\"param1\");\n\t\t\t\t}\n\t\t\t\t//update-end-author:scott date:20190729 for:\u6279\u91cf\u66f4\u65b0\u62a5\u9519issues/IZA3Q-\n\n\t\t\t\t//update-begin-author:scott date:20190729 for:\u66f4\u65b0\u6307\u5b9a\u5b57\u6bb5\u65f6\u62a5\u9519 issues/#516-\n\t\t\t\tif (parameter == null) {\n\t\t\t\t\treturn invocation.proceed();\n\t\t\t\t}\n\t\t\t\t//update-end-author:scott date:20190729 for:\u66f4\u65b0\u6307\u5b9a\u5b57\u6bb5\u65f6\u62a5\u9519 issues/#516-\n\n\t\t\t\tfields = oConvertUtils.getAllFields(parameter);\n\t\t\t} else {\n\t\t\t\tfields = oConvertUtils.getAllFields(parameter);\n\t\t\t}\n\n\t\t\tfor (Field field : fields) {\n\t\t\t\tlog.debug(\"------field.name------\" + field.getName());\n\t\t\t\ttry {\n\t\t\t\t\tif (\"updateBy\".equals(field.getName())) {\n\t\t\t\t\t\t//\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n\t\t\t\t\t\tif (sysUser != null) {\n\t\t\t\t\t\t\t// \u767b\u5f55\u8d26\u53f7\n\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\tfield.set(parameter, sysUser.getUsername());\n\t\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (\"updateTime\".equals(field.getName())) {\n\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\tfield.set(parameter, new Date());\n\t\t\t\t\t\tfield.setAccessible(false);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn invocation.proceed();\n\t}\n\n\t@Override\n\tpublic Object plugin(Object target) {\n\t\treturn Plugin.wrap(target, this);\n\t}\n\n\t@Override\n\tpublic void setProperties(Properties properties) {\n\t\t// TODO Auto-generated method stub\n\t}\n\n\t//update-begin--Author:scott  Date:20191213 for\uff1a\u5173\u4e8e\u4f7f\u7528Quzrtz \u5f00\u542f\u7ebf\u7a0b\u4efb\u52a1\uff0c #465\n    /**\n     * \u83b7\u53d6\u767b\u5f55\u7528\u6237\n     * @return\n     */\n\tprivate LoginUser getLoginUser() {", "right_context": "}\n\t//update-end--Author:scott  Date:20191213 for\uff1a\u5173\u4e8e\u4f7f\u7528Quzrtz \u5f00\u542f\u7ebf\u7a0b\u4efb\u52a1\uff0c #465\n\n}", "class_name": "MybatisInterceptor", "return_type": "LoginUser", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BodyReaderHttpServletRequestWrapper extends HttpServletRequestWrapper {\n\n    private final byte[] body;\n\n    public BodyReaderHttpServletRequestWrapper(HttpServletRequest request) {\n\n        super(request);\n        String sessionStream = getBodyString(request);\n        body = sessionStream.getBytes(Charset.forName(\"UTF-8\"));\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42Body\n     *\n     * @param request\n     * @return\n     */\n    public String getBodyString(final ServletRequest request) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Description: \u590d\u5236\u8f93\u5165\u6d41</br>\n     *\n     * @param inputStream\n     * @return</br>\n     */\n    public InputStream cloneInputStream(ServletInputStream inputStream) {\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int len;\n        try {\n            while ((len = inputStream.read(buffer)) > -1) {\n                byteArrayOutputStream.write(buffer, 0, len);\n            }\n            byteArrayOutputStream.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n    }\n\n    @Override\n    public BufferedReader getReader() {\n\n        return new BufferedReader(new InputStreamReader(getInputStream()));\n    }\n\n    @Override\n    public ServletInputStream getInputStream() {\n\n        final ByteArrayInputStream bais = new ByteArrayInputStream(body);\n        return new ServletInputStream() {\n\n            @Override\n            public int read() {\n\n                return bais.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener readListener) {\n\n            }\n        };\n    }\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/369", "ground_truth": "\n\n        StringBuilder sb = new StringBuilder();\n        try (InputStream inputStream = cloneInputStream(request.getInputStream());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\")))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return sb.toString();\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "sign", "util", "BodyReaderHttpServletRequestWrapper.java"], "context_start_lineno": 0, "function_name": "getBodyString", "left_context": "class BodyReaderHttpServletRequestWrapper extends HttpServletRequestWrapper {\n\n    private final byte[] body;\n\n    public BodyReaderHttpServletRequestWrapper(HttpServletRequest request) {\n\n        super(request);\n        String sessionStream = getBodyString(request);\n        body = sessionStream.getBytes(Charset.forName(\"UTF-8\"));\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42Body\n     *\n     * @param request\n     * @return\n     */\n    public String getBodyString(final ServletRequest request) {", "right_context": "}\n\n    /**\n     * Description: \u590d\u5236\u8f93\u5165\u6d41</br>\n     *\n     * @param inputStream\n     * @return</br>\n     */\n    public InputStream cloneInputStream(ServletInputStream inputStream) {\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int len;\n        try {\n            while ((len = inputStream.read(buffer)) > -1) {\n                byteArrayOutputStream.write(buffer, 0, len);\n            }\n            byteArrayOutputStream.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n    }\n\n    @Override\n    public BufferedReader getReader() {\n\n        return new BufferedReader(new InputStreamReader(getInputStream()));\n    }\n\n    @Override\n    public ServletInputStream getInputStream() {\n\n        final ByteArrayInputStream bais = new ByteArrayInputStream(body);\n        return new ServletInputStream() {\n\n            @Override\n            public int read() {\n\n                return bais.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener readListener) {\n\n            }\n        };\n    }\n}", "class_name": "BodyReaderHttpServletRequestWrapper", "return_type": "String", "parameters": [{"type": "ServletRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DySmsHelper {\n\t\n\tprivate final static Logger logger=LoggerFactory.getLogger(DySmsHelper.class);\n\n    /**\u4ea7\u54c1\u540d\u79f0:\u4e91\u901a\u4fe1\u77ed\u4fe1API\u4ea7\u54c1,\u5f00\u53d1\u8005\u65e0\u9700\u66ff\u6362*/\n    static final String PRODUCT = \"Dysmsapi\";\n    /**\u4ea7\u54c1\u57df\u540d,\u5f00\u53d1\u8005\u65e0\u9700\u66ff\u6362*/\n    static final String DOMAIN = \"dysmsapi.aliyuncs.com\";\n\n    /**TODO \u6b64\u5904\u9700\u8981\u66ff\u6362\u6210\u5f00\u53d1\u8005\u81ea\u5df1\u7684AK(\u5728\u963f\u91cc\u4e91\u8bbf\u95ee\u63a7\u5236\u53f0\u5bfb\u627e)*/\n    static  String accessKeyId;\n    static  String accessKeySecret;\n\n    public static void setAccessKeyId(String accessKeyId) {\n        DySmsHelper.accessKeyId = accessKeyId;\n    }\n\n    public static void setAccessKeySecret(String accessKeySecret) {\n        DySmsHelper.accessKeySecret = accessKeySecret;\n    }\n\n    public static String getAccessKeyId() {\n        return accessKeyId;\n    }\n\n    public static String getAccessKeySecret() {\n        return accessKeySecret;\n    }\n    \n    \n    public static boolean sendSms(String phone, JSONObject templateParamJson, DySmsEnum dySmsEnum) throws ClientException {<FILL_FUNCTION_BODY>}\n    \n    private static void validateParam(JSONObject templateParamJson,DySmsEnum dySmsEnum) {\n    \tString keys = dySmsEnum.getKeys();\n    \tString [] keyArr = keys.split(\",\");\n    \tfor(String item :keyArr) {\n    \t\tif(!templateParamJson.containsKey(item)) {\n    \t\t\tthrow new RuntimeException(\"\u6a21\u677f\u7f3a\u5c11\u53c2\u6570\uff1a\"+item);\n    \t\t}\n    \t}\n    }\n    \n\n//    public static void main(String[] args) throws ClientException, InterruptedException {\n//    \tJSONObject obj = new JSONObject();\n//    \tobj.put(\"code\", \"1234\");\n//    \tsendSms(\"13800138000\", obj, DySmsEnum.FORGET_PASSWORD_TEMPLATE_CODE);\n//    }\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/386", "ground_truth": "\n    \t//\u53ef\u81ea\u52a9\u8c03\u6574\u8d85\u65f6\u65f6\u95f4\n        System.setProperty(\"sun.net.client.defaultConnectTimeout\", \"10000\");\n        System.setProperty(\"sun.net.client.defaultReadTimeout\", \"10000\");\n\n        //update-begin-author\uff1ataoyan date:20200811 for:\u914d\u7f6e\u7c7b\u6570\u636e\u83b7\u53d6\n        StaticConfig staticConfig = SpringContextUtils.getBean(StaticConfig.class);\n        //logger.info(\"\u963f\u91cc\u5927\u9c7c\u77ed\u4fe1\u79d8\u94a5 accessKeyId\uff1a\" + staticConfig.getAccessKeyId());\n        //logger.info(\"\u963f\u91cc\u5927\u9c7c\u77ed\u4fe1\u79d8\u94a5 accessKeySecret\uff1a\"+ staticConfig.getAccessKeySecret());\n        setAccessKeyId(staticConfig.getAccessKeyId());\n        setAccessKeySecret(staticConfig.getAccessKeySecret());\n        //update-end-author\uff1ataoyan date:20200811 for:\u914d\u7f6e\u7c7b\u6570\u636e\u83b7\u53d6\n        \n        //\u521d\u59cb\u5316acsClient,\u6682\u4e0d\u652f\u6301region\u5316\n        IClientProfile profile = DefaultProfile.getProfile(\"cn-hangzhou\", accessKeyId, accessKeySecret);\n        DefaultProfile.addEndpoint(\"cn-hangzhou\", \"cn-hangzhou\", PRODUCT, DOMAIN);\n        IAcsClient acsClient = new DefaultAcsClient(profile);\n        \n        //\u9a8c\u8bc1json\u53c2\u6570\n        validateParam(templateParamJson,dySmsEnum);\n        \n        //\u7ec4\u88c5\u8bf7\u6c42\u5bf9\u8c61-\u5177\u4f53\u63cf\u8ff0\u89c1\u63a7\u5236\u53f0-\u6587\u6863\u90e8\u5206\u5185\u5bb9\n        SendSmsRequest request = new SendSmsRequest();\n        //\u5fc5\u586b:\u5f85\u53d1\u9001\u624b\u673a\u53f7\n        request.setPhoneNumbers(phone);\n        //\u5fc5\u586b:\u77ed\u4fe1\u7b7e\u540d-\u53ef\u5728\u77ed\u4fe1\u63a7\u5236\u53f0\u4e2d\u627e\u5230\n        request.setSignName(dySmsEnum.getSignName());\n        //\u5fc5\u586b:\u77ed\u4fe1\u6a21\u677f-\u53ef\u5728\u77ed\u4fe1\u63a7\u5236\u53f0\u4e2d\u627e\u5230\n        request.setTemplateCode(dySmsEnum.getTemplateCode());\n        //\u53ef\u9009:\u6a21\u677f\u4e2d\u7684\u53d8\u91cf\u66ff\u6362JSON\u4e32,\u5982\u6a21\u677f\u5185\u5bb9\u4e3a\"\u4eb2\u7231\u7684${name},\u60a8\u7684\u9a8c\u8bc1\u7801\u4e3a${code}\"\u65f6,\u6b64\u5904\u7684\u503c\u4e3a\n        request.setTemplateParam(templateParamJson.toJSONString());\n        \n        //\u9009\u586b-\u4e0a\u884c\u77ed\u4fe1\u6269\u5c55\u7801(\u65e0\u7279\u6b8a\u9700\u6c42\u7528\u6237\u8bf7\u5ffd\u7565\u6b64\u5b57\u6bb5)\n        //request.setSmsUpExtendCode(\"90997\");\n\n        //\u53ef\u9009:outId\u4e3a\u63d0\u4f9b\u7ed9\u4e1a\u52a1\u65b9\u6269\u5c55\u5b57\u6bb5,\u6700\u7ec8\u5728\u77ed\u4fe1\u56de\u6267\u6d88\u606f\u4e2d\u5c06\u6b64\u503c\u5e26\u56de\u7ed9\u8c03\u7528\u8005\n        //request.setOutId(\"yourOutId\");\n\n        boolean result = false;\n\n        //hint \u6b64\u5904\u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u6ce8\u610fcatch\n        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);\n        logger.info(\"\u77ed\u4fe1\u63a5\u53e3\u8fd4\u56de\u7684\u6570\u636e----------------\");\n        logger.info(\"{Code:\" + sendSmsResponse.getCode()+\",Message:\" + sendSmsResponse.getMessage()+\",RequestId:\"+ sendSmsResponse.getRequestId()+\",BizId:\"+sendSmsResponse.getBizId()+\"}\");\n        String ok = \"OK\";\n        if (ok.equals(sendSmsResponse.getCode())) {\n            result = true;\n        }\n        return result;\n        \n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "common", "util", "DySmsHelper.java"], "context_start_lineno": 0, "function_name": "sendSms", "left_context": "class DySmsHelper {\n\t\n\tprivate final static Logger logger=LoggerFactory.getLogger(DySmsHelper.class);\n\n    /**\u4ea7\u54c1\u540d\u79f0:\u4e91\u901a\u4fe1\u77ed\u4fe1API\u4ea7\u54c1,\u5f00\u53d1\u8005\u65e0\u9700\u66ff\u6362*/\n    static final String PRODUCT = \"Dysmsapi\";\n    /**\u4ea7\u54c1\u57df\u540d,\u5f00\u53d1\u8005\u65e0\u9700\u66ff\u6362*/\n    static final String DOMAIN = \"dysmsapi.aliyuncs.com\";\n\n    /**TODO \u6b64\u5904\u9700\u8981\u66ff\u6362\u6210\u5f00\u53d1\u8005\u81ea\u5df1\u7684AK(\u5728\u963f\u91cc\u4e91\u8bbf\u95ee\u63a7\u5236\u53f0\u5bfb\u627e)*/\n    static  String accessKeyId;\n    static  String accessKeySecret;\n\n    public static void setAccessKeyId(String accessKeyId) {\n        DySmsHelper.accessKeyId = accessKeyId;\n    }\n\n    public static void setAccessKeySecret(String accessKeySecret) {\n        DySmsHelper.accessKeySecret = accessKeySecret;\n    }\n\n    public static String getAccessKeyId() {\n        return accessKeyId;\n    }\n\n    public static String getAccessKeySecret() {\n        return accessKeySecret;\n    }\n    \n    \n    public static boolean sendSms(String phone, JSONObject templateParamJson, DySmsEnum dySmsEnum) throws ClientException {", "right_context": "}\n    \n    private static void validateParam(JSONObject templateParamJson,DySmsEnum dySmsEnum) {\n    \tString keys = dySmsEnum.getKeys();\n    \tString [] keyArr = keys.split(\",\");\n    \tfor(String item :keyArr) {\n    \t\tif(!templateParamJson.containsKey(item)) {\n    \t\t\tthrow new RuntimeException(\"\u6a21\u677f\u7f3a\u5c11\u53c2\u6570\uff1a\"+item);\n    \t\t}\n    \t}\n    }\n    \n\n//    public static void main(String[] args) throws ClientException, InterruptedException {\n//    \tJSONObject obj = new JSONObject();\n//    \tobj.put(\"code\", \"1234\");\n//    \tsendSms(\"13800138000\", obj, DySmsEnum.FORGET_PASSWORD_TEMPLATE_CODE);\n//    }\n}", "class_name": "DySmsHelper", "return_type": "boolean", "parameters": [{"type": "String", "name": "phone"}, {"type": "JSONObject", "name": "templateParamJson"}, {"type": "DySmsEnum", "name": "dySmsEnum"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SysPositionServiceImpl extends ServiceImpl<SysPositionMapper, SysPosition> implements ISysPositionService {\n\n    @Override\n    public SysPosition getByCode(String code) {\n        LambdaQueryWrapper<SysPosition> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(SysPosition::getCode, code);\n        return super.getOne(queryWrapper);\n    }\n\n    @Override\n    public List<SysPosition> getPositionList(String userId) {\n        return this.baseMapper.getPositionList(userId);\n    }\n\n    @Override\n    public String getPositionName(List<String> postList) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/407", "ground_truth": "\n        List<SysPosition> positionNameList = this.baseMapper.getPositionName(postList);\n        if (null != positionNameList && positionNameList.size()>0) {\n            return positionNameList.stream().map(SysPosition::getName).collect(Collectors.joining(SymbolConstant.COMMA));\n        }\n        return \"\";\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "system", "service", "impl", "SysPositionServiceImpl.java"], "context_start_lineno": 0, "function_name": "getPositionName", "left_context": "class SysPositionServiceImpl extends ServiceImpl<SysPositionMapper, SysPosition> implements ISysPositionService {\n\n    @Override\n    public SysPosition getByCode(String code) {\n        LambdaQueryWrapper<SysPosition> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(SysPosition::getCode, code);\n        return super.getOne(queryWrapper);\n    }\n\n    @Override\n    public List<SysPosition> getPositionList(String userId) {\n        return this.baseMapper.getPositionList(userId);\n    }\n\n    @Override\n    public String getPositionName(List<String> postList) {", "right_context": "}\n}", "class_name": "SysPositionServiceImpl", "return_type": "String", "parameters": [{"type": "List<String>", "name": "postList"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/ReflectHelper.java\n// --------------------------------------------------\n// /** \n//  * \u628amap\u4e2d\u7684\u5185\u5bb9\u5168\u90e8\u6ce8\u5165\u5230\u65b0\u5b9e\u4f8b\u4e2d\n//  * @param clazz\n//  * @param data\n//  * @return\n//  */\n// @SuppressWarnings(\"unchecked\") public static <T>T setAll(Class<T> clazz,Map<String,Object> data){\n//   T o=null;\n//   try {\n//     o=clazz.newInstance();\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//     o=null;\n//     return o;\n//   }\n//   return (T)setAll(o,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oConvertUtils.java\n// --------------------------------------------------\n// public static <F,T>T entityToModel(F entity,Class<T> modelClass){\n//   log.debug(\"entityToModel : Entity\u5c5e\u6027\u7684\u503c\u8d4b\u503c\u5230Model\");\n//   Object model=null;\n//   if (entity == null || modelClass == null) {\n//     return null;\n//   }\n//   try {\n//     model=modelClass.newInstance();\n//   }\n//  catch (  InstantiationException e) {\n//     log.error(\"entityToModel : \u5b9e\u4f8b\u5316\u5f02\u5e38\",e);\n//   }\n// catch (  IllegalAccessException e) {\n//     log.error(\"entityToModel : \u5b89\u5168\u6743\u9650\u5f02\u5e38\",e);\n//   }\n//   BeanUtils.copyProperties(entity,model);\n//   return (T)model;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/sqlInjection/parse/ParserSupport.java\n// --------------------------------------------------\n// /** \n//  * \u8c03\u7528 {@link CCJSqlParser}\u89e3\u6790SQL\u8bed\u53e5\u90e8\u4ef6\u8fd4\u56de\u89e3\u6790\u751f\u6210\u7684\u5bf9\u8c61,\u5982 {@code 'ORDER BY id DESC'}\n//  * @param < T >\n//  * @param input\n//  * @param method     \u6307\u5b9a\u8c03\u7528\u7684{@link CCJSqlParser}\u89e3\u6790\u65b9\u6cd5\n//  * @param targetType \u8fd4\u56de\u7684\u89e3\u6790\u5bf9\u8c61\u7c7b\u578b\n//  * @return\n//  * @since 3.18.3\n//  */\n// public static <T>T parseComponent(String input,String method,Class<T> targetType){\n//   try {\n//     CCJSqlParser parser=new CCJSqlParser(new StringProvider(input));\n//     try {\n//       return checkNotNull(targetType,\"targetType is null\").cast(parser.getClass().getMethod(method).invoke(parser));\n//     }\n//  catch (    InvocationTargetException e) {\n//       Throwables.throwIfUnchecked(e.getTargetException());\n//       throw new RuntimeException(e.getTargetException());\n//     }\n//   }\n//  catch (  IllegalAccessException|NoSuchMethodException|SecurityException e) {\n//     Throwables.throwIfUnchecked(e);\n//     throw new RuntimeException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/core/util/JacksonUtil.java\n// --------------------------------------------------\n// /** \n//  * string --> bean\u3001Map\u3001List(array)\n//  * @param jsonStr\n//  * @param clazz\n//  * @return obj\n//  * @throws Exception\n//  */\n// public static <T>T readValue(String jsonStr,Class<T> clazz){\n//   try {\n//     return getInstance().readValue(jsonStr,clazz);\n//   }\n//  catch (  JsonParseException e) {\n//     logger.error(e.getMessage(),e);\n//   }\n// catch (  JsonMappingException e) {\n//     logger.error(e.getMessage(),e);\n//   }\n// catch (  IOException e) {\n//     logger.error(e.getMessage(),e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-visual/jeecg-cloud-xxljob/src/main/java/com/xxl/job/admin/core/util/JacksonUtil.java\n// --------------------------------------------------\n// /** \n//  * string --> List<Bean>...\n//  * @param jsonStr\n//  * @param parametrized\n//  * @param parameterClasses\n//  * @param < T >\n//  * @return\n//  */\n// public static <T>T readValue(String jsonStr,Class<?> parametrized,Class<?>... parameterClasses){\n//   try {\n//     JavaType javaType=getInstance().getTypeFactory().constructParametricType(parametrized,parameterClasses);\n//     return getInstance().readValue(jsonStr,javaType);\n//   }\n//  catch (  JsonParseException e) {\n//     logger.error(e.getMessage(),e);\n//   }\n// catch (  JsonMappingException e) {\n//     logger.error(e.getMessage(),e);\n//   }\n// catch (  IOException e) {\n//     logger.error(e.getMessage(),e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/SpringContextUtils.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7class\u83b7\u53d6Bean.\n//  * @param clazz\n//  * @param < T >\n//  * @return\n//  */\n// public static <T>T getBean(Class<T> clazz){\n//   return getApplicationContext().getBean(clazz);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/SpringContextUtils.java\n// --------------------------------------------------\n// /** \n//  * \u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean\n//  * @param name\n//  * @param clazz\n//  * @param < T >\n//  * @return\n//  */\n// public static <T>T getBean(String name,Class<T> clazz){\n//   return getApplicationContext().getBean(name,clazz);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ThreadLocalDataHelper {\n    /**\n     * \u7ebf\u7a0b\u7684\u672c\u5730\u53d8\u91cf\n     */\n    private static final ThreadLocal<ConcurrentHashMap> REQUEST_DATA = new ThreadLocal<>();\n\n    /**\n     * \u5b58\u50a8\u672c\u5730\u53c2\u6570\n     */\n    private static final ConcurrentHashMap DATA_MAP = new ConcurrentHashMap<>();\n\n    /**\n     * \u8bbe\u7f6e\u8bf7\u6c42\u53c2\u6570\n     *\n     * @param key  \u53c2\u6570key\n     * @param value \u53c2\u6570\u503c\n     */\n    public static void put(String key, Object value) {\n        if(ObjectUtil.isNotEmpty(value)) {\n            DATA_MAP.put(key, value);\n            REQUEST_DATA.set(DATA_MAP);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\u503c\n     *\n     * @param key \u8bf7\u6c42\u53c2\u6570\n     * @return\n     */\n    public static <T> T get(String key) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n     *\n     * @return \u8bf7\u6c42\u53c2\u6570 MAP \u5bf9\u8c61\n     */\n    public static void clear() {\n        DATA_MAP.clear();\n        REQUEST_DATA.remove();\n    }\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/423", "ground_truth": "\n        ConcurrentHashMap dataMap = REQUEST_DATA.get();\n        if (CollectionUtils.isNotEmpty(dataMap)) {\n            return (T) dataMap.get(key);\n        }\n        return null;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "mybatis", "ThreadLocalDataHelper.java"], "context_start_lineno": 0, "function_name": "get", "left_context": "class ThreadLocalDataHelper {\n    /**\n     * \u7ebf\u7a0b\u7684\u672c\u5730\u53d8\u91cf\n     */\n    private static final ThreadLocal<ConcurrentHashMap> REQUEST_DATA = new ThreadLocal<>();\n\n    /**\n     * \u5b58\u50a8\u672c\u5730\u53c2\u6570\n     */\n    private static final ConcurrentHashMap DATA_MAP = new ConcurrentHashMap<>();\n\n    /**\n     * \u8bbe\u7f6e\u8bf7\u6c42\u53c2\u6570\n     *\n     * @param key  \u53c2\u6570key\n     * @param value \u53c2\u6570\u503c\n     */\n    public static void put(String key, Object value) {\n        if(ObjectUtil.isNotEmpty(value)) {\n            DATA_MAP.put(key, value);\n            REQUEST_DATA.set(DATA_MAP);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\u503c\n     *\n     * @param key \u8bf7\u6c42\u53c2\u6570\n     * @return\n     */\n    public static <T> T get(String key) {", "right_context": "}\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n     *\n     * @return \u8bf7\u6c42\u53c2\u6570 MAP \u5bf9\u8c61\n     */\n    public static void clear() {\n        DATA_MAP.clear();\n        REQUEST_DATA.remove();\n    }\n\n}", "class_name": "ThreadLocalDataHelper", "return_type": "T", "parameters": [{"type": "String", "name": "key"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/config/shiro/ShiroConfig.java\n// --------------------------------------------------\n// @Bean public FilterRegistrationBean shiroFilterRegistration(){\n//   FilterRegistrationBean registration=new FilterRegistrationBean();\n//   registration.setFilter(new DelegatingFilterProxy(\"shiroFilterFactoryBean\"));\n//   registration.setEnabled(true);\n//   registration.addUrlPatterns(\"/*\");\n//   registration.setAsyncSupported(true);\n//   registration.setDispatcherTypes(DispatcherType.REQUEST,DispatcherType.ASYNC);\n//   return registration;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-server-cloud/jeecg-cloud-gateway/src/main/java/org/jeecg/filter/SentinelFilterContextConfig.java\n// --------------------------------------------------\n// @Bean public FilterRegistrationBean sentinelFilterRegistration(){\n//   FilterRegistrationBean registration=new FilterRegistrationBean();\n//   registration.setFilter(new CommonFilter());\n//   registration.addUrlPatterns(\"/*\");\n//   registration.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY,\"false\");\n//   registration.setName(\"sentinelFilter\");\n//   registration.setOrder(1);\n//   return registration;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/config/sign/interceptor/SignAuthConfiguration.java\n// --------------------------------------------------\n// @Bean public FilterRegistrationBean reqBodyFilterRegistrationBean(){\n//   FilterRegistrationBean registration=new FilterRegistrationBean();\n//   registration.setFilter(requestBodyReserveFilter());\n//   registration.setName(\"requestBodyReserveFilter\");\n//   String signUrls=jeecgBaseConfig.getSignUrls();\n//   String[] signUrlsArray=null;\n//   if (StringUtils.isNotBlank(signUrls)) {\n//     signUrlsArray=signUrls.split(\",\");\n//   }\n//  else {\n//     signUrlsArray=PathMatcherUtil.SIGN_URL_LIST;\n//   }\n//   registration.addUrlPatterns(signUrlsArray);\n//   return registration;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WebSocketConfig {\n    /**\n     * \t\u6ce8\u5165ServerEndpointExporter\uff0c\n     * \t\u8fd9\u4e2abean\u4f1a\u81ea\u52a8\u6ce8\u518c\u4f7f\u7528\u4e86@ServerEndpoint\u6ce8\u89e3\u58f0\u660e\u7684Websocket endpoint\n     */\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter() {\n        return new ServerEndpointExporter();\n    }\n\n    @Bean\n    public WebsocketFilter websocketFilter(){\n        return new WebsocketFilter();\n    }\n\n    @Bean\n    public FilterRegistrationBean getFilterRegistrationBean(){<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/426", "ground_truth": "\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(websocketFilter());\n        //TODO \u4e34\u65f6\u6ce8\u91ca\u6389\uff0c\u6d4b\u8bd5\u4e0b\u7ebf\u4e0asocket\u603b\u65ad\u7684\u95ee\u9898\n        bean.addUrlPatterns(\"/taskCountSocket/*\", \"/websocket/*\",\"/eoaSocket/*\",\"/eoaNewChatSocket/*\", \"/newsWebsocket/*\", \"/vxeSocket/*\");\n        return bean;\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "WebSocketConfig.java"], "context_start_lineno": 0, "function_name": "getFilterRegistrationBean", "left_context": "class WebSocketConfig {\n    /**\n     * \t\u6ce8\u5165ServerEndpointExporter\uff0c\n     * \t\u8fd9\u4e2abean\u4f1a\u81ea\u52a8\u6ce8\u518c\u4f7f\u7528\u4e86@ServerEndpoint\u6ce8\u89e3\u58f0\u660e\u7684Websocket endpoint\n     */\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter() {\n        return new ServerEndpointExporter();\n    }\n\n    @Bean\n    public WebsocketFilter websocketFilter(){\n        return new WebsocketFilter();\n    }\n\n    @Bean\n    public FilterRegistrationBean getFilterRegistrationBean(){", "right_context": "}\n\n}", "class_name": "WebSocketConfig", "return_type": "FilterRegistrationBean", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PasswordUtil {\n\n\t/**\n\t * JAVA6\u652f\u6301\u4ee5\u4e0b\u4efb\u610f\u4e00\u79cd\u7b97\u6cd5 PBEWITHMD5ANDDES PBEWITHMD5ANDTRIPLEDES\n\t * PBEWITHSHAANDDESEDE PBEWITHSHA1ANDRC2_40 PBKDF2WITHHMACSHA1\n\t * */\n\n    /**\n     * \u5b9a\u4e49\u4f7f\u7528\u7684\u7b97\u6cd5\u4e3a:PBEWITHMD5andDES\u7b97\u6cd5\n     * \u52a0\u5bc6\u7b97\u6cd5\n     */\n\tpublic static final String ALGORITHM = \"PBEWithMD5AndDES\";\n\n    /**\n     * \u5b9a\u4e49\u4f7f\u7528\u7684\u7b97\u6cd5\u4e3a:PBEWITHMD5andDES\u7b97\u6cd5\n     * \u5bc6\u94a5\n     */\n\tpublic static final String SALT = \"63293188\";\n\n\t/**\n\t * \u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570\u4e3a1000\u6b21\n\t */\n\tprivate static final int ITERATIONCOUNT = 1000;\n\n\t/**\n\t * \u83b7\u53d6\u52a0\u5bc6\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684\u76d0\u503c,\u89e3\u5bc6\u4e2d\u4f7f\u7528\u7684\u76d0\u503c\u5fc5\u987b\u4e0e\u52a0\u5bc6\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u624d\u80fd\u5b8c\u6210\u64cd\u4f5c. \u76d0\u957f\u5ea6\u5fc5\u987b\u4e3a8\u5b57\u8282\n\t * \n\t * @return byte[] \u76d0\u503c\n\t * */\n\tpublic static byte[] getSalt() throws Exception {\n\t\t// \u5b9e\u4f8b\u5316\u5b89\u5168\u968f\u673a\u6570\n\t\tSecureRandom random = new SecureRandom();\n\t\t// \u4ea7\u51fa\u76d0\n\t\treturn random.generateSeed(8);\n\t}\n\n\tpublic static byte[] getStaticSalt() {\n\t\t// \u4ea7\u51fa\u76d0\n\t\treturn SALT.getBytes();\n\t}\n\n\t/**\n\t * \u6839\u636ePBE\u5bc6\u7801\u751f\u6210\u4e00\u628a\u5bc6\u94a5\n\t * \n\t * @param password\n\t *            \u751f\u6210\u5bc6\u94a5\u65f6\u6240\u4f7f\u7528\u7684\u5bc6\u7801\n\t * @return Key PBE\u7b97\u6cd5\u5bc6\u94a5\n\t * */\n\tprivate static Key getPbeKey(String password) {\n\t\t// \u5b9e\u4f8b\u5316\u4f7f\u7528\u7684\u7b97\u6cd5\n\t\tSecretKeyFactory keyFactory;\n\t\tSecretKey secretKey = null;\n\t\ttry {\n\t\t\tkeyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n\t\t\t// \u8bbe\u7f6ePBE\u5bc6\u94a5\u53c2\u6570\n\t\t\tPBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n\t\t\t// \u751f\u6210\u5bc6\u94a5\n\t\t\tsecretKey = keyFactory.generateSecret(keySpec);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn secretKey;\n\t}\n\n\t/**\n\t * \u52a0\u5bc6\u660e\u6587\u5b57\u7b26\u4e32\n\t * \n\t * @param plaintext\n\t *            \u5f85\u52a0\u5bc6\u7684\u660e\u6587\u5b57\u7b26\u4e32\n\t * @param password\n\t *            \u751f\u6210\u5bc6\u94a5\u65f6\u6240\u4f7f\u7528\u7684\u5bc6\u7801\n\t * @param salt\n\t *            \u76d0\u503c\n\t * @return \u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u5b57\u7b26\u4e32\n\t * @throws Exception\n\t */\n\tpublic static String encrypt(String plaintext, String password, String salt) {\n\n\t\tKey key = getPbeKey(password);\n\t\tbyte[] encipheredData = null;\n\t\tPBEParameterSpec parameterSpec = new PBEParameterSpec(salt.getBytes(), ITERATIONCOUNT);\n\t\ttry {\n\t\t\tCipher cipher = Cipher.getInstance(ALGORITHM);\n\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);\n\t\t\t//update-begin-author:sccott date:20180815 for:\u4e2d\u6587\u4f5c\u4e3a\u7528\u6237\u540d\u65f6\uff0c\u52a0\u5bc6\u7684\u5bc6\u7801windows\u548clinux\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c gitee/issues/IZUD7\n\t\t\tencipheredData = cipher.doFinal(plaintext.getBytes(\"utf-8\"));\n\t\t\t//update-end-author:sccott date:20180815 for:\u4e2d\u6587\u4f5c\u4e3a\u7528\u6237\u540d\u65f6\uff0c\u52a0\u5bc6\u7684\u5bc6\u7801windows\u548clinux\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c gitee/issues/IZUD7\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn bytesToHexString(encipheredData);\n\t}\n\n\t/**\n\t * \u89e3\u5bc6\u5bc6\u6587\u5b57\u7b26\u4e32\n\t * \n\t * @param ciphertext\n\t *            \u5f85\u89e3\u5bc6\u7684\u5bc6\u6587\u5b57\u7b26\u4e32\n\t * @param password\n\t *            \u751f\u6210\u5bc6\u94a5\u65f6\u6240\u4f7f\u7528\u7684\u5bc6\u7801(\u5982\u9700\u89e3\u5bc6,\u8be5\u53c2\u6570\u9700\u8981\u4e0e\u52a0\u5bc6\u65f6\u4f7f\u7528\u7684\u4e00\u81f4)\n\t * @param salt\n\t *            \u76d0\u503c(\u5982\u9700\u89e3\u5bc6,\u8be5\u53c2\u6570\u9700\u8981\u4e0e\u52a0\u5bc6\u65f6\u4f7f\u7528\u7684\u4e00\u81f4)\n\t * @return \u89e3\u5bc6\u540e\u7684\u660e\u6587\u5b57\u7b26\u4e32\n\t * @throws Exception\n\t */\n\tpublic static String decrypt(String ciphertext, String password, String salt) {\n\n\t\tKey key = getPbeKey(password);\n\t\tbyte[] passDec = null;\n\t\tPBEParameterSpec parameterSpec = new PBEParameterSpec(salt.getBytes(), ITERATIONCOUNT);\n\t\ttry {\n\t\t\tCipher cipher = Cipher.getInstance(ALGORITHM);\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);\n\n\t\t\tpassDec = cipher.doFinal(hexStringToBytes(ciphertext));\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t}\n\t\treturn new String(passDec);\n\t}\n\n\t/**\n\t * \u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n\t * \n\t * @param src\n\t *            \u5b57\u8282\u6570\u7ec4\n\t * @return\n\t */\n\tpublic static String bytesToHexString(byte[] src) {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * \u5c06\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\n\t * \n\t * @param hexString\n\t *            \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n\t * @return\n\t */\n\tpublic static byte[] hexStringToBytes(String hexString) {\n\t\tif (hexString == null || \"\".equals(hexString)) {\n\t\t\treturn null;\n\t\t}\n\t\thexString = hexString.toUpperCase();\n\t\tint length = hexString.length() / 2;\n\t\tchar[] hexChars = hexString.toCharArray();\n\t\tbyte[] d = new byte[length];\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tint pos = i * 2;\n\t\t\td[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));\n\t\t}\n\t\treturn d;\n\t}\n\n\tprivate static byte charToByte(char c) {\n\t\treturn (byte) \"0123456789ABCDEF\".indexOf(c);\n\t}\n\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/431", "ground_truth": "\n\t\tStringBuilder stringBuilder = new StringBuilder(\"\");\n\t\tif (src == null || src.length <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 0; i < src.length; i++) {\n\t\t\tint v = src[i] & 0xFF;\n\t\t\tString hv = Integer.toHexString(v);\n\t\t\tif (hv.length() < 2) {\n\t\t\t\tstringBuilder.append(0);\n\t\t\t}\n\t\t\tstringBuilder.append(hv);\n\t\t}\n\t\treturn stringBuilder.toString();\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "common", "util", "PasswordUtil.java"], "context_start_lineno": 0, "function_name": "bytesToHexString", "left_context": "class PasswordUtil {\n\n\t/**\n\t * JAVA6\u652f\u6301\u4ee5\u4e0b\u4efb\u610f\u4e00\u79cd\u7b97\u6cd5 PBEWITHMD5ANDDES PBEWITHMD5ANDTRIPLEDES\n\t * PBEWITHSHAANDDESEDE PBEWITHSHA1ANDRC2_40 PBKDF2WITHHMACSHA1\n\t * */\n\n    /**\n     * \u5b9a\u4e49\u4f7f\u7528\u7684\u7b97\u6cd5\u4e3a:PBEWITHMD5andDES\u7b97\u6cd5\n     * \u52a0\u5bc6\u7b97\u6cd5\n     */\n\tpublic static final String ALGORITHM = \"PBEWithMD5AndDES\";\n\n    /**\n     * \u5b9a\u4e49\u4f7f\u7528\u7684\u7b97\u6cd5\u4e3a:PBEWITHMD5andDES\u7b97\u6cd5\n     * \u5bc6\u94a5\n     */\n\tpublic static final String SALT = \"63293188\";\n\n\t/**\n\t * \u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570\u4e3a1000\u6b21\n\t */\n\tprivate static final int ITERATIONCOUNT = 1000;\n\n\t/**\n\t * \u83b7\u53d6\u52a0\u5bc6\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684\u76d0\u503c,\u89e3\u5bc6\u4e2d\u4f7f\u7528\u7684\u76d0\u503c\u5fc5\u987b\u4e0e\u52a0\u5bc6\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u624d\u80fd\u5b8c\u6210\u64cd\u4f5c. \u76d0\u957f\u5ea6\u5fc5\u987b\u4e3a8\u5b57\u8282\n\t * \n\t * @return byte[] \u76d0\u503c\n\t * */\n\tpublic static byte[] getSalt() throws Exception {\n\t\t// \u5b9e\u4f8b\u5316\u5b89\u5168\u968f\u673a\u6570\n\t\tSecureRandom random = new SecureRandom();\n\t\t// \u4ea7\u51fa\u76d0\n\t\treturn random.generateSeed(8);\n\t}\n\n\tpublic static byte[] getStaticSalt() {\n\t\t// \u4ea7\u51fa\u76d0\n\t\treturn SALT.getBytes();\n\t}\n\n\t/**\n\t * \u6839\u636ePBE\u5bc6\u7801\u751f\u6210\u4e00\u628a\u5bc6\u94a5\n\t * \n\t * @param password\n\t *            \u751f\u6210\u5bc6\u94a5\u65f6\u6240\u4f7f\u7528\u7684\u5bc6\u7801\n\t * @return Key PBE\u7b97\u6cd5\u5bc6\u94a5\n\t * */\n\tprivate static Key getPbeKey(String password) {\n\t\t// \u5b9e\u4f8b\u5316\u4f7f\u7528\u7684\u7b97\u6cd5\n\t\tSecretKeyFactory keyFactory;\n\t\tSecretKey secretKey = null;\n\t\ttry {\n\t\t\tkeyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n\t\t\t// \u8bbe\u7f6ePBE\u5bc6\u94a5\u53c2\u6570\n\t\t\tPBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n\t\t\t// \u751f\u6210\u5bc6\u94a5\n\t\t\tsecretKey = keyFactory.generateSecret(keySpec);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn secretKey;\n\t}\n\n\t/**\n\t * \u52a0\u5bc6\u660e\u6587\u5b57\u7b26\u4e32\n\t * \n\t * @param plaintext\n\t *            \u5f85\u52a0\u5bc6\u7684\u660e\u6587\u5b57\u7b26\u4e32\n\t * @param password\n\t *            \u751f\u6210\u5bc6\u94a5\u65f6\u6240\u4f7f\u7528\u7684\u5bc6\u7801\n\t * @param salt\n\t *            \u76d0\u503c\n\t * @return \u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u5b57\u7b26\u4e32\n\t * @throws Exception\n\t */\n\tpublic static String encrypt(String plaintext, String password, String salt) {\n\n\t\tKey key = getPbeKey(password);\n\t\tbyte[] encipheredData = null;\n\t\tPBEParameterSpec parameterSpec = new PBEParameterSpec(salt.getBytes(), ITERATIONCOUNT);\n\t\ttry {\n\t\t\tCipher cipher = Cipher.getInstance(ALGORITHM);\n\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);\n\t\t\t//update-begin-author:sccott date:20180815 for:\u4e2d\u6587\u4f5c\u4e3a\u7528\u6237\u540d\u65f6\uff0c\u52a0\u5bc6\u7684\u5bc6\u7801windows\u548clinux\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c gitee/issues/IZUD7\n\t\t\tencipheredData = cipher.doFinal(plaintext.getBytes(\"utf-8\"));\n\t\t\t//update-end-author:sccott date:20180815 for:\u4e2d\u6587\u4f5c\u4e3a\u7528\u6237\u540d\u65f6\uff0c\u52a0\u5bc6\u7684\u5bc6\u7801windows\u548clinux\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c gitee/issues/IZUD7\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn bytesToHexString(encipheredData);\n\t}\n\n\t/**\n\t * \u89e3\u5bc6\u5bc6\u6587\u5b57\u7b26\u4e32\n\t * \n\t * @param ciphertext\n\t *            \u5f85\u89e3\u5bc6\u7684\u5bc6\u6587\u5b57\u7b26\u4e32\n\t * @param password\n\t *            \u751f\u6210\u5bc6\u94a5\u65f6\u6240\u4f7f\u7528\u7684\u5bc6\u7801(\u5982\u9700\u89e3\u5bc6,\u8be5\u53c2\u6570\u9700\u8981\u4e0e\u52a0\u5bc6\u65f6\u4f7f\u7528\u7684\u4e00\u81f4)\n\t * @param salt\n\t *            \u76d0\u503c(\u5982\u9700\u89e3\u5bc6,\u8be5\u53c2\u6570\u9700\u8981\u4e0e\u52a0\u5bc6\u65f6\u4f7f\u7528\u7684\u4e00\u81f4)\n\t * @return \u89e3\u5bc6\u540e\u7684\u660e\u6587\u5b57\u7b26\u4e32\n\t * @throws Exception\n\t */\n\tpublic static String decrypt(String ciphertext, String password, String salt) {\n\n\t\tKey key = getPbeKey(password);\n\t\tbyte[] passDec = null;\n\t\tPBEParameterSpec parameterSpec = new PBEParameterSpec(salt.getBytes(), ITERATIONCOUNT);\n\t\ttry {\n\t\t\tCipher cipher = Cipher.getInstance(ALGORITHM);\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);\n\n\t\t\tpassDec = cipher.doFinal(hexStringToBytes(ciphertext));\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t}\n\t\treturn new String(passDec);\n\t}\n\n\t/**\n\t * \u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n\t * \n\t * @param src\n\t *            \u5b57\u8282\u6570\u7ec4\n\t * @return\n\t */\n\tpublic static String bytesToHexString(byte[] src) {", "right_context": "}\n\n\t/**\n\t * \u5c06\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\n\t * \n\t * @param hexString\n\t *            \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n\t * @return\n\t */\n\tpublic static byte[] hexStringToBytes(String hexString) {\n\t\tif (hexString == null || \"\".equals(hexString)) {\n\t\t\treturn null;\n\t\t}\n\t\thexString = hexString.toUpperCase();\n\t\tint length = hexString.length() / 2;\n\t\tchar[] hexChars = hexString.toCharArray();\n\t\tbyte[] d = new byte[length];\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tint pos = i * 2;\n\t\t\td[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));\n\t\t}\n\t\treturn d;\n\t}\n\n\tprivate static byte charToByte(char c) {\n\t\treturn (byte) \"0123456789ABCDEF\".indexOf(c);\n\t}\n\n\n}", "class_name": "PasswordUtil", "return_type": "String", "parameters": [{"type": "byte[]", "name": "src"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JeecgDataAutorUtils {\n\t\n\tpublic static final String MENU_DATA_AUTHOR_RULES = \"MENU_DATA_AUTHOR_RULES\";\n\t\n\tpublic static final String MENU_DATA_AUTHOR_RULE_SQL = \"MENU_DATA_AUTHOR_RULE_SQL\";\n\t\n\tpublic static final String SYS_USER_INFO = \"SYS_USER_INFO\";\n\n\t/**\n\t * \u5f80\u94fe\u63a5\u8bf7\u6c42\u91cc\u9762\uff0c\u4f20\u5165\u6570\u636e\u67e5\u8be2\u6761\u4ef6\n\t * \n\t * @param request\n\t * @param dataRules\n\t */\n\tpublic static synchronized void installDataSearchConditon(HttpServletRequest request, List<SysPermissionDataRuleModel> dataRules) {\n\t\t@SuppressWarnings(\"unchecked\")\n        // 1.\u5148\u4ecerequest\u83b7\u53d6MENU_DATA_AUTHOR_RULES\uff0c\u5982\u679c\u5b58\u5219\u83b7\u53d6\u5230LIST\n\t\tList<SysPermissionDataRuleModel> list = (List<SysPermissionDataRuleModel>)loadDataSearchConditon();\n\t\tif (list==null) {\n\t\t\t// 2.\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219new\u4e00\u4e2alist\n\t\t\tlist = new ArrayList<SysPermissionDataRuleModel>();\n\t\t}\n\t\tfor (SysPermissionDataRuleModel tsDataRule : dataRules) {\n\t\t\tlist.add(tsDataRule);\n\t\t}\n        // 3.\u5f80list\u91cc\u9762\u589e\u91cf\u5b58\u6307\n\t\trequest.setAttribute(MENU_DATA_AUTHOR_RULES, list);\n\t}\n\n\t/**\n\t * \u83b7\u53d6\u8bf7\u6c42\u5bf9\u5e94\u7684\u6570\u636e\u6743\u9650\u89c4\u5219\n\t * \n\t * @return\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static synchronized List<SysPermissionDataRuleModel> loadDataSearchConditon() {\n\t\treturn (List<SysPermissionDataRuleModel>) SpringContextUtils.getHttpServletRequest().getAttribute(MENU_DATA_AUTHOR_RULES);\n\t\t\t\t\n\t}\n\n\t/**\n\t * \u83b7\u53d6\u8bf7\u6c42\u5bf9\u5e94\u7684\u6570\u636e\u6743\u9650SQL\n\t * \n\t * @return\n\t */\n\tpublic static synchronized String loadDataSearchConditonSqlString() {\n\t\treturn (String) SpringContextUtils.getHttpServletRequest().getAttribute(MENU_DATA_AUTHOR_RULE_SQL);\n\t}\n\n\t/**\n\t * \u5f80\u94fe\u63a5\u8bf7\u6c42\u91cc\u9762\uff0c\u4f20\u5165\u6570\u636e\u67e5\u8be2\u6761\u4ef6\n\t * \n\t * @param request\n\t * @param sql\n\t */\n\tpublic static synchronized void installDataSearchConditon(HttpServletRequest request, String sql) {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5230request\n\t * @param request\n\t * @param userinfo\n\t */\n\tpublic static synchronized void installUserInfo(HttpServletRequest request, SysUserCacheInfo userinfo) {\n\t\trequest.setAttribute(SYS_USER_INFO, userinfo);\n\t}\n\n\t/**\n\t * \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5230request\n\t * @param userinfo\n\t */\n\tpublic static synchronized void installUserInfo(SysUserCacheInfo userinfo) {\n\t\tSpringContextUtils.getHttpServletRequest().setAttribute(SYS_USER_INFO, userinfo);\n\t}\n\n\t/**\n\t * \u4ecerequest\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n\t * @return\n\t */\n\tpublic static synchronized SysUserCacheInfo loadUserInfo() {\n\t\treturn (SysUserCacheInfo) SpringContextUtils.getHttpServletRequest().getAttribute(SYS_USER_INFO);\n\t\t\t\t\n\t}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/440", "ground_truth": "\n\t\tString ruleSql = (String) loadDataSearchConditonSqlString();\n\t\tif (!StringUtils.hasText(ruleSql)) {\n\t\t\trequest.setAttribute(MENU_DATA_AUTHOR_RULE_SQL,sql);\n\t\t}\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "common", "system", "util", "JeecgDataAutorUtils.java"], "context_start_lineno": 0, "function_name": "installDataSearchConditon", "left_context": "class JeecgDataAutorUtils {\n\t\n\tpublic static final String MENU_DATA_AUTHOR_RULES = \"MENU_DATA_AUTHOR_RULES\";\n\t\n\tpublic static final String MENU_DATA_AUTHOR_RULE_SQL = \"MENU_DATA_AUTHOR_RULE_SQL\";\n\t\n\tpublic static final String SYS_USER_INFO = \"SYS_USER_INFO\";\n\n\t/**\n\t * \u5f80\u94fe\u63a5\u8bf7\u6c42\u91cc\u9762\uff0c\u4f20\u5165\u6570\u636e\u67e5\u8be2\u6761\u4ef6\n\t * \n\t * @param request\n\t * @param dataRules\n\t */\n\tpublic static synchronized void installDataSearchConditon(HttpServletRequest request, List<SysPermissionDataRuleModel> dataRules) {\n\t\t@SuppressWarnings(\"unchecked\")\n        // 1.\u5148\u4ecerequest\u83b7\u53d6MENU_DATA_AUTHOR_RULES\uff0c\u5982\u679c\u5b58\u5219\u83b7\u53d6\u5230LIST\n\t\tList<SysPermissionDataRuleModel> list = (List<SysPermissionDataRuleModel>)loadDataSearchConditon();\n\t\tif (list==null) {\n\t\t\t// 2.\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219new\u4e00\u4e2alist\n\t\t\tlist = new ArrayList<SysPermissionDataRuleModel>();\n\t\t}\n\t\tfor (SysPermissionDataRuleModel tsDataRule : dataRules) {\n\t\t\tlist.add(tsDataRule);\n\t\t}\n        // 3.\u5f80list\u91cc\u9762\u589e\u91cf\u5b58\u6307\n\t\trequest.setAttribute(MENU_DATA_AUTHOR_RULES, list);\n\t}\n\n\t/**\n\t * \u83b7\u53d6\u8bf7\u6c42\u5bf9\u5e94\u7684\u6570\u636e\u6743\u9650\u89c4\u5219\n\t * \n\t * @return\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static synchronized List<SysPermissionDataRuleModel> loadDataSearchConditon() {\n\t\treturn (List<SysPermissionDataRuleModel>) SpringContextUtils.getHttpServletRequest().getAttribute(MENU_DATA_AUTHOR_RULES);\n\t\t\t\t\n\t}\n\n\t/**\n\t * \u83b7\u53d6\u8bf7\u6c42\u5bf9\u5e94\u7684\u6570\u636e\u6743\u9650SQL\n\t * \n\t * @return\n\t */\n\tpublic static synchronized String loadDataSearchConditonSqlString() {\n\t\treturn (String) SpringContextUtils.getHttpServletRequest().getAttribute(MENU_DATA_AUTHOR_RULE_SQL);\n\t}\n\n\t/**\n\t * \u5f80\u94fe\u63a5\u8bf7\u6c42\u91cc\u9762\uff0c\u4f20\u5165\u6570\u636e\u67e5\u8be2\u6761\u4ef6\n\t * \n\t * @param request\n\t * @param sql\n\t */\n\tpublic static synchronized void installDataSearchConditon(HttpServletRequest request, String sql) {", "right_context": "}\n\n\t/**\n\t * \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5230request\n\t * @param request\n\t * @param userinfo\n\t */\n\tpublic static synchronized void installUserInfo(HttpServletRequest request, SysUserCacheInfo userinfo) {\n\t\trequest.setAttribute(SYS_USER_INFO, userinfo);\n\t}\n\n\t/**\n\t * \u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5230request\n\t * @param userinfo\n\t */\n\tpublic static synchronized void installUserInfo(SysUserCacheInfo userinfo) {\n\t\tSpringContextUtils.getHttpServletRequest().setAttribute(SYS_USER_INFO, userinfo);\n\t}\n\n\t/**\n\t * \u4ecerequest\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n\t * @return\n\t */\n\tpublic static synchronized SysUserCacheInfo loadUserInfo() {\n\t\treturn (SysUserCacheInfo) SpringContextUtils.getHttpServletRequest().getAttribute(SYS_USER_INFO);\n\t\t\t\t\n\t}\n}", "class_name": "JeecgDataAutorUtils", "return_type": "void", "parameters": [{"type": "HttpServletRequest", "name": "request"}, {"type": "String", "name": "sql"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CasServiceUtil {\n\t\n\tpublic static void main(String[] args) {\n\t\tString serviceUrl = \"https://cas.8f8.com.cn:8443/cas/p3/serviceValidate\";\n\t\tString service = \"http://localhost:3003/user/login\";\n\t\tString ticket = \"ST-5-1g-9cNES6KXNRwq-GuRET103sm0-DESKTOP-VKLS8B3\";\n\t\tString res = getStValidate(serviceUrl,ticket, service);\n\t\t\n\t\tSystem.out.println(\"---------res-----\"+res);\n\t}\n\t\n\t\n\t/**\n     * \u9a8c\u8bc1ST\n     */\n    public static String getStValidate(String url, String st, String service){\n\t\ttry {\n\t\t\turl = url+\"?service=\"+service+\"&ticket=\"+st;\n\t\t\tCloseableHttpClient httpclient = createHttpClientWithNoSsl();\n\t\t\tHttpGet httpget = new HttpGet(url);\n\t\t\tHttpResponse response = httpclient.execute(httpget);\n\t        String res = readResponse(response);\n\t        return res == null ? null : (res == \"\" ? null : res);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"\";\n\t}\n\n    \n    /**\n     * \u8bfb\u53d6 response body \u5185\u5bb9\u4e3a\u5b57\u7b26\u4e32\n     *\n     * @param response\n     * @return\n     * @throws IOException\n     */\n    private static String readResponse(HttpResponse response) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        String result = new String();\n        String line;\n        while ((line = in.readLine()) != null) {\n            result += line;\n        }\n        return result;\n    }\n    \n    \n    /**\n     * \u521b\u5efa\u6a21\u62df\u5ba2\u6237\u7aef\uff08\u9488\u5bf9 https \u5ba2\u6237\u7aef\u7981\u7528 SSL \u9a8c\u8bc1\uff09\n     *\n     * @param cookieStore \u7f13\u5b58\u7684 Cookies \u4fe1\u606f\n     * @return\n     * @throws Exception\n     */\n    private static CloseableHttpClient createHttpClientWithNoSsl() throws Exception {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/472", "ground_truth": "\n        // Create a trust manager that does not validate certificate chains\n        TrustManager[] trustAllCerts = new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] certs, String authType) {\n                        // don't check\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] certs, String authType) {\n                        // don't check\n                    }\n                }\n        };\n\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n        ctx.init(null, trustAllCerts, null);\n        LayeredConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(ctx);\n        return HttpClients.custom()\n                .setSSLSocketFactory(sslSocketFactory)\n                .build();\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "cas", "util", "CasServiceUtil.java"], "context_start_lineno": 0, "function_name": "createHttpClientWithNoSsl", "left_context": "class CasServiceUtil {\n\t\n\tpublic static void main(String[] args) {\n\t\tString serviceUrl = \"https://cas.8f8.com.cn:8443/cas/p3/serviceValidate\";\n\t\tString service = \"http://localhost:3003/user/login\";\n\t\tString ticket = \"ST-5-1g-9cNES6KXNRwq-GuRET103sm0-DESKTOP-VKLS8B3\";\n\t\tString res = getStValidate(serviceUrl,ticket, service);\n\t\t\n\t\tSystem.out.println(\"---------res-----\"+res);\n\t}\n\t\n\t\n\t/**\n     * \u9a8c\u8bc1ST\n     */\n    public static String getStValidate(String url, String st, String service){\n\t\ttry {\n\t\t\turl = url+\"?service=\"+service+\"&ticket=\"+st;\n\t\t\tCloseableHttpClient httpclient = createHttpClientWithNoSsl();\n\t\t\tHttpGet httpget = new HttpGet(url);\n\t\t\tHttpResponse response = httpclient.execute(httpget);\n\t        String res = readResponse(response);\n\t        return res == null ? null : (res == \"\" ? null : res);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"\";\n\t}\n\n    \n    /**\n     * \u8bfb\u53d6 response body \u5185\u5bb9\u4e3a\u5b57\u7b26\u4e32\n     *\n     * @param response\n     * @return\n     * @throws IOException\n     */\n    private static String readResponse(HttpResponse response) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        String result = new String();\n        String line;\n        while ((line = in.readLine()) != null) {\n            result += line;\n        }\n        return result;\n    }\n    \n    \n    /**\n     * \u521b\u5efa\u6a21\u62df\u5ba2\u6237\u7aef\uff08\u9488\u5bf9 https \u5ba2\u6237\u7aef\u7981\u7528 SSL \u9a8c\u8bc1\uff09\n     *\n     * @param cookieStore \u7f13\u5b58\u7684 Cookies \u4fe1\u606f\n     * @return\n     * @throws Exception\n     */\n    private static CloseableHttpClient createHttpClientWithNoSsl() throws Exception {", "right_context": "}\n\n}", "class_name": "CasServiceUtil", "return_type": "CloseableHttpClient", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SignUtil {\n    public static final String X_PATH_VARIABLE = \"x-path-variable\";\n\n    /**\n     * @param params\n     *            \u6240\u6709\u7684\u8bf7\u6c42\u53c2\u6570\u90fd\u4f1a\u5728\u8fd9\u91cc\u8fdb\u884c\u6392\u5e8f\u52a0\u5bc6\n     * @return \u9a8c\u8bc1\u7b7e\u540d\u7ed3\u679c\n     */\n    public static boolean verifySign(SortedMap<String, String> params,String headerSign) {\n        if (params == null || StringUtils.isEmpty(headerSign)) {\n            return false;\n        }\n        // \u628a\u53c2\u6570\u52a0\u5bc6\n        String paramsSign = getParamsSign(params);\n        log.info(\"Param Sign : {}\", paramsSign);\n        return !StringUtils.isEmpty(paramsSign) && headerSign.equals(paramsSign);\n    }\n\n    /**\n     * @param params\n     *            \u6240\u6709\u7684\u8bf7\u6c42\u53c2\u6570\u90fd\u4f1a\u5728\u8fd9\u91cc\u8fdb\u884c\u6392\u5e8f\u52a0\u5bc6\n     * @return \u5f97\u5230\u7b7e\u540d\n     */\n    public static String getParamsSign(SortedMap<String, String> params) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/491", "ground_truth": "\n        //\u53bb\u6389 Url \u91cc\u7684\u65f6\u95f4\u6233\n        params.remove(\"_t\");\n        String paramsJsonStr = JSONObject.toJSONString(params);\n        log.info(\"Param paramsJsonStr : {}\", paramsJsonStr);\n        //\u8bbe\u7f6e\u7b7e\u540d\u79d8\u94a5\n        JeecgBaseConfig jeecgBaseConfig = SpringContextUtils.getBean(JeecgBaseConfig.class);\n        String signatureSecret = jeecgBaseConfig.getSignatureSecret();\n        String curlyBracket = SymbolConstant.DOLLAR + SymbolConstant.LEFT_CURLY_BRACKET;\n        if(oConvertUtils.isEmpty(signatureSecret) || signatureSecret.contains(curlyBracket)){\n            throw new JeecgBootException(\"\u7b7e\u540d\u5bc6\u94a5 ${jeecg.signatureSecret} \u7f3a\u5c11\u914d\u7f6e \uff01\uff01\");\n        }\n        try {\n            //\u3010issues/I484RW\u30112.4.6\u90e8\u7f72\u540e\uff0c\u4e0b\u62c9\u641c\u7d22\u6846\u63d0\u793a\u201csign\u7b7e\u540d\u68c0\u9a8c\u5931\u8d25\u201d\n            return DigestUtils.md5DigestAsHex((paramsJsonStr + signatureSecret).getBytes(\"UTF-8\")).toUpperCase();\n        } catch (UnsupportedEncodingException e) {\n            log.error(e.getMessage(),e);\n            return null;\n        }\n    ", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-boot-base-core", "src", "main", "java", "org", "jeecg", "config", "sign", "util", "SignUtil.java"], "context_start_lineno": 0, "function_name": "getParamsSign", "left_context": "class SignUtil {\n    public static final String X_PATH_VARIABLE = \"x-path-variable\";\n\n    /**\n     * @param params\n     *            \u6240\u6709\u7684\u8bf7\u6c42\u53c2\u6570\u90fd\u4f1a\u5728\u8fd9\u91cc\u8fdb\u884c\u6392\u5e8f\u52a0\u5bc6\n     * @return \u9a8c\u8bc1\u7b7e\u540d\u7ed3\u679c\n     */\n    public static boolean verifySign(SortedMap<String, String> params,String headerSign) {\n        if (params == null || StringUtils.isEmpty(headerSign)) {\n            return false;\n        }\n        // \u628a\u53c2\u6570\u52a0\u5bc6\n        String paramsSign = getParamsSign(params);\n        log.info(\"Param Sign : {}\", paramsSign);\n        return !StringUtils.isEmpty(paramsSign) && headerSign.equals(paramsSign);\n    }\n\n    /**\n     * @param params\n     *            \u6240\u6709\u7684\u8bf7\u6c42\u53c2\u6570\u90fd\u4f1a\u5728\u8fd9\u91cc\u8fdb\u884c\u6392\u5e8f\u52a0\u5bc6\n     * @return \u5f97\u5230\u7b7e\u540d\n     */\n    public static String getParamsSign(SortedMap<String, String> params) {", "right_context": "}\n}", "class_name": "SignUtil", "return_type": "String", "parameters": [{"type": "SortedMap<String,String>", "name": "params"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SampleParamJob implements Job {\n\n\t/**\n\t * \u82e5\u53c2\u6570\u53d8\u91cf\u540d\u4fee\u6539 QuartzJobController\u4e2d\u4e5f\u9700\u5bf9\u5e94\u4fee\u6539\n\t */\n\tprivate String parameter;\n\n\tpublic void setParameter(String parameter) {\n\t\tthis.parameter = parameter;\n\t}\n\n\t@Override\n\tpublic void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jeecgboot_jeecg-boot/492", "ground_truth": "\n\t\tlog.info(\" Job Execution key\uff1a\"+jobExecutionContext.getJobDetail().getKey());\n\t\tlog.info( String.format(\"welcome %s! Jeecg-Boot \u5e26\u53c2\u6570\u5b9a\u65f6\u4efb\u52a1 SampleParamJob !   \u65f6\u95f4:\" + DateUtils.now(), this.parameter));\n\t", "fpath_tuple": ["jeecgboot_jeecg-boot", "jeecg-boot", "jeecg-module-system", "jeecg-system-biz", "src", "main", "java", "org", "jeecg", "modules", "quartz", "job", "SampleParamJob.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class SampleParamJob implements Job {\n\n\t/**\n\t * \u82e5\u53c2\u6570\u53d8\u91cf\u540d\u4fee\u6539 QuartzJobController\u4e2d\u4e5f\u9700\u5bf9\u5e94\u4fee\u6539\n\t */\n\tprivate String parameter;\n\n\tpublic void setParameter(String parameter) {\n\t\tthis.parameter = parameter;\n\t}\n\n\t@Override\n\tpublic void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {", "right_context": "}\n}", "class_name": "SampleParamJob", "return_type": "void", "parameters": [{"type": "JobExecutionContext", "name": "jobExecutionContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/web-api/src/main/java/com/graphhopper/util/PointList.java\n// --------------------------------------------------\n// @Override public GHPoint3D next(){\n//   if (counter >= size())   throw new NoSuchElementException();\n//   GHPoint3D point=PointList.this.get(counter);\n//   counter++;\n//   return point;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/reader/osm/OSMNodeData.java\n// --------------------------------------------------\n// public GHPoint3D getCoordinates(long id){\n//   if (isTowerNode(id)) {\n//     int tower=idToTowerNode(id);\n//     return towerNodes.is3D() ? new GHPoint3D(towerNodes.getLat(tower),towerNodes.getLon(tower),towerNodes.getEle(tower)) : new GHPoint3D(towerNodes.getLat(tower),towerNodes.getLon(tower),Double.NaN);\n//   }\n//  else   if (isPillarNode(id)) {\n//     long pillar=idToPillarNode(id);\n//     return pillarNodes.is3D() ? new GHPoint3D(pillarNodes.getLat(pillar),pillarNodes.getLon(pillar),pillarNodes.getEle(pillar)) : new GHPoint3D(pillarNodes.getLat(pillar),pillarNodes.getLon(pillar),Double.NaN);\n//   }\n//  else   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/reader/osm/WaySegmentParser.java\n// --------------------------------------------------\n// GHPoint3D getCoordinate(long osmNodeId);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/web-api/src/main/java/com/graphhopper/util/PointList.java\n// --------------------------------------------------\n// @Override public GHPoint3D get(int index){\n//   throw new UnsupportedOperationException(\"cannot access EMPTY PointList\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/web-api/src/main/java/com/graphhopper/util/PointList.java\n// --------------------------------------------------\n// public GHPoint3D get(int index){\n//   return new GHPoint3D(this.getLat(index),this.getLon(index),this.getEle(index));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java\n// --------------------------------------------------\n// @Override public GHPoint3D getSnappedPoint(){\n//   return new GHPoint3D(-3.4446,-38.9996,0);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java\n// --------------------------------------------------\n// @Override public GHPoint3D getSnappedPoint(){\n//   return new GHPoint3D(-3.4449,-38.9999,0);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Snap {\n    public static final int INVALID_NODE = -1;\n    private final GHPoint queryPoint;\n    private double queryDistance = Double.MAX_VALUE;\n    private int wayIndex = -1;\n    private int closestNode = INVALID_NODE;\n    private EdgeIteratorState closestEdge;\n    private GHPoint3D snappedPoint;\n    private Position snappedPosition;\n\n    public Snap(double queryLat, double queryLon) {\n        queryPoint = new GHPoint(queryLat, queryLon);\n    }\n\n    /**\n     * Returns the closest matching node. This is either a tower node of the base graph\n     * or a virtual node (see also {@link QueryGraph#create(BaseGraph, List)}).\n     *\n     * @return {@link #INVALID_NODE} if nothing found, this should be avoided via a call of 'isValid'\n     */\n    public int getClosestNode() {\n        return closestNode;\n    }\n\n    public void setClosestNode(int node) {\n        closestNode = node;\n    }\n\n    /**\n     * @return the distance of the query to the snapped coordinates. In meter\n     */\n    public double getQueryDistance() {\n        return queryDistance;\n    }\n\n    public void setQueryDistance(double dist) {\n        queryDistance = dist;\n    }\n\n    public int getWayIndex() {\n        return wayIndex;\n    }\n\n    public void setWayIndex(int wayIndex) {\n        this.wayIndex = wayIndex;\n    }\n\n    /**\n     * @return 0 if on edge. 1 if on pillar node and 2 if on tower node.\n     */\n    public Position getSnappedPosition() {\n        return snappedPosition;\n    }\n\n    public void setSnappedPosition(Position pos) {\n        this.snappedPosition = pos;\n    }\n\n    /**\n     * @return true if a closest node was found\n     */\n    public boolean isValid() {\n        return closestNode >= 0;\n    }\n\n    public EdgeIteratorState getClosestEdge() {\n        return closestEdge;\n    }\n\n    public void setClosestEdge(EdgeIteratorState edge) {\n        closestEdge = edge;\n    }\n\n    public GHPoint getQueryPoint() {\n        return queryPoint;\n    }\n\n    /**\n     * Calculates the position of the query point 'snapped' to a close road segment or node. Call\n     * calcSnappedPoint before, if not, an IllegalStateException is thrown.\n     */\n    public GHPoint3D getSnappedPoint() {<FILL_FUNCTION_BODY>}\n\n    public void setSnappedPoint(GHPoint3D point) {\n        this.snappedPoint = point;\n    }\n\n    /**\n     * Calculates the closest point on the edge from the query point. If too close to a tower or pillar node this method\n     * might change the snappedPosition and wayIndex.\n     */\n    public void calcSnappedPoint(DistanceCalc distCalc) {\n        if (closestEdge == null)\n            throw new IllegalStateException(\"No closest edge?\");\n        if (snappedPoint != null)\n            throw new IllegalStateException(\"Calculate snapped point only once\");\n\n        PointList fullPL = getClosestEdge().fetchWayGeometry(FetchMode.ALL);\n        double tmpLat = fullPL.getLat(wayIndex);\n        double tmpLon = fullPL.getLon(wayIndex);\n        double tmpEle = fullPL.getEle(wayIndex);\n        if (snappedPosition != Position.EDGE) {\n            snappedPoint = new GHPoint3D(tmpLat, tmpLon, tmpEle);\n            return;\n        }\n\n        double queryLat = getQueryPoint().lat, queryLon = getQueryPoint().lon;\n        double adjLat = fullPL.getLat(wayIndex + 1), adjLon = fullPL.getLon(wayIndex + 1);\n        if (distCalc.validEdgeDistance(queryLat, queryLon, tmpLat, tmpLon, adjLat, adjLon)) {\n            GHPoint crossingPoint = distCalc.calcCrossingPointToEdge(queryLat, queryLon, tmpLat, tmpLon, adjLat, adjLon);\n            double adjEle = fullPL.getEle(wayIndex + 1);\n\n            // We want to prevent extra virtual nodes and very short virtual edges in case the snap/crossing point is\n            // very close to a tower node. Since we delayed the calculation of the crossing point until here, we need\n            // to correct the Snap.Position in these cases. Note that it is possible that the query point is very far\n            // from the tower node, but the crossing point is still very close to it.\n            if (considerEqual(crossingPoint.lat, crossingPoint.lon, tmpLat, tmpLon)) {\n                snappedPosition = wayIndex == 0 ? Position.TOWER : Position.PILLAR;\n                snappedPoint = new GHPoint3D(tmpLat, tmpLon, tmpEle);\n            } else if (considerEqual(crossingPoint.lat, crossingPoint.lon, adjLat, adjLon)) {\n                wayIndex++;\n                snappedPosition = wayIndex == fullPL.size() - 1 ? Position.TOWER : Position.PILLAR;\n                snappedPoint = new GHPoint3D(adjLat, adjLon, adjEle);\n            } else {\n                snappedPoint = new GHPoint3D(crossingPoint.lat, crossingPoint.lon, (tmpEle + adjEle) / 2);\n            }\n        } else {\n            // outside of edge segment [wayIndex, wayIndex+1] should not happen for EDGE\n            assert false : \"incorrect pos: \" + snappedPosition + \" for \" + snappedPoint + \", \" + fullPL + \", \" + wayIndex;\n        }\n    }\n\n    public static boolean considerEqual(double lat, double lon, double lat2, double lon2) {\n        return Math.abs(lat - lat2) < 1e-6 && Math.abs(lon - lon2) < 1e-6;\n    }\n\n    @Override\n    public String toString() {\n        if (closestEdge != null)\n            return snappedPosition + \", \" + closestNode + \" \" + closestEdge.getEdge() + \":\" + closestEdge.getBaseNode() + \"-\" + closestEdge.getAdjNode() +\n                    \" snap: [\" + Helper.round6(snappedPoint.getLat()) + \", \" + Helper.round6(snappedPoint.getLon()) + \"],\" +\n                    \" query: [\" + Helper.round6(queryPoint.getLat()) + \",\" + Helper.round6(queryPoint.getLon()) + \"]\";\n        return closestNode + \", \" + queryPoint + \", \" + wayIndex;\n    }\n\n    /**\n     * Whether the query point is projected onto a tower node, pillar node or somewhere within\n     * the closest edge.\n     * <p>\n     * Due to precision differences it is hard to define when something is exactly 90\u00b0 or \"on-node\"\n     * like TOWER or PILLAR or if it is more \"on-edge\" (EDGE). The default mechanism is to prefer\n     * \"on-edge\" even if it could be 90\u00b0. To prefer \"on-node\" you could use e.g. GHPoint.equals with\n     * a default precision of 1e-6.\n     * <p>\n     *\n     * @see DistanceCalc#validEdgeDistance\n     */\n    public enum Position {\n        EDGE, TOWER, PILLAR\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/41", "ground_truth": "\n        if (snappedPoint == null)\n            throw new IllegalStateException(\"Calculate snapped point before!\");\n        return snappedPoint;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "storage", "index", "Snap.java"], "context_start_lineno": 0, "function_name": "getSnappedPoint", "left_context": "class Snap {\n    public static final int INVALID_NODE = -1;\n    private final GHPoint queryPoint;\n    private double queryDistance = Double.MAX_VALUE;\n    private int wayIndex = -1;\n    private int closestNode = INVALID_NODE;\n    private EdgeIteratorState closestEdge;\n    private GHPoint3D snappedPoint;\n    private Position snappedPosition;\n\n    public Snap(double queryLat, double queryLon) {\n        queryPoint = new GHPoint(queryLat, queryLon);\n    }\n\n    /**\n     * Returns the closest matching node. This is either a tower node of the base graph\n     * or a virtual node (see also {@link QueryGraph#create(BaseGraph, List)}).\n     *\n     * @return {@link #INVALID_NODE} if nothing found, this should be avoided via a call of 'isValid'\n     */\n    public int getClosestNode() {\n        return closestNode;\n    }\n\n    public void setClosestNode(int node) {\n        closestNode = node;\n    }\n\n    /**\n     * @return the distance of the query to the snapped coordinates. In meter\n     */\n    public double getQueryDistance() {\n        return queryDistance;\n    }\n\n    public void setQueryDistance(double dist) {\n        queryDistance = dist;\n    }\n\n    public int getWayIndex() {\n        return wayIndex;\n    }\n\n    public void setWayIndex(int wayIndex) {\n        this.wayIndex = wayIndex;\n    }\n\n    /**\n     * @return 0 if on edge. 1 if on pillar node and 2 if on tower node.\n     */\n    public Position getSnappedPosition() {\n        return snappedPosition;\n    }\n\n    public void setSnappedPosition(Position pos) {\n        this.snappedPosition = pos;\n    }\n\n    /**\n     * @return true if a closest node was found\n     */\n    public boolean isValid() {\n        return closestNode >= 0;\n    }\n\n    public EdgeIteratorState getClosestEdge() {\n        return closestEdge;\n    }\n\n    public void setClosestEdge(EdgeIteratorState edge) {\n        closestEdge = edge;\n    }\n\n    public GHPoint getQueryPoint() {\n        return queryPoint;\n    }\n\n    /**\n     * Calculates the position of the query point 'snapped' to a close road segment or node. Call\n     * calcSnappedPoint before, if not, an IllegalStateException is thrown.\n     */\n    public GHPoint3D getSnappedPoint() {", "right_context": "}\n\n    public void setSnappedPoint(GHPoint3D point) {\n        this.snappedPoint = point;\n    }\n\n    /**\n     * Calculates the closest point on the edge from the query point. If too close to a tower or pillar node this method\n     * might change the snappedPosition and wayIndex.\n     */\n    public void calcSnappedPoint(DistanceCalc distCalc) {\n        if (closestEdge == null)\n            throw new IllegalStateException(\"No closest edge?\");\n        if (snappedPoint != null)\n            throw new IllegalStateException(\"Calculate snapped point only once\");\n\n        PointList fullPL = getClosestEdge().fetchWayGeometry(FetchMode.ALL);\n        double tmpLat = fullPL.getLat(wayIndex);\n        double tmpLon = fullPL.getLon(wayIndex);\n        double tmpEle = fullPL.getEle(wayIndex);\n        if (snappedPosition != Position.EDGE) {\n            snappedPoint = new GHPoint3D(tmpLat, tmpLon, tmpEle);\n            return;\n        }\n\n        double queryLat = getQueryPoint().lat, queryLon = getQueryPoint().lon;\n        double adjLat = fullPL.getLat(wayIndex + 1), adjLon = fullPL.getLon(wayIndex + 1);\n        if (distCalc.validEdgeDistance(queryLat, queryLon, tmpLat, tmpLon, adjLat, adjLon)) {\n            GHPoint crossingPoint = distCalc.calcCrossingPointToEdge(queryLat, queryLon, tmpLat, tmpLon, adjLat, adjLon);\n            double adjEle = fullPL.getEle(wayIndex + 1);\n\n            // We want to prevent extra virtual nodes and very short virtual edges in case the snap/crossing point is\n            // very close to a tower node. Since we delayed the calculation of the crossing point until here, we need\n            // to correct the Snap.Position in these cases. Note that it is possible that the query point is very far\n            // from the tower node, but the crossing point is still very close to it.\n            if (considerEqual(crossingPoint.lat, crossingPoint.lon, tmpLat, tmpLon)) {\n                snappedPosition = wayIndex == 0 ? Position.TOWER : Position.PILLAR;\n                snappedPoint = new GHPoint3D(tmpLat, tmpLon, tmpEle);\n            } else if (considerEqual(crossingPoint.lat, crossingPoint.lon, adjLat, adjLon)) {\n                wayIndex++;\n                snappedPosition = wayIndex == fullPL.size() - 1 ? Position.TOWER : Position.PILLAR;\n                snappedPoint = new GHPoint3D(adjLat, adjLon, adjEle);\n            } else {\n                snappedPoint = new GHPoint3D(crossingPoint.lat, crossingPoint.lon, (tmpEle + adjEle) / 2);\n            }\n        } else {\n            // outside of edge segment [wayIndex, wayIndex+1] should not happen for EDGE\n            assert false : \"incorrect pos: \" + snappedPosition + \" for \" + snappedPoint + \", \" + fullPL + \", \" + wayIndex;\n        }\n    }\n\n    public static boolean considerEqual(double lat, double lon, double lat2, double lon2) {\n        return Math.abs(lat - lat2) < 1e-6 && Math.abs(lon - lon2) < 1e-6;\n    }\n\n    @Override\n    public String toString() {\n        if (closestEdge != null)\n            return snappedPosition + \", \" + closestNode + \" \" + closestEdge.getEdge() + \":\" + closestEdge.getBaseNode() + \"-\" + closestEdge.getAdjNode() +\n                    \" snap: [\" + Helper.round6(snappedPoint.getLat()) + \", \" + Helper.round6(snappedPoint.getLon()) + \"],\" +\n                    \" query: [\" + Helper.round6(queryPoint.getLat()) + \",\" + Helper.round6(queryPoint.getLon()) + \"]\";\n        return closestNode + \", \" + queryPoint + \", \" + wayIndex;\n    }\n\n    /**\n     * Whether the query point is projected onto a tower node, pillar node or somewhere within\n     * the closest edge.\n     * <p>\n     * Due to precision differences it is hard to define when something is exactly 90\u00b0 or \"on-node\"\n     * like TOWER or PILLAR or if it is more \"on-edge\" (EDGE). The default mechanism is to prefer\n     * \"on-edge\" even if it could be 90\u00b0. To prefer \"on-node\" you could use e.g. GHPoint.equals with\n     * a default precision of 1e-6.\n     * <p>\n     *\n     * @see DistanceCalc#validEdgeDistance\n     */\n    public enum Position {\n        EDGE, TOWER, PILLAR\n    }\n}", "class_name": "Snap", "return_type": "GHPoint3D", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/EncodedValueLookup.java\n// --------------------------------------------------\n// DecimalEncodedValue getDecimalEncodedValue(String key);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java\n// --------------------------------------------------\n// @Override public DecimalEncodedValue getDecimalEncodedValue(String key){\n//   return getEncodedValue(key,DecimalEncodedValue.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java\n// --------------------------------------------------\n// public DecimalEncodedValue getTurnDecimalEncodedValue(String key){\n//   return getTurnEncodedValue(key,DecimalEncodedValue.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/MaxSpeedCalculator.java\n// --------------------------------------------------\n// DecimalEncodedValue getRuralMaxSpeedEnc(){\n//   return ruralMaxSpeedEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/MaxSpeedCalculator.java\n// --------------------------------------------------\n// public DecimalEncodedValue getUrbanMaxSpeedEnc(){\n//   return urbanMaxSpeedEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/parsers/AbstractAverageSpeedParser.java\n// --------------------------------------------------\n// public final DecimalEncodedValue getAverageSpeedEnc(){\n//   return avgSpeedEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonPriorityParser.java\n// --------------------------------------------------\n// public final DecimalEncodedValue getPriorityEnc(){\n//   return priorityEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/AverageSlope.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,5,0,1,true,false,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/Curvature.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,4,0.25,0.05,false,false,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/FerrySpeed.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,5,2,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxAxleLoad.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.5 to max=0.5*2\u2077 tons and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value. To save bits it might make more sense to store only a few values like it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.5,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxHeight.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxSlope.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,5,0,1,true,false,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxSpeed.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,2,false,true,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxWeight.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2078 tons and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value. To save bits it might make more sense to store only a few values like it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,8,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxWidth.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/TurnCost.java\n// --------------------------------------------------\n// /** \n//  * This creates an EncodedValue specifically for the turn costs\n//  */\n// public static DecimalEncodedValue create(String name,int maxTurnCosts){\n//   int turnBits=BitUtil.countBitValue(maxTurnCosts);\n//   return new DecimalEncodedValueImpl(key(name),turnBits,0,1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/VehiclePriority.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(String name,int speedBits,double speedFactor,boolean storeTwoDirections){\n//   return new DecimalEncodedValueImpl(key(name),speedBits,speedFactor,storeTwoDirections);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/VehicleSpeed.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(String name,int speedBits,double speedFactor,boolean storeTwoDirections){\n//   return new DecimalEncodedValueImpl(key(name),speedBits,speedFactor,storeTwoDirections);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MaxLength {\n    public static final String KEY = \"max_length\";\n\n    /**\n     * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is\n     * between the maximum and infinity it is assumed to use the maximum value.\n     */\n    public static DecimalEncodedValue create() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/51", "ground_truth": "\n        return new DecimalEncodedValueImpl(KEY, 7, 0, 0.1, false, false, true);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "ev", "MaxLength.java"], "context_start_lineno": 0, "function_name": "create", "left_context": "class MaxLength {\n    public static final String KEY = \"max_length\";\n\n    /**\n     * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is\n     * between the maximum and infinity it is assumed to use the maximum value.\n     */\n    public static DecimalEncodedValue create() {", "right_context": "}\n}", "class_name": "MaxLength", "return_type": "DecimalEncodedValue", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TypeGPXFilter implements ContainerRequestFilter {\n\n    @Override\n    public void filter(ContainerRequestContext rc) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "graphhopper_graphhopper/53", "ground_truth": "\n        String maybeType = rc.getUriInfo().getQueryParameters().getFirst(\"type\");\n        if (maybeType != null && maybeType.equals(\"gpx\")) {\n            rc.getHeaders().putSingle(HttpHeaders.ACCEPT, \"application/gpx+xml\");\n        }\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "web-bundle", "src", "main", "java", "com", "graphhopper", "http", "TypeGPXFilter.java"], "context_start_lineno": 0, "function_name": "filter", "left_context": "class TypeGPXFilter implements ContainerRequestFilter {\n\n    @Override\n    public void filter(ContainerRequestContext rc) {", "right_context": "}\n\n}", "class_name": "TypeGPXFilter", "return_type": "void", "parameters": [{"type": "ContainerRequestContext", "name": "rc"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ReaderNode extends ReaderElement {\n    private final double lat;\n    private final double lon;\n\n    public ReaderNode(long id, double lat, double lon) {\n        super(id, Type.NODE);\n        this.lat = lat;\n        this.lon = lon;\n    }\n\n    public ReaderNode(long id, double lat, double lon, Map<String, Object> tags) {\n        super(id, Type.NODE, tags);\n        this.lat = lat;\n        this.lon = lon;\n    }\n\n    public double getLat() {\n        return lat;\n    }\n\n    public double getLon() {\n        return lon;\n    }\n\n    @Override\n    public String toString() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/85", "ground_truth": "\n        StringBuilder txt = new StringBuilder();\n        txt.append(\"Node: \");\n        txt.append(getId());\n        txt.append(\" lat=\");\n        txt.append(getLat());\n        txt.append(\" lon=\");\n        txt.append(getLon());\n        if (hasTags()) {\n            txt.append(\"\\n\");\n            txt.append(tagsToString());\n        }\n        return txt.toString();\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "reader", "ReaderNode.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class ReaderNode extends ReaderElement {\n    private final double lat;\n    private final double lon;\n\n    public ReaderNode(long id, double lat, double lon) {\n        super(id, Type.NODE);\n        this.lat = lat;\n        this.lon = lon;\n    }\n\n    public ReaderNode(long id, double lat, double lon, Map<String, Object> tags) {\n        super(id, Type.NODE, tags);\n        this.lat = lat;\n        this.lon = lon;\n    }\n\n    public double getLat() {\n        return lat;\n    }\n\n    public double getLon() {\n        return lon;\n    }\n\n    @Override\n    public String toString() {", "right_context": "}\n}", "class_name": "ReaderNode", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CustomWeightingHelper {\n    static double GLOBAL_MAX_SPEED = 999;\n    static double GLOBAL_PRIORITY = 1;\n\n    protected EncodedValueLookup lookup;\n    protected CustomModel customModel;\n\n    protected CustomWeightingHelper() {\n    }\n\n    public void init(CustomModel customModel, EncodedValueLookup lookup, Map<String, JsonFeature> areas) {\n        this.lookup = lookup;\n        this.customModel = customModel;\n    }\n\n    public double getPriority(EdgeIteratorState edge, boolean reverse) {\n        return getRawPriority(edge, reverse);\n    }\n\n    public double getSpeed(EdgeIteratorState edge, boolean reverse) {\n        return getRawSpeed(edge, reverse);\n    }\n\n    protected final double getRawSpeed(EdgeIteratorState edge, boolean reverse) {\n        return 1;\n    }\n\n    protected final double getRawPriority(EdgeIteratorState edge, boolean reverse) {\n        return 1;\n    }\n\n    public final double calcMaxSpeed() {<FILL_FUNCTION_BODY>}\n\n    public final double calcMaxPriority() {\n        MinMax minMaxPriority = new MinMax(0, GLOBAL_PRIORITY);\n        List<Statement> statements = customModel.getPriority();\n        if (!statements.isEmpty() && \"true\".equals(statements.get(0).getCondition())) {\n            String value = statements.get(0).getValue();\n            if (lookup.hasEncodedValue(value))\n                minMaxPriority.max = lookup.getDecimalEncodedValue(value).getMaxOrMaxStorableDecimal();\n        }\n        FindMinMax.findMinMax(minMaxPriority, statements, lookup);\n        if (minMaxPriority.min < 0)\n            throw new IllegalArgumentException(\"priority has to be >=0 but can be negative (\" + minMaxPriority.min + \")\");\n        if (minMaxPriority.max < 0)\n            throw new IllegalArgumentException(\"maximum priority has to be >=0 but was \" + minMaxPriority.max);\n        return minMaxPriority.max;\n    }\n\n    public static boolean in(Polygon p, EdgeIteratorState edge) {\n        BBox edgeBBox = GHUtility.createBBox(edge);\n        BBox polyBBOX = p.getBounds();\n        if (!polyBBOX.intersects(edgeBBox))\n            return false;\n        if (p.isRectangle() && polyBBOX.contains(edgeBBox))\n            return true;\n        return p.intersects(edge.fetchWayGeometry(FetchMode.ALL).makeImmutable()); // TODO PERF: cache bbox and edge wayGeometry for multiple area\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/101", "ground_truth": "\n        MinMax minMaxSpeed = new MinMax(0, GLOBAL_MAX_SPEED);\n        FindMinMax.findMinMax(minMaxSpeed, customModel.getSpeed(), lookup);\n        if (minMaxSpeed.min < 0)\n            throw new IllegalArgumentException(\"speed has to be >=0 but can be negative (\" + minMaxSpeed.min + \")\");\n        if (minMaxSpeed.max <= 0)\n            throw new IllegalArgumentException(\"maximum speed has to be >0 but was \" + minMaxSpeed.max);\n        if (minMaxSpeed.max == GLOBAL_MAX_SPEED)\n            throw new IllegalArgumentException(\"The first statement for 'speed' must be unconditionally to set the speed. But it was \" + customModel.getSpeed().get(0));\n\n        return minMaxSpeed.max;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "weighting", "custom", "CustomWeightingHelper.java"], "context_start_lineno": 0, "function_name": "calcMaxSpeed", "left_context": "class CustomWeightingHelper {\n    static double GLOBAL_MAX_SPEED = 999;\n    static double GLOBAL_PRIORITY = 1;\n\n    protected EncodedValueLookup lookup;\n    protected CustomModel customModel;\n\n    protected CustomWeightingHelper() {\n    }\n\n    public void init(CustomModel customModel, EncodedValueLookup lookup, Map<String, JsonFeature> areas) {\n        this.lookup = lookup;\n        this.customModel = customModel;\n    }\n\n    public double getPriority(EdgeIteratorState edge, boolean reverse) {\n        return getRawPriority(edge, reverse);\n    }\n\n    public double getSpeed(EdgeIteratorState edge, boolean reverse) {\n        return getRawSpeed(edge, reverse);\n    }\n\n    protected final double getRawSpeed(EdgeIteratorState edge, boolean reverse) {\n        return 1;\n    }\n\n    protected final double getRawPriority(EdgeIteratorState edge, boolean reverse) {\n        return 1;\n    }\n\n    public final double calcMaxSpeed() {", "right_context": "}\n\n    public final double calcMaxPriority() {\n        MinMax minMaxPriority = new MinMax(0, GLOBAL_PRIORITY);\n        List<Statement> statements = customModel.getPriority();\n        if (!statements.isEmpty() && \"true\".equals(statements.get(0).getCondition())) {\n            String value = statements.get(0).getValue();\n            if (lookup.hasEncodedValue(value))\n                minMaxPriority.max = lookup.getDecimalEncodedValue(value).getMaxOrMaxStorableDecimal();\n        }\n        FindMinMax.findMinMax(minMaxPriority, statements, lookup);\n        if (minMaxPriority.min < 0)\n            throw new IllegalArgumentException(\"priority has to be >=0 but can be negative (\" + minMaxPriority.min + \")\");\n        if (minMaxPriority.max < 0)\n            throw new IllegalArgumentException(\"maximum priority has to be >=0 but was \" + minMaxPriority.max);\n        return minMaxPriority.max;\n    }\n\n    public static boolean in(Polygon p, EdgeIteratorState edge) {\n        BBox edgeBBox = GHUtility.createBBox(edge);\n        BBox polyBBOX = p.getBounds();\n        if (!polyBBOX.intersects(edgeBBox))\n            return false;\n        if (p.isRectangle() && polyBBOX.contains(edgeBBox))\n            return true;\n        return p.intersects(edge.fetchWayGeometry(FetchMode.ALL).makeImmutable()); // TODO PERF: cache bbox and edge wayGeometry for multiple area\n    }\n}", "class_name": "CustomWeightingHelper", "return_type": "double", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Path {\n    final Graph graph;\n    private final NodeAccess nodeAccess;\n    private double weight = Double.MAX_VALUE;\n    private double distance;\n    private long time;\n    private IntArrayList edgeIds = new IntArrayList();\n    private int fromNode = -1;\n    private int endNode = -1;\n    private List<String> description;\n    private boolean found;\n    private String debugInfo = \"\";\n\n    public Path(Graph graph) {\n        this.graph = graph;\n        this.nodeAccess = graph.getNodeAccess();\n    }\n\n    public Graph getGraph() {\n        return graph;\n    }\n\n    /**\n     * @return the description of this route alternative to make it meaningful for the user e.g. it\n     * displays one or two main roads of the route.\n     */\n    public List<String> getDescription() {\n        if (description == null)\n            return Collections.emptyList();\n        return description;\n    }\n\n    public Path setDescription(List<String> description) {\n        this.description = description;\n        return this;\n    }\n\n    public IntArrayList getEdges() {\n        return edgeIds;\n    }\n\n    public void setEdges(IntArrayList edgeIds) {\n        this.edgeIds = edgeIds;\n    }\n\n    public void addEdge(int edge) {\n        edgeIds.add(edge);\n    }\n\n    public int getEdgeCount() {\n        return edgeIds.size();\n    }\n\n    public int getEndNode() {\n        return endNode;\n    }\n\n    public Path setEndNode(int end) {\n        endNode = end;\n        return this;\n    }\n\n    /**\n     * @return the first node of this Path.\n     */\n    private int getFromNode() {\n        if (fromNode < 0)\n            throw new IllegalStateException(\"fromNode < 0 should not happen\");\n\n        return fromNode;\n    }\n\n    /**\n     * We need to remember fromNode explicitly as its not saved in one edgeId of edgeIds.\n     */\n    public Path setFromNode(int from) {\n        fromNode = from;\n        return this;\n    }\n\n    public boolean isFound() {\n        return found;\n    }\n\n    public Path setFound(boolean found) {\n        this.found = found;\n        return this;\n    }\n\n    public Path setDistance(double distance) {\n        this.distance = distance;\n        return this;\n    }\n\n    public Path addDistance(double distance) {\n        this.distance += distance;\n        return this;\n    }\n\n    /**\n     * @return distance in meter\n     */\n    public double getDistance() {\n        return distance;\n    }\n\n    /**\n     * @return time in millis\n     */\n    public long getTime() {\n        return time;\n    }\n\n    public Path setTime(long time) {\n        this.time = time;\n        return this;\n    }\n\n    public Path addTime(long time) {\n        this.time += time;\n        return this;\n    }\n\n    /**\n     * This weight will be updated during the algorithm. The initial value is maximum double.\n     */\n    public double getWeight() {\n        return weight;\n    }\n\n    public Path setWeight(double w) {\n        this.weight = w;\n        return this;\n    }\n\n    /**\n     * Yields the final edge of the path\n     */\n    public EdgeIteratorState getFinalEdge() {\n        return graph.getEdgeIteratorState(edgeIds.get(edgeIds.size() - 1), endNode);\n    }\n\n    public void setDebugInfo(String debugInfo) {\n        this.debugInfo = debugInfo;\n    }\n\n    public String getDebugInfo() {\n        return debugInfo;\n    }\n\n    /**\n     * Iterates over all edges in this path sorted from start to end and calls the visitor callback\n     * for every edge.\n     * <p>\n     *\n     * @param visitor callback to handle every edge. The edge is decoupled from the iterator and can\n     *                be stored.\n     */\n    public void forEveryEdge(EdgeVisitor visitor) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Returns the list of all edges.\n     */\n    public List<EdgeIteratorState> calcEdges() {\n        final List<EdgeIteratorState> edges = new ArrayList<>(edgeIds.size());\n        if (edgeIds.isEmpty())\n            return edges;\n\n        forEveryEdge(new EdgeVisitor() {\n            @Override\n            public void next(EdgeIteratorState eb, int index, int prevEdgeId) {\n                edges.add(eb);\n            }\n\n            @Override\n            public void finish() {\n\n            }\n        });\n        return edges;\n    }\n\n    /**\n     * @return the uncached node indices of the tower nodes in this path.\n     */\n    public IntIndexedContainer calcNodes() {\n        final IntArrayList nodes = new IntArrayList(edgeIds.size() + 1);\n        if (edgeIds.isEmpty()) {\n            if (isFound()) {\n                nodes.add(endNode);\n            }\n            return nodes;\n        }\n\n        int tmpNode = getFromNode();\n        nodes.add(tmpNode);\n        forEveryEdge(new EdgeVisitor() {\n            @Override\n            public void next(EdgeIteratorState eb, int index, int prevEdgeId) {\n                nodes.add(eb.getAdjNode());\n            }\n\n            @Override\n            public void finish() {\n\n            }\n        });\n        return nodes;\n    }\n\n    /**\n     * This method calculated a list of points for this path\n     * <p>\n     *\n     * @return the geometry of this path\n     */\n    public PointList calcPoints() {\n        final PointList points = new PointList(edgeIds.size() + 1, nodeAccess.is3D());\n        if (edgeIds.isEmpty()) {\n            if (isFound()) {\n                points.add(nodeAccess, endNode);\n            }\n            return points;\n        }\n\n        int tmpNode = getFromNode();\n        points.add(nodeAccess, tmpNode);\n        forEveryEdge(new EdgeVisitor() {\n            @Override\n            public void next(EdgeIteratorState eb, int index, int prevEdgeId) {\n                PointList pl = eb.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ);\n                for (int j = 0; j < pl.size(); j++) {\n                    points.add(pl, j);\n                }\n            }\n\n            @Override\n            public void finish() {\n\n            }\n        });\n        return points;\n    }\n\n    @Override\n    public String toString() {\n        return \"found: \" + found + \", weight: \" + weight + \", time: \" + time + \", distance: \" + distance + \", edges: \" + edgeIds.size();\n    }\n\n    /**\n     * The callback used in forEveryEdge.\n     */\n    public interface EdgeVisitor {\n        void next(EdgeIteratorState edge, int index, int prevEdgeId);\n\n        void finish();\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/115", "ground_truth": "\n        int tmpNode = getFromNode();\n        int len = edgeIds.size();\n        int prevEdgeId = EdgeIterator.NO_EDGE;\n        for (int i = 0; i < len; i++) {\n            EdgeIteratorState edgeBase = graph.getEdgeIteratorState(edgeIds.get(i), tmpNode);\n            if (edgeBase == null)\n                throw new IllegalStateException(\"Edge \" + edgeIds.get(i) + \" was empty when requested with node \" + tmpNode\n                        + \", array index:\" + i + \", edges:\" + edgeIds.size());\n\n            tmpNode = edgeBase.getBaseNode();\n            // more efficient swap, currently not implemented for virtual edges: visitor.next(edgeBase.detach(true), i);\n            edgeBase = graph.getEdgeIteratorState(edgeBase.getEdge(), tmpNode);\n            visitor.next(edgeBase, i, prevEdgeId);\n\n            prevEdgeId = edgeBase.getEdge();\n        }\n        visitor.finish();\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "Path.java"], "context_start_lineno": 0, "function_name": "forEveryEdge", "left_context": "class Path {\n    final Graph graph;\n    private final NodeAccess nodeAccess;\n    private double weight = Double.MAX_VALUE;\n    private double distance;\n    private long time;\n    private IntArrayList edgeIds = new IntArrayList();\n    private int fromNode = -1;\n    private int endNode = -1;\n    private List<String> description;\n    private boolean found;\n    private String debugInfo = \"\";\n\n    public Path(Graph graph) {\n        this.graph = graph;\n        this.nodeAccess = graph.getNodeAccess();\n    }\n\n    public Graph getGraph() {\n        return graph;\n    }\n\n    /**\n     * @return the description of this route alternative to make it meaningful for the user e.g. it\n     * displays one or two main roads of the route.\n     */\n    public List<String> getDescription() {\n        if (description == null)\n            return Collections.emptyList();\n        return description;\n    }\n\n    public Path setDescription(List<String> description) {\n        this.description = description;\n        return this;\n    }\n\n    public IntArrayList getEdges() {\n        return edgeIds;\n    }\n\n    public void setEdges(IntArrayList edgeIds) {\n        this.edgeIds = edgeIds;\n    }\n\n    public void addEdge(int edge) {\n        edgeIds.add(edge);\n    }\n\n    public int getEdgeCount() {\n        return edgeIds.size();\n    }\n\n    public int getEndNode() {\n        return endNode;\n    }\n\n    public Path setEndNode(int end) {\n        endNode = end;\n        return this;\n    }\n\n    /**\n     * @return the first node of this Path.\n     */\n    private int getFromNode() {\n        if (fromNode < 0)\n            throw new IllegalStateException(\"fromNode < 0 should not happen\");\n\n        return fromNode;\n    }\n\n    /**\n     * We need to remember fromNode explicitly as its not saved in one edgeId of edgeIds.\n     */\n    public Path setFromNode(int from) {\n        fromNode = from;\n        return this;\n    }\n\n    public boolean isFound() {\n        return found;\n    }\n\n    public Path setFound(boolean found) {\n        this.found = found;\n        return this;\n    }\n\n    public Path setDistance(double distance) {\n        this.distance = distance;\n        return this;\n    }\n\n    public Path addDistance(double distance) {\n        this.distance += distance;\n        return this;\n    }\n\n    /**\n     * @return distance in meter\n     */\n    public double getDistance() {\n        return distance;\n    }\n\n    /**\n     * @return time in millis\n     */\n    public long getTime() {\n        return time;\n    }\n\n    public Path setTime(long time) {\n        this.time = time;\n        return this;\n    }\n\n    public Path addTime(long time) {\n        this.time += time;\n        return this;\n    }\n\n    /**\n     * This weight will be updated during the algorithm. The initial value is maximum double.\n     */\n    public double getWeight() {\n        return weight;\n    }\n\n    public Path setWeight(double w) {\n        this.weight = w;\n        return this;\n    }\n\n    /**\n     * Yields the final edge of the path\n     */\n    public EdgeIteratorState getFinalEdge() {\n        return graph.getEdgeIteratorState(edgeIds.get(edgeIds.size() - 1), endNode);\n    }\n\n    public void setDebugInfo(String debugInfo) {\n        this.debugInfo = debugInfo;\n    }\n\n    public String getDebugInfo() {\n        return debugInfo;\n    }\n\n    /**\n     * Iterates over all edges in this path sorted from start to end and calls the visitor callback\n     * for every edge.\n     * <p>\n     *\n     * @param visitor callback to handle every edge. The edge is decoupled from the iterator and can\n     *                be stored.\n     */\n    public void forEveryEdge(EdgeVisitor visitor) {", "right_context": "}\n\n    /**\n     * Returns the list of all edges.\n     */\n    public List<EdgeIteratorState> calcEdges() {\n        final List<EdgeIteratorState> edges = new ArrayList<>(edgeIds.size());\n        if (edgeIds.isEmpty())\n            return edges;\n\n        forEveryEdge(new EdgeVisitor() {\n            @Override\n            public void next(EdgeIteratorState eb, int index, int prevEdgeId) {\n                edges.add(eb);\n            }\n\n            @Override\n            public void finish() {\n\n            }\n        });\n        return edges;\n    }\n\n    /**\n     * @return the uncached node indices of the tower nodes in this path.\n     */\n    public IntIndexedContainer calcNodes() {\n        final IntArrayList nodes = new IntArrayList(edgeIds.size() + 1);\n        if (edgeIds.isEmpty()) {\n            if (isFound()) {\n                nodes.add(endNode);\n            }\n            return nodes;\n        }\n\n        int tmpNode = getFromNode();\n        nodes.add(tmpNode);\n        forEveryEdge(new EdgeVisitor() {\n            @Override\n            public void next(EdgeIteratorState eb, int index, int prevEdgeId) {\n                nodes.add(eb.getAdjNode());\n            }\n\n            @Override\n            public void finish() {\n\n            }\n        });\n        return nodes;\n    }\n\n    /**\n     * This method calculated a list of points for this path\n     * <p>\n     *\n     * @return the geometry of this path\n     */\n    public PointList calcPoints() {\n        final PointList points = new PointList(edgeIds.size() + 1, nodeAccess.is3D());\n        if (edgeIds.isEmpty()) {\n            if (isFound()) {\n                points.add(nodeAccess, endNode);\n            }\n            return points;\n        }\n\n        int tmpNode = getFromNode();\n        points.add(nodeAccess, tmpNode);\n        forEveryEdge(new EdgeVisitor() {\n            @Override\n            public void next(EdgeIteratorState eb, int index, int prevEdgeId) {\n                PointList pl = eb.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ);\n                for (int j = 0; j < pl.size(); j++) {\n                    points.add(pl, j);\n                }\n            }\n\n            @Override\n            public void finish() {\n\n            }\n        });\n        return points;\n    }\n\n    @Override\n    public String toString() {\n        return \"found: \" + found + \", weight: \" + weight + \", time: \" + time + \", distance: \" + distance + \", edges: \" + edgeIds.size();\n    }\n\n    /**\n     * The callback used in forEveryEdge.\n     */\n    public interface EdgeVisitor {\n        void next(EdgeIteratorState edge, int index, int prevEdgeId);\n\n        void finish();\n    }\n}", "class_name": "Path", "return_type": "void", "parameters": [{"type": "EdgeVisitor", "name": "visitor"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PrepareLandmarks {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PrepareLandmarks.class);\n    private final BaseGraph graph;\n    private final LandmarkStorage lms;\n    private final LMConfig lmConfig;\n    private long totalPrepareTime;\n    private boolean prepared = false;\n\n    public PrepareLandmarks(Directory dir, BaseGraph graph, EncodedValueLookup encodedValueLookup, LMConfig lmConfig, int landmarks) {\n        this.graph = graph;\n        this.lmConfig = lmConfig;\n        lms = new LandmarkStorage(graph, encodedValueLookup, dir, lmConfig, landmarks);\n    }\n\n    /**\n     * @see LandmarkStorage#setLandmarkSuggestions(List)\n     */\n    public PrepareLandmarks setLandmarkSuggestions(List<LandmarkSuggestion> landmarkSuggestions) {\n        lms.setLandmarkSuggestions(landmarkSuggestions);\n        return this;\n    }\n\n    /**\n     * @see LandmarkStorage#setAreaIndex(AreaIndex)\n     */\n    public PrepareLandmarks setAreaIndex(AreaIndex<SplitArea> areaIndex) {\n        lms.setAreaIndex(areaIndex);\n        return this;\n    }\n\n    /**\n     * @see LandmarkStorage#setMaximumWeight(double)\n     */\n    public PrepareLandmarks setMaximumWeight(double maximumWeight) {\n        lms.setMaximumWeight(maximumWeight);\n        return this;\n    }\n\n    /**\n     * @see LandmarkStorage#setLMSelectionWeighting(Weighting)\n     */\n    public void setLMSelectionWeighting(Weighting w) {\n        lms.setLMSelectionWeighting(w);\n    }\n\n    /**\n     * @see LandmarkStorage#setMinimumNodes(int)\n     */\n    public void setMinimumNodes(int nodes) {\n        if (nodes < 2)\n            throw new IllegalArgumentException(\"minimum node count must be at least 2\");\n\n        lms.setMinimumNodes(nodes);\n    }\n\n    public PrepareLandmarks setLogDetails(boolean logDetails) {\n        lms.setLogDetails(logDetails);\n        return this;\n    }\n\n    public LandmarkStorage getLandmarkStorage() {\n        return lms;\n    }\n\n    public LMConfig getLMConfig() {\n        return lmConfig;\n    }\n\n    public boolean loadExisting() {\n        return lms.loadExisting();\n    }\n\n    public void doWork() {<FILL_FUNCTION_BODY>}\n\n    public boolean isPrepared() {\n        return prepared;\n    }\n\n    public long getTotalPrepareTime() {\n        return totalPrepareTime;\n    }\n\n    /**\n     * Release landmark storage resources\n     */\n    void close() {\n        this.lms.close();\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/118", "ground_truth": "\n        if (prepared)\n            throw new IllegalStateException(\"Call doWork only once!\");\n        prepared = true;\n        StopWatch sw = new StopWatch().start();\n        LOGGER.info(\"Start calculating \" + lms.getLandmarkCount() + \" landmarks, weighting:\" + lms.getLmSelectionWeighting() + \", \" + Helper.getMemInfo());\n\n        lms.createLandmarks();\n        lms.flush();\n\n        LOGGER.info(\"Calculated landmarks for \" + (lms.getSubnetworksWithLandmarks() - 1) + \" subnetworks, took:\" + (int) sw.stop().getSeconds() + \"s => \"\n                + lms.getLandmarksAsGeoJSON() + \", stored weights:\" + lms.getLandmarkCount()\n                + \", nodes:\" + graph.getNodes() + \", \" + Helper.getMemInfo());\n        totalPrepareTime = sw.getMillis();\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "lm", "PrepareLandmarks.java"], "context_start_lineno": 0, "function_name": "doWork", "left_context": "class PrepareLandmarks {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PrepareLandmarks.class);\n    private final BaseGraph graph;\n    private final LandmarkStorage lms;\n    private final LMConfig lmConfig;\n    private long totalPrepareTime;\n    private boolean prepared = false;\n\n    public PrepareLandmarks(Directory dir, BaseGraph graph, EncodedValueLookup encodedValueLookup, LMConfig lmConfig, int landmarks) {\n        this.graph = graph;\n        this.lmConfig = lmConfig;\n        lms = new LandmarkStorage(graph, encodedValueLookup, dir, lmConfig, landmarks);\n    }\n\n    /**\n     * @see LandmarkStorage#setLandmarkSuggestions(List)\n     */\n    public PrepareLandmarks setLandmarkSuggestions(List<LandmarkSuggestion> landmarkSuggestions) {\n        lms.setLandmarkSuggestions(landmarkSuggestions);\n        return this;\n    }\n\n    /**\n     * @see LandmarkStorage#setAreaIndex(AreaIndex)\n     */\n    public PrepareLandmarks setAreaIndex(AreaIndex<SplitArea> areaIndex) {\n        lms.setAreaIndex(areaIndex);\n        return this;\n    }\n\n    /**\n     * @see LandmarkStorage#setMaximumWeight(double)\n     */\n    public PrepareLandmarks setMaximumWeight(double maximumWeight) {\n        lms.setMaximumWeight(maximumWeight);\n        return this;\n    }\n\n    /**\n     * @see LandmarkStorage#setLMSelectionWeighting(Weighting)\n     */\n    public void setLMSelectionWeighting(Weighting w) {\n        lms.setLMSelectionWeighting(w);\n    }\n\n    /**\n     * @see LandmarkStorage#setMinimumNodes(int)\n     */\n    public void setMinimumNodes(int nodes) {\n        if (nodes < 2)\n            throw new IllegalArgumentException(\"minimum node count must be at least 2\");\n\n        lms.setMinimumNodes(nodes);\n    }\n\n    public PrepareLandmarks setLogDetails(boolean logDetails) {\n        lms.setLogDetails(logDetails);\n        return this;\n    }\n\n    public LandmarkStorage getLandmarkStorage() {\n        return lms;\n    }\n\n    public LMConfig getLMConfig() {\n        return lmConfig;\n    }\n\n    public boolean loadExisting() {\n        return lms.loadExisting();\n    }\n\n    public void doWork() {", "right_context": "}\n\n    public boolean isPrepared() {\n        return prepared;\n    }\n\n    public long getTotalPrepareTime() {\n        return totalPrepareTime;\n    }\n\n    /**\n     * Release landmark storage resources\n     */\n    void close() {\n        this.lms.close();\n    }\n}", "class_name": "PrepareLandmarks", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GHNodeAccess implements NodeAccess {\n    private final BaseGraphNodesAndEdges store;\n\n    public GHNodeAccess(BaseGraphNodesAndEdges store) {\n        this.store = store;\n    }\n\n    @Override\n    public void ensureNode(int nodeId) {\n        store.ensureNodeCapacity(nodeId);\n    }\n\n    @Override\n    public final void setNode(int nodeId, double lat, double lon, double ele) {\n        store.ensureNodeCapacity(nodeId);\n        store.setLat(store.toNodePointer(nodeId), lat);\n        store.setLon(store.toNodePointer(nodeId), lon);\n\n        if (store.withElevation()) {\n            // meter precision is sufficient for now\n            store.setEle(store.toNodePointer(nodeId), ele);\n            store.bounds.update(lat, lon, ele);\n        } else {\n            store.bounds.update(lat, lon);\n        }\n    }\n\n    @Override\n    public final double getLat(int nodeId) {\n        return store.getLat(store.toNodePointer(nodeId));\n    }\n\n    @Override\n    public final double getLon(int nodeId) {\n        return store.getLon(store.toNodePointer(nodeId));\n    }\n\n    @Override\n    public final double getEle(int nodeId) {\n        if (!store.withElevation())\n            throw new IllegalStateException(\"elevation is disabled\");\n        return store.getEle(store.toNodePointer(nodeId));\n    }\n\n    @Override\n    public final void setTurnCostIndex(int index, int turnCostIndex) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public final int getTurnCostIndex(int index) {\n        if (store.withTurnCosts())\n            return store.getTurnCostRef(store.toNodePointer(index));\n        else\n            throw new AssertionError(\"This graph does not support turn costs\");\n    }\n\n    @Override\n    public final boolean is3D() {\n        return store.withElevation();\n    }\n\n    @Override\n    public int getDimension() {\n        return store.withElevation() ? 3 : 2;\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/145", "ground_truth": "\n        if (store.withTurnCosts()) {\n            // todo: remove ensure?\n            store.ensureNodeCapacity(index);\n            store.setTurnCostRef(store.toNodePointer(index), turnCostIndex);\n        } else {\n            throw new AssertionError(\"This graph does not support turn costs\");\n        }\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "storage", "GHNodeAccess.java"], "context_start_lineno": 0, "function_name": "setTurnCostIndex", "left_context": "class GHNodeAccess implements NodeAccess {\n    private final BaseGraphNodesAndEdges store;\n\n    public GHNodeAccess(BaseGraphNodesAndEdges store) {\n        this.store = store;\n    }\n\n    @Override\n    public void ensureNode(int nodeId) {\n        store.ensureNodeCapacity(nodeId);\n    }\n\n    @Override\n    public final void setNode(int nodeId, double lat, double lon, double ele) {\n        store.ensureNodeCapacity(nodeId);\n        store.setLat(store.toNodePointer(nodeId), lat);\n        store.setLon(store.toNodePointer(nodeId), lon);\n\n        if (store.withElevation()) {\n            // meter precision is sufficient for now\n            store.setEle(store.toNodePointer(nodeId), ele);\n            store.bounds.update(lat, lon, ele);\n        } else {\n            store.bounds.update(lat, lon);\n        }\n    }\n\n    @Override\n    public final double getLat(int nodeId) {\n        return store.getLat(store.toNodePointer(nodeId));\n    }\n\n    @Override\n    public final double getLon(int nodeId) {\n        return store.getLon(store.toNodePointer(nodeId));\n    }\n\n    @Override\n    public final double getEle(int nodeId) {\n        if (!store.withElevation())\n            throw new IllegalStateException(\"elevation is disabled\");\n        return store.getEle(store.toNodePointer(nodeId));\n    }\n\n    @Override\n    public final void setTurnCostIndex(int index, int turnCostIndex) {", "right_context": "}\n\n    @Override\n    public final int getTurnCostIndex(int index) {\n        if (store.withTurnCosts())\n            return store.getTurnCostRef(store.toNodePointer(index));\n        else\n            throw new AssertionError(\"This graph does not support turn costs\");\n    }\n\n    @Override\n    public final boolean is3D() {\n        return store.withElevation();\n    }\n\n    @Override\n    public int getDimension() {\n        return store.withElevation() ? 3 : 2;\n    }\n}", "class_name": "GHNodeAccess", "return_type": "void", "parameters": [{"type": "int", "name": "index"}, {"type": "int", "name": "turnCostIndex"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NameSimilarityEdgeFilter implements EdgeFilter {\n\n    private static final Map<String, String> DEFAULT_REWRITE_MAP = new HashMap<String, String>() {{\n        // Words with 2 characters like \"Dr\" (Drive) will be ignored, so it is not required to list them here.\n        // Words with 3 and more characters should be listed here to remove or rename them.\n        for (String remove : Arrays.asList(\n                \"ally\", \"alley\",\n                \"arc\", \"arcade\",\n                \"bvd\", \"bvd.\", \"boulevard\",\n                \"av.\", \"avenue\", \"avenida\",\n                \"calle\",\n                \"cl.\", \"close\",\n                \"crescend\", \"cres\", \"cres.\",\n                \"rd.\", \"road\",\n                \"ln.\", \"lane\",\n                \"pde.\", \"pde\", \"parade\",\n                \"pl.\", \"place\", \"plaza\",\n                \"rte\", \"route\",\n                \"str.\", \"str\", \"stra\u00dfe\", \"strasse\", \"st.\", \"street\", \"strada\",\n                \"sq.\", \"square\",\n                \"tr.\", \"track\",\n                \"via\")) {\n            put(remove, \"\");\n        }\n        // expand instead of remove as significant part of the road name\n        put(\"n\", \"north\");\n        put(\"s\", \"south\");\n        put(\"w\", \"west\");\n        put(\"e\", \"east\");\n        put(\"ne\", \"northeast\");\n        put(\"nw\", \"northwest\");\n        put(\"se\", \"southeast\");\n        put(\"sw\", \"southwest\");\n    }};\n    private static final Pattern WORD_CHAR = Pattern.compile(\"\\\\p{LD}+\");\n    private static final JaroWinkler jaroWinkler = new JaroWinkler();\n    private static final double JARO_WINKLER_ACCEPT_FACTOR = .9;\n    private final EdgeFilter edgeFilter;\n    private final String pointHint;\n    private final Map<String, String> rewriteMap;\n    private final Circle pointCircle;\n\n    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint, GHPoint point, double radius) {\n        this(edgeFilter, pointHint, point, radius, DEFAULT_REWRITE_MAP);\n    }\n\n    /**\n     * @param radius     the searchable region about the point in meters\n     * @param rewriteMap maps abbreviations to its longer form\n     */\n    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint, GHPoint point, double radius, Map<String, String> rewriteMap) {\n        this.edgeFilter = edgeFilter;\n        this.rewriteMap = rewriteMap;\n        this.pointHint = prepareName(removeRelation(pointHint == null ? \"\" : pointHint));\n        this.pointCircle = new Circle(point.lat, point.lon, radius);\n    }\n\n    String getNormalizedPointHint() {\n        return pointHint;\n    }\n\n    /**\n     * Removes any characters in the String that we don't care about in the matching procedure\n     * TODO Currently limited to certain 'western' languages\n     */\n    private String prepareName(String name) {\n        StringBuilder sb = new StringBuilder(name.length());\n        Matcher wordCharMatcher = WORD_CHAR.matcher(name);\n        while (wordCharMatcher.find()) {\n            String normalizedToken = toLowerCase(wordCharMatcher.group());\n            String rewrite = rewriteMap.get(normalizedToken);\n            if (rewrite != null)\n                normalizedToken = rewrite;\n            if (normalizedToken.isEmpty())\n                continue;\n            // Ignore matching short phrases like de, la, ... except it is a number\n            if (normalizedToken.length() > 2) {\n                sb.append(normalizedToken);\n            } else {\n                if (Character.isDigit(normalizedToken.charAt(0)) && (normalizedToken.length() == 1 || Character.isDigit(normalizedToken.charAt(1)))) {\n                    sb.append(normalizedToken);\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    private String removeRelation(String edgeName) {\n        int index = edgeName.lastIndexOf(\", \");\n        return index >= 0 ? edgeName.substring(0, index) : edgeName;\n    }\n\n    @Override\n    public final boolean accept(EdgeIteratorState iter) {\n        if (!edgeFilter.accept(iter)) {\n            return false;\n        }\n\n        if (pointHint.isEmpty()) {\n            return true;\n        }\n\n        String name = iter.getName();\n        if (name == null || name.isEmpty()) {\n            return false;\n        }\n\n        BBox bbox = createBBox(iter);\n        if (!pointCircle.intersects(bbox)) {\n            return false;\n        }\n\n        name = removeRelation(name);\n        String edgeName = prepareName(name);\n\n        return isJaroWinklerSimilar(pointHint, edgeName);\n    }\n\n    private static BBox createBBox(EdgeIteratorState edgeState) {\n        // we should include the entire geometry, see #2319\n        PointList geometry = edgeState.fetchWayGeometry(FetchMode.ALL);\n        BBox bbox = new BBox(180, -180, 90, -90);\n        for (int i = 0; i < geometry.size(); i++)\n            bbox.update(geometry.getLat(i), geometry.getLon(i));\n        return bbox;\n    }\n\n    private boolean isJaroWinklerSimilar(String str1, String str2) {\n        double jwSimilarity = jaroWinkler.similarity(str1, str2);\n        // System.out.println(str1 + \" vs. edge:\" + str2 + \", \" + jwSimilarity);\n        return jwSimilarity > JARO_WINKLER_ACCEPT_FACTOR;\n    }\n\n    private boolean isLevenshteinSimilar(String hint, String name) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/183", "ground_truth": "\n        // too big length difference\n        if (Math.min(name.length(), hint.length()) * 4 < Math.max(name.length(), hint.length()))\n            return false;\n\n        // The part 'abs(pointHint.length - name.length)' tries to make differences regarding length less important\n        // Ie. 'hauptstra\u00dfedresden' vs. 'hauptstr.' should be considered a match, but 'hauptstra\u00dfedresden' vs. 'klingestra\u00dfedresden' should not match\n        int factor = 1 + Math.abs(hint.length() - name.length());\n        int levDistance = StringUtils.getLevenshteinDistance(hint, name);\n        // System.out.println(hint + \" vs. edge:\" + name + \", \" + levDistance + \" <= \" + factor);\n        return levDistance <= factor;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "NameSimilarityEdgeFilter.java"], "context_start_lineno": 0, "function_name": "isLevenshteinSimilar", "left_context": "class NameSimilarityEdgeFilter implements EdgeFilter {\n\n    private static final Map<String, String> DEFAULT_REWRITE_MAP = new HashMap<String, String>() {{\n        // Words with 2 characters like \"Dr\" (Drive) will be ignored, so it is not required to list them here.\n        // Words with 3 and more characters should be listed here to remove or rename them.\n        for (String remove : Arrays.asList(\n                \"ally\", \"alley\",\n                \"arc\", \"arcade\",\n                \"bvd\", \"bvd.\", \"boulevard\",\n                \"av.\", \"avenue\", \"avenida\",\n                \"calle\",\n                \"cl.\", \"close\",\n                \"crescend\", \"cres\", \"cres.\",\n                \"rd.\", \"road\",\n                \"ln.\", \"lane\",\n                \"pde.\", \"pde\", \"parade\",\n                \"pl.\", \"place\", \"plaza\",\n                \"rte\", \"route\",\n                \"str.\", \"str\", \"stra\u00dfe\", \"strasse\", \"st.\", \"street\", \"strada\",\n                \"sq.\", \"square\",\n                \"tr.\", \"track\",\n                \"via\")) {\n            put(remove, \"\");\n        }\n        // expand instead of remove as significant part of the road name\n        put(\"n\", \"north\");\n        put(\"s\", \"south\");\n        put(\"w\", \"west\");\n        put(\"e\", \"east\");\n        put(\"ne\", \"northeast\");\n        put(\"nw\", \"northwest\");\n        put(\"se\", \"southeast\");\n        put(\"sw\", \"southwest\");\n    }};\n    private static final Pattern WORD_CHAR = Pattern.compile(\"\\\\p{LD}+\");\n    private static final JaroWinkler jaroWinkler = new JaroWinkler();\n    private static final double JARO_WINKLER_ACCEPT_FACTOR = .9;\n    private final EdgeFilter edgeFilter;\n    private final String pointHint;\n    private final Map<String, String> rewriteMap;\n    private final Circle pointCircle;\n\n    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint, GHPoint point, double radius) {\n        this(edgeFilter, pointHint, point, radius, DEFAULT_REWRITE_MAP);\n    }\n\n    /**\n     * @param radius     the searchable region about the point in meters\n     * @param rewriteMap maps abbreviations to its longer form\n     */\n    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint, GHPoint point, double radius, Map<String, String> rewriteMap) {\n        this.edgeFilter = edgeFilter;\n        this.rewriteMap = rewriteMap;\n        this.pointHint = prepareName(removeRelation(pointHint == null ? \"\" : pointHint));\n        this.pointCircle = new Circle(point.lat, point.lon, radius);\n    }\n\n    String getNormalizedPointHint() {\n        return pointHint;\n    }\n\n    /**\n     * Removes any characters in the String that we don't care about in the matching procedure\n     * TODO Currently limited to certain 'western' languages\n     */\n    private String prepareName(String name) {\n        StringBuilder sb = new StringBuilder(name.length());\n        Matcher wordCharMatcher = WORD_CHAR.matcher(name);\n        while (wordCharMatcher.find()) {\n            String normalizedToken = toLowerCase(wordCharMatcher.group());\n            String rewrite = rewriteMap.get(normalizedToken);\n            if (rewrite != null)\n                normalizedToken = rewrite;\n            if (normalizedToken.isEmpty())\n                continue;\n            // Ignore matching short phrases like de, la, ... except it is a number\n            if (normalizedToken.length() > 2) {\n                sb.append(normalizedToken);\n            } else {\n                if (Character.isDigit(normalizedToken.charAt(0)) && (normalizedToken.length() == 1 || Character.isDigit(normalizedToken.charAt(1)))) {\n                    sb.append(normalizedToken);\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    private String removeRelation(String edgeName) {\n        int index = edgeName.lastIndexOf(\", \");\n        return index >= 0 ? edgeName.substring(0, index) : edgeName;\n    }\n\n    @Override\n    public final boolean accept(EdgeIteratorState iter) {\n        if (!edgeFilter.accept(iter)) {\n            return false;\n        }\n\n        if (pointHint.isEmpty()) {\n            return true;\n        }\n\n        String name = iter.getName();\n        if (name == null || name.isEmpty()) {\n            return false;\n        }\n\n        BBox bbox = createBBox(iter);\n        if (!pointCircle.intersects(bbox)) {\n            return false;\n        }\n\n        name = removeRelation(name);\n        String edgeName = prepareName(name);\n\n        return isJaroWinklerSimilar(pointHint, edgeName);\n    }\n\n    private static BBox createBBox(EdgeIteratorState edgeState) {\n        // we should include the entire geometry, see #2319\n        PointList geometry = edgeState.fetchWayGeometry(FetchMode.ALL);\n        BBox bbox = new BBox(180, -180, 90, -90);\n        for (int i = 0; i < geometry.size(); i++)\n            bbox.update(geometry.getLat(i), geometry.getLon(i));\n        return bbox;\n    }\n\n    private boolean isJaroWinklerSimilar(String str1, String str2) {\n        double jwSimilarity = jaroWinkler.similarity(str1, str2);\n        // System.out.println(str1 + \" vs. edge:\" + str2 + \", \" + jwSimilarity);\n        return jwSimilarity > JARO_WINKLER_ACCEPT_FACTOR;\n    }\n\n    private boolean isLevenshteinSimilar(String hint, String name) {", "right_context": "}\n}", "class_name": "NameSimilarityEdgeFilter", "return_type": "boolean", "parameters": [{"type": "String", "name": "hint"}, {"type": "String", "name": "name"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/JerseyCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LatviaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK || roadClass == RoadClass.PRIMARY) {\n//     return Toll.HGV;\n//   }\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LiechtensteinCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LithuaniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK || roadClass == RoadClass.PRIMARY) {\n//     return Toll.HGV;\n//   }\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LuxembourgCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/MonacoCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/NetherlandsCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/PolandCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/PortugalCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/RomaniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/RomaniaSpatialRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n// case PRIMARY:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SanMarinoCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SerbiaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SlovakiaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SloveniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SpainCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwedenCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwitzerlandCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (currentToll != null)   return currentToll;\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/UkraineCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/VaticanCityCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MaltaCountryRule implements CountryRule {\n\n    @Override\n    public Toll getToll(ReaderWay readerWay, Toll currentToll) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/184", "ground_truth": "\n        if (currentToll != Toll.MISSING) {\n            return currentToll;\n        }\n\n        return Toll.NO;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "countryrules", "europe", "MaltaCountryRule.java"], "context_start_lineno": 0, "function_name": "getToll", "left_context": "class MaltaCountryRule implements CountryRule {\n\n    @Override\n    public Toll getToll(ReaderWay readerWay, Toll currentToll) {", "right_context": "}\n}", "class_name": "MaltaCountryRule", "return_type": "Toll", "parameters": [{"type": "ReaderWay", "name": "readerWay"}, {"type": "Toll", "name": "currentToll"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HeadingEdgeFilter implements EdgeFilter {\n\n    private final double heading;\n    private final DirectedEdgeFilter directedEdgeFilter;\n    private final GHPoint pointNearHeading;\n\n    public HeadingEdgeFilter(DirectedEdgeFilter directedEdgeFilter, double heading, GHPoint pointNearHeading) {\n        this.directedEdgeFilter = directedEdgeFilter;\n        this.heading = heading;\n        this.pointNearHeading = pointNearHeading;\n    }\n\n    @Override\n    public boolean accept(EdgeIteratorState edgeState) {\n        final double tolerance = 30;\n        // we only accept edges that are not too far away. It might happen that only far away edges match the heading\n        // in which case we rather rely on the fallback snapping than return a match here.\n        final double maxDistance = 20;\n        double headingOfEdge = getHeadingOfGeometryNearPoint(edgeState, pointNearHeading, maxDistance);\n        if (Double.isNaN(headingOfEdge))\n            // this edge is too far away. we do not accept it.\n            return false;\n        // we accept the edge if either of the two directions roughly has the right heading\n        return Math.abs(headingOfEdge - heading) < tolerance && directedEdgeFilter.accept(edgeState, false) ||\n                Math.abs((headingOfEdge + 180) % 360 - heading) < tolerance && directedEdgeFilter.accept(edgeState, true);\n    }\n\n    /**\n     * Calculates the heading (in degrees) of the given edge in fwd direction near the given point. If the point is\n     * too far away from the edge (according to the maxDistance parameter) it returns Double.NaN.\n     */\n    static double getHeadingOfGeometryNearPoint(EdgeIteratorState edgeState, GHPoint point, double maxDistance) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/189", "ground_truth": "\n        final DistanceCalc calcDist = DistanceCalcEarth.DIST_EARTH;\n        double closestDistance = Double.POSITIVE_INFINITY;\n        PointList points = edgeState.fetchWayGeometry(FetchMode.ALL);\n        int closestPoint = -1;\n        for (int i = 1; i < points.size(); i++) {\n            double fromLat = points.getLat(i - 1), fromLon = points.getLon(i - 1);\n            double toLat = points.getLat(i), toLon = points.getLon(i);\n            // the 'distance' between the point and an edge segment is either the vertical distance to the segment or\n            // the distance to the closer one of the two endpoints. here we save one call to calcDist per segment,\n            // because each endpoint appears in two segments (except the first and last).\n            double distance = calcDist.validEdgeDistance(point.lat, point.lon, fromLat, fromLon, toLat, toLon)\n                    ? calcDist.calcDenormalizedDist(calcDist.calcNormalizedEdgeDistance(point.lat, point.lon, fromLat, fromLon, toLat, toLon))\n                    : calcDist.calcDist(fromLat, fromLon, point.lat, point.lon);\n            if (i == points.size() - 1)\n                distance = Math.min(distance, calcDist.calcDist(toLat, toLon, point.lat, point.lon));\n            if (distance > maxDistance)\n                continue;\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        }\n        if (closestPoint < 0)\n            return Double.NaN;\n\n        double fromLat = points.getLat(closestPoint - 1), fromLon = points.getLon(closestPoint - 1);\n        double toLat = points.getLat(closestPoint), toLon = points.getLon(closestPoint);\n        return AngleCalc.ANGLE_CALC.calcAzimuth(fromLat, fromLon, toLat, toLon);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "HeadingEdgeFilter.java"], "context_start_lineno": 0, "function_name": "getHeadingOfGeometryNearPoint", "left_context": "class HeadingEdgeFilter implements EdgeFilter {\n\n    private final double heading;\n    private final DirectedEdgeFilter directedEdgeFilter;\n    private final GHPoint pointNearHeading;\n\n    public HeadingEdgeFilter(DirectedEdgeFilter directedEdgeFilter, double heading, GHPoint pointNearHeading) {\n        this.directedEdgeFilter = directedEdgeFilter;\n        this.heading = heading;\n        this.pointNearHeading = pointNearHeading;\n    }\n\n    @Override\n    public boolean accept(EdgeIteratorState edgeState) {\n        final double tolerance = 30;\n        // we only accept edges that are not too far away. It might happen that only far away edges match the heading\n        // in which case we rather rely on the fallback snapping than return a match here.\n        final double maxDistance = 20;\n        double headingOfEdge = getHeadingOfGeometryNearPoint(edgeState, pointNearHeading, maxDistance);\n        if (Double.isNaN(headingOfEdge))\n            // this edge is too far away. we do not accept it.\n            return false;\n        // we accept the edge if either of the two directions roughly has the right heading\n        return Math.abs(headingOfEdge - heading) < tolerance && directedEdgeFilter.accept(edgeState, false) ||\n                Math.abs((headingOfEdge + 180) % 360 - heading) < tolerance && directedEdgeFilter.accept(edgeState, true);\n    }\n\n    /**\n     * Calculates the heading (in degrees) of the given edge in fwd direction near the given point. If the point is\n     * too far away from the edge (according to the maxDistance parameter) it returns Double.NaN.\n     */\n    static double getHeadingOfGeometryNearPoint(EdgeIteratorState edgeState, GHPoint point, double maxDistance) {", "right_context": "}\n}", "class_name": "HeadingEdgeFilter", "return_type": "double", "parameters": [{"type": "EdgeIteratorState", "name": "edgeState"}, {"type": "GHPoint", "name": "point"}, {"type": "double", "name": "maxDistance"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ReaderElement {\n    public enum Type {\n        NODE,\n        WAY,\n        RELATION,\n        FILEHEADER;\n    }\n\n    private final long id;\n    private final Type type;\n    private final Map<String, Object> properties;\n\n    protected ReaderElement(long id, Type type) {\n        this(id, type, new LinkedHashMap<>(4));\n    }\n\n    protected ReaderElement(long id, Type type, Map<String, Object> properties) {\n        if (id < 0) {\n            throw new IllegalArgumentException(\"Invalid OSM \" + type + \" Id: \" + id + \"; Ids must not be negative\");\n        }\n        this.id = id;\n        this.type = type;\n        this.properties = properties;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    protected String tagsToString() {\n        if (properties.isEmpty())\n            return \"<empty>\";\n\n        StringBuilder tagTxt = new StringBuilder();\n        for (Map.Entry<String, Object> entry : properties.entrySet()) {\n            tagTxt.append(entry.getKey());\n            tagTxt.append(\"=\");\n            tagTxt.append(entry.getValue());\n            tagTxt.append(\"\\n\");\n        }\n        return tagTxt.toString();\n    }\n\n    public Map<String, Object> getTags() {\n        return properties;\n    }\n\n    public void setTags(Map<String, Object> newTags) {\n        properties.clear();\n        if (newTags != null)\n            for (Entry<String, Object> e : newTags.entrySet()) {\n                setTag(e.getKey(), e.getValue());\n            }\n    }\n\n    public boolean hasTags() {\n        return !properties.isEmpty();\n    }\n\n    public String getTag(String name) {\n        return (String) properties.get(name);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getTag(String key, T defaultValue) {\n        T val = (T) properties.get(key);\n        if (val == null)\n            return defaultValue;\n        return val;\n    }\n\n    public void setTag(String name, Object value) {\n        properties.put(name, value);\n    }\n\n    /**\n     * Check that the object has a given tag with a given value.\n     */\n    public boolean hasTag(String key, Object value) {\n        return value.equals(getTag(key, \"\"));\n    }\n\n    /**\n     * Check that a given tag has one of the specified values. If no values are given, just checks\n     * for presence of the tag\n     */\n    public boolean hasTag(String key, String... values) {\n        Object value = properties.get(key);\n        if (value == null)\n            return false;\n\n        // tag present, no values given: success\n        if (values.length == 0)\n            return true;\n\n        for (String val : values) {\n            if (val.equals(value))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check that a given tag has one of the specified values.\n     */\n    public final boolean hasTag(String key, Collection<String> values) {\n        return values.contains(getTag(key, \"\"));\n    }\n\n    /**\n     * Check a number of tags in the given order for any of the given values.\n     */\n    public boolean hasTag(List<String> keyList, Collection<String> values) {\n        for (String key : keyList) {\n            if (values.contains(getTag(key, \"\")))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check a number of tags in the given order if their value is equal to the specified value.\n     */\n    public boolean hasTag(List<String> keyList, Object value) {\n        for (String key : keyList) {\n            if (value.equals(getTag(key, null)))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns the first existing value of the specified list of keys where the order is important.\n     *\n     * @return an empty string if nothing found\n     */\n    public String getFirstValue(List<String> searchedTags) {\n        for (String str : searchedTags) {\n            Object value = properties.get(str);\n            if (value != null)\n                return (String) value;\n        }\n        return \"\";\n    }\n\n    /**\n     * @return -1 if not found\n     */\n    public int getFirstIndex(List<String> searchedTags) {<FILL_FUNCTION_BODY>}\n\n    public void removeTag(String name) {\n        properties.remove(name);\n    }\n\n    public void clearTags() {\n        properties.clear();\n    }\n\n    public Type getType() {\n        return type;\n    }\n\n    @Override\n    public String toString() {\n        return properties.toString();\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/190", "ground_truth": "\n        for (int i = 0; i < searchedTags.size(); i++) {\n            String str = searchedTags.get(i);\n            Object value = properties.get(str);\n            if (value != null)\n                return i;\n        }\n        return -1;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "reader", "ReaderElement.java"], "context_start_lineno": 0, "function_name": "getFirstIndex", "left_context": "class ReaderElement {\n    public enum Type {\n        NODE,\n        WAY,\n        RELATION,\n        FILEHEADER;\n    }\n\n    private final long id;\n    private final Type type;\n    private final Map<String, Object> properties;\n\n    protected ReaderElement(long id, Type type) {\n        this(id, type, new LinkedHashMap<>(4));\n    }\n\n    protected ReaderElement(long id, Type type, Map<String, Object> properties) {\n        if (id < 0) {\n            throw new IllegalArgumentException(\"Invalid OSM \" + type + \" Id: \" + id + \"; Ids must not be negative\");\n        }\n        this.id = id;\n        this.type = type;\n        this.properties = properties;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    protected String tagsToString() {\n        if (properties.isEmpty())\n            return \"<empty>\";\n\n        StringBuilder tagTxt = new StringBuilder();\n        for (Map.Entry<String, Object> entry : properties.entrySet()) {\n            tagTxt.append(entry.getKey());\n            tagTxt.append(\"=\");\n            tagTxt.append(entry.getValue());\n            tagTxt.append(\"\\n\");\n        }\n        return tagTxt.toString();\n    }\n\n    public Map<String, Object> getTags() {\n        return properties;\n    }\n\n    public void setTags(Map<String, Object> newTags) {\n        properties.clear();\n        if (newTags != null)\n            for (Entry<String, Object> e : newTags.entrySet()) {\n                setTag(e.getKey(), e.getValue());\n            }\n    }\n\n    public boolean hasTags() {\n        return !properties.isEmpty();\n    }\n\n    public String getTag(String name) {\n        return (String) properties.get(name);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getTag(String key, T defaultValue) {\n        T val = (T) properties.get(key);\n        if (val == null)\n            return defaultValue;\n        return val;\n    }\n\n    public void setTag(String name, Object value) {\n        properties.put(name, value);\n    }\n\n    /**\n     * Check that the object has a given tag with a given value.\n     */\n    public boolean hasTag(String key, Object value) {\n        return value.equals(getTag(key, \"\"));\n    }\n\n    /**\n     * Check that a given tag has one of the specified values. If no values are given, just checks\n     * for presence of the tag\n     */\n    public boolean hasTag(String key, String... values) {\n        Object value = properties.get(key);\n        if (value == null)\n            return false;\n\n        // tag present, no values given: success\n        if (values.length == 0)\n            return true;\n\n        for (String val : values) {\n            if (val.equals(value))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check that a given tag has one of the specified values.\n     */\n    public final boolean hasTag(String key, Collection<String> values) {\n        return values.contains(getTag(key, \"\"));\n    }\n\n    /**\n     * Check a number of tags in the given order for any of the given values.\n     */\n    public boolean hasTag(List<String> keyList, Collection<String> values) {\n        for (String key : keyList) {\n            if (values.contains(getTag(key, \"\")))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check a number of tags in the given order if their value is equal to the specified value.\n     */\n    public boolean hasTag(List<String> keyList, Object value) {\n        for (String key : keyList) {\n            if (value.equals(getTag(key, null)))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns the first existing value of the specified list of keys where the order is important.\n     *\n     * @return an empty string if nothing found\n     */\n    public String getFirstValue(List<String> searchedTags) {\n        for (String str : searchedTags) {\n            Object value = properties.get(str);\n            if (value != null)\n                return (String) value;\n        }\n        return \"\";\n    }\n\n    /**\n     * @return -1 if not found\n     */\n    public int getFirstIndex(List<String> searchedTags) {", "right_context": "}\n\n    public void removeTag(String name) {\n        properties.remove(name);\n    }\n\n    public void clearTags() {\n        properties.clear();\n    }\n\n    public Type getType() {\n        return type;\n    }\n\n    @Override\n    public String toString() {\n        return properties.toString();\n    }\n}", "class_name": "ReaderElement", "return_type": "int", "parameters": [{"type": "List<String>", "name": "searchedTags"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LatviaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK || roadClass == RoadClass.PRIMARY) {\n//     return Toll.HGV;\n//   }\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LiechtensteinCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LithuaniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK || roadClass == RoadClass.PRIMARY) {\n//     return Toll.HGV;\n//   }\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LuxembourgCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/MaltaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/MonacoCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/NetherlandsCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/PolandCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/PortugalCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/RomaniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/RomaniaSpatialRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n// case PRIMARY:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SanMarinoCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SerbiaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SlovakiaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SloveniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SpainCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwedenCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwitzerlandCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (currentToll != null)   return currentToll;\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/UkraineCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/VaticanCityCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CzechiaCountryRule implements CountryRule {\n\n    @Override\n    public Toll getToll(ReaderWay readerWay, Toll currentToll) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/194", "ground_truth": "\n        if (currentToll != Toll.MISSING) {\n            return currentToll;\n        }\n\n        RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n        if (RoadClass.MOTORWAY == roadClass)\n            return Toll.ALL;\n        return currentToll;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "countryrules", "europe", "CzechiaCountryRule.java"], "context_start_lineno": 0, "function_name": "getToll", "left_context": "class CzechiaCountryRule implements CountryRule {\n\n    @Override\n    public Toll getToll(ReaderWay readerWay, Toll currentToll) {", "right_context": "}\n}", "class_name": "CzechiaCountryRule", "return_type": "Toll", "parameters": [{"type": "ReaderWay", "name": "readerWay"}, {"type": "Toll", "name": "currentToll"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DirectionResolverResult {\n    private static final DirectionResolverResult UNRESTRICTED = new DirectionResolverResult(ANY_EDGE, ANY_EDGE, ANY_EDGE, ANY_EDGE);\n    private static final DirectionResolverResult IMPOSSIBLE = new DirectionResolverResult(NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE);\n\n    private final int inEdgeRight;\n    private final int outEdgeRight;\n    private final int inEdgeLeft;\n    private final int outEdgeLeft;\n\n    public static DirectionResolverResult onlyLeft(int inEdge, int outEdge) {\n        return new DirectionResolverResult(NO_EDGE, NO_EDGE, inEdge, outEdge);\n    }\n\n    public static DirectionResolverResult onlyRight(int inEdge, int outEdge) {\n        return new DirectionResolverResult(inEdge, outEdge, NO_EDGE, NO_EDGE);\n    }\n\n    public static DirectionResolverResult restricted(int inEdgeRight, int outEdgeRight, int inEdgeLeft, int outEdgeLeft) {\n        return new DirectionResolverResult(inEdgeRight, outEdgeRight, inEdgeLeft, outEdgeLeft);\n    }\n\n    public static DirectionResolverResult unrestricted() {\n        return UNRESTRICTED;\n    }\n\n    public static DirectionResolverResult impossible() {\n        return IMPOSSIBLE;\n    }\n\n    private DirectionResolverResult(int inEdgeRight, int outEdgeRight, int inEdgeLeft, int outEdgeLeft) {\n        this.inEdgeRight = inEdgeRight;\n        this.outEdgeRight = outEdgeRight;\n        this.inEdgeLeft = inEdgeLeft;\n        this.outEdgeLeft = outEdgeLeft;\n    }\n\n    public static int getOutEdge(DirectionResolverResult directionResolverResult, String curbside) {<FILL_FUNCTION_BODY>}\n\n    public static int getInEdge(DirectionResolverResult directionResolverResult, String curbside) {\n        if (curbside.trim().isEmpty()) {\n            curbside = CURBSIDE_ANY;\n        }\n        switch (curbside) {\n            case CURBSIDE_RIGHT:\n                return directionResolverResult.getInEdgeRight();\n            case CURBSIDE_LEFT:\n                return directionResolverResult.getInEdgeLeft();\n            case CURBSIDE_ANY:\n                return ANY_EDGE;\n            default:\n                throw new IllegalArgumentException(\"Unknown value for '\" + CURBSIDE + \" : \" + curbside + \"'. allowed: \" + CURBSIDE_LEFT + \", \" + CURBSIDE_RIGHT + \", \" + CURBSIDE_ANY);\n        }\n    }\n\n    public int getInEdgeRight() {\n        return inEdgeRight;\n    }\n\n    public int getOutEdgeRight() {\n        return outEdgeRight;\n    }\n\n    public int getInEdgeLeft() {\n        return inEdgeLeft;\n    }\n\n    public int getOutEdgeLeft() {\n        return outEdgeLeft;\n    }\n\n    public boolean isRestricted() {\n        return !equals(UNRESTRICTED);\n    }\n\n    public boolean isImpossible() {\n        return equals(IMPOSSIBLE);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        DirectionResolverResult that = (DirectionResolverResult) o;\n        return inEdgeRight == that.inEdgeRight &&\n                outEdgeRight == that.outEdgeRight &&\n                inEdgeLeft == that.inEdgeLeft &&\n                outEdgeLeft == that.outEdgeLeft;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(inEdgeRight, outEdgeRight, inEdgeLeft, outEdgeLeft);\n    }\n\n    @Override\n    public String toString() {\n        if (!isRestricted()) {\n            return \"unrestricted\";\n        } else if (isImpossible()) {\n            return \"impossible\";\n        } else {\n            return \"in-edge-right: \" + pretty(inEdgeRight) + \", out-edge-right: \" + pretty(outEdgeRight) + \", in-edge-left: \" + pretty(inEdgeLeft) + \", out-edge-left: \" + pretty(outEdgeLeft);\n        }\n    }\n\n    private String pretty(int edgeId) {\n        if (edgeId == NO_EDGE) {\n            return \"NO_EDGE\";\n        } else if (edgeId == ANY_EDGE) {\n            return \"ANY_EDGE\";\n        } else {\n            return edgeId + \"\";\n        }\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/214", "ground_truth": "\n        if (curbside.trim().isEmpty()) {\n            curbside = CURBSIDE_ANY;\n        }\n        switch (curbside) {\n            case CURBSIDE_RIGHT:\n                return directionResolverResult.getOutEdgeRight();\n            case CURBSIDE_LEFT:\n                return directionResolverResult.getOutEdgeLeft();\n            case CURBSIDE_ANY:\n                return ANY_EDGE;\n            default:\n                throw new IllegalArgumentException(\"Unknown value for \" + CURBSIDE + \" : '\" + curbside + \"'. allowed: \" + CURBSIDE_LEFT + \", \" + CURBSIDE_RIGHT + \", \" + CURBSIDE_ANY);\n        }\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "DirectionResolverResult.java"], "context_start_lineno": 0, "function_name": "getOutEdge", "left_context": "class DirectionResolverResult {\n    private static final DirectionResolverResult UNRESTRICTED = new DirectionResolverResult(ANY_EDGE, ANY_EDGE, ANY_EDGE, ANY_EDGE);\n    private static final DirectionResolverResult IMPOSSIBLE = new DirectionResolverResult(NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE);\n\n    private final int inEdgeRight;\n    private final int outEdgeRight;\n    private final int inEdgeLeft;\n    private final int outEdgeLeft;\n\n    public static DirectionResolverResult onlyLeft(int inEdge, int outEdge) {\n        return new DirectionResolverResult(NO_EDGE, NO_EDGE, inEdge, outEdge);\n    }\n\n    public static DirectionResolverResult onlyRight(int inEdge, int outEdge) {\n        return new DirectionResolverResult(inEdge, outEdge, NO_EDGE, NO_EDGE);\n    }\n\n    public static DirectionResolverResult restricted(int inEdgeRight, int outEdgeRight, int inEdgeLeft, int outEdgeLeft) {\n        return new DirectionResolverResult(inEdgeRight, outEdgeRight, inEdgeLeft, outEdgeLeft);\n    }\n\n    public static DirectionResolverResult unrestricted() {\n        return UNRESTRICTED;\n    }\n\n    public static DirectionResolverResult impossible() {\n        return IMPOSSIBLE;\n    }\n\n    private DirectionResolverResult(int inEdgeRight, int outEdgeRight, int inEdgeLeft, int outEdgeLeft) {\n        this.inEdgeRight = inEdgeRight;\n        this.outEdgeRight = outEdgeRight;\n        this.inEdgeLeft = inEdgeLeft;\n        this.outEdgeLeft = outEdgeLeft;\n    }\n\n    public static int getOutEdge(DirectionResolverResult directionResolverResult, String curbside) {", "right_context": "}\n\n    public static int getInEdge(DirectionResolverResult directionResolverResult, String curbside) {\n        if (curbside.trim().isEmpty()) {\n            curbside = CURBSIDE_ANY;\n        }\n        switch (curbside) {\n            case CURBSIDE_RIGHT:\n                return directionResolverResult.getInEdgeRight();\n            case CURBSIDE_LEFT:\n                return directionResolverResult.getInEdgeLeft();\n            case CURBSIDE_ANY:\n                return ANY_EDGE;\n            default:\n                throw new IllegalArgumentException(\"Unknown value for '\" + CURBSIDE + \" : \" + curbside + \"'. allowed: \" + CURBSIDE_LEFT + \", \" + CURBSIDE_RIGHT + \", \" + CURBSIDE_ANY);\n        }\n    }\n\n    public int getInEdgeRight() {\n        return inEdgeRight;\n    }\n\n    public int getOutEdgeRight() {\n        return outEdgeRight;\n    }\n\n    public int getInEdgeLeft() {\n        return inEdgeLeft;\n    }\n\n    public int getOutEdgeLeft() {\n        return outEdgeLeft;\n    }\n\n    public boolean isRestricted() {\n        return !equals(UNRESTRICTED);\n    }\n\n    public boolean isImpossible() {\n        return equals(IMPOSSIBLE);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        DirectionResolverResult that = (DirectionResolverResult) o;\n        return inEdgeRight == that.inEdgeRight &&\n                outEdgeRight == that.outEdgeRight &&\n                inEdgeLeft == that.inEdgeLeft &&\n                outEdgeLeft == that.outEdgeLeft;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(inEdgeRight, outEdgeRight, inEdgeLeft, outEdgeLeft);\n    }\n\n    @Override\n    public String toString() {\n        if (!isRestricted()) {\n            return \"unrestricted\";\n        } else if (isImpossible()) {\n            return \"impossible\";\n        } else {\n            return \"in-edge-right: \" + pretty(inEdgeRight) + \", out-edge-right: \" + pretty(outEdgeRight) + \", in-edge-left: \" + pretty(inEdgeLeft) + \", out-edge-left: \" + pretty(outEdgeLeft);\n        }\n    }\n\n    private String pretty(int edgeId) {\n        if (edgeId == NO_EDGE) {\n            return \"NO_EDGE\";\n        } else if (edgeId == ANY_EDGE) {\n            return \"ANY_EDGE\";\n        } else {\n            return edgeId + \"\";\n        }\n    }\n}", "class_name": "DirectionResolverResult", "return_type": "int", "parameters": [{"type": "DirectionResolverResult", "name": "directionResolverResult"}, {"type": "String", "name": "curbside"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Loader extends Entity.Loader<Calendar> {\n\n        private final Map<String, Service> services;\n\n        /**\n         * Create a loader. The map parameter should be an in-memory map that will be modified. We can't write directly\n         * to MapDB because we modify services as we load calendar dates, and this creates concurrentmodificationexceptions.\n         */\n        public Loader(GTFSFeed feed, Map<String, Service> services) {\n            super(feed, \"calendar\");\n            this.services = services;\n        }\n\n        @Override\n        protected boolean isRequired() {\n            return true;\n        }\n\n        @Override\n        public void loadOneRow() throws IOException {<FILL_FUNCTION_BODY>}    \n    }", "metadata": {"task_id": "graphhopper_graphhopper/227", "ground_truth": "\n\n            /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */\n            String service_id = getStringField(\"service_id\", true); // TODO service_id can reference either calendar or calendar_dates.\n            Service service = services.computeIfAbsent(service_id, Service::new);\n            if (service.calendar != null) {\n                feed.errors.add(new DuplicateKeyError(tableName, row, \"service_id\"));\n            } else {\n                Calendar c = new Calendar();\n                c.sourceFileLine = row + 1; // offset line number by 1 to account for 0-based row index\n                c.service_id = service.service_id;\n                c.monday = getIntField(\"monday\", true, 0, 1);\n                c.tuesday = getIntField(\"tuesday\", true, 0, 1);\n                c.wednesday = getIntField(\"wednesday\", true, 0, 1);\n                c.thursday = getIntField(\"thursday\", true, 0, 1);\n                c.friday = getIntField(\"friday\", true, 0, 1);\n                c.saturday = getIntField(\"saturday\", true, 0, 1);\n                c.sunday = getIntField(\"sunday\", true, 0, 1);\n                // TODO check valid dates\n                c.start_date = getIntField(\"start_date\", true, 18500101, 22001231);\n                c.end_date = getIntField(\"end_date\", true, 18500101, 22001231);\n                c.feed = feed;\n                c.feed_id = feed.feedId;\n                service.calendar = c;\n            }\n\n        ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "reader-gtfs", "src", "main", "java", "com", "conveyal", "gtfs", "model", "Calendar.java"], "context_start_lineno": 0, "function_name": "loadOneRow", "left_context": "class Loader extends Entity.Loader<Calendar> {\n\n        private final Map<String, Service> services;\n\n        /**\n         * Create a loader. The map parameter should be an in-memory map that will be modified. We can't write directly\n         * to MapDB because we modify services as we load calendar dates, and this creates concurrentmodificationexceptions.\n         */\n        public Loader(GTFSFeed feed, Map<String, Service> services) {\n            super(feed, \"calendar\");\n            this.services = services;\n        }\n\n        @Override\n        protected boolean isRequired() {\n            return true;\n        }\n\n        @Override\n        public void loadOneRow() throws IOException {", "right_context": "}    \n    }", "class_name": "Loader", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Only valid option for in-memory graph and if you e.g. want to disable store on flush for unit tests. Specify storeOnFlush to true if you want that existing data will be loaded FROM disc and all in-memory data will be flushed TO disc after flush is called e.g. while OSM import.\n//  * @param storeOnFlush true by default\n//  */\n// public GraphHopper setStoreOnFlush(boolean storeOnFlush){\n//   ensureNotLoaded();\n//   if (storeOnFlush)   dataAccessDefaultType=DAType.RAM_STORE;\n//  else   dataAccessDefaultType=DAType.RAM;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Sets the routing profiles that shall be supported by this GraphHopper instance. The (and only the) given profiles can be used for routing without preparation and for CH/LM preparation. <p> Here is an example how to setup two CH profiles and one LM profile (via the Java API) <pre> {@code hopper.setProfiles( new Profile(\"my_car\"), new Profile(\"your_bike\") ); hopper.getCHPreparationHandler().setCHProfiles( new CHProfile(\"my_car\"), new CHProfile(\"your_bike\") ); hopper.getLMPreparationHandler().setLMProfiles( new LMProfile(\"your_bike\") );}</pre> <p> See also https://github.com/graphhopper/graphhopper/pull/1922.\n//  * @see CHPreparationHandler#setCHProfiles\n//  * @see LMPreparationHandler#setLMProfiles\n//  */\n// public GraphHopper setProfiles(Profile... profiles){\n//   return setProfiles(Arrays.asList(profiles));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// public GraphHopper setProfiles(List<Profile> profiles){\n//   if (!profilesByName.isEmpty())   throw new IllegalArgumentException(\"Cannot initialize profiles multiple times\");\n//   if (encodingManager != null)   throw new IllegalArgumentException(\"Cannot set profiles after EncodingManager was built\");\n//   for (  Profile profile : profiles) {\n//     Profile previous=this.profilesByName.put(profile.getName(),profile);\n//     if (previous != null)     throw new IllegalArgumentException(\"Profile names must be unique. Duplicate name: '\" + profile.getName() + \"'\");\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Enable storing and fetching elevation data. Default is false\n//  */\n// public GraphHopper setElevation(boolean includeElevation){\n//   this.elevation=includeElevation;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * This file can be an osm xml (.osm), a compressed xml (.osm.zip or .osm.gz) or a protobuf file (.pbf).\n//  */\n// public GraphHopper setOSMFile(String osmFile){\n//   ensureNotLoaded();\n//   if (isEmpty(osmFile))   throw new IllegalArgumentException(\"OSM file cannot be empty.\");\n//   this.osmFile=osmFile;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// public GraphHopper setMaxSpeedCalculator(MaxSpeedCalculator maxSpeedCalculator){\n//   this.maxSpeedCalculator=maxSpeedCalculator;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Specifies if it is allowed for GraphHopper to write. E.g. for read only filesystems it is not possible to create a lock file and so we can avoid write locks.\n//  */\n// public GraphHopper setAllowWrites(boolean allowWrites){\n//   this.allowWrites=allowWrites;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// public GraphHopper setImportRegistry(ImportRegistry importRegistry){\n//   this.importRegistry=importRegistry;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// public GraphHopper setCustomAreasDirectory(String customAreasDirectory){\n//   this.customAreasDirectory=customAreasDirectory;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Sets the factory used to create country rules. Use `null` to disable country rules\n//  */\n// public GraphHopper setCountryRuleFactory(CountryRuleFactory countryRuleFactory){\n//   this.countryRuleFactory=countryRuleFactory;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Reads the configuration from a  {@link GraphHopperConfig} object which can be manually filled, or more typicallyis read from `config.yml`. <p> Important note: Calling this method overwrites the configuration done in some of the setter methods of this class, so generally it is advised to either use this method to configure GraphHopper or the different setter methods, but not both. Unfortunately, this still does not cover all cases and sometimes you have to use both, but then you should make sure there are no conflicts. If you need both it might also help to call the init before calling the setters, because this way the init method won't apply defaults to configuration options you already chose using the setters.\n//  */\n// public GraphHopper init(GraphHopperConfig ghConfig){\n//   ensureNotLoaded();\n//   if (ghConfig.has(\"routing.ch.disabling_allowed\"))   throw new IllegalArgumentException(\"The 'routing.ch.disabling_allowed' configuration option is no longer supported\");\n//   if (ghConfig.has(\"routing.lm.disabling_allowed\"))   throw new IllegalArgumentException(\"The 'routing.lm.disabling_allowed' configuration option is no longer supported\");\n//   if (ghConfig.has(\"osmreader.osm\"))   throw new IllegalArgumentException(\"Instead of osmreader.osm use datareader.file, for other changes see CHANGELOG.md\");\n//   String tmpOsmFile=ghConfig.getString(\"datareader.file\",\"\");\n//   if (!isEmpty(tmpOsmFile))   osmFile=tmpOsmFile;\n//   String graphHopperFolder=ghConfig.getString(\"graph.location\",\"\");\n//   if (isEmpty(graphHopperFolder) && isEmpty(ghLocation)) {\n//     if (isEmpty(osmFile))     throw new IllegalArgumentException(\"If no graph.location is provided you need to specify an OSM file.\");\n//     graphHopperFolder=pruneFileEnd(osmFile) + \"-gh\";\n//   }\n//   ghLocation=graphHopperFolder;\n//   countryRuleFactory=ghConfig.getBool(\"country_rules.enabled\",false) ? new CountryRuleFactory() : null;\n//   customAreasDirectory=ghConfig.getString(\"custom_areas.directory\",customAreasDirectory);\n//   defaultSegmentSize=ghConfig.getInt(\"graph.dataaccess.segment_size\",defaultSegmentSize);\n//   String daTypeString=ghConfig.getString(\"graph.dataaccess.default_type\",ghConfig.getString(\"graph.dataaccess\",\"RAM_STORE\"));\n//   dataAccessDefaultType=DAType.fromString(daTypeString);\n//   for (  Map.Entry<String,Object> entry : ghConfig.asPMap().toMap().entrySet()) {\n//     if (entry.getKey().startsWith(\"graph.dataaccess.type.\"))     dataAccessConfig.put(entry.getKey().substring(\"graph.dataaccess.type.\".length()),entry.getValue().toString());\n//     if (entry.getKey().startsWith(\"graph.dataaccess.mmap.preload.\"))     dataAccessConfig.put(entry.getKey().substring(\"graph.dataaccess.mmap.\".length()),entry.getValue().toString());\n//   }\n//   if (ghConfig.getBool(\"max_speed_calculator.enabled\",false))   maxSpeedCalculator=new MaxSpeedCalculator(MaxSpeedCalculator.createLegalDefaultSpeeds());\n//   removeZipped=ghConfig.getBool(\"graph.remove_zipped\",removeZipped);\n//   if (!ghConfig.getString(\"spatial_rules.location\",\"\").isEmpty())   throw new IllegalArgumentException(\"spatial_rules.location has been deprecated. Please use custom_areas.directory instead and read the documentation for custom areas.\");\n//   if (!ghConfig.getString(\"spatial_rules.borders_directory\",\"\").isEmpty())   throw new IllegalArgumentException(\"spatial_rules.borders_directory has been deprecated. Please use custom_areas.directory instead and read the documentation for custom areas.\");\n//   if (!ghConfig.getString(\"spatial_rules.max_bbox\",\"\").isEmpty())   throw new IllegalArgumentException(\"spatial_rules.max_bbox has been deprecated. There is no replacement, all custom areas will be considered.\");\n//   String customAreasDirectory=ghConfig.getString(\"custom_areas.directory\",\"\");\n//   JsonFeatureCollection globalAreas=GraphHopper.resolveCustomAreas(customAreasDirectory);\n//   String customModelFolder=ghConfig.getString(\"custom_models.directory\",ghConfig.getString(\"custom_model_folder\",\"\"));\n//   setProfiles(GraphHopper.resolveCustomModelFiles(customModelFolder,ghConfig.getProfiles(),globalAreas));\n//   if (ghConfig.has(\"graph.vehicles\"))   throw new IllegalArgumentException(\"The option graph.vehicles is no longer supported. Use the appropriate turn_costs and custom_model instead, see docs/migration/config-migration-08-09.md\");\n//   if (ghConfig.has(\"graph.flag_encoders\"))   throw new IllegalArgumentException(\"The option graph.flag_encoders is no longer supported.\");\n//   encodedValuesString=ghConfig.getString(\"graph.encoded_values\",encodedValuesString);\n//   dateRangeParserString=ghConfig.getString(\"datareader.date_range_parser_day\",dateRangeParserString);\n//   if (ghConfig.getString(\"graph.locktype\",\"native\").equals(\"simple\"))   lockFactory=new SimpleFSLockFactory();\n//  else   lockFactory=new NativeFSLockFactory();\n//   if (ghConfig.has(\"graph.elevation.smoothing\"))   throw new IllegalArgumentException(\"Use 'graph.elevation.edge_smoothing: moving_average' or the new 'graph.elevation.edge_smoothing: ramer'. See #2634.\");\n//   osmReaderConfig.setElevationSmoothing(ghConfig.getString(\"graph.elevation.edge_smoothing\",osmReaderConfig.getElevationSmoothing()));\n//   osmReaderConfig.setSmoothElevationAverageWindowSize(ghConfig.getDouble(\"graph.elevation.edge_smoothing.moving_average.window_size\",osmReaderConfig.getSmoothElevationAverageWindowSize()));\n//   osmReaderConfig.setElevationSmoothingRamerMax(ghConfig.getInt(\"graph.elevation.edge_smoothing.ramer.max_elevation\",osmReaderConfig.getElevationSmoothingRamerMax()));\n//   osmReaderConfig.setLongEdgeSamplingDistance(ghConfig.getDouble(\"graph.elevation.long_edge_sampling_distance\",osmReaderConfig.getLongEdgeSamplingDistance()));\n//   osmReaderConfig.setElevationMaxWayPointDistance(ghConfig.getDouble(\"graph.elevation.way_point_max_distance\",osmReaderConfig.getElevationMaxWayPointDistance()));\n//   routerConfig.setElevationWayPointMaxDistance(ghConfig.getDouble(\"graph.elevation.way_point_max_distance\",routerConfig.getElevationWayPointMaxDistance()));\n//   ElevationProvider elevationProvider=createElevationProvider(ghConfig);\n//   setElevationProvider(elevationProvider);\n//   if (osmReaderConfig.getLongEdgeSamplingDistance() < Double.MAX_VALUE && !elevationProvider.canInterpolate())   logger.warn(\"Long edge sampling enabled, but bilinear interpolation disabled. See #1953\");\n//   minNetworkSize=ghConfig.getInt(\"prepare.min_network_size\",minNetworkSize);\n//   subnetworksThreads=ghConfig.getInt(\"prepare.subnetworks.threads\",subnetworksThreads);\n//   chPreparationHandler.init(ghConfig);\n//   lmPreparationHandler.init(ghConfig);\n//   if (!ghConfig.has(\"import.osm.ignored_highways\"))   throw new IllegalArgumentException(\"Missing 'import.osm.ignored_highways'. Not using this parameter can decrease performance, see config-example.yml for more details\");\n//   String ignoredHighwaysString=ghConfig.getString(\"import.osm.ignored_highways\",\"\");\n//   if ((ignoredHighwaysString.contains(\"footway\") || ignoredHighwaysString.contains(\"path\")) && ghConfig.getProfiles().stream().map(Profile::getName).anyMatch(p -> p.contains(\"foot\") || p.contains(\"hike\")))   throw new IllegalArgumentException(\"You should not use import.osm.ignored_highways=footway or =path in conjunction with pedestrian profiles. This is probably an error in your configuration.\");\n//   if ((ignoredHighwaysString.contains(\"cycleway\") || ignoredHighwaysString.contains(\"path\")) && ghConfig.getProfiles().stream().map(Profile::getName).anyMatch(p -> p.contains(\"mtb\") || p.contains(\"bike\")))   throw new IllegalArgumentException(\"You should not use import.osm.ignored_highways=cycleway or =path in conjunction with bicycle profiles. This is probably an error in your configuration\");\n//   osmReaderConfig.setIgnoredHighways(Arrays.stream(ghConfig.getString(\"import.osm.ignored_highways\",String.join(\",\",osmReaderConfig.getIgnoredHighways())).split(\",\")).map(String::trim).collect(Collectors.toList()));\n//   osmReaderConfig.setParseWayNames(ghConfig.getBool(\"datareader.instructions\",osmReaderConfig.isParseWayNames()));\n//   osmReaderConfig.setPreferredLanguage(ghConfig.getString(\"datareader.preferred_language\",osmReaderConfig.getPreferredLanguage()));\n//   osmReaderConfig.setMaxWayPointDistance(ghConfig.getDouble(Routing.INIT_WAY_POINT_MAX_DISTANCE,osmReaderConfig.getMaxWayPointDistance()));\n//   osmReaderConfig.setWorkerThreads(ghConfig.getInt(\"datareader.worker_threads\",osmReaderConfig.getWorkerThreads()));\n//   preciseIndexResolution=ghConfig.getInt(\"index.high_resolution\",preciseIndexResolution);\n//   maxRegionSearch=ghConfig.getInt(\"index.max_region_search\",maxRegionSearch);\n//   residentialAreaRadius=ghConfig.getDouble(\"graph.urban_density.residential_radius\",residentialAreaRadius);\n//   residentialAreaSensitivity=ghConfig.getDouble(\"graph.urban_density.residential_sensitivity\",residentialAreaSensitivity);\n//   cityAreaRadius=ghConfig.getDouble(\"graph.urban_density.city_radius\",cityAreaRadius);\n//   cityAreaSensitivity=ghConfig.getDouble(\"graph.urban_density.city_sensitivity\",cityAreaSensitivity);\n//   urbanDensityCalculationThreads=ghConfig.getInt(\"graph.urban_density.threads\",urbanDensityCalculationThreads);\n//   routerConfig.setMaxVisitedNodes(ghConfig.getInt(Routing.INIT_MAX_VISITED_NODES,routerConfig.getMaxVisitedNodes()));\n//   routerConfig.setTimeoutMillis(ghConfig.getLong(Routing.INIT_TIMEOUT_MS,routerConfig.getTimeoutMillis()));\n//   routerConfig.setMaxRoundTripRetries(ghConfig.getInt(RoundTrip.INIT_MAX_RETRIES,routerConfig.getMaxRoundTripRetries()));\n//   routerConfig.setNonChMaxWaypointDistance(ghConfig.getInt(Parameters.NON_CH.MAX_NON_CH_POINT_DISTANCE,routerConfig.getNonChMaxWaypointDistance()));\n//   routerConfig.setInstructionsEnabled(ghConfig.getBool(Routing.INIT_INSTRUCTIONS,routerConfig.isInstructionsEnabled()));\n//   int activeLandmarkCount=ghConfig.getInt(Landmark.ACTIVE_COUNT_DEFAULT,Math.min(8,lmPreparationHandler.getLandmarks()));\n//   if (activeLandmarkCount > lmPreparationHandler.getLandmarks())   throw new IllegalArgumentException(\"Default value for active landmarks \" + activeLandmarkCount + \" should be less or equal to landmark count of \"+ lmPreparationHandler.getLandmarks());\n//   routerConfig.setActiveLandmarkCount(activeLandmarkCount);\n//   calcChecksums=ghConfig.getBool(\"graph.calc_checksums\",false);\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Imports provided data from disc and creates graph. Depending on the settings the resulting graph will be stored to disc so on a second call this method will only load the graph from disc which is usually a lot faster.\n//  */\n// public GraphHopper importOrLoad(){\n//   if (!load()) {\n//     printInfo();\n//     process(false);\n//   }\n//  else {\n//     printInfo();\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java\n// --------------------------------------------------\n// private GraphHopper createHopperWithProfiles(List<Profile> profiles){\n//   GraphHopper hopper=new GraphHopper();\n//   hopper.init(new GraphHopperConfig().putObject(\"graph.location\",ghLoc).putObject(\"datareader.file\",testOsm).putObject(\"import.osm.ignored_highways\",\"\").setProfiles(profiles));\n//   return hopper;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java\n// --------------------------------------------------\n// /** \n//  * Sets the graphhopper folder.\n//  */\n// public GraphHopper setGraphHopperLocation(String ghLocation){\n//   ensureNotLoaded();\n//   if (ghLocation == null)   throw new IllegalArgumentException(\"graphhopper location cannot be null\");\n//   this.ghLocation=ghLocation;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java\n// --------------------------------------------------\n// public GraphHopper getGraphHopper(){\n//   return graphHopper;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/test/java/com/graphhopper/GraphHopperProfileTest.java\n// --------------------------------------------------\n// private GraphHopper createHopper(){\n//   final GraphHopper hopper=new GraphHopper();\n//   hopper.setGraphHopperLocation(GH_LOCATION);\n//   hopper.setStoreOnFlush(false);\n//   return hopper;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java\n// --------------------------------------------------\n// /** \n//  * Creates a  {@link GraphHopper} instance with some default settings for this test. The settings canbe adjusted before calling  {@link GraphHopper#importOrLoad()}\n//  */\n// private GraphHopper createHopper(String osmFile,Profile... profiles){\n//   GraphHopper hopper=new GraphHopper().setStoreOnFlush(false).setOSMFile(osmFile).setProfiles(profiles).setEncodedValuesString(\"average_slope, max_slope, hike_rating, car_access, car_average_speed, \" + \"foot_access, foot_priority, foot_average_speed, \" + \"bike_access, bike_priority, bike_average_speed, foot_network, roundabout, \"+ \"mtb_access, mtb_priority, mtb_average_speed, \"+ \"racingbike_access, racingbike_priority, racingbike_average_speed\").setGraphHopperLocation(GH_LOCATION);\n//   hopper.getRouterConfig().setSimplifyResponse(false);\n//   hopper.setMinNetworkSize(0);\n//   hopper.getReaderConfig().setMaxWayPointDistance(0);\n//   hopper.getLMPreparationHandler().setLMProfiles(new LMProfile(profiles[0].getName()));\n//   hopper.getCHPreparationHandler().setCHProfiles(new CHProfile(profiles[0].getName()));\n//   return hopper;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/example/src/main/java/com/graphhopper/example/HeadingExample.java\n// --------------------------------------------------\n// /** \n//  * See  {@link RoutingExample#createGraphHopperInstance} for more comments on creating the GraphHopper instance.\n//  */\n// static GraphHopper createGraphHopperInstance(String ghLoc){\n//   GraphHopper hopper=new GraphHopper();\n//   hopper.setOSMFile(ghLoc);\n//   hopper.setGraphHopperLocation(\"target/heading-graph-cache\");\n//   hopper.setEncodedValuesString(\"car_access, road_access, car_average_speed\");\n//   hopper.setProfiles(new Profile(\"car\").setCustomModel(new CustomModel().addToSpeed(If(\"true\",LIMIT,\"car_average_speed\")).addToPriority(If(\"!car_access\",MULTIPLY,\"0\")).addToPriority(If(\"road_access == DESTINATION\",MULTIPLY,\"0.1\"))));\n//   hopper.getCHPreparationHandler().setCHProfiles(new CHProfile(\"car\"));\n//   hopper.importOrLoad();\n//   return hopper;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RoutingExample {\n    public static void main(String[] args) {\n        String relDir = args.length == 1 ? args[0] : \"\";\n        GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n        routing(hopper);\n        speedModeVersusFlexibleMode(hopper);\n        alternativeRoute(hopper);\n        customizableRouting(relDir + \"core/files/andorra.osm.pbf\");\n\n        // release resources to properly shutdown or start a new instance\n        hopper.close();\n    }\n\n    static GraphHopper createGraphHopperInstance(String ghLoc) {<FILL_FUNCTION_BODY>}\n\n    public static void routing(GraphHopper hopper) {\n        // simple configuration of the request object\n        GHRequest req = new GHRequest(42.508552, 1.532936, 42.507508, 1.528773).\n                // note that we have to specify which profile we are using even when there is only one like here\n                        setProfile(\"car\").\n                // define the language for the turn instructions\n                        setLocale(Locale.US);\n        GHResponse rsp = hopper.route(req);\n\n        // handle errors\n        if (rsp.hasErrors())\n            throw new RuntimeException(rsp.getErrors().toString());\n\n        // use the best path, see the GHResponse class for more possibilities.\n        ResponsePath path = rsp.getBest();\n\n        // points, distance in meters and time in millis of the full path\n        PointList pointList = path.getPoints();\n        double distance = path.getDistance();\n        long timeInMs = path.getTime();\n\n        Translation tr = hopper.getTranslationMap().getWithFallBack(Locale.UK);\n        InstructionList il = path.getInstructions();\n        // iterate over all turn instructions\n        for (Instruction instruction : il) {\n            // System.out.println(\"distance \" + instruction.getDistance() + \" for instruction: \" + instruction.getTurnDescription(tr));\n        }\n        assert il.size() == 6;\n        assert Helper.round(path.getDistance(), -2) == 600;\n    }\n\n    public static void speedModeVersusFlexibleMode(GraphHopper hopper) {\n        GHRequest req = new GHRequest(42.508552, 1.532936, 42.507508, 1.528773).\n                setProfile(\"car\").setAlgorithm(Parameters.Algorithms.ASTAR_BI).putHint(Parameters.CH.DISABLE, true);\n        GHResponse res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n        assert Helper.round(res.getBest().getDistance(), -2) == 600;\n    }\n\n    public static void alternativeRoute(GraphHopper hopper) {\n        // calculate alternative routes between two points (supported with and without CH)\n        GHRequest req = new GHRequest().setProfile(\"car\").\n                addPoint(new GHPoint(42.502904, 1.514714)).addPoint(new GHPoint(42.508774, 1.537094)).\n                setAlgorithm(Parameters.Algorithms.ALT_ROUTE);\n        req.getHints().putObject(Parameters.Algorithms.AltRoute.MAX_PATHS, 3);\n        GHResponse res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n        assert res.getAll().size() == 2;\n        assert Helper.round(res.getBest().getDistance(), -2) == 2200;\n    }\n\n    /**\n     * To customize profiles in the config.yml file you can use a json or yml file or embed it directly. See this list:\n     * web/src/test/resources/com/graphhopper/application/resources and https://www.graphhopper.com/?s=customizable+routing\n     */\n    public static void customizableRouting(String ghLoc) {\n        GraphHopper hopper = new GraphHopper();\n        hopper.setOSMFile(ghLoc);\n        hopper.setGraphHopperLocation(\"target/routing-custom-graph-cache\");\n        hopper.setEncodedValuesString(\"car_access, car_average_speed\");\n        hopper.setProfiles(new Profile(\"car_custom\").setCustomModel(GHUtility.loadCustomModelFromJar(\"car.json\")));\n\n        // The hybrid mode uses the \"landmark algorithm\" and is up to 15x faster than the flexible mode (Dijkstra).\n        // Still it is slower than the speed mode (\"contraction hierarchies algorithm\") ...\n        hopper.getLMPreparationHandler().setLMProfiles(new LMProfile(\"car_custom\"));\n        hopper.importOrLoad();\n\n        // ... but for the hybrid mode we can customize the route calculation even at request time:\n        // 1. a request with default preferences\n        GHRequest req = new GHRequest().setProfile(\"car_custom\").\n                addPoint(new GHPoint(42.506472, 1.522475)).addPoint(new GHPoint(42.513108, 1.536005));\n\n        GHResponse res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n\n        assert Math.round(res.getBest().getTime() / 1000d) == 94;\n\n        // 2. now avoid the secondary road and reduce the maximum speed, see docs/core/custom-models.md for an in-depth explanation\n        // and also the blog posts https://www.graphhopper.com/?s=customizable+routing\n        CustomModel model = new CustomModel();\n        model.addToPriority(If(\"road_class == SECONDARY\", MULTIPLY, \"0.5\"));\n\n        // unconditional limit to 20km/h\n        model.addToSpeed(If(\"true\", LIMIT, \"30\"));\n\n        req.setCustomModel(model);\n        res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n\n        assert Math.round(res.getBest().getTime() / 1000d) == 184;\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/255", "ground_truth": "\n        GraphHopper hopper = new GraphHopper();\n        hopper.setOSMFile(ghLoc);\n        // specify where to store graphhopper files\n        hopper.setGraphHopperLocation(\"target/routing-graph-cache\");\n\n        // add all encoded values that are used in the custom model, these are also available as path details or for client-side custom models\n        hopper.setEncodedValuesString(\"car_access, car_average_speed\");\n        // see docs/core/profiles.md to learn more about profiles\n        hopper.setProfiles(new Profile(\"car\").setCustomModel(GHUtility.loadCustomModelFromJar(\"car.json\")));\n\n        // this enables speed mode for the profile we called car\n        hopper.getCHPreparationHandler().setCHProfiles(new CHProfile(\"car\"));\n\n        // now this can take minutes if it imports or a few seconds for loading of course this is dependent on the area you import\n        hopper.importOrLoad();\n        return hopper;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "example", "src", "main", "java", "com", "graphhopper", "example", "RoutingExample.java"], "context_start_lineno": 0, "function_name": "createGraphHopperInstance", "left_context": "class RoutingExample {\n    public static void main(String[] args) {\n        String relDir = args.length == 1 ? args[0] : \"\";\n        GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n        routing(hopper);\n        speedModeVersusFlexibleMode(hopper);\n        alternativeRoute(hopper);\n        customizableRouting(relDir + \"core/files/andorra.osm.pbf\");\n\n        // release resources to properly shutdown or start a new instance\n        hopper.close();\n    }\n\n    static GraphHopper createGraphHopperInstance(String ghLoc) {", "right_context": "}\n\n    public static void routing(GraphHopper hopper) {\n        // simple configuration of the request object\n        GHRequest req = new GHRequest(42.508552, 1.532936, 42.507508, 1.528773).\n                // note that we have to specify which profile we are using even when there is only one like here\n                        setProfile(\"car\").\n                // define the language for the turn instructions\n                        setLocale(Locale.US);\n        GHResponse rsp = hopper.route(req);\n\n        // handle errors\n        if (rsp.hasErrors())\n            throw new RuntimeException(rsp.getErrors().toString());\n\n        // use the best path, see the GHResponse class for more possibilities.\n        ResponsePath path = rsp.getBest();\n\n        // points, distance in meters and time in millis of the full path\n        PointList pointList = path.getPoints();\n        double distance = path.getDistance();\n        long timeInMs = path.getTime();\n\n        Translation tr = hopper.getTranslationMap().getWithFallBack(Locale.UK);\n        InstructionList il = path.getInstructions();\n        // iterate over all turn instructions\n        for (Instruction instruction : il) {\n            // System.out.println(\"distance \" + instruction.getDistance() + \" for instruction: \" + instruction.getTurnDescription(tr));\n        }\n        assert il.size() == 6;\n        assert Helper.round(path.getDistance(), -2) == 600;\n    }\n\n    public static void speedModeVersusFlexibleMode(GraphHopper hopper) {\n        GHRequest req = new GHRequest(42.508552, 1.532936, 42.507508, 1.528773).\n                setProfile(\"car\").setAlgorithm(Parameters.Algorithms.ASTAR_BI).putHint(Parameters.CH.DISABLE, true);\n        GHResponse res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n        assert Helper.round(res.getBest().getDistance(), -2) == 600;\n    }\n\n    public static void alternativeRoute(GraphHopper hopper) {\n        // calculate alternative routes between two points (supported with and without CH)\n        GHRequest req = new GHRequest().setProfile(\"car\").\n                addPoint(new GHPoint(42.502904, 1.514714)).addPoint(new GHPoint(42.508774, 1.537094)).\n                setAlgorithm(Parameters.Algorithms.ALT_ROUTE);\n        req.getHints().putObject(Parameters.Algorithms.AltRoute.MAX_PATHS, 3);\n        GHResponse res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n        assert res.getAll().size() == 2;\n        assert Helper.round(res.getBest().getDistance(), -2) == 2200;\n    }\n\n    /**\n     * To customize profiles in the config.yml file you can use a json or yml file or embed it directly. See this list:\n     * web/src/test/resources/com/graphhopper/application/resources and https://www.graphhopper.com/?s=customizable+routing\n     */\n    public static void customizableRouting(String ghLoc) {\n        GraphHopper hopper = new GraphHopper();\n        hopper.setOSMFile(ghLoc);\n        hopper.setGraphHopperLocation(\"target/routing-custom-graph-cache\");\n        hopper.setEncodedValuesString(\"car_access, car_average_speed\");\n        hopper.setProfiles(new Profile(\"car_custom\").setCustomModel(GHUtility.loadCustomModelFromJar(\"car.json\")));\n\n        // The hybrid mode uses the \"landmark algorithm\" and is up to 15x faster than the flexible mode (Dijkstra).\n        // Still it is slower than the speed mode (\"contraction hierarchies algorithm\") ...\n        hopper.getLMPreparationHandler().setLMProfiles(new LMProfile(\"car_custom\"));\n        hopper.importOrLoad();\n\n        // ... but for the hybrid mode we can customize the route calculation even at request time:\n        // 1. a request with default preferences\n        GHRequest req = new GHRequest().setProfile(\"car_custom\").\n                addPoint(new GHPoint(42.506472, 1.522475)).addPoint(new GHPoint(42.513108, 1.536005));\n\n        GHResponse res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n\n        assert Math.round(res.getBest().getTime() / 1000d) == 94;\n\n        // 2. now avoid the secondary road and reduce the maximum speed, see docs/core/custom-models.md for an in-depth explanation\n        // and also the blog posts https://www.graphhopper.com/?s=customizable+routing\n        CustomModel model = new CustomModel();\n        model.addToPriority(If(\"road_class == SECONDARY\", MULTIPLY, \"0.5\"));\n\n        // unconditional limit to 20km/h\n        model.addToSpeed(If(\"true\", LIMIT, \"30\"));\n\n        req.setCustomModel(model);\n        res = hopper.route(req);\n        if (res.hasErrors())\n            throw new RuntimeException(res.getErrors().toString());\n\n        assert Math.round(res.getBest().getTime() / 1000d) == 184;\n    }\n}", "class_name": "RoutingExample", "return_type": "GraphHopper", "parameters": [{"type": "String", "name": "ghLoc"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java\n// --------------------------------------------------\n// public Calendar getMax(){\n//   if (isDayless()) {\n//     parsedCalendar.set(Calendar.DAY_OF_MONTH,parsedCalendar.getActualMaximum(Calendar.DAY_OF_MONTH));\n//   }\n//   parsedCalendar.set(Calendar.HOUR_OF_DAY,parsedCalendar.getActualMaximum(Calendar.HOUR_OF_DAY));\n//   parsedCalendar.set(Calendar.MINUTE,parsedCalendar.getActualMaximum(Calendar.MINUTE));\n//   parsedCalendar.set(Calendar.SECOND,parsedCalendar.getActualMaximum(Calendar.SECOND));\n//   parsedCalendar.set(Calendar.MILLISECOND,parsedCalendar.getActualMaximum(Calendar.MILLISECOND));\n//   return parsedCalendar;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java\n// --------------------------------------------------\n// public Calendar getMin(){\n//   if (isDayless()) {\n//     parsedCalendar.set(Calendar.DAY_OF_MONTH,parsedCalendar.getActualMinimum(Calendar.DAY_OF_MONTH));\n//   }\n//   parsedCalendar.set(Calendar.HOUR_OF_DAY,parsedCalendar.getActualMinimum(Calendar.HOUR_OF_DAY));\n//   parsedCalendar.set(Calendar.MINUTE,parsedCalendar.getActualMinimum(Calendar.MINUTE));\n//   parsedCalendar.set(Calendar.SECOND,parsedCalendar.getActualMinimum(Calendar.SECOND));\n//   parsedCalendar.set(Calendar.MILLISECOND,parsedCalendar.getActualMinimum(Calendar.MILLISECOND));\n//   return parsedCalendar;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java\n// --------------------------------------------------\n// protected Calendar getCalendar(int year,int month,int day){\n//   Calendar calendar=DateRangeParser.createCalendar();\n//   calendar.set(Calendar.YEAR,year);\n//   calendar.set(Calendar.MONTH,month);\n//   calendar.set(Calendar.DAY_OF_MONTH,day);\n//   return calendar;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DateRangeParser implements ConditionalValueParser {\n    private static final DateFormat YEAR_MONTH_DAY_DF = create3CharMonthFormatter(\"yyyy MMM dd\");\n    private static final DateFormat MONTH_DAY_DF = create3CharMonthFormatter(\"MMM dd\");\n    private static final DateFormat MONTH_DAY2_DF = createFormatter(\"dd.MM\");\n    private static final DateFormat YEAR_MONTH_DF = create3CharMonthFormatter(\"yyyy MMM\");\n    private static final DateFormat MONTH_DF = create3CharMonthFormatter(\"MMM\");\n    private static final List<String> DAY_NAMES = Arrays.asList(\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\");\n\n    private Calendar date;\n\n    DateRangeParser() {\n        this(createCalendar());\n    }\n\n    public DateRangeParser(Calendar date) {\n        this.date = date;\n    }\n\n    public static Calendar createCalendar() {<FILL_FUNCTION_BODY>}\n\n    static ParsedCalendar parseDateString(String dateString) throws ParseException {\n        // Replace occurrences of public holidays\n        dateString = dateString.replaceAll(\"(,( )*)?(PH|SH)\", \"\");\n        dateString = dateString.trim();\n        Calendar calendar = createCalendar();\n        ParsedCalendar parsedCalendar;\n        try {\n            calendar.setTime(YEAR_MONTH_DAY_DF.parse(dateString));\n            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.YEAR_MONTH_DAY, calendar);\n        } catch (ParseException e1) {\n            try {\n                calendar.setTime(MONTH_DAY_DF.parse(dateString));\n                parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH_DAY, calendar);\n            } catch (ParseException e2) {\n                try {\n                    calendar.setTime(MONTH_DAY2_DF.parse(dateString));\n                    parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH_DAY, calendar);\n                } catch (ParseException e3) {\n                    try {\n                        calendar.setTime(YEAR_MONTH_DF.parse(dateString));\n                        parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.YEAR_MONTH, calendar);\n                    } catch (ParseException e4) {\n                        try {\n                            calendar.setTime(MONTH_DF.parse(dateString));\n                            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH, calendar);\n                        } catch (ParseException e5) {\n                            int index = DAY_NAMES.indexOf(dateString);\n                            if (index < 0)\n                                throw new ParseException(\"Unparsable date: \\\"\" + dateString + \"\\\"\", 0);\n\n                            // Ranges from 1-7\n                            calendar.set(Calendar.DAY_OF_WEEK, index + 1);\n                            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.DAY, calendar);\n                        }\n\n                    }\n                }\n            }\n        }\n        return parsedCalendar;\n    }\n\n    DateRange getRange(String dateRangeString) throws ParseException {\n        if (dateRangeString == null || dateRangeString.isEmpty())\n            return null;\n\n        String[] dateArr = dateRangeString.split(\"-\");\n        if (dateArr.length > 2 || dateArr.length < 1)\n            return null;\n        // throw new IllegalArgumentException(\"Only Strings containing two Date separated by a '-' or a single Date are allowed\");\n\n        ParsedCalendar from = parseDateString(dateArr[0]);\n        ParsedCalendar to;\n        if (dateArr.length == 2)\n            to = parseDateString(dateArr[1]);\n        else\n            // faster and safe?\n            // to = new ParsedCalendar(from.parseType, (Calendar) from.parsedCalendar.clone());\n            to = parseDateString(dateArr[0]);\n\n        try {\n            return new DateRange(from, to);\n        } catch (IllegalArgumentException ex) {\n            return null;\n        }\n    }\n\n    @Override\n    public ConditionState checkCondition(String dateRangeString) throws ParseException {\n        DateRange dr = getRange(dateRangeString);\n        if (dr == null)\n            return ConditionState.INVALID;\n\n        if (dr.isInRange(date))\n            return ConditionState.TRUE;\n        else\n            return ConditionState.FALSE;\n    }\n\n    public static DateRangeParser createInstance(String day) {\n        Calendar calendar = createCalendar();\n        try {\n            if (!day.isEmpty())\n                calendar.setTime(Helper.createFormatter(\"yyyy-MM-dd\").parse(day));\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(e);\n        }\n        return new DateRangeParser(calendar);\n    }\n\n    private static SimpleDateFormat create3CharMonthFormatter(String pattern) {\n        DateFormatSymbols formatSymbols = new DateFormatSymbols(Locale.ENGLISH);\n        formatSymbols.setShortMonths(new String[]{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"});\n        SimpleDateFormat df = new SimpleDateFormat(pattern, formatSymbols);\n        df.setTimeZone(Helper.UTC);\n        return df;\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/262", "ground_truth": "\n        // Use locale US as exception here (instead of UK) to match week order \"Su-Sa\" used in Calendar for day_of_week.\n        // Inconsistent but we should not use US for other date handling stuff like strange default formatting, related to #647.\n        return Calendar.getInstance(Helper.UTC, Locale.US);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "reader", "osm", "conditional", "DateRangeParser.java"], "context_start_lineno": 0, "function_name": "createCalendar", "left_context": "class DateRangeParser implements ConditionalValueParser {\n    private static final DateFormat YEAR_MONTH_DAY_DF = create3CharMonthFormatter(\"yyyy MMM dd\");\n    private static final DateFormat MONTH_DAY_DF = create3CharMonthFormatter(\"MMM dd\");\n    private static final DateFormat MONTH_DAY2_DF = createFormatter(\"dd.MM\");\n    private static final DateFormat YEAR_MONTH_DF = create3CharMonthFormatter(\"yyyy MMM\");\n    private static final DateFormat MONTH_DF = create3CharMonthFormatter(\"MMM\");\n    private static final List<String> DAY_NAMES = Arrays.asList(\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\");\n\n    private Calendar date;\n\n    DateRangeParser() {\n        this(createCalendar());\n    }\n\n    public DateRangeParser(Calendar date) {\n        this.date = date;\n    }\n\n    public static Calendar createCalendar() {", "right_context": "}\n\n    static ParsedCalendar parseDateString(String dateString) throws ParseException {\n        // Replace occurrences of public holidays\n        dateString = dateString.replaceAll(\"(,( )*)?(PH|SH)\", \"\");\n        dateString = dateString.trim();\n        Calendar calendar = createCalendar();\n        ParsedCalendar parsedCalendar;\n        try {\n            calendar.setTime(YEAR_MONTH_DAY_DF.parse(dateString));\n            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.YEAR_MONTH_DAY, calendar);\n        } catch (ParseException e1) {\n            try {\n                calendar.setTime(MONTH_DAY_DF.parse(dateString));\n                parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH_DAY, calendar);\n            } catch (ParseException e2) {\n                try {\n                    calendar.setTime(MONTH_DAY2_DF.parse(dateString));\n                    parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH_DAY, calendar);\n                } catch (ParseException e3) {\n                    try {\n                        calendar.setTime(YEAR_MONTH_DF.parse(dateString));\n                        parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.YEAR_MONTH, calendar);\n                    } catch (ParseException e4) {\n                        try {\n                            calendar.setTime(MONTH_DF.parse(dateString));\n                            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH, calendar);\n                        } catch (ParseException e5) {\n                            int index = DAY_NAMES.indexOf(dateString);\n                            if (index < 0)\n                                throw new ParseException(\"Unparsable date: \\\"\" + dateString + \"\\\"\", 0);\n\n                            // Ranges from 1-7\n                            calendar.set(Calendar.DAY_OF_WEEK, index + 1);\n                            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.DAY, calendar);\n                        }\n\n                    }\n                }\n            }\n        }\n        return parsedCalendar;\n    }\n\n    DateRange getRange(String dateRangeString) throws ParseException {\n        if (dateRangeString == null || dateRangeString.isEmpty())\n            return null;\n\n        String[] dateArr = dateRangeString.split(\"-\");\n        if (dateArr.length > 2 || dateArr.length < 1)\n            return null;\n        // throw new IllegalArgumentException(\"Only Strings containing two Date separated by a '-' or a single Date are allowed\");\n\n        ParsedCalendar from = parseDateString(dateArr[0]);\n        ParsedCalendar to;\n        if (dateArr.length == 2)\n            to = parseDateString(dateArr[1]);\n        else\n            // faster and safe?\n            // to = new ParsedCalendar(from.parseType, (Calendar) from.parsedCalendar.clone());\n            to = parseDateString(dateArr[0]);\n\n        try {\n            return new DateRange(from, to);\n        } catch (IllegalArgumentException ex) {\n            return null;\n        }\n    }\n\n    @Override\n    public ConditionState checkCondition(String dateRangeString) throws ParseException {\n        DateRange dr = getRange(dateRangeString);\n        if (dr == null)\n            return ConditionState.INVALID;\n\n        if (dr.isInRange(date))\n            return ConditionState.TRUE;\n        else\n            return ConditionState.FALSE;\n    }\n\n    public static DateRangeParser createInstance(String day) {\n        Calendar calendar = createCalendar();\n        try {\n            if (!day.isEmpty())\n                calendar.setTime(Helper.createFormatter(\"yyyy-MM-dd\").parse(day));\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(e);\n        }\n        return new DateRangeParser(calendar);\n    }\n\n    private static SimpleDateFormat create3CharMonthFormatter(String pattern) {\n        DateFormatSymbols formatSymbols = new DateFormatSymbols(Locale.ENGLISH);\n        formatSymbols.setShortMonths(new String[]{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"});\n        SimpleDateFormat df = new SimpleDateFormat(pattern, formatSymbols);\n        df.setTimeZone(Helper.UTC);\n        return df;\n    }\n}", "class_name": "DateRangeParser", "return_type": "Calendar", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OSMRoadClassParser implements TagParser {\n\n    protected final EnumEncodedValue<RoadClass> roadClassEnc;\n\n    public OSMRoadClassParser(EnumEncodedValue<RoadClass> roadClassEnc) {\n        this.roadClassEnc = roadClassEnc;\n    }\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay readerWay, IntsRef relationFlags) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/331", "ground_truth": "\n        String roadClassTag = readerWay.getTag(\"highway\");\n        if (roadClassTag == null)\n            return;\n        RoadClass roadClass = RoadClass.find(roadClassTag);\n        if (roadClass == OTHER && roadClassTag.endsWith(\"_link\"))\n            roadClass = RoadClass.find(roadClassTag.substring(0, roadClassTag.length() - 5));\n\n        if (roadClass != OTHER)\n            roadClassEnc.setEnum(false, edgeId, edgeIntAccess, roadClass);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "parsers", "OSMRoadClassParser.java"], "context_start_lineno": 0, "function_name": "handleWayTags", "left_context": "class OSMRoadClassParser implements TagParser {\n\n    protected final EnumEncodedValue<RoadClass> roadClassEnc;\n\n    public OSMRoadClassParser(EnumEncodedValue<RoadClass> roadClassEnc) {\n        this.roadClassEnc = roadClassEnc;\n    }\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay readerWay, IntsRef relationFlags) {", "right_context": "}\n}", "class_name": "OSMRoadClassParser", "return_type": "void", "parameters": [{"type": "int", "name": "edgeId"}, {"type": "EdgeIntAccess", "name": "edgeIntAccess"}, {"type": "ReaderWay", "name": "readerWay"}, {"type": "IntsRef", "name": "relationFlags"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CarAverageSpeedParser extends AbstractAverageSpeedParser implements TagParser {\n\n    protected final Map<String, Integer> trackTypeSpeedMap = new HashMap<>();\n    protected final Set<String> badSurfaceSpeedMap = new HashSet<>();\n    // This value determines the maximal possible on roads with bad surfaces\n    private final int badSurfaceSpeed;\n\n    /**\n     * A map which associates string to speed. Get some impression:\n     * http://www.itoworld.com/map/124#fullscreen\n     * http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed\n     */\n    protected final Map<String, Integer> defaultSpeedMap = new HashMap<>();\n\n    public CarAverageSpeedParser(EncodedValueLookup lookup) {\n        this(lookup.getDecimalEncodedValue(VehicleSpeed.key(\"car\")),\n                lookup.getDecimalEncodedValue(FerrySpeed.KEY));\n    }\n\n    public CarAverageSpeedParser(DecimalEncodedValue speedEnc, DecimalEncodedValue ferrySpeed) {\n        super(speedEnc, ferrySpeed);\n\n        badSurfaceSpeedMap.add(\"cobblestone\");\n        badSurfaceSpeedMap.add(\"unhewn_cobblestone\");\n        badSurfaceSpeedMap.add(\"sett\");\n        badSurfaceSpeedMap.add(\"grass_paver\");\n        badSurfaceSpeedMap.add(\"gravel\");\n        badSurfaceSpeedMap.add(\"fine_gravel\");\n        badSurfaceSpeedMap.add(\"pebblestone\");\n        badSurfaceSpeedMap.add(\"sand\");\n        badSurfaceSpeedMap.add(\"paving_stones\");\n        badSurfaceSpeedMap.add(\"dirt\");\n        badSurfaceSpeedMap.add(\"earth\");\n        badSurfaceSpeedMap.add(\"ground\");\n        badSurfaceSpeedMap.add(\"wood\");\n        badSurfaceSpeedMap.add(\"grass\");\n        badSurfaceSpeedMap.add(\"unpaved\");\n        badSurfaceSpeedMap.add(\"compacted\");\n\n        // autobahn\n        defaultSpeedMap.put(\"motorway\", 100);\n        defaultSpeedMap.put(\"motorway_link\", 70);\n        // bundesstra\u00dfe\n        defaultSpeedMap.put(\"trunk\", 70);\n        defaultSpeedMap.put(\"trunk_link\", 65);\n        // linking bigger town\n        defaultSpeedMap.put(\"primary\", 65);\n        defaultSpeedMap.put(\"primary_link\", 60);\n        // linking towns + villages\n        defaultSpeedMap.put(\"secondary\", 60);\n        defaultSpeedMap.put(\"secondary_link\", 50);\n        // streets without middle line separation\n        defaultSpeedMap.put(\"tertiary\", 50);\n        defaultSpeedMap.put(\"tertiary_link\", 40);\n        defaultSpeedMap.put(\"unclassified\", 30);\n        defaultSpeedMap.put(\"residential\", 30);\n        // spielstra\u00dfe\n        defaultSpeedMap.put(\"living_street\", 5);\n        defaultSpeedMap.put(\"service\", 20);\n        // unknown road\n        defaultSpeedMap.put(\"road\", 20);\n        // forestry stuff\n        defaultSpeedMap.put(\"track\", 15);\n\n        trackTypeSpeedMap.put(\"grade1\", 20); // paved\n        trackTypeSpeedMap.put(\"grade2\", 15); // now unpaved - gravel mixed with ...\n        trackTypeSpeedMap.put(\"grade3\", 10); // ... hard and soft materials\n        trackTypeSpeedMap.put(null, defaultSpeedMap.get(\"track\"));\n\n        // limit speed on bad surfaces to 30 km/h\n        badSurfaceSpeed = 30;\n    }\n\n    protected double getSpeed(ReaderWay way) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way) {\n        if (FerrySpeedCalculator.isFerry(way)) {\n            double ferrySpeed = FerrySpeedCalculator.minmax(ferrySpeedEnc.getDecimal(false, edgeId, edgeIntAccess), avgSpeedEnc);\n            setSpeed(false, edgeId, edgeIntAccess, ferrySpeed);\n            if (avgSpeedEnc.isStoreTwoDirections())\n                setSpeed(true, edgeId, edgeIntAccess, ferrySpeed);\n            return;\n        }\n\n        // get assumed speed from highway type\n        double speed = getSpeed(way);\n        speed = applyBadSurfaceSpeed(way, speed);\n\n        setSpeed(false, edgeId, edgeIntAccess, applyMaxSpeed(way, speed, false));\n        setSpeed(true, edgeId, edgeIntAccess, applyMaxSpeed(way, speed, true));\n    }\n\n    /**\n     * @param way   needed to retrieve tags\n     * @param speed speed guessed e.g. from the road type or other tags\n     * @return The assumed speed.\n     */\n    protected double applyMaxSpeed(ReaderWay way, double speed, boolean bwd) {\n        double maxSpeed = getMaxSpeed(way, bwd);\n        return Math.min(140, isValidSpeed(maxSpeed) ? Math.max(1, maxSpeed * 0.9) : speed);\n    }\n\n    /**\n     * @param way   needed to retrieve tags\n     * @param speed speed guessed e.g. from the road type or other tags\n     * @return The assumed speed\n     */\n    protected double applyBadSurfaceSpeed(ReaderWay way, double speed) {\n        // limit speed if bad surface\n        if (badSurfaceSpeed > 0 && isValidSpeed(speed) && speed > badSurfaceSpeed) {\n            String surface = way.getTag(\"surface\", \"\");\n            int colonIndex = surface.indexOf(\":\");\n            if (colonIndex != -1)\n                surface = surface.substring(0, colonIndex);\n            if (badSurfaceSpeedMap.contains(surface))\n                speed = badSurfaceSpeed;\n        }\n        return speed;\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/359", "ground_truth": "\n        String highwayValue = way.getTag(\"highway\", \"\");\n        Integer speed = defaultSpeedMap.get(highwayValue);\n\n        // even inaccessible edges get a speed assigned\n        if (speed == null) speed = 10;\n\n        if (highwayValue.equals(\"track\")) {\n            String tt = way.getTag(\"tracktype\");\n            if (!Helper.isEmpty(tt)) {\n                Integer tInt = trackTypeSpeedMap.get(tt);\n                if (tInt != null)\n                    speed = tInt;\n            }\n        }\n\n        return speed;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "parsers", "CarAverageSpeedParser.java"], "context_start_lineno": 0, "function_name": "getSpeed", "left_context": "class CarAverageSpeedParser extends AbstractAverageSpeedParser implements TagParser {\n\n    protected final Map<String, Integer> trackTypeSpeedMap = new HashMap<>();\n    protected final Set<String> badSurfaceSpeedMap = new HashSet<>();\n    // This value determines the maximal possible on roads with bad surfaces\n    private final int badSurfaceSpeed;\n\n    /**\n     * A map which associates string to speed. Get some impression:\n     * http://www.itoworld.com/map/124#fullscreen\n     * http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed\n     */\n    protected final Map<String, Integer> defaultSpeedMap = new HashMap<>();\n\n    public CarAverageSpeedParser(EncodedValueLookup lookup) {\n        this(lookup.getDecimalEncodedValue(VehicleSpeed.key(\"car\")),\n                lookup.getDecimalEncodedValue(FerrySpeed.KEY));\n    }\n\n    public CarAverageSpeedParser(DecimalEncodedValue speedEnc, DecimalEncodedValue ferrySpeed) {\n        super(speedEnc, ferrySpeed);\n\n        badSurfaceSpeedMap.add(\"cobblestone\");\n        badSurfaceSpeedMap.add(\"unhewn_cobblestone\");\n        badSurfaceSpeedMap.add(\"sett\");\n        badSurfaceSpeedMap.add(\"grass_paver\");\n        badSurfaceSpeedMap.add(\"gravel\");\n        badSurfaceSpeedMap.add(\"fine_gravel\");\n        badSurfaceSpeedMap.add(\"pebblestone\");\n        badSurfaceSpeedMap.add(\"sand\");\n        badSurfaceSpeedMap.add(\"paving_stones\");\n        badSurfaceSpeedMap.add(\"dirt\");\n        badSurfaceSpeedMap.add(\"earth\");\n        badSurfaceSpeedMap.add(\"ground\");\n        badSurfaceSpeedMap.add(\"wood\");\n        badSurfaceSpeedMap.add(\"grass\");\n        badSurfaceSpeedMap.add(\"unpaved\");\n        badSurfaceSpeedMap.add(\"compacted\");\n\n        // autobahn\n        defaultSpeedMap.put(\"motorway\", 100);\n        defaultSpeedMap.put(\"motorway_link\", 70);\n        // bundesstra\u00dfe\n        defaultSpeedMap.put(\"trunk\", 70);\n        defaultSpeedMap.put(\"trunk_link\", 65);\n        // linking bigger town\n        defaultSpeedMap.put(\"primary\", 65);\n        defaultSpeedMap.put(\"primary_link\", 60);\n        // linking towns + villages\n        defaultSpeedMap.put(\"secondary\", 60);\n        defaultSpeedMap.put(\"secondary_link\", 50);\n        // streets without middle line separation\n        defaultSpeedMap.put(\"tertiary\", 50);\n        defaultSpeedMap.put(\"tertiary_link\", 40);\n        defaultSpeedMap.put(\"unclassified\", 30);\n        defaultSpeedMap.put(\"residential\", 30);\n        // spielstra\u00dfe\n        defaultSpeedMap.put(\"living_street\", 5);\n        defaultSpeedMap.put(\"service\", 20);\n        // unknown road\n        defaultSpeedMap.put(\"road\", 20);\n        // forestry stuff\n        defaultSpeedMap.put(\"track\", 15);\n\n        trackTypeSpeedMap.put(\"grade1\", 20); // paved\n        trackTypeSpeedMap.put(\"grade2\", 15); // now unpaved - gravel mixed with ...\n        trackTypeSpeedMap.put(\"grade3\", 10); // ... hard and soft materials\n        trackTypeSpeedMap.put(null, defaultSpeedMap.get(\"track\"));\n\n        // limit speed on bad surfaces to 30 km/h\n        badSurfaceSpeed = 30;\n    }\n\n    protected double getSpeed(ReaderWay way) {", "right_context": "}\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way) {\n        if (FerrySpeedCalculator.isFerry(way)) {\n            double ferrySpeed = FerrySpeedCalculator.minmax(ferrySpeedEnc.getDecimal(false, edgeId, edgeIntAccess), avgSpeedEnc);\n            setSpeed(false, edgeId, edgeIntAccess, ferrySpeed);\n            if (avgSpeedEnc.isStoreTwoDirections())\n                setSpeed(true, edgeId, edgeIntAccess, ferrySpeed);\n            return;\n        }\n\n        // get assumed speed from highway type\n        double speed = getSpeed(way);\n        speed = applyBadSurfaceSpeed(way, speed);\n\n        setSpeed(false, edgeId, edgeIntAccess, applyMaxSpeed(way, speed, false));\n        setSpeed(true, edgeId, edgeIntAccess, applyMaxSpeed(way, speed, true));\n    }\n\n    /**\n     * @param way   needed to retrieve tags\n     * @param speed speed guessed e.g. from the road type or other tags\n     * @return The assumed speed.\n     */\n    protected double applyMaxSpeed(ReaderWay way, double speed, boolean bwd) {\n        double maxSpeed = getMaxSpeed(way, bwd);\n        return Math.min(140, isValidSpeed(maxSpeed) ? Math.max(1, maxSpeed * 0.9) : speed);\n    }\n\n    /**\n     * @param way   needed to retrieve tags\n     * @param speed speed guessed e.g. from the road type or other tags\n     * @return The assumed speed\n     */\n    protected double applyBadSurfaceSpeed(ReaderWay way, double speed) {\n        // limit speed if bad surface\n        if (badSurfaceSpeed > 0 && isValidSpeed(speed) && speed > badSurfaceSpeed) {\n            String surface = way.getTag(\"surface\", \"\");\n            int colonIndex = surface.indexOf(\":\");\n            if (colonIndex != -1)\n                surface = surface.substring(0, colonIndex);\n            if (badSurfaceSpeedMap.contains(surface))\n                speed = badSurfaceSpeed;\n        }\n        return speed;\n    }\n}", "class_name": "CarAverageSpeedParser", "return_type": "double", "parameters": [{"type": "ReaderWay", "name": "way"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/EncodedValueLookup.java\n// --------------------------------------------------\n// DecimalEncodedValue getDecimalEncodedValue(String key);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java\n// --------------------------------------------------\n// @Override public DecimalEncodedValue getDecimalEncodedValue(String key){\n//   return getEncodedValue(key,DecimalEncodedValue.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java\n// --------------------------------------------------\n// public DecimalEncodedValue getTurnDecimalEncodedValue(String key){\n//   return getTurnEncodedValue(key,DecimalEncodedValue.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/MaxSpeedCalculator.java\n// --------------------------------------------------\n// DecimalEncodedValue getRuralMaxSpeedEnc(){\n//   return ruralMaxSpeedEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/MaxSpeedCalculator.java\n// --------------------------------------------------\n// public DecimalEncodedValue getUrbanMaxSpeedEnc(){\n//   return urbanMaxSpeedEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/parsers/AbstractAverageSpeedParser.java\n// --------------------------------------------------\n// public final DecimalEncodedValue getAverageSpeedEnc(){\n//   return avgSpeedEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonPriorityParser.java\n// --------------------------------------------------\n// public final DecimalEncodedValue getPriorityEnc(){\n//   return priorityEnc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/AverageSlope.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,5,0,1,true,false,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/Curvature.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,4,0.25,0.05,false,false,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/FerrySpeed.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,5,2,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxAxleLoad.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.5 to max=0.5*2\u2077 tons and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value. To save bits it might make more sense to store only a few values like it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.5,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxHeight.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxLength.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxSlope.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,5,0,1,true,false,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxSpeed.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,2,false,true,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxWeight.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2078 tons and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value. To save bits it might make more sense to store only a few values like it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,8,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/MaxWidth.java\n// --------------------------------------------------\n// /** \n//  * Currently enables to store 0.1 to max=0.1*2\u2077m and infinity. If a value is between the maximum and infinity it is assumed to use the maximum value.\n//  */\n// public static DecimalEncodedValue create(){\n//   return new DecimalEncodedValueImpl(KEY,7,0,0.1,false,false,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/VehiclePriority.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(String name,int speedBits,double speedFactor,boolean storeTwoDirections){\n//   return new DecimalEncodedValueImpl(key(name),speedBits,speedFactor,storeTwoDirections);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/ev/VehicleSpeed.java\n// --------------------------------------------------\n// public static DecimalEncodedValue create(String name,int speedBits,double speedFactor,boolean storeTwoDirections){\n//   return new DecimalEncodedValueImpl(key(name),speedBits,speedFactor,storeTwoDirections);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TurnCost {\n\n    public static String key(String prefix) {\n        return getKey(prefix, \"turn_cost\");\n    }\n\n    /**\n     * This creates an EncodedValue specifically for the turn costs\n     */\n    public static DecimalEncodedValue create(String name, int maxTurnCosts) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/363", "ground_truth": "\n        int turnBits = BitUtil.countBitValue(maxTurnCosts);\n        return new DecimalEncodedValueImpl(key(name), turnBits, 0, 1, false, false, true);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "ev", "TurnCost.java"], "context_start_lineno": 0, "function_name": "create", "left_context": "class TurnCost {\n\n    public static String key(String prefix) {\n        return getKey(prefix, \"turn_cost\");\n    }\n\n    /**\n     * This creates an EncodedValue specifically for the turn costs\n     */\n    public static DecimalEncodedValue create(String name, int maxTurnCosts) {", "right_context": "}\n}", "class_name": "TurnCost", "return_type": "DecimalEncodedValue", "parameters": [{"type": "String", "name": "name"}, {"type": "int", "name": "maxTurnCosts"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/reader/dem/AbstractTiffElevationProvider.java\n// --------------------------------------------------\n// abstract Raster readFile(File file,String tifName);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/reader/dem/GMTEDProvider.java\n// --------------------------------------------------\n// @Override Raster readFile(File file,String tifName){\n//   SeekableStream ss=null;\n//   try {\n//     InputStream is=new FileInputStream(file);\n//     ss=SeekableStream.wrapInputStream(is,true);\n//     TIFFImageDecoder imageDecoder=new TIFFImageDecoder(ss,new TIFFDecodeParam());\n//     return imageDecoder.decodeAsRaster();\n//   }\n//  catch (  Exception e) {\n//     throw new RuntimeException(\"Can't decode \" + file.getName(),e);\n//   }\n//  finally {\n//     if (ss != null)     close(ss);\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CGIARProvider extends AbstractTiffElevationProvider {\n    private final double invPrecision = 1 / precision;\n\n    public CGIARProvider() {\n        this(\"\");\n    }\n\n    public CGIARProvider(String cacheDir) {\n        // Alternative URLs for the CGIAR data can be found in #346\n        super(\"https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/\",\n                cacheDir.isEmpty() ? \"/tmp/cgiar\" : cacheDir,\n                \"GraphHopper CGIARReader\",\n                6000, 6000,\n                5, 5);\n    }\n\n    public static void main(String[] args) {\n        CGIARProvider provider = new CGIARProvider();\n\n        System.out.println(provider.getEle(46, -20));\n\n        // 337.0\n        System.out.println(provider.getEle(49.949784, 11.57517));\n        // 466.0\n        System.out.println(provider.getEle(49.968668, 11.575127));\n        // 455.0\n        System.out.println(provider.getEle(49.968682, 11.574842));\n\n        // 3134\n        System.out.println(provider.getEle(-22.532854, -65.110474));\n\n        // 120\n        System.out.println(provider.getEle(38.065392, -87.099609));\n\n        // 1615\n        System.out.println(provider.getEle(40, -105.2277023));\n        System.out.println(provider.getEle(39.99999999, -105.2277023));\n        System.out.println(provider.getEle(39.9999999, -105.2277023));\n        // 1616\n        System.out.println(provider.getEle(39.999999, -105.2277023));\n\n        // 0\n        System.out.println(provider.getEle(29.840644, -42.890625));\n\n        // 841\n        System.out.println(provider.getEle(48.469123, 9.576393));\n    }\n\n    @Override\n    Raster readFile(File file, String tifName) {<FILL_FUNCTION_BODY>}\n\n    int down(double val) {\n        // 'rounding' to closest 5\n        int intVal = (int) (val / LAT_DEGREE) * LAT_DEGREE;\n        if (!(val >= 0 || intVal - val < invPrecision))\n            intVal = intVal - LAT_DEGREE;\n\n        return intVal;\n    }\n\n    @Override\n    boolean isOutsideSupportedArea(double lat, double lon) {\n        return lat >= 60 || lat <= -56;\n    }\n\n    protected String getFileName(double lat, double lon) {\n        lon = 1 + (180 + lon) / LAT_DEGREE;\n        int lonInt = (int) lon;\n        lat = 1 + (60 - lat) / LAT_DEGREE;\n        int latInt = (int) lat;\n\n        if (Math.abs(latInt - lat) < invPrecision / LAT_DEGREE)\n            latInt--;\n\n        // replace String.format as it seems to be slow\n        // String.format(\"srtm_%02d_%02d\", lonInt, latInt);\n        String str = \"srtm_\";\n        str += lonInt < 10 ? \"0\" : \"\";\n        str += lonInt;\n        str += latInt < 10 ? \"_0\" : \"_\";\n        str += latInt;\n\n        return str;\n    }\n\n    @Override\n    int getMinLatForTile(double lat) {\n        return down(lat);\n    }\n\n    @Override\n    int getMinLonForTile(double lon) {\n        return down(lon);\n    }\n\n    @Override\n    String getDownloadURL(double lat, double lon) {\n        return baseUrl + \"/\" + getFileName(lat, lon) + \".zip\";\n    }\n\n    @Override\n    String getFileNameOfLocalFile(double lat, double lon) {\n        return getDownloadURL(lat, lon);\n    }\n\n    @Override\n    public String toString() {\n        return \"cgiar\";\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/381", "ground_truth": "\n        SeekableStream ss = null;\n        try {\n            InputStream is = new FileInputStream(file);\n            ZipInputStream zis = new ZipInputStream(is);\n            // find tif file in zip\n            ZipEntry entry = zis.getNextEntry();\n            while (entry != null && !entry.getName().equals(tifName)) {\n                entry = zis.getNextEntry();\n            }\n\n            ss = SeekableStream.wrapInputStream(zis, true);\n            TIFFImageDecoder imageDecoder = new TIFFImageDecoder(ss, new TIFFDecodeParam());\n            return imageDecoder.decodeAsRaster();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Can't decode \" + tifName, e);\n        } finally {\n            if (ss != null)\n                Helper.close(ss);\n        }\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "reader", "dem", "CGIARProvider.java"], "context_start_lineno": 0, "function_name": "readFile", "left_context": "class CGIARProvider extends AbstractTiffElevationProvider {\n    private final double invPrecision = 1 / precision;\n\n    public CGIARProvider() {\n        this(\"\");\n    }\n\n    public CGIARProvider(String cacheDir) {\n        // Alternative URLs for the CGIAR data can be found in #346\n        super(\"https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/\",\n                cacheDir.isEmpty() ? \"/tmp/cgiar\" : cacheDir,\n                \"GraphHopper CGIARReader\",\n                6000, 6000,\n                5, 5);\n    }\n\n    public static void main(String[] args) {\n        CGIARProvider provider = new CGIARProvider();\n\n        System.out.println(provider.getEle(46, -20));\n\n        // 337.0\n        System.out.println(provider.getEle(49.949784, 11.57517));\n        // 466.0\n        System.out.println(provider.getEle(49.968668, 11.575127));\n        // 455.0\n        System.out.println(provider.getEle(49.968682, 11.574842));\n\n        // 3134\n        System.out.println(provider.getEle(-22.532854, -65.110474));\n\n        // 120\n        System.out.println(provider.getEle(38.065392, -87.099609));\n\n        // 1615\n        System.out.println(provider.getEle(40, -105.2277023));\n        System.out.println(provider.getEle(39.99999999, -105.2277023));\n        System.out.println(provider.getEle(39.9999999, -105.2277023));\n        // 1616\n        System.out.println(provider.getEle(39.999999, -105.2277023));\n\n        // 0\n        System.out.println(provider.getEle(29.840644, -42.890625));\n\n        // 841\n        System.out.println(provider.getEle(48.469123, 9.576393));\n    }\n\n    @Override\n    Raster readFile(File file, String tifName) {", "right_context": "}\n\n    int down(double val) {\n        // 'rounding' to closest 5\n        int intVal = (int) (val / LAT_DEGREE) * LAT_DEGREE;\n        if (!(val >= 0 || intVal - val < invPrecision))\n            intVal = intVal - LAT_DEGREE;\n\n        return intVal;\n    }\n\n    @Override\n    boolean isOutsideSupportedArea(double lat, double lon) {\n        return lat >= 60 || lat <= -56;\n    }\n\n    protected String getFileName(double lat, double lon) {\n        lon = 1 + (180 + lon) / LAT_DEGREE;\n        int lonInt = (int) lon;\n        lat = 1 + (60 - lat) / LAT_DEGREE;\n        int latInt = (int) lat;\n\n        if (Math.abs(latInt - lat) < invPrecision / LAT_DEGREE)\n            latInt--;\n\n        // replace String.format as it seems to be slow\n        // String.format(\"srtm_%02d_%02d\", lonInt, latInt);\n        String str = \"srtm_\";\n        str += lonInt < 10 ? \"0\" : \"\";\n        str += lonInt;\n        str += latInt < 10 ? \"_0\" : \"_\";\n        str += latInt;\n\n        return str;\n    }\n\n    @Override\n    int getMinLatForTile(double lat) {\n        return down(lat);\n    }\n\n    @Override\n    int getMinLonForTile(double lon) {\n        return down(lon);\n    }\n\n    @Override\n    String getDownloadURL(double lat, double lon) {\n        return baseUrl + \"/\" + getFileName(lat, lon) + \".zip\";\n    }\n\n    @Override\n    String getFileNameOfLocalFile(double lat, double lon) {\n        return getDownloadURL(lat, lon);\n    }\n\n    @Override\n    public String toString() {\n        return \"cgiar\";\n    }\n}", "class_name": "CGIARProvider", "return_type": "Raster", "parameters": [{"type": "File", "name": "file"}, {"type": "String", "name": "tifName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StateParser implements TagParser {\n    private final EnumEncodedValue<State> stateEnc;\n\n    public StateParser(EnumEncodedValue<State> stateEnc) {\n        this.stateEnc = stateEnc;\n    }\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way, IntsRef relationFlags) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/404", "ground_truth": "\n        State country = way.getTag(\"country_state\", State.MISSING);\n        stateEnc.setEnum(false, edgeId, edgeIntAccess, country);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "parsers", "StateParser.java"], "context_start_lineno": 0, "function_name": "handleWayTags", "left_context": "class StateParser implements TagParser {\n    private final EnumEncodedValue<State> stateEnc;\n\n    public StateParser(EnumEncodedValue<State> stateEnc) {\n        this.stateEnc = stateEnc;\n    }\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way, IntsRef relationFlags) {", "right_context": "}\n}", "class_name": "StateParser", "return_type": "void", "parameters": [{"type": "int", "name": "edgeId"}, {"type": "EdgeIntAccess", "name": "edgeIntAccess"}, {"type": "ReaderWay", "name": "way"}, {"type": "IntsRef", "name": "relationFlags"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractRoutingAlgorithm implements RoutingAlgorithm {\n    protected final Graph graph;\n    protected final Weighting weighting;\n    protected final TraversalMode traversalMode;\n    protected final NodeAccess nodeAccess;\n    protected final EdgeExplorer edgeExplorer;\n    protected int maxVisitedNodes = Integer.MAX_VALUE;\n    protected long timeoutMillis = Long.MAX_VALUE;\n    private long finishTimeMillis = Long.MAX_VALUE;\n    private boolean alreadyRun;\n\n    /**\n     * @param graph         specifies the graph where this algorithm will run on\n     * @param weighting     set the used weight calculation (e.g. fastest, shortest).\n     * @param traversalMode how the graph is traversed e.g. if via nodes or edges.\n     */\n    public AbstractRoutingAlgorithm(Graph graph, Weighting weighting, TraversalMode traversalMode) {\n        if (weighting.hasTurnCosts() && !traversalMode.isEdgeBased())\n            throw new IllegalStateException(\"Weightings supporting turn costs cannot be used with node-based traversal mode\");\n        this.weighting = weighting;\n        this.traversalMode = traversalMode;\n        this.graph = graph;\n        this.nodeAccess = graph.getNodeAccess();\n        edgeExplorer = graph.createEdgeExplorer();\n    }\n\n    @Override\n    public void setMaxVisitedNodes(int numberOfNodes) {\n        this.maxVisitedNodes = numberOfNodes;\n    }\n\n    @Override\n    public void setTimeoutMillis(long timeoutMillis) {\n        this.timeoutMillis = timeoutMillis;\n    }\n\n    protected boolean accept(EdgeIteratorState iter, int prevOrNextEdgeId) {<FILL_FUNCTION_BODY>}\n\n    protected void checkAlreadyRun() {\n        if (alreadyRun)\n            throw new IllegalStateException(\"Create a new instance per call\");\n\n        alreadyRun = true;\n    }\n\n    protected void setupFinishTime() {\n        try {\n            this.finishTimeMillis = Math.addExact(System.currentTimeMillis(), timeoutMillis);\n        } catch (ArithmeticException e) {\n            this.finishTimeMillis = Long.MAX_VALUE;\n        }\n    }\n\n    @Override\n    public List<Path> calcPaths(int from, int to) {\n        return Collections.singletonList(calcPath(from, to));\n    }\n\n    protected Path createEmptyPath() {\n        return new Path(graph);\n    }\n\n    @Override\n    public String getName() {\n        return getClass().getSimpleName();\n    }\n\n    @Override\n    public String toString() {\n        return getName() + \"|\" + weighting;\n    }\n\n    protected boolean isMaxVisitedNodesExceeded() {\n        return maxVisitedNodes < getVisitedNodes();\n    }\n\n    protected boolean isTimeoutExceeded() {\n        return finishTimeMillis < Long.MAX_VALUE && System.currentTimeMillis() > finishTimeMillis;\n    }\n\n}", "metadata": {"task_id": "graphhopper_graphhopper/417", "ground_truth": "\n        // for edge-based traversal we leave it for TurnWeighting to decide whether or not a u-turn is acceptable,\n        // but for node-based traversal we exclude such a turn for performance reasons already here\n        return traversalMode.isEdgeBased() || iter.getEdge() != prevOrNextEdgeId;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "AbstractRoutingAlgorithm.java"], "context_start_lineno": 0, "function_name": "accept", "left_context": "class AbstractRoutingAlgorithm implements RoutingAlgorithm {\n    protected final Graph graph;\n    protected final Weighting weighting;\n    protected final TraversalMode traversalMode;\n    protected final NodeAccess nodeAccess;\n    protected final EdgeExplorer edgeExplorer;\n    protected int maxVisitedNodes = Integer.MAX_VALUE;\n    protected long timeoutMillis = Long.MAX_VALUE;\n    private long finishTimeMillis = Long.MAX_VALUE;\n    private boolean alreadyRun;\n\n    /**\n     * @param graph         specifies the graph where this algorithm will run on\n     * @param weighting     set the used weight calculation (e.g. fastest, shortest).\n     * @param traversalMode how the graph is traversed e.g. if via nodes or edges.\n     */\n    public AbstractRoutingAlgorithm(Graph graph, Weighting weighting, TraversalMode traversalMode) {\n        if (weighting.hasTurnCosts() && !traversalMode.isEdgeBased())\n            throw new IllegalStateException(\"Weightings supporting turn costs cannot be used with node-based traversal mode\");\n        this.weighting = weighting;\n        this.traversalMode = traversalMode;\n        this.graph = graph;\n        this.nodeAccess = graph.getNodeAccess();\n        edgeExplorer = graph.createEdgeExplorer();\n    }\n\n    @Override\n    public void setMaxVisitedNodes(int numberOfNodes) {\n        this.maxVisitedNodes = numberOfNodes;\n    }\n\n    @Override\n    public void setTimeoutMillis(long timeoutMillis) {\n        this.timeoutMillis = timeoutMillis;\n    }\n\n    protected boolean accept(EdgeIteratorState iter, int prevOrNextEdgeId) {", "right_context": "}\n\n    protected void checkAlreadyRun() {\n        if (alreadyRun)\n            throw new IllegalStateException(\"Create a new instance per call\");\n\n        alreadyRun = true;\n    }\n\n    protected void setupFinishTime() {\n        try {\n            this.finishTimeMillis = Math.addExact(System.currentTimeMillis(), timeoutMillis);\n        } catch (ArithmeticException e) {\n            this.finishTimeMillis = Long.MAX_VALUE;\n        }\n    }\n\n    @Override\n    public List<Path> calcPaths(int from, int to) {\n        return Collections.singletonList(calcPath(from, to));\n    }\n\n    protected Path createEmptyPath() {\n        return new Path(graph);\n    }\n\n    @Override\n    public String getName() {\n        return getClass().getSimpleName();\n    }\n\n    @Override\n    public String toString() {\n        return getName() + \"|\" + weighting;\n    }\n\n    protected boolean isMaxVisitedNodesExceeded() {\n        return maxVisitedNodes < getVisitedNodes();\n    }\n\n    protected boolean isTimeoutExceeded() {\n        return finishTimeMillis < Long.MAX_VALUE && System.currentTimeMillis() > finishTimeMillis;\n    }\n\n}", "class_name": "AbstractRoutingAlgorithm", "return_type": "boolean", "parameters": [{"type": "EdgeIteratorState", "name": "iter"}, {"type": "int", "name": "prevOrNextEdgeId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/JerseyCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LatviaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK || roadClass == RoadClass.PRIMARY) {\n//     return Toll.HGV;\n//   }\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LiechtensteinCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LithuaniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK || roadClass == RoadClass.PRIMARY) {\n//     return Toll.HGV;\n//   }\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/LuxembourgCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/MaltaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/MonacoCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/NetherlandsCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/PolandCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/PortugalCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/RomaniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (roadClass == RoadClass.MOTORWAY || roadClass == RoadClass.TRUNK)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/RomaniaSpatialRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n// case PRIMARY:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SerbiaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SlovakiaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SloveniaCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SpainCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.ALL;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwedenCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (RoadClass.MOTORWAY == roadClass)   return Toll.HGV;\n//   return currentToll;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwitzerlandCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   RoadClass roadClass=RoadClass.find(readerWay.getTag(\"highway\",\"\"));\n//   if (currentToll != null)   return currentToll;\n// switch (roadClass) {\n// case MOTORWAY:\n// case TRUNK:\n//     return Toll.ALL;\n// default :\n//   return currentToll;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/UkraineCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// graphhopper/core/src/main/java/com/graphhopper/routing/util/countryrules/europe/VaticanCityCountryRule.java\n// --------------------------------------------------\n// @Override public Toll getToll(ReaderWay readerWay,Toll currentToll){\n//   if (currentToll != Toll.MISSING) {\n//     return currentToll;\n//   }\n//   return Toll.NO;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SanMarinoCountryRule implements CountryRule {\n\n    @Override\n    public Toll getToll(ReaderWay readerWay, Toll currentToll) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "graphhopper_graphhopper/428", "ground_truth": "\n        if (currentToll != Toll.MISSING) {\n            return currentToll;\n        }\n\n        return Toll.NO;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "countryrules", "europe", "SanMarinoCountryRule.java"], "context_start_lineno": 0, "function_name": "getToll", "left_context": "class SanMarinoCountryRule implements CountryRule {\n\n    @Override\n    public Toll getToll(ReaderWay readerWay, Toll currentToll) {", "right_context": "}\n}", "class_name": "SanMarinoCountryRule", "return_type": "Toll", "parameters": [{"type": "ReaderWay", "name": "readerWay"}, {"type": "Toll", "name": "currentToll"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PbfDecoder {\n    private final PbfStreamSplitter streamSplitter;\n    private final ExecutorService executorService;\n    private final int maxPendingBlobs;\n    private final Sink sink;\n    private final Lock lock;\n    private final Condition dataWaitCondition;\n    private final Queue<PbfBlobResult> blobResults;\n    private final SkipOptions skipOptions;\n\n    /**\n     * Creates a new instance.\n     * <p>\n     *\n     * @param streamSplitter  The PBF stream splitter providing the source of blobs to be decoded.\n     * @param executorService The executor service managing the thread pool.\n     * @param maxPendingBlobs The maximum number of blobs to have in progress at any point in time.\n     * @param sink            The sink to send all decoded entities to.\n     */\n    public PbfDecoder(PbfStreamSplitter streamSplitter, ExecutorService executorService, int maxPendingBlobs,\n                      Sink sink, SkipOptions skipOptions) {\n        this.streamSplitter = streamSplitter;\n        this.executorService = executorService;\n        this.maxPendingBlobs = maxPendingBlobs;\n        this.sink = sink;\n        this.skipOptions = skipOptions;\n\n        // Create the thread synchronisation primitives.\n        lock = new ReentrantLock();\n        dataWaitCondition = lock.newCondition();\n\n        // Create the queue of blobs being decoded.\n        blobResults = new LinkedList<>();\n    }\n\n    /**\n     * Any thread can call this method when they wish to wait until an update has been performed by\n     * another thread.\n     */\n    private void waitForUpdate() {\n        try {\n            dataWaitCondition.await();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"Thread was interrupted.\", e);\n        }\n    }\n\n    /**\n     * Any thread can call this method when they wish to signal another thread that an update has\n     * occurred.\n     */\n    private void signalUpdate() {\n        dataWaitCondition.signal();\n    }\n\n    private void sendResultsToSink(int targetQueueSize) {\n        while (blobResults.size() > targetQueueSize) {\n            // Get the next result from the queue and wait for it to complete.\n            PbfBlobResult blobResult = blobResults.remove();\n            while (!blobResult.isComplete()) {\n                // The thread hasn't finished processing yet so wait for an\n                // update from another thread before checking again.\n                waitForUpdate();\n            }\n\n            if (!blobResult.isSuccess()) {\n                throw new RuntimeException(\"A PBF decoding worker thread failed, aborting.\", blobResult.getException());\n            }\n\n            // Send the processed entities to the sink. We can release the lock\n            // for the duration of processing to allow worker threads to post\n            // their results.\n            lock.unlock();\n            try {\n                for (ReaderElement entity : blobResult.getEntities()) {\n                    sink.process(entity);\n                }\n            } finally {\n                lock.lock();\n            }\n        }\n    }\n\n    private void processBlobs() {<FILL_FUNCTION_BODY>}\n\n    public void run() {\n        lock.lock();\n        try {\n            processBlobs();\n\n        } finally {\n            lock.unlock();\n        }\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/430", "ground_truth": "\n        // Process until the PBF stream is exhausted.\n        while (streamSplitter.hasNext()) {\n            // Obtain the next raw blob from the PBF stream.\n            PbfRawBlob rawBlob = streamSplitter.next();\n\n            // Create the result object to capture the results of the decoded\n            // blob and add it to the blob results queue.\n            final PbfBlobResult blobResult = new PbfBlobResult();\n            blobResults.add(blobResult);\n\n            // Create the listener object that will update the blob results\n            // based on an event fired by the blob decoder.\n            PbfBlobDecoderListener decoderListener = new PbfBlobDecoderListener() {\n                @Override\n                public void error(Exception ex) {\n                    lock.lock();\n                    try {\n                        // System.out.println(\"ERROR: \" + new Date());\n                        blobResult.storeFailureResult(ex);\n                        signalUpdate();\n\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n\n                @Override\n                public void complete(List<ReaderElement> decodedEntities) {\n                    lock.lock();\n                    try {\n                        blobResult.storeSuccessResult(decodedEntities);\n                        signalUpdate();\n\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            };\n\n            // Create the blob decoder itself and execute it on a worker thread.\n            PbfBlobDecoder blobDecoder = new PbfBlobDecoder(rawBlob.getType(), rawBlob.getData(), decoderListener, skipOptions);\n            executorService.execute(blobDecoder);\n\n            // If the number of pending blobs has reached capacity we must begin\n            // sending results to the sink. This method will block until blob\n            // decoding is complete.\n            sendResultsToSink(maxPendingBlobs - 1);\n        }\n\n        // There are no more entities available in the PBF stream, so send all remaining data to the sink.\n        sendResultsToSink(0);\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "reader", "osm", "pbf", "PbfDecoder.java"], "context_start_lineno": 0, "function_name": "processBlobs", "left_context": "class PbfDecoder {\n    private final PbfStreamSplitter streamSplitter;\n    private final ExecutorService executorService;\n    private final int maxPendingBlobs;\n    private final Sink sink;\n    private final Lock lock;\n    private final Condition dataWaitCondition;\n    private final Queue<PbfBlobResult> blobResults;\n    private final SkipOptions skipOptions;\n\n    /**\n     * Creates a new instance.\n     * <p>\n     *\n     * @param streamSplitter  The PBF stream splitter providing the source of blobs to be decoded.\n     * @param executorService The executor service managing the thread pool.\n     * @param maxPendingBlobs The maximum number of blobs to have in progress at any point in time.\n     * @param sink            The sink to send all decoded entities to.\n     */\n    public PbfDecoder(PbfStreamSplitter streamSplitter, ExecutorService executorService, int maxPendingBlobs,\n                      Sink sink, SkipOptions skipOptions) {\n        this.streamSplitter = streamSplitter;\n        this.executorService = executorService;\n        this.maxPendingBlobs = maxPendingBlobs;\n        this.sink = sink;\n        this.skipOptions = skipOptions;\n\n        // Create the thread synchronisation primitives.\n        lock = new ReentrantLock();\n        dataWaitCondition = lock.newCondition();\n\n        // Create the queue of blobs being decoded.\n        blobResults = new LinkedList<>();\n    }\n\n    /**\n     * Any thread can call this method when they wish to wait until an update has been performed by\n     * another thread.\n     */\n    private void waitForUpdate() {\n        try {\n            dataWaitCondition.await();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"Thread was interrupted.\", e);\n        }\n    }\n\n    /**\n     * Any thread can call this method when they wish to signal another thread that an update has\n     * occurred.\n     */\n    private void signalUpdate() {\n        dataWaitCondition.signal();\n    }\n\n    private void sendResultsToSink(int targetQueueSize) {\n        while (blobResults.size() > targetQueueSize) {\n            // Get the next result from the queue and wait for it to complete.\n            PbfBlobResult blobResult = blobResults.remove();\n            while (!blobResult.isComplete()) {\n                // The thread hasn't finished processing yet so wait for an\n                // update from another thread before checking again.\n                waitForUpdate();\n            }\n\n            if (!blobResult.isSuccess()) {\n                throw new RuntimeException(\"A PBF decoding worker thread failed, aborting.\", blobResult.getException());\n            }\n\n            // Send the processed entities to the sink. We can release the lock\n            // for the duration of processing to allow worker threads to post\n            // their results.\n            lock.unlock();\n            try {\n                for (ReaderElement entity : blobResult.getEntities()) {\n                    sink.process(entity);\n                }\n            } finally {\n                lock.lock();\n            }\n        }\n    }\n\n    private void processBlobs() {", "right_context": "}\n\n    public void run() {\n        lock.lock();\n        try {\n            processBlobs();\n\n        } finally {\n            lock.unlock();\n        }\n    }\n}", "class_name": "PbfDecoder", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NodeBasedWitnessPathSearcher {\n    private final PrepareGraphEdgeExplorer outEdgeExplorer;\n    private final double[] weights;\n    private final IntArrayList changedNodes;\n    private final IntFloatBinaryHeap heap;\n    private int ignoreNode = -1;\n    private int settledNodes = 0;\n\n    public NodeBasedWitnessPathSearcher(CHPreparationGraph graph) {\n        outEdgeExplorer = graph.createOutEdgeExplorer();\n        weights = new double[graph.getNodes()];\n        Arrays.fill(weights, Double.POSITIVE_INFINITY);\n        heap = new IntFloatBinaryHeap(1000);\n        changedNodes = new IntArrayList();\n    }\n\n    /**\n     * Sets up a search for given start node and an ignored node. The shortest path tree will be re-used for different\n     * target nodes until this method is called again.\n     */\n    public void init(int startNode, int ignoreNode) {\n        reset();\n        this.ignoreNode = ignoreNode;\n        weights[startNode] = 0;\n        changedNodes.add(startNode);\n        heap.insert(0, startNode);\n    }\n\n    /**\n     * Runs or continues a Dijkstra search starting at the startNode and ignoring the ignoreNode given in init().\n     * If the shortest path is found we return its weight. However, this method also returns early if any path was\n     * found for which the weight is below or equal to the given acceptedWeight, or the given maximum number of settled\n     * nodes is exceeded. In these cases the returned weight can be larger than the actual weight of the shortest path.\n     * In any case we get an upper bound for the real shortest path weight.\n     *\n     * @param targetNode      the target of the search. if this node is settled we return the weight of the shortest path\n     * @param acceptedWeight  once we find a path with weight smaller than or equal to this we return the weight. the\n     *                        returned weight might be larger than the weight of the real shortest path. if there is\n     *                        no path with weight smaller than or equal to this we stop the search and return the best\n     *                        path we found.\n     * @param maxSettledNodes once the number of settled nodes exceeds this number we return the currently found best\n     *                        weight path. in this case we might not have found a path at all.\n     * @return the weight of the found path or {@link Double#POSITIVE_INFINITY} if no path was found\n     */\n    public double findUpperBound(int targetNode, double acceptedWeight, int maxSettledNodes) {<FILL_FUNCTION_BODY>}\n\n    public int getSettledNodes() {\n        return settledNodes;\n    }\n\n    private void reset() {\n        for (IntCursor c : changedNodes)\n            weights[c.value] = Double.POSITIVE_INFINITY;\n        changedNodes.elementsCount = 0;\n        heap.clear();\n        ignoreNode = -1;\n        settledNodes = 0;\n    }\n\n    /**\n     * @return currently used memory in MB (approximately)\n     */\n    public String getMemoryUsageAsString() {\n        return (8L * weights.length\n                + changedNodes.buffer.length * 4L\n                + heap.getMemoryUsage()\n        ) / Helper.MB + \"MB\";\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/452", "ground_truth": "\n        // todo: for historic reasons we count the number of settled nodes for each call of this method\n        //       *not* the total number of settled nodes since starting the search (which corresponds\n        //       to the size of the settled part of the shortest path tree). it's probably worthwhile\n        //       to change this in the future.\n        while (!heap.isEmpty() && settledNodes < maxSettledNodes && heap.peekKey() <= acceptedWeight) {\n            if (weights[targetNode] <= acceptedWeight)\n                // we found *a* path to the target node (not necessarily the shortest), and the weight is acceptable, so we stop\n                return weights[targetNode];\n            int node = heap.poll();\n            PrepareGraphEdgeIterator iter = outEdgeExplorer.setBaseNode(node);\n            while (iter.next()) {\n                int adjNode = iter.getAdjNode();\n                if (adjNode == ignoreNode)\n                    continue;\n                double weight = weights[node] + iter.getWeight();\n                if (Double.isInfinite(weight))\n                    continue;\n                double adjWeight = weights[adjNode];\n                if (adjWeight == Double.POSITIVE_INFINITY) {\n                    weights[adjNode] = weight;\n                    heap.insert(weight, adjNode);\n                    changedNodes.add(adjNode);\n                } else if (weight < adjWeight) {\n                    weights[adjNode] = weight;\n                    heap.update(weight, adjNode);\n                }\n            }\n            settledNodes++;\n            if (node == targetNode)\n                // we have settled the target node, we now know the exact weight of the shortest path and return\n                return weights[node];\n        }\n\n        return weights[targetNode];\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "ch", "NodeBasedWitnessPathSearcher.java"], "context_start_lineno": 0, "function_name": "findUpperBound", "left_context": "class NodeBasedWitnessPathSearcher {\n    private final PrepareGraphEdgeExplorer outEdgeExplorer;\n    private final double[] weights;\n    private final IntArrayList changedNodes;\n    private final IntFloatBinaryHeap heap;\n    private int ignoreNode = -1;\n    private int settledNodes = 0;\n\n    public NodeBasedWitnessPathSearcher(CHPreparationGraph graph) {\n        outEdgeExplorer = graph.createOutEdgeExplorer();\n        weights = new double[graph.getNodes()];\n        Arrays.fill(weights, Double.POSITIVE_INFINITY);\n        heap = new IntFloatBinaryHeap(1000);\n        changedNodes = new IntArrayList();\n    }\n\n    /**\n     * Sets up a search for given start node and an ignored node. The shortest path tree will be re-used for different\n     * target nodes until this method is called again.\n     */\n    public void init(int startNode, int ignoreNode) {\n        reset();\n        this.ignoreNode = ignoreNode;\n        weights[startNode] = 0;\n        changedNodes.add(startNode);\n        heap.insert(0, startNode);\n    }\n\n    /**\n     * Runs or continues a Dijkstra search starting at the startNode and ignoring the ignoreNode given in init().\n     * If the shortest path is found we return its weight. However, this method also returns early if any path was\n     * found for which the weight is below or equal to the given acceptedWeight, or the given maximum number of settled\n     * nodes is exceeded. In these cases the returned weight can be larger than the actual weight of the shortest path.\n     * In any case we get an upper bound for the real shortest path weight.\n     *\n     * @param targetNode      the target of the search. if this node is settled we return the weight of the shortest path\n     * @param acceptedWeight  once we find a path with weight smaller than or equal to this we return the weight. the\n     *                        returned weight might be larger than the weight of the real shortest path. if there is\n     *                        no path with weight smaller than or equal to this we stop the search and return the best\n     *                        path we found.\n     * @param maxSettledNodes once the number of settled nodes exceeds this number we return the currently found best\n     *                        weight path. in this case we might not have found a path at all.\n     * @return the weight of the found path or {@link Double#POSITIVE_INFINITY} if no path was found\n     */\n    public double findUpperBound(int targetNode, double acceptedWeight, int maxSettledNodes) {", "right_context": "}\n\n    public int getSettledNodes() {\n        return settledNodes;\n    }\n\n    private void reset() {\n        for (IntCursor c : changedNodes)\n            weights[c.value] = Double.POSITIVE_INFINITY;\n        changedNodes.elementsCount = 0;\n        heap.clear();\n        ignoreNode = -1;\n        settledNodes = 0;\n    }\n\n    /**\n     * @return currently used memory in MB (approximately)\n     */\n    public String getMemoryUsageAsString() {\n        return (8L * weights.length\n                + changedNodes.buffer.length * 4L\n                + heap.getMemoryUsage()\n        ) / Helper.MB + \"MB\";\n    }\n}", "class_name": "NodeBasedWitnessPathSearcher", "return_type": "double", "parameters": [{"type": "int", "name": "targetNode"}, {"type": "double", "name": "acceptedWeight"}, {"type": "int", "name": "maxSettledNodes"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InstructionsOutgoingEdges {\n\n    private final EdgeIteratorState prevEdge;\n    private final EdgeIteratorState currentEdge;\n    // Outgoing edges that we would be allowed to turn on\n    private final List<EdgeIteratorState> allowedAlternativeTurns;\n    // All outgoing edges, including oneways in the wrong direction\n    private final List<EdgeIteratorState> visibleAlternativeTurns;\n    private final DecimalEncodedValue maxSpeedEnc;\n    private final EnumEncodedValue<RoadClass> roadClassEnc;\n    private final BooleanEncodedValue roadClassLinkEnc;\n    private final NodeAccess nodeAccess;\n    private final Weighting weighting;\n\n    public InstructionsOutgoingEdges(EdgeIteratorState prevEdge,\n                                     EdgeIteratorState currentEdge,\n                                     Weighting weighting,\n                                     DecimalEncodedValue maxSpeedEnc,\n                                     EnumEncodedValue<RoadClass> roadClassEnc,\n                                     BooleanEncodedValue roadClassLinkEnc,\n                                     EdgeExplorer allExplorer,\n                                     NodeAccess nodeAccess,\n                                     int prevNode,\n                                     int baseNode,\n                                     int adjNode) {\n        this.prevEdge = prevEdge;\n        this.currentEdge = currentEdge;\n        this.weighting = weighting;\n        this.maxSpeedEnc = maxSpeedEnc;\n        this.roadClassEnc = roadClassEnc;\n        this.roadClassLinkEnc = roadClassLinkEnc;\n        this.nodeAccess = nodeAccess;\n\n        visibleAlternativeTurns = new ArrayList<>();\n        allowedAlternativeTurns = new ArrayList<>();\n        EdgeIterator edgeIter = allExplorer.setBaseNode(baseNode);\n        while (edgeIter.next()) {\n            if (edgeIter.getAdjNode() != prevNode && edgeIter.getAdjNode() != adjNode) {\n                if (Double.isFinite(weighting.calcEdgeWeight(edgeIter, false))) {\n                    EdgeIteratorState tmpEdge = edgeIter.detach(false);\n                    allowedAlternativeTurns.add(tmpEdge);\n                    visibleAlternativeTurns.add(tmpEdge);\n                } else if (Double.isFinite(weighting.calcEdgeWeight(edgeIter, true))) {\n                    visibleAlternativeTurns.add(edgeIter.detach(false));\n                }\n            }\n        }\n    }\n\n    /**\n     * This method calculates the number of allowed outgoing edges, which could be considered the number of possible\n     * roads one might take at the intersection. This excludes the road you are coming from and inaccessible roads.\n     */\n    public int getAllowedTurns() {\n        return 1 + allowedAlternativeTurns.size();\n    }\n\n    /**\n     * This method calculates the number of all outgoing edges, which could be considered the number of roads you see\n     * at the intersection. This excludes the road you are coming from and also inaccessible roads.\n     */\n    public int getVisibleTurns() {\n        return 1 + visibleAlternativeTurns.size();\n    }\n\n    /**\n     * Checks if the outgoing edges are slower by the provided factor. If they are, this indicates, that we are staying\n     * on the prominent street that one would follow anyway.\n     */\n    public boolean outgoingEdgesAreSlowerByFactor(double factor) {\n        double tmpSpeed = getSpeed(currentEdge);\n        double pathSpeed = getSpeed(prevEdge);\n\n        // speed change indicates that we change road types\n        if (Math.abs(pathSpeed - tmpSpeed) >= 1) {\n            return false;\n        }\n\n        double maxSurroundingSpeed = -1;\n\n        for (EdgeIteratorState edge : allowedAlternativeTurns) {\n            tmpSpeed = getSpeed(edge);\n            if (tmpSpeed > maxSurroundingSpeed) {\n                maxSurroundingSpeed = tmpSpeed;\n            }\n        }\n\n        // surrounding streets need to be slower by a factor and call round() so that tiny differences are ignored\n        return Math.round(maxSurroundingSpeed * factor) < Math.round(pathSpeed);\n    }\n\n    /**\n     * Will return the tagged maxspeed, if available, if not, we use the average speed\n     * TODO: Should we rely only on the tagged maxspeed?\n     */\n    private double getSpeed(EdgeIteratorState edge) {\n        double maxSpeed = edge.get(maxSpeedEnc);\n        if (Double.isInfinite(maxSpeed))\n            return edge.getDistance() / weighting.calcEdgeMillis(edge, false) * 3600;\n        return maxSpeed;\n    }\n\n    /**\n     * Returns an edge that has more or less in the same orientation as the prevEdge, but is not the currentEdge.\n     * If there is one, this indicates that we might need an instruction to help finding the correct edge out of the different choices.\n     * If there is none, return null.\n     */\n    public EdgeIteratorState getOtherContinue(double prevLat, double prevLon, double prevOrientation) {\n        int tmpSign;\n        for (EdgeIteratorState edge : allowedAlternativeTurns) {\n            GHPoint point = InstructionsHelper.getPointForOrientationCalculation(edge, nodeAccess);\n            tmpSign = InstructionsHelper.calculateSign(prevLat, prevLon, point.getLat(), point.getLon(), prevOrientation);\n            if (Math.abs(tmpSign) <= 1) {\n                return edge;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * If the name and prevName changes this method checks if either the current street is continued on a\n     * different edge or if the edge we are turning onto is continued on a different edge.\n     * If either of these properties is true, we can be quite certain that a turn instruction should be provided.\n     */\n    public boolean isLeavingCurrentStreet(String prevName, String name) {<FILL_FUNCTION_BODY>}\n\n    private boolean isTheSameRoadClassAndLink(EdgeIteratorState edge1, EdgeIteratorState edge2) {\n        return edge1.get(roadClassEnc) == edge2.get(roadClassEnc) && edge1.get(roadClassLinkEnc) == edge2.get(roadClassLinkEnc);\n    }\n\n}", "metadata": {"task_id": "graphhopper_graphhopper/468", "ground_truth": "\n        if (InstructionsHelper.isNameSimilar(name, prevName)) {\n            return false;\n        }\n\n        boolean roadClassOrLinkChange = !isTheSameRoadClassAndLink(prevEdge, currentEdge);\n        for (EdgeIteratorState edge : allowedAlternativeTurns) {\n            String edgeName = edge.getName();\n            // leave the current street\n            if (InstructionsHelper.isNameSimilar(prevName, edgeName) || (roadClassOrLinkChange && isTheSameRoadClassAndLink(prevEdge, edge))) {\n                return true;\n            }\n            // enter a different street\n            if (InstructionsHelper.isNameSimilar(name, edgeName) || (roadClassOrLinkChange && isTheSameRoadClassAndLink(currentEdge, edge))) {\n                return true;\n            }\n        }\n        return false;\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "InstructionsOutgoingEdges.java"], "context_start_lineno": 0, "function_name": "isLeavingCurrentStreet", "left_context": "class InstructionsOutgoingEdges {\n\n    private final EdgeIteratorState prevEdge;\n    private final EdgeIteratorState currentEdge;\n    // Outgoing edges that we would be allowed to turn on\n    private final List<EdgeIteratorState> allowedAlternativeTurns;\n    // All outgoing edges, including oneways in the wrong direction\n    private final List<EdgeIteratorState> visibleAlternativeTurns;\n    private final DecimalEncodedValue maxSpeedEnc;\n    private final EnumEncodedValue<RoadClass> roadClassEnc;\n    private final BooleanEncodedValue roadClassLinkEnc;\n    private final NodeAccess nodeAccess;\n    private final Weighting weighting;\n\n    public InstructionsOutgoingEdges(EdgeIteratorState prevEdge,\n                                     EdgeIteratorState currentEdge,\n                                     Weighting weighting,\n                                     DecimalEncodedValue maxSpeedEnc,\n                                     EnumEncodedValue<RoadClass> roadClassEnc,\n                                     BooleanEncodedValue roadClassLinkEnc,\n                                     EdgeExplorer allExplorer,\n                                     NodeAccess nodeAccess,\n                                     int prevNode,\n                                     int baseNode,\n                                     int adjNode) {\n        this.prevEdge = prevEdge;\n        this.currentEdge = currentEdge;\n        this.weighting = weighting;\n        this.maxSpeedEnc = maxSpeedEnc;\n        this.roadClassEnc = roadClassEnc;\n        this.roadClassLinkEnc = roadClassLinkEnc;\n        this.nodeAccess = nodeAccess;\n\n        visibleAlternativeTurns = new ArrayList<>();\n        allowedAlternativeTurns = new ArrayList<>();\n        EdgeIterator edgeIter = allExplorer.setBaseNode(baseNode);\n        while (edgeIter.next()) {\n            if (edgeIter.getAdjNode() != prevNode && edgeIter.getAdjNode() != adjNode) {\n                if (Double.isFinite(weighting.calcEdgeWeight(edgeIter, false))) {\n                    EdgeIteratorState tmpEdge = edgeIter.detach(false);\n                    allowedAlternativeTurns.add(tmpEdge);\n                    visibleAlternativeTurns.add(tmpEdge);\n                } else if (Double.isFinite(weighting.calcEdgeWeight(edgeIter, true))) {\n                    visibleAlternativeTurns.add(edgeIter.detach(false));\n                }\n            }\n        }\n    }\n\n    /**\n     * This method calculates the number of allowed outgoing edges, which could be considered the number of possible\n     * roads one might take at the intersection. This excludes the road you are coming from and inaccessible roads.\n     */\n    public int getAllowedTurns() {\n        return 1 + allowedAlternativeTurns.size();\n    }\n\n    /**\n     * This method calculates the number of all outgoing edges, which could be considered the number of roads you see\n     * at the intersection. This excludes the road you are coming from and also inaccessible roads.\n     */\n    public int getVisibleTurns() {\n        return 1 + visibleAlternativeTurns.size();\n    }\n\n    /**\n     * Checks if the outgoing edges are slower by the provided factor. If they are, this indicates, that we are staying\n     * on the prominent street that one would follow anyway.\n     */\n    public boolean outgoingEdgesAreSlowerByFactor(double factor) {\n        double tmpSpeed = getSpeed(currentEdge);\n        double pathSpeed = getSpeed(prevEdge);\n\n        // speed change indicates that we change road types\n        if (Math.abs(pathSpeed - tmpSpeed) >= 1) {\n            return false;\n        }\n\n        double maxSurroundingSpeed = -1;\n\n        for (EdgeIteratorState edge : allowedAlternativeTurns) {\n            tmpSpeed = getSpeed(edge);\n            if (tmpSpeed > maxSurroundingSpeed) {\n                maxSurroundingSpeed = tmpSpeed;\n            }\n        }\n\n        // surrounding streets need to be slower by a factor and call round() so that tiny differences are ignored\n        return Math.round(maxSurroundingSpeed * factor) < Math.round(pathSpeed);\n    }\n\n    /**\n     * Will return the tagged maxspeed, if available, if not, we use the average speed\n     * TODO: Should we rely only on the tagged maxspeed?\n     */\n    private double getSpeed(EdgeIteratorState edge) {\n        double maxSpeed = edge.get(maxSpeedEnc);\n        if (Double.isInfinite(maxSpeed))\n            return edge.getDistance() / weighting.calcEdgeMillis(edge, false) * 3600;\n        return maxSpeed;\n    }\n\n    /**\n     * Returns an edge that has more or less in the same orientation as the prevEdge, but is not the currentEdge.\n     * If there is one, this indicates that we might need an instruction to help finding the correct edge out of the different choices.\n     * If there is none, return null.\n     */\n    public EdgeIteratorState getOtherContinue(double prevLat, double prevLon, double prevOrientation) {\n        int tmpSign;\n        for (EdgeIteratorState edge : allowedAlternativeTurns) {\n            GHPoint point = InstructionsHelper.getPointForOrientationCalculation(edge, nodeAccess);\n            tmpSign = InstructionsHelper.calculateSign(prevLat, prevLon, point.getLat(), point.getLon(), prevOrientation);\n            if (Math.abs(tmpSign) <= 1) {\n                return edge;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * If the name and prevName changes this method checks if either the current street is continued on a\n     * different edge or if the edge we are turning onto is continued on a different edge.\n     * If either of these properties is true, we can be quite certain that a turn instruction should be provided.\n     */\n    public boolean isLeavingCurrentStreet(String prevName, String name) {", "right_context": "}\n\n    private boolean isTheSameRoadClassAndLink(EdgeIteratorState edge1, EdgeIteratorState edge2) {\n        return edge1.get(roadClassEnc) == edge2.get(roadClassEnc) && edge1.get(roadClassLinkEnc) == edge2.get(roadClassLinkEnc);\n    }\n\n}", "class_name": "InstructionsOutgoingEdges", "return_type": "boolean", "parameters": [{"type": "String", "name": "prevName"}, {"type": "String", "name": "name"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CarAccessParser extends AbstractAccessParser implements TagParser {\n\n    protected final Set<String> trackTypeValues = new HashSet<>();\n    protected final Set<String> highwayValues = new HashSet<>();\n    protected final BooleanEncodedValue roundaboutEnc;\n\n    public CarAccessParser(EncodedValueLookup lookup, PMap properties) {\n        this(\n                lookup.getBooleanEncodedValue(VehicleAccess.key(\"car\")),\n                lookup.getBooleanEncodedValue(Roundabout.KEY),\n                properties,\n                TransportationMode.CAR\n        );\n    }\n\n    public CarAccessParser(BooleanEncodedValue accessEnc,\n                           BooleanEncodedValue roundaboutEnc, PMap properties,\n                           TransportationMode transportationMode) {\n        super(accessEnc, transportationMode);\n        this.roundaboutEnc = roundaboutEnc;\n        restrictedValues.add(\"agricultural\");\n        restrictedValues.add(\"forestry\");\n        restrictedValues.add(\"delivery\");\n\n        blockPrivate(properties.getBool(\"block_private\", true));\n        blockFords(properties.getBool(\"block_fords\", false));\n\n        intendedValues.add(\"yes\");\n        intendedValues.add(\"designated\");\n        intendedValues.add(\"permissive\");\n\n        barriers.add(\"kissing_gate\");\n        barriers.add(\"fence\");\n        barriers.add(\"bollard\");\n        barriers.add(\"stile\");\n        barriers.add(\"turnstile\");\n        barriers.add(\"cycle_barrier\");\n        barriers.add(\"motorcycle_barrier\");\n        barriers.add(\"block\");\n        barriers.add(\"bus_trap\");\n        barriers.add(\"sump_buster\");\n        barriers.add(\"jersey_barrier\");\n\n        highwayValues.addAll(Arrays.asList(\"motorway\", \"motorway_link\", \"trunk\", \"trunk_link\",\n                \"primary\", \"primary_link\", \"secondary\", \"secondary_link\", \"tertiary\", \"tertiary_link\",\n                \"unclassified\", \"residential\", \"living_street\", \"service\", \"road\", \"track\"));\n\n        trackTypeValues.addAll(Arrays.asList(\"grade1\", \"grade2\", \"grade3\", null));\n    }\n\n    public WayAccess getAccess(ReaderWay way) {\n        // TODO: Ferries have conditionals, like opening hours or are closed during some time in the year\n        String highwayValue = way.getTag(\"highway\");\n        int firstIndex = way.getFirstIndex(restrictionKeys);\n        String firstValue = firstIndex < 0 ? \"\" : way.getTag(restrictionKeys.get(firstIndex), \"\");\n        if (highwayValue == null) {\n            if (FerrySpeedCalculator.isFerry(way)) {\n                if (restrictedValues.contains(firstValue))\n                    return WayAccess.CAN_SKIP;\n                if (intendedValues.contains(firstValue) ||\n                        // implied default is allowed only if foot and bicycle is not specified:\n                        firstValue.isEmpty() && !way.hasTag(\"foot\") && !way.hasTag(\"bicycle\") ||\n                        // if hgv is allowed then smaller trucks and cars are allowed too\n                        way.hasTag(\"hgv\", \"yes\"))\n                    return WayAccess.FERRY;\n            }\n            return WayAccess.CAN_SKIP;\n        }\n\n        if (\"service\".equals(highwayValue) && \"emergency_access\".equals(way.getTag(\"service\")))\n            return WayAccess.CAN_SKIP;\n\n        if (\"track\".equals(highwayValue) && !trackTypeValues.contains(way.getTag(\"tracktype\")))\n            return WayAccess.CAN_SKIP;\n\n        if (!highwayValues.contains(highwayValue))\n            return WayAccess.CAN_SKIP;\n\n        if (way.hasTag(\"impassable\", \"yes\") || way.hasTag(\"status\", \"impassable\"))\n            return WayAccess.CAN_SKIP;\n\n        // multiple restrictions needs special handling\n        if (firstIndex >= 0) {\n            String[] restrict = firstValue.split(\";\");\n            for (String value : restrict) {\n                if (restrictedValues.contains(value) && !hasTemporalRestriction(way, firstIndex, restrictionKeys))\n                    return WayAccess.CAN_SKIP;\n                if (intendedValues.contains(value))\n                    return WayAccess.WAY;\n            }\n        }\n\n        if (isBlockFords() && (\"ford\".equals(highwayValue) || way.hasTag(\"ford\")))\n            return WayAccess.CAN_SKIP;\n\n        return WayAccess.WAY;\n    }\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * make sure that isOneway is called before\n     */\n    protected boolean isBackwardOneway(ReaderWay way) {\n        return way.hasTag(\"oneway\", \"-1\")\n                || way.hasTag(\"vehicle:forward\", restrictedValues)\n                || way.hasTag(\"motor_vehicle:forward\", restrictedValues);\n    }\n\n    /**\n     * make sure that isOneway is called before\n     */\n    protected boolean isForwardOneway(ReaderWay way) {\n        return !way.hasTag(\"oneway\", \"-1\")\n                && !way.hasTag(\"vehicle:forward\", restrictedValues)\n                && !way.hasTag(\"motor_vehicle:forward\", restrictedValues);\n    }\n\n    protected boolean isOneway(ReaderWay way) {\n        return way.hasTag(\"oneway\", oneways)\n                || way.hasTag(\"vehicle:backward\", restrictedValues)\n                || way.hasTag(\"vehicle:forward\", restrictedValues)\n                || way.hasTag(\"motor_vehicle:backward\", restrictedValues)\n                || way.hasTag(\"motor_vehicle:forward\", restrictedValues);\n    }\n}", "metadata": {"task_id": "graphhopper_graphhopper/493", "ground_truth": "\n        WayAccess access = getAccess(way);\n        if (access.canSkip())\n            return;\n\n        if (!access.isFerry()) {\n            boolean isRoundabout = roundaboutEnc.getBool(false, edgeId, edgeIntAccess);\n            if (isOneway(way) || isRoundabout) {\n                if (isForwardOneway(way))\n                    accessEnc.setBool(false, edgeId, edgeIntAccess, true);\n                if (isBackwardOneway(way))\n                    accessEnc.setBool(true, edgeId, edgeIntAccess, true);\n            } else {\n                accessEnc.setBool(false, edgeId, edgeIntAccess, true);\n                accessEnc.setBool(true, edgeId, edgeIntAccess, true);\n            }\n\n        } else {\n            accessEnc.setBool(false, edgeId, edgeIntAccess, true);\n            accessEnc.setBool(true, edgeId, edgeIntAccess, true);\n        }\n\n        if (way.hasTag(\"gh:barrier_edge\")) {\n            List<Map<String, Object>> nodeTags = way.getTag(\"node_tags\", Collections.emptyList());\n            handleBarrierEdge(edgeId, edgeIntAccess, nodeTags.get(0));\n        }\n    ", "fpath_tuple": ["graphhopper_graphhopper", "graphhopper", "core", "src", "main", "java", "com", "graphhopper", "routing", "util", "parsers", "CarAccessParser.java"], "context_start_lineno": 0, "function_name": "handleWayTags", "left_context": "class CarAccessParser extends AbstractAccessParser implements TagParser {\n\n    protected final Set<String> trackTypeValues = new HashSet<>();\n    protected final Set<String> highwayValues = new HashSet<>();\n    protected final BooleanEncodedValue roundaboutEnc;\n\n    public CarAccessParser(EncodedValueLookup lookup, PMap properties) {\n        this(\n                lookup.getBooleanEncodedValue(VehicleAccess.key(\"car\")),\n                lookup.getBooleanEncodedValue(Roundabout.KEY),\n                properties,\n                TransportationMode.CAR\n        );\n    }\n\n    public CarAccessParser(BooleanEncodedValue accessEnc,\n                           BooleanEncodedValue roundaboutEnc, PMap properties,\n                           TransportationMode transportationMode) {\n        super(accessEnc, transportationMode);\n        this.roundaboutEnc = roundaboutEnc;\n        restrictedValues.add(\"agricultural\");\n        restrictedValues.add(\"forestry\");\n        restrictedValues.add(\"delivery\");\n\n        blockPrivate(properties.getBool(\"block_private\", true));\n        blockFords(properties.getBool(\"block_fords\", false));\n\n        intendedValues.add(\"yes\");\n        intendedValues.add(\"designated\");\n        intendedValues.add(\"permissive\");\n\n        barriers.add(\"kissing_gate\");\n        barriers.add(\"fence\");\n        barriers.add(\"bollard\");\n        barriers.add(\"stile\");\n        barriers.add(\"turnstile\");\n        barriers.add(\"cycle_barrier\");\n        barriers.add(\"motorcycle_barrier\");\n        barriers.add(\"block\");\n        barriers.add(\"bus_trap\");\n        barriers.add(\"sump_buster\");\n        barriers.add(\"jersey_barrier\");\n\n        highwayValues.addAll(Arrays.asList(\"motorway\", \"motorway_link\", \"trunk\", \"trunk_link\",\n                \"primary\", \"primary_link\", \"secondary\", \"secondary_link\", \"tertiary\", \"tertiary_link\",\n                \"unclassified\", \"residential\", \"living_street\", \"service\", \"road\", \"track\"));\n\n        trackTypeValues.addAll(Arrays.asList(\"grade1\", \"grade2\", \"grade3\", null));\n    }\n\n    public WayAccess getAccess(ReaderWay way) {\n        // TODO: Ferries have conditionals, like opening hours or are closed during some time in the year\n        String highwayValue = way.getTag(\"highway\");\n        int firstIndex = way.getFirstIndex(restrictionKeys);\n        String firstValue = firstIndex < 0 ? \"\" : way.getTag(restrictionKeys.get(firstIndex), \"\");\n        if (highwayValue == null) {\n            if (FerrySpeedCalculator.isFerry(way)) {\n                if (restrictedValues.contains(firstValue))\n                    return WayAccess.CAN_SKIP;\n                if (intendedValues.contains(firstValue) ||\n                        // implied default is allowed only if foot and bicycle is not specified:\n                        firstValue.isEmpty() && !way.hasTag(\"foot\") && !way.hasTag(\"bicycle\") ||\n                        // if hgv is allowed then smaller trucks and cars are allowed too\n                        way.hasTag(\"hgv\", \"yes\"))\n                    return WayAccess.FERRY;\n            }\n            return WayAccess.CAN_SKIP;\n        }\n\n        if (\"service\".equals(highwayValue) && \"emergency_access\".equals(way.getTag(\"service\")))\n            return WayAccess.CAN_SKIP;\n\n        if (\"track\".equals(highwayValue) && !trackTypeValues.contains(way.getTag(\"tracktype\")))\n            return WayAccess.CAN_SKIP;\n\n        if (!highwayValues.contains(highwayValue))\n            return WayAccess.CAN_SKIP;\n\n        if (way.hasTag(\"impassable\", \"yes\") || way.hasTag(\"status\", \"impassable\"))\n            return WayAccess.CAN_SKIP;\n\n        // multiple restrictions needs special handling\n        if (firstIndex >= 0) {\n            String[] restrict = firstValue.split(\";\");\n            for (String value : restrict) {\n                if (restrictedValues.contains(value) && !hasTemporalRestriction(way, firstIndex, restrictionKeys))\n                    return WayAccess.CAN_SKIP;\n                if (intendedValues.contains(value))\n                    return WayAccess.WAY;\n            }\n        }\n\n        if (isBlockFords() && (\"ford\".equals(highwayValue) || way.hasTag(\"ford\")))\n            return WayAccess.CAN_SKIP;\n\n        return WayAccess.WAY;\n    }\n\n    @Override\n    public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way) {", "right_context": "}\n\n    /**\n     * make sure that isOneway is called before\n     */\n    protected boolean isBackwardOneway(ReaderWay way) {\n        return way.hasTag(\"oneway\", \"-1\")\n                || way.hasTag(\"vehicle:forward\", restrictedValues)\n                || way.hasTag(\"motor_vehicle:forward\", restrictedValues);\n    }\n\n    /**\n     * make sure that isOneway is called before\n     */\n    protected boolean isForwardOneway(ReaderWay way) {\n        return !way.hasTag(\"oneway\", \"-1\")\n                && !way.hasTag(\"vehicle:forward\", restrictedValues)\n                && !way.hasTag(\"motor_vehicle:forward\", restrictedValues);\n    }\n\n    protected boolean isOneway(ReaderWay way) {\n        return way.hasTag(\"oneway\", oneways)\n                || way.hasTag(\"vehicle:backward\", restrictedValues)\n                || way.hasTag(\"vehicle:forward\", restrictedValues)\n                || way.hasTag(\"motor_vehicle:backward\", restrictedValues)\n                || way.hasTag(\"motor_vehicle:forward\", restrictedValues);\n    }\n}", "class_name": "CarAccessParser", "return_type": "void", "parameters": [{"type": "int", "name": "edgeId"}, {"type": "EdgeIntAccess", "name": "edgeIntAccess"}, {"type": "ReaderWay", "name": "way"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ORuntimeKeyIndexDefinition<T> extends OAbstractIndexDefinition {\n  private static final long serialVersionUID = -8855918974071833818L;\n  private transient OBinarySerializer<T> serializer;\n\n  @SuppressWarnings(\"unchecked\")\n  public ORuntimeKeyIndexDefinition(final byte iId) {\n    super();\n\n    serializer =\n        (OBinarySerializer<T>) OBinarySerializerFactory.getInstance().getObjectSerializer(iId);\n    if (serializer == null)\n      throw new OConfigurationException(\n          \"Runtime index definition cannot find binary serializer with id=\"\n              + iId\n              + \". Assure to plug custom serializer into the server.\");\n  }\n\n  public ORuntimeKeyIndexDefinition() {}\n\n  public List<String> getFields() {\n    return Collections.emptyList();\n  }\n\n  public List<String> getFieldsToIndex() {\n    return Collections.emptyList();\n  }\n\n  public String getClassName() {\n    return null;\n  }\n\n  public Comparable<?> createValue(final List<?> params) {\n    return (Comparable<?>) params.get(0);\n  }\n\n  public Comparable<?> createValue(final Object... params) {\n    return createValue(Arrays.asList(params));\n  }\n\n  public int getParamCount() {\n    return 1;\n  }\n\n  public OType[] getTypes() {\n    return new OType[0];\n  }\n\n  @Override\n  public ODocument toStream() {\n    serializeToStream();\n    return document;\n  }\n\n  @Override\n  protected void serializeToStream() {\n    super.serializeToStream();\n\n    document.field(\"keySerializerId\", serializer.getId());\n    document.field(\"collate\", collate.getName());\n    document.field(\"nullValuesIgnored\", isNullValuesIgnored());\n  }\n\n  public void fromStream(ODocument document) {\n    this.document = document;\n    serializeFromStream();\n  }\n\n  @Override\n  protected void serializeFromStream() {\n    super.serializeFromStream();\n\n    final byte keySerializerId = ((Number) document.field(\"keySerializerId\")).byteValue();\n    //noinspection unchecked\n    serializer =\n        (OBinarySerializer<T>)\n            OBinarySerializerFactory.getInstance().getObjectSerializer(keySerializerId);\n    if (serializer == null)\n      throw new OConfigurationException(\n          \"Runtime index definition cannot find binary serializer with id=\"\n              + keySerializerId\n              + \". Assure to plug custom serializer into the server.\");\n\n    setNullValuesIgnored(!Boolean.FALSE.equals(document.<Boolean>field(\"nullValuesIgnored\")));\n  }\n\n  public Object getDocumentValueToIndex(final ODocument iDocument) {\n    throw new OIndexException(\"This method is not supported in given index definition.\");\n  }\n\n  @Override\n  public boolean equals(final Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final ORuntimeKeyIndexDefinition<?> that = (ORuntimeKeyIndexDefinition<?>) o;\n    return serializer.equals(that.serializer);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + serializer.getId();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"ORuntimeKeyIndexDefinition{\" + \"serializer=\" + serializer.getId() + '}';\n  }\n\n  /** {@inheritDoc} */\n  public String toCreateIndexDDL(final String indexName, final String indexType, String engine) {<FILL_FUNCTION_BODY>}\n\n  public OBinarySerializer<T> getSerializer() {\n    return serializer;\n  }\n\n  @Override\n  public boolean isAutomatic() {\n    return getClassName() != null;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/10", "ground_truth": "\n    return \"create index `\" + indexName + \"` \" + indexType + ' ' + \"runtime \" + serializer.getId();\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "index", "ORuntimeKeyIndexDefinition.java"], "context_start_lineno": 0, "function_name": "toCreateIndexDDL", "left_context": "class ORuntimeKeyIndexDefinition<T> extends OAbstractIndexDefinition {\n  private static final long serialVersionUID = -8855918974071833818L;\n  private transient OBinarySerializer<T> serializer;\n\n  @SuppressWarnings(\"unchecked\")\n  public ORuntimeKeyIndexDefinition(final byte iId) {\n    super();\n\n    serializer =\n        (OBinarySerializer<T>) OBinarySerializerFactory.getInstance().getObjectSerializer(iId);\n    if (serializer == null)\n      throw new OConfigurationException(\n          \"Runtime index definition cannot find binary serializer with id=\"\n              + iId\n              + \". Assure to plug custom serializer into the server.\");\n  }\n\n  public ORuntimeKeyIndexDefinition() {}\n\n  public List<String> getFields() {\n    return Collections.emptyList();\n  }\n\n  public List<String> getFieldsToIndex() {\n    return Collections.emptyList();\n  }\n\n  public String getClassName() {\n    return null;\n  }\n\n  public Comparable<?> createValue(final List<?> params) {\n    return (Comparable<?>) params.get(0);\n  }\n\n  public Comparable<?> createValue(final Object... params) {\n    return createValue(Arrays.asList(params));\n  }\n\n  public int getParamCount() {\n    return 1;\n  }\n\n  public OType[] getTypes() {\n    return new OType[0];\n  }\n\n  @Override\n  public ODocument toStream() {\n    serializeToStream();\n    return document;\n  }\n\n  @Override\n  protected void serializeToStream() {\n    super.serializeToStream();\n\n    document.field(\"keySerializerId\", serializer.getId());\n    document.field(\"collate\", collate.getName());\n    document.field(\"nullValuesIgnored\", isNullValuesIgnored());\n  }\n\n  public void fromStream(ODocument document) {\n    this.document = document;\n    serializeFromStream();\n  }\n\n  @Override\n  protected void serializeFromStream() {\n    super.serializeFromStream();\n\n    final byte keySerializerId = ((Number) document.field(\"keySerializerId\")).byteValue();\n    //noinspection unchecked\n    serializer =\n        (OBinarySerializer<T>)\n            OBinarySerializerFactory.getInstance().getObjectSerializer(keySerializerId);\n    if (serializer == null)\n      throw new OConfigurationException(\n          \"Runtime index definition cannot find binary serializer with id=\"\n              + keySerializerId\n              + \". Assure to plug custom serializer into the server.\");\n\n    setNullValuesIgnored(!Boolean.FALSE.equals(document.<Boolean>field(\"nullValuesIgnored\")));\n  }\n\n  public Object getDocumentValueToIndex(final ODocument iDocument) {\n    throw new OIndexException(\"This method is not supported in given index definition.\");\n  }\n\n  @Override\n  public boolean equals(final Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final ORuntimeKeyIndexDefinition<?> that = (ORuntimeKeyIndexDefinition<?>) o;\n    return serializer.equals(that.serializer);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + serializer.getId();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"ORuntimeKeyIndexDefinition{\" + \"serializer=\" + serializer.getId() + '}';\n  }\n\n  /** {@inheritDoc} */\n  public String toCreateIndexDDL(final String indexName, final String indexType, String engine) {", "right_context": "}\n\n  public OBinarySerializer<T> getSerializer() {\n    return serializer;\n  }\n\n  @Override\n  public boolean isAutomatic() {\n    return getClassName() != null;\n  }\n}", "class_name": "ORuntimeKeyIndexDefinition", "return_type": "String", "parameters": [{"type": "String", "name": "indexName"}, {"type": "String", "name": "indexType"}, {"type": "String", "name": "engine"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/common/collection/OIterableObject.java\n// --------------------------------------------------\n// /** \n//  * Returns an iterator over a set of elements of type T.\n//  * @return an Iterator.\n//  */\n// public Iterator<T> iterator(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/common/collection/OIterableObjectArray.java\n// --------------------------------------------------\n// /** \n//  * Returns an iterator over a set of elements of type T.\n//  * @return an Iterator.\n//  */\n// public Iterator<T> iterator(){\n//   return new ObjIterator();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/common/collection/OMultiCollectionIterator.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   reset();\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/db/record/OTrackedSet.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   return new Iterator<T>(){\n//     private T current;\n//     private final Iterator<T> underlying=OTrackedSet.super.iterator();\n//     @Override public boolean hasNext(){\n//       return underlying.hasNext();\n//     }\n//     @Override public T next(){\n//       current=underlying.next();\n//       return current;\n//     }\n//     @Override public void remove(){\n//       underlying.remove();\n//       removeEvent(current);\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/iterator/OLazyWrapperIterator.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   reset();\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/query/OBasicLegacyResultSet.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   return new Iterator<T>(){\n//     private int index=0;\n//     @Override public boolean hasNext(){\n//       return index < size();\n//     }\n//     @Override public T next(){\n//       if (index > size() || size() == 0)       throw new NoSuchElementException(\"Error on browsing at element \" + index + \" while the resultset contains only \"+ size()+ \" items\");\n//       return underlying.get(index++);\n//     }\n//     @Override public void remove(){\n//       throw new UnsupportedOperationException(\"OBasicLegacyResultSet.iterator.remove()\");\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/query/OConcurrentLegacyResultSet.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   return new Iterator<T>(){\n//     private int index=0;\n//     @Override public boolean hasNext(){\n//       int size;\n// synchronized (wrapped) {\n//         size=wrapped.size();\n//       }\n//       while (!completed) {\n//         if (index < size)         return true;\n//         waitForNewItemOrCompleted();\n// synchronized (wrapped) {\n//           size=wrapped.size();\n//         }\n//       }\n//       return index < wrapped.size();\n//     }\n//     @Override public T next(){\n//       int size;\n// synchronized (wrapped) {\n//         size=wrapped.size();\n//       }\n//       while (!completed) {\n//         if (index < size)         break;\n//         waitForNewItemOrCompleted();\n// synchronized (wrapped) {\n//           size=wrapped.size();\n//         }\n//       }\n//       if (index > size || size == 0)       throw new NoSuchElementException(\"Error on browsing at element \" + index + \" while the resultset contains only \"+ size+ \" items\");\n// synchronized (wrapped) {\n//         return wrapped.get(index++);\n//       }\n//     }\n//     @Override public void remove(){\n//       throw new UnsupportedOperationException(\"OLegacyResultSet.iterator.remove()\");\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/query/OLiveLegacyResultSet.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   return new Iterator<T>(){\n//     @Override public boolean hasNext(){\n//       return false;\n//     }\n//     @Override public T next(){\n//       try {\n//         T result=queue.take();\n//         return result;\n//       }\n//  catch (      InterruptedException e) {\n//         setCompleted();\n//         Thread.currentThread().interrupt();\n//         return null;\n//       }\n//     }\n//     @Override public void remove(){\n//       throw new UnsupportedOperationException(\"OLegacyResultSet.iterator.remove()\");\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/query/OSQLSynchQuery.java\n// --------------------------------------------------\n// public Iterator<T> iterator(){\n//   execute();\n//   return ((Iterable<T>)getResult()).iterator();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/TestIterable.java\n// --------------------------------------------------\n// @Override public Iterator<T> iterator(){\n//   return values.iterator();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientElementIterable.java\n// --------------------------------------------------\n// @SuppressWarnings(\"unchecked\") public Iterator<T> iterator(){\n//   if (iterable == null)   return Collections.EMPTY_LIST.iterator();\n//   return new OrientElementIterator<T>(this.graph,iterable.iterator());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientElementScanIterable.java\n// --------------------------------------------------\n// public Iterator<T> iterator(){\n//   final ODatabaseDocumentInternal rawGraph=(ODatabaseDocumentInternal)this.graph.getRawGraph();\n//   return new OrientElementIterator<T>(this.graph,new ORecordIteratorClass<ORecord>(rawGraph,elementClass,polymorphic));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/object/src/main/java/com/orientechnologies/orient/object/iterator/OObjectIteratorClass.java\n// --------------------------------------------------\n// public Iterator<T> iterator(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/object/src/main/java/com/orientechnologies/orient/object/iterator/OObjectIteratorCluster.java\n// --------------------------------------------------\n// public Iterator<T> iterator(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OClassLoaderHelper {\n\n  /**\n   * Switch to the OrientDb classloader before lookups on ServiceRegistry for implementation of the\n   * given Class. Useful under OSGI and generally under applications where jars are loaded by\n   * another class loader\n   *\n   * @param clazz the class to lookup foor\n   * @return an Iterator on the class implementation\n   */\n  public static synchronized <T extends Object> Iterator<T> lookupProviderWithOrientClassLoader(\n      Class<T> clazz) {\n\n    return lookupProviderWithOrientClassLoader(clazz, OClassLoaderHelper.class.getClassLoader());\n  }\n\n  public static synchronized <T extends Object> Iterator<T> lookupProviderWithOrientClassLoader(\n      Class<T> clazz, ClassLoader orientClassLoader) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "orientechnologies_orientdb/33", "ground_truth": "\n\n    final ClassLoader origClassLoader = Thread.currentThread().getContextClassLoader();\n    Thread.currentThread().setContextClassLoader(orientClassLoader);\n    try {\n      return ServiceLoader.load(clazz).iterator();\n    } catch (Exception e) {\n      OLogManager.instance().warn(null, \"Cannot lookup in service registry\", e);\n      throw OException.wrapException(\n          new OConfigurationException(\"Cannot lookup in service registry\"), e);\n    } finally {\n      Thread.currentThread().setContextClassLoader(origClassLoader);\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "common", "util", "OClassLoaderHelper.java"], "context_start_lineno": 0, "function_name": "lookupProviderWithOrientClassLoader", "left_context": "class OClassLoaderHelper {\n\n  /**\n   * Switch to the OrientDb classloader before lookups on ServiceRegistry for implementation of the\n   * given Class. Useful under OSGI and generally under applications where jars are loaded by\n   * another class loader\n   *\n   * @param clazz the class to lookup foor\n   * @return an Iterator on the class implementation\n   */\n  public static synchronized <T extends Object> Iterator<T> lookupProviderWithOrientClassLoader(\n      Class<T> clazz) {\n\n    return lookupProviderWithOrientClassLoader(clazz, OClassLoaderHelper.class.getClassLoader());\n  }\n\n  public static synchronized <T extends Object> Iterator<T> lookupProviderWithOrientClassLoader(\n      Class<T> clazz, ClassLoader orientClassLoader) {", "right_context": "}\n}", "class_name": "OClassLoaderHelper", "return_type": "Iterator<T>", "parameters": [{"type": "Class<T>", "name": "clazz"}, {"type": "ClassLoader", "name": "orientClassLoader"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OAbstractPaginatedStorage.java\n// --------------------------------------------------\n// private OBaseIndexEngine deleteIndexEngineInternal(final OAtomicOperation atomicOperation,final int indexId) throws IOException {\n//   final OBaseIndexEngine engine=indexEngines.get(indexId);\n//   assert indexId == engine.getId();\n//   indexEngines.set(indexId,null);\n//   engine.delete(atomicOperation);\n//   final String engineName=engine.getName();\n//   indexEngineNameMap.remove(engineName);\n//   return engine;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OAbstractPaginatedStorage.java\n// --------------------------------------------------\n// public OBaseIndexEngine getIndexEngine(int indexId) throws OInvalidIndexEngineIdException {\n//   indexId=extractInternalId(indexId);\n//   try {\n//     checkIndexId(indexId);\n//     stateLock.readLock().lock();\n//     try {\n//       checkOpennessAndMigration();\n//       final OBaseIndexEngine engine=indexEngines.get(indexId);\n//       assert indexId == engine.getId();\n//       return engine;\n//     }\n//   finally {\n//       stateLock.readLock().unlock();\n//     }\n//   }\n//  catch (  final OInvalidIndexEngineIdException ie) {\n//     throw logAndPrepareForRethrow(ie);\n//   }\n// catch (  final RuntimeException ee) {\n//     throw logAndPrepareForRethrow(ee);\n//   }\n// catch (  final Error ee) {\n//     throw logAndPrepareForRethrow(ee,false);\n//   }\n// catch (  final Throwable t) {\n//     throw logAndPrepareForRethrow(t,false);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/index/ODefaultIndexFactory.java\n// --------------------------------------------------\n// @Override public OBaseIndexEngine createIndexEngine(OStorage storage,IndexEngineData data){\n//   if (data.getAlgorithm() == null) {\n//     throw new OIndexException(\"Name of algorithm is not specified\");\n//   }\n//   final OBaseIndexEngine indexEngine;\n//   String storageType=storage.getType();\n//   if (storageType.equals(\"distributed\")) {\n//     storageType=storage.getType();\n//   }\n// switch (storageType) {\n// case \"memory\":\n// case \"plocal\":\n//     OAbstractPaginatedStorage realStorage=(OAbstractPaginatedStorage)storage;\n// switch (data.getAlgorithm()) {\n// case SBTREE_ALGORITHM:\n//     indexEngine=new OSBTreeIndexEngine(data.getIndexId(),data.getName(),realStorage,data.getVersion());\n//   break;\n// case CELL_BTREE_ALGORITHM:\n// if (data.isMultivalue()) {\n//   indexEngine=new OCellBTreeMultiValueIndexEngine(data.getIndexId(),data.getName(),realStorage,data.getVersion());\n// }\n//  else {\n//   indexEngine=new OCellBTreeSingleValueIndexEngine(data.getIndexId(),data.getName(),realStorage,data.getVersion());\n// }\n// break;\n// default :\n// throw new IllegalStateException(\"Invalid name of algorithm :'\" + \"'\");\n// }\n// break;\n// case \"remote\":\n// indexEngine=new ORemoteIndexEngine(data.getIndexId(),data.getName());\n// break;\n// default :\n// throw new OIndexException(\"Unsupported storage type: \" + storageType);\n// }\n// return indexEngine;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/index/OIndexFactory.java\n// --------------------------------------------------\n// OBaseIndexEngine createIndexEngine(OStorage storage,IndexEngineData data);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sharding/auto/OAutoShardingIndexFactory.java\n// --------------------------------------------------\n// @Override public OBaseIndexEngine createIndexEngine(OStorage storage,IndexEngineData data){\n//   final OIndexEngine indexEngine;\n//   final String storageType=storage.getType();\n//   OAbstractPaginatedStorage realStorage=(OAbstractPaginatedStorage)storage;\n// switch (storageType) {\n// case \"memory\":\n// case \"plocal\":\n//     indexEngine=new OAutoShardingIndexEngine(data.getName(),data.getIndexId(),realStorage,data.getVersion());\n//   break;\n// case \"distributed\":\n// indexEngine=new OAutoShardingIndexEngine(data.getName(),data.getIndexId(),realStorage,data.getVersion());\n// break;\n// case \"remote\":\n// indexEngine=new ORemoteIndexEngine(data.getIndexId(),data.getName());\n// break;\n// default :\n// throw new OIndexException(\"Unsupported storage type: \" + storageType);\n// }\n// return indexEngine;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/storage/index/hashindex/local/OHashIndexFactory.java\n// --------------------------------------------------\n// @Override public OBaseIndexEngine createIndexEngine(OStorage storage,IndexEngineData data){\n//   final OIndexEngine indexEngine;\n//   final String storageType=storage.getType();\n//   OAbstractPaginatedStorage realStorage=(OAbstractPaginatedStorage)storage;\n// switch (storageType) {\n// case \"memory\":\n// case \"plocal\":\n//     indexEngine=new OHashTableIndexEngine(data.getName(),data.getIndexId(),realStorage,data.getVersion());\n//   break;\n// case \"distributed\":\n// indexEngine=new OHashTableIndexEngine(data.getName(),data.getIndexId(),realStorage,data.getVersion());\n// break;\n// case \"remote\":\n// indexEngine=new ORemoteIndexEngine(data.getIndexId(),data.getName());\n// break;\n// default :\n// throw new OIndexException(\"Unsupported storage type: \" + storageType);\n// }\n// return indexEngine;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/lucene/src/main/java/com/orientechnologies/lucene/OLuceneIndexFactory.java\n// --------------------------------------------------\n// @Override public OBaseIndexEngine createIndexEngine(OStorage storage,IndexEngineData data){\n//   return new OLuceneFullTextIndexEngine(storage,data.getName(),data.getIndexId());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/lucene/src/main/java/com/orientechnologies/spatial/OLuceneSpatialIndexFactory.java\n// --------------------------------------------------\n// @Override public OBaseIndexEngine createIndexEngine(OStorage storage,IndexEngineData data){\n//   return new OLuceneSpatialIndexEngineDelegator(data.getIndexId(),data.getName(),storage,data.getVersion());\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OIndexes {\n\n  private static Set<OIndexFactory> FACTORIES = null;\n  private static final Set<OIndexFactory> DYNAMIC_FACTORIES =\n      Collections.synchronizedSet(new HashSet<>());\n  private static ClassLoader orientClassLoader = OIndexes.class.getClassLoader();\n\n  private OIndexes() {}\n\n  /**\n   * Cache a set of all factories. we do not use the service loader directly since it is not\n   * concurrent.\n   *\n   * @return Set<OIndexFactory>\n   */\n  private static synchronized Set<OIndexFactory> getFactories() {\n    if (FACTORIES == null) {\n\n      final Iterator<OIndexFactory> ite =\n          lookupProviderWithOrientClassLoader(OIndexFactory.class, orientClassLoader);\n\n      final Set<OIndexFactory> factories = new HashSet<>();\n      while (ite.hasNext()) {\n        factories.add(ite.next());\n      }\n      factories.addAll(DYNAMIC_FACTORIES);\n      FACTORIES = Collections.unmodifiableSet(factories);\n    }\n    return FACTORIES;\n  }\n\n  /** @return Iterator of all index factories */\n  public static Iterator<OIndexFactory> getAllFactories() {\n    return getFactories().iterator();\n  }\n\n  /**\n   * Iterates on all factories and append all index types.\n   *\n   * @return Set of all index types.\n   */\n  private static Set<String> getIndexTypes() {\n    final Set<String> types = new HashSet<>();\n    final Iterator<OIndexFactory> ite = getAllFactories();\n    while (ite.hasNext()) {\n      types.addAll(ite.next().getTypes());\n    }\n    return types;\n  }\n\n  /**\n   * Iterates on all factories and append all index engines.\n   *\n   * @return Set of all index engines.\n   */\n  public static Set<String> getIndexEngines() {\n    final Set<String> engines = new HashSet<>();\n    final Iterator<OIndexFactory> ite = getAllFactories();\n    while (ite.hasNext()) {\n      engines.addAll(ite.next().getAlgorithms());\n    }\n    return engines;\n  }\n\n  public static OIndexFactory getFactory(String indexType, String algorithm) {\n    if (algorithm == null) {\n      algorithm = chooseDefaultIndexAlgorithm(indexType);\n    }\n\n    if (algorithm != null) {\n      algorithm = algorithm.toUpperCase(Locale.ENGLISH);\n      final Iterator<OIndexFactory> ite = getAllFactories();\n\n      while (ite.hasNext()) {\n        final OIndexFactory factory = ite.next();\n        if (factory.getTypes().contains(indexType) && factory.getAlgorithms().contains(algorithm)) {\n          return factory;\n        }\n      }\n    }\n\n    throw new OIndexException(\n        \"Index with type \" + indexType + \" and algorithm \" + algorithm + \" does not exist.\");\n  }\n\n  /**\n   * @param storage TODO\n   * @param indexType index type\n   * @return OIndexInternal\n   * @throws OConfigurationException if index creation failed\n   * @throws OIndexException if index type does not exist\n   */\n  public static OIndexInternal createIndex(OStorage storage, OIndexMetadata metadata)\n      throws OConfigurationException, OIndexException {\n    String indexType = metadata.getType();\n    String algorithm = metadata.getAlgorithm();\n\n    return findFactoryByAlgorithmAndType(algorithm, indexType).createIndex(storage, metadata);\n  }\n\n  private static OIndexFactory findFactoryByAlgorithmAndType(String algorithm, String indexType) {\n\n    for (OIndexFactory factory : getFactories()) {\n      if (indexType == null\n          || indexType.isEmpty()\n          || (factory.getTypes().contains(indexType))\n              && factory.getAlgorithms().contains(algorithm)) {\n        return factory;\n      }\n    }\n    throw new OIndexException(\n        \"Index type \"\n            + indexType\n            + \" with engine \"\n            + algorithm\n            + \" is not supported. Types are \"\n            + OCollections.toString(getIndexTypes()));\n  }\n\n  public static OBaseIndexEngine createIndexEngine(\n      final OStorage storage, final IndexEngineData metadata) {<FILL_FUNCTION_BODY>}\n\n  public static String chooseDefaultIndexAlgorithm(String type) {\n    String algorithm = null;\n\n    if (OClass.INDEX_TYPE.DICTIONARY.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.FULLTEXT.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.NOTUNIQUE.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.UNIQUE.name().equalsIgnoreCase(type)) {\n      algorithm = ODefaultIndexFactory.CELL_BTREE_ALGORITHM;\n    } else if (OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.UNIQUE_HASH_INDEX.name().equalsIgnoreCase(type)) {\n      algorithm = OHashIndexFactory.HASH_INDEX_ALGORITHM;\n    }\n    return algorithm;\n  }\n\n  /**\n   * Scans for factory plug-ins on the application class path. This method is needed because the\n   * application class path can theoretically change, or additional plug-ins may become available.\n   * Rather than re-scanning the classpath on every invocation of the API, the class path is scanned\n   * automatically only on the first invocation. Clients can call this method to prompt a re-scan.\n   * Thus this method need only be invoked by sophisticated applications which dynamically make new\n   * plug-ins available at runtime.\n   */\n  private static synchronized void scanForPlugins() {\n    // clear cache, will cause a rescan on next getFactories call\n    FACTORIES = null;\n  }\n\n  /** Register at runtime custom factories */\n  public static void registerFactory(OIndexFactory factory) {\n    DYNAMIC_FACTORIES.add(factory);\n    scanForPlugins();\n  }\n\n  /** Unregister custom factories */\n  public static void unregisterFactory(OIndexFactory factory) {\n    DYNAMIC_FACTORIES.remove(factory);\n    scanForPlugins();\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/48", "ground_truth": "\n\n    final OIndexFactory factory =\n        findFactoryByAlgorithmAndType(metadata.getAlgorithm(), metadata.getIndexType());\n\n    return factory.createIndexEngine(storage, metadata);\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "index", "OIndexes.java"], "context_start_lineno": 0, "function_name": "createIndexEngine", "left_context": "class OIndexes {\n\n  private static Set<OIndexFactory> FACTORIES = null;\n  private static final Set<OIndexFactory> DYNAMIC_FACTORIES =\n      Collections.synchronizedSet(new HashSet<>());\n  private static ClassLoader orientClassLoader = OIndexes.class.getClassLoader();\n\n  private OIndexes() {}\n\n  /**\n   * Cache a set of all factories. we do not use the service loader directly since it is not\n   * concurrent.\n   *\n   * @return Set<OIndexFactory>\n   */\n  private static synchronized Set<OIndexFactory> getFactories() {\n    if (FACTORIES == null) {\n\n      final Iterator<OIndexFactory> ite =\n          lookupProviderWithOrientClassLoader(OIndexFactory.class, orientClassLoader);\n\n      final Set<OIndexFactory> factories = new HashSet<>();\n      while (ite.hasNext()) {\n        factories.add(ite.next());\n      }\n      factories.addAll(DYNAMIC_FACTORIES);\n      FACTORIES = Collections.unmodifiableSet(factories);\n    }\n    return FACTORIES;\n  }\n\n  /** @return Iterator of all index factories */\n  public static Iterator<OIndexFactory> getAllFactories() {\n    return getFactories().iterator();\n  }\n\n  /**\n   * Iterates on all factories and append all index types.\n   *\n   * @return Set of all index types.\n   */\n  private static Set<String> getIndexTypes() {\n    final Set<String> types = new HashSet<>();\n    final Iterator<OIndexFactory> ite = getAllFactories();\n    while (ite.hasNext()) {\n      types.addAll(ite.next().getTypes());\n    }\n    return types;\n  }\n\n  /**\n   * Iterates on all factories and append all index engines.\n   *\n   * @return Set of all index engines.\n   */\n  public static Set<String> getIndexEngines() {\n    final Set<String> engines = new HashSet<>();\n    final Iterator<OIndexFactory> ite = getAllFactories();\n    while (ite.hasNext()) {\n      engines.addAll(ite.next().getAlgorithms());\n    }\n    return engines;\n  }\n\n  public static OIndexFactory getFactory(String indexType, String algorithm) {\n    if (algorithm == null) {\n      algorithm = chooseDefaultIndexAlgorithm(indexType);\n    }\n\n    if (algorithm != null) {\n      algorithm = algorithm.toUpperCase(Locale.ENGLISH);\n      final Iterator<OIndexFactory> ite = getAllFactories();\n\n      while (ite.hasNext()) {\n        final OIndexFactory factory = ite.next();\n        if (factory.getTypes().contains(indexType) && factory.getAlgorithms().contains(algorithm)) {\n          return factory;\n        }\n      }\n    }\n\n    throw new OIndexException(\n        \"Index with type \" + indexType + \" and algorithm \" + algorithm + \" does not exist.\");\n  }\n\n  /**\n   * @param storage TODO\n   * @param indexType index type\n   * @return OIndexInternal\n   * @throws OConfigurationException if index creation failed\n   * @throws OIndexException if index type does not exist\n   */\n  public static OIndexInternal createIndex(OStorage storage, OIndexMetadata metadata)\n      throws OConfigurationException, OIndexException {\n    String indexType = metadata.getType();\n    String algorithm = metadata.getAlgorithm();\n\n    return findFactoryByAlgorithmAndType(algorithm, indexType).createIndex(storage, metadata);\n  }\n\n  private static OIndexFactory findFactoryByAlgorithmAndType(String algorithm, String indexType) {\n\n    for (OIndexFactory factory : getFactories()) {\n      if (indexType == null\n          || indexType.isEmpty()\n          || (factory.getTypes().contains(indexType))\n              && factory.getAlgorithms().contains(algorithm)) {\n        return factory;\n      }\n    }\n    throw new OIndexException(\n        \"Index type \"\n            + indexType\n            + \" with engine \"\n            + algorithm\n            + \" is not supported. Types are \"\n            + OCollections.toString(getIndexTypes()));\n  }\n\n  public static OBaseIndexEngine createIndexEngine(\n      final OStorage storage, final IndexEngineData metadata) {", "right_context": "}\n\n  public static String chooseDefaultIndexAlgorithm(String type) {\n    String algorithm = null;\n\n    if (OClass.INDEX_TYPE.DICTIONARY.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.FULLTEXT.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.NOTUNIQUE.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.UNIQUE.name().equalsIgnoreCase(type)) {\n      algorithm = ODefaultIndexFactory.CELL_BTREE_ALGORITHM;\n    } else if (OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX.name().equalsIgnoreCase(type)\n        || OClass.INDEX_TYPE.UNIQUE_HASH_INDEX.name().equalsIgnoreCase(type)) {\n      algorithm = OHashIndexFactory.HASH_INDEX_ALGORITHM;\n    }\n    return algorithm;\n  }\n\n  /**\n   * Scans for factory plug-ins on the application class path. This method is needed because the\n   * application class path can theoretically change, or additional plug-ins may become available.\n   * Rather than re-scanning the classpath on every invocation of the API, the class path is scanned\n   * automatically only on the first invocation. Clients can call this method to prompt a re-scan.\n   * Thus this method need only be invoked by sophisticated applications which dynamically make new\n   * plug-ins available at runtime.\n   */\n  private static synchronized void scanForPlugins() {\n    // clear cache, will cause a rescan on next getFactories call\n    FACTORIES = null;\n  }\n\n  /** Register at runtime custom factories */\n  public static void registerFactory(OIndexFactory factory) {\n    DYNAMIC_FACTORIES.add(factory);\n    scanForPlugins();\n  }\n\n  /** Unregister custom factories */\n  public static void unregisterFactory(OIndexFactory factory) {\n    DYNAMIC_FACTORIES.remove(factory);\n    scanForPlugins();\n  }\n}", "class_name": "OIndexes", "return_type": "OBaseIndexEngine", "parameters": [{"type": "OStorage", "name": "storage"}, {"type": "IndexEngineData", "name": "metadata"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LRUList implements Iterable<OCacheEntry> {\n  private int size;\n\n  private OCacheEntry head;\n  private OCacheEntry tail;\n\n  void remove(final OCacheEntry entry) {\n    final OCacheEntry next = entry.getNext();\n    final OCacheEntry prev = entry.getPrev();\n\n    if (!(next != null || prev != null || entry == head)) {\n      return;\n    }\n\n    assert prev == null || prev.getNext() == entry;\n    assert next == null || next.getPrev() == entry;\n\n    if (next != null) {\n      next.setPrev(prev);\n    }\n\n    if (prev != null) {\n      prev.setNext(next);\n    }\n\n    if (head == entry) {\n      assert entry.getPrev() == null;\n      head = next;\n    }\n\n    if (tail == entry) {\n      assert entry.getNext() == null;\n      tail = prev;\n    }\n\n    entry.setNext(null);\n    entry.setPrev(null);\n    entry.setContainer(null);\n\n    size--;\n  }\n\n  boolean contains(final OCacheEntry entry) {\n    return entry.getContainer() == this;\n  }\n\n  void moveToTheTail(final OCacheEntry entry) {<FILL_FUNCTION_BODY>}\n\n  int size() {\n    return size;\n  }\n\n  OCacheEntry poll() {\n    if (head == null) {\n      return null;\n    }\n\n    final OCacheEntry entry = head;\n\n    final OCacheEntry next = head.getNext();\n    assert next == null || next.getPrev() == head;\n\n    head = next;\n    if (next != null) {\n      next.setPrev(null);\n    }\n\n    assert head == null || head.getPrev() == null;\n\n    if (head == null) {\n      tail = null;\n    }\n\n    entry.setNext(null);\n    assert entry.getPrev() == null;\n\n    size--;\n\n    entry.setContainer(null);\n    return entry;\n  }\n\n  OCacheEntry peek() {\n    return head;\n  }\n\n  public Iterator<OCacheEntry> iterator() {\n    return new Iterator<OCacheEntry>() {\n      private OCacheEntry next = tail;\n\n      @Override\n      public boolean hasNext() {\n        return next != null;\n      }\n\n      @Override\n      public OCacheEntry next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        final OCacheEntry result = next;\n        next = next.getPrev();\n\n        return result;\n      }\n    };\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/67", "ground_truth": "\n    if (tail == entry) {\n      assert entry.getNext() == null;\n      return;\n    }\n\n    final OCacheEntry next = entry.getNext();\n    final OCacheEntry prev = entry.getPrev();\n\n    final boolean newEntry = entry.getContainer() == null;\n    assert entry.getContainer() == null || entry.getContainer() == this;\n\n    assert prev == null || prev.getNext() == entry;\n    assert next == null || next.getPrev() == entry;\n\n    if (prev != null) {\n      prev.setNext(next);\n    }\n\n    if (next != null) {\n      next.setPrev(prev);\n    }\n\n    if (head == entry) {\n      assert entry.getPrev() == null;\n      head = next;\n    }\n\n    entry.setPrev(tail);\n    entry.setNext(null);\n\n    if (tail != null) {\n      assert tail.getNext() == null;\n      tail.setNext(entry);\n      tail = entry;\n    } else {\n      tail = head = entry;\n    }\n\n    if (newEntry) {\n      entry.setContainer(this);\n      size++;\n    } else {\n      assert entry.getContainer() == this;\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "storage", "cache", "chm", "LRUList.java"], "context_start_lineno": 0, "function_name": "moveToTheTail", "left_context": "class LRUList implements Iterable<OCacheEntry> {\n  private int size;\n\n  private OCacheEntry head;\n  private OCacheEntry tail;\n\n  void remove(final OCacheEntry entry) {\n    final OCacheEntry next = entry.getNext();\n    final OCacheEntry prev = entry.getPrev();\n\n    if (!(next != null || prev != null || entry == head)) {\n      return;\n    }\n\n    assert prev == null || prev.getNext() == entry;\n    assert next == null || next.getPrev() == entry;\n\n    if (next != null) {\n      next.setPrev(prev);\n    }\n\n    if (prev != null) {\n      prev.setNext(next);\n    }\n\n    if (head == entry) {\n      assert entry.getPrev() == null;\n      head = next;\n    }\n\n    if (tail == entry) {\n      assert entry.getNext() == null;\n      tail = prev;\n    }\n\n    entry.setNext(null);\n    entry.setPrev(null);\n    entry.setContainer(null);\n\n    size--;\n  }\n\n  boolean contains(final OCacheEntry entry) {\n    return entry.getContainer() == this;\n  }\n\n  void moveToTheTail(final OCacheEntry entry) {", "right_context": "}\n\n  int size() {\n    return size;\n  }\n\n  OCacheEntry poll() {\n    if (head == null) {\n      return null;\n    }\n\n    final OCacheEntry entry = head;\n\n    final OCacheEntry next = head.getNext();\n    assert next == null || next.getPrev() == head;\n\n    head = next;\n    if (next != null) {\n      next.setPrev(null);\n    }\n\n    assert head == null || head.getPrev() == null;\n\n    if (head == null) {\n      tail = null;\n    }\n\n    entry.setNext(null);\n    assert entry.getPrev() == null;\n\n    size--;\n\n    entry.setContainer(null);\n    return entry;\n  }\n\n  OCacheEntry peek() {\n    return head;\n  }\n\n  public Iterator<OCacheEntry> iterator() {\n    return new Iterator<OCacheEntry>() {\n      private OCacheEntry next = tail;\n\n      @Override\n      public boolean hasNext() {\n        return next != null;\n      }\n\n      @Override\n      public OCacheEntry next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        final OCacheEntry result = next;\n        next = next.getPrev();\n\n        return result;\n      }\n    };\n  }\n}", "class_name": "LRUList", "return_type": "void", "parameters": [{"type": "OCacheEntry", "name": "entry"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/metadata/security/OSecurityShared.java\n// --------------------------------------------------\n// @Override public OSecurityUser securityAuthenticate(ODatabaseSession session,OAuthenticationInfo authenticationInfo){\n//   OSecurityUser user=null;\n//   final String dbName=session.getName();\n//   assert !((ODatabaseDocumentInternal)session).isRemote();\n//   user=security.authenticate(session,authenticationInfo);\n//   if (user != null) {\n//     if (user.getAccountStatus() != OSecurityUser.STATUSES.ACTIVE) {\n//       throw new OSecurityAccessException(dbName,\"User '\" + user.getName() + \"' is not active\");\n//     }\n//   }\n//  else {\n//     try {\n//       Thread.sleep(200);\n//     }\n//  catch (    InterruptedException ignore) {\n//       Thread.currentThread().interrupt();\n//     }\n//     throw new OSecurityAccessException(dbName,\"Invalid authentication info for access to the database \" + authenticationInfo);\n//   }\n//   return user;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/metadata/security/OSecurityShared.java\n// --------------------------------------------------\n// @Override public OSecurityUser securityAuthenticate(ODatabaseSession session,String userName,String password){\n//   OSecurityUser user=null;\n//   final String dbName=session.getName();\n//   assert !((ODatabaseDocumentInternal)session).isRemote();\n//   user=security.authenticate(session,userName,password);\n//   if (user != null) {\n//     if (user.getAccountStatus() != OSecurityUser.STATUSES.ACTIVE) {\n//       throw new OSecurityAccessException(dbName,\"User '\" + user.getName() + \"' is not active\");\n//     }\n//   }\n//  else {\n//     try {\n//       Thread.sleep(200);\n//     }\n//  catch (    InterruptedException ignore) {\n//       Thread.currentThread().interrupt();\n//     }\n//     throw new OSecurityAccessException(dbName,\"User or password not valid for username: \" + userName + \", database: '\"+ dbName+ \"'\");\n//   }\n//   return user;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/symmetrickey/OSymmetricKeySecurity.java\n// --------------------------------------------------\n// @Override public OSecurityUser securityAuthenticate(ODatabaseSession session,String userName,String password){\n//   return authenticate(session,userName,password);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/symmetrickey/OSymmetricKeySecurity.java\n// --------------------------------------------------\n// @Override public OSecurityUser securityAuthenticate(ODatabaseSession session,OAuthenticationInfo authenticationInfo){\n//   return delegate.securityAuthenticate(session,authenticationInfo);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/ODefaultSecuritySystem.java\n// --------------------------------------------------\n// @Override public OSecurityUser authenticateAndAuthorize(String iUserName,String iPassword,String iResourceToCheck){\n//   OSecurityUser user=authenticate(null,iUserName,iPassword);\n//   if (user != null) {\n//     if (isAuthorized(user.getName(),iResourceToCheck)) {\n//       return user;\n//     }\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/OSecuritySystem.java\n// --------------------------------------------------\n// OSecurityUser authenticateAndAuthorize(String iUserName,String iPassword,String iResourceToCheck);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/ODefaultSecuritySystem.java\n// --------------------------------------------------\n// public OSecurityUser authenticateServerUser(final String username,final String password){\n//   OSecurityUser user=getServerUser(username);\n//   if (user != null && user.getPassword() != null) {\n//     if (OSecurityManager.checkPassword(password,user.getPassword().trim())) {\n//       return user;\n//     }\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/OSecuritySystem.java\n// --------------------------------------------------\n// OSecurityUser authenticateServerUser(String username,String password);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/OServer.java\n// --------------------------------------------------\n// public OSecurityUser authenticateUser(final String iUserName,final String iPassword,final String iResourceToCheck){\n//   return databases.getSecuritySystem().authenticateAndAuthorize(iUserName,iPassword,iResourceToCheck);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/ODefaultSecuritySystem.java\n// --------------------------------------------------\n// @Override public OSecurityUser authenticate(ODatabaseSession session,OAuthenticationInfo authenticationInfo){\n//   try {\n//     for (    OSecurityAuthenticator sa : getEnabledAuthenticators()) {\n//       OSecurityUser principal=sa.authenticate(session,authenticationInfo);\n//       if (principal != null)       return principal;\n//     }\n//   }\n//  catch (  Exception ex) {\n//     OLogManager.instance().error(this,\"ODefaultServerSecurity.authenticate()\",ex);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/ODefaultSecuritySystem.java\n// --------------------------------------------------\n// public OSecurityUser authenticate(ODatabaseSession session,final String username,final String password){\n//   try {\n//     if (username != null && !username.isEmpty()) {\n//       if (debug)       OLogManager.instance().info(this,\"ODefaultServerSecurity.authenticate() ** Authenticating username: %s\",username);\n//     }\n//     for (    OSecurityAuthenticator sa : getEnabledAuthenticators()) {\n//       OSecurityUser principal=sa.authenticate(session,username,password);\n//       if (principal != null)       return principal;\n//     }\n//   }\n//  catch (  Exception ex) {\n//     OLogManager.instance().error(this,\"ODefaultServerSecurity.authenticate()\",ex);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/OSecurityAuthenticator.java\n// --------------------------------------------------\n// OSecurityUser authenticate(ODatabaseSession session,final String username,final String password);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/OSecurityAuthenticator.java\n// --------------------------------------------------\n// OSecurityUser authenticate(ODatabaseSession session,OAuthenticationInfo authenticationInfo);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/OSecuritySystem.java\n// --------------------------------------------------\n// OSecurityUser authenticate(ODatabaseSession session,final String username,final String password);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/OSecuritySystem.java\n// --------------------------------------------------\n// OSecurityUser authenticate(ODatabaseSession session,OAuthenticationInfo authenticationInfo);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/authenticator/ODefaultPasswordAuthenticator.java\n// --------------------------------------------------\n// public OSecurityUser authenticate(ODatabaseSession session,final String username,final String password){\n//   try {\n//     OSecurityUser user=getUser(username);\n//     if (isPasswordValid(user)) {\n//       if (OSecurityManager.checkPassword(password,user.getPassword())) {\n//         if (user != null) {\n//           return user;\n//         }\n//       }\n//     }\n//   }\n//  catch (  Exception ex) {\n//     OLogManager.instance().error(this,\"ODefaultPasswordAuthenticator.authenticate()\",ex);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/authenticator/OSecurityAuthenticatorAbstract.java\n// --------------------------------------------------\n// @Override public OSecurityUser authenticate(ODatabaseSession session,OAuthenticationInfo authenticationInfo){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/authenticator/OServerConfigAuthenticator.java\n// --------------------------------------------------\n// public OSecurityUser authenticate(ODatabaseSession session,final String username,final String password){\n//   return getSecurity().authenticateServerUser(username,password);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/security/authenticator/OSystemUserAuthenticator.java\n// --------------------------------------------------\n// public OSecurityUser authenticate(ODatabaseSession session,final String username,final String password){\n//   try {\n//     if (getSecurity() != null) {\n//       OSecurityUser user=getSecurity().getSystemUser(username,null);\n//       if (user != null && user.getAccountStatus() == OSecurityUser.STATUSES.ACTIVE) {\n//         if (user.checkPassword(password))         return user;\n//       }\n//     }\n//   }\n//  catch (  Exception ex) {\n//     OLogManager.instance().error(this,\"authenticate()\",ex);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/security/src/main/java/com/orientechnologies/security/kerberos/OKerberosAuthenticator.java\n// --------------------------------------------------\n// public OSecurityUser authenticate(ODatabaseSession session,final String username,final String password){\n//   String principal=null;\n//   try {\n//     if (isDebug()) {\n//       OLogManager.instance().info(this,\"** Authenticating username: %s\",username);\n//       if (OKerberosLibrary.isServiceTicket(password))       OLogManager.instance().info(this,\"** Authenticating password: SERVICE TICKET\");\n//  else {\n//         OLogManager.instance().info(this,\"** Authenticating password: %s\",password);\n//       }\n//     }\n//     if (password != null) {\n//       if (OKerberosLibrary.isServiceTicket(password)) {\n//         TicketItem ti=getTicket(Integer.toString(password.hashCode()));\n//         if (ti != null && ti.getHashCode() == password.hashCode()) {\n//           if (isDebug())           OLogManager.instance().info(this,\"OKerberosAuthenticator.authenticate() TicketHash and password Hash are\" + \" equal, return principal: \" + ti.getPrincipal());\n//           if (isDebug())           OLogManager.instance().info(this,\"OKerberosAuthenticator.authenticate() principal: \" + ti.getPrincipal());\n//           principal=ti.getPrincipal();\n//         }\n//  else {\n//           byte[] ticket=Base64.getDecoder().decode(password.getBytes(\"UTF8\"));\n//           try {\n// synchronized (authenticateSync) {\n//               if (OKerberosLibrary.isSPNegoTicket(ticket)) {\n//                 principal=OKerberosLibrary.getSPNegoSource(spnegoSubject,spnegoPrincipal,ticket);\n//               }\n//  else {\n//                 principal=OKerberosLibrary.getKerberosSource(serviceSubject,servicePrincipal,ticket);\n//               }\n//             }\n//           }\n//  catch (          Exception e) {\n//             OLogManager.instance().error(this,\"OKerberosAuthenticator.authenticate() Exception: \",e);\n//           }\n//           if (isDebug())           OLogManager.instance().info(this,\"OKerberosAuthenticator.authenticate() OKerberosLibrary.authenticate()\" + \" returned \" + principal);\n//           addTicket(Integer.toString(password.hashCode()),password.hashCode(),principal);\n//         }\n//       }\n//     }\n//   }\n//  catch (  Exception ex) {\n//     OLogManager.instance().debug(this,\"OKerberosAuthenticator.authenticate() Exception: \",ex);\n//   }\n//   return new OImmutableUser(principal,OSecurityUser.SERVER_USER_TYPE);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ODatabaseUserAuthenticator extends OSecurityAuthenticatorAbstract {\n  private OTokenSign tokenSign;\n\n  @Override\n  public void config(ODocument jsonConfig, OSecuritySystem security) {\n    super.config(jsonConfig, security);\n    tokenSign = security.getTokenSign();\n  }\n\n  @Override\n  public OSecurityUser authenticate(ODatabaseSession session, OAuthenticationInfo info) {\n    if (info instanceof OUserPasswordAuthInfo) {\n      return authenticate(\n          session,\n          ((OUserPasswordAuthInfo) info).getUser(),\n          ((OUserPasswordAuthInfo) info).getPassword());\n    } else if (info instanceof OTokenAuthInfo) {\n      OParsedToken token = ((OTokenAuthInfo) info).getToken();\n\n      if (tokenSign != null && !tokenSign.verifyTokenSign(token)) {\n        throw new OTokenSecurityException(\"The token provided is expired\");\n      }\n      if (token.getToken().getIsValid() != true) {\n        throw new OSecurityAccessException(session.getName(), \"Token not valid\");\n      }\n\n      OUser user = token.getToken().getUser((ODatabaseDocumentInternal) session);\n      if (user == null && token.getToken().getUserName() != null) {\n        OSecurityShared databaseSecurity =\n            (OSecurityShared)\n                ((ODatabaseDocumentInternal) session).getSharedContext().getSecurity();\n        user = databaseSecurity.getUserInternal(session, token.getToken().getUserName());\n      }\n      return user;\n    }\n    return super.authenticate(session, info);\n  }\n\n  @Override\n  public OSecurityUser authenticate(ODatabaseSession session, String username, String password) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public OSecurityUser getUser(String username) {\n    return null;\n  }\n\n  @Override\n  public boolean isAuthorized(String username, String resource) {\n    return false;\n  }\n\n  @Override\n  public boolean isSingleSignOnSupported() {\n    return false;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/134", "ground_truth": "\n    if (session == null) {\n      return null;\n    }\n\n    String dbName = session.getName();\n    OSecurityShared databaseSecurity =\n        (OSecurityShared) ((ODatabaseDocumentInternal) session).getSharedContext().getSecurity();\n    OUser user = databaseSecurity.getUserInternal(session, username);\n    if (user == null) {\n      return null;\n    }\n    if (user.getAccountStatus() != OSecurityUser.STATUSES.ACTIVE)\n      throw new OSecurityAccessException(dbName, \"User '\" + username + \"' is not active\");\n\n    // CHECK USER & PASSWORD\n    if (!user.checkPassword(password)) {\n      // WAIT A BIT TO AVOID BRUTE FORCE\n      try {\n        Thread.sleep(200);\n      } catch (InterruptedException ignore) {\n        Thread.currentThread().interrupt();\n      }\n      throw new OSecurityAccessException(\n          dbName, \"User or password not valid for database: '\" + dbName + \"'\");\n    }\n\n    return user;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "security", "authenticator", "ODatabaseUserAuthenticator.java"], "context_start_lineno": 0, "function_name": "authenticate", "left_context": "class ODatabaseUserAuthenticator extends OSecurityAuthenticatorAbstract {\n  private OTokenSign tokenSign;\n\n  @Override\n  public void config(ODocument jsonConfig, OSecuritySystem security) {\n    super.config(jsonConfig, security);\n    tokenSign = security.getTokenSign();\n  }\n\n  @Override\n  public OSecurityUser authenticate(ODatabaseSession session, OAuthenticationInfo info) {\n    if (info instanceof OUserPasswordAuthInfo) {\n      return authenticate(\n          session,\n          ((OUserPasswordAuthInfo) info).getUser(),\n          ((OUserPasswordAuthInfo) info).getPassword());\n    } else if (info instanceof OTokenAuthInfo) {\n      OParsedToken token = ((OTokenAuthInfo) info).getToken();\n\n      if (tokenSign != null && !tokenSign.verifyTokenSign(token)) {\n        throw new OTokenSecurityException(\"The token provided is expired\");\n      }\n      if (token.getToken().getIsValid() != true) {\n        throw new OSecurityAccessException(session.getName(), \"Token not valid\");\n      }\n\n      OUser user = token.getToken().getUser((ODatabaseDocumentInternal) session);\n      if (user == null && token.getToken().getUserName() != null) {\n        OSecurityShared databaseSecurity =\n            (OSecurityShared)\n                ((ODatabaseDocumentInternal) session).getSharedContext().getSecurity();\n        user = databaseSecurity.getUserInternal(session, token.getToken().getUserName());\n      }\n      return user;\n    }\n    return super.authenticate(session, info);\n  }\n\n  @Override\n  public OSecurityUser authenticate(ODatabaseSession session, String username, String password) {", "right_context": "}\n\n  @Override\n  public OSecurityUser getUser(String username) {\n    return null;\n  }\n\n  @Override\n  public boolean isAuthorized(String username, String resource) {\n    return false;\n  }\n\n  @Override\n  public boolean isSingleSignOnSupported() {\n    return false;\n  }\n}", "class_name": "ODatabaseUserAuthenticator", "return_type": "OSecurityUser", "parameters": [{"type": "ODatabaseSession", "name": "session"}, {"type": "String", "name": "username"}, {"type": "String", "name": "password"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OCommit38Request implements OBinaryRequest<OCommit37Response> {\n\n  private int txId;\n  private boolean hasContent;\n  private boolean usingLog;\n  private List<ORecordOperationRequest> operations;\n  private List<IndexChange> indexChanges;\n\n  public OCommit38Request() {}\n\n  public OCommit38Request(\n      int txId,\n      boolean hasContent,\n      boolean usingLong,\n      Iterable<ORecordOperation> operations,\n      Map<String, OTransactionIndexChanges> indexChanges) {\n    this.txId = txId;\n    this.hasContent = hasContent;\n    this.usingLog = usingLong;\n    if (hasContent) {\n      this.indexChanges = new ArrayList<>();\n      List<ORecordOperationRequest> netOperations = new ArrayList<>();\n      for (ORecordOperation txEntry : operations) {\n        if (txEntry.type == ORecordOperation.LOADED) continue;\n        ORecordOperationRequest request = new ORecordOperationRequest();\n        request.setType(txEntry.type);\n        request.setVersion(txEntry.getRecord().getVersion());\n        request.setId(txEntry.getRecord().getIdentity());\n        switch (txEntry.type) {\n          case ORecordOperation.CREATED:\n            request.setRecordType(ORecordInternal.getRecordType(txEntry.getRecord()));\n            request.setRecord(\n                ORecordSerializerNetworkV37Client.INSTANCE.toStream(txEntry.getRecord()));\n            request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            break;\n          case ORecordOperation.UPDATED:\n            if (ODocument.RECORD_TYPE == ORecordInternal.getRecordType(txEntry.getRecord())) {\n              request.setRecordType(ODocumentSerializerDelta.DELTA_RECORD_TYPE);\n              ODocumentSerializerDelta delta = ODocumentSerializerDelta.instance();\n              request.setRecord(delta.serializeDelta((ODocument) txEntry.getRecord()));\n              request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            } else {\n              request.setRecordType(ORecordInternal.getRecordType(txEntry.getRecord()));\n              request.setRecord(ORecordSerializerNetworkV37.INSTANCE.toStream(txEntry.getRecord()));\n              request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            }\n            break;\n        }\n        netOperations.add(request);\n      }\n      this.operations = netOperations;\n\n      for (Map.Entry<String, OTransactionIndexChanges> change : indexChanges.entrySet()) {\n        this.indexChanges.add(new IndexChange(change.getKey(), change.getValue()));\n      }\n    }\n  }\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    txId = channel.readInt();\n    hasContent = channel.readBoolean();\n    usingLog = channel.readBoolean();\n    if (hasContent) {\n      operations = new ArrayList<>();\n      byte hasEntry;\n      do {\n        hasEntry = channel.readByte();\n        if (hasEntry == 1) {\n          ORecordOperationRequest entry = OMessageHelper.readTransactionEntry(channel, serializer);\n          operations.add(entry);\n        }\n      } while (hasEntry == 1);\n\n      // RECEIVE MANUAL INDEX CHANGES\n      this.indexChanges =\n          OMessageHelper.readTransactionIndexChanges(\n              channel, (ORecordSerializerNetworkV37) serializer);\n    }\n  }\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.REQUEST_TX_COMMIT;\n  }\n\n  @Override\n  public OCommit37Response createResponse() {\n    return new OCommit37Response();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeCommit38(this);\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Commit\";\n  }\n\n  public int getTxId() {\n    return txId;\n  }\n\n  public List<IndexChange> getIndexChanges() {\n    return indexChanges;\n  }\n\n  public List<ORecordOperationRequest> getOperations() {\n    return operations;\n  }\n\n  public boolean isUsingLog() {\n    return usingLog;\n  }\n\n  public boolean isHasContent() {\n    return hasContent;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/135", "ground_truth": "\n    // from 3.0 the the serializer is bound to the protocol\n    ORecordSerializerNetworkV37Client serializer = ORecordSerializerNetworkV37Client.INSTANCE;\n    network.writeInt(txId);\n    network.writeBoolean(hasContent);\n    network.writeBoolean(usingLog);\n    if (hasContent) {\n      for (ORecordOperationRequest txEntry : operations) {\n        network.writeByte((byte) 1);\n        OMessageHelper.writeTransactionEntry(network, txEntry, serializer);\n      }\n\n      // END OF RECORD ENTRIES\n      network.writeByte((byte) 0);\n\n      // SEND MANUAL INDEX CHANGES\n      OMessageHelper.writeTransactionIndexChanges(network, serializer, indexChanges);\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "client", "src", "main", "java", "com", "orientechnologies", "orient", "client", "remote", "message", "OCommit38Request.java"], "context_start_lineno": 0, "function_name": "write", "left_context": "class OCommit38Request implements OBinaryRequest<OCommit37Response> {\n\n  private int txId;\n  private boolean hasContent;\n  private boolean usingLog;\n  private List<ORecordOperationRequest> operations;\n  private List<IndexChange> indexChanges;\n\n  public OCommit38Request() {}\n\n  public OCommit38Request(\n      int txId,\n      boolean hasContent,\n      boolean usingLong,\n      Iterable<ORecordOperation> operations,\n      Map<String, OTransactionIndexChanges> indexChanges) {\n    this.txId = txId;\n    this.hasContent = hasContent;\n    this.usingLog = usingLong;\n    if (hasContent) {\n      this.indexChanges = new ArrayList<>();\n      List<ORecordOperationRequest> netOperations = new ArrayList<>();\n      for (ORecordOperation txEntry : operations) {\n        if (txEntry.type == ORecordOperation.LOADED) continue;\n        ORecordOperationRequest request = new ORecordOperationRequest();\n        request.setType(txEntry.type);\n        request.setVersion(txEntry.getRecord().getVersion());\n        request.setId(txEntry.getRecord().getIdentity());\n        switch (txEntry.type) {\n          case ORecordOperation.CREATED:\n            request.setRecordType(ORecordInternal.getRecordType(txEntry.getRecord()));\n            request.setRecord(\n                ORecordSerializerNetworkV37Client.INSTANCE.toStream(txEntry.getRecord()));\n            request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            break;\n          case ORecordOperation.UPDATED:\n            if (ODocument.RECORD_TYPE == ORecordInternal.getRecordType(txEntry.getRecord())) {\n              request.setRecordType(ODocumentSerializerDelta.DELTA_RECORD_TYPE);\n              ODocumentSerializerDelta delta = ODocumentSerializerDelta.instance();\n              request.setRecord(delta.serializeDelta((ODocument) txEntry.getRecord()));\n              request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            } else {\n              request.setRecordType(ORecordInternal.getRecordType(txEntry.getRecord()));\n              request.setRecord(ORecordSerializerNetworkV37.INSTANCE.toStream(txEntry.getRecord()));\n              request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            }\n            break;\n        }\n        netOperations.add(request);\n      }\n      this.operations = netOperations;\n\n      for (Map.Entry<String, OTransactionIndexChanges> change : indexChanges.entrySet()) {\n        this.indexChanges.add(new IndexChange(change.getKey(), change.getValue()));\n      }\n    }\n  }\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {", "right_context": "}\n\n  @Override\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    txId = channel.readInt();\n    hasContent = channel.readBoolean();\n    usingLog = channel.readBoolean();\n    if (hasContent) {\n      operations = new ArrayList<>();\n      byte hasEntry;\n      do {\n        hasEntry = channel.readByte();\n        if (hasEntry == 1) {\n          ORecordOperationRequest entry = OMessageHelper.readTransactionEntry(channel, serializer);\n          operations.add(entry);\n        }\n      } while (hasEntry == 1);\n\n      // RECEIVE MANUAL INDEX CHANGES\n      this.indexChanges =\n          OMessageHelper.readTransactionIndexChanges(\n              channel, (ORecordSerializerNetworkV37) serializer);\n    }\n  }\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.REQUEST_TX_COMMIT;\n  }\n\n  @Override\n  public OCommit37Response createResponse() {\n    return new OCommit37Response();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeCommit38(this);\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Commit\";\n  }\n\n  public int getTxId() {\n    return txId;\n  }\n\n  public List<IndexChange> getIndexChanges() {\n    return indexChanges;\n  }\n\n  public List<ORecordOperationRequest> getOperations() {\n    return operations;\n  }\n\n  public boolean isUsingLog() {\n    return usingLog;\n  }\n\n  public boolean isHasContent() {\n    return hasContent;\n  }\n}", "class_name": "OCommit38Request", "return_type": "void", "parameters": [{"type": "OChannelDataOutput", "name": "network"}, {"type": "OStorageRemoteSession", "name": "session"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OTraverseProjectionItem extends SimpleNode {\n\n  protected OBaseIdentifier base;\n  protected OModifier modifier;\n\n  public OTraverseProjectionItem(int id) {\n    super(id);\n  }\n\n  public OTraverseProjectionItem(OrientSql p, int id) {\n    super(p, id);\n  }\n\n  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {\n    if (isStar()) {\n      return handleStar(iCurrentRecord, ctx);\n    }\n    Object result = base.execute(iCurrentRecord, ctx);\n    if (modifier != null) {\n      result = modifier.execute(iCurrentRecord, result, ctx);\n    }\n    return result;\n  }\n\n  private boolean isStar() {\n    return base.toString().equals(\"*\") && modifier == null;\n  }\n\n  public boolean refersToParent() {\n    if (base != null && base.refersToParent()) {\n      return true;\n    }\n    if (modifier != null && modifier.refersToParent()) {\n      return true;\n    }\n    return false;\n  }\n\n  private Object handleStar(OResult iCurrentRecord, OCommandContext ctx) {\n    Set<Object> result = new HashSet<>();\n    for (String prop : iCurrentRecord.getPropertyNames()) {\n      Object val = iCurrentRecord.getProperty(prop);\n      if (isOResult(val) || isValidIdentifiable(val)) {\n        result.add(val);\n\n      } else {\n        if (val instanceof Iterable) {\n          val = ((Iterable) val).iterator();\n        }\n        if (val instanceof Iterator) {\n          while (((Iterator) val).hasNext()) {\n            Object sub = ((Iterator) val).next();\n            if (isOResult(sub) || isValidIdentifiable(sub)) {\n              result.add(sub);\n            }\n          }\n        } else if (val instanceof OResultSet) {\n          while (((OResultSet) val).hasNext()) {\n            result.add(((OResultSet) val).next());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  private boolean isValidIdentifiable(Object val) {\n    if (!(val instanceof OIdentifiable)) {\n      return false;\n    }\n    return ((OIdentifiable) val).getIdentity().isPersistent();\n  }\n\n  private boolean isOResult(Object val) {\n    return val instanceof OResult;\n  }\n\n  public void toString(Map<Object, Object> params, StringBuilder builder) {\n\n    base.toString(params, builder);\n    if (modifier != null) {\n      modifier.toString(params, builder);\n    }\n  }\n\n  public void toGenericStatement(StringBuilder builder) {\n\n    base.toGenericStatement(builder);\n    if (modifier != null) {\n      modifier.toGenericStatement(builder);\n    }\n  }\n\n  public OTraverseProjectionItem copy() {\n    OTraverseProjectionItem result = new OTraverseProjectionItem(-1);\n    result.base = base == null ? null : base.copy();\n    result.modifier = modifier == null ? null : modifier.copy();\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public int hashCode() {\n    int result = (base != null ? base.hashCode() : 0);\n    result = 31 * result + (modifier != null ? modifier.hashCode() : 0);\n    return result;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/149", "ground_truth": "\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    OTraverseProjectionItem that = (OTraverseProjectionItem) o;\n\n    if (base != null ? !base.equals(that.base) : that.base != null) return false;\n    if (modifier != null ? !modifier.equals(that.modifier) : that.modifier != null) return false;\n\n    return true;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "parser", "OTraverseProjectionItem.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class OTraverseProjectionItem extends SimpleNode {\n\n  protected OBaseIdentifier base;\n  protected OModifier modifier;\n\n  public OTraverseProjectionItem(int id) {\n    super(id);\n  }\n\n  public OTraverseProjectionItem(OrientSql p, int id) {\n    super(p, id);\n  }\n\n  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {\n    if (isStar()) {\n      return handleStar(iCurrentRecord, ctx);\n    }\n    Object result = base.execute(iCurrentRecord, ctx);\n    if (modifier != null) {\n      result = modifier.execute(iCurrentRecord, result, ctx);\n    }\n    return result;\n  }\n\n  private boolean isStar() {\n    return base.toString().equals(\"*\") && modifier == null;\n  }\n\n  public boolean refersToParent() {\n    if (base != null && base.refersToParent()) {\n      return true;\n    }\n    if (modifier != null && modifier.refersToParent()) {\n      return true;\n    }\n    return false;\n  }\n\n  private Object handleStar(OResult iCurrentRecord, OCommandContext ctx) {\n    Set<Object> result = new HashSet<>();\n    for (String prop : iCurrentRecord.getPropertyNames()) {\n      Object val = iCurrentRecord.getProperty(prop);\n      if (isOResult(val) || isValidIdentifiable(val)) {\n        result.add(val);\n\n      } else {\n        if (val instanceof Iterable) {\n          val = ((Iterable) val).iterator();\n        }\n        if (val instanceof Iterator) {\n          while (((Iterator) val).hasNext()) {\n            Object sub = ((Iterator) val).next();\n            if (isOResult(sub) || isValidIdentifiable(sub)) {\n              result.add(sub);\n            }\n          }\n        } else if (val instanceof OResultSet) {\n          while (((OResultSet) val).hasNext()) {\n            result.add(((OResultSet) val).next());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  private boolean isValidIdentifiable(Object val) {\n    if (!(val instanceof OIdentifiable)) {\n      return false;\n    }\n    return ((OIdentifiable) val).getIdentity().isPersistent();\n  }\n\n  private boolean isOResult(Object val) {\n    return val instanceof OResult;\n  }\n\n  public void toString(Map<Object, Object> params, StringBuilder builder) {\n\n    base.toString(params, builder);\n    if (modifier != null) {\n      modifier.toString(params, builder);\n    }\n  }\n\n  public void toGenericStatement(StringBuilder builder) {\n\n    base.toGenericStatement(builder);\n    if (modifier != null) {\n      modifier.toGenericStatement(builder);\n    }\n  }\n\n  public OTraverseProjectionItem copy() {\n    OTraverseProjectionItem result = new OTraverseProjectionItem(-1);\n    result.base = base == null ? null : base.copy();\n    result.modifier = modifier == null ? null : modifier.copy();\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object o) {", "right_context": "}\n\n  @Override\n  public int hashCode() {\n    int result = (base != null ? base.hashCode() : 0);\n    result = 31 * result + (modifier != null ? modifier.hashCode() : 0);\n    return result;\n  }\n}", "class_name": "OTraverseProjectionItem", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OCommandExecutorSQLCreateVertex extends OCommandExecutorSQLSetAware\n    implements OCommandDistributedReplicateRequest {\n  public static final String NAME = \"CREATE VERTEX\";\n  private OClass clazz;\n  private String clusterName;\n  private List<OPair<String, Object>> fields;\n\n  @SuppressWarnings(\"unchecked\")\n  public OCommandExecutorSQLCreateVertex parse(final OCommandRequest iRequest) {\n\n    final OCommandRequestText textRequest = (OCommandRequestText) iRequest;\n\n    String queryText = textRequest.getText();\n    String originalQuery = queryText;\n    try {\n      queryText = preParse(queryText, iRequest);\n      textRequest.setText(queryText);\n\n      final ODatabaseDocument database = getDatabase();\n\n      init((OCommandRequestText) iRequest);\n\n      String className = null;\n\n      parserRequiredKeyword(\"CREATE\");\n      parserRequiredKeyword(\"VERTEX\");\n\n      String temp = parseOptionalWord(true);\n\n      while (temp != null) {\n        if (temp.equals(\"CLUSTER\")) {\n          clusterName = parserRequiredWord(false);\n\n        } else if (temp.equals(KEYWORD_SET)) {\n          fields = new ArrayList<OPair<String, Object>>();\n          parseSetFields(clazz, fields);\n\n        } else if (temp.equals(KEYWORD_CONTENT)) {\n          parseContent();\n\n        } else if (className == null && temp.length() > 0) {\n          className = temp;\n          if (className == null)\n            // ASSIGN DEFAULT CLASS\n            className = \"V\";\n\n          // GET/CHECK CLASS NAME\n          clazz =\n              ((OMetadataInternal) database.getMetadata())\n                  .getImmutableSchemaSnapshot()\n                  .getClass(className);\n          if (clazz == null)\n            throw new OCommandSQLParsingException(\"Class '\" + className + \"' was not found\");\n        }\n\n        temp = parserOptionalWord(true);\n        if (parserIsEnded()) break;\n      }\n\n      if (className == null) {\n        // ASSIGN DEFAULT CLASS\n        className = \"V\";\n\n        // GET/CHECK CLASS NAME\n        clazz =\n            ((OMetadataInternal) database.getMetadata())\n                .getImmutableSchemaSnapshot()\n                .getClass(className);\n        if (clazz == null)\n          throw new OCommandSQLParsingException(\"Class '\" + className + \"' was not found\");\n      }\n    } finally {\n      textRequest.setText(originalQuery);\n    }\n    return this;\n  }\n\n  /** Execute the command and return the ODocument object created. */\n  public Object execute(final Map<Object, Object> iArgs) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public DISTRIBUTED_EXECUTION_MODE getDistributedExecutionMode() {\n    return DISTRIBUTED_EXECUTION_MODE.LOCAL;\n  }\n\n  @Override\n  public QUORUM_TYPE getQuorumType() {\n    return QUORUM_TYPE.WRITE;\n  }\n\n  @Override\n  public Set<String> getInvolvedClusters() {\n    if (clazz != null)\n      return Collections.singleton(\n          getDatabase().getClusterNameById(clazz.getClusterSelection().getCluster(clazz, null)));\n    else if (clusterName != null)\n      return getInvolvedClustersOfClusters(Collections.singleton(clusterName));\n\n    return Collections.EMPTY_SET;\n  }\n\n  @Override\n  public String getSyntax() {\n    return \"CREATE VERTEX [<class>] [CLUSTER <cluster>] [SET <field> = <expression>[,]*]\";\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/212", "ground_truth": "\n    if (clazz == null)\n      throw new OCommandExecutionException(\n          \"Cannot execute the command because it has not been parsed yet\");\n\n    // CREATE VERTEX DOES NOT HAVE TO BE IN TX\n    final OVertex vertex = getDatabase().newVertex(clazz);\n\n    if (fields != null)\n      // EVALUATE FIELDS\n      for (final OPair<String, Object> f : fields) {\n        if (f.getValue() instanceof OSQLFunctionRuntime)\n          f.setValue(\n              ((OSQLFunctionRuntime) f.getValue()).getValue(vertex.getRecord(), null, context));\n      }\n\n    OSQLHelper.bindParameters(vertex.getRecord(), fields, new OCommandParameters(iArgs), context);\n\n    if (content != null) ((ODocument) vertex.getRecord()).merge(content, true, false);\n\n    if (clusterName != null) vertex.save(clusterName);\n    else vertex.save();\n\n    return vertex.getRecord();\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "OCommandExecutorSQLCreateVertex.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class OCommandExecutorSQLCreateVertex extends OCommandExecutorSQLSetAware\n    implements OCommandDistributedReplicateRequest {\n  public static final String NAME = \"CREATE VERTEX\";\n  private OClass clazz;\n  private String clusterName;\n  private List<OPair<String, Object>> fields;\n\n  @SuppressWarnings(\"unchecked\")\n  public OCommandExecutorSQLCreateVertex parse(final OCommandRequest iRequest) {\n\n    final OCommandRequestText textRequest = (OCommandRequestText) iRequest;\n\n    String queryText = textRequest.getText();\n    String originalQuery = queryText;\n    try {\n      queryText = preParse(queryText, iRequest);\n      textRequest.setText(queryText);\n\n      final ODatabaseDocument database = getDatabase();\n\n      init((OCommandRequestText) iRequest);\n\n      String className = null;\n\n      parserRequiredKeyword(\"CREATE\");\n      parserRequiredKeyword(\"VERTEX\");\n\n      String temp = parseOptionalWord(true);\n\n      while (temp != null) {\n        if (temp.equals(\"CLUSTER\")) {\n          clusterName = parserRequiredWord(false);\n\n        } else if (temp.equals(KEYWORD_SET)) {\n          fields = new ArrayList<OPair<String, Object>>();\n          parseSetFields(clazz, fields);\n\n        } else if (temp.equals(KEYWORD_CONTENT)) {\n          parseContent();\n\n        } else if (className == null && temp.length() > 0) {\n          className = temp;\n          if (className == null)\n            // ASSIGN DEFAULT CLASS\n            className = \"V\";\n\n          // GET/CHECK CLASS NAME\n          clazz =\n              ((OMetadataInternal) database.getMetadata())\n                  .getImmutableSchemaSnapshot()\n                  .getClass(className);\n          if (clazz == null)\n            throw new OCommandSQLParsingException(\"Class '\" + className + \"' was not found\");\n        }\n\n        temp = parserOptionalWord(true);\n        if (parserIsEnded()) break;\n      }\n\n      if (className == null) {\n        // ASSIGN DEFAULT CLASS\n        className = \"V\";\n\n        // GET/CHECK CLASS NAME\n        clazz =\n            ((OMetadataInternal) database.getMetadata())\n                .getImmutableSchemaSnapshot()\n                .getClass(className);\n        if (clazz == null)\n          throw new OCommandSQLParsingException(\"Class '\" + className + \"' was not found\");\n      }\n    } finally {\n      textRequest.setText(originalQuery);\n    }\n    return this;\n  }\n\n  /** Execute the command and return the ODocument object created. */\n  public Object execute(final Map<Object, Object> iArgs) {", "right_context": "}\n\n  @Override\n  public DISTRIBUTED_EXECUTION_MODE getDistributedExecutionMode() {\n    return DISTRIBUTED_EXECUTION_MODE.LOCAL;\n  }\n\n  @Override\n  public QUORUM_TYPE getQuorumType() {\n    return QUORUM_TYPE.WRITE;\n  }\n\n  @Override\n  public Set<String> getInvolvedClusters() {\n    if (clazz != null)\n      return Collections.singleton(\n          getDatabase().getClusterNameById(clazz.getClusterSelection().getCluster(clazz, null)));\n    else if (clusterName != null)\n      return getInvolvedClustersOfClusters(Collections.singleton(clusterName));\n\n    return Collections.EMPTY_SET;\n  }\n\n  @Override\n  public String getSyntax() {\n    return \"CREATE VERTEX [<class>] [CLUSTER <cluster>] [SET <field> = <expression>[,]*]\";\n  }\n}", "class_name": "OCommandExecutorSQLCreateVertex", "return_type": "Object", "parameters": [{"type": "Map<Object,Object>", "name": "iArgs"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OTraverseContext extends OBasicCommandContext {\n  private Memory memory = new StackMemory();\n  private Set<ORID> history = new HashSet<ORID>();\n\n  private OTraverseAbstractProcess<?> currentProcess;\n\n  public void push(final OTraverseAbstractProcess<?> iProcess) {\n    memory.add(iProcess);\n  }\n\n  public Map<String, Object> getVariables() {\n    final HashMap<String, Object> map = new HashMap<String, Object>();\n    map.put(\"depth\", getDepth());\n    map.put(\"path\", getPath());\n    map.put(\"stack\", memory.getUnderlying());\n    // DELEGATE\n    map.putAll(super.getVariables());\n    return map;\n  }\n\n  public Object getVariable(final String iName) {\n    final String name = iName.trim().toUpperCase(Locale.ENGLISH);\n\n    if (\"DEPTH\".startsWith(name)) return getDepth();\n    else if (name.startsWith(\"PATH\"))\n      return ODocumentHelper.getFieldValue(getPath(), iName.substring(\"PATH\".length()));\n    else if (name.startsWith(\"STACK\")) {\n\n      Object result =\n          ODocumentHelper.getFieldValue(memory.getUnderlying(), iName.substring(\"STACK\".length()));\n      if (result instanceof ArrayDeque) {\n        result = ((ArrayDeque) result).clone();\n      }\n      return result;\n    } else if (name.startsWith(\"HISTORY\"))\n      return ODocumentHelper.getFieldValue(history, iName.substring(\"HISTORY\".length()));\n    else\n      // DELEGATE\n      return super.getVariable(iName);\n  }\n\n  public void pop(final OIdentifiable currentRecord) {\n    if (currentRecord != null) {\n      final ORID rid = currentRecord.getIdentity();\n      if (!history.remove(rid))\n        OLogManager.instance().warn(this, \"Element '\" + rid + \"' not found in traverse history\");\n    }\n\n    try {\n      memory.dropFrame();\n    } catch (NoSuchElementException e) {\n      throw new IllegalStateException(\"Traverse stack is empty\", e);\n    }\n  }\n\n  public OTraverseAbstractProcess<?> next() {\n    currentProcess = memory.next();\n    return currentProcess;\n  }\n\n  public boolean isEmpty() {\n    return memory.isEmpty();\n  }\n\n  public void reset() {\n    memory.clear();\n  }\n\n  public boolean isAlreadyTraversed(final OIdentifiable identity, final int iLevel) {\n    if (history.contains(identity.getIdentity())) return true;\n\n    // final int[] l = history.get(identity.getIdentity());\n    // if (l == null)\n    // return false;\n    //\n    // for (int i = 0; i < l.length && l[i] > -1; ++i)\n    // if (l[i] == iLevel)\n    // return true;\n\n    return false;\n  }\n\n  public void addTraversed(final OIdentifiable identity, final int iLevel) {<FILL_FUNCTION_BODY>}\n\n  public String getPath() {\n    return currentProcess == null ? \"\" : currentProcess.getPath().toString();\n  }\n\n  public int getDepth() {\n    return currentProcess == null ? 0 : currentProcess.getPath().getDepth();\n  }\n\n  public void setStrategy(final OTraverse.STRATEGY strategy) {\n    if (strategy == OTraverse.STRATEGY.BREADTH_FIRST) memory = new QueueMemory(memory);\n    else memory = new StackMemory(memory);\n  }\n\n  private interface Memory {\n    void add(OTraverseAbstractProcess<?> iProcess);\n\n    OTraverseAbstractProcess<?> next();\n\n    void dropFrame();\n\n    void clear();\n\n    Collection<OTraverseAbstractProcess<?>> getUnderlying();\n\n    boolean isEmpty();\n  }\n\n  private abstract static class AbstractMemory implements Memory {\n    protected final Deque<OTraverseAbstractProcess<?>> deque;\n\n    public AbstractMemory() {\n      deque = new ArrayDeque<OTraverseAbstractProcess<?>>();\n    }\n\n    public AbstractMemory(final Memory memory) {\n      deque = new ArrayDeque<OTraverseAbstractProcess<?>>(memory.getUnderlying());\n    }\n\n    @Override\n    public OTraverseAbstractProcess<?> next() {\n      return deque.peek();\n    }\n\n    @Override\n    public void dropFrame() {\n      deque.removeFirst();\n    }\n\n    @Override\n    public void clear() {\n      deque.clear();\n    }\n\n    @Override\n    public boolean isEmpty() {\n      return deque.isEmpty();\n    }\n\n    @Override\n    public Collection<OTraverseAbstractProcess<?>> getUnderlying() {\n      return deque;\n    }\n  }\n\n  private static class StackMemory extends AbstractMemory {\n    public StackMemory() {\n      super();\n    }\n\n    public StackMemory(final Memory memory) {\n      super(memory);\n    }\n\n    @Override\n    public void add(final OTraverseAbstractProcess<?> iProcess) {\n      deque.push(iProcess);\n    }\n  }\n\n  private static class QueueMemory extends AbstractMemory {\n    public QueueMemory(final Memory memory) {\n      super(memory);\n    }\n\n    @Override\n    public void add(final OTraverseAbstractProcess<?> iProcess) {\n      deque.addLast(iProcess);\n    }\n\n    public ODatabaseSession getDatabase() {\n      return ODatabaseRecordThreadLocal.instance().getIfDefined();\n    }\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/231", "ground_truth": "\n    history.add(identity.getIdentity());\n\n    // final int[] l = history.get(identity.getIdentity());\n    // if (l == null) {\n    // final int[] array = new int[BUCKET_SIZE];\n    // array[0] = iLevel;\n    // Arrays.fill(array, 1, BUCKET_SIZE, -1);\n    // history.put(identity.getIdentity(), array);\n    // } else {\n    // if (l[l.length - 1] > -1) {\n    // // ARRAY FULL, ENLARGE IT\n    // final int[] array = Arrays.copyOf(l, l.length + BUCKET_SIZE);\n    // array[l.length] = iLevel;\n    // Arrays.fill(array, l.length + 1, array.length, -1);\n    // history.put(identity.getIdentity(), array);\n    // } else {\n    // for (int i = l.length - 2; i >= 0; --i) {\n    // if (l[i] > -1) {\n    // l[i + 1] = iLevel;\n    // break;\n    // }\n    // }\n    // }\n    // }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "command", "traverse", "OTraverseContext.java"], "context_start_lineno": 0, "function_name": "addTraversed", "left_context": "class OTraverseContext extends OBasicCommandContext {\n  private Memory memory = new StackMemory();\n  private Set<ORID> history = new HashSet<ORID>();\n\n  private OTraverseAbstractProcess<?> currentProcess;\n\n  public void push(final OTraverseAbstractProcess<?> iProcess) {\n    memory.add(iProcess);\n  }\n\n  public Map<String, Object> getVariables() {\n    final HashMap<String, Object> map = new HashMap<String, Object>();\n    map.put(\"depth\", getDepth());\n    map.put(\"path\", getPath());\n    map.put(\"stack\", memory.getUnderlying());\n    // DELEGATE\n    map.putAll(super.getVariables());\n    return map;\n  }\n\n  public Object getVariable(final String iName) {\n    final String name = iName.trim().toUpperCase(Locale.ENGLISH);\n\n    if (\"DEPTH\".startsWith(name)) return getDepth();\n    else if (name.startsWith(\"PATH\"))\n      return ODocumentHelper.getFieldValue(getPath(), iName.substring(\"PATH\".length()));\n    else if (name.startsWith(\"STACK\")) {\n\n      Object result =\n          ODocumentHelper.getFieldValue(memory.getUnderlying(), iName.substring(\"STACK\".length()));\n      if (result instanceof ArrayDeque) {\n        result = ((ArrayDeque) result).clone();\n      }\n      return result;\n    } else if (name.startsWith(\"HISTORY\"))\n      return ODocumentHelper.getFieldValue(history, iName.substring(\"HISTORY\".length()));\n    else\n      // DELEGATE\n      return super.getVariable(iName);\n  }\n\n  public void pop(final OIdentifiable currentRecord) {\n    if (currentRecord != null) {\n      final ORID rid = currentRecord.getIdentity();\n      if (!history.remove(rid))\n        OLogManager.instance().warn(this, \"Element '\" + rid + \"' not found in traverse history\");\n    }\n\n    try {\n      memory.dropFrame();\n    } catch (NoSuchElementException e) {\n      throw new IllegalStateException(\"Traverse stack is empty\", e);\n    }\n  }\n\n  public OTraverseAbstractProcess<?> next() {\n    currentProcess = memory.next();\n    return currentProcess;\n  }\n\n  public boolean isEmpty() {\n    return memory.isEmpty();\n  }\n\n  public void reset() {\n    memory.clear();\n  }\n\n  public boolean isAlreadyTraversed(final OIdentifiable identity, final int iLevel) {\n    if (history.contains(identity.getIdentity())) return true;\n\n    // final int[] l = history.get(identity.getIdentity());\n    // if (l == null)\n    // return false;\n    //\n    // for (int i = 0; i < l.length && l[i] > -1; ++i)\n    // if (l[i] == iLevel)\n    // return true;\n\n    return false;\n  }\n\n  public void addTraversed(final OIdentifiable identity, final int iLevel) {", "right_context": "}\n\n  public String getPath() {\n    return currentProcess == null ? \"\" : currentProcess.getPath().toString();\n  }\n\n  public int getDepth() {\n    return currentProcess == null ? 0 : currentProcess.getPath().getDepth();\n  }\n\n  public void setStrategy(final OTraverse.STRATEGY strategy) {\n    if (strategy == OTraverse.STRATEGY.BREADTH_FIRST) memory = new QueueMemory(memory);\n    else memory = new StackMemory(memory);\n  }\n\n  private interface Memory {\n    void add(OTraverseAbstractProcess<?> iProcess);\n\n    OTraverseAbstractProcess<?> next();\n\n    void dropFrame();\n\n    void clear();\n\n    Collection<OTraverseAbstractProcess<?>> getUnderlying();\n\n    boolean isEmpty();\n  }\n\n  private abstract static class AbstractMemory implements Memory {\n    protected final Deque<OTraverseAbstractProcess<?>> deque;\n\n    public AbstractMemory() {\n      deque = new ArrayDeque<OTraverseAbstractProcess<?>>();\n    }\n\n    public AbstractMemory(final Memory memory) {\n      deque = new ArrayDeque<OTraverseAbstractProcess<?>>(memory.getUnderlying());\n    }\n\n    @Override\n    public OTraverseAbstractProcess<?> next() {\n      return deque.peek();\n    }\n\n    @Override\n    public void dropFrame() {\n      deque.removeFirst();\n    }\n\n    @Override\n    public void clear() {\n      deque.clear();\n    }\n\n    @Override\n    public boolean isEmpty() {\n      return deque.isEmpty();\n    }\n\n    @Override\n    public Collection<OTraverseAbstractProcess<?>> getUnderlying() {\n      return deque;\n    }\n  }\n\n  private static class StackMemory extends AbstractMemory {\n    public StackMemory() {\n      super();\n    }\n\n    public StackMemory(final Memory memory) {\n      super(memory);\n    }\n\n    @Override\n    public void add(final OTraverseAbstractProcess<?> iProcess) {\n      deque.push(iProcess);\n    }\n  }\n\n  private static class QueueMemory extends AbstractMemory {\n    public QueueMemory(final Memory memory) {\n      super(memory);\n    }\n\n    @Override\n    public void add(final OTraverseAbstractProcess<?> iProcess) {\n      deque.addLast(iProcess);\n    }\n\n    public ODatabaseSession getDatabase() {\n      return ODatabaseRecordThreadLocal.instance().getIfDefined();\n    }\n  }\n}", "class_name": "OTraverseContext", "return_type": "void", "parameters": [{"type": "OIdentifiable", "name": "identity"}, {"type": "int", "name": "iLevel"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OSubscribeLiveQueryRequest implements OBinaryRequest<OSubscribeLiveQueryResponse> {\n\n  private String query;\n  private Map<String, Object> params;\n  private boolean namedParams;\n\n  public OSubscribeLiveQueryRequest(String query, Map<String, Object> params) {\n    this.query = query;\n    this.params = params;\n    this.namedParams = true;\n  }\n\n  public OSubscribeLiveQueryRequest(String query, Object[] params) {\n    this.query = query;\n    this.params = OStorageRemote.paramsArrayToParamsMap(params);\n    this.namedParams = false;\n  }\n\n  public OSubscribeLiveQueryRequest() {}\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    this.query = channel.readString();\n    ODocument paramsDoc = new ODocument();\n    byte[] bytes = channel.readBytes();\n    serializer.fromStream(bytes, paramsDoc, null);\n    this.params = paramsDoc.field(\"params\");\n    this.namedParams = channel.readBoolean();\n  }\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.SUBSCRIBE_PUSH_LIVE_QUERY;\n  }\n\n  @Override\n  public OSubscribeLiveQueryResponse createResponse() {\n    return new OSubscribeLiveQueryResponse();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeSubscribeLiveQuery(this);\n  }\n\n  @Override\n  public String getDescription() {\n    return null;\n  }\n\n  public String getQuery() {\n    return query;\n  }\n\n  public Map<String, Object> getParams() {\n    return params;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/232", "ground_truth": "\n    ORecordSerializerNetworkV37Client serializer = new ORecordSerializerNetworkV37Client();\n    network.writeString(query);\n    // params\n    ODocument parms = new ODocument();\n    parms.field(\"params\", this.params);\n\n    byte[] bytes = OMessageHelper.getRecordBytes(parms, serializer);\n    network.writeBytes(bytes);\n    network.writeBoolean(namedParams);\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "client", "src", "main", "java", "com", "orientechnologies", "orient", "client", "remote", "message", "OSubscribeLiveQueryRequest.java"], "context_start_lineno": 0, "function_name": "write", "left_context": "class OSubscribeLiveQueryRequest implements OBinaryRequest<OSubscribeLiveQueryResponse> {\n\n  private String query;\n  private Map<String, Object> params;\n  private boolean namedParams;\n\n  public OSubscribeLiveQueryRequest(String query, Map<String, Object> params) {\n    this.query = query;\n    this.params = params;\n    this.namedParams = true;\n  }\n\n  public OSubscribeLiveQueryRequest(String query, Object[] params) {\n    this.query = query;\n    this.params = OStorageRemote.paramsArrayToParamsMap(params);\n    this.namedParams = false;\n  }\n\n  public OSubscribeLiveQueryRequest() {}\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {", "right_context": "}\n\n  @Override\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    this.query = channel.readString();\n    ODocument paramsDoc = new ODocument();\n    byte[] bytes = channel.readBytes();\n    serializer.fromStream(bytes, paramsDoc, null);\n    this.params = paramsDoc.field(\"params\");\n    this.namedParams = channel.readBoolean();\n  }\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.SUBSCRIBE_PUSH_LIVE_QUERY;\n  }\n\n  @Override\n  public OSubscribeLiveQueryResponse createResponse() {\n    return new OSubscribeLiveQueryResponse();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeSubscribeLiveQuery(this);\n  }\n\n  @Override\n  public String getDescription() {\n    return null;\n  }\n\n  public String getQuery() {\n    return query;\n  }\n\n  public Map<String, Object> getParams() {\n    return params;\n  }\n}", "class_name": "OSubscribeLiveQueryRequest", "return_type": "void", "parameters": [{"type": "OChannelDataOutput", "name": "network"}, {"type": "OStorageRemoteSession", "name": "session"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OLockKeySource.java\n// --------------------------------------------------\n// SortedSet<OTransactionUniqueKey> getUniqueKeys();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OTransactionPhase1Task.java\n// --------------------------------------------------\n// @Override public SortedSet<OTransactionUniqueKey> getUniqueKeys(){\n//   return uniqueIndexKeys;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OTransactionPhase2Task.java\n// --------------------------------------------------\n// @Override public SortedSet<OTransactionUniqueKey> getUniqueKeys(){\n//   return uniqueIndexKeys;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OLocalKeySource implements OLockKeySource {\n  private final OTransactionId txId;\n  private final OTransactionInternal iTx;\n  private final ODatabaseDocumentDistributed database;\n\n  public OLocalKeySource(\n      OTransactionId txId, OTransactionInternal iTx, ODatabaseDocumentDistributed database) {\n    this.txId = txId;\n    this.iTx = iTx;\n    this.database = database;\n  }\n\n  @Override\n  public SortedSet<OTransactionUniqueKey> getUniqueKeys() {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public OTransactionId getTransactionId() {\n    return txId;\n  }\n\n  @Override\n  public SortedSet<ORID> getRids() {\n    SortedSet<ORID> set = new TreeSet<ORID>();\n    for (ORecordOperation operation : iTx.getRecordOperations()) {\n      OTransactionPhase1Task.mapRid(set, operation);\n    }\n    return set;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/244", "ground_truth": "\n    TreeSet<OTransactionUniqueKey> uniqueIndexKeys = new TreeSet<>();\n    iTx.getIndexOperations()\n        .forEach(\n            (index, changes) -> {\n              OIndexInternal resolvedIndex =\n                  changes.resolveAssociatedIndex(\n                      index, database.getMetadata().getIndexManagerInternal(), database);\n              if (resolvedIndex.isUnique()) {\n                for (Object keyWithChange : changes.changesPerKey.keySet()) {\n                  Object keyChange = OTransactionPhase1Task.mapKey(keyWithChange);\n                  uniqueIndexKeys.add(new OTransactionUniqueKey(index, keyChange, 0));\n                }\n                if (!changes.nullKeyChanges.isEmpty()) {\n                  uniqueIndexKeys.add(new OTransactionUniqueKey(index, null, 0));\n                }\n              }\n            });\n    return uniqueIndexKeys;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "distributed", "src", "main", "java", "com", "orientechnologies", "orient", "server", "distributed", "impl", "OLocalKeySource.java"], "context_start_lineno": 0, "function_name": "getUniqueKeys", "left_context": "class OLocalKeySource implements OLockKeySource {\n  private final OTransactionId txId;\n  private final OTransactionInternal iTx;\n  private final ODatabaseDocumentDistributed database;\n\n  public OLocalKeySource(\n      OTransactionId txId, OTransactionInternal iTx, ODatabaseDocumentDistributed database) {\n    this.txId = txId;\n    this.iTx = iTx;\n    this.database = database;\n  }\n\n  @Override\n  public SortedSet<OTransactionUniqueKey> getUniqueKeys() {", "right_context": "}\n\n  @Override\n  public OTransactionId getTransactionId() {\n    return txId;\n  }\n\n  @Override\n  public SortedSet<ORID> getRids() {\n    SortedSet<ORID> set = new TreeSet<ORID>();\n    for (ORecordOperation operation : iTx.getRecordOperations()) {\n      OTransactionPhase1Task.mapRid(set, operation);\n    }\n    return set;\n  }\n}", "class_name": "OLocalKeySource", "return_type": "SortedSet<OTransactionUniqueKey>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FetchTemporaryFromTxStep extends AbstractExecutionStep {\n\n  private String className;\n\n  private Object order;\n\n  public FetchTemporaryFromTxStep(OCommandContext ctx, String className, boolean profilingEnabled) {\n    super(ctx, profilingEnabled);\n    this.className = className;\n  }\n\n  @Override\n  public OExecutionStream internalStart(OCommandContext ctx) throws OTimeoutException {\n    getPrev().ifPresent(x -> x.start(ctx).close(ctx));\n    Iterator<ORecord> data = null;\n    data = init(ctx);\n    if (data == null) {\n      data = Collections.emptyIterator();\n    }\n    OExecutionStream resultSet = OExecutionStream.iterator((Iterator) data).map(this::setContext);\n    return resultSet;\n  }\n\n  private OResult setContext(OResult result, OCommandContext context) {\n    context.setVariable(\"$current\", result);\n    return result;\n  }\n\n  private Iterator<ORecord> init(OCommandContext ctx) {\n    Iterable<? extends ORecordOperation> iterable =\n        ctx.getDatabase().getTransaction().getRecordOperations();\n\n    List<ORecord> records = new ArrayList<>();\n    if (iterable != null) {\n      for (ORecordOperation op : iterable) {\n        ORecord record = op.getRecord();\n        if (matchesClass(record, className) && !hasCluster(record)) records.add(record);\n      }\n    }\n    if (order == FetchFromClusterExecutionStep.ORDER_ASC) {\n      Collections.sort(\n          records,\n          new Comparator<ORecord>() {\n            @Override\n            public int compare(ORecord o1, ORecord o2) {\n              long p1 = o1.getIdentity().getClusterPosition();\n              long p2 = o2.getIdentity().getClusterPosition();\n              if (p1 == p2) {\n                return 0;\n              } else if (p1 > p2) {\n                return 1;\n              } else {\n                return -1;\n              }\n            }\n          });\n    } else {\n      Collections.sort(\n          records,\n          new Comparator<ORecord>() {\n            @Override\n            public int compare(ORecord o1, ORecord o2) {\n              long p1 = o1.getIdentity().getClusterPosition();\n              long p2 = o2.getIdentity().getClusterPosition();\n              if (p1 == p2) {\n                return 0;\n              } else if (p1 > p2) {\n                return -1;\n              } else {\n                return 1;\n              }\n            }\n          });\n    }\n    return records.iterator();\n  }\n\n  private boolean hasCluster(ORecord record) {\n    ORID rid = record.getIdentity();\n    if (rid == null) {\n      return false;\n    }\n    if (rid.getClusterId() < 0) {\n      return false;\n    }\n    return true;\n  }\n\n  private boolean matchesClass(ORecord record, String className) {\n    ORecord doc = record.getRecord();\n    if (!(doc instanceof ODocument)) {\n      return false;\n    }\n\n    OClass schema = ODocumentInternal.getImmutableSchemaClass(((ODocument) doc));\n    if (schema == null) return className == null;\n    else if (schema.getName().equals(className)) {\n      return true;\n    } else if (schema.isSubClassOf(className)) {\n      return true;\n    }\n    return false;\n  }\n\n  public void setOrder(Object order) {\n    this.order = order;\n  }\n\n  @Override\n  public String prettyPrint(int depth, int indent) {\n    String spaces = OExecutionStepInternal.getIndent(depth, indent);\n    StringBuilder result = new StringBuilder();\n    result.append(spaces);\n    result.append(\"+ FETCH NEW RECORDS FROM CURRENT TRANSACTION SCOPE (if any)\");\n    if (profilingEnabled) {\n      result.append(\" (\" + getCostFormatted() + \")\");\n    }\n    return result.toString();\n  }\n\n  @Override\n  public OResult serialize() {\n    OResultInternal result = OExecutionStepInternal.basicSerialize(this);\n    result.setProperty(\"className\", className);\n    return result;\n  }\n\n  @Override\n  public void deserialize(OResult fromResult) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public boolean canBeCached() {\n    return true;\n  }\n\n  @Override\n  public OExecutionStep copy(OCommandContext ctx) {\n    FetchTemporaryFromTxStep result =\n        new FetchTemporaryFromTxStep(ctx, this.className, profilingEnabled);\n    return result;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/281", "ground_truth": "\n    try {\n      OExecutionStepInternal.basicDeserialize(fromResult, this);\n      className = fromResult.getProperty(\"className\");\n    } catch (Exception e) {\n      throw OException.wrapException(new OCommandExecutionException(\"\"), e);\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "executor", "FetchTemporaryFromTxStep.java"], "context_start_lineno": 0, "function_name": "deserialize", "left_context": "class FetchTemporaryFromTxStep extends AbstractExecutionStep {\n\n  private String className;\n\n  private Object order;\n\n  public FetchTemporaryFromTxStep(OCommandContext ctx, String className, boolean profilingEnabled) {\n    super(ctx, profilingEnabled);\n    this.className = className;\n  }\n\n  @Override\n  public OExecutionStream internalStart(OCommandContext ctx) throws OTimeoutException {\n    getPrev().ifPresent(x -> x.start(ctx).close(ctx));\n    Iterator<ORecord> data = null;\n    data = init(ctx);\n    if (data == null) {\n      data = Collections.emptyIterator();\n    }\n    OExecutionStream resultSet = OExecutionStream.iterator((Iterator) data).map(this::setContext);\n    return resultSet;\n  }\n\n  private OResult setContext(OResult result, OCommandContext context) {\n    context.setVariable(\"$current\", result);\n    return result;\n  }\n\n  private Iterator<ORecord> init(OCommandContext ctx) {\n    Iterable<? extends ORecordOperation> iterable =\n        ctx.getDatabase().getTransaction().getRecordOperations();\n\n    List<ORecord> records = new ArrayList<>();\n    if (iterable != null) {\n      for (ORecordOperation op : iterable) {\n        ORecord record = op.getRecord();\n        if (matchesClass(record, className) && !hasCluster(record)) records.add(record);\n      }\n    }\n    if (order == FetchFromClusterExecutionStep.ORDER_ASC) {\n      Collections.sort(\n          records,\n          new Comparator<ORecord>() {\n            @Override\n            public int compare(ORecord o1, ORecord o2) {\n              long p1 = o1.getIdentity().getClusterPosition();\n              long p2 = o2.getIdentity().getClusterPosition();\n              if (p1 == p2) {\n                return 0;\n              } else if (p1 > p2) {\n                return 1;\n              } else {\n                return -1;\n              }\n            }\n          });\n    } else {\n      Collections.sort(\n          records,\n          new Comparator<ORecord>() {\n            @Override\n            public int compare(ORecord o1, ORecord o2) {\n              long p1 = o1.getIdentity().getClusterPosition();\n              long p2 = o2.getIdentity().getClusterPosition();\n              if (p1 == p2) {\n                return 0;\n              } else if (p1 > p2) {\n                return -1;\n              } else {\n                return 1;\n              }\n            }\n          });\n    }\n    return records.iterator();\n  }\n\n  private boolean hasCluster(ORecord record) {\n    ORID rid = record.getIdentity();\n    if (rid == null) {\n      return false;\n    }\n    if (rid.getClusterId() < 0) {\n      return false;\n    }\n    return true;\n  }\n\n  private boolean matchesClass(ORecord record, String className) {\n    ORecord doc = record.getRecord();\n    if (!(doc instanceof ODocument)) {\n      return false;\n    }\n\n    OClass schema = ODocumentInternal.getImmutableSchemaClass(((ODocument) doc));\n    if (schema == null) return className == null;\n    else if (schema.getName().equals(className)) {\n      return true;\n    } else if (schema.isSubClassOf(className)) {\n      return true;\n    }\n    return false;\n  }\n\n  public void setOrder(Object order) {\n    this.order = order;\n  }\n\n  @Override\n  public String prettyPrint(int depth, int indent) {\n    String spaces = OExecutionStepInternal.getIndent(depth, indent);\n    StringBuilder result = new StringBuilder();\n    result.append(spaces);\n    result.append(\"+ FETCH NEW RECORDS FROM CURRENT TRANSACTION SCOPE (if any)\");\n    if (profilingEnabled) {\n      result.append(\" (\" + getCostFormatted() + \")\");\n    }\n    return result.toString();\n  }\n\n  @Override\n  public OResult serialize() {\n    OResultInternal result = OExecutionStepInternal.basicSerialize(this);\n    result.setProperty(\"className\", className);\n    return result;\n  }\n\n  @Override\n  public void deserialize(OResult fromResult) {", "right_context": "}\n\n  @Override\n  public boolean canBeCached() {\n    return true;\n  }\n\n  @Override\n  public OExecutionStep copy(OCommandContext ctx) {\n    FetchTemporaryFromTxStep result =\n        new FetchTemporaryFromTxStep(ctx, this.className, profilingEnabled);\n    return result;\n  }\n}", "class_name": "FetchTemporaryFromTxStep", "return_type": "void", "parameters": [{"type": "OResult", "name": "fromResult"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ODeleteRecordRequest implements OBinaryAsyncRequest<ODeleteRecordResponse> {\n  private ORecordId rid;\n  private int version;\n  private byte mode;\n\n  public ODeleteRecordRequest(ORecordId iRid, int iVersion) {\n    this.rid = iRid;\n    this.version = iVersion;\n  }\n\n  public ODeleteRecordRequest() {}\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.REQUEST_RECORD_DELETE;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Delete Record\";\n  }\n\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {\n    network.writeRID(rid);\n    network.writeVersion(version);\n    network.writeByte((byte) mode);\n  }\n\n  public byte getMode() {\n    return mode;\n  }\n\n  public ORecordId getRid() {\n    return rid;\n  }\n\n  public int getVersion() {\n    return version;\n  }\n\n  @Override\n  public void setMode(byte mode) {\n    this.mode = mode;\n  }\n\n  @Override\n  public ODeleteRecordResponse createResponse() {\n    return new ODeleteRecordResponse();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeDeleteRecord(this);\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/286", "ground_truth": "\n    rid = channel.readRID();\n    version = channel.readVersion();\n    mode = channel.readByte();\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "client", "src", "main", "java", "com", "orientechnologies", "orient", "client", "remote", "message", "ODeleteRecordRequest.java"], "context_start_lineno": 0, "function_name": "read", "left_context": "class ODeleteRecordRequest implements OBinaryAsyncRequest<ODeleteRecordResponse> {\n  private ORecordId rid;\n  private int version;\n  private byte mode;\n\n  public ODeleteRecordRequest(ORecordId iRid, int iVersion) {\n    this.rid = iRid;\n    this.version = iVersion;\n  }\n\n  public ODeleteRecordRequest() {}\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.REQUEST_RECORD_DELETE;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Delete Record\";\n  }\n\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {", "right_context": "}\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {\n    network.writeRID(rid);\n    network.writeVersion(version);\n    network.writeByte((byte) mode);\n  }\n\n  public byte getMode() {\n    return mode;\n  }\n\n  public ORecordId getRid() {\n    return rid;\n  }\n\n  public int getVersion() {\n    return version;\n  }\n\n  @Override\n  public void setMode(byte mode) {\n    this.mode = mode;\n  }\n\n  @Override\n  public ODeleteRecordResponse createResponse() {\n    return new ODeleteRecordResponse();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeDeleteRecord(this);\n  }\n}", "class_name": "ODeleteRecordRequest", "return_type": "void", "parameters": [{"type": "OChannelDataInput", "name": "channel"}, {"type": "int", "name": "protocolVersion"}, {"type": "ORecordSerializer", "name": "serializer"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OSharedContextDistributed extends OSharedContextEmbedded {\n\n  public OSharedContextDistributed(OStorage storage, OrientDBDistributed orientDB) {\n    super(storage, orientDB);\n  }\n\n  protected void init(OStorage storage) {\n    stringCache =\n        new OStringCache(\n            storage\n                .getConfiguration()\n                .getContextConfiguration()\n                .getValueAsInteger(OGlobalConfiguration.DB_STRING_CAHCE_SIZE));\n    schema = new OSchemaDistributed(this);\n    security = orientDB.getSecuritySystem().newSecurity(storage.getName());\n    indexManager = new OIndexManagerDistributed(storage);\n    functionLibrary = new OFunctionLibraryImpl();\n    scheduler = new OSchedulerImpl(orientDB);\n    sequenceLibrary = new OSequenceLibraryImpl();\n    liveQueryOps = new OLiveQueryHook.OLiveQueryOps();\n    liveQueryOpsV2 = new OLiveQueryHookV2.OLiveQueryOps();\n    statementCache =\n        new OStatementCache(\n            storage\n                .getConfiguration()\n                .getContextConfiguration()\n                .getValueAsInteger(OGlobalConfiguration.STATEMENT_CACHE_SIZE));\n\n    executionPlanCache =\n        new OExecutionPlanCache(\n            storage\n                .getConfiguration()\n                .getContextConfiguration()\n                .getValueAsInteger(OGlobalConfiguration.STATEMENT_CACHE_SIZE));\n    this.registerListener(executionPlanCache);\n\n    queryStats = new OQueryStats();\n    activeDistributedQueries = new HashMap<>();\n    ((OAbstractPaginatedStorage) storage)\n        .setStorageConfigurationUpdateListener(\n            update -> {\n              for (OMetadataUpdateListener listener : browseListeners()) {\n                listener.onStorageConfigurationUpdate(storage.getName(), update);\n              }\n            });\n\n    this.viewManager = new ViewManager(orientDB, storage.getName());\n  }\n\n  public synchronized void load(ODatabaseDocumentInternal database) {\n    OScenarioThreadLocal.executeAsDistributed(\n        () -> {\n          final long timer = PROFILER.startChrono();\n\n          try {\n            if (!loaded) {\n              schema.load(database);\n              indexManager.load(database);\n              // The Immutable snapshot should be after index and schema that require and before\n              // everything else that use it\n              schema.forceSnapshot(database);\n              security.load(database);\n              functionLibrary.load(database);\n              scheduler.load(database);\n              sequenceLibrary.load(database);\n              schema.onPostIndexManagement();\n              viewManager.load();\n              loaded = true;\n            }\n          } finally {\n            PROFILER.stopChrono(\n                PROFILER.getDatabaseMetric(database.getName(), \"metadata.load\"),\n                \"Loading of database metadata\",\n                timer,\n                \"db.*.metadata.load\");\n          }\n          return null;\n        });\n  }\n\n  @Override\n  public synchronized void close() {\n    stringCache.close();\n    viewManager.close();\n    schema.close();\n    security.close();\n    indexManager.close();\n    functionLibrary.close();\n    scheduler.close();\n    sequenceLibrary.close();\n    statementCache.clear();\n    executionPlanCache.invalidate();\n    liveQueryOps.close();\n    liveQueryOpsV2.close();\n    activeDistributedQueries.values().forEach(x -> x.close());\n    loaded = false;\n  }\n\n  public synchronized void reload(ODatabaseDocumentInternal database) {<FILL_FUNCTION_BODY>}\n\n  public synchronized void create(ODatabaseDocumentInternal database) {\n    OScenarioThreadLocal.executeAsDistributed(\n        () -> {\n          schema.create(database);\n          indexManager.create(database);\n          security.create(database);\n          functionLibrary.create(database);\n          sequenceLibrary.create(database);\n          security.createClassTrigger(database);\n          scheduler.create(database);\n\n          // CREATE BASE VERTEX AND EDGE CLASSES\n          schema.createClass(database, \"V\");\n          schema.createClass(database, \"E\");\n\n          // create geospatial classes\n          try {\n            OIndexFactory factory =\n                OIndexes.getFactory(OClass.INDEX_TYPE.SPATIAL.toString(), \"LUCENE\");\n            if (factory != null && factory instanceof ODatabaseLifecycleListener) {\n              ((ODatabaseLifecycleListener) factory).onCreate(database);\n            }\n          } catch (OIndexException x) {\n            // the index does not exist\n          }\n\n          viewManager.create();\n          schema.forceSnapshot(database);\n          loaded = true;\n          return null;\n        });\n  }\n\n  public ViewManager getViewManager() {\n    return viewManager;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/348", "ground_truth": "\n    OScenarioThreadLocal.executeAsDistributed(\n        () -> {\n          schema.reload(database);\n          indexManager.reload();\n          // The Immutable snapshot should be after index and schema that require and before\n          // everything else that use it\n          schema.forceSnapshot(database);\n          security.load(database);\n          functionLibrary.load(database);\n          sequenceLibrary.load(database);\n          scheduler.load(database);\n          return null;\n        });\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "distributed", "src", "main", "java", "com", "orientechnologies", "orient", "server", "distributed", "impl", "metadata", "OSharedContextDistributed.java"], "context_start_lineno": 0, "function_name": "reload", "left_context": "class OSharedContextDistributed extends OSharedContextEmbedded {\n\n  public OSharedContextDistributed(OStorage storage, OrientDBDistributed orientDB) {\n    super(storage, orientDB);\n  }\n\n  protected void init(OStorage storage) {\n    stringCache =\n        new OStringCache(\n            storage\n                .getConfiguration()\n                .getContextConfiguration()\n                .getValueAsInteger(OGlobalConfiguration.DB_STRING_CAHCE_SIZE));\n    schema = new OSchemaDistributed(this);\n    security = orientDB.getSecuritySystem().newSecurity(storage.getName());\n    indexManager = new OIndexManagerDistributed(storage);\n    functionLibrary = new OFunctionLibraryImpl();\n    scheduler = new OSchedulerImpl(orientDB);\n    sequenceLibrary = new OSequenceLibraryImpl();\n    liveQueryOps = new OLiveQueryHook.OLiveQueryOps();\n    liveQueryOpsV2 = new OLiveQueryHookV2.OLiveQueryOps();\n    statementCache =\n        new OStatementCache(\n            storage\n                .getConfiguration()\n                .getContextConfiguration()\n                .getValueAsInteger(OGlobalConfiguration.STATEMENT_CACHE_SIZE));\n\n    executionPlanCache =\n        new OExecutionPlanCache(\n            storage\n                .getConfiguration()\n                .getContextConfiguration()\n                .getValueAsInteger(OGlobalConfiguration.STATEMENT_CACHE_SIZE));\n    this.registerListener(executionPlanCache);\n\n    queryStats = new OQueryStats();\n    activeDistributedQueries = new HashMap<>();\n    ((OAbstractPaginatedStorage) storage)\n        .setStorageConfigurationUpdateListener(\n            update -> {\n              for (OMetadataUpdateListener listener : browseListeners()) {\n                listener.onStorageConfigurationUpdate(storage.getName(), update);\n              }\n            });\n\n    this.viewManager = new ViewManager(orientDB, storage.getName());\n  }\n\n  public synchronized void load(ODatabaseDocumentInternal database) {\n    OScenarioThreadLocal.executeAsDistributed(\n        () -> {\n          final long timer = PROFILER.startChrono();\n\n          try {\n            if (!loaded) {\n              schema.load(database);\n              indexManager.load(database);\n              // The Immutable snapshot should be after index and schema that require and before\n              // everything else that use it\n              schema.forceSnapshot(database);\n              security.load(database);\n              functionLibrary.load(database);\n              scheduler.load(database);\n              sequenceLibrary.load(database);\n              schema.onPostIndexManagement();\n              viewManager.load();\n              loaded = true;\n            }\n          } finally {\n            PROFILER.stopChrono(\n                PROFILER.getDatabaseMetric(database.getName(), \"metadata.load\"),\n                \"Loading of database metadata\",\n                timer,\n                \"db.*.metadata.load\");\n          }\n          return null;\n        });\n  }\n\n  @Override\n  public synchronized void close() {\n    stringCache.close();\n    viewManager.close();\n    schema.close();\n    security.close();\n    indexManager.close();\n    functionLibrary.close();\n    scheduler.close();\n    sequenceLibrary.close();\n    statementCache.clear();\n    executionPlanCache.invalidate();\n    liveQueryOps.close();\n    liveQueryOpsV2.close();\n    activeDistributedQueries.values().forEach(x -> x.close());\n    loaded = false;\n  }\n\n  public synchronized void reload(ODatabaseDocumentInternal database) {", "right_context": "}\n\n  public synchronized void create(ODatabaseDocumentInternal database) {\n    OScenarioThreadLocal.executeAsDistributed(\n        () -> {\n          schema.create(database);\n          indexManager.create(database);\n          security.create(database);\n          functionLibrary.create(database);\n          sequenceLibrary.create(database);\n          security.createClassTrigger(database);\n          scheduler.create(database);\n\n          // CREATE BASE VERTEX AND EDGE CLASSES\n          schema.createClass(database, \"V\");\n          schema.createClass(database, \"E\");\n\n          // create geospatial classes\n          try {\n            OIndexFactory factory =\n                OIndexes.getFactory(OClass.INDEX_TYPE.SPATIAL.toString(), \"LUCENE\");\n            if (factory != null && factory instanceof ODatabaseLifecycleListener) {\n              ((ODatabaseLifecycleListener) factory).onCreate(database);\n            }\n          } catch (OIndexException x) {\n            // the index does not exist\n          }\n\n          viewManager.create();\n          schema.forceSnapshot(database);\n          loaded = true;\n          return null;\n        });\n  }\n\n  public ViewManager getViewManager() {\n    return viewManager;\n  }\n}", "class_name": "OSharedContextDistributed", "return_type": "void", "parameters": [{"type": "ODatabaseDocumentInternal", "name": "database"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OPhysicalPosition implements OSerializableStream, Externalizable {\n  private static final int binarySize =\n      OBinaryProtocol.SIZE_LONG\n          + OBinaryProtocol.SIZE_BYTE\n          + OBinaryProtocol.SIZE_INT\n          + OBinaryProtocol.SIZE_INT;\n  public long clusterPosition;\n  public byte recordType;\n  public int recordVersion = 0;\n  public int recordSize;\n\n  public OPhysicalPosition() {}\n\n  public OPhysicalPosition(final long iClusterPosition) {\n    clusterPosition = iClusterPosition;\n  }\n\n  public OPhysicalPosition(final byte iRecordType) {\n    recordType = iRecordType;\n  }\n\n  public OPhysicalPosition(final long iClusterPosition, final int iVersion) {\n    clusterPosition = iClusterPosition;\n    recordVersion = iVersion;\n  }\n\n  private void copyTo(final OPhysicalPosition iDest) {\n    iDest.clusterPosition = clusterPosition;\n    iDest.recordType = recordType;\n    iDest.recordVersion = recordVersion;\n    iDest.recordSize = recordSize;\n  }\n\n  public void copyFrom(final OPhysicalPosition iSource) {\n    iSource.copyTo(this);\n  }\n\n  @Override\n  public String toString() {\n    return \"rid(?:\"\n        + clusterPosition\n        + \") record(type:\"\n        + recordType\n        + \" size:\"\n        + recordSize\n        + \" v:\"\n        + recordVersion\n        + \")\";\n  }\n\n  @Override\n  public OSerializableStream fromStream(final byte[] iStream) throws OSerializationException {\n    int pos = 0;\n\n    clusterPosition = OBinaryProtocol.bytes2long(iStream);\n    pos += OBinaryProtocol.SIZE_LONG;\n\n    recordType = iStream[pos];\n    pos += OBinaryProtocol.SIZE_BYTE;\n\n    recordSize = OBinaryProtocol.bytes2int(iStream, pos);\n    pos += OBinaryProtocol.SIZE_INT;\n\n    recordVersion = OBinaryProtocol.bytes2int(iStream, pos);\n\n    return this;\n  }\n\n  @Override\n  public byte[] toStream() throws OSerializationException {\n    final byte[] buffer = new byte[binarySize];\n    int pos = 0;\n\n    OBinaryProtocol.long2bytes(clusterPosition, buffer, pos);\n    pos += OBinaryProtocol.SIZE_LONG;\n\n    buffer[pos] = recordType;\n    pos += OBinaryProtocol.SIZE_BYTE;\n\n    OBinaryProtocol.int2bytes(recordSize, buffer, pos);\n    pos += OBinaryProtocol.SIZE_INT;\n\n    OBinaryProtocol.int2bytes(recordVersion, buffer, pos);\n    return buffer;\n  }\n\n  @Override\n  public boolean equals(Object obj) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public int hashCode() {\n    int result = (int) (31 * clusterPosition);\n    result = 31 * result + (int) recordType;\n    result = 31 * result + recordVersion;\n    result = 31 * result + recordSize;\n    return result;\n  }\n\n  @Override\n  public void writeExternal(final ObjectOutput out) throws IOException {\n    out.writeLong(clusterPosition);\n    out.writeByte(recordType);\n    out.writeInt(recordSize);\n    out.writeInt(recordVersion);\n  }\n\n  @Override\n  public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException {\n    clusterPosition = in.readLong();\n    recordType = in.readByte();\n    recordSize = in.readInt();\n    recordVersion = in.readInt();\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/392", "ground_truth": "\n    if (obj == null || !(obj instanceof OPhysicalPosition)) return false;\n\n    final OPhysicalPosition other = (OPhysicalPosition) obj;\n\n    return clusterPosition == other.clusterPosition\n        && recordType == other.recordType\n        && recordVersion == other.recordVersion\n        && recordSize == other.recordSize;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "storage", "OPhysicalPosition.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class OPhysicalPosition implements OSerializableStream, Externalizable {\n  private static final int binarySize =\n      OBinaryProtocol.SIZE_LONG\n          + OBinaryProtocol.SIZE_BYTE\n          + OBinaryProtocol.SIZE_INT\n          + OBinaryProtocol.SIZE_INT;\n  public long clusterPosition;\n  public byte recordType;\n  public int recordVersion = 0;\n  public int recordSize;\n\n  public OPhysicalPosition() {}\n\n  public OPhysicalPosition(final long iClusterPosition) {\n    clusterPosition = iClusterPosition;\n  }\n\n  public OPhysicalPosition(final byte iRecordType) {\n    recordType = iRecordType;\n  }\n\n  public OPhysicalPosition(final long iClusterPosition, final int iVersion) {\n    clusterPosition = iClusterPosition;\n    recordVersion = iVersion;\n  }\n\n  private void copyTo(final OPhysicalPosition iDest) {\n    iDest.clusterPosition = clusterPosition;\n    iDest.recordType = recordType;\n    iDest.recordVersion = recordVersion;\n    iDest.recordSize = recordSize;\n  }\n\n  public void copyFrom(final OPhysicalPosition iSource) {\n    iSource.copyTo(this);\n  }\n\n  @Override\n  public String toString() {\n    return \"rid(?:\"\n        + clusterPosition\n        + \") record(type:\"\n        + recordType\n        + \" size:\"\n        + recordSize\n        + \" v:\"\n        + recordVersion\n        + \")\";\n  }\n\n  @Override\n  public OSerializableStream fromStream(final byte[] iStream) throws OSerializationException {\n    int pos = 0;\n\n    clusterPosition = OBinaryProtocol.bytes2long(iStream);\n    pos += OBinaryProtocol.SIZE_LONG;\n\n    recordType = iStream[pos];\n    pos += OBinaryProtocol.SIZE_BYTE;\n\n    recordSize = OBinaryProtocol.bytes2int(iStream, pos);\n    pos += OBinaryProtocol.SIZE_INT;\n\n    recordVersion = OBinaryProtocol.bytes2int(iStream, pos);\n\n    return this;\n  }\n\n  @Override\n  public byte[] toStream() throws OSerializationException {\n    final byte[] buffer = new byte[binarySize];\n    int pos = 0;\n\n    OBinaryProtocol.long2bytes(clusterPosition, buffer, pos);\n    pos += OBinaryProtocol.SIZE_LONG;\n\n    buffer[pos] = recordType;\n    pos += OBinaryProtocol.SIZE_BYTE;\n\n    OBinaryProtocol.int2bytes(recordSize, buffer, pos);\n    pos += OBinaryProtocol.SIZE_INT;\n\n    OBinaryProtocol.int2bytes(recordVersion, buffer, pos);\n    return buffer;\n  }\n\n  @Override\n  public boolean equals(Object obj) {", "right_context": "}\n\n  @Override\n  public int hashCode() {\n    int result = (int) (31 * clusterPosition);\n    result = 31 * result + (int) recordType;\n    result = 31 * result + recordVersion;\n    result = 31 * result + recordSize;\n    return result;\n  }\n\n  @Override\n  public void writeExternal(final ObjectOutput out) throws IOException {\n    out.writeLong(clusterPosition);\n    out.writeByte(recordType);\n    out.writeInt(recordSize);\n    out.writeInt(recordVersion);\n  }\n\n  @Override\n  public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException {\n    clusterPosition = in.readLong();\n    recordType = in.readByte();\n    recordSize = in.readInt();\n    recordVersion = in.readInt();\n  }\n}", "class_name": "OPhysicalPosition", "return_type": "boolean", "parameters": [{"type": "Object", "name": "obj"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OValueExpression extends OExpression {\n\n  public OValueExpression(Object val) {\n    super(-1);\n    this.value = val;\n  }\n\n  public Object execute(OIdentifiable iCurrentRecord, OCommandContext ctx) {\n    return value;\n  }\n\n  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {\n    return value;\n  }\n\n  public boolean isBaseIdentifier() {\n    return false;\n  }\n\n  public boolean isEarlyCalculated() {\n    return true;\n  }\n\n  public OIdentifier getDefaultAlias() {\n    return new OIdentifier(String.valueOf(value));\n  }\n\n  public void toString(Map<Object, Object> params, StringBuilder builder) {\n    builder.append(String.valueOf(value));\n  }\n\n  public boolean supportsBasicCalculation() {\n    return true;\n  }\n\n  public boolean isIndexedFunctionCal() {\n    return false;\n  }\n\n  public boolean canExecuteIndexedFunctionWithoutIndex(\n      OFromClause target, OCommandContext context, OBinaryCompareOperator operator, Object right) {\n    return false;\n  }\n\n  public boolean allowsIndexedFunctionExecutionOnTarget(\n      OFromClause target, OCommandContext context, OBinaryCompareOperator operator, Object right) {\n    return false;\n  }\n\n  public boolean executeIndexedFunctionAfterIndexSearch(\n      OFromClause target, OCommandContext context, OBinaryCompareOperator operator, Object right) {\n    return false;\n  }\n\n  public boolean isExpand() {\n    return false;\n  }\n\n  public OValueExpression getExpandContent() {\n    return null;\n  }\n\n  public boolean needsAliases(Set<String> aliases) {\n    return false;\n  }\n\n  public boolean isAggregate() {\n    return false;\n  }\n\n  public OValueExpression splitForAggregation(AggregateProjectionSplit aggregateSplit) {\n    return this;\n  }\n\n  public AggregationContext getAggregationContext(OCommandContext ctx) {\n    throw new OCommandExecutionException(\"Cannot aggregate on \" + toString());\n  }\n\n  public OValueExpression copy() {\n\n    OValueExpression result = new OValueExpression(-1);\n    result.value = value;\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public int hashCode() {\n    return 1;\n  }\n\n  public void extractSubQueries(SubQueryCollector collector) {}\n\n  public void extractSubQueries(OIdentifier letAlias, SubQueryCollector collector) {}\n\n  public boolean refersToParent() {\n\n    return false;\n  }\n\n  List<String> getMatchPatternInvolvedAliases() {\n    return null;\n  }\n\n  public void applyRemove(OResultInternal result, OCommandContext ctx) {\n    throw new OCommandExecutionException(\"Cannot apply REMOVE \" + toString());\n  }\n\n  public boolean isCount() {\n    return false;\n  }\n\n  public OResult serialize() {\n    throw new UnsupportedOperationException(\n        \"Cannot serialize value expression (not supported yet)\");\n  }\n\n  public void deserialize(OResult fromResult) {\n    throw new UnsupportedOperationException(\n        \"Cannot deserialize value expression (not supported yet)\");\n  }\n\n  public boolean isDefinedFor(OResult currentRecord) {\n    return true;\n  }\n\n  public boolean isDefinedFor(OElement currentRecord) {\n    return true;\n  }\n\n  public OCollate getCollate(OResult currentRecord, OCommandContext ctx) {\n    return null;\n  }\n\n  public boolean isCacheable() {\n    return true;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/397", "ground_truth": "\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    OValueExpression that = (OValueExpression) o;\n    return that.value == this.value;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "parser", "OValueExpression.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class OValueExpression extends OExpression {\n\n  public OValueExpression(Object val) {\n    super(-1);\n    this.value = val;\n  }\n\n  public Object execute(OIdentifiable iCurrentRecord, OCommandContext ctx) {\n    return value;\n  }\n\n  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {\n    return value;\n  }\n\n  public boolean isBaseIdentifier() {\n    return false;\n  }\n\n  public boolean isEarlyCalculated() {\n    return true;\n  }\n\n  public OIdentifier getDefaultAlias() {\n    return new OIdentifier(String.valueOf(value));\n  }\n\n  public void toString(Map<Object, Object> params, StringBuilder builder) {\n    builder.append(String.valueOf(value));\n  }\n\n  public boolean supportsBasicCalculation() {\n    return true;\n  }\n\n  public boolean isIndexedFunctionCal() {\n    return false;\n  }\n\n  public boolean canExecuteIndexedFunctionWithoutIndex(\n      OFromClause target, OCommandContext context, OBinaryCompareOperator operator, Object right) {\n    return false;\n  }\n\n  public boolean allowsIndexedFunctionExecutionOnTarget(\n      OFromClause target, OCommandContext context, OBinaryCompareOperator operator, Object right) {\n    return false;\n  }\n\n  public boolean executeIndexedFunctionAfterIndexSearch(\n      OFromClause target, OCommandContext context, OBinaryCompareOperator operator, Object right) {\n    return false;\n  }\n\n  public boolean isExpand() {\n    return false;\n  }\n\n  public OValueExpression getExpandContent() {\n    return null;\n  }\n\n  public boolean needsAliases(Set<String> aliases) {\n    return false;\n  }\n\n  public boolean isAggregate() {\n    return false;\n  }\n\n  public OValueExpression splitForAggregation(AggregateProjectionSplit aggregateSplit) {\n    return this;\n  }\n\n  public AggregationContext getAggregationContext(OCommandContext ctx) {\n    throw new OCommandExecutionException(\"Cannot aggregate on \" + toString());\n  }\n\n  public OValueExpression copy() {\n\n    OValueExpression result = new OValueExpression(-1);\n    result.value = value;\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object o) {", "right_context": "}\n\n  @Override\n  public int hashCode() {\n    return 1;\n  }\n\n  public void extractSubQueries(SubQueryCollector collector) {}\n\n  public void extractSubQueries(OIdentifier letAlias, SubQueryCollector collector) {}\n\n  public boolean refersToParent() {\n\n    return false;\n  }\n\n  List<String> getMatchPatternInvolvedAliases() {\n    return null;\n  }\n\n  public void applyRemove(OResultInternal result, OCommandContext ctx) {\n    throw new OCommandExecutionException(\"Cannot apply REMOVE \" + toString());\n  }\n\n  public boolean isCount() {\n    return false;\n  }\n\n  public OResult serialize() {\n    throw new UnsupportedOperationException(\n        \"Cannot serialize value expression (not supported yet)\");\n  }\n\n  public void deserialize(OResult fromResult) {\n    throw new UnsupportedOperationException(\n        \"Cannot deserialize value expression (not supported yet)\");\n  }\n\n  public boolean isDefinedFor(OResult currentRecord) {\n    return true;\n  }\n\n  public boolean isDefinedFor(OElement currentRecord) {\n    return true;\n  }\n\n  public OCollate getCollate(OResult currentRecord, OCommandContext ctx) {\n    return null;\n  }\n\n  public boolean isCacheable() {\n    return true;\n  }\n}", "class_name": "OValueExpression", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OBeginTransactionRequest implements OBinaryRequest<OBeginTransactionResponse> {\n\n  private int txId;\n  private boolean usingLog;\n  private boolean hasContent;\n  private List<ORecordOperationRequest> operations;\n  private List<IndexChange> indexChanges;\n\n  public OBeginTransactionRequest(\n      int txId,\n      boolean hasContent,\n      boolean usingLog,\n      Iterable<ORecordOperation> operations,\n      Map<String, OTransactionIndexChanges> indexChanges) {\n    super();\n    this.txId = txId;\n    this.hasContent = hasContent;\n    this.usingLog = usingLog;\n    this.indexChanges = new ArrayList<>();\n    this.operations = new ArrayList<>();\n\n    if (hasContent) {\n      for (ORecordOperation txEntry : operations) {\n        if (txEntry.type == ORecordOperation.LOADED) continue;\n        ORecordOperationRequest request = new ORecordOperationRequest();\n        request.setType(txEntry.type);\n        request.setVersion(txEntry.getRecord().getVersion());\n        request.setId(txEntry.getRecord().getIdentity());\n        request.setRecordType(ORecordInternal.getRecordType(txEntry.getRecord()));\n        switch (txEntry.type) {\n          case ORecordOperation.CREATED:\n          case ORecordOperation.UPDATED:\n            request.setRecord(\n                ORecordSerializerNetworkV37Client.INSTANCE.toStream(txEntry.getRecord()));\n            request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            break;\n        }\n        this.operations.add(request);\n      }\n\n      for (Map.Entry<String, OTransactionIndexChanges> change : indexChanges.entrySet()) {\n        this.indexChanges.add(new IndexChange(change.getKey(), change.getValue()));\n      }\n    }\n  }\n\n  public OBeginTransactionRequest() {}\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    txId = channel.readInt();\n    hasContent = channel.readBoolean();\n    usingLog = channel.readBoolean();\n    operations = new ArrayList<>();\n    if (hasContent) {\n      byte hasEntry;\n      do {\n        hasEntry = channel.readByte();\n        if (hasEntry == 1) {\n          ORecordOperationRequest entry = OMessageHelper.readTransactionEntry(channel, serializer);\n          operations.add(entry);\n        }\n      } while (hasEntry == 1);\n\n      // RECEIVE MANUAL INDEX CHANGES\n      this.indexChanges =\n          OMessageHelper.readTransactionIndexChanges(\n              channel, (ORecordSerializerNetworkV37) serializer);\n    } else {\n      this.indexChanges = new ArrayList<>();\n    }\n  }\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.REQUEST_TX_BEGIN;\n  }\n\n  @Override\n  public OBeginTransactionResponse createResponse() {\n    return new OBeginTransactionResponse();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeBeginTransaction(this);\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Begin Transaction\";\n  }\n\n  public List<ORecordOperationRequest> getOperations() {\n    return operations;\n  }\n\n  public List<IndexChange> getIndexChanges() {\n    return indexChanges;\n  }\n\n  public int getTxId() {\n    return txId;\n  }\n\n  public boolean isUsingLog() {\n    return usingLog;\n  }\n\n  public boolean isHasContent() {\n    return hasContent;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/410", "ground_truth": "\n    // from 3.0 the the serializer is bound to the protocol\n    ORecordSerializerNetworkV37Client serializer = ORecordSerializerNetworkV37Client.INSTANCE;\n\n    network.writeInt(txId);\n    network.writeBoolean(hasContent);\n    network.writeBoolean(usingLog);\n    if (hasContent) {\n      for (ORecordOperationRequest txEntry : operations) {\n        network.writeByte((byte) 1);\n        OMessageHelper.writeTransactionEntry(network, txEntry, serializer);\n      }\n\n      // END OF RECORD ENTRIES\n      network.writeByte((byte) 0);\n\n      // SEND MANUAL INDEX CHANGES\n      OMessageHelper.writeTransactionIndexChanges(network, serializer, indexChanges);\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "client", "src", "main", "java", "com", "orientechnologies", "orient", "client", "remote", "message", "OBeginTransactionRequest.java"], "context_start_lineno": 0, "function_name": "write", "left_context": "class OBeginTransactionRequest implements OBinaryRequest<OBeginTransactionResponse> {\n\n  private int txId;\n  private boolean usingLog;\n  private boolean hasContent;\n  private List<ORecordOperationRequest> operations;\n  private List<IndexChange> indexChanges;\n\n  public OBeginTransactionRequest(\n      int txId,\n      boolean hasContent,\n      boolean usingLog,\n      Iterable<ORecordOperation> operations,\n      Map<String, OTransactionIndexChanges> indexChanges) {\n    super();\n    this.txId = txId;\n    this.hasContent = hasContent;\n    this.usingLog = usingLog;\n    this.indexChanges = new ArrayList<>();\n    this.operations = new ArrayList<>();\n\n    if (hasContent) {\n      for (ORecordOperation txEntry : operations) {\n        if (txEntry.type == ORecordOperation.LOADED) continue;\n        ORecordOperationRequest request = new ORecordOperationRequest();\n        request.setType(txEntry.type);\n        request.setVersion(txEntry.getRecord().getVersion());\n        request.setId(txEntry.getRecord().getIdentity());\n        request.setRecordType(ORecordInternal.getRecordType(txEntry.getRecord()));\n        switch (txEntry.type) {\n          case ORecordOperation.CREATED:\n          case ORecordOperation.UPDATED:\n            request.setRecord(\n                ORecordSerializerNetworkV37Client.INSTANCE.toStream(txEntry.getRecord()));\n            request.setContentChanged(ORecordInternal.isContentChanged(txEntry.getRecord()));\n            break;\n        }\n        this.operations.add(request);\n      }\n\n      for (Map.Entry<String, OTransactionIndexChanges> change : indexChanges.entrySet()) {\n        this.indexChanges.add(new IndexChange(change.getKey(), change.getValue()));\n      }\n    }\n  }\n\n  public OBeginTransactionRequest() {}\n\n  @Override\n  public void write(OChannelDataOutput network, OStorageRemoteSession session) throws IOException {", "right_context": "}\n\n  @Override\n  public void read(OChannelDataInput channel, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    txId = channel.readInt();\n    hasContent = channel.readBoolean();\n    usingLog = channel.readBoolean();\n    operations = new ArrayList<>();\n    if (hasContent) {\n      byte hasEntry;\n      do {\n        hasEntry = channel.readByte();\n        if (hasEntry == 1) {\n          ORecordOperationRequest entry = OMessageHelper.readTransactionEntry(channel, serializer);\n          operations.add(entry);\n        }\n      } while (hasEntry == 1);\n\n      // RECEIVE MANUAL INDEX CHANGES\n      this.indexChanges =\n          OMessageHelper.readTransactionIndexChanges(\n              channel, (ORecordSerializerNetworkV37) serializer);\n    } else {\n      this.indexChanges = new ArrayList<>();\n    }\n  }\n\n  @Override\n  public byte getCommand() {\n    return OChannelBinaryProtocol.REQUEST_TX_BEGIN;\n  }\n\n  @Override\n  public OBeginTransactionResponse createResponse() {\n    return new OBeginTransactionResponse();\n  }\n\n  @Override\n  public OBinaryResponse execute(OBinaryRequestExecutor executor) {\n    return executor.executeBeginTransaction(this);\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Begin Transaction\";\n  }\n\n  public List<ORecordOperationRequest> getOperations() {\n    return operations;\n  }\n\n  public List<IndexChange> getIndexChanges() {\n    return indexChanges;\n  }\n\n  public int getTxId() {\n    return txId;\n  }\n\n  public boolean isUsingLog() {\n    return usingLog;\n  }\n\n  public boolean isHasContent() {\n    return hasContent;\n  }\n}", "class_name": "OBeginTransactionRequest", "return_type": "void", "parameters": [{"type": "OChannelDataOutput", "name": "network"}, {"type": "OStorageRemoteSession", "name": "session"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OReadRecordResponse implements OBinaryResponse {\n\n  private byte recordType;\n  private int version;\n  private byte[] record;\n  private Set<ORecord> recordsToSend;\n  private ORawBuffer result;\n\n  public OReadRecordResponse() {}\n\n  public OReadRecordResponse(\n      byte recordType, int version, byte[] record, Set<ORecord> recordsToSend) {\n    this.recordType = recordType;\n    this.version = version;\n    this.record = record;\n    this.recordsToSend = recordsToSend;\n  }\n\n  public void write(OChannelDataOutput network, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    if (record != null) {\n      network.writeByte((byte) 1);\n      if (protocolVersion <= OChannelBinaryProtocol.PROTOCOL_VERSION_27) {\n        network.writeBytes(record);\n        network.writeVersion(version);\n        network.writeByte(recordType);\n      } else {\n        network.writeByte(recordType);\n        network.writeVersion(version);\n        network.writeBytes(record);\n      }\n      for (ORecord d : recordsToSend) {\n        if (d.getIdentity().isValid()) {\n          network.writeByte((byte) 2); // CLIENT CACHE\n          // RECORD. IT ISN'T PART OF THE RESULT SET\n          OMessageHelper.writeRecord(network, d, serializer);\n        }\n      }\n    }\n    // End of the response\n    network.writeByte((byte) 0);\n  }\n\n  @Override\n  public void read(OChannelDataInput network, OStorageRemoteSession session) throws IOException {<FILL_FUNCTION_BODY>}\n\n  public byte[] getRecord() {\n    return record;\n  }\n\n  public ORawBuffer getResult() {\n    return result;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/415", "ground_truth": "\n    ORecordSerializerNetworkV37Client serializer = ORecordSerializerNetworkV37Client.INSTANCE;\n    if (network.readByte() == 0) return;\n\n    final ORawBuffer buffer;\n    final byte type = network.readByte();\n    final int recVersion = network.readVersion();\n    final byte[] bytes = network.readBytes();\n    buffer = new ORawBuffer(bytes, recVersion, type);\n\n    // TODO: This should not be here, move it in a callback or similar\n    final ODatabaseDocument database = ODatabaseRecordThreadLocal.instance().getIfDefined();\n    ORecord record;\n    while (network.readByte() == 2) {\n      record = (ORecord) OMessageHelper.readIdentifiable(network, serializer);\n\n      if (database != null)\n        // PUT IN THE CLIENT LOCAL CACHE\n        database.getLocalCache().updateRecord(record);\n    }\n    result = buffer;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "client", "src", "main", "java", "com", "orientechnologies", "orient", "client", "remote", "message", "OReadRecordResponse.java"], "context_start_lineno": 0, "function_name": "read", "left_context": "class OReadRecordResponse implements OBinaryResponse {\n\n  private byte recordType;\n  private int version;\n  private byte[] record;\n  private Set<ORecord> recordsToSend;\n  private ORawBuffer result;\n\n  public OReadRecordResponse() {}\n\n  public OReadRecordResponse(\n      byte recordType, int version, byte[] record, Set<ORecord> recordsToSend) {\n    this.recordType = recordType;\n    this.version = version;\n    this.record = record;\n    this.recordsToSend = recordsToSend;\n  }\n\n  public void write(OChannelDataOutput network, int protocolVersion, ORecordSerializer serializer)\n      throws IOException {\n    if (record != null) {\n      network.writeByte((byte) 1);\n      if (protocolVersion <= OChannelBinaryProtocol.PROTOCOL_VERSION_27) {\n        network.writeBytes(record);\n        network.writeVersion(version);\n        network.writeByte(recordType);\n      } else {\n        network.writeByte(recordType);\n        network.writeVersion(version);\n        network.writeBytes(record);\n      }\n      for (ORecord d : recordsToSend) {\n        if (d.getIdentity().isValid()) {\n          network.writeByte((byte) 2); // CLIENT CACHE\n          // RECORD. IT ISN'T PART OF THE RESULT SET\n          OMessageHelper.writeRecord(network, d, serializer);\n        }\n      }\n    }\n    // End of the response\n    network.writeByte((byte) 0);\n  }\n\n  @Override\n  public void read(OChannelDataInput network, OStorageRemoteSession session) throws IOException {", "right_context": "}\n\n  public byte[] getRecord() {\n    return record;\n  }\n\n  public ORawBuffer getResult() {\n    return result;\n  }\n}", "class_name": "OReadRecordResponse", "return_type": "void", "parameters": [{"type": "OChannelDataInput", "name": "network"}, {"type": "OStorageRemoteSession", "name": "session"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OrientTransactionalGraph extends OrientBaseGraph\n    implements TransactionalGraph {\n\n  /**\n   * Constructs a new object using an existent database instance.\n   *\n   * @param iDatabase Underlying database object to attach\n   */\n  protected OrientTransactionalGraph(final ODatabaseDocumentInternal iDatabase) {\n    this(iDatabase, true, null, null);\n  }\n\n  protected OrientTransactionalGraph(\n      final ODatabaseDocumentInternal iDatabase,\n      final String iUserName,\n      final String iUserPasswd,\n      final Settings iConfiguration) {\n    super(iDatabase, iUserName, iUserPasswd, iConfiguration);\n    setCurrentGraphInThreadLocal();\n    super.setAutoStartTx(isAutoStartTx());\n\n    if (isAutoStartTx()) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(\n      final ODatabaseDocumentInternal iDatabase,\n      final boolean iAutoStartTx,\n      final String iUserName,\n      final String iUserPasswd) {\n    super(iDatabase, iUserName, iUserPasswd, null);\n    setCurrentGraphInThreadLocal();\n    super.setAutoStartTx(iAutoStartTx);\n\n    if (iAutoStartTx) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(final OPartitionedDatabasePool pool) {\n    super(pool);\n    setCurrentGraphInThreadLocal();\n\n    ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(\n      final OPartitionedDatabasePool pool, final Settings configuration) {\n    super(pool, configuration);\n    setCurrentGraphInThreadLocal();\n\n    if (configuration.isAutoStartTx()) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(final String url) {\n    this(url, true);\n  }\n\n  protected OrientTransactionalGraph(final String url, final boolean iAutoStartTx) {\n    super(url, ADMIN, ADMIN);\n    setCurrentGraphInThreadLocal();\n    setAutoStartTx(iAutoStartTx);\n\n    if (iAutoStartTx) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(\n      final String url, final String username, final String password) {\n    this(url, username, password, true);\n  }\n\n  protected OrientTransactionalGraph(\n      final String url, final String username, final String password, final boolean iAutoStartTx) {\n    super(url, username, password);\n    setCurrentGraphInThreadLocal();\n    this.setAutoStartTx(iAutoStartTx);\n\n    if (iAutoStartTx) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(final Configuration configuration) {\n    super(configuration);\n\n    final Boolean autoStartTx = configuration.getBoolean(\"blueprints.orientdb.autoStartTx\", null);\n    if (autoStartTx != null) setAutoStartTx(autoStartTx);\n  }\n\n  public boolean isUseLog() {\n    makeActive();\n\n    return settings.isUseLog();\n  }\n\n  public OrientTransactionalGraph setUseLog(final boolean useLog) {\n    makeActive();\n\n    settings.setUseLog(useLog);\n    return this;\n  }\n\n  @Override\n  public void setAutoStartTx(boolean autoStartTx) {\n    makeActive();\n\n    final boolean showWarning;\n    if (!autoStartTx\n        && isAutoStartTx()\n        && getDatabase() != null\n        && getDatabase().getTransaction().isActive()) {\n      if (getDatabase().getTransaction().getEntryCount() == 0) {\n        getDatabase().getTransaction().rollback();\n        showWarning = false;\n      } else showWarning = true;\n    } else showWarning = false;\n\n    super.setAutoStartTx(autoStartTx);\n\n    if (showWarning)\n      OLogManager.instance()\n          .warn(\n              this,\n              \"Auto Transaction for graphs setting has been turned off, but a transaction was\"\n                  + \" already started. Commit it manually or consider disabling auto transactions\"\n                  + \" while creating the graph.\");\n  }\n\n  /**\n   * Closes a transaction.\n   *\n   * @param conclusion Can be SUCCESS for commit and FAILURE to rollback.\n   */\n  @SuppressWarnings(\"deprecation\")\n  @Override\n  public void stopTransaction(final Conclusion conclusion) {\n    makeActive();\n\n    if (getDatabase().isClosed()\n        || getDatabase().getTransaction() instanceof OTransactionNoTx\n        || getDatabase().getTransaction().getStatus() != TXSTATUS.BEGUN) return;\n\n    if (Conclusion.SUCCESS == conclusion) commit();\n    else rollback();\n  }\n\n  /** Commits the current active transaction. */\n  public void commit() {\n    makeActive();\n\n    if (getDatabase() == null) return;\n\n    getDatabase().commit();\n    if (isAutoStartTx()) ensureTransaction();\n  }\n\n  /** Rollbacks the current active transaction. All the pending changes are rollbacked. */\n  public void rollback() {\n    makeActive();\n\n    if (getDatabase() == null) return;\n\n    getDatabase().rollback();\n    if (isAutoStartTx()) ensureTransaction();\n  }\n\n  @Override\n  public void begin() {\n    makeActive();\n\n    // XXX: Under some circumstances, auto started transactions are committed outside of the graph\n    // using the\n    // underlying database and later restarted using the graph. So we have to check the status of\n    // the\n    // database transaction to support this behaviour.\n    if (isAutoStartTx() && getDatabase().getTransaction().isActive())\n      throw new OTransactionException(\n          \"A mixture of auto started and manually started transactions is not allowed. \"\n              + \"Disable auto transactions for the graph before starting a manual transaction.\");\n\n    getDatabase().begin();\n    getDatabase().getTransaction().setUsingLog(settings.isUseLog());\n  }\n\n  @Override\n  protected void autoStartTransaction() {<FILL_FUNCTION_BODY>}\n\n  private void ensureTransaction() {\n    final boolean txBegun = getDatabase().getTransaction().isActive();\n    if (!txBegun) {\n      getDatabase().begin();\n      getDatabase().getTransaction().setUsingLog(settings.isUseLog());\n    }\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/419", "ground_truth": "\n    final boolean txBegun = getDatabase().getTransaction().isActive();\n\n    if (!isAutoStartTx()) {\n      if (isRequireTransaction() && !txBegun)\n        throw new OTransactionException(\"Transaction required to change the Graph\");\n\n      return;\n    }\n\n    if (!txBegun) {\n      getDatabase().begin();\n      getDatabase().getTransaction().setUsingLog(settings.isUseLog());\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "graphdb", "src", "main", "java", "com", "tinkerpop", "blueprints", "impls", "orient", "OrientTransactionalGraph.java"], "context_start_lineno": 0, "function_name": "autoStartTransaction", "left_context": "class OrientTransactionalGraph extends OrientBaseGraph\n    implements TransactionalGraph {\n\n  /**\n   * Constructs a new object using an existent database instance.\n   *\n   * @param iDatabase Underlying database object to attach\n   */\n  protected OrientTransactionalGraph(final ODatabaseDocumentInternal iDatabase) {\n    this(iDatabase, true, null, null);\n  }\n\n  protected OrientTransactionalGraph(\n      final ODatabaseDocumentInternal iDatabase,\n      final String iUserName,\n      final String iUserPasswd,\n      final Settings iConfiguration) {\n    super(iDatabase, iUserName, iUserPasswd, iConfiguration);\n    setCurrentGraphInThreadLocal();\n    super.setAutoStartTx(isAutoStartTx());\n\n    if (isAutoStartTx()) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(\n      final ODatabaseDocumentInternal iDatabase,\n      final boolean iAutoStartTx,\n      final String iUserName,\n      final String iUserPasswd) {\n    super(iDatabase, iUserName, iUserPasswd, null);\n    setCurrentGraphInThreadLocal();\n    super.setAutoStartTx(iAutoStartTx);\n\n    if (iAutoStartTx) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(final OPartitionedDatabasePool pool) {\n    super(pool);\n    setCurrentGraphInThreadLocal();\n\n    ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(\n      final OPartitionedDatabasePool pool, final Settings configuration) {\n    super(pool, configuration);\n    setCurrentGraphInThreadLocal();\n\n    if (configuration.isAutoStartTx()) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(final String url) {\n    this(url, true);\n  }\n\n  protected OrientTransactionalGraph(final String url, final boolean iAutoStartTx) {\n    super(url, ADMIN, ADMIN);\n    setCurrentGraphInThreadLocal();\n    setAutoStartTx(iAutoStartTx);\n\n    if (iAutoStartTx) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(\n      final String url, final String username, final String password) {\n    this(url, username, password, true);\n  }\n\n  protected OrientTransactionalGraph(\n      final String url, final String username, final String password, final boolean iAutoStartTx) {\n    super(url, username, password);\n    setCurrentGraphInThreadLocal();\n    this.setAutoStartTx(iAutoStartTx);\n\n    if (iAutoStartTx) ensureTransaction();\n  }\n\n  protected OrientTransactionalGraph(final Configuration configuration) {\n    super(configuration);\n\n    final Boolean autoStartTx = configuration.getBoolean(\"blueprints.orientdb.autoStartTx\", null);\n    if (autoStartTx != null) setAutoStartTx(autoStartTx);\n  }\n\n  public boolean isUseLog() {\n    makeActive();\n\n    return settings.isUseLog();\n  }\n\n  public OrientTransactionalGraph setUseLog(final boolean useLog) {\n    makeActive();\n\n    settings.setUseLog(useLog);\n    return this;\n  }\n\n  @Override\n  public void setAutoStartTx(boolean autoStartTx) {\n    makeActive();\n\n    final boolean showWarning;\n    if (!autoStartTx\n        && isAutoStartTx()\n        && getDatabase() != null\n        && getDatabase().getTransaction().isActive()) {\n      if (getDatabase().getTransaction().getEntryCount() == 0) {\n        getDatabase().getTransaction().rollback();\n        showWarning = false;\n      } else showWarning = true;\n    } else showWarning = false;\n\n    super.setAutoStartTx(autoStartTx);\n\n    if (showWarning)\n      OLogManager.instance()\n          .warn(\n              this,\n              \"Auto Transaction for graphs setting has been turned off, but a transaction was\"\n                  + \" already started. Commit it manually or consider disabling auto transactions\"\n                  + \" while creating the graph.\");\n  }\n\n  /**\n   * Closes a transaction.\n   *\n   * @param conclusion Can be SUCCESS for commit and FAILURE to rollback.\n   */\n  @SuppressWarnings(\"deprecation\")\n  @Override\n  public void stopTransaction(final Conclusion conclusion) {\n    makeActive();\n\n    if (getDatabase().isClosed()\n        || getDatabase().getTransaction() instanceof OTransactionNoTx\n        || getDatabase().getTransaction().getStatus() != TXSTATUS.BEGUN) return;\n\n    if (Conclusion.SUCCESS == conclusion) commit();\n    else rollback();\n  }\n\n  /** Commits the current active transaction. */\n  public void commit() {\n    makeActive();\n\n    if (getDatabase() == null) return;\n\n    getDatabase().commit();\n    if (isAutoStartTx()) ensureTransaction();\n  }\n\n  /** Rollbacks the current active transaction. All the pending changes are rollbacked. */\n  public void rollback() {\n    makeActive();\n\n    if (getDatabase() == null) return;\n\n    getDatabase().rollback();\n    if (isAutoStartTx()) ensureTransaction();\n  }\n\n  @Override\n  public void begin() {\n    makeActive();\n\n    // XXX: Under some circumstances, auto started transactions are committed outside of the graph\n    // using the\n    // underlying database and later restarted using the graph. So we have to check the status of\n    // the\n    // database transaction to support this behaviour.\n    if (isAutoStartTx() && getDatabase().getTransaction().isActive())\n      throw new OTransactionException(\n          \"A mixture of auto started and manually started transactions is not allowed. \"\n              + \"Disable auto transactions for the graph before starting a manual transaction.\");\n\n    getDatabase().begin();\n    getDatabase().getTransaction().setUsingLog(settings.isUseLog());\n  }\n\n  @Override\n  protected void autoStartTransaction() {", "right_context": "}\n\n  private void ensureTransaction() {\n    final boolean txBegun = getDatabase().getTransaction().isActive();\n    if (!txBegun) {\n      getDatabase().begin();\n      getDatabase().getTransaction().setUsingLog(settings.isUseLog());\n    }\n  }\n}", "class_name": "OrientTransactionalGraph", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/OServer.java\n// --------------------------------------------------\n// public Set<String> listDatabases(){\n//   Set<String> dbs=databases.listDatabases(null,null);\n//   dbs.remove(OSystemDatabase.SYSTEM_DB_NAME);\n//   return dbs;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/OAsynchDistributedOperation.java\n// --------------------------------------------------\n// public Set<String> getClusterNames(){\n//   return clusterNames;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java\n// --------------------------------------------------\n// /** \n//  * Returns the set of server names involved on the passed cluster collection.\n//  * @param iClusterNames Collection of cluster names to find\n//  */\n// public Set<String> getServers(Collection<String> iClusterNames){\n//   if (iClusterNames == null || iClusterNames.isEmpty())   return getAllConfiguredServers();\n//   final Set<String> partitions=new HashSet<String>(iClusterNames.size());\n//   for (  String p : iClusterNames) {\n//     final List<String> serverList=getClusterConfiguration(p).field(SERVERS);\n//     if (serverList != null) {\n//       for (      String s : serverList)       if (!s.equals(NEW_NODE_TAG))       partitions.add(s);\n//     }\n//   }\n//   return partitions;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java\n// --------------------------------------------------\n// /** \n//  * Returns the complete list of servers found in configuration. \n//  */\n// public Set<String> getAllConfiguredServers(){\n//   final Set<String> servers=new HashSet<String>();\n//   for (  String p : getClusterNames()) {\n//     final List<String> serverList=getClusterConfiguration(p).field(SERVERS);\n//     if (serverList != null) {\n//       for (      String s : serverList)       if (!s.equals(NEW_NODE_TAG))       servers.add(s);\n//     }\n//   }\n//   return servers;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java\n// --------------------------------------------------\n// /** \n//  * Returns the set of clusters where server is the owner.\n//  * @param iNodeName Server name\n//  */\n// public Set<String> getClustersOwnedByServer(final String iNodeName){\n//   final Set<String> clusters=new HashSet<String>();\n//   for (  String cl : getClusterNames()) {\n//     if (iNodeName.equals(getClusterOwner(cl)))     clusters.add(cl);\n//   }\n//   return clusters;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java\n// --------------------------------------------------\n// /** \n//  * Returns the registered servers. \n//  */\n// public Set<String> getRegisteredServers(){\n//   final ODocument servers=configuration.field(SERVERS);\n//   final Set<String> result=new HashSet<String>();\n//   if (servers != null)   for (  String s : servers.fieldNames())   result.add(s);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java\n// --------------------------------------------------\n// /** \n//  * Returns all the configured data centers' names, if any. \n//  */\n// public Set<String> getDataCenters(){\n//   final ODocument dcs=configuration.field(DCS);\n//   if (dcs == null)   return Collections.EMPTY_SET;\n//   final Set<String> result=new HashSet<String>();\n//   for (  String dc : dcs.fieldNames()) {\n//     result.add(dc);\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedMessageService.java\n// --------------------------------------------------\n// Set<String> getDatabases();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedResponseManager.java\n// --------------------------------------------------\n// Set<String> getExpectedNodes();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedResponseManagerImpl.java\n// --------------------------------------------------\n// public Set<String> getExpectedNodes(){\n//   synchronousResponsesLock.lock();\n//   try {\n//     return new HashSet<String>(responses.keySet());\n//   }\n//   finally {\n//     synchronousResponsesLock.unlock();\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerManager.java\n// --------------------------------------------------\n// Set<String> getAvailableNodeNames(String databaseName);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerManager.java\n// --------------------------------------------------\n// Set<String> getAvailableNodeNotLocalNames(String databaseName);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerManager.java\n// --------------------------------------------------\n// Set<String> getActiveServers();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerManager.java\n// --------------------------------------------------\n// Set<String> getActiveServerNotLocal();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedStrategy.java\n// --------------------------------------------------\n// Set<String> getNodesConcurInQuorum(ODistributedServerManager manager,ODistributedConfiguration cfg,ODistributedRequest request,Collection<String> iNodes);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/server/src/main/java/com/orientechnologies/orient/server/plugin/mail/OMailPlugin.java\n// --------------------------------------------------\n// public Set<String> getProfileNames(){\n//   return profiles.keySet();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/tests/src/test/java/com/orientechnologies/orient/test/domain/base/JavaComplexTestClass.java\n// --------------------------------------------------\n// public Set<String> getStringSet(){\n//   return stringSet;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/tests/src/test/java/com/orientechnologies/orient/test/domain/base/SimplePerson.java\n// --------------------------------------------------\n// public Set<String> getAnimals(){\n//   return animals;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/tests/src/test/java/com/orientechnologies/orient/test/domain/schemageneration/JavaTestSchemaGeneration.java\n// --------------------------------------------------\n// public Set<String> getStringSet(){\n//   return stringSet;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/tools/src/main/java/com/orientechnologies/orient/stresstest/workload/OWorkloadFactory.java\n// --------------------------------------------------\n// public Set<String> getRegistered(){\n//   return registered.keySet();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OIndexFullText extends OIndexMultiValues {\n\n  private static final String CONFIG_STOP_WORDS = \"stopWords\";\n  private static final String CONFIG_SEPARATOR_CHARS = \"separatorChars\";\n  private static final String CONFIG_IGNORE_CHARS = \"ignoreChars\";\n  private static final String CONFIG_INDEX_RADIX = \"indexRadix\";\n  private static final String CONFIG_MIN_WORD_LEN = \"minWordLength\";\n  private static final boolean DEF_INDEX_RADIX = true;\n  private static final String DEF_SEPARATOR_CHARS = \" \\r\\n\\t:;,.|+*/\\\\=!?[]()\";\n  private static final String DEF_IGNORE_CHARS = \"'\\\"\";\n  private static final String DEF_STOP_WORDS =\n      \"the in a at as and or for his her \"\n          + \"him this that what which while \"\n          + \"up with be was were is\";\n  private boolean indexRadix;\n  private String separatorChars;\n  private String ignoreChars;\n  private int minWordLength;\n\n  private Set<String> stopWords;\n\n  public OIndexFullText(OIndexMetadata im, final OStorage storage) {\n    super(im, storage);\n    acquireExclusiveLock();\n    try {\n      config();\n      configWithMetadata(im.getMetadata());\n    } finally {\n      releaseExclusiveLock();\n    }\n  }\n\n  /**\n   * Indexes a value and save the index. Splits the value in single words and index each one. Save\n   * of the index is responsibility of the caller.\n   */\n  @Override\n  public OIndexFullText put(Object key, final OIdentifiable value) {\n    if (key == null) {\n      return this;\n    }\n    final ORID rid = value.getIdentity();\n\n    if (!rid.isValid()) {\n      if (value instanceof ORecord) {\n        // EARLY SAVE IT\n        ((ORecord) value).save();\n      } else {\n        throw new IllegalArgumentException(\n            \"Cannot store non persistent RID as index value for key '\" + key + \"'\");\n      }\n    }\n\n    key = getCollatingValue(key);\n\n    final Set<String> words = splitIntoWords(key.toString());\n\n    ODatabaseDocumentInternal database = getDatabase();\n    if (database.getTransaction().isActive()) {\n      OTransaction singleTx = database.getTransaction();\n      for (String word : words) {\n        singleTx.addIndexEntry(\n            this, super.getName(), OTransactionIndexChanges.OPERATION.PUT, word, value);\n      }\n    } else {\n      database.begin();\n      OTransaction singleTx = database.getTransaction();\n      for (String word : words) {\n        singleTx.addIndexEntry(\n            this, super.getName(), OTransactionIndexChanges.OPERATION.PUT, word, value);\n      }\n      database.commit();\n    }\n\n    return this;\n  }\n\n  /**\n   * Splits passed in key on several words and remove records with keys equals to any item of split\n   * result and values equals to passed in value.\n   *\n   * @param key Key to remove.\n   * @param rid Value to remove.\n   * @return <code>true</code> if at least one record is removed.\n   */\n  @Override\n  public boolean remove(Object key, final OIdentifiable rid) {\n    if (key == null) {\n      return false;\n    }\n    key = getCollatingValue(key);\n\n    final Set<String> words = splitIntoWords(key.toString());\n    ODatabaseDocumentInternal database = getDatabase();\n    if (database.getTransaction().isActive()) {\n      for (final String word : words) {\n        database.getTransaction().addIndexEntry(this, super.getName(), OPERATION.REMOVE, word, rid);\n      }\n    } else {\n      database.begin();\n      for (final String word : words) {\n        database.getTransaction().addIndexEntry(this, super.getName(), OPERATION.REMOVE, word, rid);\n      }\n      database.commit();\n    }\n\n    return true;\n  }\n\n  @Override\n  public OIndexMultiValues create(\n      OIndexMetadata metadata, boolean rebuild, OProgressListener progressListener) {\n    if (metadata.getIndexDefinition().getFields().size() > 1) {\n      throw new OIndexException(getType() + \" indexes cannot be used as composite ones.\");\n    }\n    super.create(metadata, rebuild, progressListener);\n    return this;\n  }\n\n  @Override\n  public ODocument updateConfiguration() {\n    ODocument document = super.updateConfiguration();\n    document.field(CONFIG_SEPARATOR_CHARS, separatorChars);\n    document.field(CONFIG_IGNORE_CHARS, ignoreChars);\n    document.field(CONFIG_STOP_WORDS, stopWords);\n    document.field(CONFIG_MIN_WORD_LEN, minWordLength);\n    document.field(CONFIG_INDEX_RADIX, indexRadix);\n\n    return document;\n  }\n\n  public boolean canBeUsedInEqualityOperators() {\n    return false;\n  }\n\n  public boolean supportsOrderedIterations() {\n    return false;\n  }\n\n  private void configWithMetadata(ODocument metadata) {\n    if (metadata != null) {\n      if (metadata.containsField(CONFIG_IGNORE_CHARS)) {\n        ignoreChars = metadata.field(CONFIG_IGNORE_CHARS);\n      }\n\n      if (metadata.containsField(CONFIG_INDEX_RADIX)) {\n        indexRadix = metadata.field(CONFIG_INDEX_RADIX);\n      }\n\n      if (metadata.containsField(CONFIG_SEPARATOR_CHARS)) {\n        separatorChars = metadata.field(CONFIG_SEPARATOR_CHARS);\n      }\n\n      if (metadata.containsField(CONFIG_MIN_WORD_LEN)) {\n        minWordLength = metadata.field(CONFIG_MIN_WORD_LEN);\n      }\n\n      if (metadata.containsField(CONFIG_STOP_WORDS)) {\n        stopWords = new HashSet<>(metadata.field(CONFIG_STOP_WORDS));\n      }\n    }\n  }\n\n  private void config() {\n    ignoreChars = DEF_IGNORE_CHARS;\n    indexRadix = DEF_INDEX_RADIX;\n    separatorChars = DEF_SEPARATOR_CHARS;\n    minWordLength = 3;\n    stopWords = new HashSet<>(OStringSerializerHelper.split(DEF_STOP_WORDS, ' '));\n  }\n\n  private Set<String> splitIntoWords(final String iKey) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "orientechnologies_orientdb/421", "ground_truth": "\n    final Set<String> result = new HashSet<>();\n\n    final List<String> words = new ArrayList<>();\n    OStringSerializerHelper.split(words, iKey, 0, -1, separatorChars);\n\n    final StringBuilder buffer = new StringBuilder(64);\n    // FOREACH WORD CREATE THE LINK TO THE CURRENT DOCUMENT\n\n    char c;\n    boolean ignore;\n    for (String word : words) {\n      buffer.setLength(0);\n\n      for (int i = 0; i < word.length(); ++i) {\n        c = word.charAt(i);\n        ignore = false;\n        for (int k = 0; k < ignoreChars.length(); ++k) {\n          if (c == ignoreChars.charAt(k)) {\n            ignore = true;\n            break;\n          }\n        }\n\n        if (!ignore) {\n          buffer.append(c);\n        }\n      }\n\n      int length = buffer.length();\n\n      while (length >= minWordLength) {\n        buffer.setLength(length);\n        word = buffer.toString();\n\n        // CHECK IF IT'S A STOP WORD\n        if (!stopWords.contains(word))\n        // ADD THE WORD TO THE RESULT SET\n        {\n          result.add(word);\n        }\n\n        if (indexRadix) {\n          length--;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return result;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "index", "OIndexFullText.java"], "context_start_lineno": 0, "function_name": "splitIntoWords", "left_context": "class OIndexFullText extends OIndexMultiValues {\n\n  private static final String CONFIG_STOP_WORDS = \"stopWords\";\n  private static final String CONFIG_SEPARATOR_CHARS = \"separatorChars\";\n  private static final String CONFIG_IGNORE_CHARS = \"ignoreChars\";\n  private static final String CONFIG_INDEX_RADIX = \"indexRadix\";\n  private static final String CONFIG_MIN_WORD_LEN = \"minWordLength\";\n  private static final boolean DEF_INDEX_RADIX = true;\n  private static final String DEF_SEPARATOR_CHARS = \" \\r\\n\\t:;,.|+*/\\\\=!?[]()\";\n  private static final String DEF_IGNORE_CHARS = \"'\\\"\";\n  private static final String DEF_STOP_WORDS =\n      \"the in a at as and or for his her \"\n          + \"him this that what which while \"\n          + \"up with be was were is\";\n  private boolean indexRadix;\n  private String separatorChars;\n  private String ignoreChars;\n  private int minWordLength;\n\n  private Set<String> stopWords;\n\n  public OIndexFullText(OIndexMetadata im, final OStorage storage) {\n    super(im, storage);\n    acquireExclusiveLock();\n    try {\n      config();\n      configWithMetadata(im.getMetadata());\n    } finally {\n      releaseExclusiveLock();\n    }\n  }\n\n  /**\n   * Indexes a value and save the index. Splits the value in single words and index each one. Save\n   * of the index is responsibility of the caller.\n   */\n  @Override\n  public OIndexFullText put(Object key, final OIdentifiable value) {\n    if (key == null) {\n      return this;\n    }\n    final ORID rid = value.getIdentity();\n\n    if (!rid.isValid()) {\n      if (value instanceof ORecord) {\n        // EARLY SAVE IT\n        ((ORecord) value).save();\n      } else {\n        throw new IllegalArgumentException(\n            \"Cannot store non persistent RID as index value for key '\" + key + \"'\");\n      }\n    }\n\n    key = getCollatingValue(key);\n\n    final Set<String> words = splitIntoWords(key.toString());\n\n    ODatabaseDocumentInternal database = getDatabase();\n    if (database.getTransaction().isActive()) {\n      OTransaction singleTx = database.getTransaction();\n      for (String word : words) {\n        singleTx.addIndexEntry(\n            this, super.getName(), OTransactionIndexChanges.OPERATION.PUT, word, value);\n      }\n    } else {\n      database.begin();\n      OTransaction singleTx = database.getTransaction();\n      for (String word : words) {\n        singleTx.addIndexEntry(\n            this, super.getName(), OTransactionIndexChanges.OPERATION.PUT, word, value);\n      }\n      database.commit();\n    }\n\n    return this;\n  }\n\n  /**\n   * Splits passed in key on several words and remove records with keys equals to any item of split\n   * result and values equals to passed in value.\n   *\n   * @param key Key to remove.\n   * @param rid Value to remove.\n   * @return <code>true</code> if at least one record is removed.\n   */\n  @Override\n  public boolean remove(Object key, final OIdentifiable rid) {\n    if (key == null) {\n      return false;\n    }\n    key = getCollatingValue(key);\n\n    final Set<String> words = splitIntoWords(key.toString());\n    ODatabaseDocumentInternal database = getDatabase();\n    if (database.getTransaction().isActive()) {\n      for (final String word : words) {\n        database.getTransaction().addIndexEntry(this, super.getName(), OPERATION.REMOVE, word, rid);\n      }\n    } else {\n      database.begin();\n      for (final String word : words) {\n        database.getTransaction().addIndexEntry(this, super.getName(), OPERATION.REMOVE, word, rid);\n      }\n      database.commit();\n    }\n\n    return true;\n  }\n\n  @Override\n  public OIndexMultiValues create(\n      OIndexMetadata metadata, boolean rebuild, OProgressListener progressListener) {\n    if (metadata.getIndexDefinition().getFields().size() > 1) {\n      throw new OIndexException(getType() + \" indexes cannot be used as composite ones.\");\n    }\n    super.create(metadata, rebuild, progressListener);\n    return this;\n  }\n\n  @Override\n  public ODocument updateConfiguration() {\n    ODocument document = super.updateConfiguration();\n    document.field(CONFIG_SEPARATOR_CHARS, separatorChars);\n    document.field(CONFIG_IGNORE_CHARS, ignoreChars);\n    document.field(CONFIG_STOP_WORDS, stopWords);\n    document.field(CONFIG_MIN_WORD_LEN, minWordLength);\n    document.field(CONFIG_INDEX_RADIX, indexRadix);\n\n    return document;\n  }\n\n  public boolean canBeUsedInEqualityOperators() {\n    return false;\n  }\n\n  public boolean supportsOrderedIterations() {\n    return false;\n  }\n\n  private void configWithMetadata(ODocument metadata) {\n    if (metadata != null) {\n      if (metadata.containsField(CONFIG_IGNORE_CHARS)) {\n        ignoreChars = metadata.field(CONFIG_IGNORE_CHARS);\n      }\n\n      if (metadata.containsField(CONFIG_INDEX_RADIX)) {\n        indexRadix = metadata.field(CONFIG_INDEX_RADIX);\n      }\n\n      if (metadata.containsField(CONFIG_SEPARATOR_CHARS)) {\n        separatorChars = metadata.field(CONFIG_SEPARATOR_CHARS);\n      }\n\n      if (metadata.containsField(CONFIG_MIN_WORD_LEN)) {\n        minWordLength = metadata.field(CONFIG_MIN_WORD_LEN);\n      }\n\n      if (metadata.containsField(CONFIG_STOP_WORDS)) {\n        stopWords = new HashSet<>(metadata.field(CONFIG_STOP_WORDS));\n      }\n    }\n  }\n\n  private void config() {\n    ignoreChars = DEF_IGNORE_CHARS;\n    indexRadix = DEF_INDEX_RADIX;\n    separatorChars = DEF_SEPARATOR_CHARS;\n    minWordLength = 3;\n    stopWords = new HashSet<>(OStringSerializerHelper.split(DEF_STOP_WORDS, ' '));\n  }\n\n  private Set<String> splitIntoWords(final String iKey) {", "right_context": "}\n}", "class_name": "OIndexFullText", "return_type": "Set<String>", "parameters": [{"type": "String", "name": "iKey"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OSQLScriptEngine implements ScriptEngine {\n\n  public static final String NAME = \"sql\";\n  private ScriptEngineFactory factory;\n\n  public OSQLScriptEngine(ScriptEngineFactory factory) {\n    this.factory = factory;\n  }\n\n  @Override\n  public Object eval(String script, ScriptContext context) throws ScriptException {\n    return eval(script, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(Reader reader, ScriptContext context) throws ScriptException {\n    return eval(reader, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(String script) throws ScriptException {\n    return eval(script, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(Reader reader) throws ScriptException {\n    return eval(reader, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(String script, Bindings n) throws ScriptException {<FILL_FUNCTION_BODY>}\n\n  @SuppressWarnings(\"unchecked\")\n  protected Map<Object, Object> convertToParameters(Object... iArgs) {\n    final Map<Object, Object> params;\n\n    if (iArgs.length == 1 && iArgs[0] instanceof Map) {\n      params = (Map<Object, Object>) iArgs[0];\n    } else {\n      if (iArgs.length == 1\n          && iArgs[0] != null\n          && iArgs[0].getClass().isArray()\n          && iArgs[0] instanceof Object[]) iArgs = (Object[]) iArgs[0];\n\n      params = new HashMap<Object, Object>(iArgs.length);\n      for (int i = 0; i < iArgs.length; ++i) {\n        Object par = iArgs[i];\n\n        if (par instanceof OIdentifiable && ((OIdentifiable) par).getIdentity().isValid())\n          // USE THE RID ONLY\n          par = ((OIdentifiable) par).getIdentity();\n\n        params.put(i, par);\n      }\n    }\n    return params;\n  }\n\n  @Override\n  public Object eval(Reader reader, Bindings n) throws ScriptException {\n    final StringBuilder buffer = new StringBuilder();\n    try {\n      while (reader.ready()) buffer.append((char) reader.read());\n    } catch (IOException e) {\n      throw new ScriptException(e);\n    }\n\n    return new OCommandScript(buffer.toString()).execute(n);\n  }\n\n  @Override\n  public void put(String key, Object value) {}\n\n  @Override\n  public Object get(String key) {\n    return null;\n  }\n\n  @Override\n  public Bindings getBindings(int scope) {\n    return new SimpleBindings();\n  }\n\n  @Override\n  public void setBindings(Bindings bindings, int scope) {}\n\n  @Override\n  public Bindings createBindings() {\n    return new SimpleBindings();\n  }\n\n  @Override\n  public ScriptContext getContext() {\n    return null;\n  }\n\n  @Override\n  public void setContext(ScriptContext context) {}\n\n  @Override\n  public ScriptEngineFactory getFactory() {\n    return factory;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/437", "ground_truth": "\n    ODatabaseDocumentInternal db = ODatabaseRecordThreadLocal.instance().getIfDefined();\n    if (db == null) {\n      throw new OCommandExecutionException(\"No database available in threadlocal\");\n    }\n    Map<Object, Object> params = convertToParameters(n);\n    OResultSet queryResult;\n    if (params.keySet().stream().anyMatch(x -> !(x instanceof String))) {\n      queryResult = db.execute(\"sql\", script, params);\n    } else {\n      queryResult = db.execute(\"sql\", script, (Map) params);\n    }\n    try (OResultSet res = queryResult) {\n      OLegacyResultSet finalResult = new OBasicLegacyResultSet();\n      res.stream().forEach(x -> finalResult.add(x));\n      return finalResult;\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "OSQLScriptEngine.java"], "context_start_lineno": 0, "function_name": "eval", "left_context": "class OSQLScriptEngine implements ScriptEngine {\n\n  public static final String NAME = \"sql\";\n  private ScriptEngineFactory factory;\n\n  public OSQLScriptEngine(ScriptEngineFactory factory) {\n    this.factory = factory;\n  }\n\n  @Override\n  public Object eval(String script, ScriptContext context) throws ScriptException {\n    return eval(script, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(Reader reader, ScriptContext context) throws ScriptException {\n    return eval(reader, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(String script) throws ScriptException {\n    return eval(script, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(Reader reader) throws ScriptException {\n    return eval(reader, (Bindings) null);\n  }\n\n  @Override\n  public Object eval(String script, Bindings n) throws ScriptException {", "right_context": "}\n\n  @SuppressWarnings(\"unchecked\")\n  protected Map<Object, Object> convertToParameters(Object... iArgs) {\n    final Map<Object, Object> params;\n\n    if (iArgs.length == 1 && iArgs[0] instanceof Map) {\n      params = (Map<Object, Object>) iArgs[0];\n    } else {\n      if (iArgs.length == 1\n          && iArgs[0] != null\n          && iArgs[0].getClass().isArray()\n          && iArgs[0] instanceof Object[]) iArgs = (Object[]) iArgs[0];\n\n      params = new HashMap<Object, Object>(iArgs.length);\n      for (int i = 0; i < iArgs.length; ++i) {\n        Object par = iArgs[i];\n\n        if (par instanceof OIdentifiable && ((OIdentifiable) par).getIdentity().isValid())\n          // USE THE RID ONLY\n          par = ((OIdentifiable) par).getIdentity();\n\n        params.put(i, par);\n      }\n    }\n    return params;\n  }\n\n  @Override\n  public Object eval(Reader reader, Bindings n) throws ScriptException {\n    final StringBuilder buffer = new StringBuilder();\n    try {\n      while (reader.ready()) buffer.append((char) reader.read());\n    } catch (IOException e) {\n      throw new ScriptException(e);\n    }\n\n    return new OCommandScript(buffer.toString()).execute(n);\n  }\n\n  @Override\n  public void put(String key, Object value) {}\n\n  @Override\n  public Object get(String key) {\n    return null;\n  }\n\n  @Override\n  public Bindings getBindings(int scope) {\n    return new SimpleBindings();\n  }\n\n  @Override\n  public void setBindings(Bindings bindings, int scope) {}\n\n  @Override\n  public Bindings createBindings() {\n    return new SimpleBindings();\n  }\n\n  @Override\n  public ScriptContext getContext() {\n    return null;\n  }\n\n  @Override\n  public void setContext(ScriptContext context) {}\n\n  @Override\n  public ScriptEngineFactory getFactory() {\n    return factory;\n  }\n}", "class_name": "OSQLScriptEngine", "return_type": "Object", "parameters": [{"type": "String", "name": "script"}, {"type": "Bindings", "name": "n"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SimpleNode implements Node {\n  public static final String PARAMETER_PLACEHOLDER = \"?\";\n  protected Node parent;\n  protected Node[] children;\n  protected int id;\n  protected Object value;\n  protected OrientSql parser;\n  protected Token firstToken;\n  protected Token lastToken;\n\n  public SimpleNode() {\n    id = -1;\n  }\n\n  public SimpleNode(int i) {\n    id = i;\n  }\n\n  public SimpleNode(OrientSql p, int i) {\n    this(i);\n    parser = p;\n  }\n\n  public void jjtOpen() {}\n\n  public void jjtClose() {}\n\n  public void jjtSetParent(Node n) {\n    parent = n;\n  }\n\n  public Node jjtGetParent() {\n    return parent;\n  }\n\n  public void jjtAddChild(Node n, int i) {<FILL_FUNCTION_BODY>}\n\n  public Node jjtGetChild(int i) {\n    return children[i];\n  }\n\n  public int jjtGetNumChildren() {\n    return (children == null) ? 0 : children.length;\n  }\n\n  public void jjtSetValue(Object value) {\n    this.value = value;\n  }\n\n  public Object jjtGetValue() {\n    return value;\n  }\n\n  public Token jjtGetFirstToken() {\n    return firstToken;\n  }\n\n  public void jjtSetFirstToken(Token token) {\n    this.firstToken = token;\n  }\n\n  public Token jjtGetLastToken() {\n    return lastToken;\n  }\n\n  public void jjtSetLastToken(Token token) {\n    this.lastToken = token;\n  }\n\n  /*\n   * You can override these two methods in subclasses of SimpleNode to customize the way the node appears when the tree is dumped.\n   * If your output uses more than one line you should override toString(String), otherwise overriding toString() is probably all\n   * you need to do.\n   */\n\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    toString(null, result);\n    return result.toString();\n  }\n\n  public String toString(String prefix) {\n    return prefix + toString();\n  }\n\n  /*\n   * Override this method if you want to customize how the node dumps out its children.\n   */\n\n  public void dump(String prefix) {\n    if (children != null) {\n      for (int i = 0; i < children.length; ++i) {\n        SimpleNode n = (SimpleNode) children[i];\n        if (n != null) {\n          n.dump(prefix + \" \");\n        }\n      }\n    }\n  }\n\n  public static ODatabaseDocumentInternal getDatabase() {\n    return ODatabaseRecordThreadLocal.instance().get();\n  }\n\n  public abstract void toString(Map<Object, Object> params, StringBuilder builder);\n\n  public abstract void toGenericStatement(StringBuilder builder);\n\n  public String toGenericStatement() {\n    StringBuilder builder = new StringBuilder();\n    toGenericStatement(builder);\n    return builder.toString();\n  }\n\n  public Object getValue() {\n    return value;\n  }\n\n  public SimpleNode copy() {\n    throw new UnsupportedOperationException();\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/438", "ground_truth": "\n    if (children == null) {\n      children = new Node[i + 1];\n    } else if (i >= children.length) {\n      Node c[] = new Node[i + 1];\n      System.arraycopy(children, 0, c, 0, children.length);\n      children = c;\n    }\n    children[i] = n;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "parser", "SimpleNode.java"], "context_start_lineno": 0, "function_name": "jjtAddChild", "left_context": "class SimpleNode implements Node {\n  public static final String PARAMETER_PLACEHOLDER = \"?\";\n  protected Node parent;\n  protected Node[] children;\n  protected int id;\n  protected Object value;\n  protected OrientSql parser;\n  protected Token firstToken;\n  protected Token lastToken;\n\n  public SimpleNode() {\n    id = -1;\n  }\n\n  public SimpleNode(int i) {\n    id = i;\n  }\n\n  public SimpleNode(OrientSql p, int i) {\n    this(i);\n    parser = p;\n  }\n\n  public void jjtOpen() {}\n\n  public void jjtClose() {}\n\n  public void jjtSetParent(Node n) {\n    parent = n;\n  }\n\n  public Node jjtGetParent() {\n    return parent;\n  }\n\n  public void jjtAddChild(Node n, int i) {", "right_context": "}\n\n  public Node jjtGetChild(int i) {\n    return children[i];\n  }\n\n  public int jjtGetNumChildren() {\n    return (children == null) ? 0 : children.length;\n  }\n\n  public void jjtSetValue(Object value) {\n    this.value = value;\n  }\n\n  public Object jjtGetValue() {\n    return value;\n  }\n\n  public Token jjtGetFirstToken() {\n    return firstToken;\n  }\n\n  public void jjtSetFirstToken(Token token) {\n    this.firstToken = token;\n  }\n\n  public Token jjtGetLastToken() {\n    return lastToken;\n  }\n\n  public void jjtSetLastToken(Token token) {\n    this.lastToken = token;\n  }\n\n  /*\n   * You can override these two methods in subclasses of SimpleNode to customize the way the node appears when the tree is dumped.\n   * If your output uses more than one line you should override toString(String), otherwise overriding toString() is probably all\n   * you need to do.\n   */\n\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    toString(null, result);\n    return result.toString();\n  }\n\n  public String toString(String prefix) {\n    return prefix + toString();\n  }\n\n  /*\n   * Override this method if you want to customize how the node dumps out its children.\n   */\n\n  public void dump(String prefix) {\n    if (children != null) {\n      for (int i = 0; i < children.length; ++i) {\n        SimpleNode n = (SimpleNode) children[i];\n        if (n != null) {\n          n.dump(prefix + \" \");\n        }\n      }\n    }\n  }\n\n  public static ODatabaseDocumentInternal getDatabase() {\n    return ODatabaseRecordThreadLocal.instance().get();\n  }\n\n  public abstract void toString(Map<Object, Object> params, StringBuilder builder);\n\n  public abstract void toGenericStatement(StringBuilder builder);\n\n  public String toGenericStatement() {\n    StringBuilder builder = new StringBuilder();\n    toGenericStatement(builder);\n    return builder.toString();\n  }\n\n  public Object getValue() {\n    return value;\n  }\n\n  public SimpleNode copy() {\n    throw new UnsupportedOperationException();\n  }\n}", "class_name": "SimpleNode", "return_type": "void", "parameters": [{"type": "Node", "name": "n"}, {"type": "int", "name": "i"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OSynchronizedTaskWrapper extends OAbstractRemoteTask {\n  private boolean usesDatabase;\n  private CountDownLatch latch;\n  private ORemoteTask task;\n\n  public OSynchronizedTaskWrapper(\n      final CountDownLatch iLatch, final String iNodeName, final ORemoteTask iTask) {\n    this.latch = iLatch;\n    this.task = iTask;\n    this.task.setNodeSource(iNodeName);\n    this.usesDatabase = true;\n  }\n\n  public OSynchronizedTaskWrapper(final CountDownLatch iLatch) {\n    latch = iLatch;\n    usesDatabase = false;\n  }\n\n  @Override\n  public String getName() {\n    return null;\n  }\n\n  @Override\n  public OCommandDistributedReplicateRequest.QUORUM_TYPE getQuorumType() {\n    return null;\n  }\n\n  @Override\n  public Object execute(\n      ODistributedRequestId requestId,\n      OServer iServer,\n      ODistributedServerManager iManager,\n      ODatabaseDocumentInternal database)\n      throws Exception {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public int getFactoryId() {\n    return 0;\n  }\n\n  @Override\n  public String toString() {\n    return \"(\" + (task != null ? task.toString() : \"-\") + \")\";\n  }\n\n  @Override\n  public boolean isUsingDatabase() {\n    return usesDatabase;\n  }\n\n  @Override\n  public boolean hasResponse() {\n    if (task == null) return super.hasResponse();\n    else return task.hasResponse();\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/457", "ground_truth": "\n    try {\n      if (task != null) return task.execute(requestId, iServer, iManager, database);\n      return null;\n    } finally {\n      // RELEASE ALL PENDING WORKERS\n      latch.countDown();\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "distributed", "src", "main", "java", "com", "orientechnologies", "orient", "server", "distributed", "impl", "OSynchronizedTaskWrapper.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class OSynchronizedTaskWrapper extends OAbstractRemoteTask {\n  private boolean usesDatabase;\n  private CountDownLatch latch;\n  private ORemoteTask task;\n\n  public OSynchronizedTaskWrapper(\n      final CountDownLatch iLatch, final String iNodeName, final ORemoteTask iTask) {\n    this.latch = iLatch;\n    this.task = iTask;\n    this.task.setNodeSource(iNodeName);\n    this.usesDatabase = true;\n  }\n\n  public OSynchronizedTaskWrapper(final CountDownLatch iLatch) {\n    latch = iLatch;\n    usesDatabase = false;\n  }\n\n  @Override\n  public String getName() {\n    return null;\n  }\n\n  @Override\n  public OCommandDistributedReplicateRequest.QUORUM_TYPE getQuorumType() {\n    return null;\n  }\n\n  @Override\n  public Object execute(\n      ODistributedRequestId requestId,\n      OServer iServer,\n      ODistributedServerManager iManager,\n      ODatabaseDocumentInternal database)\n      throws Exception {", "right_context": "}\n\n  @Override\n  public int getFactoryId() {\n    return 0;\n  }\n\n  @Override\n  public String toString() {\n    return \"(\" + (task != null ? task.toString() : \"-\") + \")\";\n  }\n\n  @Override\n  public boolean isUsingDatabase() {\n    return usesDatabase;\n  }\n\n  @Override\n  public boolean hasResponse() {\n    if (task == null) return super.hasResponse();\n    else return task.hasResponse();\n  }\n}", "class_name": "OSynchronizedTaskWrapper", "return_type": "Object", "parameters": [{"type": "ODistributedRequestId", "name": "requestId"}, {"type": "OServer", "name": "iServer"}, {"type": "ODistributedServerManager", "name": "iManager"}, {"type": "ODatabaseDocumentInternal", "name": "database"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/UpdateMergeStep.java\n// --------------------------------------------------\n// private OResult mapResult(OResult result,OCommandContext ctx){\n//   if (result instanceof OResultInternal) {\n//     if (!(result.getElement().orElse(null) instanceof ODocument)) {\n//       ((OResultInternal)result).setElement(result.getElement().get().getRecord());\n//     }\n//     if (!(result.getElement().orElse(null) instanceof ODocument)) {\n//       return result;\n//     }\n//     handleMerge((ODocument)result.getElement().orElse(null),ctx);\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/UpdateRemoveStep.java\n// --------------------------------------------------\n// private OResult mapResult(OResult result,OCommandContext ctx){\n//   if (result instanceof OResultInternal) {\n//     for (    OUpdateRemoveItem item : items) {\n//       item.applyUpdate((OResultInternal)result,ctx);\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/UpdateSetStep.java\n// --------------------------------------------------\n// private OResult mapResult(OResult result,OCommandContext ctx){\n//   if (result instanceof OResultInternal) {\n//     for (    OUpdateItem item : items) {\n//       OClass type=result.getElement().flatMap(x -> x.getSchemaType()).orElse(null);\n//       if (type == null) {\n//         Object clazz=result.getProperty(\"@view\");\n//         if (clazz instanceof String) {\n//           type=ctx.getDatabase().getMetadata().getSchema().getView((String)clazz);\n//         }\n//       }\n//       item.applyUpdate((OResultInternal)result,ctx);\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/BreadthFirstTraverseStep.java\n// --------------------------------------------------\n// private OResult toTraverseResult(OResult item){\n//   OTraverseResult res=null;\n//   if (item instanceof OTraverseResult) {\n//     res=(OTraverseResult)item;\n//   }\n//  else   if (item.isElement() && item.getElement().get().getIdentity().isPersistent()) {\n//     res=new OTraverseResult(item.getElement().get());\n//     res.depth=0;\n//     res.setMetadata(\"$depth\",0);\n//   }\n//  else   if (item.getPropertyNames().size() == 1) {\n//     Object val=item.getProperty(item.getPropertyNames().iterator().next());\n//     if (val instanceof OIdentifiable) {\n//       res=new OTraverseResult((OIdentifiable)val);\n//       res.depth=0;\n//       res.setMetadata(\"$depth\",0);\n//     }\n//   }\n//  else {\n//     res=new OTraverseResult();\n//     for (    String key : item.getPropertyNames()) {\n//       res.setProperty(key,item.getProperty(key));\n//     }\n//     for (    String md : item.getMetadataKeys()) {\n//       res.setMetadata(md,item.getMetadata(md));\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/DepthFirstTraverseStep.java\n// --------------------------------------------------\n// private OResult toTraverseResult(OResult item){\n//   OTraverseResult res=null;\n//   if (item instanceof OTraverseResult) {\n//     res=(OTraverseResult)item;\n//   }\n//  else   if (item.isElement() && item.getElement().get().getIdentity().isValid()) {\n//     res=new OTraverseResult(item.getElement().get());\n//     res.depth=0;\n//   }\n//  else   if (item.getPropertyNames().size() == 1) {\n//     Object val=item.getProperty(item.getPropertyNames().iterator().next());\n//     if (val instanceof OIdentifiable) {\n//       res=new OTraverseResult((OIdentifiable)val);\n//       res.depth=0;\n//       res.setMetadata(\"$depth\",0);\n//     }\n//   }\n//  else {\n//     res=new OTraverseResult();\n//     for (    String key : item.getPropertyNames()) {\n//       res.setProperty(key,convert(item.getProperty(key)));\n//     }\n//     for (    String md : item.getMetadataKeys()) {\n//       res.setMetadata(md,item.getMetadata(md));\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/command/script/transformer/OScriptTransformer.java\n// --------------------------------------------------\n// OResult toResult(Object value);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/command/script/transformer/OScriptTransformerImpl.java\n// --------------------------------------------------\n// @Override public OResult toResult(Object value){\n//   OResultTransformer transformer=getTransformer(value.getClass());\n//   if (transformer == null) {\n//     return defaultTransformer(value);\n//   }\n//   return transformer.transform(value);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/db/ODatabaseStats.java\n// --------------------------------------------------\n// public OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"loadedRecords\",loadedRecords);\n//   result.setProperty(\"averageLoadRecordTimeMs\",averageLoadRecordTimeMs);\n//   result.setProperty(\"minLoadRecordTimeMs\",minLoadRecordTimeMs);\n//   result.setProperty(\"maxLoadRecordTimeMs\",maxLoadRecordTimeMs);\n//   result.setProperty(\"prefetchedRidbagsCount\",prefetchedRidbagsCount);\n//   result.setProperty(\"ridbagPrefetchTimeMs\",ridbagPrefetchTimeMs);\n//   result.setProperty(\"minRidbagPrefetchTimeMs\",minRidbagPrefetchTimeMs);\n//   result.setProperty(\"maxRidbagPrefetchTimeMs\",maxRidbagPrefetchTimeMs);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/ODDLExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"type\",\"DDLExecutionPlan\");\n//   result.setProperty(JAVA_TYPE,getClass().getName());\n//   result.setProperty(\"stmText\",statement.toString());\n//   result.setProperty(\"cost\",getCost());\n//   result.setProperty(\"prettyPrint\",prettyPrint(0,2));\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/ODeleteExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal res=(OResultInternal)super.toResult();\n//   res.setProperty(\"type\",\"DeleteExecutionPlan\");\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OExecutionPlan.java\n// --------------------------------------------------\n// OResult toResult();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OExecutionStep.java\n// --------------------------------------------------\n// default OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"name\",getName());\n//   result.setProperty(\"type\",getType());\n//   result.setProperty(\"targetNode\",getType());\n//   result.setProperty(OInternalExecutionPlan.JAVA_TYPE,getClass().getName());\n//   result.setProperty(\"cost\",getCost());\n//   result.setProperty(\"subSteps\",getSubSteps() == null ? null : getSubSteps().stream().map(x -> x.toResult()).collect(Collectors.toList()));\n//   result.setProperty(\"description\",getDescription());\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OInfoExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OInfoExecutionStep.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OInsertExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal res=(OResultInternal)super.toResult();\n//   res.setProperty(\"type\",\"InsertExecutionPlan\");\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"type\",\"ScriptExecutionPlan\");\n//   result.setProperty(\"javaType\",getClass().getName());\n//   result.setProperty(\"cost\",getCost());\n//   result.setProperty(\"prettyPrint\",prettyPrint(0,2));\n//   result.setProperty(\"steps\",steps == null ? null : steps.stream().map(x -> x.toResult()).collect(Collectors.toList()));\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OSelectExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"type\",\"QueryExecutionPlan\");\n//   result.setProperty(JAVA_TYPE,getClass().getName());\n//   result.setProperty(\"cost\",getCost());\n//   result.setProperty(\"prettyPrint\",prettyPrint(0,2));\n//   result.setProperty(\"steps\",steps == null ? null : steps.stream().map(x -> x.toResult()).collect(Collectors.toList()));\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OSingleOpExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"type\",\"QueryExecutionPlan\");\n//   result.setProperty(\"javaType\",getClass().getName());\n//   result.setProperty(\"stmText\",statement.toString());\n//   result.setProperty(\"cost\",getCost());\n//   result.setProperty(\"prettyPrint\",prettyPrint(0,2));\n//   result.setProperty(\"steps\",null);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OSingleOpServerExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal result=new OResultInternal();\n//   result.setProperty(\"type\",\"QueryExecutionPlan\");\n//   result.setProperty(\"javaType\",getClass().getName());\n//   result.setProperty(\"stmText\",statement.toString());\n//   result.setProperty(\"cost\",getCost());\n//   result.setProperty(\"prettyPrint\",prettyPrint(0,2));\n//   result.setProperty(\"steps\",null);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// orientdb/core/src/main/java/com/orientechnologies/orient/core/sql/executor/OUpdateExecutionPlan.java\n// --------------------------------------------------\n// @Override public OResult toResult(){\n//   OResultInternal res=(OResultInternal)super.toResult();\n//   res.setProperty(\"type\",\"UpdateExecutionPlan\");\n//   return res;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OIfExecutionPlan implements OInternalExecutionPlan {\n\n  private String location;\n\n  private final OCommandContext ctx;\n\n  @Override\n  public OCommandContext getContext() {\n    return ctx;\n  }\n\n  protected IfStep step;\n\n  public OIfExecutionPlan(OCommandContext ctx) {\n    this.ctx = ctx;\n  }\n\n  @Override\n  public void reset(OCommandContext ctx) {\n    // TODO\n    throw new UnsupportedOperationException();\n  }\n\n  @Override\n  public void close() {\n    step.close();\n  }\n\n  @Override\n  public OExecutionStream start() {\n    return step.start(ctx);\n  }\n\n  @Override\n  public String prettyPrint(int depth, int indent) {\n    StringBuilder result = new StringBuilder();\n    result.append(step.prettyPrint(depth, indent));\n    return result.toString();\n  }\n\n  public void chain(IfStep step) {\n    this.step = step;\n  }\n\n  @Override\n  public List<OExecutionStep> getSteps() {\n    // TODO do a copy of the steps\n    return Collections.singletonList(step);\n  }\n\n  public void setSteps(List<OExecutionStepInternal> steps) {\n    this.step = (IfStep) steps.get(0);\n  }\n\n  @Override\n  public OResult toResult() {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public long getCost() {\n    return 0l;\n  }\n\n  @Override\n  public boolean canBeCached() {\n    return false;\n  }\n\n  public OExecutionStepInternal executeUntilReturn() {\n    OScriptExecutionPlan plan = step.producePlan(ctx);\n    if (plan != null) {\n      return plan.executeUntilReturn();\n    } else {\n      return null;\n    }\n  }\n\n  public boolean containsReturn() {\n    return step.containsReturn();\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/461", "ground_truth": "\n    OResultInternal result = new OResultInternal();\n    result.setProperty(\"type\", \"IfExecutionPlan\");\n    result.setProperty(\"javaType\", getClass().getName());\n    result.setProperty(\"cost\", getCost());\n    result.setProperty(\"prettyPrint\", prettyPrint(0, 2));\n    result.setProperty(\"steps\", Collections.singletonList(step.toResult()));\n    return result;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "orient", "core", "sql", "executor", "OIfExecutionPlan.java"], "context_start_lineno": 0, "function_name": "toResult", "left_context": "class OIfExecutionPlan implements OInternalExecutionPlan {\n\n  private String location;\n\n  private final OCommandContext ctx;\n\n  @Override\n  public OCommandContext getContext() {\n    return ctx;\n  }\n\n  protected IfStep step;\n\n  public OIfExecutionPlan(OCommandContext ctx) {\n    this.ctx = ctx;\n  }\n\n  @Override\n  public void reset(OCommandContext ctx) {\n    // TODO\n    throw new UnsupportedOperationException();\n  }\n\n  @Override\n  public void close() {\n    step.close();\n  }\n\n  @Override\n  public OExecutionStream start() {\n    return step.start(ctx);\n  }\n\n  @Override\n  public String prettyPrint(int depth, int indent) {\n    StringBuilder result = new StringBuilder();\n    result.append(step.prettyPrint(depth, indent));\n    return result.toString();\n  }\n\n  public void chain(IfStep step) {\n    this.step = step;\n  }\n\n  @Override\n  public List<OExecutionStep> getSteps() {\n    // TODO do a copy of the steps\n    return Collections.singletonList(step);\n  }\n\n  public void setSteps(List<OExecutionStepInternal> steps) {\n    this.step = (IfStep) steps.get(0);\n  }\n\n  @Override\n  public OResult toResult() {", "right_context": "}\n\n  @Override\n  public long getCost() {\n    return 0l;\n  }\n\n  @Override\n  public boolean canBeCached() {\n    return false;\n  }\n\n  public OExecutionStepInternal executeUntilReturn() {\n    OScriptExecutionPlan plan = step.producePlan(ctx);\n    if (plan != null) {\n      return plan.executeUntilReturn();\n    } else {\n      return null;\n    }\n  }\n\n  public boolean containsReturn() {\n    return step.containsReturn();\n  }\n}", "class_name": "OIfExecutionPlan", "return_type": "OResult", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OSelfSignedCertificate {\n\n  public static final String DEFAULT_CERTIFICATE_ALGORITHM = \"RSA\";\n  public static final int DEFAULT_CERTIFICATE_KEY_SIZE = 2048;\n  public static final int DEFAULT_CERTIFICATE_VALIDITY = 365;\n\n  public static final String DEFAULT_CERTIFICATE_OWNER =\n      \"CN=SelfSigenedOrientDBtestOnly, OU=SAP HANA Core, O=SAP SE, L=Walldorf, C=DE\";\n  public static final String DEFAULT_CERTIFICATE_NAME = \"ssl\";\n\n  private String algorithm;\n  private int key_size;\n  private int validity;\n  private KeyPair keyPair = null;\n  private X509Certificate certificate = null;\n\n  private String certificateName;\n  private BigInteger certificateSN;\n  private String ownerFDN;\n\n  public OSelfSignedCertificate() {\n\n    this.certificateSN = computeRandomSerialNumber();\n  }\n\n  public String getAlgorithm() {\n    return algorithm;\n  }\n\n  public void setAlgorithm(String algorithm) {\n    if ((algorithm == null) || (algorithm.isEmpty())) {\n      this.algorithm = DEFAULT_CERTIFICATE_ALGORITHM;\n    } else {\n      this.algorithm = algorithm;\n    }\n  }\n\n  public int getKey_size() {\n    return key_size;\n  }\n\n  public void setKey_size(int key_size) {\n    if (key_size >= 128) {\n      this.key_size = key_size;\n    } else {\n      this.key_size = DEFAULT_CERTIFICATE_KEY_SIZE;\n    }\n  }\n\n  public void setValidity(int validity) {\n    this.validity = validity;\n  }\n\n  public String getCertificateName() {\n    return certificateName;\n  }\n\n  public void setCertificateName(String certificateName) {\n    this.certificateName = certificateName;\n  }\n\n  public void setCertificateSN(long certificateSN) throws SwitchToDefaultParamsException {\n    if (certificateSN <= 11) {\n      BigInteger sn = computeRandomSerialNumber();\n      this.certificateSN = sn;\n      throw new SwitchToDefaultParamsException(\n          \"the value \"\n              + certificateSN\n              + \" culd not be used as a Certificate Serial Nuber, the value will be set to:\"\n              + sn);\n    } else {\n      this.certificateSN = BigInteger.valueOf(certificateSN);\n    }\n  }\n\n  public static BigInteger computeRandomSerialNumber() {\n    SecureRandom sr = new SecureRandom();\n    return BigInteger.valueOf(sr.nextLong());\n  }\n\n  public void setOwnerFDN(String ownerFDN) {\n    this.ownerFDN = ownerFDN;\n  }\n\n  /**\n   * Generate and Return a key pair.\n   *\n   * <p>If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults\n   * will be used for the size and other (algorithm-specific) values of the generated keys.Our\n   * People\n   *\n   * <p>This method will computes and returns a new key pair every time it is called.\n   *\n   * @return a new key pair\n   * @throws NoSuchAlgorithmException if the algorithm String not match with the supported key\n   *     generation schemes.\n   */\n  public static KeyPair computeKeyPair(String algorithm, int keySize)\n      throws NoSuchAlgorithmException {\n\n    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);\n    keyPairGenerator.initialize(keySize, new SecureRandom());\n\n    return keyPairGenerator.generateKeyPair();\n  }\n\n  /**\n   * recompute a new key pair FOR INTERNAL OSelfSignedCertificate class USE.\n   *\n   * <p>This method is functionally equivalent to {@link #computeKeyPair\n   * computeKeyPair(this.algorithm,this.key_size)}. It uses the value pair\n   * (DEFAULT_CERTIFICATE_ALGORITHM,DEFAULT_CERTIFICATE_KEY_SIZE) if the setted fields are not\n   * valid.\n   *\n   * @throws NoSuchAlgorithmException if the algorithm String not match with the supported key\n   *     generation schemes.\n   */\n  public void generateCertificateKeyPair()\n      throws NoSuchAlgorithmException, SwitchToDefaultParamsException {\n    try {\n      this.keyPair = computeKeyPair(this.algorithm, this.key_size);\n    } catch (NoSuchAlgorithmException e) {\n      this.keyPair = computeKeyPair(DEFAULT_CERTIFICATE_ALGORITHM, DEFAULT_CERTIFICATE_KEY_SIZE);\n      SwitchToDefaultParamsException tmpe = new SwitchToDefaultParamsException();\n      tmpe.addSuppressed(e);\n      throw tmpe;\n    }\n  }\n\n  public PublicKey getPublicKey() {\n    if (keyPair == null) {\n      throw new NullPointerException(\"generate the Key Pair\");\n    }\n    return keyPair.getPublic();\n  }\n\n  public void composeSelfSignedCertificate() {<FILL_FUNCTION_BODY>}\n\n  public static X509Certificate generateSelfSignedCertificate(\n      KeyPair keypair, int validity, String ownerFDN, BigInteger certSN)\n      throws CertificateException, IOException, NoSuchAlgorithmException {\n\n    X500Name owner;\n    owner = new X500Name(ownerFDN);\n\n    Date from, to;\n    Calendar c = Calendar.getInstance();\n    c.add(Calendar.DAY_OF_YEAR, 0);\n    from = c.getTime();\n    c.add(Calendar.DAY_OF_YEAR, validity);\n    to = c.getTime();\n\n    var certBuilder =\n        new X509v3CertificateBuilder(\n            owner,\n            certSN,\n            from,\n            to,\n            owner,\n            SubjectPublicKeyInfo.getInstance(keypair.getPublic().getEncoded()));\n\n    try {\n      var certHolder =\n          certBuilder.build(\n              new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keypair.getPrivate()));\n      return new JcaX509CertificateConverter().getCertificate(certHolder);\n    } catch (OperatorCreationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public X509Certificate getCertificate() throws CertificateException {\n\n    if (this.certificate == null) {\n      throw new CertificateException(\n          \"The Self-Signed Certificate han not been genetated! \"\n              + \"You have to invoke the composeSelfSignedCertificate() before get it.\");\n    }\n    return this.certificate;\n  }\n\n  public static void checkCertificate(X509Certificate cert, PublicKey publicKey, Date date)\n      throws NoSuchProviderException,\n          CertificateException,\n          NoSuchAlgorithmException,\n          InvalidKeyException,\n          SignatureException {\n    cert.checkValidity(date);\n    cert.verify(publicKey);\n  }\n\n  public void checkThisCertificate()\n      throws NoSuchAlgorithmException,\n          CertificateException,\n          NoSuchProviderException,\n          InvalidKeyException,\n          SignatureException {\n    checkCertificate(\n        this.certificate, this.keyPair.getPublic(), new Date(System.currentTimeMillis()));\n  }\n\n  public PrivateKey getPrivateKey() {\n    return this.keyPair.getPrivate();\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/470", "ground_truth": "\n    try {\n      this.certificate =\n          generateSelfSignedCertificate(\n              this.keyPair, this.validity, this.ownerFDN, this.certificateSN);\n    } catch (CertificateException | IOException | NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "server", "src", "main", "java", "com", "orientechnologies", "orient", "server", "security", "OSelfSignedCertificate.java"], "context_start_lineno": 0, "function_name": "composeSelfSignedCertificate", "left_context": "class OSelfSignedCertificate {\n\n  public static final String DEFAULT_CERTIFICATE_ALGORITHM = \"RSA\";\n  public static final int DEFAULT_CERTIFICATE_KEY_SIZE = 2048;\n  public static final int DEFAULT_CERTIFICATE_VALIDITY = 365;\n\n  public static final String DEFAULT_CERTIFICATE_OWNER =\n      \"CN=SelfSigenedOrientDBtestOnly, OU=SAP HANA Core, O=SAP SE, L=Walldorf, C=DE\";\n  public static final String DEFAULT_CERTIFICATE_NAME = \"ssl\";\n\n  private String algorithm;\n  private int key_size;\n  private int validity;\n  private KeyPair keyPair = null;\n  private X509Certificate certificate = null;\n\n  private String certificateName;\n  private BigInteger certificateSN;\n  private String ownerFDN;\n\n  public OSelfSignedCertificate() {\n\n    this.certificateSN = computeRandomSerialNumber();\n  }\n\n  public String getAlgorithm() {\n    return algorithm;\n  }\n\n  public void setAlgorithm(String algorithm) {\n    if ((algorithm == null) || (algorithm.isEmpty())) {\n      this.algorithm = DEFAULT_CERTIFICATE_ALGORITHM;\n    } else {\n      this.algorithm = algorithm;\n    }\n  }\n\n  public int getKey_size() {\n    return key_size;\n  }\n\n  public void setKey_size(int key_size) {\n    if (key_size >= 128) {\n      this.key_size = key_size;\n    } else {\n      this.key_size = DEFAULT_CERTIFICATE_KEY_SIZE;\n    }\n  }\n\n  public void setValidity(int validity) {\n    this.validity = validity;\n  }\n\n  public String getCertificateName() {\n    return certificateName;\n  }\n\n  public void setCertificateName(String certificateName) {\n    this.certificateName = certificateName;\n  }\n\n  public void setCertificateSN(long certificateSN) throws SwitchToDefaultParamsException {\n    if (certificateSN <= 11) {\n      BigInteger sn = computeRandomSerialNumber();\n      this.certificateSN = sn;\n      throw new SwitchToDefaultParamsException(\n          \"the value \"\n              + certificateSN\n              + \" culd not be used as a Certificate Serial Nuber, the value will be set to:\"\n              + sn);\n    } else {\n      this.certificateSN = BigInteger.valueOf(certificateSN);\n    }\n  }\n\n  public static BigInteger computeRandomSerialNumber() {\n    SecureRandom sr = new SecureRandom();\n    return BigInteger.valueOf(sr.nextLong());\n  }\n\n  public void setOwnerFDN(String ownerFDN) {\n    this.ownerFDN = ownerFDN;\n  }\n\n  /**\n   * Generate and Return a key pair.\n   *\n   * <p>If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults\n   * will be used for the size and other (algorithm-specific) values of the generated keys.Our\n   * People\n   *\n   * <p>This method will computes and returns a new key pair every time it is called.\n   *\n   * @return a new key pair\n   * @throws NoSuchAlgorithmException if the algorithm String not match with the supported key\n   *     generation schemes.\n   */\n  public static KeyPair computeKeyPair(String algorithm, int keySize)\n      throws NoSuchAlgorithmException {\n\n    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);\n    keyPairGenerator.initialize(keySize, new SecureRandom());\n\n    return keyPairGenerator.generateKeyPair();\n  }\n\n  /**\n   * recompute a new key pair FOR INTERNAL OSelfSignedCertificate class USE.\n   *\n   * <p>This method is functionally equivalent to {@link #computeKeyPair\n   * computeKeyPair(this.algorithm,this.key_size)}. It uses the value pair\n   * (DEFAULT_CERTIFICATE_ALGORITHM,DEFAULT_CERTIFICATE_KEY_SIZE) if the setted fields are not\n   * valid.\n   *\n   * @throws NoSuchAlgorithmException if the algorithm String not match with the supported key\n   *     generation schemes.\n   */\n  public void generateCertificateKeyPair()\n      throws NoSuchAlgorithmException, SwitchToDefaultParamsException {\n    try {\n      this.keyPair = computeKeyPair(this.algorithm, this.key_size);\n    } catch (NoSuchAlgorithmException e) {\n      this.keyPair = computeKeyPair(DEFAULT_CERTIFICATE_ALGORITHM, DEFAULT_CERTIFICATE_KEY_SIZE);\n      SwitchToDefaultParamsException tmpe = new SwitchToDefaultParamsException();\n      tmpe.addSuppressed(e);\n      throw tmpe;\n    }\n  }\n\n  public PublicKey getPublicKey() {\n    if (keyPair == null) {\n      throw new NullPointerException(\"generate the Key Pair\");\n    }\n    return keyPair.getPublic();\n  }\n\n  public void composeSelfSignedCertificate() {", "right_context": "}\n\n  public static X509Certificate generateSelfSignedCertificate(\n      KeyPair keypair, int validity, String ownerFDN, BigInteger certSN)\n      throws CertificateException, IOException, NoSuchAlgorithmException {\n\n    X500Name owner;\n    owner = new X500Name(ownerFDN);\n\n    Date from, to;\n    Calendar c = Calendar.getInstance();\n    c.add(Calendar.DAY_OF_YEAR, 0);\n    from = c.getTime();\n    c.add(Calendar.DAY_OF_YEAR, validity);\n    to = c.getTime();\n\n    var certBuilder =\n        new X509v3CertificateBuilder(\n            owner,\n            certSN,\n            from,\n            to,\n            owner,\n            SubjectPublicKeyInfo.getInstance(keypair.getPublic().getEncoded()));\n\n    try {\n      var certHolder =\n          certBuilder.build(\n              new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keypair.getPrivate()));\n      return new JcaX509CertificateConverter().getCertificate(certHolder);\n    } catch (OperatorCreationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public X509Certificate getCertificate() throws CertificateException {\n\n    if (this.certificate == null) {\n      throw new CertificateException(\n          \"The Self-Signed Certificate han not been genetated! \"\n              + \"You have to invoke the composeSelfSignedCertificate() before get it.\");\n    }\n    return this.certificate;\n  }\n\n  public static void checkCertificate(X509Certificate cert, PublicKey publicKey, Date date)\n      throws NoSuchProviderException,\n          CertificateException,\n          NoSuchAlgorithmException,\n          InvalidKeyException,\n          SignatureException {\n    cert.checkValidity(date);\n    cert.verify(publicKey);\n  }\n\n  public void checkThisCertificate()\n      throws NoSuchAlgorithmException,\n          CertificateException,\n          NoSuchProviderException,\n          InvalidKeyException,\n          SignatureException {\n    checkCertificate(\n        this.certificate, this.keyPair.getPublic(), new Date(System.currentTimeMillis()));\n  }\n\n  public PrivateKey getPrivateKey() {\n    return this.keyPair.getPrivate();\n  }\n}", "class_name": "OSelfSignedCertificate", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NodeOperationFactory {\n\n    private Callable<NodeOperation> request;\n    private Callable<NodeOperationResponse> response;\n\n    public NodeOperationFactory(\n        Callable<NodeOperation> request, Callable<NodeOperationResponse> response) {\n      this.request = request;\n      this.response = response;\n    }\n  }\n\n  public static void register(\n      int messageId,\n      Callable<NodeOperation> requestFactory,\n      Callable<NodeOperationResponse> responseFactory) {\n    MESSAGES.put(messageId, new NodeOperationFactory(requestFactory, responseFactory));\n  }\n\n  public static NodeOperationResponse createOperationResponse(int messageId) {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "orientechnologies_orientdb/471", "ground_truth": "\n    NodeOperationFactory factory = MESSAGES.get(messageId);\n    if (factory != null) {\n      try {\n        return factory.response.call();\n      } catch (Exception e) {\n        OLogManager.instance()\n            .warn(null, \"Cannot create node operation response from id %d\", messageId);\n        return null;\n      }\n    } else {\n      return null;\n    }\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "server", "src", "main", "java", "com", "orientechnologies", "orient", "server", "distributed", "operation", "NodeOperationTask.java"], "context_start_lineno": 0, "function_name": "createOperationResponse", "left_context": "class NodeOperationFactory {\n\n    private Callable<NodeOperation> request;\n    private Callable<NodeOperationResponse> response;\n\n    public NodeOperationFactory(\n        Callable<NodeOperation> request, Callable<NodeOperationResponse> response) {\n      this.request = request;\n      this.response = response;\n    }\n  }\n\n  public static void register(\n      int messageId,\n      Callable<NodeOperation> requestFactory,\n      Callable<NodeOperationResponse> responseFactory) {\n    MESSAGES.put(messageId, new NodeOperationFactory(requestFactory, responseFactory));\n  }\n\n  public static NodeOperationResponse createOperationResponse(int messageId) {", "right_context": "", "class_name": "NodeOperationFactory", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OClosableLRUList<K, V extends OClosableItem> implements Iterable<OClosableEntry<K, V>> {\n  private int size;\n\n  private OClosableEntry<K, V> head;\n  private OClosableEntry<K, V> tail;\n\n  void remove(OClosableEntry<K, V> entry) {<FILL_FUNCTION_BODY>}\n\n  boolean contains(OClosableEntry<K, V> entry) {\n    return entry.getNext() != null || entry.getPrev() != null || entry == head;\n  }\n\n  void moveToTheTail(OClosableEntry<K, V> entry) {\n    if (tail == entry) {\n      assert entry.getNext() == null;\n      return;\n    }\n\n    final OClosableEntry<K, V> next = entry.getNext();\n    final OClosableEntry<K, V> prev = entry.getPrev();\n\n    boolean newEntry = !(next != null || prev != null || entry == head);\n\n    if (prev != null) {\n      assert prev.getNext() == entry;\n    }\n\n    if (next != null) {\n      assert next.getPrev() == entry;\n    }\n\n    if (prev != null) {\n      prev.setNext(next);\n    }\n\n    if (next != null) {\n      next.setPrev(prev);\n    }\n\n    if (head == entry) {\n      assert entry.getPrev() == null;\n      head = next;\n    }\n\n    entry.setPrev(tail);\n    entry.setNext(null);\n    if (tail != null) {\n      assert tail.getNext() == null;\n      tail.setNext(entry);\n      tail = entry;\n    } else {\n      tail = head = entry;\n    }\n\n    if (newEntry) size++;\n  }\n\n  int size() {\n    return size;\n  }\n\n  OClosableEntry<K, V> poll() {\n    if (head == null) return null;\n\n    final OClosableEntry<K, V> entry = head;\n\n    OClosableEntry<K, V> next = head.getNext();\n    assert next == null || next.getPrev() == head;\n\n    head = next;\n    if (next != null) {\n      next.setPrev(null);\n    }\n\n    assert head == null || head.getPrev() == null;\n\n    if (head == null) tail = null;\n\n    entry.setNext(null);\n    assert entry.getPrev() == null;\n\n    size--;\n\n    return entry;\n  }\n\n  /** @return Iterator to iterate from head to the tail. */\n  public Iterator<OClosableEntry<K, V>> iterator() {\n    return new Iterator<OClosableEntry<K, V>>() {\n      private OClosableEntry<K, V> next = head;\n      private OClosableEntry<K, V> current = null;\n\n      @Override\n      public boolean hasNext() {\n        return next != null;\n      }\n\n      @Override\n      public OClosableEntry<K, V> next() {\n        if (next == null) {\n          throw new NoSuchElementException();\n        }\n\n        current = next;\n        next = next.getNext();\n        return current;\n      }\n\n      @Override\n      public void remove() {\n        if (current == null) {\n          throw new IllegalStateException(\"Method next was not called\");\n        }\n\n        OClosableLRUList.this.remove(current);\n        current = null;\n      }\n    };\n  }\n\n  boolean assertForwardStructure() {\n    if (head == null) return tail == null;\n\n    OClosableEntry<K, V> current = head;\n\n    while (current.getNext() != null) {\n      OClosableEntry<K, V> prev = current.getPrev();\n      OClosableEntry<K, V> next = current.getNext();\n\n      if (prev != null) {\n        assert prev.getNext() == current;\n      }\n\n      if (next != null) {\n        assert next.getPrev() == current;\n      }\n\n      current = current.getNext();\n    }\n\n    return current == tail;\n  }\n\n  boolean assertBackwardStructure() {\n    if (tail == null) return head == null;\n\n    OClosableEntry<K, V> current = tail;\n\n    while (current.getPrev() != null) {\n      OClosableEntry<K, V> prev = current.getPrev();\n      OClosableEntry<K, V> next = current.getNext();\n\n      if (prev != null) {\n        assert prev.getNext() == current;\n      }\n\n      if (next != null) {\n        assert next.getPrev() == current;\n      }\n\n      current = current.getPrev();\n    }\n\n    return current == head;\n  }\n}", "metadata": {"task_id": "orientechnologies_orientdb/479", "ground_truth": "\n    final OClosableEntry<K, V> next = entry.getNext();\n    final OClosableEntry<K, V> prev = entry.getPrev();\n\n    if (!(next != null || prev != null || entry == head)) return;\n\n    if (prev != null) {\n      assert prev.getNext() == entry;\n    }\n\n    if (next != null) {\n      assert next.getPrev() == entry;\n    }\n\n    if (next != null) {\n      next.setPrev(prev);\n    }\n\n    if (prev != null) {\n      prev.setNext(next);\n    }\n\n    if (head == entry) {\n      assert entry.getPrev() == null;\n      head = next;\n    }\n\n    if (tail == entry) {\n      assert entry.getNext() == null;\n      tail = prev;\n    }\n\n    entry.setNext(null);\n    entry.setPrev(null);\n\n    size--;\n  ", "fpath_tuple": ["orientechnologies_orientdb", "orientdb", "core", "src", "main", "java", "com", "orientechnologies", "common", "collection", "closabledictionary", "OClosableLRUList.java"], "context_start_lineno": 0, "function_name": "remove", "left_context": "class OClosableLRUList<K, V extends OClosableItem> implements Iterable<OClosableEntry<K, V>> {\n  private int size;\n\n  private OClosableEntry<K, V> head;\n  private OClosableEntry<K, V> tail;\n\n  void remove(OClosableEntry<K, V> entry) {", "right_context": "}\n\n  boolean contains(OClosableEntry<K, V> entry) {\n    return entry.getNext() != null || entry.getPrev() != null || entry == head;\n  }\n\n  void moveToTheTail(OClosableEntry<K, V> entry) {\n    if (tail == entry) {\n      assert entry.getNext() == null;\n      return;\n    }\n\n    final OClosableEntry<K, V> next = entry.getNext();\n    final OClosableEntry<K, V> prev = entry.getPrev();\n\n    boolean newEntry = !(next != null || prev != null || entry == head);\n\n    if (prev != null) {\n      assert prev.getNext() == entry;\n    }\n\n    if (next != null) {\n      assert next.getPrev() == entry;\n    }\n\n    if (prev != null) {\n      prev.setNext(next);\n    }\n\n    if (next != null) {\n      next.setPrev(prev);\n    }\n\n    if (head == entry) {\n      assert entry.getPrev() == null;\n      head = next;\n    }\n\n    entry.setPrev(tail);\n    entry.setNext(null);\n    if (tail != null) {\n      assert tail.getNext() == null;\n      tail.setNext(entry);\n      tail = entry;\n    } else {\n      tail = head = entry;\n    }\n\n    if (newEntry) size++;\n  }\n\n  int size() {\n    return size;\n  }\n\n  OClosableEntry<K, V> poll() {\n    if (head == null) return null;\n\n    final OClosableEntry<K, V> entry = head;\n\n    OClosableEntry<K, V> next = head.getNext();\n    assert next == null || next.getPrev() == head;\n\n    head = next;\n    if (next != null) {\n      next.setPrev(null);\n    }\n\n    assert head == null || head.getPrev() == null;\n\n    if (head == null) tail = null;\n\n    entry.setNext(null);\n    assert entry.getPrev() == null;\n\n    size--;\n\n    return entry;\n  }\n\n  /** @return Iterator to iterate from head to the tail. */\n  public Iterator<OClosableEntry<K, V>> iterator() {\n    return new Iterator<OClosableEntry<K, V>>() {\n      private OClosableEntry<K, V> next = head;\n      private OClosableEntry<K, V> current = null;\n\n      @Override\n      public boolean hasNext() {\n        return next != null;\n      }\n\n      @Override\n      public OClosableEntry<K, V> next() {\n        if (next == null) {\n          throw new NoSuchElementException();\n        }\n\n        current = next;\n        next = next.getNext();\n        return current;\n      }\n\n      @Override\n      public void remove() {\n        if (current == null) {\n          throw new IllegalStateException(\"Method next was not called\");\n        }\n\n        OClosableLRUList.this.remove(current);\n        current = null;\n      }\n    };\n  }\n\n  boolean assertForwardStructure() {\n    if (head == null) return tail == null;\n\n    OClosableEntry<K, V> current = head;\n\n    while (current.getNext() != null) {\n      OClosableEntry<K, V> prev = current.getPrev();\n      OClosableEntry<K, V> next = current.getNext();\n\n      if (prev != null) {\n        assert prev.getNext() == current;\n      }\n\n      if (next != null) {\n        assert next.getPrev() == current;\n      }\n\n      current = current.getNext();\n    }\n\n    return current == tail;\n  }\n\n  boolean assertBackwardStructure() {\n    if (tail == null) return head == null;\n\n    OClosableEntry<K, V> current = tail;\n\n    while (current.getPrev() != null) {\n      OClosableEntry<K, V> prev = current.getPrev();\n      OClosableEntry<K, V> next = current.getNext();\n\n      if (prev != null) {\n        assert prev.getNext() == current;\n      }\n\n      if (next != null) {\n        assert next.getPrev() == current;\n      }\n\n      current = current.getPrev();\n    }\n\n    return current == head;\n  }\n}", "class_name": "OClosableLRUList", "return_type": "void", "parameters": [{"type": "OClosableEntry<K,V>", "name": "entry"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OtrMetaContactMenu\n    extends AbstractPluginComponent\n    implements ActionListener,\n               PopupMenuListener\n{\n\n    /**\n     * The last known <tt>MetaContact</tt> to be currently selected and to be\n     * depicted by this instance and the <tt>OtrContactMenu</tt>s it contains.\n     */\n    private MetaContact currentContact;\n\n    /**\n     * The indicator which determines whether the <tt>JMenu</tt> of this\n     * <tt>OtrMetaContactMenu</tt> is displayed in the Mac OS X screen menu bar\n     * and thus should work around the known problem of PopupMenuListener not\n     * being invoked.\n     */\n    private final boolean inMacOSXScreenMenuBar;\n\n    /**\n     * The <tt>JMenu</tt> which is the component of this plug-in.\n     */\n    private JMenu menu;\n\n    /**\n     * The \"What's this?\" <tt>JMenuItem</tt> which launches help on the subject\n     * of off-the-record messaging.\n     */\n    private JMenuItem whatsThis;\n\n    public OtrMetaContactMenu(Container container,\n                              PluginComponentFactory parentFactory)\n    {\n        super(container, parentFactory);\n\n        inMacOSXScreenMenuBar =\n            Container.CONTAINER_CHAT_MENU_BAR.equals(container)\n                && OSUtils.IS_MAC;\n    }\n\n    /*\n     * Implements ActionListener#actionPerformed(ActionEvent). Handles the\n     * invocation of the whatsThis menu item i.e. launches help on the subject\n     * of off-the-record messaging.\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n        OtrActivator.scOtrEngine.launchHelp();\n    }\n\n    /**\n     * Creates an {@link OtrContactMenu} for each {@link Contact} contained in\n     * the <tt>metaContact</tt>.\n     *\n     * @param metaContact The {@link MetaContact} this\n     *            {@link OtrMetaContactMenu} refers to.\n     */\n    private void createOtrContactMenus(MetaContact metaContact)\n    {<FILL_FUNCTION_BODY>}\n\n    /*\n     * Implements PluginComponent#getComponent(). Returns the JMenu which is the\n     * component of this plug-in creating it first if it doesn't exist.\n     */\n    public Component getComponent()\n    {\n        return getMenu();\n    }\n\n    /**\n     * Gets the <tt>JMenu</tt> which is the component of this plug-in. If it\n     * still doesn't exist, it's created.\n     *\n     * @return the <tt>JMenu</tt> which is the component of this plug-in\n     */\n    private JMenu getMenu()\n    {\n        if (menu == null)\n        {\n            menu = new SIPCommMenu();\n            menu.setText(getName());\n\n            if (Container.CONTAINER_CONTACT_RIGHT_BUTTON_MENU\n                .equals(getContainer()))\n            {\n                Icon icon =\n                    OtrActivator.resourceService\n                        .getImage(\"plugin.otr.MENU_ITEM_ICON_16x16\");\n\n                if (icon != null)\n                    menu.setIcon(icon);\n            }\n\n            if (!inMacOSXScreenMenuBar)\n                menu.getPopupMenu().addPopupMenuListener(this);\n        }\n        return menu;\n    }\n\n    /*\n     * Implements PluginComponent#getName().\n     */\n    public String getName()\n    {\n        return OtrActivator.resourceService\n            .getI18NString(\"plugin.otr.menu.TITLE\");\n    }\n\n    /*\n     * Implements PopupMenuListener#popupMenuCanceled(PopupMenuEvent).\n     */\n    public void popupMenuCanceled(PopupMenuEvent e)\n    {\n        createOtrContactMenus(null);\n    }\n\n    /*\n     * Implements PopupMenuListener#popupMenuWillBecomeInvisible(\n     * PopupMenuEvent).\n     */\n    public void popupMenuWillBecomeInvisible(PopupMenuEvent e)\n    {\n        popupMenuCanceled(e);\n    }\n\n    /*\n     * Implements PopupMenuListener#popupMenuWillBecomeVisible(PopupMenuEvent).\n     */\n    public void popupMenuWillBecomeVisible(PopupMenuEvent e)\n    {\n        createOtrContactMenus(currentContact);\n\n        JMenu menu = getMenu();\n\n        menu.addSeparator();\n\n        whatsThis = new JMenuItem();\n        whatsThis.setIcon(\n                OtrActivator.resourceService.getImage(\n                        \"plugin.otr.HELP_ICON_15x15\"));\n        whatsThis.setText(\n                OtrActivator.resourceService.getI18NString(\n                        \"plugin.otr.menu.WHATS_THIS\"));\n        whatsThis.addActionListener(this);\n        menu.add(whatsThis);\n    }\n\n    /*\n     * Implements PluginComponent#setCurrentContact(MetaContact).\n     */\n    @Override\n    public void setCurrentContact(MetaContact metaContact)\n    {\n        if (this.currentContact != metaContact)\n        {\n            this.currentContact = metaContact;\n\n            if (inMacOSXScreenMenuBar)\n                popupMenuWillBecomeVisible(null);\n            else if ((menu != null) && menu.isPopupMenuVisible())\n                createOtrContactMenus(currentContact);\n        }\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/1", "ground_truth": "\n        JMenu menu = getMenu();\n\n        // Remove any existing OtrContactMenu items.\n        menu.removeAll();\n\n        // Create the new OtrContactMenu items.\n        if (metaContact != null)\n        {\n            Iterator<Contact> contacts = metaContact.getContacts();\n\n            if (metaContact.getContactCount() == 1)\n            {\n                Contact contact = contacts.next();\n                Collection<ContactResource> resources = contact.getResources();\n                if (contact.supportResources() &&\n                    resources != null &&\n                    resources.size() > 0)\n                {\n                    for (ContactResource resource : resources)\n                    {\n                        new OtrContactMenu(\n                            OtrContactManager.getOtrContact(contact, resource),\n                            inMacOSXScreenMenuBar,\n                            menu,\n                            true);\n                    }\n                }\n                else\n                    new OtrContactMenu(\n                        OtrContactManager.getOtrContact(contact, null),\n                        inMacOSXScreenMenuBar,\n                        menu,\n                        false);\n            }\n            else\n                while (contacts.hasNext())\n                {\n                    Contact contact = contacts.next();\n                    Collection<ContactResource> resources =\n                        contact.getResources();\n                    if (contact.supportResources() &&\n                        resources != null &&\n                        resources.size() > 0)\n                    {\n                        for (ContactResource resource : resources)\n                        {\n                            new OtrContactMenu(\n                                OtrContactManager.getOtrContact(\n                                    contact, resource),\n                                inMacOSXScreenMenuBar,\n                                menu,\n                                true);\n                        }\n                    }\n                    else\n                        new OtrContactMenu(\n                            OtrContactManager.getOtrContact(contact, null),\n                            inMacOSXScreenMenuBar,\n                            menu,\n                            true);\n                }\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "otr", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "otr", "OtrMetaContactMenu.java"], "context_start_lineno": 0, "function_name": "createOtrContactMenus", "left_context": "class OtrMetaContactMenu\n    extends AbstractPluginComponent\n    implements ActionListener,\n               PopupMenuListener\n{\n\n    /**\n     * The last known <tt>MetaContact</tt> to be currently selected and to be\n     * depicted by this instance and the <tt>OtrContactMenu</tt>s it contains.\n     */\n    private MetaContact currentContact;\n\n    /**\n     * The indicator which determines whether the <tt>JMenu</tt> of this\n     * <tt>OtrMetaContactMenu</tt> is displayed in the Mac OS X screen menu bar\n     * and thus should work around the known problem of PopupMenuListener not\n     * being invoked.\n     */\n    private final boolean inMacOSXScreenMenuBar;\n\n    /**\n     * The <tt>JMenu</tt> which is the component of this plug-in.\n     */\n    private JMenu menu;\n\n    /**\n     * The \"What's this?\" <tt>JMenuItem</tt> which launches help on the subject\n     * of off-the-record messaging.\n     */\n    private JMenuItem whatsThis;\n\n    public OtrMetaContactMenu(Container container,\n                              PluginComponentFactory parentFactory)\n    {\n        super(container, parentFactory);\n\n        inMacOSXScreenMenuBar =\n            Container.CONTAINER_CHAT_MENU_BAR.equals(container)\n                && OSUtils.IS_MAC;\n    }\n\n    /*\n     * Implements ActionListener#actionPerformed(ActionEvent). Handles the\n     * invocation of the whatsThis menu item i.e. launches help on the subject\n     * of off-the-record messaging.\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n        OtrActivator.scOtrEngine.launchHelp();\n    }\n\n    /**\n     * Creates an {@link OtrContactMenu} for each {@link Contact} contained in\n     * the <tt>metaContact</tt>.\n     *\n     * @param metaContact The {@link MetaContact} this\n     *            {@link OtrMetaContactMenu} refers to.\n     */\n    private void createOtrContactMenus(MetaContact metaContact)\n    {", "right_context": "}\n\n    /*\n     * Implements PluginComponent#getComponent(). Returns the JMenu which is the\n     * component of this plug-in creating it first if it doesn't exist.\n     */\n    public Component getComponent()\n    {\n        return getMenu();\n    }\n\n    /**\n     * Gets the <tt>JMenu</tt> which is the component of this plug-in. If it\n     * still doesn't exist, it's created.\n     *\n     * @return the <tt>JMenu</tt> which is the component of this plug-in\n     */\n    private JMenu getMenu()\n    {\n        if (menu == null)\n        {\n            menu = new SIPCommMenu();\n            menu.setText(getName());\n\n            if (Container.CONTAINER_CONTACT_RIGHT_BUTTON_MENU\n                .equals(getContainer()))\n            {\n                Icon icon =\n                    OtrActivator.resourceService\n                        .getImage(\"plugin.otr.MENU_ITEM_ICON_16x16\");\n\n                if (icon != null)\n                    menu.setIcon(icon);\n            }\n\n            if (!inMacOSXScreenMenuBar)\n                menu.getPopupMenu().addPopupMenuListener(this);\n        }\n        return menu;\n    }\n\n    /*\n     * Implements PluginComponent#getName().\n     */\n    public String getName()\n    {\n        return OtrActivator.resourceService\n            .getI18NString(\"plugin.otr.menu.TITLE\");\n    }\n\n    /*\n     * Implements PopupMenuListener#popupMenuCanceled(PopupMenuEvent).\n     */\n    public void popupMenuCanceled(PopupMenuEvent e)\n    {\n        createOtrContactMenus(null);\n    }\n\n    /*\n     * Implements PopupMenuListener#popupMenuWillBecomeInvisible(\n     * PopupMenuEvent).\n     */\n    public void popupMenuWillBecomeInvisible(PopupMenuEvent e)\n    {\n        popupMenuCanceled(e);\n    }\n\n    /*\n     * Implements PopupMenuListener#popupMenuWillBecomeVisible(PopupMenuEvent).\n     */\n    public void popupMenuWillBecomeVisible(PopupMenuEvent e)\n    {\n        createOtrContactMenus(currentContact);\n\n        JMenu menu = getMenu();\n\n        menu.addSeparator();\n\n        whatsThis = new JMenuItem();\n        whatsThis.setIcon(\n                OtrActivator.resourceService.getImage(\n                        \"plugin.otr.HELP_ICON_15x15\"));\n        whatsThis.setText(\n                OtrActivator.resourceService.getI18NString(\n                        \"plugin.otr.menu.WHATS_THIS\"));\n        whatsThis.addActionListener(this);\n        menu.add(whatsThis);\n    }\n\n    /*\n     * Implements PluginComponent#setCurrentContact(MetaContact).\n     */\n    @Override\n    public void setCurrentContact(MetaContact metaContact)\n    {\n        if (this.currentContact != metaContact)\n        {\n            this.currentContact = metaContact;\n\n            if (inMacOSXScreenMenuBar)\n                popupMenuWillBecomeVisible(null);\n            else if ((menu != null) && menu.isPopupMenuVisible())\n                createOtrContactMenus(currentContact);\n        }\n    }\n}", "class_name": "OtrMetaContactMenu", "return_type": "void", "parameters": [{"type": "MetaContact", "name": "metaContact"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/event/AccountManagerEvent.java\n// --------------------------------------------------\n// /** \n//  * Gets the <code>ProtocolProviderFactory</code> being worked on at the time this event has been fired.\n//  * @return the <code>ProtocolProviderFactory</code> being worked on at thetime this event has been fired\n//  */\n// public ProtocolProviderFactory getFactory(){\n//   return factory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/gibberishaccregwizz/src/main/java/net/java/sip/communicator/plugin/gibberishaccregwizz/GibberishAccRegWizzActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ProtocolProviderFactory</tt> for the Gibberish protocol.\n//  * @return the <tt>ProtocolProviderFactory</tt> for the Gibberish protocol\n//  */\n// public static ProtocolProviderFactory getGibberishProtocolProviderFactory(){\n//   ServiceReference[] serRefs=null;\n//   String osgiFilter=\"(\" + ProtocolProviderFactory.PROTOCOL + \"=\"+ \"Gibberish\"+ \")\";\n//   try {\n//     serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class.getName(),osgiFilter);\n//   }\n//  catch (  InvalidSyntaxException ex) {\n//     logger.error(\"Invalid OSGi filter\",ex);\n//   }\n//   return (ProtocolProviderFactory)bundleContext.getService(serRefs[0]);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/jabberaccregwizz/src/main/java/net/java/sip/communicator/plugin/jabberaccregwizz/JabberAccRegWizzActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ProtocolProviderFactory</tt> for the Jabber protocol.\n//  * @return the <tt>ProtocolProviderFactory</tt> for the Jabber protocol\n//  */\n// public static ProtocolProviderFactory getJabberProtocolProviderFactory(){\n//   ServiceReference[] serRefs=null;\n//   String osgiFilter=\"(\" + ProtocolProviderFactory.PROTOCOL + \"=\"+ ProtocolNames.JABBER+ \")\";\n//   try {\n//     serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class.getName(),osgiFilter);\n//   }\n//  catch (  InvalidSyntaxException ex) {\n//     logger.error(\"JabberAccRegWizzActivator : \" + ex);\n//   }\n//   return (ProtocolProviderFactory)bundleContext.getService(serRefs[0]);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/sipaccregwizz/src/main/java/net/java/sip/communicator/plugin/sipaccregwizz/SIPAccRegWizzActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ProtocolProviderFactory</tt> for the SIP protocol.\n//  * @return the <tt>ProtocolProviderFactory</tt> for the SIP protocol\n//  */\n// public static ProtocolProviderFactory getSIPProtocolProviderFactory(){\n//   ServiceReference[] serRefs=null;\n//   String osgiFilter=\"(\" + ProtocolProviderFactory.PROTOCOL + \"=\"+ ProtocolNames.SIP+ \")\";\n//   try {\n//     serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class.getName(),osgiFilter);\n//   }\n//  catch (  InvalidSyntaxException ex) {\n//     logger.error(\"SIPAccRegWizzActivator : \" + ex);\n//     return null;\n//   }\n//   return (serRefs == null) ? null : (ProtocolProviderFactory)bundleContext.getService(serRefs[0]);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/ProtocolProviderActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns a <tt>ProtocolProviderFactory</tt> for a given protocol provider.\n//  * @param protocolName the name of the protocol, which factory we'relooking for\n//  * @return a <tt>ProtocolProviderFactory</tt> for a given protocolprovider\n//  */\n// public static ProtocolProviderFactory getProtocolProviderFactory(String protocolName){\n//   String osgiFilter=\"(\" + ProtocolProviderFactory.PROTOCOL + \"=\"+ protocolName+ \")\";\n//   ProtocolProviderFactory protocolProviderFactory=null;\n//   try {\n//     ServiceReference[] serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class.getName(),osgiFilter);\n//     if ((serRefs != null) && (serRefs.length != 0)) {\n//       protocolProviderFactory=(ProtocolProviderFactory)bundleContext.getService(serRefs[0]);\n//     }\n//   }\n//  catch (  InvalidSyntaxException ex) {\n//     if (logger.isInfoEnabled())     logger.info(\"ProtocolProviderActivator : \" + ex);\n//   }\n//   return protocolProviderFactory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/ProtocolProviderFactory.java\n// --------------------------------------------------\n// /** \n//  * Finds registered <tt>ProtocolProviderFactory</tt> for given <tt>protocolName</tt>.\n//  * @param bundleContext the OSGI bundle context that will be used.\n//  * @param protocolName the protocol name.\n//  * @return Registered <tt>ProtocolProviderFactory</tt> for given protocolname or <tt>null</tt> if no provider was found.\n//  */\n// static public ProtocolProviderFactory getProtocolProviderFactory(BundleContext bundleContext,String protocolName){\n//   Collection<ServiceReference<ProtocolProviderFactory>> serRefs;\n//   String osgiFilter=\"(\" + ProtocolProviderFactory.PROTOCOL + \"=\"+ protocolName+ \")\";\n//   try {\n//     serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class,osgiFilter);\n//   }\n//  catch (  InvalidSyntaxException ex) {\n//     serRefs=null;\n//     logger.error(\"Invalid OSGi service filter\",ex);\n//   }\n//   if ((serRefs == null) || serRefs.isEmpty())   return null;\n//  else   return bundleContext.getService(serRefs.iterator().next());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/account/AccountUtils.java\n// --------------------------------------------------\n// /** \n//  * Returns a <tt>ProtocolProviderFactory</tt> for a given protocol provider.\n//  * @param protocolProvider the <tt>ProtocolProviderService</tt>, whichfactory we're looking for\n//  * @return a <tt>ProtocolProviderFactory</tt> for a given protocolprovider\n//  */\n// public static ProtocolProviderFactory getProtocolProviderFactory(ProtocolProviderService protocolProvider){\n//   return getProtocolProviderFactory(protocolProvider.getProtocolName());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/account/AccountUtils.java\n// --------------------------------------------------\n// /** \n//  * Returns a <tt>ProtocolProviderFactory</tt> for a given protocol provider.\n//  * @param protocolName the name of the protocol\n//  * @return a <tt>ProtocolProviderFactory</tt> for a given protocolprovider\n//  */\n// public static ProtocolProviderFactory getProtocolProviderFactory(String protocolName){\n//   String osgiFilter=\"(\" + ProtocolProviderFactory.PROTOCOL + \"=\"+ protocolName+ \")\";\n//   ProtocolProviderFactory protocolProviderFactory=null;\n//   try {\n//     Collection<ServiceReference<ProtocolProviderFactory>> refs=ProtocolProviderActivator.getBundleContext().getServiceReferences(ProtocolProviderFactory.class,osgiFilter);\n//     if ((refs != null) && !refs.isEmpty()) {\n//       protocolProviderFactory=ProtocolProviderActivator.getBundleContext().getService(refs.iterator().next());\n//     }\n//   }\n//  catch (  InvalidSyntaxException ex) {\n//     logger.error(\"AccountUtils : \" + ex);\n//   }\n//   return protocolProviderFactory;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass IrcAccRegWizzActivator extends DependentActivator\n{\n    /**\n     * OSGi bundle context.\n     */\n    static BundleContext bundleContext;\n\n    public IrcAccRegWizzActivator()\n    {\n        super(\n            ResourceManagementService.class,\n            UIService.class\n        );\n    }\n\n    /**\n     * Start the IRC account registration wizard.\n     */\n    public void startWithServices(BundleContext bundleContext)\n    {\n        logger.info(\"Loading irc account wizard.\");\n        UIService uiService = getService(UIService.class);\n        Resources.resourcesService =\n            getService(ResourceManagementService.class);\n\n        WizardContainer wizardContainer =\n            uiService.getAccountRegWizardContainer();\n\n        IrcAccountRegistrationWizard ircWizard =\n            new IrcAccountRegistrationWizard(wizardContainer);\n\n        Hashtable<String, String> containerFilter = new Hashtable<>();\n        containerFilter\n            .put(ProtocolProviderFactory.PROTOCOL, ProtocolNames.IRC);\n\n        bundleContext.registerService(\n            AccountRegistrationWizard.class.getName(), ircWizard,\n            containerFilter);\n\n        logger.info(\"IRC account registration wizard [STARTED].\");\n    }\n\n    /**\n     * Returns the <tt>ProtocolProviderFactory</tt> for the IRC protocol.\n     *\n     * @return the <tt>ProtocolProviderFactory</tt> for the IRC protocol\n     */\n    public static ProtocolProviderFactory getIrcProtocolProviderFactory()\n    {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jitsi_jitsi/32", "ground_truth": "\n        ServiceReference<?>[] serRefs = null;\n\n        String osgiFilter = \"(\" + ProtocolProviderFactory.PROTOCOL + \"=IRC)\";\n\n        try\n        {\n            serRefs = bundleContext.getServiceReferences(\n                ProtocolProviderFactory.class.getName(), osgiFilter);\n        }\n        catch (InvalidSyntaxException ex)\n        {\n            logger.error(\"Invalid OSGi filter\", ex);\n        }\n\n        return (ProtocolProviderFactory) bundleContext.getService(serRefs[0]);\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "ircaccregwizz", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "ircaccregwizz", "IrcAccRegWizzActivator.java"], "context_start_lineno": 0, "function_name": "getIrcProtocolProviderFactory", "left_context": "class IrcAccRegWizzActivator extends DependentActivator\n{\n    /**\n     * OSGi bundle context.\n     */\n    static BundleContext bundleContext;\n\n    public IrcAccRegWizzActivator()\n    {\n        super(\n            ResourceManagementService.class,\n            UIService.class\n        );\n    }\n\n    /**\n     * Start the IRC account registration wizard.\n     */\n    public void startWithServices(BundleContext bundleContext)\n    {\n        logger.info(\"Loading irc account wizard.\");\n        UIService uiService = getService(UIService.class);\n        Resources.resourcesService =\n            getService(ResourceManagementService.class);\n\n        WizardContainer wizardContainer =\n            uiService.getAccountRegWizardContainer();\n\n        IrcAccountRegistrationWizard ircWizard =\n            new IrcAccountRegistrationWizard(wizardContainer);\n\n        Hashtable<String, String> containerFilter = new Hashtable<>();\n        containerFilter\n            .put(ProtocolProviderFactory.PROTOCOL, ProtocolNames.IRC);\n\n        bundleContext.registerService(\n            AccountRegistrationWizard.class.getName(), ircWizard,\n            containerFilter);\n\n        logger.info(\"IRC account registration wizard [STARTED].\");\n    }\n\n    /**\n     * Returns the <tt>ProtocolProviderFactory</tt> for the IRC protocol.\n     *\n     * @return the <tt>ProtocolProviderFactory</tt> for the IRC protocol\n     */\n    public static ProtocolProviderFactory getIrcProtocolProviderFactory()\n    {", "right_context": "}\n}", "class_name": "IrcAccRegWizzActivator", "return_type": "ProtocolProviderFactory", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SipApplicationData\n{\n    /**\n     * Key service.\n     */\n    public static final String KEY_SERVICE = \"service\";\n\n    /**\n     * Key subscriptions.\n     */\n    public static final String KEY_SUBSCRIPTIONS = \"subscriptions\";\n\n    /**\n     * Key user request.\n     */\n    public static final String KEY_USER_REQUEST = \"userRequest\";\n\n    /**\n     * Logger for this class.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SipApplicationData.class);\n\n    /**\n     * Internal representation of the store.\n     */\n    private final Map<String, Object> storage_ = new HashMap<String, Object>();\n\n    /**\n     * Stores a <tt>value</tt> associated to the a <tt>key</tt> string in the\n     * <tt>container</tt>. Currently <tt>SIPMessage</tt>, <tt>Transaction</tt>\n     * and <tt>Dialog</tt> are supported as container.\n     *\n     * @param container the <tt>Object</tt> to attach the\n     * <tt>key</tt>/<tt>value</tt> pair to.\n     * @param key the key string to retrieve the value later with get()\n     * @param value the value to store\n     */\n    public static void setApplicationData(\n            Object container, String key, Object value)\n    {\n        if (container == null)\n        {\n            logger.warn(\"container is null\");\n            return;\n        }\n        if (key == null)\n        {\n            logger.warn(\"key is null\");\n            return;\n        }\n\n        SipApplicationData appData = getSipApplicationData(container);\n        if (appData == null)\n        {\n            appData = new SipApplicationData();\n            if (container instanceof SIPMessage)\n                ((SIPMessage) container).setApplicationData(appData);\n            else if (container instanceof Transaction)\n                ((Transaction) container).setApplicationData(appData);\n            else if (container instanceof Dialog)\n                ((Dialog) container).setApplicationData(appData);\n            else\n                logger.error(\"container should be of type \" +\n                        \"SIPMessage, Transaction or Dialog\");\n        }\n\n        appData.put(key, value);\n    }\n\n    /**\n     * Retrieves a value associated to the a <tt>key</tt> string in the\n     * <tt>container</tt>. Currently <tt>SIPMessage</tt>, <tt>Transaction</tt>\n     * and <tt>Dialog</tt> are supported as container.\n     *\n     * @param container the <tt>Object</tt> to retrieve a value from.\n     * @param key the key string to identify the value to retrieve\n     * @return the returned value or null if it is not found\n     */\n    public static Object getApplicationData(Object container, String key)\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Stores a <tt>value</tt> associated to the a <tt>key</tt> string in the\n     * <tt>SipApplicationData</tt>.\n     *\n     * @param key the key string to retrieve the value later with get()\n     * @param value the value to store\n     */\n    private void put(String key, Object value)\n    {\n        this.storage_.put(key, value);\n    }\n\n    /**\n     * Retrieves a value stored in <tt>SipApplicationData</tt>.\n     *\n     * @param key the key string to identify the value to retrieve\n     * @return the returned value or null if it is not found\n     */\n    private Object get(String key)\n    {\n        return this.storage_.get(key);\n    }\n\n    /**\n     * Tries to use the setApplicationData() method on the provided container\n     * and returns the SipApplicationData stored there, or null if there is none\n     * or if another type of instance is found.\n     *\n     * @param container the <tt>Object</tt> to retrieve a\n     * <tt>SipApplicationData</tt> from.\n     * @return the <tt>SipApplicationData</tt> rerieved, or null.\n     */\n    private static SipApplicationData getSipApplicationData(Object container)\n    {\n        Object appData;\n        if (container instanceof SIPMessage)\n            appData = ((SIPMessage) container).getApplicationData();\n        else if (container instanceof Transaction)\n            appData = ((Transaction) container).getApplicationData();\n        else if (container instanceof Dialog)\n            appData = ((Dialog) container).getApplicationData();\n        else\n        {\n            logger.error(\"container should be of type \" +\n                    \"SIPMessage, Transaction or Dialog\");\n            appData = null;\n        }\n\n        if (appData == null)\n            return null;\n        if (appData instanceof SipApplicationData)\n            return (SipApplicationData) appData;\n\n        logger.error(\"application data should be of type \" +\n                \"SipApplicationData\");\n        return null;\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/50", "ground_truth": "\n        if (container == null)\n        {\n            logger.debug(\"container is null\");\n            return null;\n        }\n        if (key == null)\n        {\n            logger.warn(\"key is null\");\n            return null;\n        }\n\n        SipApplicationData appData = getSipApplicationData(container);\n        if (appData == null)\n            return null;\n        return appData.get(key);\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "protocol-sip", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "protocol", "sip", "SipApplicationData.java"], "context_start_lineno": 0, "function_name": "getApplicationData", "left_context": "class SipApplicationData\n{\n    /**\n     * Key service.\n     */\n    public static final String KEY_SERVICE = \"service\";\n\n    /**\n     * Key subscriptions.\n     */\n    public static final String KEY_SUBSCRIPTIONS = \"subscriptions\";\n\n    /**\n     * Key user request.\n     */\n    public static final String KEY_USER_REQUEST = \"userRequest\";\n\n    /**\n     * Logger for this class.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SipApplicationData.class);\n\n    /**\n     * Internal representation of the store.\n     */\n    private final Map<String, Object> storage_ = new HashMap<String, Object>();\n\n    /**\n     * Stores a <tt>value</tt> associated to the a <tt>key</tt> string in the\n     * <tt>container</tt>. Currently <tt>SIPMessage</tt>, <tt>Transaction</tt>\n     * and <tt>Dialog</tt> are supported as container.\n     *\n     * @param container the <tt>Object</tt> to attach the\n     * <tt>key</tt>/<tt>value</tt> pair to.\n     * @param key the key string to retrieve the value later with get()\n     * @param value the value to store\n     */\n    public static void setApplicationData(\n            Object container, String key, Object value)\n    {\n        if (container == null)\n        {\n            logger.warn(\"container is null\");\n            return;\n        }\n        if (key == null)\n        {\n            logger.warn(\"key is null\");\n            return;\n        }\n\n        SipApplicationData appData = getSipApplicationData(container);\n        if (appData == null)\n        {\n            appData = new SipApplicationData();\n            if (container instanceof SIPMessage)\n                ((SIPMessage) container).setApplicationData(appData);\n            else if (container instanceof Transaction)\n                ((Transaction) container).setApplicationData(appData);\n            else if (container instanceof Dialog)\n                ((Dialog) container).setApplicationData(appData);\n            else\n                logger.error(\"container should be of type \" +\n                        \"SIPMessage, Transaction or Dialog\");\n        }\n\n        appData.put(key, value);\n    }\n\n    /**\n     * Retrieves a value associated to the a <tt>key</tt> string in the\n     * <tt>container</tt>. Currently <tt>SIPMessage</tt>, <tt>Transaction</tt>\n     * and <tt>Dialog</tt> are supported as container.\n     *\n     * @param container the <tt>Object</tt> to retrieve a value from.\n     * @param key the key string to identify the value to retrieve\n     * @return the returned value or null if it is not found\n     */\n    public static Object getApplicationData(Object container, String key)\n    {", "right_context": "}\n\n    /**\n     * Stores a <tt>value</tt> associated to the a <tt>key</tt> string in the\n     * <tt>SipApplicationData</tt>.\n     *\n     * @param key the key string to retrieve the value later with get()\n     * @param value the value to store\n     */\n    private void put(String key, Object value)\n    {\n        this.storage_.put(key, value);\n    }\n\n    /**\n     * Retrieves a value stored in <tt>SipApplicationData</tt>.\n     *\n     * @param key the key string to identify the value to retrieve\n     * @return the returned value or null if it is not found\n     */\n    private Object get(String key)\n    {\n        return this.storage_.get(key);\n    }\n\n    /**\n     * Tries to use the setApplicationData() method on the provided container\n     * and returns the SipApplicationData stored there, or null if there is none\n     * or if another type of instance is found.\n     *\n     * @param container the <tt>Object</tt> to retrieve a\n     * <tt>SipApplicationData</tt> from.\n     * @return the <tt>SipApplicationData</tt> rerieved, or null.\n     */\n    private static SipApplicationData getSipApplicationData(Object container)\n    {\n        Object appData;\n        if (container instanceof SIPMessage)\n            appData = ((SIPMessage) container).getApplicationData();\n        else if (container instanceof Transaction)\n            appData = ((Transaction) container).getApplicationData();\n        else if (container instanceof Dialog)\n            appData = ((Dialog) container).getApplicationData();\n        else\n        {\n            logger.error(\"container should be of type \" +\n                    \"SIPMessage, Transaction or Dialog\");\n            appData = null;\n        }\n\n        if (appData == null)\n            return null;\n        if (appData instanceof SipApplicationData)\n            return (SipApplicationData) appData;\n\n        logger.error(\"application data should be of type \" +\n                \"SipApplicationData\");\n        return null;\n    }\n}", "class_name": "SipApplicationData", "return_type": "Object", "parameters": [{"type": "Object", "name": "container"}, {"type": "String", "name": "key"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HelpMenu\n    extends SIPCommMenu\n    implements ActionListener,\n               PluginComponentListener\n{\n    private final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(HelpMenu.class.getName());\n\n    /**\n     * Creates an instance of <tt>HelpMenu</tt>.\n     * @param chatWindow The parent <tt>MainFrame</tt>.\n     */\n    public HelpMenu(ChatWindow chatWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.HELP\"));\n\n        this.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.HELP\"));\n\n        this.initPluginComponents();\n    }\n\n    /**\n     * Runs clean-up for associated resources which need explicit disposal (e.g.\n     * listeners keeping this instance alive because they were added to the\n     * model which operationally outlives this instance).\n     */\n    public void dispose()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Initialize plugin components already registered for this container.\n     */\n    private void initPluginComponents()\n    {\n        // Search for plugin components registered through the OSGI bundle\n        // context.\n        Collection<ServiceReference<PluginComponentFactory>> serRefs;\n        String osgiFilter\n            = \"(\" + Container.CONTAINER_ID + \"=\"\n                + Container.CONTAINER_CHAT_HELP_MENU.getID() + \")\";\n\n        try\n        {\n            serRefs\n                = GuiActivator.bundleContext.getServiceReferences(\n                        PluginComponentFactory.class,\n                        osgiFilter);\n        }\n        catch (InvalidSyntaxException ex)\n        {\n            serRefs = null;\n            logger.error(\"Could not obtain plugin reference.\", ex);\n        }\n\n        if ((serRefs != null) && !serRefs.isEmpty())\n        {\n            for (ServiceReference<PluginComponentFactory> serRef : serRefs)\n            {\n                PluginComponentFactory factory\n                    = GuiActivator.bundleContext.getService(serRef);\n                PluginComponent component\n                    = factory.getPluginComponentInstance(HelpMenu.this);\n\n                add((Component) component.getComponent());\n            }\n        }\n\n        GuiActivator.getUIService().addPluginComponentListener(this);\n    }\n\n    /**\n     * Handles the <tt>ActionEvent</tt> when one of the menu items is\n     * selected.\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n    }\n\n    public void pluginComponentAdded(PluginComponentEvent event)\n    {\n        PluginComponentFactory factory = event.getPluginComponentFactory();\n\n        if (factory.getContainer().equals(Container.CONTAINER_CHAT_HELP_MENU))\n        {\n            this.add(\n                (Component)factory.getPluginComponentInstance(HelpMenu.this)\n                    .getComponent());\n\n            this.revalidate();\n            this.repaint();\n        }\n    }\n\n    public void pluginComponentRemoved(PluginComponentEvent event)\n    {\n        PluginComponentFactory factory = event.getPluginComponentFactory();\n\n        if (factory.getContainer().equals(Container.CONTAINER_CHAT_HELP_MENU))\n        {\n            this.remove(\n                (Component)factory.getPluginComponentInstance(HelpMenu.this)\n                    .getComponent());\n        }\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/109", "ground_truth": "\n        GuiActivator.getUIService().removePluginComponentListener(this);\n\n        /*\n         * Let go of all Components contributed by PluginComponents because the\n         * latter will still live in the contribution store.\n         */\n        removeAll();\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "gui", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "gui", "main", "chat", "menus", "HelpMenu.java"], "context_start_lineno": 0, "function_name": "dispose", "left_context": "class HelpMenu\n    extends SIPCommMenu\n    implements ActionListener,\n               PluginComponentListener\n{\n    private final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(HelpMenu.class.getName());\n\n    /**\n     * Creates an instance of <tt>HelpMenu</tt>.\n     * @param chatWindow The parent <tt>MainFrame</tt>.\n     */\n    public HelpMenu(ChatWindow chatWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.HELP\"));\n\n        this.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.HELP\"));\n\n        this.initPluginComponents();\n    }\n\n    /**\n     * Runs clean-up for associated resources which need explicit disposal (e.g.\n     * listeners keeping this instance alive because they were added to the\n     * model which operationally outlives this instance).\n     */\n    public void dispose()\n    {", "right_context": "}\n\n    /**\n     * Initialize plugin components already registered for this container.\n     */\n    private void initPluginComponents()\n    {\n        // Search for plugin components registered through the OSGI bundle\n        // context.\n        Collection<ServiceReference<PluginComponentFactory>> serRefs;\n        String osgiFilter\n            = \"(\" + Container.CONTAINER_ID + \"=\"\n                + Container.CONTAINER_CHAT_HELP_MENU.getID() + \")\";\n\n        try\n        {\n            serRefs\n                = GuiActivator.bundleContext.getServiceReferences(\n                        PluginComponentFactory.class,\n                        osgiFilter);\n        }\n        catch (InvalidSyntaxException ex)\n        {\n            serRefs = null;\n            logger.error(\"Could not obtain plugin reference.\", ex);\n        }\n\n        if ((serRefs != null) && !serRefs.isEmpty())\n        {\n            for (ServiceReference<PluginComponentFactory> serRef : serRefs)\n            {\n                PluginComponentFactory factory\n                    = GuiActivator.bundleContext.getService(serRef);\n                PluginComponent component\n                    = factory.getPluginComponentInstance(HelpMenu.this);\n\n                add((Component) component.getComponent());\n            }\n        }\n\n        GuiActivator.getUIService().addPluginComponentListener(this);\n    }\n\n    /**\n     * Handles the <tt>ActionEvent</tt> when one of the menu items is\n     * selected.\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n    }\n\n    public void pluginComponentAdded(PluginComponentEvent event)\n    {\n        PluginComponentFactory factory = event.getPluginComponentFactory();\n\n        if (factory.getContainer().equals(Container.CONTAINER_CHAT_HELP_MENU))\n        {\n            this.add(\n                (Component)factory.getPluginComponentInstance(HelpMenu.this)\n                    .getComponent());\n\n            this.revalidate();\n            this.repaint();\n        }\n    }\n\n    public void pluginComponentRemoved(PluginComponentEvent event)\n    {\n        PluginComponentFactory factory = event.getPluginComponentFactory();\n\n        if (factory.getContainer().equals(Container.CONTAINER_CHAT_HELP_MENU))\n        {\n            this.remove(\n                (Component)factory.getPluginComponentInstance(HelpMenu.this)\n                    .getComponent());\n        }\n    }\n}", "class_name": "HelpMenu", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ArgDelegationPeerImpl\n    implements ArgDelegationPeer, ServiceListener\n{\n    /**\n     * The list of uriHandlers that we are currently aware of.\n     */\n    private final Map<String, UriHandler> uriHandlers = new Hashtable<>();\n\n    private final List<URI> recordedArgs = new ArrayList<>();\n\n    private final UIService uiService;\n\n    private final BundleContext bundleContext;\n\n    /**\n     * Creates an instance of this peer and scans <tt>bundleContext</tt> for all\n     * existing <tt>UriHandler</tt>\n     *\n     * @param bundleContext a reference to a currently valid instance of a\n     * bundle context.\n     */\n    public ArgDelegationPeerImpl(UIService uiService, BundleContext bundleContext)\n    {\n        this.uiService = uiService;\n        this.bundleContext = bundleContext;\n        var uriHandlerRefs = ServiceUtils.getServiceReferences(bundleContext, UriHandler.class);\n        {\n            for (var uriHandlerRef : uriHandlerRefs)\n            {\n                var uriHandler = bundleContext.getService(uriHandlerRef);\n                for (var protocol : uriHandler.getProtocols())\n                {\n                    uriHandlers.put(protocol, uriHandler);\n                }\n            }\n        }\n    }\n\n    /**\n     * Listens for <tt>UriHandlers</tt> that are registered in the bundle\n     * context after we had started so that we could add them to the list\n     * of currently known handlers.\n     *\n     * @param event the event containing the newly (un)registered service.\n     */\n    public void serviceChanged(ServiceEvent event)\n    {\n        var bc = event.getServiceReference().getBundle().getBundleContext();\n        if (bc == null)\n        {\n            return;\n        }\n\n        var service = bc.getService(event.getServiceReference());\n        //we are only interested in UriHandler-s\n        if (!(service instanceof UriHandler))\n        {\n            return;\n        }\n\n        UriHandler uriHandler = (UriHandler) service;\n        synchronized (uriHandlers)\n        {\n            switch (event.getType())\n            {\n            case ServiceEvent.MODIFIED:\n            case ServiceEvent.REGISTERED:\n                for (String protocol : uriHandler.getProtocols())\n                {\n                    uriHandlers.put(protocol, uriHandler);\n                }\n\n                // Dispatch any arguments that were held back\n                for (var uri : new ArrayList<>(recordedArgs))\n                {\n                    handleUri(uri);\n                }\n                break;\n\n            case ServiceEvent.UNREGISTERING:\n                for (String protocol : uriHandler.getProtocols())\n                {\n                    uriHandlers.remove(protocol);\n                }\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Relays <tt>uirArg</tt> to the corresponding handler or shows an error\n     * message in case no handler has been registered for the corresponding\n     * protocol.\n     *\n     * @param uriArg the uri that we've been passed and that we'd like to\n     * delegate to the corresponding provider.\n     */\n    @Override\n    public void handleUri(URI uriArg)\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * This method would simply bring the application on focus as it is called\n     * when the user has tried to launch a second instance of SIP Communicator\n     * while a first one was already running.  Future implementations may also\n     * show an error/information message to the user notifying them that a\n     * second instance is not to be launched.\n     */\n    public void handleConcurrentInvocationRequest()\n    {\n        uiService.setVisible(true);\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/129", "ground_truth": "\n        logger.trace(\"Handling URI: {}\", uriArg);\n\n        //first parse the uri and determine the scheme/protocol\n        if (uriArg == null || StringUtils.isEmpty(uriArg.getScheme()))\n        {\n            //no scheme, we don't know how to handle the URI\n            uiService.getPopupDialog()\n                .showMessagePopupDialog(\n                        \"Could not determine how to handle: \" + uriArg\n                            + \".\\nNo protocol scheme found.\",\n                        \"Error handling URI\",\n                        PopupDialog.ERROR_MESSAGE);\n            return;\n        }\n\n        var scheme = uriArg.getScheme();\n        UriHandler handler;\n        synchronized (uriHandlers)\n        {\n            handler = uriHandlers.get(scheme);\n        }\n\n        //if handler is null we need to tell the user.\n        if (handler == null)\n        {\n            recordedArgs.remove(uriArg);\n            if (Arrays.stream(bundleContext.getBundles()).allMatch(b -> b.getState() == Bundle.INSTALLED))\n            {\n                logger.warn(\"Couldn't open {}. No handler found for protocol {}\", uriArg, scheme);\n                uiService.getPopupDialog()\n                    .showMessagePopupDialog(\n                            \"\\\"\" + scheme + \"\\\" URIs are currently not supported.\",\n                            \"Error handling URI\",\n                            PopupDialog.ERROR_MESSAGE);\n            }\n            else\n            {\n                recordedArgs.add(uriArg);\n            }\n\n            return;\n        }\n\n        //we're all set. let's do the handling now.\n        try\n        {\n            handler.handleUri(uriArg);\n        }\n        catch (Exception ex)\n        {\n            uiService.getPopupDialog()\n                .showMessagePopupDialog(\n                        \"Error handling \" + uriArg,\n                        \"Error handling URI\",\n                        PopupDialog.ERROR_MESSAGE);\n            logger.error(\"Failed to handle {}\", uriArg, ex);\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "launcher", "src", "main", "java", "net", "java", "sip", "communicator", "argdelegation", "ArgDelegationPeerImpl.java"], "context_start_lineno": 0, "function_name": "handleUri", "left_context": "class ArgDelegationPeerImpl\n    implements ArgDelegationPeer, ServiceListener\n{\n    /**\n     * The list of uriHandlers that we are currently aware of.\n     */\n    private final Map<String, UriHandler> uriHandlers = new Hashtable<>();\n\n    private final List<URI> recordedArgs = new ArrayList<>();\n\n    private final UIService uiService;\n\n    private final BundleContext bundleContext;\n\n    /**\n     * Creates an instance of this peer and scans <tt>bundleContext</tt> for all\n     * existing <tt>UriHandler</tt>\n     *\n     * @param bundleContext a reference to a currently valid instance of a\n     * bundle context.\n     */\n    public ArgDelegationPeerImpl(UIService uiService, BundleContext bundleContext)\n    {\n        this.uiService = uiService;\n        this.bundleContext = bundleContext;\n        var uriHandlerRefs = ServiceUtils.getServiceReferences(bundleContext, UriHandler.class);\n        {\n            for (var uriHandlerRef : uriHandlerRefs)\n            {\n                var uriHandler = bundleContext.getService(uriHandlerRef);\n                for (var protocol : uriHandler.getProtocols())\n                {\n                    uriHandlers.put(protocol, uriHandler);\n                }\n            }\n        }\n    }\n\n    /**\n     * Listens for <tt>UriHandlers</tt> that are registered in the bundle\n     * context after we had started so that we could add them to the list\n     * of currently known handlers.\n     *\n     * @param event the event containing the newly (un)registered service.\n     */\n    public void serviceChanged(ServiceEvent event)\n    {\n        var bc = event.getServiceReference().getBundle().getBundleContext();\n        if (bc == null)\n        {\n            return;\n        }\n\n        var service = bc.getService(event.getServiceReference());\n        //we are only interested in UriHandler-s\n        if (!(service instanceof UriHandler))\n        {\n            return;\n        }\n\n        UriHandler uriHandler = (UriHandler) service;\n        synchronized (uriHandlers)\n        {\n            switch (event.getType())\n            {\n            case ServiceEvent.MODIFIED:\n            case ServiceEvent.REGISTERED:\n                for (String protocol : uriHandler.getProtocols())\n                {\n                    uriHandlers.put(protocol, uriHandler);\n                }\n\n                // Dispatch any arguments that were held back\n                for (var uri : new ArrayList<>(recordedArgs))\n                {\n                    handleUri(uri);\n                }\n                break;\n\n            case ServiceEvent.UNREGISTERING:\n                for (String protocol : uriHandler.getProtocols())\n                {\n                    uriHandlers.remove(protocol);\n                }\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Relays <tt>uirArg</tt> to the corresponding handler or shows an error\n     * message in case no handler has been registered for the corresponding\n     * protocol.\n     *\n     * @param uriArg the uri that we've been passed and that we'd like to\n     * delegate to the corresponding provider.\n     */\n    @Override\n    public void handleUri(URI uriArg)\n    {", "right_context": "}\n\n    /**\n     * This method would simply bring the application on focus as it is called\n     * when the user has tried to launch a second instance of SIP Communicator\n     * while a first one was already running.  Future implementations may also\n     * show an error/information message to the user notifying them that a\n     * second instance is not to be launched.\n     */\n    public void handleConcurrentInvocationRequest()\n    {\n        uiService.setVisible(true);\n    }\n}", "class_name": "ArgDelegationPeerImpl", "return_type": "void", "parameters": [{"type": "URI", "name": "uriArg"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JingleNodesCandidate\n    extends LocalCandidate\n{\n    /**\n     * The socket used to communicate with relay.\n     */\n    private IceSocketWrapper socket = null;\n\n    /**\n     * The <tt>RelayedCandidateDatagramSocket</tt> of this\n     * <tt>JingleNodesCandidate</tt>.\n     */\n    private JingleNodesCandidateDatagramSocket\n        jingleNodesCandidateDatagramSocket = null;\n\n    /**\n     * <tt>TransportAddress</tt> of the Jingle Nodes relay where we will send\n     * our packet.\n     */\n    private TransportAddress localEndPoint = null;\n\n    /**\n     * Creates a <tt>JingleNodesRelayedCandidate</tt> for the specified\n     * transport, address, and base.\n     *\n     * @param transportAddress  the transport address that this candidate is\n     * encapsulating.\n     * @param parentComponent the <tt>Component</tt> that this candidate\n     * belongs to.\n     * @param localEndPoint <tt>TransportAddress</tt> of the Jingle Nodes relay\n     * where we will send our packet.\n     */\n    public JingleNodesCandidate(TransportAddress transportAddress,\n            Component parentComponent, TransportAddress localEndPoint)\n    {\n        super(\n                transportAddress,\n                parentComponent,\n                CandidateType.RELAYED_CANDIDATE,\n                CandidateExtendedType.JINGLE_NODE_CANDIDATE,\n                null);\n        setBase(this);\n        setRelayServerAddress(localEndPoint);\n        this.localEndPoint = localEndPoint;\n    }\n\n    /**\n     * Gets the <tt>JingleNodesCandidateDatagramSocket</tt> of this\n     * <tt>JingleNodesCandidate</tt>.\n     * <p>\n     * <b>Note</b>: The method is part of the internal API of\n     * <tt>RelayedCandidate</tt> and <tt>TurnCandidateHarvest</tt> and is not\n     * intended for public use.\n     * </p>\n     *\n     * @return the <tt>RelayedCandidateDatagramSocket</tt> of this\n     * <tt>RelayedCandidate</tt>\n     */\n    private synchronized JingleNodesCandidateDatagramSocket\n        getRelayedCandidateDatagramSocket()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Gets the <tt>DatagramSocket</tt> associated with this <tt>Candidate</tt>.\n     *\n     * @return the <tt>DatagramSocket</tt> associated with this\n     * <tt>Candidate</tt>\n     */\n    @Override\n    protected IceSocketWrapper getCandidateIceSocketWrapper()\n    {\n        if (socket == null)\n        {\n            try\n            {\n                socket\n                    = new IceUdpSocketWrapper(new MultiplexingDatagramSocket(\n                            getRelayedCandidateDatagramSocket()));\n            }\n            catch (SocketException sex)\n            {\n                throw new UndeclaredThrowableException(sex);\n            }\n        }\n        return socket;\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/171", "ground_truth": "\n        if (jingleNodesCandidateDatagramSocket == null)\n        {\n            try\n            {\n                jingleNodesCandidateDatagramSocket\n                    = new JingleNodesCandidateDatagramSocket(\n                            this, localEndPoint);\n            }\n            catch (SocketException sex)\n            {\n                throw new UndeclaredThrowableException(sex);\n            }\n        }\n        return jingleNodesCandidateDatagramSocket;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "protocol-jabber", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "protocol", "jabber", "JingleNodesCandidate.java"], "context_start_lineno": 0, "function_name": "getRelayedCandidateDatagramSocket", "left_context": "class JingleNodesCandidate\n    extends LocalCandidate\n{\n    /**\n     * The socket used to communicate with relay.\n     */\n    private IceSocketWrapper socket = null;\n\n    /**\n     * The <tt>RelayedCandidateDatagramSocket</tt> of this\n     * <tt>JingleNodesCandidate</tt>.\n     */\n    private JingleNodesCandidateDatagramSocket\n        jingleNodesCandidateDatagramSocket = null;\n\n    /**\n     * <tt>TransportAddress</tt> of the Jingle Nodes relay where we will send\n     * our packet.\n     */\n    private TransportAddress localEndPoint = null;\n\n    /**\n     * Creates a <tt>JingleNodesRelayedCandidate</tt> for the specified\n     * transport, address, and base.\n     *\n     * @param transportAddress  the transport address that this candidate is\n     * encapsulating.\n     * @param parentComponent the <tt>Component</tt> that this candidate\n     * belongs to.\n     * @param localEndPoint <tt>TransportAddress</tt> of the Jingle Nodes relay\n     * where we will send our packet.\n     */\n    public JingleNodesCandidate(TransportAddress transportAddress,\n            Component parentComponent, TransportAddress localEndPoint)\n    {\n        super(\n                transportAddress,\n                parentComponent,\n                CandidateType.RELAYED_CANDIDATE,\n                CandidateExtendedType.JINGLE_NODE_CANDIDATE,\n                null);\n        setBase(this);\n        setRelayServerAddress(localEndPoint);\n        this.localEndPoint = localEndPoint;\n    }\n\n    /**\n     * Gets the <tt>JingleNodesCandidateDatagramSocket</tt> of this\n     * <tt>JingleNodesCandidate</tt>.\n     * <p>\n     * <b>Note</b>: The method is part of the internal API of\n     * <tt>RelayedCandidate</tt> and <tt>TurnCandidateHarvest</tt> and is not\n     * intended for public use.\n     * </p>\n     *\n     * @return the <tt>RelayedCandidateDatagramSocket</tt> of this\n     * <tt>RelayedCandidate</tt>\n     */\n    private synchronized JingleNodesCandidateDatagramSocket\n        getRelayedCandidateDatagramSocket()\n    {", "right_context": "}\n\n    /**\n     * Gets the <tt>DatagramSocket</tt> associated with this <tt>Candidate</tt>.\n     *\n     * @return the <tt>DatagramSocket</tt> associated with this\n     * <tt>Candidate</tt>\n     */\n    @Override\n    protected IceSocketWrapper getCandidateIceSocketWrapper()\n    {\n        if (socket == null)\n        {\n            try\n            {\n                socket\n                    = new IceUdpSocketWrapper(new MultiplexingDatagramSocket(\n                            getRelayedCandidateDatagramSocket()));\n            }\n            catch (SocketException sex)\n            {\n                throw new UndeclaredThrowableException(sex);\n            }\n        }\n        return socket;\n    }\n}", "class_name": "JingleNodesCandidate", "return_type": "JingleNodesCandidateDatagramSocket", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SIPCommLookAndFeel\n    extends MetalLookAndFeel\n    implements Skinnable\n{\n    private static final long serialVersionUID = 0L;\n\n    /**\n     * Returns <tt>false</tt> to indicate that this is not a native look&feel.\n     *\n     * @return <tt>false</tt> to indicate that this is not a native look&feel\n     */\n    @Override\n    public boolean isNativeLookAndFeel()\n    {\n        return false;\n    }\n\n    /**\n     * Returns <tt>true</tt> to indicate that this look&feel is supported.\n     *\n     * @return <tt>false</tt> to indicate that this look&feel is supported\n     */\n    @Override\n    public boolean isSupportedLookAndFeel()\n    {\n        return true;\n    }\n\n    /**\n     * Returns the description of this look&feel.\n     *\n     * @return the description of this look&feel\n     */\n    @Override\n    public String getDescription()\n    {\n        return \"The Jitsi look and feel.\";\n    }\n\n    /**\n     * Returns the identifier of this look&feel.\n     *\n     * @return the identifier of this look&feel\n     */\n    @Override\n    public String getID()\n    {\n        return \"SIPCommunicator\";\n    }\n\n    /**\n     * Returns the name of this look&feel.\n     *\n     * @return  the name of this look&feel\n     */\n    @Override\n    public String getName()\n    {\n        return \"SIPCommLookAndFeel\";\n    }\n\n    /**\n     * Initializes class defaults.\n     *\n     * @param table the default user interface configurations table\n     */\n    @Override\n    protected void initClassDefaults(UIDefaults table)\n    {\n        super.initClassDefaults(table);\n\n        String lfPackageName = \"net.java.sip.communicator.impl.gui.lookandfeel.\";\n\n        Object[] uiDefaults = {\n                \"ButtonUI\", lfPackageName + \"SIPCommButtonUI\",\n                \"ToggleButtonUI\", lfPackageName + \"SIPCommToggleButtonUI\",\n                \"SplitPaneUI\", lfPackageName + \"SIPCommSplitPaneUI\",\n                \"ScrollBarUI\", lfPackageName + \"SIPCommScrollBarUI\",\n                \"ComboBoxUI\", lfPackageName + \"SIPCommComboBoxUI\",\n                \"TextFieldUI\", lfPackageName + \"SIPCommTextFieldUI\",\n                \"PasswordFieldUI\", lfPackageName + \"SIPCommPasswordFieldUI\",\n                \"LabelUI\", lfPackageName + \"SIPCommLabelUI\",\n                \"EditorPaneUI\", lfPackageName + \"SIPCommEditorPaneUI\",\n                \"MenuItemUI\", lfPackageName + \"SIPCommMenuItemUI\",\n                \"CheckBoxMenuItemUI\", lfPackageName + \"SIPCommCheckBoxMenuItemUI\",\n                \"MenuUI\", lfPackageName + \"SIPCommMenuUI\",\n                \"ToolBarUI\", lfPackageName + \"SIPCommToolBarUI\",\n                \"ToolBarSeparatorUI\", lfPackageName + \"SIPCommToolBarSeparatorUI\",\n                \"TabbedPaneUI\", \"net.java.sip.communicator.plugin.desktoputil.plaf.SIPCommTabbedPaneEnhancedUI\",\n                \"ToolTipUI\", lfPackageName + \"SIPCommToolTipUI\",\n                \"TextAreaUI\", lfPackageName + \"SIPCommTextAreaUI\",\n                \"TextPaneUI\", lfPackageName + \"SIPCommTextPaneUI\",\n                \"CheckBoxUI\", lfPackageName + \"SIPCommCheckBoxUI\",\n                \"ListUI\", lfPackageName + \"SIPCommListUI\",\n                \"PopupMenuUI\", lfPackageName + \"SIPCommPopupMenuUI\",\n                \"SpinnerUI\", lfPackageName + \"SIPCommSpinnerUI\"\n        };\n        table.putDefaults(uiDefaults);\n    }\n\n    /**\n     * Returns the disabled icon for the given <tt>component</tt>, based on the\n     * given <tt>icon</tt>.\n     *\n     * @param component the component, for which we make a disabled icon\n     * @param icon the icon to make a disabled version for\n     *\n     * @return the created icon\n     */\n    @Override\n    public Icon getDisabledIcon(JComponent component, Icon icon)\n    {\n        if (icon instanceof ImageIcon)\n        {\n            return new IconUIResource(new ImageIcon(LightGrayFilter.\n                   createDisabledImage(((ImageIcon)icon).getImage())));\n        }\n        return null;\n    }\n\n    /**\n     * Reloads look&feel.\n     */\n    public void loadSkin()\n    {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jitsi_jitsi/175", "ground_truth": "\n        initClassDefaults(UIManager.getDefaults());\n        if(getCurrentTheme() != null\n            && getCurrentTheme() instanceof SIPCommDefaultTheme)\n        {\n            ((SIPCommDefaultTheme)getCurrentTheme()).loadSkin();\n            setCurrentTheme(getCurrentTheme());\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "gui", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "gui", "lookandfeel", "SIPCommLookAndFeel.java"], "context_start_lineno": 0, "function_name": "loadSkin", "left_context": "class SIPCommLookAndFeel\n    extends MetalLookAndFeel\n    implements Skinnable\n{\n    private static final long serialVersionUID = 0L;\n\n    /**\n     * Returns <tt>false</tt> to indicate that this is not a native look&feel.\n     *\n     * @return <tt>false</tt> to indicate that this is not a native look&feel\n     */\n    @Override\n    public boolean isNativeLookAndFeel()\n    {\n        return false;\n    }\n\n    /**\n     * Returns <tt>true</tt> to indicate that this look&feel is supported.\n     *\n     * @return <tt>false</tt> to indicate that this look&feel is supported\n     */\n    @Override\n    public boolean isSupportedLookAndFeel()\n    {\n        return true;\n    }\n\n    /**\n     * Returns the description of this look&feel.\n     *\n     * @return the description of this look&feel\n     */\n    @Override\n    public String getDescription()\n    {\n        return \"The Jitsi look and feel.\";\n    }\n\n    /**\n     * Returns the identifier of this look&feel.\n     *\n     * @return the identifier of this look&feel\n     */\n    @Override\n    public String getID()\n    {\n        return \"SIPCommunicator\";\n    }\n\n    /**\n     * Returns the name of this look&feel.\n     *\n     * @return  the name of this look&feel\n     */\n    @Override\n    public String getName()\n    {\n        return \"SIPCommLookAndFeel\";\n    }\n\n    /**\n     * Initializes class defaults.\n     *\n     * @param table the default user interface configurations table\n     */\n    @Override\n    protected void initClassDefaults(UIDefaults table)\n    {\n        super.initClassDefaults(table);\n\n        String lfPackageName = \"net.java.sip.communicator.impl.gui.lookandfeel.\";\n\n        Object[] uiDefaults = {\n                \"ButtonUI\", lfPackageName + \"SIPCommButtonUI\",\n                \"ToggleButtonUI\", lfPackageName + \"SIPCommToggleButtonUI\",\n                \"SplitPaneUI\", lfPackageName + \"SIPCommSplitPaneUI\",\n                \"ScrollBarUI\", lfPackageName + \"SIPCommScrollBarUI\",\n                \"ComboBoxUI\", lfPackageName + \"SIPCommComboBoxUI\",\n                \"TextFieldUI\", lfPackageName + \"SIPCommTextFieldUI\",\n                \"PasswordFieldUI\", lfPackageName + \"SIPCommPasswordFieldUI\",\n                \"LabelUI\", lfPackageName + \"SIPCommLabelUI\",\n                \"EditorPaneUI\", lfPackageName + \"SIPCommEditorPaneUI\",\n                \"MenuItemUI\", lfPackageName + \"SIPCommMenuItemUI\",\n                \"CheckBoxMenuItemUI\", lfPackageName + \"SIPCommCheckBoxMenuItemUI\",\n                \"MenuUI\", lfPackageName + \"SIPCommMenuUI\",\n                \"ToolBarUI\", lfPackageName + \"SIPCommToolBarUI\",\n                \"ToolBarSeparatorUI\", lfPackageName + \"SIPCommToolBarSeparatorUI\",\n                \"TabbedPaneUI\", \"net.java.sip.communicator.plugin.desktoputil.plaf.SIPCommTabbedPaneEnhancedUI\",\n                \"ToolTipUI\", lfPackageName + \"SIPCommToolTipUI\",\n                \"TextAreaUI\", lfPackageName + \"SIPCommTextAreaUI\",\n                \"TextPaneUI\", lfPackageName + \"SIPCommTextPaneUI\",\n                \"CheckBoxUI\", lfPackageName + \"SIPCommCheckBoxUI\",\n                \"ListUI\", lfPackageName + \"SIPCommListUI\",\n                \"PopupMenuUI\", lfPackageName + \"SIPCommPopupMenuUI\",\n                \"SpinnerUI\", lfPackageName + \"SIPCommSpinnerUI\"\n        };\n        table.putDefaults(uiDefaults);\n    }\n\n    /**\n     * Returns the disabled icon for the given <tt>component</tt>, based on the\n     * given <tt>icon</tt>.\n     *\n     * @param component the component, for which we make a disabled icon\n     * @param icon the icon to make a disabled version for\n     *\n     * @return the created icon\n     */\n    @Override\n    public Icon getDisabledIcon(JComponent component, Icon icon)\n    {\n        if (icon instanceof ImageIcon)\n        {\n            return new IconUIResource(new ImageIcon(LightGrayFilter.\n                   createDisabledImage(((ImageIcon)icon).getImage())));\n        }\n        return null;\n    }\n\n    /**\n     * Reloads look&feel.\n     */\n    public void loadSkin()\n    {", "right_context": "}\n}", "class_name": "SIPCommLookAndFeel", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/ContactSipImpl.java\n// --------------------------------------------------\n// /** \n//  * Gets the entry custom elements.\n//  * @return the custom elements.\n//  */\n// List<Element> getAny(){\n//   return this.entry.getAny();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/commonpolicy/ActionsType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/commonpolicy/ConditionsType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (this.any == null) {\n//     this.any=new ArrayList<Element>();\n//   }\n//   return any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/commonpolicy/IdentityType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/commonpolicy/ManyType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (this.any == null) {\n//     this.any=new ArrayList<Element>();\n//   }\n//   return any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/prescontent/ContentType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/presrules/ProvideDevicePermissionType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/presrules/ProvidePersonPermissionType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/presrules/ProvideServicePermissionType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/resourcelists/EntryRefType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/resourcelists/EntryType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/resourcelists/ExternalType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/resourcelists/ListType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/xcapcaps/XCapCapsType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-sip/src/main/java/net/java/sip/communicator/impl/protocol/sip/xcap/model/xcaperror/ExtensionType.java\n// --------------------------------------------------\n// /** \n//  * Gets the value of the any property.\n//  * @return the any property.\n//  */\n// public List<Element> getAny(){\n//   if (any == null) {\n//     any=new ArrayList<Element>();\n//   }\n//   return this.any;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TransformationsType\n{\n    /**\n     * The service-permissions element.\n     */\n    private ProvideServicePermissionType servicePermission;\n\n    /**\n     * The person-permissions element.\n     */\n    private ProvidePersonPermissionType personPermission;\n\n    /**\n     * The device-permissions element.\n     */\n    private ProvideDevicePermissionType devicePermission;\n\n    /**\n     * The list of any elements.\n     */\n    private List<Element> any;\n\n    /**\n     * Gets the value of the servicePermission property.\n     *\n     * @return the servicePermission property.\n     */\n    public ProvideServicePermissionType getServicePermission()\n    {\n        return servicePermission;\n    }\n\n    /**\n     * Sets the value of the servicePermission property.\n     *\n     * @param servicePermission the servicePermission to set.\n     */\n    public void setServicePermission(\n            ProvideServicePermissionType servicePermission)\n    {\n        this.servicePermission = servicePermission;\n    }\n\n    /**\n     * Gets the value of the personPermission property.\n     *\n     * @return the personPermission property.\n     */\n    public ProvidePersonPermissionType getPersonPermission()\n    {\n        return personPermission;\n    }\n\n    /**\n     * Sets the value of the personPermission property.\n     *\n     * @param personPermission the personPermission to set.\n     */\n    public void setPersonPermission(\n            ProvidePersonPermissionType personPermission)\n    {\n        this.personPermission = personPermission;\n    }\n\n    /**\n     * Gets the value of the devicePermission property.\n     *\n     * @return the devicePermission property.\n     */\n    public ProvideDevicePermissionType getDevicePermission()\n    {\n        return devicePermission;\n    }\n\n    /**\n     * Sets the value of the devicePermission property.\n     *\n     * @param devicePermission the devicePermission to set.\n     */\n    public void setDevicePermission(\n            ProvideDevicePermissionType devicePermission)\n    {\n        this.devicePermission = devicePermission;\n    }\n\n    /**\n     * Gets the value of the any property.\n     *\n     * @return the any property.\n     */\n    public List<Element> getAny()\n    {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jitsi_jitsi/225", "ground_truth": "\n        if (any == null)\n        {\n            any = new ArrayList<Element>();\n        }\n        return any;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "protocol-sip", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "protocol", "sip", "xcap", "model", "commonpolicy", "TransformationsType.java"], "context_start_lineno": 0, "function_name": "getAny", "left_context": "class TransformationsType\n{\n    /**\n     * The service-permissions element.\n     */\n    private ProvideServicePermissionType servicePermission;\n\n    /**\n     * The person-permissions element.\n     */\n    private ProvidePersonPermissionType personPermission;\n\n    /**\n     * The device-permissions element.\n     */\n    private ProvideDevicePermissionType devicePermission;\n\n    /**\n     * The list of any elements.\n     */\n    private List<Element> any;\n\n    /**\n     * Gets the value of the servicePermission property.\n     *\n     * @return the servicePermission property.\n     */\n    public ProvideServicePermissionType getServicePermission()\n    {\n        return servicePermission;\n    }\n\n    /**\n     * Sets the value of the servicePermission property.\n     *\n     * @param servicePermission the servicePermission to set.\n     */\n    public void setServicePermission(\n            ProvideServicePermissionType servicePermission)\n    {\n        this.servicePermission = servicePermission;\n    }\n\n    /**\n     * Gets the value of the personPermission property.\n     *\n     * @return the personPermission property.\n     */\n    public ProvidePersonPermissionType getPersonPermission()\n    {\n        return personPermission;\n    }\n\n    /**\n     * Sets the value of the personPermission property.\n     *\n     * @param personPermission the personPermission to set.\n     */\n    public void setPersonPermission(\n            ProvidePersonPermissionType personPermission)\n    {\n        this.personPermission = personPermission;\n    }\n\n    /**\n     * Gets the value of the devicePermission property.\n     *\n     * @return the devicePermission property.\n     */\n    public ProvideDevicePermissionType getDevicePermission()\n    {\n        return devicePermission;\n    }\n\n    /**\n     * Sets the value of the devicePermission property.\n     *\n     * @param devicePermission the devicePermission to set.\n     */\n    public void setDevicePermission(\n            ProvideDevicePermissionType devicePermission)\n    {\n        this.devicePermission = devicePermission;\n    }\n\n    /**\n     * Gets the value of the any property.\n     *\n     * @return the any property.\n     */\n    public List<Element> getAny()\n    {", "right_context": "}\n}", "class_name": "TransformationsType", "return_type": "List<Element>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/msofficecomm/src/main/java/net/java/sip/communicator/plugin/msofficecomm/MsOfficeCommActivator.java\n// --------------------------------------------------\n// /** \n//  * Gets the <tt>ResourceManagementService</tt> to be used by the functionality of the plug-in.\n//  * @return the <tt>ResourceManagementService</tt> to be used by thefunctionality of the plug-in\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourceService == null) {\n//     resourceService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourceService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/notificationconfiguration/src/main/java/net/java/sip/communicator/plugin/notificationconfiguration/Resources.java\n// --------------------------------------------------\n// private static ResourceManagementService getResources(){\n//   return ServiceUtils.getService(NotificationConfigurationActivator.bundleContext,ResourceManagementService.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/notificationwiring/src/main/java/net/java/sip/communicator/plugin/notificationwiring/NotificationWiringActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>, through which we will access all resources.\n//  * @return the <tt>ResourceManagementService</tt>, through which we willaccess all resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null) {\n//     resourcesService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/phonenumbercontactsource/src/main/java/net/java/sip/communicator/plugin/phonenumbercontactsource/PNContactSourceActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns a reference to the ResourceManagementService implementation currently registered in the bundle context or null if no such implementation was found.\n//  * @return a reference to a ResourceManagementService implementationcurrently registered in the bundle context or null if no such implementation was found.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resources == null) {\n//     resources=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resources;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/pluginmanager/src/main/java/net/java/sip/communicator/plugin/pluginmanager/Resources.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>.\n//  * @return the <tt>ResourceManagementService</tt>.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null)   resourcesService=ServiceUtils.getService(PluginManagerActivator.bundleContext,ResourceManagementService.class);\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/reconnect/src/main/java/net/java/sip/communicator/plugin/reconnectplugin/ReconnectPluginActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns resource service.\n//  * @return the resource service.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null) {\n//     ServiceReference serviceReference=bundleContext.getServiceReference(ResourceManagementService.class.getName());\n//     if (serviceReference == null)     return null;\n//     resourcesService=(ResourceManagementService)bundleContext.getService(serviceReference);\n//   }\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/securityconfig/src/main/java/net/java/sip/communicator/plugin/securityconfig/SecurityConfigActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns a reference to the ResourceManagementService implementation currently registered in the bundle context or null if no such implementation was found.\n//  * @return a currently valid implementation of the ResourceManagementService\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resources == null) {\n//     resources=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resources;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/sipaccregwizz/src/main/java/net/java/sip/communicator/plugin/sipaccregwizz/Resources.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>.\n//  * @return the <tt>ResourceManagementService</tt>.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null)   resourcesService=ServiceUtils.getService(SIPAccRegWizzActivator.bundleContext,ResourceManagementService.class);\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/spellcheck/src/main/java/net/java/sip/communicator/plugin/spellcheck/Resources.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt> through which we obtain resources like images and localized texts.\n//  * @return the <tt>ResourceManagementService</tt>\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourceService != null)   return resourceService;\n//   ServiceReference configServiceRef=SpellCheckActivator.bundleContext.getServiceReference(ResourceManagementService.class.getName());\n//   resourceService=(ResourceManagementService)SpellCheckActivator.bundleContext.getService(configServiceRef);\n//   return resourceService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/thunderbird/src/main/java/net/java/sip/communicator/plugin/thunderbird/ThunderbirdActivator.java\n// --------------------------------------------------\n// /** \n//  * Gets the resource service.\n//  * @return the resource service.\n//  */\n// static ResourceManagementService getResources(){\n//   return resourceManagementService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/update/src/main/java/net/java/sip/communicator/plugin/update/Resources.java\n// --------------------------------------------------\n// /** \n//  * Gets the <tt>ResourceManagementService</tt> registered in the <tt>BundleContext</tt> of the update plug-in.\n//  * @return the <tt>ResourceManagementService</tt> (if any) registered in the<tt>BundleContext</tt> of the update plug-in\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resources == null) {\n//     resources=ServiceUtils.getService(UpdateActivator.bundleContext,ResourceManagementService.class);\n//   }\n//   return resources;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/usersearch/src/main/java/net/java/sip/communicator/plugin/usersearch/UserSearchActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns a reference to the ResourceManagementService implementation currently registered in the bundle context or null if no such implementation was found.\n//  * @return a reference to a ResourceManagementService implementationcurrently registered in the bundle context or null if no such implementation was found.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resources == null) {\n//     resources=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resources;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/callhistory/src/main/java/net/java/sip/communicator/impl/callhistory/CallHistoryActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>, through which we will access all resources.\n//  * @return the <tt>ResourceManagementService</tt>, through which we willaccess all resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null) {\n//     resourcesService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/desktop/src/main/java/net/java/sip/communicator/impl/osdependent/OsDependentActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>, through which we will access all resources.\n//  * @return the <tt>ResourceManagementService</tt>, through which we willaccess all resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/desktop/src/main/java/net/java/sip/communicator/impl/osdependent/Resources.java\n// --------------------------------------------------\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null)   resourcesService=ServiceUtils.getService(OsDependentActivator.bundleContext,ResourceManagementService.class);\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/globaldisplaydetails/src/main/java/net/java/sip/communicator/impl/globaldisplaydetails/GlobalDisplayDetailsActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>, through which we will access all resources.\n//  * @return the <tt>ResourceManagementService</tt>, through which we willaccess all resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null) {\n//     resourcesService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/httputil/src/main/java/net/java/sip/communicator/service/httputil/HttpUtilActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the service giving access to all application resources.\n//  * @return the service giving access to all application resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourceService == null) {\n//     resourceService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourceService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/msghistory/src/main/java/net/java/sip/communicator/impl/msghistory/MessageHistoryActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>, through which we will access all resources.\n//  * @return the <tt>ResourceManagementService</tt>, through which we willaccess all resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourcesService == null) {\n//     resourcesService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourcesService;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/ui-service/src/main/java/net/java/sip/communicator/service/gui/LazyConfigurationForm.java\n// --------------------------------------------------\n// /** \n//  * Returns an instance of the <tt>ResourceManagementService</tt>, which could be used to obtain any resources.\n//  * @return an instance of the <tt>ResourceManagementService</tt>\n//  */\n// private static ResourceManagementService getResources(){\n//   return GuiServiceActivator.getResources();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/ui-service/src/main/java/net/java/sip/communicator/service/gui/internal/GuiServiceActivator.java\n// --------------------------------------------------\n// /** \n//  * Returns the <tt>ResourceManagementService</tt>, through which we will access all resources.\n//  * @return the <tt>ResourceManagementService</tt>, through which we willaccess all resources.\n//  */\n// public static ResourceManagementService getResources(){\n//   if (resourceService == null) {\n//     resourceService=ServiceUtils.getService(bundleContext,ResourceManagementService.class);\n//   }\n//   return resourceService;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CertificateVerificationActivator\n    extends DependentActivator\n{\n    /**\n     * The bundle context for this bundle.\n     */\n    protected static BundleContext bundleContext;\n\n    /**\n     * The configuration service.\n     */\n    private static ConfigurationService configService;\n\n    /**\n     * The service giving access to all resources.\n     */\n    private static ResourceManagementService resourcesService;\n\n    /**\n     * The service to store and access passwords.\n     */\n    private static CredentialsStorageService credService;\n\n    /**\n     * The service to create and show dialogs for user interaction.\n     */\n    private static VerifyCertificateDialogService certificateDialogService;\n\n    public CertificateVerificationActivator()\n    {\n        super(\n            ConfigurationService.class,\n            ResourceManagementService.class,\n            CredentialsStorageService.class\n        );\n    }\n\n    /**\n     * Called when this bundle is started.\n     *\n     * @param bc The execution context of the bundle being started.\n     * @throws Exception if the bundle is not correctly started\n     */\n    @Override\n    public void startWithServices(BundleContext bc) throws Exception\n    {\n        bundleContext = bc;\n\n        bundleContext.registerService(\n            CertificateService.class,\n            new CertificateServiceImpl(),\n            null);\n    }\n\n    /**\n     * Returns the <tt>ConfigurationService</tt> obtained from the bundle\n     * context.\n     * @return the <tt>ConfigurationService</tt> obtained from the bundle\n     * context\n     */\n    public static ConfigurationService getConfigurationService()\n    {\n        if(configService == null)\n        {\n            configService\n                = ServiceUtils.getService(\n                        bundleContext,\n                        ConfigurationService.class);\n        }\n        return configService;\n    }\n\n    /**\n     * Returns the <tt>ResourceManagementService</tt>, through which we will\n     * access all resources.\n     *\n     * @return the <tt>ResourceManagementService</tt>, through which we will\n     * access all resources.\n     */\n    public static ResourceManagementService getResources()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Returns the <tt>CredentialsStorageService</tt>, through which we will\n     * access all passwords.\n     *\n     * @return the <tt>CredentialsStorageService</tt>, through which we will\n     * access all passwords.\n     */\n    public static CredentialsStorageService getCredService()\n    {\n        if (credService == null)\n        {\n            credService\n                = ServiceUtils.getService(\n                        bundleContext,\n                        CredentialsStorageService.class);\n        }\n        return credService;\n    }\n\n    /**\n     * Returns the <tt>VerifyCertificateDialogService</tt>, through which we\n     * will use to create dialogs.\n     *\n     * @return the <tt>VerifyCertificateDialogService</tt>, through which we\n     * will use to create dialogs.\n     */\n    public static VerifyCertificateDialogService getCertificateDialogService()\n    {\n        if (certificateDialogService == null)\n        {\n            certificateDialogService\n                = ServiceUtils.getService(\n                    bundleContext,\n                    VerifyCertificateDialogService.class);\n        }\n        return certificateDialogService;\n    }\n\n    /**\n     * Returns service to show authentication window.\n     * @return return service to show authentication window.\n     */\n    public static AuthenticationWindowService getAuthenticationWindowService()\n    {\n        return ServiceUtils.getService(\n            bundleContext, AuthenticationWindowService.class);\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/226", "ground_truth": "\n        if (resourcesService == null)\n        {\n            resourcesService\n                = ServiceUtils.getService(\n                        bundleContext,\n                        ResourceManagementService.class);\n        }\n        return resourcesService;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "service", "certificate", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "certificate", "CertificateVerificationActivator.java"], "context_start_lineno": 0, "function_name": "getResources", "left_context": "class CertificateVerificationActivator\n    extends DependentActivator\n{\n    /**\n     * The bundle context for this bundle.\n     */\n    protected static BundleContext bundleContext;\n\n    /**\n     * The configuration service.\n     */\n    private static ConfigurationService configService;\n\n    /**\n     * The service giving access to all resources.\n     */\n    private static ResourceManagementService resourcesService;\n\n    /**\n     * The service to store and access passwords.\n     */\n    private static CredentialsStorageService credService;\n\n    /**\n     * The service to create and show dialogs for user interaction.\n     */\n    private static VerifyCertificateDialogService certificateDialogService;\n\n    public CertificateVerificationActivator()\n    {\n        super(\n            ConfigurationService.class,\n            ResourceManagementService.class,\n            CredentialsStorageService.class\n        );\n    }\n\n    /**\n     * Called when this bundle is started.\n     *\n     * @param bc The execution context of the bundle being started.\n     * @throws Exception if the bundle is not correctly started\n     */\n    @Override\n    public void startWithServices(BundleContext bc) throws Exception\n    {\n        bundleContext = bc;\n\n        bundleContext.registerService(\n            CertificateService.class,\n            new CertificateServiceImpl(),\n            null);\n    }\n\n    /**\n     * Returns the <tt>ConfigurationService</tt> obtained from the bundle\n     * context.\n     * @return the <tt>ConfigurationService</tt> obtained from the bundle\n     * context\n     */\n    public static ConfigurationService getConfigurationService()\n    {\n        if(configService == null)\n        {\n            configService\n                = ServiceUtils.getService(\n                        bundleContext,\n                        ConfigurationService.class);\n        }\n        return configService;\n    }\n\n    /**\n     * Returns the <tt>ResourceManagementService</tt>, through which we will\n     * access all resources.\n     *\n     * @return the <tt>ResourceManagementService</tt>, through which we will\n     * access all resources.\n     */\n    public static ResourceManagementService getResources()\n    {", "right_context": "}\n\n    /**\n     * Returns the <tt>CredentialsStorageService</tt>, through which we will\n     * access all passwords.\n     *\n     * @return the <tt>CredentialsStorageService</tt>, through which we will\n     * access all passwords.\n     */\n    public static CredentialsStorageService getCredService()\n    {\n        if (credService == null)\n        {\n            credService\n                = ServiceUtils.getService(\n                        bundleContext,\n                        CredentialsStorageService.class);\n        }\n        return credService;\n    }\n\n    /**\n     * Returns the <tt>VerifyCertificateDialogService</tt>, through which we\n     * will use to create dialogs.\n     *\n     * @return the <tt>VerifyCertificateDialogService</tt>, through which we\n     * will use to create dialogs.\n     */\n    public static VerifyCertificateDialogService getCertificateDialogService()\n    {\n        if (certificateDialogService == null)\n        {\n            certificateDialogService\n                = ServiceUtils.getService(\n                    bundleContext,\n                    VerifyCertificateDialogService.class);\n        }\n        return certificateDialogService;\n    }\n\n    /**\n     * Returns service to show authentication window.\n     * @return return service to show authentication window.\n     */\n    public static AuthenticationWindowService getAuthenticationWindowService()\n    {\n        return ServiceUtils.getService(\n            bundleContext, AuthenticationWindowService.class);\n    }\n}", "class_name": "CertificateVerificationActivator", "return_type": "ResourceManagementService", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OutgoingMessageStyle\n    extends IncomingMessageStyle\n{\n    /**\n     * The outgoing message background image path.\n     */\n    private final static String OUTGOING_MESSAGE_IMAGE_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_BACKGROUND\").toString();\n\n    /**\n     * The outgoing message right image path.\n     */\n    private final static String OUTGOING_MESSAGE_IMAGE_RIGHT_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_BACKGROUND_RIGHT\")\n                .toString();\n\n    /**\n     * The outgoing message indicator image path.\n     */\n    private final static String OUTGOING_MESSAGE_INDICATOR_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_INDICATOR\").toString();\n\n    /**\n     * The outgoing message round border image path.\n     */\n    private final static String OUTGOING_MESSAGE_CURVES_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_CURVES\").toString();\n\n    /**\n     * The outgoing message top image path.\n     */\n    private final static String OUTGOING_MESSAGE_CURVES_TOP_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_CURVES_TOP\").toString();\n\n    /**\n     * Creates the style of the table bubble (wrapping the message table).\n     *\n     * @return the style of the table bubble\n     */\n    public static String createTableBubbleStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:100%;\"\n                + \" position:relative;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table bubble right element.\n     *\n     * @return the style of the table bubble right element\n     */\n    public static String createTableBubbleMessageRightStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:6px;\"\n                + \" background-image: url('\"\n                    + OUTGOING_MESSAGE_IMAGE_RIGHT_PATH+\"');\"\n                + \" background-repeat: repeat-y;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the message table bubble.\n     *\n     * @return the style of the message table bubble\n     */\n    public static String createTableBubbleMessageStyle()\n    {\n        return \"style=\\\"\"\n                + \"font-size:10px;\"\n                + \" background-image: url('\"+OUTGOING_MESSAGE_IMAGE_PATH+\"');\"\n                + \" background-repeat: repeat-y;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble bottom left corner.\n     *\n     * @return the style of the table buuble bottom left corner\n     */\n    public static String createTableBubbleBlStyle()\n    {\n        return \"style=\\\"\"\n                + \"height:10px;\"\n                + \" background-image: url('\"+OUTGOING_MESSAGE_CURVES_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: 0px -20px;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble bottom right corner.\n     *\n     * @return the style of the table buuble bottom right corner\n     */\n    public static String createTableBubbleBrStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:6px;\"\n                + \" height:10px;\"\n                + \" background-image: url('\"+OUTGOING_MESSAGE_CURVES_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: -2999px -20px;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble top left corner.\n     *\n     * @return the style of the table buuble top left corner\n     */\n    public static String createTableBubbleTlStyle()\n    {\n        return \"style=\\\"\"\n                + \"height:23px;\"\n                + \" background-image: url('\"\n                    +OUTGOING_MESSAGE_CURVES_TOP_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble top right corner.\n     *\n     * @return the style of the table buuble top right corner\n     */\n    public static String createTableBubbleTrStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:6px;\"\n                + \" height:23px;\"\n                + \" background-image: url('\"\n                    +OUTGOING_MESSAGE_CURVES_TOP_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: -2999px 0px;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the indicator pointing to the avatar image.\n     *\n     * @return the style of the indicator pointing to the avatar image\n     */\n    public static String createIndicatorStyle()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Creates the style of the avatar image.\n     *\n     * @return the style of the avatar image\n     */\n    public static String createAvatarStyle()\n    {\n        return \"style=\\\"width:26px;\"\n                + \" height:26px;\"\n                + \" float:right;\\\"\";\n    }\n\n    /**\n     * Creates the style of the date.\n     *\n     * @return the style of the date\n     */\n    public static String createDateStyle()\n    {\n        return \"style =\\\"\"\n            + \"color:#6a6868;\"\n            + \" font-size:10px;\"\n            + \" padding-top:4px;\"\n            + \" text-align:right;\"\n            + \"\\\"\";\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/229", "ground_truth": "\n        return \"style =\\\"\"\n                + \"width:9px;\"\n                + \" height:19px;\"\n                + \" background-image: url('\"\n                +OUTGOING_MESSAGE_INDICATOR_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "gui", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "gui", "main", "chat", "OutgoingMessageStyle.java"], "context_start_lineno": 0, "function_name": "createIndicatorStyle", "left_context": "class OutgoingMessageStyle\n    extends IncomingMessageStyle\n{\n    /**\n     * The outgoing message background image path.\n     */\n    private final static String OUTGOING_MESSAGE_IMAGE_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_BACKGROUND\").toString();\n\n    /**\n     * The outgoing message right image path.\n     */\n    private final static String OUTGOING_MESSAGE_IMAGE_RIGHT_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_BACKGROUND_RIGHT\")\n                .toString();\n\n    /**\n     * The outgoing message indicator image path.\n     */\n    private final static String OUTGOING_MESSAGE_INDICATOR_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_INDICATOR\").toString();\n\n    /**\n     * The outgoing message round border image path.\n     */\n    private final static String OUTGOING_MESSAGE_CURVES_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_CURVES\").toString();\n\n    /**\n     * The outgoing message top image path.\n     */\n    private final static String OUTGOING_MESSAGE_CURVES_TOP_PATH\n        = GuiActivator.getResources().getImageURL(\n            \"service.gui.lookandfeel.OUTGOING_MESSAGE_CURVES_TOP\").toString();\n\n    /**\n     * Creates the style of the table bubble (wrapping the message table).\n     *\n     * @return the style of the table bubble\n     */\n    public static String createTableBubbleStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:100%;\"\n                + \" position:relative;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table bubble right element.\n     *\n     * @return the style of the table bubble right element\n     */\n    public static String createTableBubbleMessageRightStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:6px;\"\n                + \" background-image: url('\"\n                    + OUTGOING_MESSAGE_IMAGE_RIGHT_PATH+\"');\"\n                + \" background-repeat: repeat-y;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the message table bubble.\n     *\n     * @return the style of the message table bubble\n     */\n    public static String createTableBubbleMessageStyle()\n    {\n        return \"style=\\\"\"\n                + \"font-size:10px;\"\n                + \" background-image: url('\"+OUTGOING_MESSAGE_IMAGE_PATH+\"');\"\n                + \" background-repeat: repeat-y;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble bottom left corner.\n     *\n     * @return the style of the table buuble bottom left corner\n     */\n    public static String createTableBubbleBlStyle()\n    {\n        return \"style=\\\"\"\n                + \"height:10px;\"\n                + \" background-image: url('\"+OUTGOING_MESSAGE_CURVES_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: 0px -20px;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble bottom right corner.\n     *\n     * @return the style of the table buuble bottom right corner\n     */\n    public static String createTableBubbleBrStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:6px;\"\n                + \" height:10px;\"\n                + \" background-image: url('\"+OUTGOING_MESSAGE_CURVES_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: -2999px -20px;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble top left corner.\n     *\n     * @return the style of the table buuble top left corner\n     */\n    public static String createTableBubbleTlStyle()\n    {\n        return \"style=\\\"\"\n                + \"height:23px;\"\n                + \" background-image: url('\"\n                    +OUTGOING_MESSAGE_CURVES_TOP_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: top left;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the table buuble top right corner.\n     *\n     * @return the style of the table buuble top right corner\n     */\n    public static String createTableBubbleTrStyle()\n    {\n        return \"style=\\\"\"\n                + \"width:6px;\"\n                + \" height:23px;\"\n                + \" background-image: url('\"\n                    +OUTGOING_MESSAGE_CURVES_TOP_PATH+\"');\"\n                + \" background-repeat: no-repeat;\"\n                + \" background-position: -2999px 0px;\"\n                + \"\\\"\";\n    }\n\n    /**\n     * Creates the style of the indicator pointing to the avatar image.\n     *\n     * @return the style of the indicator pointing to the avatar image\n     */\n    public static String createIndicatorStyle()\n    {", "right_context": "}\n\n    /**\n     * Creates the style of the avatar image.\n     *\n     * @return the style of the avatar image\n     */\n    public static String createAvatarStyle()\n    {\n        return \"style=\\\"width:26px;\"\n                + \" height:26px;\"\n                + \" float:right;\\\"\";\n    }\n\n    /**\n     * Creates the style of the date.\n     *\n     * @return the style of the date\n     */\n    public static String createDateStyle()\n    {\n        return \"style =\\\"\"\n            + \"color:#6a6868;\"\n            + \" font-size:10px;\"\n            + \" padding-top:4px;\"\n            + \" text-align:right;\"\n            + \"\\\"\";\n    }\n}", "class_name": "OutgoingMessageStyle", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/msghistory/src/main/java/net/java/sip/communicator/impl/msghistory/MessageSourceContact.java\n// --------------------------------------------------\n// @Override public byte[] getImage(){\n//   return image;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/muc/src/main/java/net/java/sip/communicator/service/muc/ChatRoomProviderWrapper.java\n// --------------------------------------------------\n// public byte[] getImage();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol-media/src/main/java/net/java/sip/communicator/service/protocol/media/MediaAwareCallPeer.java\n// --------------------------------------------------\n// /** \n//  * The method returns an image representation of the call peer if one is available.\n//  * @return byte[] a byte array containing the image or null if no image isavailable.\n//  */\n// public byte[] getImage(){\n//   return image;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/AccountInfoUtils.java\n// --------------------------------------------------\n// /** \n//  * Returns the image of the account, to which the given accountInfoOpSet belongs.\n//  * @param accountInfoOpSet The account info operation set corresponding tothe searched account.\n//  * @return the image of the account, to which the given accountInfoOpSetbelongs.\n//  */\n// public static byte[] getImage(OperationSetServerStoredAccountInfo accountInfoOpSet){\n//   ImageDetail image=null;\n//   Iterator<GenericDetail> imageDetails=accountInfoOpSet.getDetails(ImageDetail.class);\n//   if (imageDetails.hasNext())   image=(ImageDetail)imageDetails.next();\n//   return (image != null) ? image.getBytes() : null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/CallPeer.java\n// --------------------------------------------------\n// /** \n//  * The method returns an image representation of the call peer (e.g. a photo). Generally, the image representation is acquired from the underlying telephony protocol and is transferred over the network during call negotiation.\n//  * @return byte[] a byte array containing the image or null if no image isavailable.\n//  */\n// public byte[] getImage();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/Contact.java\n// --------------------------------------------------\n// /** \n//  * Returns a byte array containing an image (most often a photo or an avatar) that the contact uses as a representation.\n//  * @return byte[] an image representing the contact.\n//  */\n// public byte[] getImage();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/protocol/src/main/java/net/java/sip/communicator/service/protocol/ServerStoredDetails.java\n// --------------------------------------------------\n// public byte[] getBytes(){\n//   return getDetailValue();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/ui-service/src/main/java/net/java/sip/communicator/service/gui/FavoritesButton.java\n// --------------------------------------------------\n// /** \n//  * Returns the image to be set on the favorites button.\n//  * @return the image to be set on the favorites button.\n//  */\n// public byte[] getImage();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/gui/src/main/java/net/java/sip/communicator/impl/gui/utils/ImageLoaderServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier and return bytes of the image.\n//  * @param imageID The identifier of the image.\n//  * @return The image bytes for the given identifier.\n//  */\n// public byte[] getImageBytes(ImageID imageID){\n//   BufferedImage image=getImage(imageID);\n//   if (image != null)   return ImageUtils.toByteArray(image);\n//  else   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/ui-service/src/main/java/net/java/sip/communicator/service/gui/ImageLoaderService.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier and return bytes of the image.\n//  * @param imageID The identifier of the image.\n//  * @return The image bytes for the given identifier.\n//  */\n// public byte[] getImageBytes(ImageID imageID);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-gibberish/src/main/java/net/java/sip/communicator/impl/protocol/gibberish/GibberishStatusEnum.java\n// --------------------------------------------------\n// /** \n//  * Returns the byte representation of the image corresponding to the given identifier.\n//  * @param imageID the identifier of the image\n//  * @return the byte representation of the image corresponding to the givenidentifier.\n//  */\n// private static byte[] getImageInBytes(String imageID){\n//   InputStream in=GibberishActivator.getResources().getImageInputStream(imageID);\n//   if (in == null)   return null;\n//   byte[] image=null;\n//   try {\n//     image=new byte[in.available()];\n//     in.read(image);\n//   }\n//  catch (  IOException e) {\n//     logger.error(\"Failed to load image:\" + imageID,e);\n//   }\n//   return image;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-gibberish/src/main/java/net/java/sip/communicator/impl/protocol/gibberish/ProtocolIconGibberishImpl.java\n// --------------------------------------------------\n// /** \n//  * Returns the byte representation of the image corresponding to the given identifier.\n//  * @param imageID the identifier of the image\n//  * @return the byte representation of the image corresponding to the givenidentifier.\n//  */\n// private static byte[] getImageInBytes(String imageID){\n//   InputStream in=getResources().getImageInputStream(imageID);\n//   if (in == null)   return null;\n//   byte[] image=null;\n//   try {\n//     image=new byte[in.available()];\n//     in.read(image);\n//   }\n//  catch (  IOException e) {\n//     logger.error(\"Failed to load image:\" + imageID,e);\n//   }\n//   return image;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-irc/src/main/java/net/java/sip/communicator/impl/protocol/irc/IrcStatusEnum.java\n// --------------------------------------------------\n// /** \n//  * Returns the byte representation of the image corresponding to the given identifier.\n//  * @param imageID the identifier of the image\n//  * @return the byte representation of the image corresponding to the givenidentifier.\n//  */\n// private static byte[] getImageInBytes(final String imageID){\n//   return ProtocolIconIrcImpl.getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/accountinfo/src/main/java/net/java/sip/communicator/plugin/accountinfo/Resources.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public static byte[] getImageInBytes(String imageID){\n//   return getResources().getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/connectioninfo/src/main/java/net/java/sip/communicator/plugin/connectioninfo/Resources.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public static byte[] getImageInBytes(String imageID){\n//   return getResources().getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/ldapconfig/src/main/java/net/java/sip/communicator/plugin/ldap/configform/Resources.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public static byte[] getImageInBytes(String imageID){\n//   return LdapActivator.getResourceManagementService().getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/notificationconfiguration/src/main/java/net/java/sip/communicator/plugin/notificationconfiguration/Resources.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public static byte[] getImageInBytes(String imageID){\n//   return getResources().getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/spellcheck/src/main/java/net/java/sip/communicator/plugin/spellcheck/Resources.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public static byte[] getImageInBytes(String imageID){\n//   return getResources().getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/impl/googlecontacts/configform/Resources.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public static byte[] getImageInBytes(String imageID){\n//   return GoogleContactsActivator.getResourceManagementService().getImageInBytes(imageID);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/resourcemanager/src/main/java/net/java/sip/communicator/impl/resources/ResourceManagementServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * Loads an image from a given image identifier.\n//  * @param imageID The identifier of the image.\n//  * @return The image for the given identifier.\n//  */\n// public byte[] getImageInBytes(String imageID){\n//   try (InputStream in=getImageInputStream(imageID)){\n//     if (in == null) {\n//       return null;\n//     }\n//     byte[] image=new byte[in.available()];\n//     in.read(image);\n//     return image;\n//   }\n//  catch (  IOException e) {\n//     logger.error(\"Failed to load image:\" + imageID,e);\n//     return null;\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ProtocolIconIrcImpl\n    implements ProtocolIcon\n{\n    /**\n     * The <tt>Logger</tt> used by the <tt>ProtocolIconIrcImpl</tt> class and\n     * its instances for logging output.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ProtocolIconIrcImpl.class);\n\n    /**\n     * A hash table containing the protocol icon in different sizes.\n     */\n    private static final Map<String, byte[]> ICONS_TABLE = new HashMap<>();\n    static\n    {\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_16x16,\n            getImageInBytes(\"service.protocol.irc.IRC_16x16\"));\n\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_32x32,\n            getImageInBytes(\"service.protocol.irc.IRC_32x32\"));\n\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_48x48,\n            getImageInBytes(\"service.protocol.irc.IRC_48x48\"));\n\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_64x64,\n            getImageInBytes(\"service.protocol.irc.IRC_64x64\"));\n    }\n\n    /**\n     * A hash table containing the path to the protocol icon in different sizes.\n     */\n    private static final Map<String, String> ICONPATHS_TABLE = new HashMap<>();\n    static\n    {\n        ResourceManagementService res = IrcActivator.getResources();\n        if (res == null)\n        {\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_16x16, null);\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_32x32, null);\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_48x48, null);\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_64x64, null);\n        }\n        else\n        {\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_16x16,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_16x16\"));\n\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_32x32,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_32x32\"));\n\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_48x48,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_48x48\"));\n\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_64x64,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_64x64\"));\n        }\n    }\n\n    /**\n     * Implements the <tt>ProtocolIcon.getSupportedSizes()</tt> method. Returns\n     * an iterator to a set containing the supported icon sizes.\n     *\n     * @return an iterator to a set containing the supported icon sizes\n     */\n    public Iterator<String> getSupportedSizes()\n    {\n        return ICONS_TABLE.keySet().iterator();\n    }\n\n    /**\n     * Returns TRUE if a icon with the given size is supported, FALSE-otherwise.\n     *\n     * @param iconSize the icon size; one of ICON_SIZE_XXX constants\n     * @return returns <tt>true</tt> if size is supported or <tt>false</tt> if\n     *         not.\n     */\n    public boolean isSizeSupported(final String iconSize)\n    {\n        return ICONS_TABLE.containsKey(iconSize);\n    }\n\n    /**\n     * Returns the icon image in the given size.\n     *\n     * @param iconSize the icon size; one of ICON_SIZE_XXX constants\n     * @return returns icon image\n     */\n    public byte[] getIcon(final String iconSize)\n    {\n        return ICONS_TABLE.get(iconSize);\n    }\n\n    /**\n     * Returns a path to the icon with the given size.\n     *\n     * @param iconSize the icon size; one of ICON_SIZE_XXX constants\n     * @return the path to the icon with the given size\n     */\n    public String getIconPath(final String iconSize)\n    {\n        return ICONPATHS_TABLE.get(iconSize);\n    }\n\n    /**\n     * Returns the icon image used to represent the protocol connecting state.\n     *\n     * @return the icon image used to represent the protocol connecting state\n     */\n    public byte[] getConnectingIcon()\n    {\n        return getImageInBytes(\"ircConnectingIcon\");\n    }\n\n    /**\n     * Returns the byte representation of the image corresponding to the given\n     * identifier.\n     *\n     * @param imageID the identifier of the image\n     * @return the byte representation of the image corresponding to the given\n     *         identifier.\n     */\n    static byte[] getImageInBytes(final String imageID)\n    {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jitsi_jitsi/240", "ground_truth": "\n        ResourceManagementService res = IrcActivator.getResources();\n        if (res == null)\n        {\n            return null;\n        }\n\n        InputStream in = res.getImageInputStream(imageID);\n        byte[] image = null;\n\n        if (in != null)\n        {\n            try\n            {\n                image = new byte[in.available()];\n\n                in.read(image);\n            }\n            catch (IOException e)\n            {\n                logger.error(\"Failed to load image:\" + imageID, e);\n            }\n        }\n        return image;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "protocol-irc", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "protocol", "irc", "ProtocolIconIrcImpl.java"], "context_start_lineno": 0, "function_name": "getImageInBytes", "left_context": "class ProtocolIconIrcImpl\n    implements ProtocolIcon\n{\n    /**\n     * The <tt>Logger</tt> used by the <tt>ProtocolIconIrcImpl</tt> class and\n     * its instances for logging output.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ProtocolIconIrcImpl.class);\n\n    /**\n     * A hash table containing the protocol icon in different sizes.\n     */\n    private static final Map<String, byte[]> ICONS_TABLE = new HashMap<>();\n    static\n    {\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_16x16,\n            getImageInBytes(\"service.protocol.irc.IRC_16x16\"));\n\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_32x32,\n            getImageInBytes(\"service.protocol.irc.IRC_32x32\"));\n\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_48x48,\n            getImageInBytes(\"service.protocol.irc.IRC_48x48\"));\n\n        ICONS_TABLE.put(ProtocolIcon.ICON_SIZE_64x64,\n            getImageInBytes(\"service.protocol.irc.IRC_64x64\"));\n    }\n\n    /**\n     * A hash table containing the path to the protocol icon in different sizes.\n     */\n    private static final Map<String, String> ICONPATHS_TABLE = new HashMap<>();\n    static\n    {\n        ResourceManagementService res = IrcActivator.getResources();\n        if (res == null)\n        {\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_16x16, null);\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_32x32, null);\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_48x48, null);\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_64x64, null);\n        }\n        else\n        {\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_16x16,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_16x16\"));\n\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_32x32,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_32x32\"));\n\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_48x48,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_48x48\"));\n\n            ICONPATHS_TABLE.put(ProtocolIcon.ICON_SIZE_64x64,\n                res.getImagePath(\n                    \"service.protocol.irc.IRC_64x64\"));\n        }\n    }\n\n    /**\n     * Implements the <tt>ProtocolIcon.getSupportedSizes()</tt> method. Returns\n     * an iterator to a set containing the supported icon sizes.\n     *\n     * @return an iterator to a set containing the supported icon sizes\n     */\n    public Iterator<String> getSupportedSizes()\n    {\n        return ICONS_TABLE.keySet().iterator();\n    }\n\n    /**\n     * Returns TRUE if a icon with the given size is supported, FALSE-otherwise.\n     *\n     * @param iconSize the icon size; one of ICON_SIZE_XXX constants\n     * @return returns <tt>true</tt> if size is supported or <tt>false</tt> if\n     *         not.\n     */\n    public boolean isSizeSupported(final String iconSize)\n    {\n        return ICONS_TABLE.containsKey(iconSize);\n    }\n\n    /**\n     * Returns the icon image in the given size.\n     *\n     * @param iconSize the icon size; one of ICON_SIZE_XXX constants\n     * @return returns icon image\n     */\n    public byte[] getIcon(final String iconSize)\n    {\n        return ICONS_TABLE.get(iconSize);\n    }\n\n    /**\n     * Returns a path to the icon with the given size.\n     *\n     * @param iconSize the icon size; one of ICON_SIZE_XXX constants\n     * @return the path to the icon with the given size\n     */\n    public String getIconPath(final String iconSize)\n    {\n        return ICONPATHS_TABLE.get(iconSize);\n    }\n\n    /**\n     * Returns the icon image used to represent the protocol connecting state.\n     *\n     * @return the icon image used to represent the protocol connecting state\n     */\n    public byte[] getConnectingIcon()\n    {\n        return getImageInBytes(\"ircConnectingIcon\");\n    }\n\n    /**\n     * Returns the byte representation of the image corresponding to the given\n     * identifier.\n     *\n     * @param imageID the identifier of the image\n     * @return the byte representation of the image corresponding to the given\n     *         identifier.\n     */\n    static byte[] getImageInBytes(final String imageID)\n    {", "right_context": "}\n}", "class_name": "ProtocolIconIrcImpl", "return_type": "byte[]", "parameters": [{"type": "String", "name": "imageID"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AWTSystemTray\n    extends SystemTray\n{\n    private final java.awt.SystemTray impl;\n\n    /**\n     * Creates a new instance of this class.\n     */\n    public AWTSystemTray()\n    {\n        impl = java.awt.SystemTray.getSystemTray();\n    }\n\n    @Override\n    public void addTrayIcon(TrayIcon trayIcon)\n        throws IllegalArgumentException\n    {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public TrayIcon createTrayIcon(ImageIcon icon, String tooltip,\n        Object popup)\n    {\n        return new AWTTrayIcon(icon.getImage(), tooltip, popup);\n    }\n\n    @Override\n    public boolean useSwingPopupMenu()\n    {\n        // enable swing for Java 1.6 except for the mac version\n        return !OSUtils.IS_MAC;\n    }\n\n    @Override\n    public boolean supportsDynamicMenu()\n    {\n        return true;\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/297", "ground_truth": "\n        try\n        {\n            impl.add(((AWTTrayIcon) trayIcon).getImpl());\n        }\n        catch (AWTException e)\n        {\n            throw new IllegalArgumentException(e);\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "service", "desktop", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "osdependent", "systemtray", "awt", "AWTSystemTray.java"], "context_start_lineno": 0, "function_name": "addTrayIcon", "left_context": "class AWTSystemTray\n    extends SystemTray\n{\n    private final java.awt.SystemTray impl;\n\n    /**\n     * Creates a new instance of this class.\n     */\n    public AWTSystemTray()\n    {\n        impl = java.awt.SystemTray.getSystemTray();\n    }\n\n    @Override\n    public void addTrayIcon(TrayIcon trayIcon)\n        throws IllegalArgumentException\n    {", "right_context": "}\n\n    @Override\n    public TrayIcon createTrayIcon(ImageIcon icon, String tooltip,\n        Object popup)\n    {\n        return new AWTTrayIcon(icon.getImage(), tooltip, popup);\n    }\n\n    @Override\n    public boolean useSwingPopupMenu()\n    {\n        // enable swing for Java 1.6 except for the mac version\n        return !OSUtils.IS_MAC;\n    }\n\n    @Override\n    public boolean supportsDynamicMenu()\n    {\n        return true;\n    }\n}", "class_name": "AWTSystemTray", "return_type": "void", "parameters": [{"type": "TrayIcon", "name": "trayIcon"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass IdentityType\n{\n    /**\n     * The list of one elements.\n     */\n    private List<OneType> oneList;\n\n    /**\n     * The list of many elements.\n     */\n    private List<ManyType> manyList;\n\n    /**\n     * The list of any elements.\n     */\n    private List<Element> any;\n\n    /**\n     * Gets the value of the oneList property.\n     *\n     * @return the oneList property.\n     */\n    public List<OneType> getOneList()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Gets the value of the manyList property.\n     *\n     * @return the manyList property.\n     */\n    public List<ManyType> getManyList()\n    {\n        if (manyList == null)\n        {\n            manyList = new ArrayList<ManyType>();\n        }\n        return this.manyList;\n    }\n\n    /**\n     * Gets the value of the any property.\n     *\n     * @return the any property.\n     */\n    public List<Element> getAny()\n    {\n        if (any == null)\n        {\n            any = new ArrayList<Element>();\n        }\n        return this.any;\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/322", "ground_truth": "\n        if (oneList == null)\n        {\n            oneList = new ArrayList<OneType>();\n        }\n        return this.oneList;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "protocol-sip", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "protocol", "sip", "xcap", "model", "commonpolicy", "IdentityType.java"], "context_start_lineno": 0, "function_name": "getOneList", "left_context": "class IdentityType\n{\n    /**\n     * The list of one elements.\n     */\n    private List<OneType> oneList;\n\n    /**\n     * The list of many elements.\n     */\n    private List<ManyType> manyList;\n\n    /**\n     * The list of any elements.\n     */\n    private List<Element> any;\n\n    /**\n     * Gets the value of the oneList property.\n     *\n     * @return the oneList property.\n     */\n    public List<OneType> getOneList()\n    {", "right_context": "}\n\n    /**\n     * Gets the value of the manyList property.\n     *\n     * @return the manyList property.\n     */\n    public List<ManyType> getManyList()\n    {\n        if (manyList == null)\n        {\n            manyList = new ArrayList<ManyType>();\n        }\n        return this.manyList;\n    }\n\n    /**\n     * Gets the value of the any property.\n     *\n     * @return the any property.\n     */\n    public List<Element> getAny()\n    {\n        if (any == null)\n        {\n            any = new ArrayList<Element>();\n        }\n        return this.any;\n    }\n}", "class_name": "IdentityType", "return_type": "List<OneType>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/impl/googlecontacts/GoogleContactsEntryImpl.java\n// --------------------------------------------------\n// /** \n//  * Returns telephone numbers.\n//  * @return telephone numbers\n//  */\n// public List<String> getAllPhones(){\n//   List<String> phones=new ArrayList<String>();\n//   for (  String phone : mobilePhones) {\n//     phones.add(phone);\n//   }\n//   for (  String phone : homePhones) {\n//     phones.add(phone);\n//   }\n//   for (  String phone : workPhones) {\n//     phones.add(phone);\n//   }\n//   return phones;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/impl/googlecontacts/GoogleContactsEntryImpl.java\n// --------------------------------------------------\n// /** \n//  * Returns work telephone numbers.\n//  * @return work telephone numbers\n//  */\n// public List<String> getWorkPhones(){\n//   return workPhones;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/impl/googlecontacts/GoogleContactsEntryImpl.java\n// --------------------------------------------------\n// /** \n//  * Returns mobile telephone numbers.\n//  * @return mobile telephone numbers\n//  */\n// public List<String> getMobilePhones(){\n//   return mobilePhones;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/impl/googlecontacts/GoogleContactsEntryImpl.java\n// --------------------------------------------------\n// /** \n//  * Returns home telephone numbers.\n//  * @return home telephone numbers\n//  */\n// public List<String> getHomePhones(){\n//   return homePhones;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/service/googlecontacts/GoogleContactsEntry.java\n// --------------------------------------------------\n// /** \n//  * Returns telephone numbers.\n//  * @return telephone numbers\n//  */\n// public List<String> getAllPhones();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/service/googlecontacts/GoogleContactsEntry.java\n// --------------------------------------------------\n// /** \n//  * Returns work telephone numbers.\n//  * @return work telephone numbers\n//  */\n// public List<String> getWorkPhones();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/service/googlecontacts/GoogleContactsEntry.java\n// --------------------------------------------------\n// /** \n//  * Returns mobile telephone numbers.\n//  * @return mobile telephone numbers\n//  */\n// public List<String> getMobilePhones();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/googlecontacts/src/main/java/net/java/sip/communicator/service/googlecontacts/GoogleContactsEntry.java\n// --------------------------------------------------\n// /** \n//  * Returns home telephone numbers.\n//  * @return home telephone numbers\n//  */\n// public List<String> getHomePhones();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/metahistory/src/test/java/TestMetaHistoryService.java\n// --------------------------------------------------\n// private List<String> getMessages(Collection<Object> rs){\n//   List<String> result=new Vector<String>();\n//   for (  Object item : rs) {\n//     if (item instanceof MessageDeliveredEvent)     result.add(((MessageDeliveredEvent)item).getSourceMessage().getContent());\n//  else     if (item instanceof MessageReceivedEvent)     result.add(((MessageReceivedEvent)item).getSourceMessage().getContent());\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/msghistory/src/test/java/TestMsgHistoryService.java\n// --------------------------------------------------\n// private List<String> getMessages(Collection<EventObject> rs){\n//   List<String> result=new Vector<String>();\n//   for (  EventObject item : rs) {\n//     if (item instanceof MessageDeliveredEvent)     result.add(((MessageDeliveredEvent)item).getSourceMessage().getContent());\n//  else     if (item instanceof MessageReceivedEvent)     result.add(((MessageReceivedEvent)item).getSourceMessage().getContent());\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/msghistory/src/test/java/TestMsgHistoryServiceMultiChat.java\n// --------------------------------------------------\n// private List<String> getMessages(Collection<EventObject> rs){\n//   List<String> result=new Vector<String>();\n//   for (  EventObject item : rs) {\n//     if (item instanceof MessageDeliveredEvent)     result.add(((MessageDeliveredEvent)item).getSourceMessage().getContent());\n//  else     if (item instanceof MessageReceivedEvent)     result.add(((MessageReceivedEvent)item).getSourceMessage().getContent());\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/netaddr/src/main/java/net/java/sip/communicator/impl/netaddr/BsdLocalhostRetriever.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"sin_len\",\"sin_family\",\"sin_port\",\"sin_addr\",\"sin_zero\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/netaddr/src/main/java/net/java/sip/communicator/impl/netaddr/BsdLocalhostRetriever.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"sin6_len\",\"sin6_family\",\"sin6_port\",\"sin6_flowinfo\",\"sin6_addr\",\"sin6_scope_id\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/contactlist/src/main/java/net/java/sip/communicator/impl/contactlist/MetaContactImpl.java\n// --------------------------------------------------\n// /** \n//  * Gets all details with a given name.\n//  * @param name the name of the details we are searching for\n//  * @return a <tt>List</tt> of <tt>String</tt>s which represent the detailswith the specified <tt>name</tt>\n//  */\n// public List<String> getDetails(String name){\n//   List<String> values=(details == null) ? null : details.get(name);\n//   if (values == null)   values=new ArrayList<String>();\n//  else   values=new ArrayList<String>(values);\n//   return values;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-irc/src/main/java/net/java/sip/communicator/impl/protocol/irc/ServerChannelLister.java\n// --------------------------------------------------\n// /** \n//  * Get a list of channels available on the IRC server.\n//  * @return List of available channels.\n//  */\n// public List<String> getList(){\n//   logger.trace(\"Start retrieve server chat room list.\");\n//   if (!connectionState.isConnected()) {\n//     throw new IllegalStateException(\"Not connected to an IRC server.\");\n//   }\n// synchronized (this.channellist) {\n//     List<String> list=this.channellist.get(CHAT_ROOM_LIST_CACHE_EXPIRATION);\n//     if (list == null) {\n//       logger.trace(\"Chat room list null or outdated. Start retrieving \" + \"new chat room list.\");\n//       Result<List<String>,Exception> listSignal=new Result<List<String>,Exception>(new LinkedList<String>());\n// synchronized (listSignal) {\n//         try {\n//           this.irc.addListener(new ChannelListListener(listSignal));\n//           this.irc.rawMessage(\"LIST\");\n//           while (!listSignal.isDone()) {\n//             logger.trace(\"Waiting for list ...\");\n//             listSignal.wait();\n//           }\n//           logger.trace(\"Done waiting for list.\");\n//         }\n//  catch (        InterruptedException e) {\n//           logger.warn(\"INTERRUPTED while waiting for list.\",e);\n//         }\n//       }\n//       list=listSignal.getValue();\n//       this.channellist.set(list);\n//       logger.trace(\"Finished retrieving server chat room list.\");\n//       createCleanUpJob(this.channellist);\n//     }\n//  else {\n//       logger.trace(\"Using cached list of server chat rooms.\");\n//     }\n//     if (logger.isDebugEnabled()) {\n//       logger.debug(\"Server channel list contains \" + list.size() + \" channels.\");\n//     }\n//     return Collections.unmodifiableList(list);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/protocol-jabber/src/main/java/net/java/sip/communicator/impl/protocol/jabber/ScServiceDiscoveryManager.java\n// --------------------------------------------------\n// /** \n//  * Returns a reference to our local copy of the feature list supported by this implementation.\n//  * @return a reference to our local copy of the feature list supported bythis implementation.\n//  */\n// public List<String> getFeatures(){\n//   return discoveryManager.getFeatures();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/addrbook/src/main/java/net/java/sip/communicator/plugin/addrbook/macosx/MacOSXAddrBookSourceContact.java\n// --------------------------------------------------\n// /** \n//  * Returns the list of values that will be saved.\n//  * @param detail the current modified detail\n//  * @param property the property we change\n//  * @param subProperty the subproperty that is changed\n//  * @param addDetail should we add <tt>detail</tt> to the list of values.\n//  * @return the list of values to be saved.\n//  */\n// private List<String> getValues(ContactDetail detail,int property,String subProperty,boolean addDetail){\n//   List<String> values=new ArrayList<String>();\n//   List<ContactDetail> details=getContactDetails(detail.getCategory());\n//   boolean isIM=(property == MacOSXAddrBookContactQuery.kABICQInstantProperty || property == MacOSXAddrBookContactQuery.kABAIMInstantProperty || property == MacOSXAddrBookContactQuery.kABYahooInstantProperty || property == MacOSXAddrBookContactQuery.kABMSNInstantProperty || property == MacOSXAddrBookContactQuery.kABJabberInstantProperty);\n//   boolean isAddress=property == MacOSXAddrBookContactQuery.kABAddressProperty;\n//   boolean isHomeAddress=detail.containsSubCategory(SubCategory.Home);\n//   int lastHomeIndex=0;\n//   int lastWorkIndex=0;\n//   for (  ContactDetail cd : details) {\n//     if (cd.equals(detail))     continue;\n//     String det=cd.getDetail();\n//     for (    SubCategory sub : cd.getSubCategories()) {\n//       if (isIM && !detail.getSubCategories().contains(sub))       continue;\n//       String label=MacOSXAddrBookContactQuery.getLabel(property,sub,subProperty);\n//       if (label != null) {\n//         values.add(det);\n//         values.add(label);\n//         if (isAddress && cd instanceof MacOSXAddrBookContactDetail) {\n//           String subPropertyLabel=((MacOSXAddrBookContactDetail)cd).getSubPropertyLabel();\n//           values.add(subPropertyLabel);\n//           if (subPropertyLabel.equals(MacOSXAddrBookContactQuery.kABAddressHomeLabel())) {\n//             lastHomeIndex=values.size();\n//           }\n//  else           if (subPropertyLabel.equals(MacOSXAddrBookContactQuery.kABAddressWorkLabel())) {\n//             lastWorkIndex=values.size();\n//           }\n//         }\n//       }\n//     }\n//   }\n//   if (addDetail) {\n//     for (    SubCategory sub : detail.getSubCategories()) {\n//       String label=MacOSXAddrBookContactQuery.getLabel(property,sub,subProperty);\n//       if (label != null) {\n//         if (isAddress) {\n//           String subPropertyLabel=\"\";\n//           int index=values.size();\n//           if (isHomeAddress) {\n//             subPropertyLabel=MacOSXAddrBookContactQuery.kABAddressHomeLabel();\n//             index=lastHomeIndex;\n//             if (lastWorkIndex > lastHomeIndex) {\n//               lastWorkIndex+=3;\n//             }\n//             lastHomeIndex+=3;\n//           }\n//  else {\n//             subPropertyLabel=MacOSXAddrBookContactQuery.kABAddressWorkLabel();\n//             index=lastWorkIndex;\n//             if (lastHomeIndex > lastWorkIndex) {\n//               lastHomeIndex+=3;\n//             }\n//             lastWorkIndex+=3;\n//           }\n//           values.add(index,detail.getDetail());\n//           values.add(index + 1,label);\n//           values.add(index + 2,subPropertyLabel);\n//         }\n//  else {\n//           values.add(detail.getDetail());\n//           values.add(label);\n//         }\n//       }\n//  else       logger.warn(\"Missing label fo prop:\" + property + \" and sub:\"+ sub);\n//     }\n//   }\n//   return values;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/MetaContactPhoneUtil.java\n// --------------------------------------------------\n// /** \n//  * Returns localized addition phones list for contact, if any. Return null if we have stopped searching and a listener is available and will be used to inform for results.\n//  * @param contact the contact\n//  * @return localized addition phones list for contact, if any.\n//  */\n// public List<String> getPhones(Contact contact){\n//   return getPhones(contact,null,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/MetaContactPhoneUtil.java\n// --------------------------------------------------\n// /** \n//  * List of phones for contact, localized if <tt>localized</tt> is <tt>true</tt>, and not otherwise. Return null if we have stopped searching and a listener is available and will be used to inform for results.\n//  * @param contact the contact to check for video phones.\n//  * @param listener the <tt>DetailsResponseListener</tt> to listen for resultdetails\n//  * @param localized whether to localize the phones, put a description text.\n//  * @return list of phones for contact.\n//  */\n// public List<String> getPhones(Contact contact,DetailsResponseListener listener,boolean localized){\n//   if (!this.metaContact.containsContact(contact)) {\n//     return new ArrayList<String>();\n//   }\n//   if (phones.containsKey(contact)) {\n//     return phones.get(contact);\n//   }\n//   List<String> phonesList=ContactPhoneUtil.getContactAdditionalPhones(contact,listener,false,localized);\n//   if (phonesList == null)   return null;\n//  else   if (phonesList.size() > 0)   hasPhones=true;\n//   phones.put(contact,phonesList);\n//   return phonesList;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/service/contactlist/src/main/java/net/java/sip/communicator/service/contactlist/MetaContact.java\n// --------------------------------------------------\n// /** \n//  * Get all details with given name.\n//  * @param name the name of the details we are searching.\n//  * @return list of string values for the details with the given name.\n//  */\n// public List<String> getDetails(String name);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ExistsType\n    {\n        /**\n         * The list of alt-value elements.\n         */\n        protected List<String> altValue;\n\n        /**\n         * The field attribute.\n         */\n        protected String field;\n\n        /**\n         * Gets the altValue attribute.\n         *\n         * @return the altValue property.\n         */\n        public List<String> getAltValue()\n        {<FILL_FUNCTION_BODY>}\n\n        /**\n         * Gets the field attribute.\n         *\n         * @return the field property.\n         */\n        public String getField()\n        {\n            return field;\n        }\n\n        /**\n         * Sets the value of the field property.\n         *\n         * @param field the field to set.\n         */\n        public void setField(String field)\n        {\n            this.field = field;\n        }\n    }", "metadata": {"task_id": "jitsi_jitsi/328", "ground_truth": "\n            if (altValue == null)\n            {\n                altValue = new ArrayList<String>();\n            }\n            return this.altValue;\n        ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "protocol-sip", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "protocol", "sip", "xcap", "model", "xcaperror", "UniquenessFailureType.java"], "context_start_lineno": 0, "function_name": "getAltValue", "left_context": "class ExistsType\n    {\n        /**\n         * The list of alt-value elements.\n         */\n        protected List<String> altValue;\n\n        /**\n         * The field attribute.\n         */\n        protected String field;\n\n        /**\n         * Gets the altValue attribute.\n         *\n         * @return the altValue property.\n         */\n        public List<String> getAltValue()\n        {", "right_context": "}\n\n        /**\n         * Gets the field attribute.\n         *\n         * @return the field property.\n         */\n        public String getField()\n        {\n            return field;\n        }\n\n        /**\n         * Sets the value of the field property.\n         *\n         * @param field the field to set.\n         */\n        public void setField(String field)\n        {\n            this.field = field;\n        }\n    }", "class_name": "ExistsType", "return_type": "List<String>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HTMLParserCallback\n        extends HTMLEditorKit.ParserCallback\n    {\n        /**\n         * The <tt>StringBuilder</tt> which accumulates the parsed text while it\n         * is being parsed.\n         */\n        private StringBuilder sb;\n\n        /**\n         * Parses the text contained in the given reader.\n         *\n         * @param in the reader to parse.\n         * @return the parsed text\n         * @throws IOException thrown if we fail to parse the reader.\n         */\n        public String parse(Reader in)\n            throws IOException\n        {<FILL_FUNCTION_BODY>}\n\n        /**\n         * Appends the given text to the string buffer.\n         *\n         * @param text the text of a text node which has been parsed from the\n         * specified HTML\n         * @param pos the zero-based position of the specified <tt>text</tt> in\n         * the specified HTML\n         */\n        @Override\n        public void handleText(char[] text, int pos)\n        {\n            sb.append(text);\n        }\n    }", "metadata": {"task_id": "jitsi_jitsi/330", "ground_truth": "\n            sb = new StringBuilder();\n\n            String s;\n\n            try\n            {\n                new ParserDelegator().parse(in, this, /* ignoreCharSet */ true);\n                s = sb.toString();\n            }\n            finally\n            {\n                /*\n                 * Since the Html2Text class keeps this instance in a static\n                 * reference, the field sb should be reset to null as soon as\n                 * completing its goad in order to avoid keeping the parsed\n                 * text in memory after it is no longer needed i.e. to prevent\n                 * a memory leak. This method has been converted to return the\n                 * parsed string instead of having a separate getter method for\n                 * the parsed string for the same purpose.\n                 */\n                sb = null;\n            }\n            return s;\n        ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "util", "src", "main", "java", "net", "java", "sip", "communicator", "util", "Html2Text.java"], "context_start_lineno": 0, "function_name": "parse", "left_context": "class HTMLParserCallback\n        extends HTMLEditorKit.ParserCallback\n    {\n        /**\n         * The <tt>StringBuilder</tt> which accumulates the parsed text while it\n         * is being parsed.\n         */\n        private StringBuilder sb;\n\n        /**\n         * Parses the text contained in the given reader.\n         *\n         * @param in the reader to parse.\n         * @return the parsed text\n         * @throws IOException thrown if we fail to parse the reader.\n         */\n        public String parse(Reader in)\n            throws IOException\n        {", "right_context": "}\n\n        /**\n         * Appends the given text to the string buffer.\n         *\n         * @param text the text of a text node which has been parsed from the\n         * specified HTML\n         * @param pos the zero-based position of the specified <tt>text</tt> in\n         * the specified HTML\n         */\n        @Override\n        public void handleText(char[] text, int pos)\n        {\n            sb.append(text);\n        }\n    }", "class_name": "HTMLParserCallback", "return_type": "String", "parameters": [{"type": "Reader", "name": "in"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JoinChatRoomDialog\n    extends SIPCommDialog\n    implements  ActionListener,\n                Skinnable\n{\n    private SearchChatRoomPanel searchPanel;\n\n    private JButton joinButton = new JButton(\n        GuiActivator.getResources().getI18NString(\"service.gui.JOIN\"));\n\n    private JButton cancelButton = new JButton(\n        GuiActivator.getResources().getI18NString(\"service.gui.CANCEL\"));\n\n    private JLabel iconLabel = new JLabel(new ImageIcon(ImageLoader\n        .getImage(ImageLoader.ADD_CONTACT_CHAT_ICON)));\n\n    private JPanel buttonsPanel =\n        new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));\n\n    private ChatRoomProviderWrapper chatRoomProvider;\n\n    /**\n     * Creates an instance of <tt>JoinChatRoomDialog</tt>.\n     *\n     * @param provider the <tt>ChatRoomProviderWrapper</tt>, which will be the chat\n     * server for the newly created chat room\n     */\n    public JoinChatRoomDialog(ChatRoomProviderWrapper provider)\n    {\n        this.chatRoomProvider = provider;\n\n        this.searchPanel = new SearchChatRoomPanel(chatRoomProvider);\n\n        this.setTitle(\n            GuiActivator.getResources()\n                .getI18NString(\"service.gui.JOIN_CHAT_ROOM\"));\n\n        this.getRootPane().setDefaultButton(joinButton);\n        this.joinButton.setName(\"join\");\n        this.cancelButton.setName(\"cancel\");\n\n        this.joinButton.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.JOIN\"));\n\n        this.cancelButton.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.CANCEL\"));\n\n        this.iconLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 10));\n\n        this.joinButton.addActionListener(this);\n        this.cancelButton.addActionListener(this);\n\n        this.buttonsPanel.add(joinButton);\n        this.buttonsPanel.add(cancelButton);\n\n        this.getContentPane().add(iconLabel, BorderLayout.WEST);\n        this.getContentPane().add(searchPanel, BorderLayout.CENTER);\n        this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);\n    }\n\n    /**\n     * Handles the <tt>ActionEvent</tt>. Depending on the user choice creates\n     * the desired chat room in a separate thread.\n     * <br>\n     * Note: No specific properties are set right now!\n     *\n     * @param e the <tt>ActionEvent</tt> that notified us\n     */\n    public void actionPerformed(ActionEvent e)\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * When escape is pressed clicks the cancel button programatically.\n     *\n     * @param escaped indicates if the window was closed by pressing the Esc\n     * key\n     */\n    @Override\n    protected void close(boolean escaped)\n    {\n        this.cancelButton.doClick();\n    }\n\n    /**\n     * Shows this dialog. And requests the current focus in the chat room name\n     * field.\n     */\n    public void showDialog()\n    {\n        this.setVisible(true);\n\n        searchPanel.requestFocusInField();\n    }\n\n    /**\n     * Reloads icon label.\n     */\n    public void loadSkin()\n    {\n        iconLabel.setIcon(new ImageIcon(ImageLoader\n        .getImage(ImageLoader.ADD_CONTACT_CHAT_ICON)));\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/353", "ground_truth": "\n        JButton button = (JButton)e.getSource();\n        String name = button.getName();\n\n        if (name.equals(\"service.gui.JOIN\"))\n        {\n            GuiActivator.getMUCService().joinChatRoom(\n                searchPanel.getChatRoomName(), chatRoomProvider);\n        }\n        this.dispose();\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "gui", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "gui", "main", "chatroomslist", "joinforms", "JoinChatRoomDialog.java"], "context_start_lineno": 0, "function_name": "actionPerformed", "left_context": "class JoinChatRoomDialog\n    extends SIPCommDialog\n    implements  ActionListener,\n                Skinnable\n{\n    private SearchChatRoomPanel searchPanel;\n\n    private JButton joinButton = new JButton(\n        GuiActivator.getResources().getI18NString(\"service.gui.JOIN\"));\n\n    private JButton cancelButton = new JButton(\n        GuiActivator.getResources().getI18NString(\"service.gui.CANCEL\"));\n\n    private JLabel iconLabel = new JLabel(new ImageIcon(ImageLoader\n        .getImage(ImageLoader.ADD_CONTACT_CHAT_ICON)));\n\n    private JPanel buttonsPanel =\n        new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));\n\n    private ChatRoomProviderWrapper chatRoomProvider;\n\n    /**\n     * Creates an instance of <tt>JoinChatRoomDialog</tt>.\n     *\n     * @param provider the <tt>ChatRoomProviderWrapper</tt>, which will be the chat\n     * server for the newly created chat room\n     */\n    public JoinChatRoomDialog(ChatRoomProviderWrapper provider)\n    {\n        this.chatRoomProvider = provider;\n\n        this.searchPanel = new SearchChatRoomPanel(chatRoomProvider);\n\n        this.setTitle(\n            GuiActivator.getResources()\n                .getI18NString(\"service.gui.JOIN_CHAT_ROOM\"));\n\n        this.getRootPane().setDefaultButton(joinButton);\n        this.joinButton.setName(\"join\");\n        this.cancelButton.setName(\"cancel\");\n\n        this.joinButton.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.JOIN\"));\n\n        this.cancelButton.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.CANCEL\"));\n\n        this.iconLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 10));\n\n        this.joinButton.addActionListener(this);\n        this.cancelButton.addActionListener(this);\n\n        this.buttonsPanel.add(joinButton);\n        this.buttonsPanel.add(cancelButton);\n\n        this.getContentPane().add(iconLabel, BorderLayout.WEST);\n        this.getContentPane().add(searchPanel, BorderLayout.CENTER);\n        this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);\n    }\n\n    /**\n     * Handles the <tt>ActionEvent</tt>. Depending on the user choice creates\n     * the desired chat room in a separate thread.\n     * <br>\n     * Note: No specific properties are set right now!\n     *\n     * @param e the <tt>ActionEvent</tt> that notified us\n     */\n    public void actionPerformed(ActionEvent e)\n    {", "right_context": "}\n\n    /**\n     * When escape is pressed clicks the cancel button programatically.\n     *\n     * @param escaped indicates if the window was closed by pressing the Esc\n     * key\n     */\n    @Override\n    protected void close(boolean escaped)\n    {\n        this.cancelButton.doClick();\n    }\n\n    /**\n     * Shows this dialog. And requests the current focus in the chat room name\n     * field.\n     */\n    public void showDialog()\n    {\n        this.setVisible(true);\n\n        searchPanel.requestFocusInField();\n    }\n\n    /**\n     * Reloads icon label.\n     */\n    public void loadSkin()\n    {\n        iconLabel.setIcon(new ImageIcon(ImageLoader\n        .getImage(ImageLoader.ADD_CONTACT_CHAT_ICON)));\n    }\n}", "class_name": "JoinChatRoomDialog", "return_type": "void", "parameters": [{"type": "ActionEvent", "name": "e"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MessengerContact\n{\n    /**\n     * The <tt>Logger</tt> used by the <tt>MessengerContact</tt> class and its\n     * instances for logging output.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(MessengerContact.class);\n\n    /**\n     * The sign-in name associated with the native <tt>IMessengerContact</tt>\n     * implementation represented by this instance.\n     */\n    public final String signinName;\n\n    /**\n     * Initializes a new <tt>MessengerContact</tt> instance which is to\n     * represent the Java counterpart of a native <tt>IMessengerContact</tt>\n     * implementation associated with a specific sign-in name.\n     *\n     * @param signinName the sign-in name associated with the native\n     * <tt>IMessengerContact</tt> implementation which is to be represented by\n     * the new instance\n     */\n    public MessengerContact(String signinName)\n    {\n        this.signinName = signinName;\n    }\n\n    /**\n     * Gets the phone number information of the contact associated with this\n     * instance.\n     *\n     * @param a member of the <tt>MPHONE_TYPE</tt> enumerated type which\n     * specifies the type of the phone number information to be retrieved\n     * @return the phone number information of the contact associated with this\n     * instance\n     */\n    public String getPhoneNumber(int type)\n    {\n        try\n        {\n            return Messenger.getPhoneNumber(this, type);\n        }\n        catch (Throwable t)\n        {\n            /*\n             * The native counterpart will swallow any exception. Even if it\n             * didn't, it would still not use a Logger instance to describe the\n             * exception. So describe it on the Java side and rethrow it.\n             */\n            if (t instanceof ThreadDeath)\n                throw (ThreadDeath) t;\n            else if (t instanceof OutOfMemoryError)\n                throw (OutOfMemoryError) t;\n            else\n            {\n                logger.error(\n                        \"Failed to retrieve the phone number information of an\"\n                            + \" IMessengerContact with sign-in name: \"\n                            + signinName,\n                        t);\n                throw new RuntimeException(t);\n            }\n        }\n    }\n\n    /**\n     * Gets the connection/presence status of the contact associated with this\n     * instance in the form of a <tt>MISTATUS</tt> value.\n     *\n     * @return a <tt>MISTATUS</tt> value which specifies the connection/presence\n     * status of the contact associated with this instance\n     */\n    public int getStatus()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Gets the indicator which determines whether this\n     * <tt>MessengerContact</tt> is the same user as the current client user.\n     *\n     * @return <tt>true</tt> if this <tt>MessengerContact</tt> is the same user\n     * as the current client user; otherwise, <tt>false</tt>\n     */\n    public boolean isSelf()\n    {\n        return Messenger.isSelf(this);\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/366", "ground_truth": "\n        try\n        {\n            return Messenger.getStatus(this);\n        }\n        catch (Throwable t)\n        {\n            /*\n             * The native counterpart will swallow any exception. Even if it\n             * didn't, it would still not use a Logger instance to describe the\n             * exception. So describe it on the Java side and rethrow it.\n             */\n            if (t instanceof ThreadDeath)\n                throw (ThreadDeath) t;\n            else if (t instanceof OutOfMemoryError)\n                throw (OutOfMemoryError) t;\n            else\n            {\n                logger.error(\n                        \"Failed to determine the status of an IMessengerContact\"\n                            + \" with sign-in name: \"\n                            + signinName,\n                        t);\n                throw new RuntimeException(t);\n            }\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "msofficecomm", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "msofficecomm", "MessengerContact.java"], "context_start_lineno": 0, "function_name": "getStatus", "left_context": "class MessengerContact\n{\n    /**\n     * The <tt>Logger</tt> used by the <tt>MessengerContact</tt> class and its\n     * instances for logging output.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(MessengerContact.class);\n\n    /**\n     * The sign-in name associated with the native <tt>IMessengerContact</tt>\n     * implementation represented by this instance.\n     */\n    public final String signinName;\n\n    /**\n     * Initializes a new <tt>MessengerContact</tt> instance which is to\n     * represent the Java counterpart of a native <tt>IMessengerContact</tt>\n     * implementation associated with a specific sign-in name.\n     *\n     * @param signinName the sign-in name associated with the native\n     * <tt>IMessengerContact</tt> implementation which is to be represented by\n     * the new instance\n     */\n    public MessengerContact(String signinName)\n    {\n        this.signinName = signinName;\n    }\n\n    /**\n     * Gets the phone number information of the contact associated with this\n     * instance.\n     *\n     * @param a member of the <tt>MPHONE_TYPE</tt> enumerated type which\n     * specifies the type of the phone number information to be retrieved\n     * @return the phone number information of the contact associated with this\n     * instance\n     */\n    public String getPhoneNumber(int type)\n    {\n        try\n        {\n            return Messenger.getPhoneNumber(this, type);\n        }\n        catch (Throwable t)\n        {\n            /*\n             * The native counterpart will swallow any exception. Even if it\n             * didn't, it would still not use a Logger instance to describe the\n             * exception. So describe it on the Java side and rethrow it.\n             */\n            if (t instanceof ThreadDeath)\n                throw (ThreadDeath) t;\n            else if (t instanceof OutOfMemoryError)\n                throw (OutOfMemoryError) t;\n            else\n            {\n                logger.error(\n                        \"Failed to retrieve the phone number information of an\"\n                            + \" IMessengerContact with sign-in name: \"\n                            + signinName,\n                        t);\n                throw new RuntimeException(t);\n            }\n        }\n    }\n\n    /**\n     * Gets the connection/presence status of the contact associated with this\n     * instance in the form of a <tt>MISTATUS</tt> value.\n     *\n     * @return a <tt>MISTATUS</tt> value which specifies the connection/presence\n     * status of the contact associated with this instance\n     */\n    public int getStatus()\n    {", "right_context": "}\n\n    /**\n     * Gets the indicator which determines whether this\n     * <tt>MessengerContact</tt> is the same user as the current client user.\n     *\n     * @return <tt>true</tt> if this <tt>MessengerContact</tt> is the same user\n     * as the current client user; otherwise, <tt>false</tt>\n     */\n    public boolean isSelf()\n    {\n        return Messenger.isSelf(this);\n    }\n}", "class_name": "MessengerContact", "return_type": "int", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OtrConfigurator\n{\n    /**\n     * Gets an XML tag friendly {@link String} from a {@link String}.\n     *\n     * @param s a {@link String}\n     * @return an XML friendly {@link String}\n     */\n    private String getXmlFriendlyString(String s)\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Puts a given property ID under the OTR namespace and makes sure it is XML\n     * tag friendly.\n     *\n     * @param id the property ID.\n     * @return the namespaced ID.\n     */\n    private String getID(String id)\n    {\n        return\n            \"net.java.sip.communicator.plugin.otr.\" + getXmlFriendlyString(id);\n    }\n\n    /**\n     * Returns the value of the property with the specified name or null if no\n     * such property exists ({@link ConfigurationService#getProperty(String)}\n     * proxy).\n     *\n     * @param id of the property that is being queried.\n     * @return the <tt>byte[]</tt> value of the property with the specified\n     *         name.\n     */\n    public byte[] getPropertyBytes(String id)\n    {\n        String value = OtrActivator.configService.getString(getID(id));\n\n        return value == null\n            ? null\n            : Base64.getDecoder().decode(value.getBytes());\n    }\n\n    /**\n     * Gets the value of a specific property as a boolean (\n     * {@link ConfigurationService#getBoolean(String, boolean)} proxy).\n     *\n     * @param id of the property that is being queried.\n     * @param defaultValue the value to be returned if the specified property\n     *            name is not associated with a value.\n     * @return the <tt>Boolean</tt> value of the property with the specified\n     *         name.\n     */\n    public boolean getPropertyBoolean(String id, boolean defaultValue)\n    {\n        return\n            OtrActivator.configService.getBoolean(getID(id), defaultValue);\n    }\n\n    /**\n     * Sets the property with the specified name to the specified value (\n     * {@link ConfigurationService#setProperty(String, Object)} proxy). The\n     * value is Base64 encoded.\n     *\n     * @param id the name of the property to change.\n     * @param value the new value of the specified property.\n     */\n    public void setProperty(String id, byte[] value)\n    {\n        String valueToStore = Base64.getEncoder().encodeToString(value);\n\n        OtrActivator.configService.setProperty(getID(id), valueToStore);\n    }\n\n    /**\n     * Sets the property with the specified name to the specified value (\n     * {@link ConfigurationService#setProperty(String, Object)} proxy).\n     *\n     * @param id the name of the property to change.\n     * @param value the new value of the specified property.\n     */\n    public void setProperty(String id, Object value)\n    {\n        OtrActivator.configService.setProperty(getID(id), value);\n    }\n\n    /**\n     * Removes the property with the specified name (\n     * {@link ConfigurationService#removeProperty(String)} proxy).\n     *\n     * @param id the name of the property to change.\n     */\n    public void removeProperty(String id)\n    {\n        OtrActivator.configService.removeProperty(getID(id));\n    }\n\n    /**\n     * Gets the value of a specific property as a signed decimal integer.\n     *\n     * @param id the name of the property to change.\n     * @param defaultValue the value to be returned if the specified property\n     *            name is not associated with a value.\n     * @return the <tt>int</tt> value of the property\n     */\n    public int getPropertyInt(String id, int defaultValue)\n    {\n        return OtrActivator.configService.getInt(getID(id), defaultValue);\n    }\n\n    /**\n     * Appends <tt>value</tt> to the old value of the property with the\n     * specified name. The two values will be comma separated.\n     * \n     * @param id the name of the property to append to\n     * @param value the value to append\n     */\n    public void appendProperty(String id, Object value)\n    {\n        Object oldValue = OtrActivator.configService.getProperty(getID(id));\n\n        String newValue =\n            oldValue == null ? value.toString() : oldValue + \",\" + value;\n\n        setProperty(id, newValue);\n    }\n\n    public List<String> getAppendedProperties(String id)\n    {\n        String listProperties =\n           (String) OtrActivator.configService.getProperty(getID(id));\n\n        if (listProperties == null) return new ArrayList<String>();\n\n        return Arrays.asList(listProperties.split(\",\"));\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/367", "ground_truth": "\n        if (s == null || s.length() < 1)\n            return s;\n\n        // XML Tags are not allowed to start with digits,\n        // insert a dummy \"p\" char.\n        if (Character.isDigit(s.charAt(0)))\n            s = \"p\" + s;\n\n        char[] cId = new char[s.length()];\n\n        for (int i = 0; i < cId.length; i++)\n        {\n            char c = s.charAt(i);\n\n            cId[i] = Character.isLetterOrDigit(c) ? c : '_';\n        }\n\n        return new String(cId);\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "otr", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "otr", "OtrConfigurator.java"], "context_start_lineno": 0, "function_name": "getXmlFriendlyString", "left_context": "class OtrConfigurator\n{\n    /**\n     * Gets an XML tag friendly {@link String} from a {@link String}.\n     *\n     * @param s a {@link String}\n     * @return an XML friendly {@link String}\n     */\n    private String getXmlFriendlyString(String s)\n    {", "right_context": "}\n\n    /**\n     * Puts a given property ID under the OTR namespace and makes sure it is XML\n     * tag friendly.\n     *\n     * @param id the property ID.\n     * @return the namespaced ID.\n     */\n    private String getID(String id)\n    {\n        return\n            \"net.java.sip.communicator.plugin.otr.\" + getXmlFriendlyString(id);\n    }\n\n    /**\n     * Returns the value of the property with the specified name or null if no\n     * such property exists ({@link ConfigurationService#getProperty(String)}\n     * proxy).\n     *\n     * @param id of the property that is being queried.\n     * @return the <tt>byte[]</tt> value of the property with the specified\n     *         name.\n     */\n    public byte[] getPropertyBytes(String id)\n    {\n        String value = OtrActivator.configService.getString(getID(id));\n\n        return value == null\n            ? null\n            : Base64.getDecoder().decode(value.getBytes());\n    }\n\n    /**\n     * Gets the value of a specific property as a boolean (\n     * {@link ConfigurationService#getBoolean(String, boolean)} proxy).\n     *\n     * @param id of the property that is being queried.\n     * @param defaultValue the value to be returned if the specified property\n     *            name is not associated with a value.\n     * @return the <tt>Boolean</tt> value of the property with the specified\n     *         name.\n     */\n    public boolean getPropertyBoolean(String id, boolean defaultValue)\n    {\n        return\n            OtrActivator.configService.getBoolean(getID(id), defaultValue);\n    }\n\n    /**\n     * Sets the property with the specified name to the specified value (\n     * {@link ConfigurationService#setProperty(String, Object)} proxy). The\n     * value is Base64 encoded.\n     *\n     * @param id the name of the property to change.\n     * @param value the new value of the specified property.\n     */\n    public void setProperty(String id, byte[] value)\n    {\n        String valueToStore = Base64.getEncoder().encodeToString(value);\n\n        OtrActivator.configService.setProperty(getID(id), valueToStore);\n    }\n\n    /**\n     * Sets the property with the specified name to the specified value (\n     * {@link ConfigurationService#setProperty(String, Object)} proxy).\n     *\n     * @param id the name of the property to change.\n     * @param value the new value of the specified property.\n     */\n    public void setProperty(String id, Object value)\n    {\n        OtrActivator.configService.setProperty(getID(id), value);\n    }\n\n    /**\n     * Removes the property with the specified name (\n     * {@link ConfigurationService#removeProperty(String)} proxy).\n     *\n     * @param id the name of the property to change.\n     */\n    public void removeProperty(String id)\n    {\n        OtrActivator.configService.removeProperty(getID(id));\n    }\n\n    /**\n     * Gets the value of a specific property as a signed decimal integer.\n     *\n     * @param id the name of the property to change.\n     * @param defaultValue the value to be returned if the specified property\n     *            name is not associated with a value.\n     * @return the <tt>int</tt> value of the property\n     */\n    public int getPropertyInt(String id, int defaultValue)\n    {\n        return OtrActivator.configService.getInt(getID(id), defaultValue);\n    }\n\n    /**\n     * Appends <tt>value</tt> to the old value of the property with the\n     * specified name. The two values will be comma separated.\n     * \n     * @param id the name of the property to append to\n     * @param value the value to append\n     */\n    public void appendProperty(String id, Object value)\n    {\n        Object oldValue = OtrActivator.configService.getProperty(getID(id));\n\n        String newValue =\n            oldValue == null ? value.toString() : oldValue + \",\" + value;\n\n        setProperty(id, newValue);\n    }\n\n    public List<String> getAppendedProperties(String id)\n    {\n        String listProperties =\n           (String) OtrActivator.configService.getProperty(getID(id));\n\n        if (listProperties == null) return new ArrayList<String>();\n\n        return Arrays.asList(listProperties.split(\",\"));\n    }\n}", "class_name": "OtrConfigurator", "return_type": "String", "parameters": [{"type": "String", "name": "s"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ScrollableTabButton extends\n            SIPCommTabbedPaneUI.ScrollableTabButton\n    {\n        /**\n         * Serial version UID.\n         */\n        private static final long serialVersionUID = 0L;\n\n        public ScrollableTabButton(int direction)\n        {\n            super(direction);\n            setRolloverEnabled(true);\n        }\n\n        @Override\n        public Dimension getPreferredSize()\n        {\n            return new Dimension(16, calculateMaxTabHeight(0));\n        }\n\n        @Override\n        public void paint(Graphics g)\n        {\n            Color origColor;\n            boolean isPressed, isRollOver, isEnabled;\n            int w, h, size;\n\n            w = getWidth();\n            h = getHeight();\n            origColor = g.getColor();\n            isPressed = getModel().isPressed();\n            isRollOver = getModel().isRollover();\n            isEnabled = isEnabled();\n\n            g.setColor(getBackground());\n            g.fillRect(0, 0, w, h);\n\n            g.setColor(shadow);\n            // Using the background color set above\n            if (direction == WEST) {\n                g.drawLine(0, 0, 0, h - 1); // left\n                g.drawLine(w - 1, 0, w - 1, 0); // right\n            } else\n                g.drawLine(w - 2, h - 1, w - 2, 0); // right\n\n            g.drawLine(0, 0, w - 2, 0); // top\n\n            if (isRollOver)\n            {\n                // do highlights or shadows\n                Color color1;\n                Color color2;\n\n                if (isPressed)\n                {\n                    color2 = Color.WHITE;\n                    color1 = shadow;\n                }\n                else\n                {\n                    color1 = Color.WHITE;\n                    color2 = shadow;\n                }\n\n                g.setColor(color1);\n\n                if (direction == WEST) {\n                    g.drawLine(1, 1, 1, h - 1); // left\n                    g.drawLine(1, 1, w - 2, 1); // top\n                    g.setColor(color2);\n                    g.drawLine(w - 1, h - 1, w - 1, 1); // right\n                } else {\n                    g.drawLine(0, 1, 0, h - 1);\n                    g.drawLine(0, 1, w - 3, 1); // top\n                    g.setColor(color2);\n                    g.drawLine(w - 3, h - 1, w - 3, 1); // right\n                }\n\n            }\n\n            // g.drawLine(0, h - 1, w - 1, h - 1); //bottom\n\n            // If there's no room to draw arrow, bail\n            if (h < 5 || w < 5) {\n                g.setColor(origColor);\n                return;\n            }\n\n            if (isPressed) {\n                g.translate(1, 1);\n            }\n\n            // Draw the arrow\n            size = Math.min((h - 4) / 3, (w - 4) / 3);\n            size = Math.max(size, 2);\n\n            boolean highlight = false;\n\n            if(!highlightedTabs.isEmpty() &&\n                ((direction == WEST\n                    && tabScroller.scrollBackwardButton.isEnabled())\n                || (direction == EAST\n                    && tabScroller.scrollForwardButton.isEnabled())))\n            {\n                Rectangle viewRect = tabScroller.viewport.getViewRect();\n\n                if(direction == WEST)\n                {\n                    int leadingTabIndex = getClosestTab(viewRect.x, viewRect.y);\n\n                    for(int i = 0; i < leadingTabIndex; i++)\n                    {\n                        if(highlightedTabs.contains(i)\n                           && !isScrollTabVisible(i))\n                        {\n                            highlight = true;\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    int leadingTabIndex =\n                        getClosestTab(viewRect.x + viewRect.y, viewRect.y);\n\n                    for(int i = leadingTabIndex; i < tabPane.getTabCount(); i++)\n                    {\n                        if(highlightedTabs.contains(i)\n                            && !isScrollTabVisible(i))\n                        {\n                            highlight = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(highlight)\n                {\n                    Image img = DesktopUtilActivator.getImage(\n                        direction == WEST ?\n                            \"service.gui.icons.TAB_UNREAD_BACKWARD_ICON\"\n                            : \"service.gui.icons.TAB_UNREAD_FORWARD_ICON\");\n\n                    int wi = img.getWidth(null);\n\n                    g.drawImage(img,\n                                (w - wi)/2,\n                                (h - size) / 2 - 2/* 2 borders 1px width*/,\n                                null);\n                }\n            }\n\n            if(!highlight)\n                paintTriangle(g, (w - size) / 2, (h - size) / 2,\n                    size, direction, isEnabled);\n\n            // Reset the Graphics back to it's original settings\n            if (isPressed) {\n                g.translate(-1, -1);\n            }\n            g.setColor(origColor);\n        }\n    }\n\n    /**\n     * Checks whether the <tt>tabIndex</tt> is visible in the scrollable\n     * tabs list.\n     *\n     * @param tabIndex the tab index to check.\n     * @return whether <tt>tabIndex</tt> is visible in the list of scrollable\n     * tabs.\n     */\n    private boolean isScrollTabVisible(int tabIndex)\n    {\n        Rectangle tabRect = rects[tabIndex];\n        Rectangle viewRect = tabScroller.viewport.getViewRect();\n        if ((tabRect.x + tabRect.width - BUTTONSIZE < viewRect.x)\n            || (tabRect.x + BUTTONSIZE > viewRect.x + viewRect.width))\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    @Override\n    protected SIPCommTabbedPaneUI.ScrollableTabButton createScrollableTabButton(\n            int direction)\n    {\n        return new ScrollableTabButton(direction);\n    }\n\n\n    @Override\n    protected int calculateTabWidth(int tabPlacement, int tabIndex,\n            FontMetrics metrics)\n    {\n        int width = super.calculateTabWidth(tabPlacement, tabIndex, metrics);\n\n        if (isOneActionButtonEnabled())\n        {\n            if(width > PREFERRED_WIDTH)\n                width = PREFERRED_WIDTH;\n        }\n\n        return width + WIDTHDELTA;\n    }\n\n    public void tabAddHightlight(int tabIndex)\n    {\n        this.highlightedTabs.add(tabIndex);\n    }\n\n    public void tabRemoveHighlight(int tabIndex)\n    {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "jitsi_jitsi/396", "ground_truth": "\n        Iterator<Integer> highlightedIter = highlightedTabs.iterator();\n\n        while (highlightedIter.hasNext())\n        {\n            if (highlightedIter.next().intValue() == tabIndex)\n            {\n                highlightedIter.remove();\n                break;\n            }\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "desktoputil", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "desktoputil", "plaf", "SIPCommTabbedPaneEnhancedUI.java"], "context_start_lineno": 0, "function_name": "tabRemoveHighlight", "left_context": "class ScrollableTabButton extends\n            SIPCommTabbedPaneUI.ScrollableTabButton\n    {\n        /**\n         * Serial version UID.\n         */\n        private static final long serialVersionUID = 0L;\n\n        public ScrollableTabButton(int direction)\n        {\n            super(direction);\n            setRolloverEnabled(true);\n        }\n\n        @Override\n        public Dimension getPreferredSize()\n        {\n            return new Dimension(16, calculateMaxTabHeight(0));\n        }\n\n        @Override\n        public void paint(Graphics g)\n        {\n            Color origColor;\n            boolean isPressed, isRollOver, isEnabled;\n            int w, h, size;\n\n            w = getWidth();\n            h = getHeight();\n            origColor = g.getColor();\n            isPressed = getModel().isPressed();\n            isRollOver = getModel().isRollover();\n            isEnabled = isEnabled();\n\n            g.setColor(getBackground());\n            g.fillRect(0, 0, w, h);\n\n            g.setColor(shadow);\n            // Using the background color set above\n            if (direction == WEST) {\n                g.drawLine(0, 0, 0, h - 1); // left\n                g.drawLine(w - 1, 0, w - 1, 0); // right\n            } else\n                g.drawLine(w - 2, h - 1, w - 2, 0); // right\n\n            g.drawLine(0, 0, w - 2, 0); // top\n\n            if (isRollOver)\n            {\n                // do highlights or shadows\n                Color color1;\n                Color color2;\n\n                if (isPressed)\n                {\n                    color2 = Color.WHITE;\n                    color1 = shadow;\n                }\n                else\n                {\n                    color1 = Color.WHITE;\n                    color2 = shadow;\n                }\n\n                g.setColor(color1);\n\n                if (direction == WEST) {\n                    g.drawLine(1, 1, 1, h - 1); // left\n                    g.drawLine(1, 1, w - 2, 1); // top\n                    g.setColor(color2);\n                    g.drawLine(w - 1, h - 1, w - 1, 1); // right\n                } else {\n                    g.drawLine(0, 1, 0, h - 1);\n                    g.drawLine(0, 1, w - 3, 1); // top\n                    g.setColor(color2);\n                    g.drawLine(w - 3, h - 1, w - 3, 1); // right\n                }\n\n            }\n\n            // g.drawLine(0, h - 1, w - 1, h - 1); //bottom\n\n            // If there's no room to draw arrow, bail\n            if (h < 5 || w < 5) {\n                g.setColor(origColor);\n                return;\n            }\n\n            if (isPressed) {\n                g.translate(1, 1);\n            }\n\n            // Draw the arrow\n            size = Math.min((h - 4) / 3, (w - 4) / 3);\n            size = Math.max(size, 2);\n\n            boolean highlight = false;\n\n            if(!highlightedTabs.isEmpty() &&\n                ((direction == WEST\n                    && tabScroller.scrollBackwardButton.isEnabled())\n                || (direction == EAST\n                    && tabScroller.scrollForwardButton.isEnabled())))\n            {\n                Rectangle viewRect = tabScroller.viewport.getViewRect();\n\n                if(direction == WEST)\n                {\n                    int leadingTabIndex = getClosestTab(viewRect.x, viewRect.y);\n\n                    for(int i = 0; i < leadingTabIndex; i++)\n                    {\n                        if(highlightedTabs.contains(i)\n                           && !isScrollTabVisible(i))\n                        {\n                            highlight = true;\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    int leadingTabIndex =\n                        getClosestTab(viewRect.x + viewRect.y, viewRect.y);\n\n                    for(int i = leadingTabIndex; i < tabPane.getTabCount(); i++)\n                    {\n                        if(highlightedTabs.contains(i)\n                            && !isScrollTabVisible(i))\n                        {\n                            highlight = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(highlight)\n                {\n                    Image img = DesktopUtilActivator.getImage(\n                        direction == WEST ?\n                            \"service.gui.icons.TAB_UNREAD_BACKWARD_ICON\"\n                            : \"service.gui.icons.TAB_UNREAD_FORWARD_ICON\");\n\n                    int wi = img.getWidth(null);\n\n                    g.drawImage(img,\n                                (w - wi)/2,\n                                (h - size) / 2 - 2/* 2 borders 1px width*/,\n                                null);\n                }\n            }\n\n            if(!highlight)\n                paintTriangle(g, (w - size) / 2, (h - size) / 2,\n                    size, direction, isEnabled);\n\n            // Reset the Graphics back to it's original settings\n            if (isPressed) {\n                g.translate(-1, -1);\n            }\n            g.setColor(origColor);\n        }\n    }\n\n    /**\n     * Checks whether the <tt>tabIndex</tt> is visible in the scrollable\n     * tabs list.\n     *\n     * @param tabIndex the tab index to check.\n     * @return whether <tt>tabIndex</tt> is visible in the list of scrollable\n     * tabs.\n     */\n    private boolean isScrollTabVisible(int tabIndex)\n    {\n        Rectangle tabRect = rects[tabIndex];\n        Rectangle viewRect = tabScroller.viewport.getViewRect();\n        if ((tabRect.x + tabRect.width - BUTTONSIZE < viewRect.x)\n            || (tabRect.x + BUTTONSIZE > viewRect.x + viewRect.width))\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    @Override\n    protected SIPCommTabbedPaneUI.ScrollableTabButton createScrollableTabButton(\n            int direction)\n    {\n        return new ScrollableTabButton(direction);\n    }\n\n\n    @Override\n    protected int calculateTabWidth(int tabPlacement, int tabIndex,\n            FontMetrics metrics)\n    {\n        int width = super.calculateTabWidth(tabPlacement, tabIndex, metrics);\n\n        if (isOneActionButtonEnabled())\n        {\n            if(width > PREFERRED_WIDTH)\n                width = PREFERRED_WIDTH;\n        }\n\n        return width + WIDTHDELTA;\n    }\n\n    public void tabAddHightlight(int tabIndex)\n    {\n        this.highlightedTabs.add(tabIndex);\n    }\n\n    public void tabRemoveHighlight(int tabIndex)\n    {", "right_context": "", "class_name": "ScrollableTabButton", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SoundFilter\n    extends SipCommFileFilter\n{\n    /**\n     * All acceptable sound formats. If null, then this sound filter will accept\n     * all sound formats available in SoundFileUtils.\n     */\n    private String[] soundFormats = null;\n\n    /**\n     * Creates a new sound filter which accepts all sound format available in\n     * SoundFileUtils.\n     */\n    public SoundFilter()\n    {\n        super();\n    }\n\n    /**\n     * Creates a new sound filter which accepts only sound format corresponding\n     * to the list given in parameter.\n     *\n     * @param soundFormats The list of sound format to accept.\n     */\n    public SoundFilter(String[] soundFormats)\n    {\n        super();\n        if(soundFormats != null)\n        {\n            this.soundFormats = new String[soundFormats.length];\n            System.arraycopy(\n                    soundFormats,\n                    0,\n                    this.soundFormats,\n                    0,\n                    soundFormats.length);\n        }\n    }\n\n    /**\n     * Method which describes differents permits extensions and defines which\n     * file or directory will be displayed in the filechoser.\n     *\n     * @param f file for the test\n     *\n     * @return boolean true if the File is a Directory or a sound file. And\n     * return false in the other cases.\n     */\n    @Override\n    public boolean accept(File f)\n    {\n        // Tests if the file passed in argument is a directory.\n        if (f.isDirectory())\n        {\n            return true;\n        }\n        // Else, tests if the exension is correct.\n        else\n        {\n            return SoundFileUtils.isSoundFile(f, this.soundFormats);\n        }\n    }\n\n    /**\n     * Method which describes, in the file chooser, the text representing the\n     * permit extension files.\n     *\n     * @return String which is displayed in the sound file chooser.\n     */\n    @Override\n    public String getDescription()\n    {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jitsi_jitsi/429", "ground_truth": "\n        String desc = \"Sound File (\";\n        if(this.soundFormats != null)\n        {\n            for(int i = 0; i < this.soundFormats.length; ++i)\n            {\n                if(i != 0)\n                {\n                    desc += \", \";\n                }\n                desc += \"*.\" + this.soundFormats[i];\n            }\n        }\n        else\n        {\n            desc += \"*.au, *.mid, *.mod, *.mp2, *.mp3, *.ogg, *.ram, *.wav, \"\n                + \"*.wma\";\n        }\n        desc += \")\";\n\n        return desc;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "notificationconfiguration", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "notificationconfiguration", "SoundFilter.java"], "context_start_lineno": 0, "function_name": "getDescription", "left_context": "class SoundFilter\n    extends SipCommFileFilter\n{\n    /**\n     * All acceptable sound formats. If null, then this sound filter will accept\n     * all sound formats available in SoundFileUtils.\n     */\n    private String[] soundFormats = null;\n\n    /**\n     * Creates a new sound filter which accepts all sound format available in\n     * SoundFileUtils.\n     */\n    public SoundFilter()\n    {\n        super();\n    }\n\n    /**\n     * Creates a new sound filter which accepts only sound format corresponding\n     * to the list given in parameter.\n     *\n     * @param soundFormats The list of sound format to accept.\n     */\n    public SoundFilter(String[] soundFormats)\n    {\n        super();\n        if(soundFormats != null)\n        {\n            this.soundFormats = new String[soundFormats.length];\n            System.arraycopy(\n                    soundFormats,\n                    0,\n                    this.soundFormats,\n                    0,\n                    soundFormats.length);\n        }\n    }\n\n    /**\n     * Method which describes differents permits extensions and defines which\n     * file or directory will be displayed in the filechoser.\n     *\n     * @param f file for the test\n     *\n     * @return boolean true if the File is a Directory or a sound file. And\n     * return false in the other cases.\n     */\n    @Override\n    public boolean accept(File f)\n    {\n        // Tests if the file passed in argument is a directory.\n        if (f.isDirectory())\n        {\n            return true;\n        }\n        // Else, tests if the exension is correct.\n        else\n        {\n            return SoundFileUtils.isSoundFile(f, this.soundFormats);\n        }\n    }\n\n    /**\n     * Method which describes, in the file chooser, the text representing the\n     * permit extension files.\n     *\n     * @return String which is displayed in the sound file chooser.\n     */\n    @Override\n    public String getDescription()\n    {", "right_context": "}\n}", "class_name": "SoundFilter", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ChatRightButtonMenu\n    extends SIPCommPopupMenu\n    implements  ActionListener,\n                Skinnable\n{\n    private ChatConversationPanel chatConvPanel;\n\n    private JMenuItem copyMenuItem = new JMenuItem(\n        GuiActivator.getResources().getI18NString(\"service.gui.COPY\"),\n        new ImageIcon(ImageLoader.getImage(ImageLoader.COPY_ICON)));\n\n    private JMenuItem closeMenuItem = new JMenuItem(\n        GuiActivator.getResources().getI18NString(\"service.gui.CLOSE\"),\n        new ImageIcon(ImageLoader.getImage(ImageLoader.CLOSE_ICON)));\n\n    /**\n     * Creates an instance of <tt>ChatRightButtonMenu</tt>.\n     *\n     * @param chatConvPanel The conversation panel, where this menu will apear.\n     */\n    public ChatRightButtonMenu(ChatConversationPanel chatConvPanel)\n    {\n        super();\n\n        this.chatConvPanel = chatConvPanel;\n\n        this.init();\n    }\n\n    /**\n     * Initializes the menu with all menu items.\n     */\n    private void init()\n    {\n        this.add(copyMenuItem);\n\n        this.addSeparator();\n\n        this.add(closeMenuItem);\n\n        this.copyMenuItem.setName(\"copy\");\n        this.closeMenuItem.setName(\"service.gui.CLOSE\");\n\n        this.copyMenuItem.addActionListener(this);\n        this.closeMenuItem.addActionListener(this);\n\n        this.copyMenuItem.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.COPY\"));\n\n        this.closeMenuItem.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.CLOSE\"));\n\n        this.copyMenuItem.setAccelerator(\n                KeyStroke.getKeyStroke(KeyEvent.VK_C,\n                KeyEvent.CTRL_MASK));\n    }\n\n    /**\n     * Disables the copy item.\n     */\n    public void disableCopy() {\n        this.copyMenuItem.setEnabled(false);\n    }\n\n    /**\n     * Enables the copy item.\n     */\n    public void enableCopy() {\n        this.copyMenuItem.setEnabled(true);\n    }\n\n    /**\n     * Handles the <tt>ActionEvent</tt> when one of the menu items is selected.\n     *\n     * @param e the <tt>ActionEvent</tt> that notified us\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n        JMenuItem menuItem = (JMenuItem) e.getSource();\n        String itemText = menuItem.getName();\n\n        if (itemText.equalsIgnoreCase(\"copy\"))\n        {\n            this.chatConvPanel.copyConversation();\n        }\n        else if (itemText.equalsIgnoreCase(\"save\"))\n        {\n            //TODO: Implement save to file.\n        }\n        else if (itemText.equalsIgnoreCase(\"print\"))\n        {\n          //TODO: Implement print.\n        }\n        else if (itemText.equalsIgnoreCase(\"service.gui.CLOSE\"))\n        {\n            Window window = this.chatConvPanel\n                .getChatContainer().getConversationContainerWindow();\n\n            window.setVisible(false);\n            window.dispose();\n        }\n    }\n\n    /**\n     * Reloads menu icons.\n     */\n    public void loadSkin()\n    {\n        copyMenuItem.setIcon(new ImageIcon(\n                ImageLoader.getImage(ImageLoader.COPY_ICON)));\n\n        closeMenuItem.setIcon(new ImageIcon(\n                ImageLoader.getImage(ImageLoader.CLOSE_ICON)));\n    }\n\n    /**\n     * Clear resources.\n     */\n    public void dispose()\n    {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "jitsi_jitsi/445", "ground_truth": "\n        this.chatConvPanel = null;\n        copyMenuItem = null;\n        closeMenuItem = null;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "impl", "gui", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "gui", "main", "chat", "menus", "ChatRightButtonMenu.java"], "context_start_lineno": 0, "function_name": "dispose", "left_context": "class ChatRightButtonMenu\n    extends SIPCommPopupMenu\n    implements  ActionListener,\n                Skinnable\n{\n    private ChatConversationPanel chatConvPanel;\n\n    private JMenuItem copyMenuItem = new JMenuItem(\n        GuiActivator.getResources().getI18NString(\"service.gui.COPY\"),\n        new ImageIcon(ImageLoader.getImage(ImageLoader.COPY_ICON)));\n\n    private JMenuItem closeMenuItem = new JMenuItem(\n        GuiActivator.getResources().getI18NString(\"service.gui.CLOSE\"),\n        new ImageIcon(ImageLoader.getImage(ImageLoader.CLOSE_ICON)));\n\n    /**\n     * Creates an instance of <tt>ChatRightButtonMenu</tt>.\n     *\n     * @param chatConvPanel The conversation panel, where this menu will apear.\n     */\n    public ChatRightButtonMenu(ChatConversationPanel chatConvPanel)\n    {\n        super();\n\n        this.chatConvPanel = chatConvPanel;\n\n        this.init();\n    }\n\n    /**\n     * Initializes the menu with all menu items.\n     */\n    private void init()\n    {\n        this.add(copyMenuItem);\n\n        this.addSeparator();\n\n        this.add(closeMenuItem);\n\n        this.copyMenuItem.setName(\"copy\");\n        this.closeMenuItem.setName(\"service.gui.CLOSE\");\n\n        this.copyMenuItem.addActionListener(this);\n        this.closeMenuItem.addActionListener(this);\n\n        this.copyMenuItem.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.COPY\"));\n\n        this.closeMenuItem.setMnemonic(\n            GuiActivator.getResources().getI18nMnemonic(\"service.gui.CLOSE\"));\n\n        this.copyMenuItem.setAccelerator(\n                KeyStroke.getKeyStroke(KeyEvent.VK_C,\n                KeyEvent.CTRL_MASK));\n    }\n\n    /**\n     * Disables the copy item.\n     */\n    public void disableCopy() {\n        this.copyMenuItem.setEnabled(false);\n    }\n\n    /**\n     * Enables the copy item.\n     */\n    public void enableCopy() {\n        this.copyMenuItem.setEnabled(true);\n    }\n\n    /**\n     * Handles the <tt>ActionEvent</tt> when one of the menu items is selected.\n     *\n     * @param e the <tt>ActionEvent</tt> that notified us\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n        JMenuItem menuItem = (JMenuItem) e.getSource();\n        String itemText = menuItem.getName();\n\n        if (itemText.equalsIgnoreCase(\"copy\"))\n        {\n            this.chatConvPanel.copyConversation();\n        }\n        else if (itemText.equalsIgnoreCase(\"save\"))\n        {\n            //TODO: Implement save to file.\n        }\n        else if (itemText.equalsIgnoreCase(\"print\"))\n        {\n          //TODO: Implement print.\n        }\n        else if (itemText.equalsIgnoreCase(\"service.gui.CLOSE\"))\n        {\n            Window window = this.chatConvPanel\n                .getChatContainer().getConversationContainerWindow();\n\n            window.setVisible(false);\n            window.dispose();\n        }\n    }\n\n    /**\n     * Reloads menu icons.\n     */\n    public void loadSkin()\n    {\n        copyMenuItem.setIcon(new ImageIcon(\n                ImageLoader.getImage(ImageLoader.COPY_ICON)));\n\n        closeMenuItem.setIcon(new ImageIcon(\n                ImageLoader.getImage(ImageLoader.CLOSE_ICON)));\n    }\n\n    /**\n     * Clear resources.\n     */\n    public void dispose()\n    {", "right_context": "}\n}", "class_name": "ChatRightButtonMenu", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CallPeerAdapter\n    extends net.java.sip.communicator.service.protocol.event.CallPeerAdapter\n    implements CallPeerSecurityListener,\n               PropertyChangeListener\n{\n    /**\n     * The <tt>CallPeer</tt> which is depicted by {@link #renderer}.\n     */\n    private final CallPeer peer;\n\n    /**\n     * The <tt>CallPeerRenderer</tt> which is facilitated by this instance.\n     */\n    private final CallPeerRenderer renderer;\n\n    /**\n     * Initializes a new <tt>CallPeerAdapter</tt> instance which is to listen to\n     * a specific <tt>CallPeer</tt> on behalf of a specific\n     * <tt>CallPeerRenderer</tt>. The new instance adds itself to the specified\n     * <tt>CallPeer</tt> as a listener for each of the implemented listener\n     * types.\n     *\n     * @param peer the <tt>CallPeer</tt> which the new instance is to listen to\n     * on behalf of the specified <tt>renderer</tt>\n     * @param renderer the <tt>CallPeerRenderer</tt> which is to be facilitated\n     * by the new instance\n     */\n    public CallPeerAdapter(CallPeer peer, CallPeerRenderer renderer)\n    {\n        this.peer = peer;\n        this.renderer = renderer;\n\n        this.peer.addCallPeerListener(this);\n        this.peer.addCallPeerSecurityListener(this);\n        this.peer.addPropertyChangeListener(this);\n    }\n\n    /**\n     * Removes the listeners implemented by this instance from the associated\n     * <tt>CallPeer</tt> and prepares it for garbage collection.\n     */\n    public void dispose()\n    {\n        peer.removeCallPeerListener(this);\n        peer.removeCallPeerSecurityListener(this);\n        peer.removePropertyChangeListener(this);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void peerDisplayNameChanged(CallPeerChangeEvent ev)\n    {\n        if (peer.equals(ev.getSourceCallPeer()))\n            renderer.setPeerName((String) ev.getNewValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void peerImageChanged(CallPeerChangeEvent ev)\n    {\n        if (peer.equals(ev.getSourceCallPeer()))\n            renderer.setPeerImage((byte[]) ev.getNewValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void peerStateChanged(CallPeerChangeEvent ev)\n    {\n        CallPeer sourcePeer = ev.getSourceCallPeer();\n\n        if (!sourcePeer.equals(peer))\n            return;\n\n        CallPeerState newState = (CallPeerState) ev.getNewValue();\n        CallPeerState oldState = (CallPeerState) ev.getOldValue();\n\n        String newStateString = sourcePeer.getState().getLocalizedStateString();\n\n        if (newState == CallPeerState.CONNECTED)\n        {\n            if (!CallPeerState.isOnHold(oldState))\n            {\n                if (!renderer.getCallRenderer().isCallTimerStarted())\n                    renderer.getCallRenderer().startCallTimer();\n            }\n            else\n            {\n                renderer.setOnHold(false);\n                renderer.getCallRenderer().updateHoldButtonState();\n            }\n        }\n        else if (newState == CallPeerState.DISCONNECTED)\n        {\n            // The call peer should be already removed from the call\n            // see CallPeerRemoved\n        }\n        else if (newState == CallPeerState.FAILED)\n        {\n            // The call peer should be already removed from the call\n            // see CallPeerRemoved\n        }\n        else if (CallPeerState.isOnHold(newState))\n        {\n            renderer.setOnHold(true);\n            renderer.getCallRenderer().updateHoldButtonState();\n        }\n\n        renderer.setPeerState(oldState, newState, newStateString);\n\n        String reasonString = ev.getReasonString();\n        if (reasonString != null)\n            renderer.setErrorReason(reasonString);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void propertyChange(PropertyChangeEvent ev)\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * {@inheritDoc}\n     *\n     * <tt>CallPeerAdapter</tt> does nothing.\n     */\n    public void securityMessageRecieved(CallPeerSecurityMessageEvent ev)\n    {\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityNegotiationStarted(\n            CallPeerSecurityNegotiationStartedEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityNegotiationStarted(ev);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityOff(CallPeerSecurityOffEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityOff(ev);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityOn(CallPeerSecurityOnEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityOn(ev);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityTimeout(CallPeerSecurityTimeoutEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityTimeout(ev);\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/447", "ground_truth": "\n        String propertyName = ev.getPropertyName();\n\n        if (propertyName.equals(CallPeer.MUTE_PROPERTY_NAME))\n        {\n            boolean mute = (Boolean) ev.getNewValue();\n\n            renderer.setMute(mute);\n        }\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "service", "ui-service", "src", "main", "java", "net", "java", "sip", "communicator", "service", "gui", "call", "CallPeerAdapter.java"], "context_start_lineno": 0, "function_name": "propertyChange", "left_context": "class CallPeerAdapter\n    extends net.java.sip.communicator.service.protocol.event.CallPeerAdapter\n    implements CallPeerSecurityListener,\n               PropertyChangeListener\n{\n    /**\n     * The <tt>CallPeer</tt> which is depicted by {@link #renderer}.\n     */\n    private final CallPeer peer;\n\n    /**\n     * The <tt>CallPeerRenderer</tt> which is facilitated by this instance.\n     */\n    private final CallPeerRenderer renderer;\n\n    /**\n     * Initializes a new <tt>CallPeerAdapter</tt> instance which is to listen to\n     * a specific <tt>CallPeer</tt> on behalf of a specific\n     * <tt>CallPeerRenderer</tt>. The new instance adds itself to the specified\n     * <tt>CallPeer</tt> as a listener for each of the implemented listener\n     * types.\n     *\n     * @param peer the <tt>CallPeer</tt> which the new instance is to listen to\n     * on behalf of the specified <tt>renderer</tt>\n     * @param renderer the <tt>CallPeerRenderer</tt> which is to be facilitated\n     * by the new instance\n     */\n    public CallPeerAdapter(CallPeer peer, CallPeerRenderer renderer)\n    {\n        this.peer = peer;\n        this.renderer = renderer;\n\n        this.peer.addCallPeerListener(this);\n        this.peer.addCallPeerSecurityListener(this);\n        this.peer.addPropertyChangeListener(this);\n    }\n\n    /**\n     * Removes the listeners implemented by this instance from the associated\n     * <tt>CallPeer</tt> and prepares it for garbage collection.\n     */\n    public void dispose()\n    {\n        peer.removeCallPeerListener(this);\n        peer.removeCallPeerSecurityListener(this);\n        peer.removePropertyChangeListener(this);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void peerDisplayNameChanged(CallPeerChangeEvent ev)\n    {\n        if (peer.equals(ev.getSourceCallPeer()))\n            renderer.setPeerName((String) ev.getNewValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void peerImageChanged(CallPeerChangeEvent ev)\n    {\n        if (peer.equals(ev.getSourceCallPeer()))\n            renderer.setPeerImage((byte[]) ev.getNewValue());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void peerStateChanged(CallPeerChangeEvent ev)\n    {\n        CallPeer sourcePeer = ev.getSourceCallPeer();\n\n        if (!sourcePeer.equals(peer))\n            return;\n\n        CallPeerState newState = (CallPeerState) ev.getNewValue();\n        CallPeerState oldState = (CallPeerState) ev.getOldValue();\n\n        String newStateString = sourcePeer.getState().getLocalizedStateString();\n\n        if (newState == CallPeerState.CONNECTED)\n        {\n            if (!CallPeerState.isOnHold(oldState))\n            {\n                if (!renderer.getCallRenderer().isCallTimerStarted())\n                    renderer.getCallRenderer().startCallTimer();\n            }\n            else\n            {\n                renderer.setOnHold(false);\n                renderer.getCallRenderer().updateHoldButtonState();\n            }\n        }\n        else if (newState == CallPeerState.DISCONNECTED)\n        {\n            // The call peer should be already removed from the call\n            // see CallPeerRemoved\n        }\n        else if (newState == CallPeerState.FAILED)\n        {\n            // The call peer should be already removed from the call\n            // see CallPeerRemoved\n        }\n        else if (CallPeerState.isOnHold(newState))\n        {\n            renderer.setOnHold(true);\n            renderer.getCallRenderer().updateHoldButtonState();\n        }\n\n        renderer.setPeerState(oldState, newState, newStateString);\n\n        String reasonString = ev.getReasonString();\n        if (reasonString != null)\n            renderer.setErrorReason(reasonString);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void propertyChange(PropertyChangeEvent ev)\n    {", "right_context": "}\n\n    /**\n     * {@inheritDoc}\n     *\n     * <tt>CallPeerAdapter</tt> does nothing.\n     */\n    public void securityMessageRecieved(CallPeerSecurityMessageEvent ev)\n    {\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityNegotiationStarted(\n            CallPeerSecurityNegotiationStartedEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityNegotiationStarted(ev);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityOff(CallPeerSecurityOffEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityOff(ev);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityOn(CallPeerSecurityOnEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityOn(ev);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void securityTimeout(CallPeerSecurityTimeoutEvent ev)\n    {\n        if (peer.equals(ev.getSource()))\n            renderer.securityTimeout(ev);\n    }\n}", "class_name": "CallPeerAdapter", "return_type": "void", "parameters": [{"type": "PropertyChangeEvent", "name": "ev"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/gui/src/main/java/net/java/sip/communicator/impl/gui/lookandfeel/SIPCommCallComboBoxUI.java\n// --------------------------------------------------\n// /** \n//  * Returns the area that is reserved for drawing the currently selected item.\n//  * @return the rectangle\n//  */\n// @Override protected Rectangle rectangleForCurrentValue(){\n//   int width=comboBox.getWidth();\n//   int height=comboBox.getHeight();\n//   Insets insets=getInsets();\n//   int buttonSize=0;\n//   if (arrowButton != null)   buttonSize=arrowButton.getWidth();\n//   if (comboBox.getComponentOrientation().isLeftToRight())   return new Rectangle(insets.left,insets.top,width - (insets.left + insets.right + buttonSize),height - (insets.top + insets.bottom));\n//  else   return new Rectangle(insets.left + buttonSize,insets.top,width - (insets.left + insets.right + buttonSize),height - (insets.top + insets.bottom));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SIPCommTabbedPaneUI.java\n// --------------------------------------------------\n// protected Rectangle newCloseRect(Rectangle rect){\n//   int dx=rect.x + rect.width - BUTTONSIZE - WIDTHDELTA;\n//   int dy=rect.y + (rect.height - BUTTONSIZE) / 2 + 2;\n//   return new Rectangle(dx,dy,BUTTONSIZE,BUTTONSIZE);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SIPCommTabbedPaneUI.java\n// --------------------------------------------------\n// protected Rectangle newMaxRect(Rectangle rect){\n//   int dx=rect.x + rect.width - BUTTONSIZE - WIDTHDELTA;\n//   int dy=rect.y + (rect.height - BUTTONSIZE) / 2 + 2;\n//   if (isCloseButtonEnabled)   dx-=BUTTONSIZE;\n//   return new Rectangle(dx,dy,BUTTONSIZE,BUTTONSIZE);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/impl/gui/src/main/java/net/java/sip/communicator/impl/gui/main/DialPadFieldUI.java\n// --------------------------------------------------\n// /** \n//  * If we are in the case of disabled delete button, we simply call the parent implementation of this method, otherwise we recalculate the editor rectangle in order to leave place for the delete button.\n//  * @return the visible editor rectangle\n//  */\n// @Override protected Rectangle getVisibleEditorRect(){\n//   Rectangle rect=super.getVisibleEditorRect();\n//   if ((rect.width > 0) && (rect.height > 0)) {\n//     rect.x+=8;\n//     rect.width-=18;\n//     return rect;\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SIPCommTextFieldUI.java\n// --------------------------------------------------\n// /** \n//  * If we are in the case of disabled delete button, we simply call the parent implementation of this method, otherwise we recalculate the editor rectangle in order to leave place for the delete button.\n//  * @return the visible editor rectangle\n//  */\n// @Override protected Rectangle getVisibleEditorRect(){\n//   if (!isDeleteIconVisible) {\n//     return super.getVisibleEditorRect();\n//   }\n//   JTextComponent c=getComponent();\n//   if (c == null)   return null;\n//   Rectangle alloc=c.getBounds();\n//   if ((alloc.width > 0) && (alloc.height > 0)) {\n//     alloc.x=alloc.y=0;\n//     Insets insets=c.getInsets();\n//     alloc.x+=insets.left;\n//     alloc.y+=insets.top;\n//     alloc.width-=insets.left + insets.right + getDeleteButtonRect().getWidth();\n//     alloc.height-=insets.top + insets.bottom;\n//     return alloc;\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SearchFieldUI.java\n// --------------------------------------------------\n// /** \n//  * Calculates the sms button rectangle.\n//  * @return the sms button rectangle\n//  */\n// protected Rectangle getSMSButtonRect(){\n//   Component c=getComponent();\n//   Rectangle rect=c.getBounds();\n//   int dx=getDeleteButtonRect().x - smsRolloverIcon.getWidth(null) - 8;\n//   if (isCallIconVisible)   dx-=callRolloverIcon.getWidth(null) + 4;\n//   int dy=(rect.y + rect.height) / 2 - smsRolloverIcon.getHeight(null) / 2;\n//   return new Rectangle(dx,dy,smsRolloverIcon.getWidth(null),smsRolloverIcon.getHeight(null));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SearchFieldUI.java\n// --------------------------------------------------\n// /** \n//  * If we are in the case of disabled delete button, we simply call the parent implementation of this method, otherwise we recalculate the editor rectangle in order to leave place for the delete button.\n//  * @return the visible editor rectangle\n//  */\n// @Override protected Rectangle getVisibleEditorRect(){\n//   Rectangle rect=super.getVisibleEditorRect();\n//   if (rect == null)   return null;\n//   if ((rect.width > 0) && (rect.height > 0)) {\n//     rect.x+=searchIcon.getIconWidth() + 5;\n//     rect.width-=(searchIcon.getIconWidth() + 5);\n//     if (isSMSIconVisible)     rect.width-=(smsRolloverIcon.getWidth(null) + 12);\n//     if (isCallIconVisible)     rect.width-=(callRolloverIcon.getWidth(null) + 12);\n//  else     rect.width-=8;\n//     return rect;\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SIPCommTextFieldUI.java\n// --------------------------------------------------\n// /** \n//  * Calculates the delete button rectangle.\n//  * @return the delete button rectangle\n//  */\n// protected Rectangle getDeleteButtonRect(){\n//   JTextComponent c=getComponent();\n//   if (c == null)   return null;\n//   Rectangle rect=c.getBounds();\n//   int dx=rect.width - deleteButton.getWidth() - BUTTON_GAP;\n//   int dy=rect.height / 2 - deleteButton.getHeight() / 2;\n//   return new Rectangle(dx,dy,deleteButton.getWidth(),deleteButton.getHeight());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SearchFieldUI.java\n// --------------------------------------------------\n// /** \n//  * Calculates the call button rectangle.\n//  * @return the call button rectangle\n//  */\n// protected Rectangle getCallButtonRect(){\n//   Component c=getComponent();\n//   Rectangle rect=c.getBounds();\n//   int dx=getDeleteButtonRect().x - callRolloverIcon.getWidth(null) - 8;\n//   int dy=(rect.height) / 2 - callRolloverIcon.getHeight(null) / 2;\n//   return new Rectangle(dx,dy,callRolloverIcon.getWidth(null),callRolloverIcon.getHeight(null));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/presence/avatar/imagepicker/ImageClipper.java\n// --------------------------------------------------\n// /** \n//  * Returns the cropped area of the image\n//  * @return the cropped area\n//  */\n// public Rectangle getCroppedArea(){\n//   Rectangle croppedArea=new Rectangle();\n//   croppedArea.setSize(this.cropZoneRect.getSize());\n//   croppedArea.x=this.cropZoneRect.x - this.imageRect.x;\n//   croppedArea.y=this.cropZoneRect.y - this.imageRect.y;\n//   return croppedArea;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SIPCommTabbedPaneUI.java\n// --------------------------------------------------\n// /** \n//  * Returns the bounds of the specified tab in the coordinate space of the JTabbedPane component. This is required because the tab rects are by default defined in the coordinate space of the component where they are rendered, which could be the JTabbedPane (for WRAP_TAB_LAYOUT) or a ScrollableTabPanel (SCROLL_TAB_LAYOUT). This method should be used whenever the tab rectangle must be relative to the JTabbedPane itself and the result should be placed in a designated Rectangle object (rather than instantiating and returning a new Rectangle each time). The tab index parameter must be a valid tabbed pane tab index (0 to tab count - 1, inclusive). The destination rectangle parameter must be a valid <code>Rectangle</code> instance. The handling of invalid parameters is unspecified.\n//  * @param tabIndex the index of the tab\n//  * @param dest the rectangle where the result should be placed\n//  * @return the resulting rectangle\n//  * @since 1.4\n//  */\n// @Override protected Rectangle getTabBounds(int tabIndex,Rectangle dest){\n//   dest.width=rects[tabIndex].width;\n//   dest.height=rects[tabIndex].height;\n//   Point vpp=tabScroller.viewport.getLocation();\n//   Point viewp=tabScroller.viewport.getViewPosition();\n//   dest.x=rects[tabIndex].x + vpp.x - viewp.x;\n//   dest.y=rects[tabIndex].y + vpp.y - viewp.y;\n//   return dest;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jitsi/modules/plugin/desktoputil/src/main/java/net/java/sip/communicator/plugin/desktoputil/plaf/SIPCommTreeUI.java\n// --------------------------------------------------\n// /** \n//  * Returns the preferred width of the receiver.\n//  * @param path the path, which bounds we obtain\n//  * @param placeIn the initial rectangle of the path\n//  * @return the bounds of the path\n//  */\n// @Override public Rectangle getBounds(TreePath path,Rectangle placeIn){\n//   Rectangle rect=super.getBounds(path,placeIn);\n//   if (rect != null && parentViewport != null) {\n//     rect.width=parentViewport.getWidth() - 2;\n//   }\n//   return rect;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ScreenInformation\n{\n    /**\n     * Calculates the bounding box of all available screens. This method is\n     * highly inaccurate when screens of different sizes are used or not evenly\n     * aligned. A correct implementation should generate a polygon.\n     *\n     * @return A polygon of the usable screen area.\n     */\n    public static Rectangle getScreenBounds()\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Checks whether the top edge of the rectangle is contained in any of the\n     * available screens.\n     *\n     * @param window The bounding box of the window.\n     * @return True when the top edge is in a visible screen area; false\n     *         otherwise\n     */\n    public static boolean isTitleOnScreen(Rectangle window)\n    {\n        final GraphicsEnvironment ge = GraphicsEnvironment\n            .getLocalGraphicsEnvironment();\n\n        boolean leftInside = false;\n        boolean rightInside = false;\n        Point topLeft = new Point(window.x, window.y);\n        Point topRight = new Point(window.x + window.width, window.y);\n        for(GraphicsDevice gd : ge.getScreenDevices())\n        {\n            GraphicsConfiguration gc = gd.getDefaultConfiguration();\n            if(gc.getBounds().contains(topLeft))\n                leftInside = true;\n            if(gc.getBounds().contains(topRight))\n                rightInside = true;\n            if(leftInside && rightInside)\n                return true;\n        }\n        return leftInside && rightInside;\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/451", "ground_truth": "\n        final GraphicsEnvironment ge = GraphicsEnvironment\n                .getLocalGraphicsEnvironment();\n\n        Rectangle bounds = new Rectangle();\n        for(GraphicsDevice gd : ge.getScreenDevices())\n        {\n            GraphicsConfiguration gc = gd.getDefaultConfiguration();\n            bounds = bounds.union(gc.getBounds());\n        }\n        return bounds;\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "plugin", "desktoputil", "src", "main", "java", "net", "java", "sip", "communicator", "plugin", "desktoputil", "ScreenInformation.java"], "context_start_lineno": 0, "function_name": "getScreenBounds", "left_context": "class ScreenInformation\n{\n    /**\n     * Calculates the bounding box of all available screens. This method is\n     * highly inaccurate when screens of different sizes are used or not evenly\n     * aligned. A correct implementation should generate a polygon.\n     *\n     * @return A polygon of the usable screen area.\n     */\n    public static Rectangle getScreenBounds()\n    {", "right_context": "}\n\n    /**\n     * Checks whether the top edge of the rectangle is contained in any of the\n     * available screens.\n     *\n     * @param window The bounding box of the window.\n     * @return True when the top edge is in a visible screen area; false\n     *         otherwise\n     */\n    public static boolean isTitleOnScreen(Rectangle window)\n    {\n        final GraphicsEnvironment ge = GraphicsEnvironment\n            .getLocalGraphicsEnvironment();\n\n        boolean leftInside = false;\n        boolean rightInside = false;\n        Point topLeft = new Point(window.x, window.y);\n        Point topRight = new Point(window.x + window.width, window.y);\n        for(GraphicsDevice gd : ge.getScreenDevices())\n        {\n            GraphicsConfiguration gc = gd.getDefaultConfiguration();\n            if(gc.getBounds().contains(topLeft))\n                leftInside = true;\n            if(gc.getBounds().contains(topRight))\n                rightInside = true;\n            if(leftInside && rightInside)\n                return true;\n        }\n        return leftInside && rightInside;\n    }\n}", "class_name": "ScreenInformation", "return_type": "Rectangle", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NetaddrActivator extends DependentActivator\n{\n    /**\n     * The OSGi bundle context.\n     */\n    private static BundleContext        bundleContext         = null;\n\n    /**\n     * The network address manager implementation.\n     */\n    private NetworkAddressManagerServiceImpl networkAMS = null;\n\n    /**\n     * The configuration service.\n     */\n    private static ConfigurationService configurationService = null;\n\n    /**\n     * The OSGi <tt>PacketLoggingService</tt> in\n     * {@link #bundleContext} and used for debugging.\n     */\n    private static PacketLoggingService packetLoggingService  = null;\n\n    public  NetaddrActivator()\n    {\n        super(\n            ConfigurationService.class,\n            PacketLoggingService.class\n        );\n    }\n\n    @Override\n    public void startWithServices(BundleContext bundleContext)\n    {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Returns a reference to a ConfigurationService implementation currently\n     * registered in the bundle context or null if no such implementation was\n     * found.\n     *\n     * @return a currently valid implementation of the ConfigurationService.\n     */\n    public static ConfigurationService getConfigurationService()\n    {\n        return configurationService;\n    }\n\n    /**\n     * Returns a reference to the <tt>PacketLoggingService</tt> implementation\n     * currently registered in the bundle context or null if no such\n     * implementation was found.\n     *\n     * @return a reference to a <tt>PacketLoggingService</tt> implementation\n     * currently registered in the bundle context or null if no such\n     * implementation was found.\n     */\n    public static PacketLoggingService getPacketLogging()\n    {\n        return packetLoggingService;\n    }\n\n    /**\n     * Stops the Network Address Manager bundle\n     *\n     * @param bundleContext  the OSGI bundle context\n     *\n     */\n    public void stop(BundleContext bundleContext)\n    {\n        if(networkAMS != null)\n            networkAMS.stop();\n        if (logger.isInfoEnabled())\n            logger.info(\"Network Address Manager Service ...[STOPPED]\");\n\n        configurationService = null;\n        packetLoggingService = null;\n    }\n\n    /**\n     * Returns a reference to the bundle context that we were started with.\n     *\n     * @return a reference to the BundleContext instance that we were started\n     * with.\n     */\n    static BundleContext getBundleContext()\n    {\n        return bundleContext;\n    }\n}", "metadata": {"task_id": "jitsi_jitsi/474", "ground_truth": "\n        NetaddrActivator.bundleContext = bundleContext;\n        configurationService = getService(ConfigurationService.class);\n        packetLoggingService = getService(PacketLoggingService.class);\n        //in here we load static properties that should be else where\n        //System.setProperty(\"java.net.preferIPv4Stack\", \"false\");\n        //System.setProperty(\"java.net.preferIPv6Addresses\", \"true\");\n        //end ugly property set\n\n        //Create and start the network address manager.\n        networkAMS =\n            new NetworkAddressManagerServiceImpl();\n\n        // give references to the NetworkAddressManager implementation\n        networkAMS.start();\n\n        if (logger.isInfoEnabled())\n            logger.info(\"Network Address Manager         ...[  STARTED ]\");\n\n        bundleContext.registerService(\n            NetworkAddressManagerService.class.getName(), networkAMS, null);\n\n        MetaconfigSettings.Companion.setCacheEnabled(false);\n        MetaconfigSettings.Companion.setLogger(new MetaconfigLogger()\n        {\n            @Override\n            public void warn(Function0<String> function0)\n            {\n                if (logger.isWarnEnabled())\n                    logger.warn(function0.invoke());\n            }\n\n            @Override\n            public void error(Function0<String> function0)\n            {\n                if (logger.isErrorEnabled())\n                    logger.error(function0.invoke());\n            }\n\n            @Override\n            public void debug(Function0<String> function0)\n            {\n                if (logger.isDebugEnabled())\n                    logger.debug(function0.invoke());\n            }\n        });\n        ConfigSource defaults = new TypesafeConfigSource(\"defaults\",\n            ConfigFactory\n                .defaultReference(AgentConfig.class.getClassLoader()));\n        JitsiConfig.Companion.useDebugNewConfig(defaults);\n        logger.info(\"Network Address Manager Service ...[REGISTERED]\");\n    ", "fpath_tuple": ["jitsi_jitsi", "jitsi", "modules", "service", "netaddr", "src", "main", "java", "net", "java", "sip", "communicator", "impl", "netaddr", "NetaddrActivator.java"], "context_start_lineno": 0, "function_name": "startWithServices", "left_context": "class NetaddrActivator extends DependentActivator\n{\n    /**\n     * The OSGi bundle context.\n     */\n    private static BundleContext        bundleContext         = null;\n\n    /**\n     * The network address manager implementation.\n     */\n    private NetworkAddressManagerServiceImpl networkAMS = null;\n\n    /**\n     * The configuration service.\n     */\n    private static ConfigurationService configurationService = null;\n\n    /**\n     * The OSGi <tt>PacketLoggingService</tt> in\n     * {@link #bundleContext} and used for debugging.\n     */\n    private static PacketLoggingService packetLoggingService  = null;\n\n    public  NetaddrActivator()\n    {\n        super(\n            ConfigurationService.class,\n            PacketLoggingService.class\n        );\n    }\n\n    @Override\n    public void startWithServices(BundleContext bundleContext)\n    {", "right_context": "}\n\n    /**\n     * Returns a reference to a ConfigurationService implementation currently\n     * registered in the bundle context or null if no such implementation was\n     * found.\n     *\n     * @return a currently valid implementation of the ConfigurationService.\n     */\n    public static ConfigurationService getConfigurationService()\n    {\n        return configurationService;\n    }\n\n    /**\n     * Returns a reference to the <tt>PacketLoggingService</tt> implementation\n     * currently registered in the bundle context or null if no such\n     * implementation was found.\n     *\n     * @return a reference to a <tt>PacketLoggingService</tt> implementation\n     * currently registered in the bundle context or null if no such\n     * implementation was found.\n     */\n    public static PacketLoggingService getPacketLogging()\n    {\n        return packetLoggingService;\n    }\n\n    /**\n     * Stops the Network Address Manager bundle\n     *\n     * @param bundleContext  the OSGI bundle context\n     *\n     */\n    public void stop(BundleContext bundleContext)\n    {\n        if(networkAMS != null)\n            networkAMS.stop();\n        if (logger.isInfoEnabled())\n            logger.info(\"Network Address Manager Service ...[STOPPED]\");\n\n        configurationService = null;\n        packetLoggingService = null;\n    }\n\n    /**\n     * Returns a reference to the bundle context that we were started with.\n     *\n     * @return a reference to the BundleContext instance that we were started\n     * with.\n     */\n    static BundleContext getBundleContext()\n    {\n        return bundleContext;\n    }\n}", "class_name": "NetaddrActivator", "return_type": "void", "parameters": [{"type": "BundleContext", "name": "bundleContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RedisDistributedLock {\n\n    private final StringRedisTemplate redisTemplate;\n    private final ThreadLocal<String> lockValue = new ThreadLocal<>();\n\n    public RedisDistributedLock(StringRedisTemplate redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public boolean tryLock(String key, long expire, TimeUnit timeUnit) {\n        String value = UUID.randomUUID().toString();\n        Boolean success = redisTemplate.opsForValue().setIfAbsent(key, value, expire, timeUnit);\n        if (Boolean.TRUE.equals(success)) {\n            lockValue.set(value);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean releaseLock(String key) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/16", "ground_truth": "\n        String value = lockValue.get();\n        if (value == null) {\n            return false;\n        }\n        DefaultRedisScript<Boolean> script =\n                new DefaultRedisScript<>(\n                        \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del',\"\n                                + \" KEYS[1]) else return 0 end\",\n                        Boolean.class);\n        Boolean success = redisTemplate.execute(script, Collections.singletonList(key), value);\n        if (Boolean.TRUE.equals(success)) {\n            lockValue.remove();\n            return true;\n        }\n        return false;\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "util", "RedisDistributedLock.java"], "context_start_lineno": 0, "function_name": "releaseLock", "left_context": "class RedisDistributedLock {\n\n    private final StringRedisTemplate redisTemplate;\n    private final ThreadLocal<String> lockValue = new ThreadLocal<>();\n\n    public RedisDistributedLock(StringRedisTemplate redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public boolean tryLock(String key, long expire, TimeUnit timeUnit) {\n        String value = UUID.randomUUID().toString();\n        Boolean success = redisTemplate.opsForValue().setIfAbsent(key, value, expire, timeUnit);\n        if (Boolean.TRUE.equals(success)) {\n            lockValue.set(value);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean releaseLock(String key) {", "right_context": "}\n}", "class_name": "RedisDistributedLock", "return_type": "boolean", "parameters": [{"type": "String", "name": "key"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FCtx {\n    private static final ThreadLocal<LinkedHashMap<String, Object>> THREAD_LOCAL =\n            new ThreadLocal<>();\n\n    private static final String KEY_USER_ID = \"user_id\";\n    private static final String KEY_USER = \"user\";\n    private static final String KEY_JWT_JTI = \"jwt_jti\";\n\n    public FCtx() {}\n\n    private static void put(String key, Object val) {<FILL_FUNCTION_BODY>}\n\n    private static Object get(String key) {\n        return THREAD_LOCAL.get().getOrDefault(key, null);\n    }\n\n    public static void remove() {\n        THREAD_LOCAL.remove();\n    }\n\n    public static void setId(Integer id) {\n        put(KEY_USER_ID, id);\n    }\n\n    public static Integer getId() {\n        return (Integer) get(KEY_USER_ID);\n    }\n\n    public static void setUser(User user) {\n        put(KEY_USER, user);\n    }\n\n    public static User getUser() {\n        return (User) get(KEY_USER);\n    }\n\n    public static void setJWtJti(String jti) {\n        put(KEY_JWT_JTI, jti);\n    }\n\n    public static String getJwtJti() {\n        return (String) get(KEY_JWT_JTI);\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/26", "ground_truth": "\n        LinkedHashMap<String, Object> hashMap = THREAD_LOCAL.get();\n        if (hashMap == null) {\n            hashMap = new LinkedHashMap<>();\n        }\n        hashMap.put(key, val);\n        THREAD_LOCAL.set(hashMap);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "context", "FCtx.java"], "context_start_lineno": 0, "function_name": "put", "left_context": "class FCtx {\n    private static final ThreadLocal<LinkedHashMap<String, Object>> THREAD_LOCAL =\n            new ThreadLocal<>();\n\n    private static final String KEY_USER_ID = \"user_id\";\n    private static final String KEY_USER = \"user\";\n    private static final String KEY_JWT_JTI = \"jwt_jti\";\n\n    public FCtx() {}\n\n    private static void put(String key, Object val) {", "right_context": "}\n\n    private static Object get(String key) {\n        return THREAD_LOCAL.get().getOrDefault(key, null);\n    }\n\n    public static void remove() {\n        THREAD_LOCAL.remove();\n    }\n\n    public static void setId(Integer id) {\n        put(KEY_USER_ID, id);\n    }\n\n    public static Integer getId() {\n        return (Integer) get(KEY_USER_ID);\n    }\n\n    public static void setUser(User user) {\n        put(KEY_USER, user);\n    }\n\n    public static User getUser() {\n        return (User) get(KEY_USER);\n    }\n\n    public static void setJWtJti(String jti) {\n        put(KEY_JWT_JTI, jti);\n    }\n\n    public static String getJwtJti() {\n        return (String) get(KEY_JWT_JTI);\n    }\n}", "class_name": "FCtx", "return_type": "void", "parameters": [{"type": "String", "name": "key"}, {"type": "Object", "name": "val"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/service/AdminPermissionService.java\n// --------------------------------------------------\n// HashMap<String,Integer> allSlugs();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AdminPermissionServiceImpl extends ServiceImpl<AdminPermissionMapper, AdminPermission>\n        implements AdminPermissionService {\n\n    @Override\n    public HashMap<String, Integer> allSlugs() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public List<AdminPermission> listOrderBySortAsc() {\n        return list(query().getWrapper().orderByAsc(\"group_name\", \"sort\"));\n    }\n\n    @Override\n    public HashMap<String, Boolean> getSlugsByIds(List<Integer> ids) {\n        List<AdminPermission> adminPermissions = list(query().getWrapper().in(\"id\", ids));\n        HashMap<String, Boolean> map = new HashMap<>();\n        for (AdminPermission adminPermission : adminPermissions) {\n            map.put(adminPermission.getSlug(), true);\n        }\n        return map;\n    }\n\n    @Override\n    public List<Integer> allIds() {\n        List<AdminPermission> permissions = list(query().getWrapper().eq(\"1\", \"1\").select(\"id\"));\n        List<Integer> ids = new ArrayList<>();\n        for (AdminPermission permission : permissions) {\n            ids.add(permission.getId());\n        }\n        return ids;\n    }\n\n    @Override\n    public List<AdminPermission> chunks(List<Integer> ids) {\n        return list(query().getWrapper().in(\"id\", ids));\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/45", "ground_truth": "\n        List<AdminPermission> data = list();\n        HashMap<String, Integer> map = new HashMap<>();\n        for (AdminPermission permission : data) {\n            map.put(permission.getSlug(), permission.getId());\n        }\n        return map;\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "service", "impl", "AdminPermissionServiceImpl.java"], "context_start_lineno": 0, "function_name": "allSlugs", "left_context": "class AdminPermissionServiceImpl extends ServiceImpl<AdminPermissionMapper, AdminPermission>\n        implements AdminPermissionService {\n\n    @Override\n    public HashMap<String, Integer> allSlugs() {", "right_context": "}\n\n    @Override\n    public List<AdminPermission> listOrderBySortAsc() {\n        return list(query().getWrapper().orderByAsc(\"group_name\", \"sort\"));\n    }\n\n    @Override\n    public HashMap<String, Boolean> getSlugsByIds(List<Integer> ids) {\n        List<AdminPermission> adminPermissions = list(query().getWrapper().in(\"id\", ids));\n        HashMap<String, Boolean> map = new HashMap<>();\n        for (AdminPermission adminPermission : adminPermissions) {\n            map.put(adminPermission.getSlug(), true);\n        }\n        return map;\n    }\n\n    @Override\n    public List<Integer> allIds() {\n        List<AdminPermission> permissions = list(query().getWrapper().eq(\"1\", \"1\").select(\"id\"));\n        List<Integer> ids = new ArrayList<>();\n        for (AdminPermission permission : permissions) {\n            ids.add(permission.getId());\n        }\n        return ids;\n    }\n\n    @Override\n    public List<AdminPermission> chunks(List<Integer> ids) {\n        return list(query().getWrapper().in(\"id\", ids));\n    }\n}", "class_name": "AdminPermissionServiceImpl", "return_type": "HashMap<String,Integer>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/service/LdapUserService.java\n// --------------------------------------------------\n// LdapUser findByUUID(String id);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/service/LdapUserService.java\n// --------------------------------------------------\n// LdapUser store(LdapTransformUser ldapTransformUser);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LdapUserServiceImpl extends ServiceImpl<LdapUserMapper, LdapUser>\n        implements LdapUserService {\n\n    @Override\n    public LdapUser findByUUID(String id) {\n        return getOne(query().getWrapper().eq(\"uuid\", id));\n    }\n\n    @Override\n    public LdapUser store(LdapTransformUser ldapTransformUser) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void updateUserId(Integer id, Integer userId) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setUserId(userId);\n        updateById(user);\n    }\n\n    @Override\n    public void updateCN(Integer id, String cn) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setCn(cn == null ? \"\" : cn);\n        updateById(user);\n    }\n\n    @Override\n    public void updateOU(Integer id, String newOU) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setOu(newOU == null ? \"\" : newOU);\n        updateById(user);\n    }\n\n    @Override\n    public void updateEmail(Integer id, String email) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setEmail(email == null ? \"\" : email);\n        updateById(user);\n    }\n\n    @Override\n    public void updateUid(Integer id, String uid) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setUid(uid);\n        updateById(user);\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/93", "ground_truth": "\n        LdapUser user = new LdapUser();\n        user.setUuid(ldapTransformUser.getId());\n        user.setCn(ldapTransformUser.getCn());\n        user.setDn(ldapTransformUser.getDn());\n        user.setUid(ldapTransformUser.getUid());\n        // ou\n        user.setOu(String.join(\",\", ldapTransformUser.getOu()));\n        // \u90ae\u7bb1\u53ef\u80fd\u4e0d\u5b58\u5728\n        if (StringUtil.isNotEmpty(ldapTransformUser.getEmail())) {\n            user.setEmail(ldapTransformUser.getEmail());\n        }\n        user.setCreatedAt(new Date());\n        user.setUpdatedAt(new Date());\n\n        save(user);\n\n        return user;\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "service", "impl", "LdapUserServiceImpl.java"], "context_start_lineno": 0, "function_name": "store", "left_context": "class LdapUserServiceImpl extends ServiceImpl<LdapUserMapper, LdapUser>\n        implements LdapUserService {\n\n    @Override\n    public LdapUser findByUUID(String id) {\n        return getOne(query().getWrapper().eq(\"uuid\", id));\n    }\n\n    @Override\n    public LdapUser store(LdapTransformUser ldapTransformUser) {", "right_context": "}\n\n    @Override\n    public void updateUserId(Integer id, Integer userId) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setUserId(userId);\n        updateById(user);\n    }\n\n    @Override\n    public void updateCN(Integer id, String cn) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setCn(cn == null ? \"\" : cn);\n        updateById(user);\n    }\n\n    @Override\n    public void updateOU(Integer id, String newOU) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setOu(newOU == null ? \"\" : newOU);\n        updateById(user);\n    }\n\n    @Override\n    public void updateEmail(Integer id, String email) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setEmail(email == null ? \"\" : email);\n        updateById(user);\n    }\n\n    @Override\n    public void updateUid(Integer id, String uid) {\n        LdapUser user = new LdapUser();\n        user.setId(id);\n        user.setUid(uid);\n        updateById(user);\n    }\n}", "class_name": "LdapUserServiceImpl", "return_type": "LdapUser", "parameters": [{"type": "LdapTransformUser", "name": "ldapTransformUser"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") public JsonResponse index(){\n//   return JsonResponse.data(departmentService.all().stream().collect(Collectors.groupingBy(Department::getParentId)));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}/courses\") public JsonResponse courses(@PathVariable(name=\"id\") Integer id,@RequestParam HashMap<String,Object> params) throws NotFoundException {\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   CoursePaginateFiler filer=new CoursePaginateFiler();\n//   filer.setIsShow(1);\n//   if (id == 0) {\n//     filer.setDepIds(\"0\");\n//   }\n//  else {\n//     Department department=departmentService.findOrFail(id);\n//     filer.setDepIds(department.getId() + \"\");\n//   }\n//   PaginationResult<Course> result=courseService.paginate(page,size,filer);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/password\") @SneakyThrows public JsonResponse password(@RequestBody @Validated LoginPasswordRequest req) throws LimitException {\n//   if (appConfigService.enabledLdapLogin()) {\n//     return JsonResponse.error(\"\u8bf7\u4f7f\u7528LDAP\u767b\u5f55\");\n//   }\n//   String email=req.getEmail();\n//   User user=userService.find(email);\n//   if (user == null) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   loginLimitCache.check(email);\n//   if (!HelperUtil.MD5(req.getPassword() + user.getSalt()).equals(user.getPassword())) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   if (user.getIsLock() == 1) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u5df2\u9501\u5b9a\u65e0\u6cd5\u767b\u5f55\");\n//   }\n//   loginLimitCache.destroy(email);\n//   return JsonResponse.data(loginBus.tokenByUser(user));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/ldap\") @SneakyThrows public JsonResponse ldap(@RequestBody @Validated LoginLdapRequest req){\n//   String username=req.getUsername();\n//   LdapConfig ldapConfig=appConfigService.ldapConfig();\n//   String mail=null;\n//   String uid=null;\n//   if (StringUtil.contains(username,\"@\")) {\n//     mail=username;\n//   }\n//  else {\n//     uid=username;\n//   }\n//   loginLimitCache.check(username);\n//   if (!loginLockCache.apply(username)) {\n//     return JsonResponse.error(\"\u8bf7\u7a0d\u5019\u518d\u8bd5\");\n//   }\n//   try {\n//     LdapTransformUser ldapTransformUser=LdapUtil.loginByMailOrUid(ldapConfig.getUrl(),ldapConfig.getAdminUser(),ldapConfig.getAdminPass(),ldapConfig.getBaseDN(),mail,uid,req.getPassword());\n//     if (ldapTransformUser == null) {\n//       return JsonResponse.error(\"\u767b\u5f55\u5931\u8d25.\u8bf7\u68c0\u67e5\u8d26\u53f7\u548c\u5bc6\u7801\");\n//     }\n//     HashMap<String,Object> data=loginBus.tokenByLdapTransformUser(ldapTransformUser);\n//     loginLimitCache.destroy(username);\n//     return JsonResponse.data(data);\n//   }\n//  catch (  ServiceException e) {\n//     return JsonResponse.error(e.getMessage());\n//   }\n// catch (  Exception e) {\n//     log.error(\"LDAP\u767b\u5f55\u5931\u8d25\",e);\n//     return JsonResponse.error(\"\u7cfb\u7edf\u9519\u8bef\");\n//   }\n//  finally {\n//     loginLockCache.release(username);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/logout\") public JsonResponse logout(){\n//   authService.logout();\n//   ctx.publishEvent(new UserLogoutEvent(this,FCtx.getId(),FCtx.getJwtJti()));\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/SystemController.java\n// --------------------------------------------------\n// @GetMapping(\"/config\") public JsonResponse config(){\n//   Map<String,String> configs=appConfigService.keyValues();\n//   HashMap<String,String> data=new HashMap<>();\n//   data.put(\"system-name\",configs.get(ConfigConstant.SYSTEM_NAME));\n//   data.put(\"system-logo\",configs.get(ConfigConstant.SYSTEM_LOGO));\n//   data.put(\"system-api-url\",configs.get(ConfigConstant.SYSTEM_API_URL));\n//   data.put(\"system-pc-url\",configs.get(ConfigConstant.SYSTEM_PC_URL));\n//   data.put(\"system-h5-url\",configs.get(ConfigConstant.SYSTEM_H5_URL));\n//   data.put(\"system-pc-index-footer-msg\",configs.get(\"system.pc_index_footer_msg\"));\n//   data.put(\"player-poster\",configs.get(\"player.poster\"));\n//   data.put(\"player-is-enabled-bullet-secret\",configs.get(\"player.is_enabled_bullet_secret\"));\n//   data.put(\"player-bullet-secret-text\",configs.get(\"player.bullet_secret_text\"));\n//   data.put(\"player-bullet-secret-color\",configs.get(\"player.bullet_secret_color\"));\n//   data.put(\"player-bullet-secret-opacity\",configs.get(\"player.bullet_secret_opacity\"));\n//   data.put(\"player-disabled-drag\",configs.get(\"player.disabled_drag\"));\n//   data.put(\"ldap-enabled\",configs.get(ConfigConstant.LDAP_ENABLED));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/avatar\") public JsonResponse changeAvatar(MultipartFile file){\n//   UserUploadImageLog log=uploadService.userAvatar(FCtx.getId(),file,FrontendConstant.USER_UPLOAD_IMAGE_TYPE_AVATAR,FrontendConstant.USER_UPLOAD_IMAGE_SCENE_AVATAR);\n//   userService.changeAvatar(FCtx.getId(),log.getUrl());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/password\") public JsonResponse changePassword(@RequestBody @Validated ChangePasswordRequest req) throws ServiceException {\n//   userService.passwordChange(FCtx.getUser(),req.getOldPassword(),req.getNewPassword());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/courses\") public JsonResponse courses(@RequestParam HashMap<String,Object> params){\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   if (depId == null || depId == 0) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   Integer categoryId=MapUtils.getInteger(params,\"category_id\");\n//   List<Integer> userJoinDepIds=userService.getDepIdsByUserId(FCtx.getId());\n//   if (userJoinDepIds == null) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u4efb\u4f55\u90e8\u95e8\");\n//   }\n//   if (!userJoinDepIds.contains(depId)) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u6240\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"learn_course_records\",new HashMap<>());\n//   List<Course> courses=new ArrayList<>();\n//   List<Course> depCourses=courseService.getDepCoursesAndShow(new ArrayList<>(){\n// {\n//       add(depId);\n//     }\n//   }\n// ,categoryId);\n//   List<Course> openCourses=courseService.getOpenCoursesAndShow(500,categoryId);\n//   if (depCourses != null && !depCourses.isEmpty()) {\n//     courses.addAll(depCourses);\n//   }\n//   if (openCourses != null && !openCourses.isEmpty()) {\n//     courses.addAll(openCourses);\n//   }\n//   if (!courses.isEmpty()) {\n//     courses=courses.stream().sorted(Comparator.comparing(Course::getPublishedAt,Comparator.nullsFirst(Date::compareTo)).reversed()).toList();\n//   }\n//   data.put(\"courses\",courses);\n//   List<Integer> courseIds=courses.stream().map(Course::getId).toList();\n//   Map<Integer,UserCourseRecord> learnCourseRecords=new HashMap<>();\n//   if (!courses.isEmpty()) {\n//     learnCourseRecords=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   }\n//   data.put(\"learn_course_records\",learnCourseRecords);\n//   int requiredCourseCount=0;\n//   int nunRequiredCourseCount=0;\n//   int requiredFinishedCourseCount=0;\n//   int nunRequiredFinishedCourseCount=0;\n//   int requiredHourCount=0;\n//   int nunRequiredHourCount=0;\n//   int requiredFinishedHourCount=0;\n//   int nunRequiredFinishedHourCount=0;\n//   Long todayLearnDuration=userLearnDurationStatsService.todayUserDuration(FCtx.getId());\n//   Long learnDuration=userLearnDurationStatsService.userDuration(FCtx.getId());\n//   if (!courses.isEmpty()) {\n//     for (    Course courseItem : courses) {\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredHourCount+=courseItem.getClassHour();\n//         requiredCourseCount+=1;\n//       }\n//  else {\n//         nunRequiredHourCount+=courseItem.getClassHour();\n//         nunRequiredCourseCount+=1;\n//       }\n//       UserCourseRecord learnRecord=learnCourseRecords.get(courseItem.getId());\n//       if (learnRecord == null) {\n//         continue;\n//       }\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           requiredFinishedCourseCount++;\n//         }\n//       }\n//  else {\n//         nunRequiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           nunRequiredFinishedCourseCount++;\n//         }\n//       }\n//     }\n//   }\n//   HashMap<String,Object> stats=new HashMap<>();\n//   stats.put(\"required_course_count\",requiredCourseCount);\n//   stats.put(\"nun_required_course_count\",nunRequiredCourseCount);\n//   stats.put(\"required_finished_course_count\",requiredFinishedCourseCount);\n//   stats.put(\"nun_required_finished_course_count\",nunRequiredFinishedCourseCount);\n//   stats.put(\"required_hour_count\",requiredHourCount);\n//   stats.put(\"nun_required_hour_count\",nunRequiredHourCount);\n//   stats.put(\"required_finished_hour_count\",requiredFinishedHourCount);\n//   stats.put(\"nun_required_finished_hour_count\",nunRequiredFinishedHourCount);\n//   stats.put(\"today_learn_duration\",todayLearnDuration);\n//   stats.put(\"learn_duration\",learnDuration);\n//   data.put(\"stats\",stats);\n//   data.put(\"user_course_hour_count\",userCourseHourRecordService.getUserCourseHourCount(FCtx.getId(),courseIds,null).stream().collect(Collectors.toMap(UserCourseHourRecordCourseCountMapper::getCourseId,UserCourseHourRecordCourseCountMapper::getTotal)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminLogController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.ADMIN_LOG) @GetMapping(\"/detail/{id}\") public JsonResponse detail(@PathVariable(name=\"id\") Integer id){\n//   Integer adminId=0;\n//   if (!backendBus.isSuperAdmin()) {\n//     adminId=BCtx.getId();\n//   }\n//   AdminLog log=adminLogService.find(id,adminId);\n//   if (log == null) {\n//     throw new ServiceException(\"\u65e5\u5fd7\u4e0d\u5b58\u5728\");\n//   }\n//   return JsonResponse.data(log);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/LoginController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") @Log(title=\"\u7ba1\u7406\u5458-\u8be6\u60c5\",businessType=BusinessTypeConstant.GET) public JsonResponse detail(){\n//   AdminUser user=BCtx.getAdminUser();\n//   HashMap<String,Boolean> permissions=backendBus.adminUserPermissions(user.getId());\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"permissions\",permissions);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/CourseController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}\") @SneakyThrows public JsonResponse detail(@PathVariable(name=\"id\") Integer id){\n//   Course course=courseService.findOrFail(id);\n//   List<CourseHour> courseHours=hourService.getHoursByCourseId(course.getId());\n//   List<CourseAttachment> attachments=attachmentService.getAttachmentsByCourseId(course.getId());\n//   if (null != attachments && !attachments.isEmpty()) {\n//     Map<Integer,Resource> resourceMap=resourceService.chunks(attachments.stream().map(CourseAttachment::getRid).toList()).stream().collect(Collectors.toMap(Resource::getId,Function.identity()));\n//     attachments.forEach(courseAttachment -> {\n//       Resource resource=resourceMap.get(courseAttachment.getRid());\n//       if (null != resource) {\n//         courseAttachment.setExt(resource.getExtension());\n//       }\n//     }\n// );\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"course\",course);\n//   data.put(\"chapters\",chapterService.getChaptersByCourseId(course.getId()));\n//   data.put(\"hours\",courseHours.stream().collect(Collectors.groupingBy(CourseHour::getChapterId)));\n//   data.put(\"learn_record\",userCourseRecordService.find(FCtx.getId(),course.getId()));\n//   data.put(\"learn_hour_records\",userCourseHourRecordService.getRecords(FCtx.getId(),course.getId()).stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e)));\n//   data.put(\"attachments\",attachments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") public JsonResponse detail(){\n//   User user=FCtx.getUser();\n//   List<Department> departments=new ArrayList<>();\n//   List<Integer> depIds=userService.getDepIdsByUserId(user.getId());\n//   if (depIds != null && !depIds.isEmpty()) {\n//     departments=departmentService.listByIds(depIds);\n//   }\n//   user.setIdCard(PrivacyUtil.hideIDCard(user.getIdCard()));\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"departments\",departments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HourController {\n\n    @Autowired private CourseService courseService;\n\n    @Autowired private CourseHourService hourService;\n\n    @Autowired private ResourceService resourceService;\n\n    @Autowired private UserCourseHourRecordService userCourseHourRecordService;\n\n    // ------- CACHE ----------\n    @Autowired private UserCanSeeCourseCache userCanSeeCourseCache;\n    @Autowired private CourseCache courseCache;\n\n    @Autowired private RedisDistributedLock redisDistributedLock;\n\n    @Autowired private UserLastLearnTimeCache userLastLearnTimeCache;\n\n    @Autowired private ApplicationContext ctx;\n\n    @GetMapping(\"/{id}\")\n    @SneakyThrows\n    public JsonResponse detail(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {<FILL_FUNCTION_BODY>}\n\n    @GetMapping(\"/{id}/play\")\n    @SneakyThrows\n    public JsonResponse play(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {\n        Course course = courseCache.findOrFail(courseId);\n        userCanSeeCourseCache.check(FCtx.getUser(), course, true);\n        CourseHour hour = hourService.findOrFail(id, courseId);\n        Resource resource = resourceService.findOrFail(hour.getRid());\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"url\", resource.getUrl()); // \u89c6\u9891\u64ad\u653e\u5730\u5740\n        data.put(\"extension\", resource.getExtension()); // \u89c6\u9891\u683c\u5f0f\n        data.put(\"duration\", resourceService.duration(resource.getId())); // \u89c6\u9891\u65f6\u957f\n\n        return JsonResponse.data(data);\n    }\n\n    @PostMapping(\"/{id}/record\")\n    @SneakyThrows\n    public JsonResponse record(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id,\n            @RequestBody @Validated CourseHourRecordRequest req) {\n        Integer duration = req.getDuration();\n        if (duration <= 0) {\n            return JsonResponse.error(\"duration\u53c2\u6570\u9519\u8bef\");\n        }\n\n        Course course = courseCache.findOrFail(courseId);\n        CourseHour hour = hourService.findOrFail(id, courseId);\n        userCanSeeCourseCache.check(FCtx.getUser(), course, true);\n\n        // \u83b7\u53d6\u9501\n        String lockKey = String.format(\"record:%d\", FCtx.getId());\n        boolean tryLock = redisDistributedLock.tryLock(lockKey, 5, TimeUnit.SECONDS);\n        if (!tryLock) {\n            return JsonResponse.success();\n        }\n\n        try {\n            boolean isFinished =\n                    userCourseHourRecordService.storeOrUpdate(\n                            FCtx.getId(),\n                            course.getId(),\n                            hour.getId(),\n                            duration,\n                            hour.getDuration());\n            if (isFinished) {\n                ctx.publishEvent(\n                        new UserCourseHourFinishedEvent(\n                                this, FCtx.getId(), courseId, hour.getId()));\n            }\n        } finally {\n            // \u6b64\u5904\u672a\u8003\u8651\u4e0a\u9762\u4ee3\u7801\u6267\u884c\u5931\u8d25\u91ca\u653e\u9501\n            redisDistributedLock.releaseLock(lockKey);\n        }\n\n        return JsonResponse.success();\n    }\n\n    @PostMapping(\"/{id}/ping\")\n    @SneakyThrows\n    public JsonResponse ping(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {\n        Course course = courseCache.findOrFail(courseId);\n        CourseHour hour = hourService.findOrFail(id, courseId);\n        userCanSeeCourseCache.check(FCtx.getUser(), course, true);\n\n        // \u83b7\u53d6\u9501\n        String lockKey = String.format(\"ping:%d\", FCtx.getId());\n        boolean tryLock = redisDistributedLock.tryLock(lockKey, 5, TimeUnit.SECONDS);\n        if (!tryLock) {\n            return JsonResponse.success();\n        }\n\n        try {\n            Long curTime = System.currentTimeMillis();\n\n            // \u6700\u8fd1\u4e00\u6b21\u5b66\u4e60\u65f6\u95f4\n            Long lastTime = userLastLearnTimeCache.get(FCtx.getId());\n            // \u6700\u5927\u5468\u671f\u4e3a10s+0.5s\u7684\u7f51\u7edc\u5ef6\u8fdf\n            if (lastTime == null || curTime - lastTime > 10500) {\n                lastTime = curTime - 10000;\n            }\n\n            userLastLearnTimeCache.put(FCtx.getId(), curTime);\n\n            ctx.publishEvent(\n                    new UserLearnCourseUpdateEvent(\n                            this, FCtx.getId(), course.getId(), hour.getId(), lastTime, curTime));\n        } finally {\n            // \u6b64\u5904\u672a\u8003\u8651\u4e0a\u9762\u4ee3\u7801\u6267\u884c\u5931\u8d25\u91ca\u653e\u9501\n            redisDistributedLock.releaseLock(lockKey);\n        }\n\n        return JsonResponse.success();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/100", "ground_truth": "\n        Course course = courseService.findOrFail(courseId);\n        CourseHour courseHour = hourService.findOrFail(id, courseId);\n\n        UserCourseHourRecord userCourseHourRecord = null;\n        if (FCtx.getId() != null && FCtx.getId() > 0) {\n            // \u5b66\u5458\u5df2\u767b\u5f55\n            userCourseHourRecord = userCourseHourRecordService.find(FCtx.getId(), courseId, id);\n        }\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"course\", course);\n        data.put(\"hour\", courseHour);\n        data.put(\"user_hour_record\", userCourseHourRecord);\n\n        return JsonResponse.data(data);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "frontend", "HourController.java"], "context_start_lineno": 0, "function_name": "detail", "left_context": "class HourController {\n\n    @Autowired private CourseService courseService;\n\n    @Autowired private CourseHourService hourService;\n\n    @Autowired private ResourceService resourceService;\n\n    @Autowired private UserCourseHourRecordService userCourseHourRecordService;\n\n    // ------- CACHE ----------\n    @Autowired private UserCanSeeCourseCache userCanSeeCourseCache;\n    @Autowired private CourseCache courseCache;\n\n    @Autowired private RedisDistributedLock redisDistributedLock;\n\n    @Autowired private UserLastLearnTimeCache userLastLearnTimeCache;\n\n    @Autowired private ApplicationContext ctx;\n\n    @GetMapping(\"/{id}\")\n    @SneakyThrows\n    public JsonResponse detail(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {", "right_context": "}\n\n    @GetMapping(\"/{id}/play\")\n    @SneakyThrows\n    public JsonResponse play(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {\n        Course course = courseCache.findOrFail(courseId);\n        userCanSeeCourseCache.check(FCtx.getUser(), course, true);\n        CourseHour hour = hourService.findOrFail(id, courseId);\n        Resource resource = resourceService.findOrFail(hour.getRid());\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"url\", resource.getUrl()); // \u89c6\u9891\u64ad\u653e\u5730\u5740\n        data.put(\"extension\", resource.getExtension()); // \u89c6\u9891\u683c\u5f0f\n        data.put(\"duration\", resourceService.duration(resource.getId())); // \u89c6\u9891\u65f6\u957f\n\n        return JsonResponse.data(data);\n    }\n\n    @PostMapping(\"/{id}/record\")\n    @SneakyThrows\n    public JsonResponse record(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id,\n            @RequestBody @Validated CourseHourRecordRequest req) {\n        Integer duration = req.getDuration();\n        if (duration <= 0) {\n            return JsonResponse.error(\"duration\u53c2\u6570\u9519\u8bef\");\n        }\n\n        Course course = courseCache.findOrFail(courseId);\n        CourseHour hour = hourService.findOrFail(id, courseId);\n        userCanSeeCourseCache.check(FCtx.getUser(), course, true);\n\n        // \u83b7\u53d6\u9501\n        String lockKey = String.format(\"record:%d\", FCtx.getId());\n        boolean tryLock = redisDistributedLock.tryLock(lockKey, 5, TimeUnit.SECONDS);\n        if (!tryLock) {\n            return JsonResponse.success();\n        }\n\n        try {\n            boolean isFinished =\n                    userCourseHourRecordService.storeOrUpdate(\n                            FCtx.getId(),\n                            course.getId(),\n                            hour.getId(),\n                            duration,\n                            hour.getDuration());\n            if (isFinished) {\n                ctx.publishEvent(\n                        new UserCourseHourFinishedEvent(\n                                this, FCtx.getId(), courseId, hour.getId()));\n            }\n        } finally {\n            // \u6b64\u5904\u672a\u8003\u8651\u4e0a\u9762\u4ee3\u7801\u6267\u884c\u5931\u8d25\u91ca\u653e\u9501\n            redisDistributedLock.releaseLock(lockKey);\n        }\n\n        return JsonResponse.success();\n    }\n\n    @PostMapping(\"/{id}/ping\")\n    @SneakyThrows\n    public JsonResponse ping(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {\n        Course course = courseCache.findOrFail(courseId);\n        CourseHour hour = hourService.findOrFail(id, courseId);\n        userCanSeeCourseCache.check(FCtx.getUser(), course, true);\n\n        // \u83b7\u53d6\u9501\n        String lockKey = String.format(\"ping:%d\", FCtx.getId());\n        boolean tryLock = redisDistributedLock.tryLock(lockKey, 5, TimeUnit.SECONDS);\n        if (!tryLock) {\n            return JsonResponse.success();\n        }\n\n        try {\n            Long curTime = System.currentTimeMillis();\n\n            // \u6700\u8fd1\u4e00\u6b21\u5b66\u4e60\u65f6\u95f4\n            Long lastTime = userLastLearnTimeCache.get(FCtx.getId());\n            // \u6700\u5927\u5468\u671f\u4e3a10s+0.5s\u7684\u7f51\u7edc\u5ef6\u8fdf\n            if (lastTime == null || curTime - lastTime > 10500) {\n                lastTime = curTime - 10000;\n            }\n\n            userLastLearnTimeCache.put(FCtx.getId(), curTime);\n\n            ctx.publishEvent(\n                    new UserLearnCourseUpdateEvent(\n                            this, FCtx.getId(), course.getId(), hour.getId(), lastTime, curTime));\n        } finally {\n            // \u6b64\u5904\u672a\u8003\u8651\u4e0a\u9762\u4ee3\u7801\u6267\u884c\u5931\u8d25\u91ca\u653e\u9501\n            redisDistributedLock.releaseLock(lockKey);\n        }\n\n        return JsonResponse.success();\n    }\n}", "class_name": "HourController", "return_type": "JsonResponse", "parameters": [{"type": "Integer", "name": "courseId"}, {"type": "Integer", "name": "id"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AdminUserLoginListener {\n\n    @Autowired private AdminUserService adminUserService;\n\n    @EventListener\n    public void updateLoginInfo(AdminUserLoginEvent event) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/125", "ground_truth": "\n        AdminUser adminUser = new AdminUser();\n\n        adminUser.setId(event.getAdminId());\n        adminUser.setLoginAt(event.getLoginAt());\n        adminUser.setLoginTimes(event.getLoginTimes() + 1);\n        adminUser.setLoginIp(event.getIp());\n\n        adminUserService.updateById(adminUser);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "listener", "AdminUserLoginListener.java"], "context_start_lineno": 0, "function_name": "updateLoginInfo", "left_context": "class AdminUserLoginListener {\n\n    @Autowired private AdminUserService adminUserService;\n\n    @EventListener\n    public void updateLoginInfo(AdminUserLoginEvent event) {", "right_context": "}\n}", "class_name": "AdminUserLoginListener", "return_type": "void", "parameters": [{"type": "AdminUserLoginEvent", "name": "event"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UserDepartment implements Serializable {\n    @JsonProperty(\"user_id\")\n    private Integer userId;\n\n    @JsonProperty(\"dep_id\")\n    private Integer depId;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n        result = prime * result + ((getDepId() == null) ? 0 : getDepId().hashCode());\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", depId=\").append(depId);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/131", "ground_truth": "\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        UserDepartment other = (UserDepartment) that;\n        return (this.getUserId() == null\n                        ? other.getUserId() == null\n                        : this.getUserId().equals(other.getUserId()))\n                && (this.getDepId() == null\n                        ? other.getDepId() == null\n                        : this.getDepId().equals(other.getDepId()));\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "domain", "UserDepartment.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class UserDepartment implements Serializable {\n    @JsonProperty(\"user_id\")\n    private Integer userId;\n\n    @JsonProperty(\"dep_id\")\n    private Integer depId;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {", "right_context": "}\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n        result = prime * result + ((getDepId() == null) ? 0 : getDepId().hashCode());\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", depId=\").append(depId);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "class_name": "UserDepartment", "return_type": "boolean", "parameters": [{"type": "Object", "name": "that"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminLogController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.ADMIN_LOG) @GetMapping(\"/index\") @Log(title=\"\u7ba1\u7406\u5458\u65e5\u5fd7-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   Integer adminId=MapUtils.getInteger(params,\"admin_id\");\n//   String adminName=MapUtils.getString(params,\"admin_name\");\n//   String module=MapUtils.getString(params,\"module\");\n//   String title=MapUtils.getString(params,\"title\");\n//   Integer opt=MapUtils.getInteger(params,\"opt\");\n//   String startTime=MapUtils.getString(params,\"start_time\");\n//   String endTime=MapUtils.getString(params,\"end_time\");\n//   AdminLogPaginateFiler filter=new AdminLogPaginateFiler();\n//   if (backendBus.isSuperAdmin()) {\n//     filter.setAdminId(adminId);\n//   }\n//  else {\n//     filter.setAdminId(BCtx.getId());\n//   }\n//   filter.setAdminName(adminName);\n//   filter.setModule(module);\n//   filter.setTitle(title);\n//   filter.setOpt(opt);\n//   filter.setStartTime(startTime);\n//   filter.setEndTime(endTime);\n//   filter.setSortField(sortField);\n//   filter.setSortAlgo(sortAlgo);\n//   PaginationResult<AdminLog> result=adminLogService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminRoleController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u7ba1\u7406\u5458\u89d2\u8272-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   List<AdminRole> data=roleService.list();\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseAttachmentDownloadLogController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u5b66\u5458\u4e0b\u8f7d\u8bfe\u4ef6\u8bb0\u5f55-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   Integer userId=MapUtils.getInteger(params,\"user_id\");\n//   Integer courseId=MapUtils.getInteger(params,\"course_id\");\n//   String title=MapUtils.getString(params,\"title\");\n//   Integer courserAttachmentId=MapUtils.getInteger(params,\"courser_attachment_id\");\n//   Integer rid=MapUtils.getInteger(params,\"rid\");\n//   CourseAttachmentDownloadLogPaginateFiler filter=new CourseAttachmentDownloadLogPaginateFiler();\n//   filter.setUserId(userId);\n//   filter.setCourseId(courseId);\n//   filter.setTitle(title);\n//   filter.setCourserAttachmentId(courserAttachmentId);\n//   filter.setRid(rid);\n//   filter.setSortField(sortField);\n//   filter.setSortAlgo(sortAlgo);\n//   PaginationResult<CourseAttachmentDownloadLog> result=courseAttachmentDownloadLogService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE) @GetMapping(\"/index\") @Log(title=\"\u7ebf\u4e0a\u8bfe-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String title=MapUtils.getString(params,\"title\");\n//   String depIds=MapUtils.getString(params,\"dep_ids\");\n//   String categoryIds=MapUtils.getString(params,\"category_ids\");\n//   Integer isRequired=MapUtils.getInteger(params,\"is_required\");\n//   CoursePaginateFiler filter=new CoursePaginateFiler();\n//   filter.setTitle(title);\n//   filter.setSortField(sortField);\n//   filter.setSortAlgo(sortAlgo);\n//   filter.setCategoryIds(categoryIds);\n//   filter.setDepIds(depIds);\n//   filter.setIsRequired(isRequired);\n//   if (!backendBus.isSuperAdmin()) {\n//     filter.setAdminId(BCtx.getId());\n//   }\n//   PaginationResult<Course> result=courseService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   List<Integer> courseIds=result.getData().stream().map(Course::getId).toList();\n//   data.put(\"course_category_ids\",courseService.getCategoryIdsGroup(courseIds));\n//   data.put(\"course_dep_ids\",courseService.getDepIdsGroup(courseIds));\n//   data.put(\"categories\",categoryService.id2name());\n//   data.put(\"departments\",departmentService.id2name());\n//   data.put(\"admin_users\",new HashMap<>());\n//   if (!result.getData().isEmpty()) {\n//     Map<Integer,String> adminUsers=adminUserService.chunks(result.getData().stream().map(Course::getAdminId).toList()).stream().collect(Collectors.toMap(AdminUser::getId,AdminUser::getName));\n//     data.put(\"admin_users\",adminUsers);\n//   }\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseUserController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE_USER) @GetMapping(\"/index\") @SneakyThrows @Log(title=\"\u7ebf\u4e0a\u8bfe-\u5b66\u4e60\u8bb0\u5f55-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@PathVariable(name=\"courseId\") Integer courseId,@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String name=MapUtils.getString(params,\"name\");\n//   String email=MapUtils.getString(params,\"email\");\n//   String idCard=MapUtils.getString(params,\"id_card\");\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   UserPaginateFilter filter=new UserPaginateFilter();\n//   filter.setName(name);\n//   filter.setEmail(email);\n//   filter.setSortAlgo(sortAlgo);\n//   filter.setSortField(sortField);\n//   filter.setIdCard(idCard);\n//   if (depId != null && depId > 0) {\n//     filter.setDepIds(new ArrayList<>(){\n// {\n//         add(depId);\n//       }\n//     }\n// );\n//   }\n//  else {\n//     List<Integer> depIds=courseService.getDepIdsByCourseId(courseId);\n//     if (depIds != null && depIds.size() > 0) {\n//       filter.setDepIds(depIds);\n//     }\n//   }\n//   PaginationResult<User> result=userService.paginate(page,size,filter);\n//   List<Integer> userIds=result.getData().stream().map(User::getId).toList();\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   data.put(\"user_course_records\",userCourseRecordService.chunk(userIds,new ArrayList<>(){\n// {\n//       add(courseId);\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(UserCourseRecord::getUserId,e -> e)));\n//   data.put(\"user_course_hour_user_first_at\",userCourseHourRecordService.getUserCourseHourUserFirstCreatedAt(courseId,userIds).stream().collect(Collectors.toMap(UserCourseHourRecordUserFirstCreatedAtMapper::getUserId,UserCourseHourRecordUserFirstCreatedAtMapper::getCreatedAt)));\n//   data.put(\"course\",courseService.findOrFail(courseId));\n//   data.put(\"user_dep_ids\",userService.getDepIdsGroup(result.getData().stream().map(User::getId).toList()));\n//   data.put(\"departments\",departmentService.id2name());\n//   List<UserCourseHourRecord> perUserEarliestRecords=userCourseHourRecordService.getCoursePerUserEarliestRecord(courseId);\n//   data.put(\"per_user_earliest_records\",perUserEarliestRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getUserId,e -> e)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/DashboardController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u4e3b\u9762\u677f\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"version\",SystemConstant.VERSION);\n//   data.put(\"user_total\",userService.total());\n//   data.put(\"user_today\",userService.todayCount());\n//   data.put(\"user_yesterday\",userService.yesterdayCount());\n//   data.put(\"course_total\",courseService.total());\n//   data.put(\"department_total\",departmentService.total());\n//   data.put(\"resource_category_total\",categoryService.total());\n//   data.put(\"admin_user_total\",adminUserService.total());\n//   data.put(\"resource_video_total\",resourceService.total(BackendConstant.RESOURCE_TYPE_VIDEO));\n//   data.put(\"resource_image_total\",resourceService.total(BackendConstant.RESOURCE_TYPE_IMAGE));\n//   data.put(\"user_learn_today\",userLearnDurationStatsService.todayTotal());\n//   data.put(\"user_learn_yesterday\",userLearnDurationStatsService.yesterdayTotal());\n//   List<UserLearnDurationStats> userLearnTop10=userLearnDurationStatsService.top10();\n//   Map<Integer,User> top10Users=userService.chunks(userLearnTop10.stream().map(UserLearnDurationStats::getUserId).toList(),new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"name\");\n//       add(\"avatar\");\n//       add(\"email\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(User::getId,e -> e));\n//   data.put(\"user_learn_top10\",userLearnTop10);\n//   data.put(\"user_learn_top10_users\",top10Users);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u90e8\u95e8-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"departments\",departmentService.groupByParent());\n//   data.put(\"dep_user_count\",departmentService.getDepartmentsUserCount());\n//   data.put(\"user_total\",userService.total());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/departments\") @Log(title=\"\u90e8\u95e8-\u5168\u90e8\u90e8\u95e8\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam(name=\"parent_id\",defaultValue=\"0\") Integer parentId){\n//   List<Department> departments=departmentService.listByParentId(parentId);\n//   return JsonResponse.data(departments);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceCategoryController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u8d44\u6e90-\u5206\u7c7b-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"categories\",categoryService.groupByParent());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceCategoryController.java\n// --------------------------------------------------\n// @GetMapping(\"/categories\") @Log(title=\"\u8d44\u6e90-\u5206\u7c7b-\u5168\u90e8\u5206\u7c7b\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam(name=\"parent_id\",defaultValue=\"0\") Integer parentId){\n//   List<Category> categories=categoryService.listByParentId(parentId);\n//   return JsonResponse.data(categories);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u8d44\u6e90-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String name=MapUtils.getString(params,\"name\");\n//   String type=MapUtils.getString(params,\"type\");\n//   String categoryIds=MapUtils.getString(params,\"category_ids\");\n//   if (type == null || type.trim().isEmpty()) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u8d44\u6e90\u7c7b\u578b\");\n//   }\n//   ResourcePaginateFilter filter=new ResourcePaginateFilter();\n//   filter.setSortAlgo(sortAlgo);\n//   filter.setSortField(sortField);\n//   filter.setType(type);\n//   filter.setCategoryIds(categoryIds);\n//   filter.setName(name);\n//   if (!backendBus.isSuperAdmin()) {\n//     filter.setAdminId(BCtx.getId());\n//   }\n//   PaginationResult<Resource> result=resourceService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"result\",result);\n//   if (type.equals(BackendConstant.RESOURCE_TYPE_VIDEO)) {\n//     List<ResourceVideo> resourceVideos=resourceVideoService.chunksByRids(result.getData().stream().map(Resource::getId).toList());\n//     Map<Integer,ResourceVideo> resourceVideosExtra=resourceVideos.stream().collect(Collectors.toMap(ResourceVideo::getRid,e -> e));\n//     data.put(\"videos_extra\",resourceVideosExtra);\n//   }\n//   data.put(\"admin_users\",new HashMap<>());\n//   if (!result.getData().isEmpty()) {\n//     Map<Integer,String> adminUsers=adminUserService.chunks(result.getData().stream().map(Resource::getAdminId).toList()).stream().collect(Collectors.toMap(AdminUser::getId,AdminUser::getName));\n//     data.put(\"admin_users\",adminUsers);\n//   }\n//   if (!type.equals(BackendConstant.RESOURCE_TYPE_VIDEO) && !type.equals(BackendConstant.RESOURCE_TYPE_IMAGE)) {\n//     filter.setType(BackendConstant.RESOURCE_TYPE_ATTACHMENT);\n//     data.put(\"existing_types\",resourceService.paginateType(filter));\n//   }\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/UserController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.USER_INDEX) @GetMapping(\"/index\") @Log(title=\"\u5b66\u5458-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String name=MapUtils.getString(params,\"name\");\n//   String email=MapUtils.getString(params,\"email\");\n//   String idCard=MapUtils.getString(params,\"id_card\");\n//   Integer isActive=MapUtils.getInteger(params,\"is_active\");\n//   Integer isLock=MapUtils.getInteger(params,\"is_lock\");\n//   Integer isVerify=MapUtils.getInteger(params,\"is_verify\");\n//   Integer isSetPassword=MapUtils.getInteger(params,\"is_set_password\");\n//   String createdAt=MapUtils.getString(params,\"created_at\");\n//   String depIdsStr=MapUtils.getString(params,\"dep_ids\");\n//   List<Integer> depIds=null;\n//   if (depIdsStr != null && !depIdsStr.trim().isEmpty()) {\n//     if (\"0\".equals(depIdsStr)) {\n//       depIds=new ArrayList<>();\n//     }\n//  else {\n//       depIds=Arrays.stream(depIdsStr.split(\",\")).map(Integer::valueOf).toList();\n//     }\n//   }\n//   List<Integer> finalDepIds=depIds;\n//   UserPaginateFilter filter=new UserPaginateFilter(){\n// {\n//       setName(name);\n//       setEmail(email);\n//       setIdCard(idCard);\n//       setIsActive(isActive);\n//       setIsLock(isLock);\n//       setIsVerify(isVerify);\n//       setIsSetPassword(isSetPassword);\n//       setDepIds(finalDepIds);\n//       setSortAlgo(sortAlgo);\n//       setSortField(sortField);\n//     }\n//   }\n// ;\n//   if (createdAt != null && !createdAt.trim().isEmpty()) {\n//     filter.setCreatedAt(createdAt.split(\",\"));\n//   }\n//   PaginationResult<User> result=userService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   data.put(\"user_dep_ids\",userService.getDepIdsGroup(result.getData().stream().map(User::getId).toList()));\n//   data.put(\"departments\",departmentService.id2name());\n//   data.put(\"pure_total\",userService.total());\n//   data.put(\"dep_user_count\",departmentService.getDepartmentsUserCount());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") public JsonResponse index(){\n//   return JsonResponse.data(departmentService.all().stream().collect(Collectors.groupingBy(Department::getParentId)));\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AppConfigController {\n\n    @Autowired private AppConfigService configService;\n\n    @BackendPermission(slug = BPermissionConstant.SYSTEM_CONFIG)\n    @GetMapping(\"\")\n    @Log(title = \"\u7cfb\u7edf\u914d\u7f6e-\u8bfb\u53d6\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse index() {<FILL_FUNCTION_BODY>}\n\n    @BackendPermission(slug = BPermissionConstant.SYSTEM_CONFIG)\n    @PutMapping(\"\")\n    @Log(title = \"\u7cfb\u7edf\u914d\u7f6e-\u4fdd\u5b58\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse save(@RequestBody AppConfigRequest req) {\n        HashMap<String, String> data = new HashMap<>();\n        req.getData()\n                .forEach(\n                        (key, value) -> {\n                            // \u8fc7\u6ee4\u6389\u672a\u53d8\u52a8\u7684private\u914d\u7f6e\n                            if (SystemConstant.CONFIG_MASK.equals(value)) {\n                                return;\n                            }\n                            String saveValue = value;\n\n                            // LDAP\u7684url\u914d\u7f6e\u81ea\u52a8\u52a0ldap://\u5904\u7406\n                            if (ConfigConstant.LDAP_URL.equals(key)\n                                    && StringUtil.isNotEmpty(value)\n                                    && !StringUtil.startsWithIgnoreCase(value, \"ldap://\")) {\n                                saveValue = \"ldap://\" + saveValue;\n                            }\n\n                            data.put(key, saveValue);\n                        });\n        configService.saveFromMap(data);\n        return JsonResponse.data(null);\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/142", "ground_truth": "\n        List<AppConfig> configs = configService.allShow();\n        List<AppConfig> data = new ArrayList<>();\n        for (AppConfig item : configs) {\n            if (item.getIsPrivate() == 1 && StringUtil.isNotEmpty(item.getKeyValue())) {\n                item.setKeyValue(SystemConstant.CONFIG_MASK);\n            }\n            data.add(item);\n        }\n        return JsonResponse.data(data);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "backend", "AppConfigController.java"], "context_start_lineno": 0, "function_name": "index", "left_context": "class AppConfigController {\n\n    @Autowired private AppConfigService configService;\n\n    @BackendPermission(slug = BPermissionConstant.SYSTEM_CONFIG)\n    @GetMapping(\"\")\n    @Log(title = \"\u7cfb\u7edf\u914d\u7f6e-\u8bfb\u53d6\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse index() {", "right_context": "}\n\n    @BackendPermission(slug = BPermissionConstant.SYSTEM_CONFIG)\n    @PutMapping(\"\")\n    @Log(title = \"\u7cfb\u7edf\u914d\u7f6e-\u4fdd\u5b58\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse save(@RequestBody AppConfigRequest req) {\n        HashMap<String, String> data = new HashMap<>();\n        req.getData()\n                .forEach(\n                        (key, value) -> {\n                            // \u8fc7\u6ee4\u6389\u672a\u53d8\u52a8\u7684private\u914d\u7f6e\n                            if (SystemConstant.CONFIG_MASK.equals(value)) {\n                                return;\n                            }\n                            String saveValue = value;\n\n                            // LDAP\u7684url\u914d\u7f6e\u81ea\u52a8\u52a0ldap://\u5904\u7406\n                            if (ConfigConstant.LDAP_URL.equals(key)\n                                    && StringUtil.isNotEmpty(value)\n                                    && !StringUtil.startsWithIgnoreCase(value, \"ldap://\")) {\n                                saveValue = \"ldap://\" + saveValue;\n                            }\n\n                            data.put(key, saveValue);\n                        });\n        configService.saveFromMap(data);\n        return JsonResponse.data(null);\n    }\n}", "class_name": "AppConfigController", "return_type": "JsonResponse", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ResourceVideoServiceImpl extends ServiceImpl<ResourceVideoMapper, ResourceVideo>\n        implements ResourceVideoService {\n    @Override\n    public void create(Integer resourceId, Integer duration, String poster) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void removeByRid(Integer resourceId) {\n        remove(query().getWrapper().eq(\"rid\", resourceId));\n    }\n\n    @Override\n    public List<ResourceVideo> chunksByRids(List<Integer> resourceIds) {\n        if (resourceIds == null || resourceIds.size() == 0) {\n            return new ArrayList<>();\n        }\n        return list(query().getWrapper().in(\"rid\", resourceIds));\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/157", "ground_truth": "\n        ResourceVideo video = new ResourceVideo();\n        video.setRid(resourceId);\n        video.setDuration(duration);\n        video.setPoster(poster);\n        video.setCreatedAt(new Date());\n        save(video);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-resource", "src", "main", "java", "xyz", "playedu", "resource", "service", "impl", "ResourceVideoServiceImpl.java"], "context_start_lineno": 0, "function_name": "create", "left_context": "class ResourceVideoServiceImpl extends ServiceImpl<ResourceVideoMapper, ResourceVideo>\n        implements ResourceVideoService {\n    @Override\n    public void create(Integer resourceId, Integer duration, String poster) {", "right_context": "}\n\n    @Override\n    public void removeByRid(Integer resourceId) {\n        remove(query().getWrapper().eq(\"rid\", resourceId));\n    }\n\n    @Override\n    public List<ResourceVideo> chunksByRids(List<Integer> resourceIds) {\n        if (resourceIds == null || resourceIds.size() == 0) {\n            return new ArrayList<>();\n        }\n        return list(query().getWrapper().in(\"rid\", resourceIds));\n    }\n}", "class_name": "ResourceVideoServiceImpl", "return_type": "void", "parameters": [{"type": "Integer", "name": "resourceId"}, {"type": "Integer", "name": "duration"}, {"type": "String", "name": "poster"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LDAPSchedule {\n\n    @Autowired private LDAPBus ldapBus;\n\n    private int times;\n\n    @Scheduled(fixedRate = 3600000)\n    public void sync() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/165", "ground_truth": "\n        // \u7cfb\u7edf\u521a\u542f\u52a8\u4e0d\u6267\u884c\n        if (times == 0) {\n            times++;\n            return;\n        }\n\n        if (!ldapBus.enabledLDAP()) {\n            log.info(\"\u672a\u914d\u7f6eLDAP\u670d\u52a1\");\n            return;\n        }\n\n        try {\n            ldapBus.departmentSync();\n        } catch (Exception e) {\n            log.error(\"LDAP-\u90e8\u95e8\u540c\u6b65\u5931\u8d25\", e);\n        }\n\n        try {\n            ldapBus.userSync();\n        } catch (Exception e) {\n            log.error(\"LDAP-\u5b66\u5458\u540c\u6b65\u5931\u8d25\", e);\n        }\n\n        log.info(\"LDAP\u540c\u6b65\u6210\u529f\");\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "schedule", "LDAPSchedule.java"], "context_start_lineno": 0, "function_name": "sync", "left_context": "class LDAPSchedule {\n\n    @Autowired private LDAPBus ldapBus;\n\n    private int times;\n\n    @Scheduled(fixedRate = 3600000)\n    public void sync() {", "right_context": "}\n}", "class_name": "LDAPSchedule", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UserCourseRecord implements Serializable {\n    /** */\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /** */\n    @JsonProperty(\"user_id\")\n    private Integer userId;\n\n    /** */\n    @JsonProperty(\"course_id\")\n    private Integer courseId;\n\n    /** \u8bfe\u65f6\u6570\u91cf */\n    @JsonProperty(\"hour_count\")\n    private Integer hourCount;\n\n    /** \u5df2\u5b8c\u6210\u8bfe\u65f6\u6570 */\n    @JsonProperty(\"finished_count\")\n    private Integer finishedCount;\n\n    /** \u8fdb\u5ea6 */\n    private Integer progress;\n\n    /** \u770b\u5b8c[1:\u662f,0:\u5426] */\n    @JsonProperty(\"is_finished\")\n    private Integer isFinished;\n\n    /** \u770b\u5b8c\u65f6\u95f4 */\n    @JsonProperty(\"finished_at\")\n    private Date finishedAt;\n\n    /** */\n    @JsonProperty(\"created_at\")\n    private Date createdAt;\n\n    /** */\n    @JsonProperty(\"updated_at\")\n    private Date updatedAt;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        UserCourseRecord other = (UserCourseRecord) that;\n        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))\n                && (this.getUserId() == null\n                        ? other.getUserId() == null\n                        : this.getUserId().equals(other.getUserId()))\n                && (this.getCourseId() == null\n                        ? other.getCourseId() == null\n                        : this.getCourseId().equals(other.getCourseId()))\n                && (this.getHourCount() == null\n                        ? other.getHourCount() == null\n                        : this.getHourCount().equals(other.getHourCount()))\n                && (this.getFinishedCount() == null\n                        ? other.getFinishedCount() == null\n                        : this.getFinishedCount().equals(other.getFinishedCount()))\n                && (this.getProgress() == null\n                        ? other.getProgress() == null\n                        : this.getProgress().equals(other.getProgress()))\n                && (this.getIsFinished() == null\n                        ? other.getIsFinished() == null\n                        : this.getIsFinished().equals(other.getIsFinished()))\n                && (this.getFinishedAt() == null\n                        ? other.getFinishedAt() == null\n                        : this.getFinishedAt().equals(other.getFinishedAt()))\n                && (this.getCreatedAt() == null\n                        ? other.getCreatedAt() == null\n                        : this.getCreatedAt().equals(other.getCreatedAt()))\n                && (this.getUpdatedAt() == null\n                        ? other.getUpdatedAt() == null\n                        : this.getUpdatedAt().equals(other.getUpdatedAt()));\n    }\n\n    @Override\n    public int hashCode() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", id=\").append(id);\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", courseId=\").append(courseId);\n        sb.append(\", hourCount=\").append(hourCount);\n        sb.append(\", finishedCount=\").append(finishedCount);\n        sb.append(\", progress=\").append(progress);\n        sb.append(\", isFinished=\").append(isFinished);\n        sb.append(\", finishedAt=\").append(finishedAt);\n        sb.append(\", createdAt=\").append(createdAt);\n        sb.append(\", updatedAt=\").append(updatedAt);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/181", "ground_truth": "\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());\n        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n        result = prime * result + ((getCourseId() == null) ? 0 : getCourseId().hashCode());\n        result = prime * result + ((getHourCount() == null) ? 0 : getHourCount().hashCode());\n        result =\n                prime * result + ((getFinishedCount() == null) ? 0 : getFinishedCount().hashCode());\n        result = prime * result + ((getProgress() == null) ? 0 : getProgress().hashCode());\n        result = prime * result + ((getIsFinished() == null) ? 0 : getIsFinished().hashCode());\n        result = prime * result + ((getFinishedAt() == null) ? 0 : getFinishedAt().hashCode());\n        result = prime * result + ((getCreatedAt() == null) ? 0 : getCreatedAt().hashCode());\n        result = prime * result + ((getUpdatedAt() == null) ? 0 : getUpdatedAt().hashCode());\n        return result;\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-course", "src", "main", "java", "xyz", "playedu", "course", "domain", "UserCourseRecord.java"], "context_start_lineno": 0, "function_name": "hashCode", "left_context": "class UserCourseRecord implements Serializable {\n    /** */\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /** */\n    @JsonProperty(\"user_id\")\n    private Integer userId;\n\n    /** */\n    @JsonProperty(\"course_id\")\n    private Integer courseId;\n\n    /** \u8bfe\u65f6\u6570\u91cf */\n    @JsonProperty(\"hour_count\")\n    private Integer hourCount;\n\n    /** \u5df2\u5b8c\u6210\u8bfe\u65f6\u6570 */\n    @JsonProperty(\"finished_count\")\n    private Integer finishedCount;\n\n    /** \u8fdb\u5ea6 */\n    private Integer progress;\n\n    /** \u770b\u5b8c[1:\u662f,0:\u5426] */\n    @JsonProperty(\"is_finished\")\n    private Integer isFinished;\n\n    /** \u770b\u5b8c\u65f6\u95f4 */\n    @JsonProperty(\"finished_at\")\n    private Date finishedAt;\n\n    /** */\n    @JsonProperty(\"created_at\")\n    private Date createdAt;\n\n    /** */\n    @JsonProperty(\"updated_at\")\n    private Date updatedAt;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        UserCourseRecord other = (UserCourseRecord) that;\n        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))\n                && (this.getUserId() == null\n                        ? other.getUserId() == null\n                        : this.getUserId().equals(other.getUserId()))\n                && (this.getCourseId() == null\n                        ? other.getCourseId() == null\n                        : this.getCourseId().equals(other.getCourseId()))\n                && (this.getHourCount() == null\n                        ? other.getHourCount() == null\n                        : this.getHourCount().equals(other.getHourCount()))\n                && (this.getFinishedCount() == null\n                        ? other.getFinishedCount() == null\n                        : this.getFinishedCount().equals(other.getFinishedCount()))\n                && (this.getProgress() == null\n                        ? other.getProgress() == null\n                        : this.getProgress().equals(other.getProgress()))\n                && (this.getIsFinished() == null\n                        ? other.getIsFinished() == null\n                        : this.getIsFinished().equals(other.getIsFinished()))\n                && (this.getFinishedAt() == null\n                        ? other.getFinishedAt() == null\n                        : this.getFinishedAt().equals(other.getFinishedAt()))\n                && (this.getCreatedAt() == null\n                        ? other.getCreatedAt() == null\n                        : this.getCreatedAt().equals(other.getCreatedAt()))\n                && (this.getUpdatedAt() == null\n                        ? other.getUpdatedAt() == null\n                        : this.getUpdatedAt().equals(other.getUpdatedAt()));\n    }\n\n    @Override\n    public int hashCode() {", "right_context": "}\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", id=\").append(id);\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", courseId=\").append(courseId);\n        sb.append(\", hourCount=\").append(hourCount);\n        sb.append(\", finishedCount=\").append(finishedCount);\n        sb.append(\", progress=\").append(progress);\n        sb.append(\", isFinished=\").append(isFinished);\n        sb.append(\", finishedAt=\").append(finishedAt);\n        sb.append(\", createdAt=\").append(createdAt);\n        sb.append(\", updatedAt=\").append(updatedAt);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "class_name": "UserCourseRecord", "return_type": "int", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}/courses\") public JsonResponse courses(@PathVariable(name=\"id\") Integer id,@RequestParam HashMap<String,Object> params) throws NotFoundException {\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   CoursePaginateFiler filer=new CoursePaginateFiler();\n//   filer.setIsShow(1);\n//   if (id == 0) {\n//     filer.setDepIds(\"0\");\n//   }\n//  else {\n//     Department department=departmentService.findOrFail(id);\n//     filer.setDepIds(department.getId() + \"\");\n//   }\n//   PaginationResult<Course> result=courseService.paginate(page,size,filer);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}\") @SneakyThrows public JsonResponse detail(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseService.findOrFail(courseId);\n//   CourseHour courseHour=hourService.findOrFail(id,courseId);\n//   UserCourseHourRecord userCourseHourRecord=null;\n//   if (FCtx.getId() != null && FCtx.getId() > 0) {\n//     userCourseHourRecord=userCourseHourRecordService.find(FCtx.getId(),courseId,id);\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"course\",course);\n//   data.put(\"hour\",courseHour);\n//   data.put(\"user_hour_record\",userCourseHourRecord);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}/play\") @SneakyThrows public JsonResponse play(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseCache.findOrFail(courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   Resource resource=resourceService.findOrFail(hour.getRid());\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"url\",resource.getUrl());\n//   data.put(\"extension\",resource.getExtension());\n//   data.put(\"duration\",resourceService.duration(resource.getId()));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @PostMapping(\"/{id}/record\") @SneakyThrows public JsonResponse record(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id,@RequestBody @Validated CourseHourRecordRequest req){\n//   Integer duration=req.getDuration();\n//   if (duration <= 0) {\n//     return JsonResponse.error(\"duration\u53c2\u6570\u9519\u8bef\");\n//   }\n//   Course course=courseCache.findOrFail(courseId);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   String lockKey=String.format(\"record:%d\",FCtx.getId());\n//   boolean tryLock=redisDistributedLock.tryLock(lockKey,5,TimeUnit.SECONDS);\n//   if (!tryLock) {\n//     return JsonResponse.success();\n//   }\n//   try {\n//     boolean isFinished=userCourseHourRecordService.storeOrUpdate(FCtx.getId(),course.getId(),hour.getId(),duration,hour.getDuration());\n//     if (isFinished) {\n//       ctx.publishEvent(new UserCourseHourFinishedEvent(this,FCtx.getId(),courseId,hour.getId()));\n//     }\n//   }\n//   finally {\n//     redisDistributedLock.releaseLock(lockKey);\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @PostMapping(\"/{id}/ping\") @SneakyThrows public JsonResponse ping(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseCache.findOrFail(courseId);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   String lockKey=String.format(\"ping:%d\",FCtx.getId());\n//   boolean tryLock=redisDistributedLock.tryLock(lockKey,5,TimeUnit.SECONDS);\n//   if (!tryLock) {\n//     return JsonResponse.success();\n//   }\n//   try {\n//     Long curTime=System.currentTimeMillis();\n//     Long lastTime=userLastLearnTimeCache.get(FCtx.getId());\n//     if (lastTime == null || curTime - lastTime > 10500) {\n//       lastTime=curTime - 10000;\n//     }\n//     userLastLearnTimeCache.put(FCtx.getId(),curTime);\n//     ctx.publishEvent(new UserLearnCourseUpdateEvent(this,FCtx.getId(),course.getId(),hour.getId(),lastTime,curTime));\n//   }\n//   finally {\n//     redisDistributedLock.releaseLock(lockKey);\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/password\") @SneakyThrows public JsonResponse password(@RequestBody @Validated LoginPasswordRequest req) throws LimitException {\n//   if (appConfigService.enabledLdapLogin()) {\n//     return JsonResponse.error(\"\u8bf7\u4f7f\u7528LDAP\u767b\u5f55\");\n//   }\n//   String email=req.getEmail();\n//   User user=userService.find(email);\n//   if (user == null) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   loginLimitCache.check(email);\n//   if (!HelperUtil.MD5(req.getPassword() + user.getSalt()).equals(user.getPassword())) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   if (user.getIsLock() == 1) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u5df2\u9501\u5b9a\u65e0\u6cd5\u767b\u5f55\");\n//   }\n//   loginLimitCache.destroy(email);\n//   return JsonResponse.data(loginBus.tokenByUser(user));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/ldap\") @SneakyThrows public JsonResponse ldap(@RequestBody @Validated LoginLdapRequest req){\n//   String username=req.getUsername();\n//   LdapConfig ldapConfig=appConfigService.ldapConfig();\n//   String mail=null;\n//   String uid=null;\n//   if (StringUtil.contains(username,\"@\")) {\n//     mail=username;\n//   }\n//  else {\n//     uid=username;\n//   }\n//   loginLimitCache.check(username);\n//   if (!loginLockCache.apply(username)) {\n//     return JsonResponse.error(\"\u8bf7\u7a0d\u5019\u518d\u8bd5\");\n//   }\n//   try {\n//     LdapTransformUser ldapTransformUser=LdapUtil.loginByMailOrUid(ldapConfig.getUrl(),ldapConfig.getAdminUser(),ldapConfig.getAdminPass(),ldapConfig.getBaseDN(),mail,uid,req.getPassword());\n//     if (ldapTransformUser == null) {\n//       return JsonResponse.error(\"\u767b\u5f55\u5931\u8d25.\u8bf7\u68c0\u67e5\u8d26\u53f7\u548c\u5bc6\u7801\");\n//     }\n//     HashMap<String,Object> data=loginBus.tokenByLdapTransformUser(ldapTransformUser);\n//     loginLimitCache.destroy(username);\n//     return JsonResponse.data(data);\n//   }\n//  catch (  ServiceException e) {\n//     return JsonResponse.error(e.getMessage());\n//   }\n// catch (  Exception e) {\n//     log.error(\"LDAP\u767b\u5f55\u5931\u8d25\",e);\n//     return JsonResponse.error(\"\u7cfb\u7edf\u9519\u8bef\");\n//   }\n//  finally {\n//     loginLockCache.release(username);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/logout\") public JsonResponse logout(){\n//   authService.logout();\n//   ctx.publishEvent(new UserLogoutEvent(this,FCtx.getId(),FCtx.getJwtJti()));\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/SystemController.java\n// --------------------------------------------------\n// @GetMapping(\"/config\") public JsonResponse config(){\n//   Map<String,String> configs=appConfigService.keyValues();\n//   HashMap<String,String> data=new HashMap<>();\n//   data.put(\"system-name\",configs.get(ConfigConstant.SYSTEM_NAME));\n//   data.put(\"system-logo\",configs.get(ConfigConstant.SYSTEM_LOGO));\n//   data.put(\"system-api-url\",configs.get(ConfigConstant.SYSTEM_API_URL));\n//   data.put(\"system-pc-url\",configs.get(ConfigConstant.SYSTEM_PC_URL));\n//   data.put(\"system-h5-url\",configs.get(ConfigConstant.SYSTEM_H5_URL));\n//   data.put(\"system-pc-index-footer-msg\",configs.get(\"system.pc_index_footer_msg\"));\n//   data.put(\"player-poster\",configs.get(\"player.poster\"));\n//   data.put(\"player-is-enabled-bullet-secret\",configs.get(\"player.is_enabled_bullet_secret\"));\n//   data.put(\"player-bullet-secret-text\",configs.get(\"player.bullet_secret_text\"));\n//   data.put(\"player-bullet-secret-color\",configs.get(\"player.bullet_secret_color\"));\n//   data.put(\"player-bullet-secret-opacity\",configs.get(\"player.bullet_secret_opacity\"));\n//   data.put(\"player-disabled-drag\",configs.get(\"player.disabled_drag\"));\n//   data.put(\"ldap-enabled\",configs.get(ConfigConstant.LDAP_ENABLED));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") public JsonResponse detail(){\n//   User user=FCtx.getUser();\n//   List<Department> departments=new ArrayList<>();\n//   List<Integer> depIds=userService.getDepIdsByUserId(user.getId());\n//   if (depIds != null && !depIds.isEmpty()) {\n//     departments=departmentService.listByIds(depIds);\n//   }\n//   user.setIdCard(PrivacyUtil.hideIDCard(user.getIdCard()));\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"departments\",departments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/avatar\") public JsonResponse changeAvatar(MultipartFile file){\n//   UserUploadImageLog log=uploadService.userAvatar(FCtx.getId(),file,FrontendConstant.USER_UPLOAD_IMAGE_TYPE_AVATAR,FrontendConstant.USER_UPLOAD_IMAGE_SCENE_AVATAR);\n//   userService.changeAvatar(FCtx.getId(),log.getUrl());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/password\") public JsonResponse changePassword(@RequestBody @Validated ChangePasswordRequest req) throws ServiceException {\n//   userService.passwordChange(FCtx.getUser(),req.getOldPassword(),req.getNewPassword());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/courses\") public JsonResponse courses(@RequestParam HashMap<String,Object> params){\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   if (depId == null || depId == 0) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   Integer categoryId=MapUtils.getInteger(params,\"category_id\");\n//   List<Integer> userJoinDepIds=userService.getDepIdsByUserId(FCtx.getId());\n//   if (userJoinDepIds == null) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u4efb\u4f55\u90e8\u95e8\");\n//   }\n//   if (!userJoinDepIds.contains(depId)) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u6240\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"learn_course_records\",new HashMap<>());\n//   List<Course> courses=new ArrayList<>();\n//   List<Course> depCourses=courseService.getDepCoursesAndShow(new ArrayList<>(){\n// {\n//       add(depId);\n//     }\n//   }\n// ,categoryId);\n//   List<Course> openCourses=courseService.getOpenCoursesAndShow(500,categoryId);\n//   if (depCourses != null && !depCourses.isEmpty()) {\n//     courses.addAll(depCourses);\n//   }\n//   if (openCourses != null && !openCourses.isEmpty()) {\n//     courses.addAll(openCourses);\n//   }\n//   if (!courses.isEmpty()) {\n//     courses=courses.stream().sorted(Comparator.comparing(Course::getPublishedAt,Comparator.nullsFirst(Date::compareTo)).reversed()).toList();\n//   }\n//   data.put(\"courses\",courses);\n//   List<Integer> courseIds=courses.stream().map(Course::getId).toList();\n//   Map<Integer,UserCourseRecord> learnCourseRecords=new HashMap<>();\n//   if (!courses.isEmpty()) {\n//     learnCourseRecords=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   }\n//   data.put(\"learn_course_records\",learnCourseRecords);\n//   int requiredCourseCount=0;\n//   int nunRequiredCourseCount=0;\n//   int requiredFinishedCourseCount=0;\n//   int nunRequiredFinishedCourseCount=0;\n//   int requiredHourCount=0;\n//   int nunRequiredHourCount=0;\n//   int requiredFinishedHourCount=0;\n//   int nunRequiredFinishedHourCount=0;\n//   Long todayLearnDuration=userLearnDurationStatsService.todayUserDuration(FCtx.getId());\n//   Long learnDuration=userLearnDurationStatsService.userDuration(FCtx.getId());\n//   if (!courses.isEmpty()) {\n//     for (    Course courseItem : courses) {\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredHourCount+=courseItem.getClassHour();\n//         requiredCourseCount+=1;\n//       }\n//  else {\n//         nunRequiredHourCount+=courseItem.getClassHour();\n//         nunRequiredCourseCount+=1;\n//       }\n//       UserCourseRecord learnRecord=learnCourseRecords.get(courseItem.getId());\n//       if (learnRecord == null) {\n//         continue;\n//       }\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           requiredFinishedCourseCount++;\n//         }\n//       }\n//  else {\n//         nunRequiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           nunRequiredFinishedCourseCount++;\n//         }\n//       }\n//     }\n//   }\n//   HashMap<String,Object> stats=new HashMap<>();\n//   stats.put(\"required_course_count\",requiredCourseCount);\n//   stats.put(\"nun_required_course_count\",nunRequiredCourseCount);\n//   stats.put(\"required_finished_course_count\",requiredFinishedCourseCount);\n//   stats.put(\"nun_required_finished_course_count\",nunRequiredFinishedCourseCount);\n//   stats.put(\"required_hour_count\",requiredHourCount);\n//   stats.put(\"nun_required_hour_count\",nunRequiredHourCount);\n//   stats.put(\"required_finished_hour_count\",requiredFinishedHourCount);\n//   stats.put(\"nun_required_finished_hour_count\",nunRequiredFinishedHourCount);\n//   stats.put(\"today_learn_duration\",todayLearnDuration);\n//   stats.put(\"learn_duration\",learnDuration);\n//   data.put(\"stats\",stats);\n//   data.put(\"user_course_hour_count\",userCourseHourRecordService.getUserCourseHourCount(FCtx.getId(),courseIds,null).stream().collect(Collectors.toMap(UserCourseHourRecordCourseCountMapper::getCourseId,UserCourseHourRecordCourseCountMapper::getTotal)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AdminUserController {\n\n    @Autowired private AdminUserService adminUserService;\n\n    @Autowired private AdminRoleService roleService;\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_INDEX)\n    @GetMapping(\"/index\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u5217\u8868\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse Index(@RequestParam HashMap<String, Object> params) {<FILL_FUNCTION_BODY>}\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @GetMapping(\"/create\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u65b0\u5efa\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse create() {\n        List<AdminRole> roles = roleService.list();\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"roles\", roles);\n\n        return JsonResponse.data(data);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @PostMapping(\"/create\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u65b0\u5efa\", businessType = BusinessTypeConstant.INSERT)\n    public JsonResponse store(@RequestBody @Validated AdminUserRequest req)\n            throws ServiceException {\n        if (req.getPassword().length() == 0) {\n            return JsonResponse.error(\"\u8bf7\u8f93\u5165\u5bc6\u7801\");\n        }\n\n        adminUserService.createWithRoleIds(\n                req.getName(),\n                req.getEmail(),\n                req.getPassword(),\n                req.getIsBanLogin(),\n                req.getRoleIds());\n\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @GetMapping(\"/{id}\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u7f16\u8f91\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse edit(@PathVariable Integer id) throws NotFoundException {\n        AdminUser adminUser = adminUserService.findOrFail(id);\n        List<Integer> roleIds = adminUserService.getRoleIdsByUserId(adminUser.getId());\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"user\", adminUser);\n        data.put(\"role_ids\", roleIds);\n\n        return JsonResponse.data(data);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @PutMapping(\"/{id}\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u7f16\u8f91\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse update(\n            @PathVariable Integer id, @RequestBody @Validated AdminUserRequest req)\n            throws NotFoundException, ServiceException {\n        AdminUser adminUser = adminUserService.findOrFail(id);\n        adminUserService.updateWithRoleIds(\n                adminUser,\n                req.getName(),\n                req.getEmail(),\n                req.getPassword(),\n                req.getIsBanLogin(),\n                req.getRoleIds());\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @DeleteMapping(\"/{id}\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u5220\u9664\", businessType = BusinessTypeConstant.DELETE)\n    public JsonResponse destroy(@PathVariable Integer id) {\n        adminUserService.removeWithRoleIds(id);\n        return JsonResponse.success();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/217", "ground_truth": "\n        Integer page = MapUtils.getInteger(params, \"page\", 1);\n        Integer size = MapUtils.getInteger(params, \"size\", 10);\n        String name = MapUtils.getString(params, \"name\");\n        Integer roleId = MapUtils.getInteger(params, \"role_id\");\n\n        AdminUserPaginateFilter filter = new AdminUserPaginateFilter();\n        filter.setName(name);\n        filter.setRoleId(roleId);\n\n        PaginationResult<AdminUser> result = adminUserService.paginate(page, size, filter);\n\n        Map<Integer, List<Integer>> userRoleIds = new HashMap<>();\n        if (result.getData() != null && result.getData().size() > 0) {\n            userRoleIds =\n                    adminUserService.getAdminUserRoleIds(\n                            result.getData().stream().map(AdminUser::getId).toList());\n        }\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"data\", result.getData());\n        data.put(\"total\", result.getTotal());\n        data.put(\"user_role_ids\", userRoleIds);\n        data.put(\n                \"roles\",\n                roleService.list().stream().collect(Collectors.groupingBy(AdminRole::getId)));\n\n        return JsonResponse.data(data);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "backend", "AdminUserController.java"], "context_start_lineno": 0, "function_name": "Index", "left_context": "class AdminUserController {\n\n    @Autowired private AdminUserService adminUserService;\n\n    @Autowired private AdminRoleService roleService;\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_INDEX)\n    @GetMapping(\"/index\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u5217\u8868\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse Index(@RequestParam HashMap<String, Object> params) {", "right_context": "}\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @GetMapping(\"/create\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u65b0\u5efa\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse create() {\n        List<AdminRole> roles = roleService.list();\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"roles\", roles);\n\n        return JsonResponse.data(data);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @PostMapping(\"/create\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u65b0\u5efa\", businessType = BusinessTypeConstant.INSERT)\n    public JsonResponse store(@RequestBody @Validated AdminUserRequest req)\n            throws ServiceException {\n        if (req.getPassword().length() == 0) {\n            return JsonResponse.error(\"\u8bf7\u8f93\u5165\u5bc6\u7801\");\n        }\n\n        adminUserService.createWithRoleIds(\n                req.getName(),\n                req.getEmail(),\n                req.getPassword(),\n                req.getIsBanLogin(),\n                req.getRoleIds());\n\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @GetMapping(\"/{id}\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u7f16\u8f91\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse edit(@PathVariable Integer id) throws NotFoundException {\n        AdminUser adminUser = adminUserService.findOrFail(id);\n        List<Integer> roleIds = adminUserService.getRoleIdsByUserId(adminUser.getId());\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"user\", adminUser);\n        data.put(\"role_ids\", roleIds);\n\n        return JsonResponse.data(data);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @PutMapping(\"/{id}\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u7f16\u8f91\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse update(\n            @PathVariable Integer id, @RequestBody @Validated AdminUserRequest req)\n            throws NotFoundException, ServiceException {\n        AdminUser adminUser = adminUserService.findOrFail(id);\n        adminUserService.updateWithRoleIds(\n                adminUser,\n                req.getName(),\n                req.getEmail(),\n                req.getPassword(),\n                req.getIsBanLogin(),\n                req.getRoleIds());\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_USER_CUD)\n    @DeleteMapping(\"/{id}\")\n    @Log(title = \"\u7ba1\u7406\u5458-\u5220\u9664\", businessType = BusinessTypeConstant.DELETE)\n    public JsonResponse destroy(@PathVariable Integer id) {\n        adminUserService.removeWithRoleIds(id);\n        return JsonResponse.success();\n    }\n}", "class_name": "AdminUserController", "return_type": "JsonResponse", "parameters": [{"type": "HashMap<String,Object>", "name": "params"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LdapUser implements Serializable {\n    /** */\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /** \u552f\u4e00\u7279\u5f81\u503c */\n    private String uuid;\n\n    /** \u7528\u6237ID */\n    private Integer userId;\n\n    /** cn */\n    private String cn;\n\n    /** dn */\n    private String dn;\n\n    /** ou */\n    private String ou;\n\n    /** uid */\n    private String uid;\n\n    /** \u90ae\u7bb1 */\n    private String email;\n\n    /** */\n    private Date createdAt;\n\n    /** */\n    private Date updatedAt;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    /** */\n    public Integer getId() {\n        return id;\n    }\n\n    /** */\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    /** \u552f\u4e00\u7279\u5f81\u503c */\n    public String getUuid() {\n        return uuid;\n    }\n\n    /** \u552f\u4e00\u7279\u5f81\u503c */\n    public void setUuid(String uuid) {\n        this.uuid = uuid;\n    }\n\n    /** \u7528\u6237ID */\n    public Integer getUserId() {\n        return userId;\n    }\n\n    /** \u7528\u6237ID */\n    public void setUserId(Integer userId) {\n        this.userId = userId;\n    }\n\n    /** cn */\n    public String getCn() {\n        return cn;\n    }\n\n    /** cn */\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    /** dn */\n    public String getDn() {\n        return dn;\n    }\n\n    /** dn */\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    /** ou */\n    public String getOu() {\n        return ou;\n    }\n\n    /** ou */\n    public void setOu(String ou) {\n        this.ou = ou;\n    }\n\n    /** uid */\n    public String getUid() {\n        return uid;\n    }\n\n    /** uid */\n    public void setUid(String uid) {\n        this.uid = uid;\n    }\n\n    /** \u90ae\u7bb1 */\n    public String getEmail() {\n        return email;\n    }\n\n    /** \u90ae\u7bb1 */\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    /** */\n    public Date getCreatedAt() {\n        return createdAt;\n    }\n\n    /** */\n    public void setCreatedAt(Date createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    /** */\n    public Date getUpdatedAt() {\n        return updatedAt;\n    }\n\n    /** */\n    public void setUpdatedAt(Date updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n\n    @Override\n    public boolean equals(Object that) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());\n        result = prime * result + ((getUuid() == null) ? 0 : getUuid().hashCode());\n        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n        result = prime * result + ((getCn() == null) ? 0 : getCn().hashCode());\n        result = prime * result + ((getDn() == null) ? 0 : getDn().hashCode());\n        result = prime * result + ((getOu() == null) ? 0 : getOu().hashCode());\n        result = prime * result + ((getUid() == null) ? 0 : getUid().hashCode());\n        result = prime * result + ((getEmail() == null) ? 0 : getEmail().hashCode());\n        result = prime * result + ((getCreatedAt() == null) ? 0 : getCreatedAt().hashCode());\n        result = prime * result + ((getUpdatedAt() == null) ? 0 : getUpdatedAt().hashCode());\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", id=\").append(id);\n        sb.append(\", uuid=\").append(uuid);\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", cn=\").append(cn);\n        sb.append(\", dn=\").append(dn);\n        sb.append(\", ou=\").append(ou);\n        sb.append(\", uid=\").append(uid);\n        sb.append(\", email=\").append(email);\n        sb.append(\", createdAt=\").append(createdAt);\n        sb.append(\", updatedAt=\").append(updatedAt);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/245", "ground_truth": "\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        LdapUser other = (LdapUser) that;\n        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))\n                && (this.getUuid() == null\n                        ? other.getUuid() == null\n                        : this.getUuid().equals(other.getUuid()))\n                && (this.getUserId() == null\n                        ? other.getUserId() == null\n                        : this.getUserId().equals(other.getUserId()))\n                && (this.getCn() == null\n                        ? other.getCn() == null\n                        : this.getCn().equals(other.getCn()))\n                && (this.getDn() == null\n                        ? other.getDn() == null\n                        : this.getDn().equals(other.getDn()))\n                && (this.getOu() == null\n                        ? other.getOu() == null\n                        : this.getOu().equals(other.getOu()))\n                && (this.getUid() == null\n                        ? other.getUid() == null\n                        : this.getUid().equals(other.getUid()))\n                && (this.getEmail() == null\n                        ? other.getEmail() == null\n                        : this.getEmail().equals(other.getEmail()))\n                && (this.getCreatedAt() == null\n                        ? other.getCreatedAt() == null\n                        : this.getCreatedAt().equals(other.getCreatedAt()))\n                && (this.getUpdatedAt() == null\n                        ? other.getUpdatedAt() == null\n                        : this.getUpdatedAt().equals(other.getUpdatedAt()));\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "domain", "LdapUser.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class LdapUser implements Serializable {\n    /** */\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /** \u552f\u4e00\u7279\u5f81\u503c */\n    private String uuid;\n\n    /** \u7528\u6237ID */\n    private Integer userId;\n\n    /** cn */\n    private String cn;\n\n    /** dn */\n    private String dn;\n\n    /** ou */\n    private String ou;\n\n    /** uid */\n    private String uid;\n\n    /** \u90ae\u7bb1 */\n    private String email;\n\n    /** */\n    private Date createdAt;\n\n    /** */\n    private Date updatedAt;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    /** */\n    public Integer getId() {\n        return id;\n    }\n\n    /** */\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    /** \u552f\u4e00\u7279\u5f81\u503c */\n    public String getUuid() {\n        return uuid;\n    }\n\n    /** \u552f\u4e00\u7279\u5f81\u503c */\n    public void setUuid(String uuid) {\n        this.uuid = uuid;\n    }\n\n    /** \u7528\u6237ID */\n    public Integer getUserId() {\n        return userId;\n    }\n\n    /** \u7528\u6237ID */\n    public void setUserId(Integer userId) {\n        this.userId = userId;\n    }\n\n    /** cn */\n    public String getCn() {\n        return cn;\n    }\n\n    /** cn */\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    /** dn */\n    public String getDn() {\n        return dn;\n    }\n\n    /** dn */\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    /** ou */\n    public String getOu() {\n        return ou;\n    }\n\n    /** ou */\n    public void setOu(String ou) {\n        this.ou = ou;\n    }\n\n    /** uid */\n    public String getUid() {\n        return uid;\n    }\n\n    /** uid */\n    public void setUid(String uid) {\n        this.uid = uid;\n    }\n\n    /** \u90ae\u7bb1 */\n    public String getEmail() {\n        return email;\n    }\n\n    /** \u90ae\u7bb1 */\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    /** */\n    public Date getCreatedAt() {\n        return createdAt;\n    }\n\n    /** */\n    public void setCreatedAt(Date createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    /** */\n    public Date getUpdatedAt() {\n        return updatedAt;\n    }\n\n    /** */\n    public void setUpdatedAt(Date updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n\n    @Override\n    public boolean equals(Object that) {", "right_context": "}\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());\n        result = prime * result + ((getUuid() == null) ? 0 : getUuid().hashCode());\n        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n        result = prime * result + ((getCn() == null) ? 0 : getCn().hashCode());\n        result = prime * result + ((getDn() == null) ? 0 : getDn().hashCode());\n        result = prime * result + ((getOu() == null) ? 0 : getOu().hashCode());\n        result = prime * result + ((getUid() == null) ? 0 : getUid().hashCode());\n        result = prime * result + ((getEmail() == null) ? 0 : getEmail().hashCode());\n        result = prime * result + ((getCreatedAt() == null) ? 0 : getCreatedAt().hashCode());\n        result = prime * result + ((getUpdatedAt() == null) ? 0 : getUpdatedAt().hashCode());\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", id=\").append(id);\n        sb.append(\", uuid=\").append(uuid);\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", cn=\").append(cn);\n        sb.append(\", dn=\").append(dn);\n        sb.append(\", ou=\").append(ou);\n        sb.append(\", uid=\").append(uid);\n        sb.append(\", email=\").append(email);\n        sb.append(\", createdAt=\").append(createdAt);\n        sb.append(\", updatedAt=\").append(updatedAt);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "class_name": "LdapUser", "return_type": "boolean", "parameters": [{"type": "Object", "name": "that"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UserLearnCourseUpdateListener {\n\n    @Autowired private UserLearnDurationRecordService userLearnDurationRecordService;\n\n    @Autowired private UserLearnDurationStatsService userLearnDurationStatsService;\n\n    @EventListener\n    public void storeLearnDuration(UserLearnCourseUpdateEvent event) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/256", "ground_truth": "\n        // \u89c2\u770b\u65f6\u957f\u7edf\u8ba1\n        userLearnDurationStatsService.storeOrUpdate(\n                event.getUserId(), event.getStartAt(), event.getEndAt());\n        // \u89c2\u770b\u8bb0\u5f55\n        userLearnDurationRecordService.store(\n                event.getUserId(),\n                event.getCourseId(),\n                event.getHourId(),\n                event.getStartAt(),\n                event.getEndAt());\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "listener", "UserLearnCourseUpdateListener.java"], "context_start_lineno": 0, "function_name": "storeLearnDuration", "left_context": "class UserLearnCourseUpdateListener {\n\n    @Autowired private UserLearnDurationRecordService userLearnDurationRecordService;\n\n    @Autowired private UserLearnDurationStatsService userLearnDurationStatsService;\n\n    @EventListener\n    public void storeLearnDuration(UserLearnCourseUpdateEvent event) {", "right_context": "}\n}", "class_name": "UserLearnCourseUpdateListener", "return_type": "void", "parameters": [{"type": "UserLearnCourseUpdateEvent", "name": "event"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @PostMapping(\"/{id}/record\") @SneakyThrows public JsonResponse record(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id,@RequestBody @Validated CourseHourRecordRequest req){\n//   Integer duration=req.getDuration();\n//   if (duration <= 0) {\n//     return JsonResponse.error(\"duration\u53c2\u6570\u9519\u8bef\");\n//   }\n//   Course course=courseCache.findOrFail(courseId);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   String lockKey=String.format(\"record:%d\",FCtx.getId());\n//   boolean tryLock=redisDistributedLock.tryLock(lockKey,5,TimeUnit.SECONDS);\n//   if (!tryLock) {\n//     return JsonResponse.success();\n//   }\n//   try {\n//     boolean isFinished=userCourseHourRecordService.storeOrUpdate(FCtx.getId(),course.getId(),hour.getId(),duration,hour.getDuration());\n//     if (isFinished) {\n//       ctx.publishEvent(new UserCourseHourFinishedEvent(this,FCtx.getId(),courseId,hour.getId()));\n//     }\n//   }\n//   finally {\n//     redisDistributedLock.releaseLock(lockKey);\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @PostMapping(\"/{id}/ping\") @SneakyThrows public JsonResponse ping(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseCache.findOrFail(courseId);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   String lockKey=String.format(\"ping:%d\",FCtx.getId());\n//   boolean tryLock=redisDistributedLock.tryLock(lockKey,5,TimeUnit.SECONDS);\n//   if (!tryLock) {\n//     return JsonResponse.success();\n//   }\n//   try {\n//     Long curTime=System.currentTimeMillis();\n//     Long lastTime=userLastLearnTimeCache.get(FCtx.getId());\n//     if (lastTime == null || curTime - lastTime > 10500) {\n//       lastTime=curTime - 10000;\n//     }\n//     userLastLearnTimeCache.put(FCtx.getId(),curTime);\n//     ctx.publishEvent(new UserLearnCourseUpdateEvent(this,FCtx.getId(),course.getId(),hour.getId(),lastTime,curTime));\n//   }\n//   finally {\n//     redisDistributedLock.releaseLock(lockKey);\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/password\") @SneakyThrows public JsonResponse password(@RequestBody @Validated LoginPasswordRequest req) throws LimitException {\n//   if (appConfigService.enabledLdapLogin()) {\n//     return JsonResponse.error(\"\u8bf7\u4f7f\u7528LDAP\u767b\u5f55\");\n//   }\n//   String email=req.getEmail();\n//   User user=userService.find(email);\n//   if (user == null) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   loginLimitCache.check(email);\n//   if (!HelperUtil.MD5(req.getPassword() + user.getSalt()).equals(user.getPassword())) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   if (user.getIsLock() == 1) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u5df2\u9501\u5b9a\u65e0\u6cd5\u767b\u5f55\");\n//   }\n//   loginLimitCache.destroy(email);\n//   return JsonResponse.data(loginBus.tokenByUser(user));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/ldap\") @SneakyThrows public JsonResponse ldap(@RequestBody @Validated LoginLdapRequest req){\n//   String username=req.getUsername();\n//   LdapConfig ldapConfig=appConfigService.ldapConfig();\n//   String mail=null;\n//   String uid=null;\n//   if (StringUtil.contains(username,\"@\")) {\n//     mail=username;\n//   }\n//  else {\n//     uid=username;\n//   }\n//   loginLimitCache.check(username);\n//   if (!loginLockCache.apply(username)) {\n//     return JsonResponse.error(\"\u8bf7\u7a0d\u5019\u518d\u8bd5\");\n//   }\n//   try {\n//     LdapTransformUser ldapTransformUser=LdapUtil.loginByMailOrUid(ldapConfig.getUrl(),ldapConfig.getAdminUser(),ldapConfig.getAdminPass(),ldapConfig.getBaseDN(),mail,uid,req.getPassword());\n//     if (ldapTransformUser == null) {\n//       return JsonResponse.error(\"\u767b\u5f55\u5931\u8d25.\u8bf7\u68c0\u67e5\u8d26\u53f7\u548c\u5bc6\u7801\");\n//     }\n//     HashMap<String,Object> data=loginBus.tokenByLdapTransformUser(ldapTransformUser);\n//     loginLimitCache.destroy(username);\n//     return JsonResponse.data(data);\n//   }\n//  catch (  ServiceException e) {\n//     return JsonResponse.error(e.getMessage());\n//   }\n// catch (  Exception e) {\n//     log.error(\"LDAP\u767b\u5f55\u5931\u8d25\",e);\n//     return JsonResponse.error(\"\u7cfb\u7edf\u9519\u8bef\");\n//   }\n//  finally {\n//     loginLockCache.release(username);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/logout\") public JsonResponse logout(){\n//   authService.logout();\n//   ctx.publishEvent(new UserLogoutEvent(this,FCtx.getId(),FCtx.getJwtJti()));\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/SystemController.java\n// --------------------------------------------------\n// @GetMapping(\"/config\") public JsonResponse config(){\n//   Map<String,String> configs=appConfigService.keyValues();\n//   HashMap<String,String> data=new HashMap<>();\n//   data.put(\"system-name\",configs.get(ConfigConstant.SYSTEM_NAME));\n//   data.put(\"system-logo\",configs.get(ConfigConstant.SYSTEM_LOGO));\n//   data.put(\"system-api-url\",configs.get(ConfigConstant.SYSTEM_API_URL));\n//   data.put(\"system-pc-url\",configs.get(ConfigConstant.SYSTEM_PC_URL));\n//   data.put(\"system-h5-url\",configs.get(ConfigConstant.SYSTEM_H5_URL));\n//   data.put(\"system-pc-index-footer-msg\",configs.get(\"system.pc_index_footer_msg\"));\n//   data.put(\"player-poster\",configs.get(\"player.poster\"));\n//   data.put(\"player-is-enabled-bullet-secret\",configs.get(\"player.is_enabled_bullet_secret\"));\n//   data.put(\"player-bullet-secret-text\",configs.get(\"player.bullet_secret_text\"));\n//   data.put(\"player-bullet-secret-color\",configs.get(\"player.bullet_secret_color\"));\n//   data.put(\"player-bullet-secret-opacity\",configs.get(\"player.bullet_secret_opacity\"));\n//   data.put(\"player-disabled-drag\",configs.get(\"player.disabled_drag\"));\n//   data.put(\"ldap-enabled\",configs.get(ConfigConstant.LDAP_ENABLED));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/avatar\") public JsonResponse changeAvatar(MultipartFile file){\n//   UserUploadImageLog log=uploadService.userAvatar(FCtx.getId(),file,FrontendConstant.USER_UPLOAD_IMAGE_TYPE_AVATAR,FrontendConstant.USER_UPLOAD_IMAGE_SCENE_AVATAR);\n//   userService.changeAvatar(FCtx.getId(),log.getUrl());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/password\") public JsonResponse changePassword(@RequestBody @Validated ChangePasswordRequest req) throws ServiceException {\n//   userService.passwordChange(FCtx.getUser(),req.getOldPassword(),req.getNewPassword());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/courses\") public JsonResponse courses(@RequestParam HashMap<String,Object> params){\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   if (depId == null || depId == 0) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   Integer categoryId=MapUtils.getInteger(params,\"category_id\");\n//   List<Integer> userJoinDepIds=userService.getDepIdsByUserId(FCtx.getId());\n//   if (userJoinDepIds == null) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u4efb\u4f55\u90e8\u95e8\");\n//   }\n//   if (!userJoinDepIds.contains(depId)) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u6240\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"learn_course_records\",new HashMap<>());\n//   List<Course> courses=new ArrayList<>();\n//   List<Course> depCourses=courseService.getDepCoursesAndShow(new ArrayList<>(){\n// {\n//       add(depId);\n//     }\n//   }\n// ,categoryId);\n//   List<Course> openCourses=courseService.getOpenCoursesAndShow(500,categoryId);\n//   if (depCourses != null && !depCourses.isEmpty()) {\n//     courses.addAll(depCourses);\n//   }\n//   if (openCourses != null && !openCourses.isEmpty()) {\n//     courses.addAll(openCourses);\n//   }\n//   if (!courses.isEmpty()) {\n//     courses=courses.stream().sorted(Comparator.comparing(Course::getPublishedAt,Comparator.nullsFirst(Date::compareTo)).reversed()).toList();\n//   }\n//   data.put(\"courses\",courses);\n//   List<Integer> courseIds=courses.stream().map(Course::getId).toList();\n//   Map<Integer,UserCourseRecord> learnCourseRecords=new HashMap<>();\n//   if (!courses.isEmpty()) {\n//     learnCourseRecords=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   }\n//   data.put(\"learn_course_records\",learnCourseRecords);\n//   int requiredCourseCount=0;\n//   int nunRequiredCourseCount=0;\n//   int requiredFinishedCourseCount=0;\n//   int nunRequiredFinishedCourseCount=0;\n//   int requiredHourCount=0;\n//   int nunRequiredHourCount=0;\n//   int requiredFinishedHourCount=0;\n//   int nunRequiredFinishedHourCount=0;\n//   Long todayLearnDuration=userLearnDurationStatsService.todayUserDuration(FCtx.getId());\n//   Long learnDuration=userLearnDurationStatsService.userDuration(FCtx.getId());\n//   if (!courses.isEmpty()) {\n//     for (    Course courseItem : courses) {\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredHourCount+=courseItem.getClassHour();\n//         requiredCourseCount+=1;\n//       }\n//  else {\n//         nunRequiredHourCount+=courseItem.getClassHour();\n//         nunRequiredCourseCount+=1;\n//       }\n//       UserCourseRecord learnRecord=learnCourseRecords.get(courseItem.getId());\n//       if (learnRecord == null) {\n//         continue;\n//       }\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           requiredFinishedCourseCount++;\n//         }\n//       }\n//  else {\n//         nunRequiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           nunRequiredFinishedCourseCount++;\n//         }\n//       }\n//     }\n//   }\n//   HashMap<String,Object> stats=new HashMap<>();\n//   stats.put(\"required_course_count\",requiredCourseCount);\n//   stats.put(\"nun_required_course_count\",nunRequiredCourseCount);\n//   stats.put(\"required_finished_course_count\",requiredFinishedCourseCount);\n//   stats.put(\"nun_required_finished_course_count\",nunRequiredFinishedCourseCount);\n//   stats.put(\"required_hour_count\",requiredHourCount);\n//   stats.put(\"nun_required_hour_count\",nunRequiredHourCount);\n//   stats.put(\"required_finished_hour_count\",requiredFinishedHourCount);\n//   stats.put(\"nun_required_finished_hour_count\",nunRequiredFinishedHourCount);\n//   stats.put(\"today_learn_duration\",todayLearnDuration);\n//   stats.put(\"learn_duration\",learnDuration);\n//   data.put(\"stats\",stats);\n//   data.put(\"user_course_hour_count\",userCourseHourRecordService.getUserCourseHourCount(FCtx.getId(),courseIds,null).stream().collect(Collectors.toMap(UserCourseHourRecordCourseCountMapper::getCourseId,UserCourseHourRecordCourseCountMapper::getTotal)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/LoginController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") @Log(title=\"\u7ba1\u7406\u5458-\u8be6\u60c5\",businessType=BusinessTypeConstant.GET) public JsonResponse detail(){\n//   AdminUser user=BCtx.getAdminUser();\n//   HashMap<String,Boolean> permissions=backendBus.adminUserPermissions(user.getId());\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"permissions\",permissions);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/CourseController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}\") @SneakyThrows public JsonResponse detail(@PathVariable(name=\"id\") Integer id){\n//   Course course=courseService.findOrFail(id);\n//   List<CourseHour> courseHours=hourService.getHoursByCourseId(course.getId());\n//   List<CourseAttachment> attachments=attachmentService.getAttachmentsByCourseId(course.getId());\n//   if (null != attachments && !attachments.isEmpty()) {\n//     Map<Integer,Resource> resourceMap=resourceService.chunks(attachments.stream().map(CourseAttachment::getRid).toList()).stream().collect(Collectors.toMap(Resource::getId,Function.identity()));\n//     attachments.forEach(courseAttachment -> {\n//       Resource resource=resourceMap.get(courseAttachment.getRid());\n//       if (null != resource) {\n//         courseAttachment.setExt(resource.getExtension());\n//       }\n//     }\n// );\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"course\",course);\n//   data.put(\"chapters\",chapterService.getChaptersByCourseId(course.getId()));\n//   data.put(\"hours\",courseHours.stream().collect(Collectors.groupingBy(CourseHour::getChapterId)));\n//   data.put(\"learn_record\",userCourseRecordService.find(FCtx.getId(),course.getId()));\n//   data.put(\"learn_hour_records\",userCourseHourRecordService.getRecords(FCtx.getId(),course.getId()).stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e)));\n//   data.put(\"attachments\",attachments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}\") @SneakyThrows public JsonResponse detail(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseService.findOrFail(courseId);\n//   CourseHour courseHour=hourService.findOrFail(id,courseId);\n//   UserCourseHourRecord userCourseHourRecord=null;\n//   if (FCtx.getId() != null && FCtx.getId() > 0) {\n//     userCourseHourRecord=userCourseHourRecordService.find(FCtx.getId(),courseId,id);\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"course\",course);\n//   data.put(\"hour\",courseHour);\n//   data.put(\"user_hour_record\",userCourseHourRecord);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") public JsonResponse detail(){\n//   User user=FCtx.getUser();\n//   List<Department> departments=new ArrayList<>();\n//   List<Integer> depIds=userService.getDepIdsByUserId(user.getId());\n//   if (depIds != null && !depIds.isEmpty()) {\n//     departments=departmentService.listByIds(depIds);\n//   }\n//   user.setIdCard(PrivacyUtil.hideIDCard(user.getIdCard()));\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"departments\",departments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AdminLogController {\n\n    @Autowired private AdminLogService adminLogService;\n\n    @Autowired private BackendBus backendBus;\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_LOG)\n    @GetMapping(\"/index\")\n    @Log(title = \"\u7ba1\u7406\u5458\u65e5\u5fd7-\u5217\u8868\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse index(@RequestParam HashMap<String, Object> params) {\n        Integer page = MapUtils.getInteger(params, \"page\", 1);\n        Integer size = MapUtils.getInteger(params, \"size\", 10);\n        String sortField = MapUtils.getString(params, \"sort_field\");\n        String sortAlgo = MapUtils.getString(params, \"sort_algo\");\n\n        Integer adminId = MapUtils.getInteger(params, \"admin_id\");\n        String adminName = MapUtils.getString(params, \"admin_name\");\n        String module = MapUtils.getString(params, \"module\");\n        String title = MapUtils.getString(params, \"title\");\n        Integer opt = MapUtils.getInteger(params, \"opt\");\n        String startTime = MapUtils.getString(params, \"start_time\");\n        String endTime = MapUtils.getString(params, \"end_time\");\n\n        AdminLogPaginateFiler filter = new AdminLogPaginateFiler();\n        if (backendBus.isSuperAdmin()) {\n            filter.setAdminId(adminId);\n        } else {\n            filter.setAdminId(BCtx.getId());\n        }\n        filter.setAdminName(adminName);\n        filter.setModule(module);\n        filter.setTitle(title);\n        filter.setOpt(opt);\n        filter.setStartTime(startTime);\n        filter.setEndTime(endTime);\n        filter.setSortField(sortField);\n        filter.setSortAlgo(sortAlgo);\n\n        PaginationResult<AdminLog> result = adminLogService.paginate(page, size, filter);\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"data\", result.getData());\n        data.put(\"total\", result.getTotal());\n\n        return JsonResponse.data(data);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_LOG)\n    @GetMapping(\"/detail/{id}\")\n    public JsonResponse detail(@PathVariable(name = \"id\") Integer id) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/257", "ground_truth": "\n        Integer adminId = 0;\n        if (!backendBus.isSuperAdmin()) {\n            adminId = BCtx.getId();\n        }\n\n        AdminLog log = adminLogService.find(id, adminId);\n        if (log == null) {\n            throw new ServiceException(\"\u65e5\u5fd7\u4e0d\u5b58\u5728\");\n        }\n        return JsonResponse.data(log);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "backend", "AdminLogController.java"], "context_start_lineno": 0, "function_name": "detail", "left_context": "class AdminLogController {\n\n    @Autowired private AdminLogService adminLogService;\n\n    @Autowired private BackendBus backendBus;\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_LOG)\n    @GetMapping(\"/index\")\n    @Log(title = \"\u7ba1\u7406\u5458\u65e5\u5fd7-\u5217\u8868\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse index(@RequestParam HashMap<String, Object> params) {\n        Integer page = MapUtils.getInteger(params, \"page\", 1);\n        Integer size = MapUtils.getInteger(params, \"size\", 10);\n        String sortField = MapUtils.getString(params, \"sort_field\");\n        String sortAlgo = MapUtils.getString(params, \"sort_algo\");\n\n        Integer adminId = MapUtils.getInteger(params, \"admin_id\");\n        String adminName = MapUtils.getString(params, \"admin_name\");\n        String module = MapUtils.getString(params, \"module\");\n        String title = MapUtils.getString(params, \"title\");\n        Integer opt = MapUtils.getInteger(params, \"opt\");\n        String startTime = MapUtils.getString(params, \"start_time\");\n        String endTime = MapUtils.getString(params, \"end_time\");\n\n        AdminLogPaginateFiler filter = new AdminLogPaginateFiler();\n        if (backendBus.isSuperAdmin()) {\n            filter.setAdminId(adminId);\n        } else {\n            filter.setAdminId(BCtx.getId());\n        }\n        filter.setAdminName(adminName);\n        filter.setModule(module);\n        filter.setTitle(title);\n        filter.setOpt(opt);\n        filter.setStartTime(startTime);\n        filter.setEndTime(endTime);\n        filter.setSortField(sortField);\n        filter.setSortAlgo(sortAlgo);\n\n        PaginationResult<AdminLog> result = adminLogService.paginate(page, size, filter);\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"data\", result.getData());\n        data.put(\"total\", result.getTotal());\n\n        return JsonResponse.data(data);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.ADMIN_LOG)\n    @GetMapping(\"/detail/{id}\")\n    public JsonResponse detail(@PathVariable(name = \"id\") Integer id) {", "right_context": "}\n}", "class_name": "AdminLogController", "return_type": "JsonResponse", "parameters": [{"type": "Integer", "name": "id"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CategoryServiceImpl extends ServiceImpl<CategoryMapper, Category>\n        implements CategoryService {\n\n    @Override\n    public List<Category> listByParentId(Integer id) {\n        return list(query().getWrapper().eq(\"parent_id\", id).orderByAsc(\"sort\"));\n    }\n\n    @Override\n    public List<Category> all() {\n        return list(query().getWrapper().orderByAsc(\"sort\"));\n    }\n\n    @Override\n    public Category findOrFail(Integer id) throws NotFoundException {\n        Category category = getById(id);\n        if (category == null) {\n            throw new NotFoundException(\"\u5206\u7c7b\u4e0d\u5b58\u5728\");\n        }\n        return category;\n    }\n\n    @Override\n    @Transactional\n    public void deleteById(Integer id) throws NotFoundException {\n        Category category = findOrFail(id);\n        // \u66f4\u65b0parent_chain\n        updateParentChain(category.getParentChain(), childrenParentChain(category));\n        // \u5220\u9664\u8bb0\u5f55\n        removeById(category.getId());\n    }\n\n    @Override\n    @Transactional\n    public void update(Category category, String name, Integer parentId, Integer sort)\n            throws NotFoundException {\n        String childrenChainPrefix = childrenParentChain(category);\n\n        Category data = new Category();\n        data.setId(category.getId());\n        data.setName(name);\n\n        if (!category.getParentId().equals(parentId)) {\n            data.setParentId(parentId);\n            if (parentId.equals(0)) {\n                data.setParentChain(\"\");\n            } else {\n                Category parentResourceCategory = findOrFail(parentId);\n                data.setParentChain(childrenParentChain(parentResourceCategory));\n            }\n        }\n        if (!category.getSort().equals(sort)) {\n            data.setSort(sort);\n        }\n\n        // \u63d0\u4ea4\u66f4\u6362\n        updateById(data);\n\n        category = getById(category.getId());\n        updateParentChain(childrenParentChain(category), childrenChainPrefix);\n    }\n\n    private void updateParentChain(String newChildrenPC, String oldChildrenPC) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void create(String name, Integer parentId, Integer sort) throws NotFoundException {\n        String parentChain = \"\";\n        if (parentId != 0) {\n            parentChain = compParentChain(parentId);\n        }\n\n        Category category = new Category();\n        category.setName(name);\n        category.setParentId(parentId);\n        category.setParentChain(parentChain);\n        category.setSort(sort);\n        category.setCreatedAt(new Date());\n        category.setUpdatedAt(new Date());\n\n        save(category);\n    }\n\n    @Override\n    public String childrenParentChain(Category category) {\n        String prefix = category.getId() + \"\";\n        if (category.getParentChain() != null && category.getParentChain().length() > 0) {\n            prefix = category.getParentChain() + \",\" + prefix;\n        }\n        return prefix;\n    }\n\n    @Override\n    public String compParentChain(Integer parentId) throws NotFoundException {\n        String parentChain = \"\";\n        if (parentId != 0) {\n            Category parentResourceCategory = getById(parentId);\n            if (parentResourceCategory == null) {\n                throw new NotFoundException(\"\u7236\u7ea7\u5206\u7c7b\u4e0d\u5b58\u5728\");\n            }\n            String pc = parentResourceCategory.getParentChain();\n            parentChain = pc == null || pc.length() == 0 ? parentId + \"\" : pc + \",\" + parentId;\n        }\n        return parentChain;\n    }\n\n    @Override\n    public void resetSort(List<Integer> ids) {\n        if (ids == null || ids.size() == 0) {\n            return;\n        }\n        List<Category> categories = new ArrayList<>();\n        int sortVal = 0;\n        for (Integer idItem : ids) {\n            Integer finalSortVal = ++sortVal;\n            categories.add(\n                    new Category() {\n                        {\n                            setId(idItem);\n                            setSort(finalSortVal);\n                        }\n                    });\n        }\n        updateBatchById(categories);\n    }\n\n    @Override\n    @Transactional\n    public void changeParent(Integer id, Integer parentId, List<Integer> ids)\n            throws NotFoundException {\n        Category category = findOrFail(id);\n        update(category, category.getName(), parentId, category.getSort());\n        // \u91cd\u7f6e\u6392\u5e8f\n        resetSort(ids);\n    }\n\n    @Override\n    public Map<Integer, List<Category>> groupByParent() {\n        return list(query().getWrapper().orderByAsc(\"sort\")).stream()\n                .collect(Collectors.groupingBy(Category::getParentId));\n    }\n\n    @Override\n    public Map<Integer, String> id2name() {\n        return all().stream().collect(Collectors.toMap(Category::getId, Category::getName));\n    }\n\n    @Override\n    public Long total() {\n        return count();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/272", "ground_truth": "\n        List<Category> children =\n                list(query().getWrapper().like(\"parent_chain\", oldChildrenPC + \"%\"));\n        if (children.size() == 0) {\n            return;\n        }\n\n        ArrayList<Category> updateRows = new ArrayList<>();\n        for (Category tmpResourceCategory : children) {\n            Category tmpUpdateResourceCategory = new Category();\n            tmpUpdateResourceCategory.setId(tmpResourceCategory.getId());\n\n            // parentChain\u8ba1\u7b97\n            String pc = newChildrenPC;\n            if (!tmpResourceCategory.getParentChain().equals(oldChildrenPC)) {\n                pc =\n                        tmpResourceCategory\n                                .getParentChain()\n                                .replaceFirst(\n                                        oldChildrenPC + \",\",\n                                        newChildrenPC.length() == 0\n                                                ? newChildrenPC\n                                                : newChildrenPC + ',');\n            }\n            tmpUpdateResourceCategory.setParentChain(pc);\n\n            // parentId\u8ba1\u7b97\n            int parentId = 0;\n            if (pc != null && pc.length() > 0) {\n                String[] parentIds = pc.split(\",\");\n                parentId = Integer.parseInt(parentIds[parentIds.length - 1]);\n            }\n            tmpUpdateResourceCategory.setParentId(parentId);\n\n            updateRows.add(tmpUpdateResourceCategory);\n        }\n        updateBatchById(updateRows);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "service", "impl", "CategoryServiceImpl.java"], "context_start_lineno": 0, "function_name": "updateParentChain", "left_context": "class CategoryServiceImpl extends ServiceImpl<CategoryMapper, Category>\n        implements CategoryService {\n\n    @Override\n    public List<Category> listByParentId(Integer id) {\n        return list(query().getWrapper().eq(\"parent_id\", id).orderByAsc(\"sort\"));\n    }\n\n    @Override\n    public List<Category> all() {\n        return list(query().getWrapper().orderByAsc(\"sort\"));\n    }\n\n    @Override\n    public Category findOrFail(Integer id) throws NotFoundException {\n        Category category = getById(id);\n        if (category == null) {\n            throw new NotFoundException(\"\u5206\u7c7b\u4e0d\u5b58\u5728\");\n        }\n        return category;\n    }\n\n    @Override\n    @Transactional\n    public void deleteById(Integer id) throws NotFoundException {\n        Category category = findOrFail(id);\n        // \u66f4\u65b0parent_chain\n        updateParentChain(category.getParentChain(), childrenParentChain(category));\n        // \u5220\u9664\u8bb0\u5f55\n        removeById(category.getId());\n    }\n\n    @Override\n    @Transactional\n    public void update(Category category, String name, Integer parentId, Integer sort)\n            throws NotFoundException {\n        String childrenChainPrefix = childrenParentChain(category);\n\n        Category data = new Category();\n        data.setId(category.getId());\n        data.setName(name);\n\n        if (!category.getParentId().equals(parentId)) {\n            data.setParentId(parentId);\n            if (parentId.equals(0)) {\n                data.setParentChain(\"\");\n            } else {\n                Category parentResourceCategory = findOrFail(parentId);\n                data.setParentChain(childrenParentChain(parentResourceCategory));\n            }\n        }\n        if (!category.getSort().equals(sort)) {\n            data.setSort(sort);\n        }\n\n        // \u63d0\u4ea4\u66f4\u6362\n        updateById(data);\n\n        category = getById(category.getId());\n        updateParentChain(childrenParentChain(category), childrenChainPrefix);\n    }\n\n    private void updateParentChain(String newChildrenPC, String oldChildrenPC) {", "right_context": "}\n\n    @Override\n    public void create(String name, Integer parentId, Integer sort) throws NotFoundException {\n        String parentChain = \"\";\n        if (parentId != 0) {\n            parentChain = compParentChain(parentId);\n        }\n\n        Category category = new Category();\n        category.setName(name);\n        category.setParentId(parentId);\n        category.setParentChain(parentChain);\n        category.setSort(sort);\n        category.setCreatedAt(new Date());\n        category.setUpdatedAt(new Date());\n\n        save(category);\n    }\n\n    @Override\n    public String childrenParentChain(Category category) {\n        String prefix = category.getId() + \"\";\n        if (category.getParentChain() != null && category.getParentChain().length() > 0) {\n            prefix = category.getParentChain() + \",\" + prefix;\n        }\n        return prefix;\n    }\n\n    @Override\n    public String compParentChain(Integer parentId) throws NotFoundException {\n        String parentChain = \"\";\n        if (parentId != 0) {\n            Category parentResourceCategory = getById(parentId);\n            if (parentResourceCategory == null) {\n                throw new NotFoundException(\"\u7236\u7ea7\u5206\u7c7b\u4e0d\u5b58\u5728\");\n            }\n            String pc = parentResourceCategory.getParentChain();\n            parentChain = pc == null || pc.length() == 0 ? parentId + \"\" : pc + \",\" + parentId;\n        }\n        return parentChain;\n    }\n\n    @Override\n    public void resetSort(List<Integer> ids) {\n        if (ids == null || ids.size() == 0) {\n            return;\n        }\n        List<Category> categories = new ArrayList<>();\n        int sortVal = 0;\n        for (Integer idItem : ids) {\n            Integer finalSortVal = ++sortVal;\n            categories.add(\n                    new Category() {\n                        {\n                            setId(idItem);\n                            setSort(finalSortVal);\n                        }\n                    });\n        }\n        updateBatchById(categories);\n    }\n\n    @Override\n    @Transactional\n    public void changeParent(Integer id, Integer parentId, List<Integer> ids)\n            throws NotFoundException {\n        Category category = findOrFail(id);\n        update(category, category.getName(), parentId, category.getSort());\n        // \u91cd\u7f6e\u6392\u5e8f\n        resetSort(ids);\n    }\n\n    @Override\n    public Map<Integer, List<Category>> groupByParent() {\n        return list(query().getWrapper().orderByAsc(\"sort\")).stream()\n                .collect(Collectors.groupingBy(Category::getParentId));\n    }\n\n    @Override\n    public Map<Integer, String> id2name() {\n        return all().stream().collect(Collectors.toMap(Category::getId, Category::getName));\n    }\n\n    @Override\n    public Long total() {\n        return count();\n    }\n}", "class_name": "CategoryServiceImpl", "return_type": "void", "parameters": [{"type": "String", "name": "newChildrenPC"}, {"type": "String", "name": "oldChildrenPC"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-course/src/main/java/xyz/playedu/course/service/CourseChapterService.java\n// --------------------------------------------------\n// CourseChapter findOrFail(Integer id) throws NotFoundException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-course/src/main/java/xyz/playedu/course/service/CourseChapterService.java\n// --------------------------------------------------\n// CourseChapter findOrFail(Integer id,Integer courseId) throws NotFoundException ;\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CourseChapterServiceImpl extends ServiceImpl<CourseChapterMapper, CourseChapter>\n        implements CourseChapterService {\n\n    @Override\n    public void create(Integer courseId, String name, Integer sort) {\n        CourseChapter chapter = new CourseChapter();\n        chapter.setCourseId(courseId);\n        chapter.setName(name);\n        chapter.setSort(sort);\n        chapter.setCreatedAt(new Date());\n        chapter.setUpdatedAt(new Date());\n        save(chapter);\n    }\n\n    @Override\n    public void update(CourseChapter chapter, String name, Integer sort) {\n        CourseChapter newChapter = new CourseChapter();\n        newChapter.setId(chapter.getId());\n        newChapter.setName(name);\n        newChapter.setSort(sort);\n        updateById(newChapter);\n    }\n\n    @Override\n    public CourseChapter findOrFail(Integer id) throws NotFoundException {\n        CourseChapter chapter = getOne(query().getWrapper().eq(\"id\", id));\n        if (chapter == null) {\n            throw new NotFoundException(\"\u7ae0\u8282\u4e0d\u5b58\u5728\");\n        }\n        return chapter;\n    }\n\n    @Override\n    public List<CourseChapter> getChaptersByCourseId(Integer courseId) {\n        return list(query().getWrapper().eq(\"course_id\", courseId).orderByAsc(\"sort\"));\n    }\n\n    @Override\n    public CourseChapter findOrFail(Integer id, Integer courseId) throws NotFoundException {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void updateSort(List<Integer> ids, Integer cid) {\n        if (ids == null || ids.size() == 0) {\n            return;\n        }\n        List<CourseChapter> chapters = new ArrayList<>();\n        final Integer[] sortVal = {0};\n        for (Integer idItem : ids) {\n            chapters.add(\n                    new CourseChapter() {\n                        {\n                            setId(idItem);\n                            setId(cid);\n                            setSort(sortVal[0]++);\n                        }\n                    });\n        }\n        updateBatchById(chapters);\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/277", "ground_truth": "\n        CourseChapter chapter = getOne(query().getWrapper().eq(\"id\", id).eq(\"course_id\", courseId));\n        if (chapter == null) {\n            throw new NotFoundException(\"\u7ae0\u8282\u4e0d\u5b58\u5728\");\n        }\n        return chapter;\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-course", "src", "main", "java", "xyz", "playedu", "course", "service", "impl", "CourseChapterServiceImpl.java"], "context_start_lineno": 0, "function_name": "findOrFail", "left_context": "class CourseChapterServiceImpl extends ServiceImpl<CourseChapterMapper, CourseChapter>\n        implements CourseChapterService {\n\n    @Override\n    public void create(Integer courseId, String name, Integer sort) {\n        CourseChapter chapter = new CourseChapter();\n        chapter.setCourseId(courseId);\n        chapter.setName(name);\n        chapter.setSort(sort);\n        chapter.setCreatedAt(new Date());\n        chapter.setUpdatedAt(new Date());\n        save(chapter);\n    }\n\n    @Override\n    public void update(CourseChapter chapter, String name, Integer sort) {\n        CourseChapter newChapter = new CourseChapter();\n        newChapter.setId(chapter.getId());\n        newChapter.setName(name);\n        newChapter.setSort(sort);\n        updateById(newChapter);\n    }\n\n    @Override\n    public CourseChapter findOrFail(Integer id) throws NotFoundException {\n        CourseChapter chapter = getOne(query().getWrapper().eq(\"id\", id));\n        if (chapter == null) {\n            throw new NotFoundException(\"\u7ae0\u8282\u4e0d\u5b58\u5728\");\n        }\n        return chapter;\n    }\n\n    @Override\n    public List<CourseChapter> getChaptersByCourseId(Integer courseId) {\n        return list(query().getWrapper().eq(\"course_id\", courseId).orderByAsc(\"sort\"));\n    }\n\n    @Override\n    public CourseChapter findOrFail(Integer id, Integer courseId) throws NotFoundException {", "right_context": "}\n\n    @Override\n    public void updateSort(List<Integer> ids, Integer cid) {\n        if (ids == null || ids.size() == 0) {\n            return;\n        }\n        List<CourseChapter> chapters = new ArrayList<>();\n        final Integer[] sortVal = {0};\n        for (Integer idItem : ids) {\n            chapters.add(\n                    new CourseChapter() {\n                        {\n                            setId(idItem);\n                            setId(cid);\n                            setSort(sortVal[0]++);\n                        }\n                    });\n        }\n        updateBatchById(chapters);\n    }\n}", "class_name": "CourseChapterServiceImpl", "return_type": "CourseChapter", "parameters": [{"type": "Integer", "name": "id"}, {"type": "Integer", "name": "courseId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AdminUserRole implements Serializable {\n    @JsonProperty(\"admin_id\")\n    private Integer adminId;\n\n    @JsonProperty(\"role_id\")\n    private Integer roleId;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        AdminUserRole other = (AdminUserRole) that;\n        return (this.getAdminId() == null\n                        ? other.getAdminId() == null\n                        : this.getAdminId().equals(other.getAdminId()))\n                && (this.getRoleId() == null\n                        ? other.getRoleId() == null\n                        : this.getRoleId().equals(other.getRoleId()));\n    }\n\n    @Override\n    public int hashCode() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", adminId=\").append(adminId);\n        sb.append(\", roleId=\").append(roleId);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/282", "ground_truth": "\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getAdminId() == null) ? 0 : getAdminId().hashCode());\n        result = prime * result + ((getRoleId() == null) ? 0 : getRoleId().hashCode());\n        return result;\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "domain", "AdminUserRole.java"], "context_start_lineno": 0, "function_name": "hashCode", "left_context": "class AdminUserRole implements Serializable {\n    @JsonProperty(\"admin_id\")\n    private Integer adminId;\n\n    @JsonProperty(\"role_id\")\n    private Integer roleId;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        AdminUserRole other = (AdminUserRole) that;\n        return (this.getAdminId() == null\n                        ? other.getAdminId() == null\n                        : this.getAdminId().equals(other.getAdminId()))\n                && (this.getRoleId() == null\n                        ? other.getRoleId() == null\n                        : this.getRoleId().equals(other.getRoleId()));\n    }\n\n    @Override\n    public int hashCode() {", "right_context": "}\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", adminId=\").append(adminId);\n        sb.append(\", roleId=\").append(roleId);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "class_name": "AdminUserRole", "return_type": "int", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") public JsonResponse detail(){\n//   User user=FCtx.getUser();\n//   List<Department> departments=new ArrayList<>();\n//   List<Integer> depIds=userService.getDepIdsByUserId(user.getId());\n//   if (depIds != null && !depIds.isEmpty()) {\n//     departments=departmentService.listByIds(depIds);\n//   }\n//   user.setIdCard(PrivacyUtil.hideIDCard(user.getIdCard()));\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"departments\",departments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/avatar\") public JsonResponse changeAvatar(MultipartFile file){\n//   UserUploadImageLog log=uploadService.userAvatar(FCtx.getId(),file,FrontendConstant.USER_UPLOAD_IMAGE_TYPE_AVATAR,FrontendConstant.USER_UPLOAD_IMAGE_SCENE_AVATAR);\n//   userService.changeAvatar(FCtx.getId(),log.getUrl());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/password\") public JsonResponse changePassword(@RequestBody @Validated ChangePasswordRequest req) throws ServiceException {\n//   userService.passwordChange(FCtx.getUser(),req.getOldPassword(),req.getNewPassword());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/courses\") public JsonResponse courses(@RequestParam HashMap<String,Object> params){\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   if (depId == null || depId == 0) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   Integer categoryId=MapUtils.getInteger(params,\"category_id\");\n//   List<Integer> userJoinDepIds=userService.getDepIdsByUserId(FCtx.getId());\n//   if (userJoinDepIds == null) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u4efb\u4f55\u90e8\u95e8\");\n//   }\n//   if (!userJoinDepIds.contains(depId)) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u6240\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"learn_course_records\",new HashMap<>());\n//   List<Course> courses=new ArrayList<>();\n//   List<Course> depCourses=courseService.getDepCoursesAndShow(new ArrayList<>(){\n// {\n//       add(depId);\n//     }\n//   }\n// ,categoryId);\n//   List<Course> openCourses=courseService.getOpenCoursesAndShow(500,categoryId);\n//   if (depCourses != null && !depCourses.isEmpty()) {\n//     courses.addAll(depCourses);\n//   }\n//   if (openCourses != null && !openCourses.isEmpty()) {\n//     courses.addAll(openCourses);\n//   }\n//   if (!courses.isEmpty()) {\n//     courses=courses.stream().sorted(Comparator.comparing(Course::getPublishedAt,Comparator.nullsFirst(Date::compareTo)).reversed()).toList();\n//   }\n//   data.put(\"courses\",courses);\n//   List<Integer> courseIds=courses.stream().map(Course::getId).toList();\n//   Map<Integer,UserCourseRecord> learnCourseRecords=new HashMap<>();\n//   if (!courses.isEmpty()) {\n//     learnCourseRecords=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   }\n//   data.put(\"learn_course_records\",learnCourseRecords);\n//   int requiredCourseCount=0;\n//   int nunRequiredCourseCount=0;\n//   int requiredFinishedCourseCount=0;\n//   int nunRequiredFinishedCourseCount=0;\n//   int requiredHourCount=0;\n//   int nunRequiredHourCount=0;\n//   int requiredFinishedHourCount=0;\n//   int nunRequiredFinishedHourCount=0;\n//   Long todayLearnDuration=userLearnDurationStatsService.todayUserDuration(FCtx.getId());\n//   Long learnDuration=userLearnDurationStatsService.userDuration(FCtx.getId());\n//   if (!courses.isEmpty()) {\n//     for (    Course courseItem : courses) {\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredHourCount+=courseItem.getClassHour();\n//         requiredCourseCount+=1;\n//       }\n//  else {\n//         nunRequiredHourCount+=courseItem.getClassHour();\n//         nunRequiredCourseCount+=1;\n//       }\n//       UserCourseRecord learnRecord=learnCourseRecords.get(courseItem.getId());\n//       if (learnRecord == null) {\n//         continue;\n//       }\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           requiredFinishedCourseCount++;\n//         }\n//       }\n//  else {\n//         nunRequiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           nunRequiredFinishedCourseCount++;\n//         }\n//       }\n//     }\n//   }\n//   HashMap<String,Object> stats=new HashMap<>();\n//   stats.put(\"required_course_count\",requiredCourseCount);\n//   stats.put(\"nun_required_course_count\",nunRequiredCourseCount);\n//   stats.put(\"required_finished_course_count\",requiredFinishedCourseCount);\n//   stats.put(\"nun_required_finished_course_count\",nunRequiredFinishedCourseCount);\n//   stats.put(\"required_hour_count\",requiredHourCount);\n//   stats.put(\"nun_required_hour_count\",nunRequiredHourCount);\n//   stats.put(\"required_finished_hour_count\",requiredFinishedHourCount);\n//   stats.put(\"nun_required_finished_hour_count\",nunRequiredFinishedHourCount);\n//   stats.put(\"today_learn_duration\",todayLearnDuration);\n//   stats.put(\"learn_duration\",learnDuration);\n//   data.put(\"stats\",stats);\n//   data.put(\"user_course_hour_count\",userCourseHourRecordService.getUserCourseHourCount(FCtx.getId(),courseIds,null).stream().collect(Collectors.toMap(UserCourseHourRecordCourseCountMapper::getCourseId,UserCourseHourRecordCourseCountMapper::getTotal)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseHourController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE) @PostMapping(\"/create-batch\") @Transactional @Log(title=\"\u7ebf\u4e0a\u8bfe-\u8bfe\u65f6-\u6279\u91cf\u5bfc\u5165\",businessType=BusinessTypeConstant.INSERT) public JsonResponse storeMulti(@PathVariable(name=\"courseId\") Integer courseId,@RequestBody @Validated CourseHourMultiRequest req){\n//   if (req.getHours().size() == 0) {\n//     return JsonResponse.error(\"\u53c2\u6570\u4e3a\u7a7a\");\n//   }\n//   List<Integer> existsRids=hourService.getRidsByCourseId(courseId,BackendConstant.RESOURCE_TYPE_VIDEO);\n//   List<CourseHour> hours=new ArrayList<>();\n//   Date now=new Date();\n//   for (  CourseHourMultiRequest.HourItem item : req.getHours()) {\n//     if (existsRids.contains(item.getRid())) {\n//       return JsonResponse.error(\"\u8bfe\u65f6\u300a\" + item.getTitle() + \"\u300b\u5df2\u5b58\u5728\");\n//     }\n//     hours.add(new CourseHour(){\n// {\n//         setCourseId(courseId);\n//         setChapterId(item.getChapterId());\n//         setSort(item.getSort());\n//         setType(item.getType());\n//         setRid(item.getRid());\n//         setTitle(item.getTitle());\n//         setDuration(item.getDuration());\n//         setCreatedAt(now);\n//       }\n//     }\n// );\n//   }\n//   hourService.saveBatch(hours);\n//   CourseHour firstHour=hours.get(0);\n//   ctx.publishEvent(new CourseHourCreatedEvent(this,BCtx.getId(),firstHour.getCourseId(),firstHour.getChapterId(),firstHour.getId()));\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminRoleController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.ADMIN_ROLE) @PostMapping(\"/create\") @Log(title=\"\u7ba1\u7406\u5458\u89d2\u8272-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@RequestBody @Validated AdminRoleRequest request){\n//   roleService.createWithPermissionIds(request.getName(),request.getPermissionIds());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminUserController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.ADMIN_USER_CUD) @PostMapping(\"/create\") @Log(title=\"\u7ba1\u7406\u5458-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@RequestBody @Validated AdminUserRequest req) throws ServiceException {\n//   if (req.getPassword().length() == 0) {\n//     return JsonResponse.error(\"\u8bf7\u8f93\u5165\u5bc6\u7801\");\n//   }\n//   adminUserService.createWithRoleIds(req.getName(),req.getEmail(),req.getPassword(),req.getIsBanLogin(),req.getRoleIds());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseChapterController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE) @PostMapping(\"/create\") @Log(title=\"\u7ebf\u4e0a\u8bfe-\u7ae0\u8282-\u65b0\u5efa\",businessType=BusinessTypeConstant.GET) public JsonResponse store(@PathVariable(name=\"courseId\") Integer courseId,@RequestBody @Validated CourseChapterRequest req){\n//   chapterService.create(courseId,req.getName(),req.getSort());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE) @PostMapping(\"/create\") @Transactional @Log(title=\"\u7ebf\u4e0a\u8bfe-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@RequestBody @Validated CourseRequest req) throws ParseException {\n//   if (req.getShortDesc().length() > 200) {\n//     return JsonResponse.error(\"\u8bfe\u7a0b\u7b80\u77ed\u4ecb\u7ecd\u4e0d\u80fd\u8d85\u8fc7200\u5b57\");\n//   }\n//   Course course=courseService.createWithCategoryIdsAndDepIds(req.getTitle(),req.getThumb(),req.getShortDesc(),req.getIsRequired(),req.getIsShow(),req.getCategoryIds(),req.getDepIds(),BCtx.getId());\n//   Date now=new Date();\n//   int classHourCount=0;\n//   if (!req.getHours().isEmpty()) {\n//     List<CourseHour> insertHours=new ArrayList<>();\n//     final Integer[] chapterSort={0};\n//     for (    CourseRequest.HourItem hourItem : req.getHours()) {\n//       insertHours.add(new CourseHour(){\n// {\n//           setCourseId(course.getId());\n//           setChapterId(0);\n//           setSort(chapterSort[0]++);\n//           setTitle(hourItem.getName());\n//           setType(hourItem.getType());\n//           setDuration(hourItem.getDuration());\n//           setRid(hourItem.getRid());\n//           setCreatedAt(now);\n//         }\n//       }\n// );\n//     }\n//     if (!insertHours.isEmpty()) {\n//       hourService.saveBatch(insertHours);\n//       classHourCount=insertHours.size();\n//     }\n//   }\n//  else {\n//     if (req.getChapters().isEmpty()) {\n//       return JsonResponse.error(\"\u8bf7\u914d\u7f6e\u8bfe\u65f6\");\n//     }\n//     List<CourseHour> insertHours=new ArrayList<>();\n//     final Integer[] chapterSort={0};\n//     for (    CourseRequest.ChapterItem chapterItem : req.getChapters()) {\n//       CourseChapter tmpChapter=new CourseChapter(){\n// {\n//           setCourseId(course.getId());\n//           setSort(chapterSort[0]++);\n//           setName(chapterItem.getName());\n//           setCreatedAt(now);\n//           setUpdatedAt(now);\n//         }\n//       }\n// ;\n//       chapterService.save(tmpChapter);\n//       final Integer[] hourSort={0};\n//       for (      CourseRequest.HourItem hourItem : chapterItem.getHours()) {\n//         insertHours.add(new CourseHour(){\n// {\n//             setChapterId(tmpChapter.getId());\n//             setCourseId(course.getId());\n//             setSort(hourSort[0]++);\n//             setTitle(hourItem.getName());\n//             setType(hourItem.getType());\n//             setDuration(hourItem.getDuration());\n//             setRid(hourItem.getRid());\n//             setCreatedAt(now);\n//           }\n//         }\n// );\n//       }\n//     }\n//     if (!insertHours.isEmpty()) {\n//       hourService.saveBatch(insertHours);\n//       classHourCount=insertHours.size();\n//     }\n//   }\n//   if (classHourCount > 0) {\n//     courseService.updateClassHour(course.getId(),classHourCount);\n//   }\n//   if (null != req.getAttachments() && !req.getAttachments().isEmpty()) {\n//     List<CourseAttachment> insertAttachments=new ArrayList<>();\n//     final Integer[] sort={0};\n//     for (    CourseRequest.AttachmentItem attachmentItem : req.getAttachments()) {\n//       insertAttachments.add(new CourseAttachment(){\n// {\n//           setCourseId(course.getId());\n//           setSort(sort[0]++);\n//           setTitle(attachmentItem.getName());\n//           setType(attachmentItem.getType());\n//           setRid(attachmentItem.getRid());\n//           setCreatedAt(now);\n//         }\n//       }\n// );\n//     }\n//     if (!insertAttachments.isEmpty()) {\n//       attachmentService.saveBatch(insertAttachments);\n//     }\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseHourController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE) @PostMapping(\"/create\") @Log(title=\"\u7ebf\u4e0a\u8bfe-\u8bfe\u65f6-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@PathVariable(name=\"courseId\") Integer courseId,@RequestBody @Validated CourseHourRequest req) throws NotFoundException {\n//   String type=req.getType();\n//   if (!Arrays.asList(BackendConstant.COURSE_HOUR_TYPE_WHITELIST).contains(type)) {\n//     return JsonResponse.error(\"\u8bfe\u65f6\u7c7b\u578b\u4e0d\u652f\u6301\");\n//   }\n//   Integer chapterId=req.getChapterId();\n//   chapterService.findOrFail(chapterId,courseId);\n//   List<Integer> existsRids=hourService.getRidsByCourseId(courseId,BackendConstant.RESOURCE_TYPE_VIDEO);\n//   if (existsRids != null) {\n//     if (existsRids.contains(req.getRid())) {\n//       return JsonResponse.error(\"\u8bfe\u65f6\u5df2\u5b58\u5728\");\n//     }\n//   }\n//   CourseHour courseHour=hourService.create(courseId,chapterId,req.getSort(),req.getTitle(),type,req.getRid(),req.getDuration());\n//   ctx.publishEvent(new CourseHourCreatedEvent(this,BCtx.getId(),courseHour.getCourseId(),courseHour.getChapterId(),courseHour.getId()));\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/DepartmentController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.DEPARTMENT_CUD) @PostMapping(\"/create\") @Log(title=\"\u90e8\u95e8-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@RequestBody @Validated DepartmentRequest req) throws NotFoundException {\n//   if (ldapBus.enabledLDAP()) {\n//     return JsonResponse.error(\"\u5df2\u542f\u7528LDAP\u670d\u52a1\uff0c\u7981\u6b62\u6dfb\u52a0\u90e8\u95e8\");\n//   }\n//   departmentService.create(req.getName(),req.getParentId(),req.getSort());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceCategoryController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.RESOURCE_CATEGORY) @PostMapping(\"/create\") @Log(title=\"\u8d44\u6e90-\u5206\u7c7b-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@RequestBody @Validated ResourceCategoryRequest req) throws NotFoundException {\n//   categoryService.create(req.getName(),req.getParentId(),req.getSort());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/UserController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.USER_STORE) @PostMapping(\"/create\") @Log(title=\"\u5b66\u5458-\u65b0\u5efa\",businessType=BusinessTypeConstant.INSERT) public JsonResponse store(@RequestBody @Validated UserRequest req){\n//   String email=req.getEmail();\n//   if (userService.emailIsExists(email)) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u5df2\u5b58\u5728\");\n//   }\n//   String password=req.getPassword();\n//   if (password.isEmpty()) {\n//     return JsonResponse.error(\"\u8bf7\u8f93\u5165\u5bc6\u7801\");\n//   }\n//   userService.createWithDepIds(email,req.getName(),req.getAvatar(),req.getPassword(),req.getIdCard(),req.getDepIds());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CourseAttachmentController {\n\n    @Autowired private CourseAttachmentService attachmentService;\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @PostMapping(\"/create\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u65b0\u5efa\", businessType = BusinessTypeConstant.INSERT)\n    public JsonResponse store(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @RequestBody @Validated CourseAttachmentRequest req)\n            throws NotFoundException {<FILL_FUNCTION_BODY>}\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @PostMapping(\"/create-batch\")\n    @Transactional\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u6279\u91cf\u65b0\u5efa\", businessType = BusinessTypeConstant.INSERT)\n    public JsonResponse storeMulti(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @RequestBody @Validated CourseAttachmentMultiRequest req) {\n        if (req.getAttachments().size() == 0) {\n            return JsonResponse.error(\"\u53c2\u6570\u4e3a\u7a7a\");\n        }\n\n        List<Integer> existsRids = attachmentService.getRidsByCourseId(courseId);\n\n        List<CourseAttachment> attachments = new ArrayList<>();\n        Date now = new Date();\n\n        for (CourseAttachmentMultiRequest.AttachmentItem item : req.getAttachments()) {\n            if (existsRids.contains(item.getRid())) {\n                return JsonResponse.error(\"\u9644\u4ef6\u300a\" + item.getTitle() + \"\u300b\u5df2\u5b58\u5728\");\n            }\n\n            attachments.add(\n                    new CourseAttachment() {\n                        {\n                            setCourseId(courseId);\n                            setSort(item.getSort());\n                            setType(item.getType());\n                            setRid(item.getRid());\n                            setTitle(item.getTitle());\n                            setCreatedAt(now);\n                        }\n                    });\n        }\n\n        attachmentService.saveBatch(attachments);\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @GetMapping(\"/{id}\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u7f16\u8f91\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse edit(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id)\n            throws NotFoundException {\n        CourseAttachment courseAttachment = attachmentService.findOrFail(id, courseId);\n        return JsonResponse.data(courseAttachment);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @PutMapping(\"/{id}\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u7f16\u8f91\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse update(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id,\n            @RequestBody @Validated CourseAttachmentRequest req)\n            throws NotFoundException {\n        CourseAttachment courseAttachment = attachmentService.findOrFail(id, courseId);\n        attachmentService.update(courseAttachment, req.getSort(), req.getTitle());\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @DeleteMapping(\"/{id}\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u5220\u9664\", businessType = BusinessTypeConstant.DELETE)\n    public JsonResponse destroy(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id)\n            throws NotFoundException {\n        CourseAttachment courseAttachment = attachmentService.findOrFail(id, courseId);\n        attachmentService.removeById(courseAttachment.getId());\n        return JsonResponse.success();\n    }\n\n    @PutMapping(\"/update/sort\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u6392\u5e8f\u8c03\u6574\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse updateSort(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @RequestBody @Validated CourseAttachmentSortRequest req) {\n        attachmentService.updateSort(req.getIds(), courseId);\n        return JsonResponse.success();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/315", "ground_truth": "\n        // \u9644\u4ef6\u7c7b\u578b\u6821\u9a8c\n        String type = req.getType();\n        if (!BackendConstant.RESOURCE_TYPE_ATTACHMENT.contains(type)) {\n            return JsonResponse.error(\"\u9644\u4ef6\u7c7b\u578b\u4e0d\u652f\u6301\");\n        }\n\n        // \u8bfe\u65f6\u91cd\u590d\u6dfb\u52a0\u6821\u9a8c\n        List<Integer> existsRids = attachmentService.getRidsByCourseId(courseId);\n        if (existsRids != null) {\n            if (existsRids.contains(req.getRid())) {\n                return JsonResponse.error(\"\u9644\u4ef6\u5df2\u5b58\u5728\");\n            }\n        }\n\n        CourseAttachment courseAttachment =\n                attachmentService.create(\n                        courseId, req.getSort(), req.getTitle(), type, req.getRid());\n        return JsonResponse.success();\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "backend", "CourseAttachmentController.java"], "context_start_lineno": 0, "function_name": "store", "left_context": "class CourseAttachmentController {\n\n    @Autowired private CourseAttachmentService attachmentService;\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @PostMapping(\"/create\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u65b0\u5efa\", businessType = BusinessTypeConstant.INSERT)\n    public JsonResponse store(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @RequestBody @Validated CourseAttachmentRequest req)\n            throws NotFoundException {", "right_context": "}\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @PostMapping(\"/create-batch\")\n    @Transactional\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u6279\u91cf\u65b0\u5efa\", businessType = BusinessTypeConstant.INSERT)\n    public JsonResponse storeMulti(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @RequestBody @Validated CourseAttachmentMultiRequest req) {\n        if (req.getAttachments().size() == 0) {\n            return JsonResponse.error(\"\u53c2\u6570\u4e3a\u7a7a\");\n        }\n\n        List<Integer> existsRids = attachmentService.getRidsByCourseId(courseId);\n\n        List<CourseAttachment> attachments = new ArrayList<>();\n        Date now = new Date();\n\n        for (CourseAttachmentMultiRequest.AttachmentItem item : req.getAttachments()) {\n            if (existsRids.contains(item.getRid())) {\n                return JsonResponse.error(\"\u9644\u4ef6\u300a\" + item.getTitle() + \"\u300b\u5df2\u5b58\u5728\");\n            }\n\n            attachments.add(\n                    new CourseAttachment() {\n                        {\n                            setCourseId(courseId);\n                            setSort(item.getSort());\n                            setType(item.getType());\n                            setRid(item.getRid());\n                            setTitle(item.getTitle());\n                            setCreatedAt(now);\n                        }\n                    });\n        }\n\n        attachmentService.saveBatch(attachments);\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @GetMapping(\"/{id}\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u7f16\u8f91\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse edit(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id)\n            throws NotFoundException {\n        CourseAttachment courseAttachment = attachmentService.findOrFail(id, courseId);\n        return JsonResponse.data(courseAttachment);\n    }\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @PutMapping(\"/{id}\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u7f16\u8f91\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse update(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id,\n            @RequestBody @Validated CourseAttachmentRequest req)\n            throws NotFoundException {\n        CourseAttachment courseAttachment = attachmentService.findOrFail(id, courseId);\n        attachmentService.update(courseAttachment, req.getSort(), req.getTitle());\n        return JsonResponse.success();\n    }\n\n    @BackendPermission(slug = BPermissionConstant.COURSE)\n    @DeleteMapping(\"/{id}\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u5220\u9664\", businessType = BusinessTypeConstant.DELETE)\n    public JsonResponse destroy(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id)\n            throws NotFoundException {\n        CourseAttachment courseAttachment = attachmentService.findOrFail(id, courseId);\n        attachmentService.removeById(courseAttachment.getId());\n        return JsonResponse.success();\n    }\n\n    @PutMapping(\"/update/sort\")\n    @Log(title = \"\u7ebf\u4e0a\u8bfe-\u9644\u4ef6-\u6392\u5e8f\u8c03\u6574\", businessType = BusinessTypeConstant.UPDATE)\n    public JsonResponse updateSort(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @RequestBody @Validated CourseAttachmentSortRequest req) {\n        attachmentService.updateSort(req.getIds(), courseId);\n        return JsonResponse.success();\n    }\n}", "class_name": "CourseAttachmentController", "return_type": "JsonResponse", "parameters": [{"type": "Integer", "name": "courseId"}, {"type": "CourseAttachmentRequest", "name": "req"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminLogController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.ADMIN_LOG) @GetMapping(\"/index\") @Log(title=\"\u7ba1\u7406\u5458\u65e5\u5fd7-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   Integer adminId=MapUtils.getInteger(params,\"admin_id\");\n//   String adminName=MapUtils.getString(params,\"admin_name\");\n//   String module=MapUtils.getString(params,\"module\");\n//   String title=MapUtils.getString(params,\"title\");\n//   Integer opt=MapUtils.getInteger(params,\"opt\");\n//   String startTime=MapUtils.getString(params,\"start_time\");\n//   String endTime=MapUtils.getString(params,\"end_time\");\n//   AdminLogPaginateFiler filter=new AdminLogPaginateFiler();\n//   if (backendBus.isSuperAdmin()) {\n//     filter.setAdminId(adminId);\n//   }\n//  else {\n//     filter.setAdminId(BCtx.getId());\n//   }\n//   filter.setAdminName(adminName);\n//   filter.setModule(module);\n//   filter.setTitle(title);\n//   filter.setOpt(opt);\n//   filter.setStartTime(startTime);\n//   filter.setEndTime(endTime);\n//   filter.setSortField(sortField);\n//   filter.setSortAlgo(sortAlgo);\n//   PaginationResult<AdminLog> result=adminLogService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminRoleController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u7ba1\u7406\u5458\u89d2\u8272-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   List<AdminRole> data=roleService.list();\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AppConfigController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.SYSTEM_CONFIG) @GetMapping(\"\") @Log(title=\"\u7cfb\u7edf\u914d\u7f6e-\u8bfb\u53d6\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   List<AppConfig> configs=configService.allShow();\n//   List<AppConfig> data=new ArrayList<>();\n//   for (  AppConfig item : configs) {\n//     if (item.getIsPrivate() == 1 && StringUtil.isNotEmpty(item.getKeyValue())) {\n//       item.setKeyValue(SystemConstant.CONFIG_MASK);\n//     }\n//     data.add(item);\n//   }\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseAttachmentDownloadLogController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u5b66\u5458\u4e0b\u8f7d\u8bfe\u4ef6\u8bb0\u5f55-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   Integer userId=MapUtils.getInteger(params,\"user_id\");\n//   Integer courseId=MapUtils.getInteger(params,\"course_id\");\n//   String title=MapUtils.getString(params,\"title\");\n//   Integer courserAttachmentId=MapUtils.getInteger(params,\"courser_attachment_id\");\n//   Integer rid=MapUtils.getInteger(params,\"rid\");\n//   CourseAttachmentDownloadLogPaginateFiler filter=new CourseAttachmentDownloadLogPaginateFiler();\n//   filter.setUserId(userId);\n//   filter.setCourseId(courseId);\n//   filter.setTitle(title);\n//   filter.setCourserAttachmentId(courserAttachmentId);\n//   filter.setRid(rid);\n//   filter.setSortField(sortField);\n//   filter.setSortAlgo(sortAlgo);\n//   PaginationResult<CourseAttachmentDownloadLog> result=courseAttachmentDownloadLogService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE) @GetMapping(\"/index\") @Log(title=\"\u7ebf\u4e0a\u8bfe-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String title=MapUtils.getString(params,\"title\");\n//   String depIds=MapUtils.getString(params,\"dep_ids\");\n//   String categoryIds=MapUtils.getString(params,\"category_ids\");\n//   Integer isRequired=MapUtils.getInteger(params,\"is_required\");\n//   CoursePaginateFiler filter=new CoursePaginateFiler();\n//   filter.setTitle(title);\n//   filter.setSortField(sortField);\n//   filter.setSortAlgo(sortAlgo);\n//   filter.setCategoryIds(categoryIds);\n//   filter.setDepIds(depIds);\n//   filter.setIsRequired(isRequired);\n//   if (!backendBus.isSuperAdmin()) {\n//     filter.setAdminId(BCtx.getId());\n//   }\n//   PaginationResult<Course> result=courseService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   List<Integer> courseIds=result.getData().stream().map(Course::getId).toList();\n//   data.put(\"course_category_ids\",courseService.getCategoryIdsGroup(courseIds));\n//   data.put(\"course_dep_ids\",courseService.getDepIdsGroup(courseIds));\n//   data.put(\"categories\",categoryService.id2name());\n//   data.put(\"departments\",departmentService.id2name());\n//   data.put(\"admin_users\",new HashMap<>());\n//   if (!result.getData().isEmpty()) {\n//     Map<Integer,String> adminUsers=adminUserService.chunks(result.getData().stream().map(Course::getAdminId).toList()).stream().collect(Collectors.toMap(AdminUser::getId,AdminUser::getName));\n//     data.put(\"admin_users\",adminUsers);\n//   }\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/CourseUserController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.COURSE_USER) @GetMapping(\"/index\") @SneakyThrows @Log(title=\"\u7ebf\u4e0a\u8bfe-\u5b66\u4e60\u8bb0\u5f55-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@PathVariable(name=\"courseId\") Integer courseId,@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String name=MapUtils.getString(params,\"name\");\n//   String email=MapUtils.getString(params,\"email\");\n//   String idCard=MapUtils.getString(params,\"id_card\");\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   UserPaginateFilter filter=new UserPaginateFilter();\n//   filter.setName(name);\n//   filter.setEmail(email);\n//   filter.setSortAlgo(sortAlgo);\n//   filter.setSortField(sortField);\n//   filter.setIdCard(idCard);\n//   if (depId != null && depId > 0) {\n//     filter.setDepIds(new ArrayList<>(){\n// {\n//         add(depId);\n//       }\n//     }\n// );\n//   }\n//  else {\n//     List<Integer> depIds=courseService.getDepIdsByCourseId(courseId);\n//     if (depIds != null && depIds.size() > 0) {\n//       filter.setDepIds(depIds);\n//     }\n//   }\n//   PaginationResult<User> result=userService.paginate(page,size,filter);\n//   List<Integer> userIds=result.getData().stream().map(User::getId).toList();\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   data.put(\"user_course_records\",userCourseRecordService.chunk(userIds,new ArrayList<>(){\n// {\n//       add(courseId);\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(UserCourseRecord::getUserId,e -> e)));\n//   data.put(\"user_course_hour_user_first_at\",userCourseHourRecordService.getUserCourseHourUserFirstCreatedAt(courseId,userIds).stream().collect(Collectors.toMap(UserCourseHourRecordUserFirstCreatedAtMapper::getUserId,UserCourseHourRecordUserFirstCreatedAtMapper::getCreatedAt)));\n//   data.put(\"course\",courseService.findOrFail(courseId));\n//   data.put(\"user_dep_ids\",userService.getDepIdsGroup(result.getData().stream().map(User::getId).toList()));\n//   data.put(\"departments\",departmentService.id2name());\n//   List<UserCourseHourRecord> perUserEarliestRecords=userCourseHourRecordService.getCoursePerUserEarliestRecord(courseId);\n//   data.put(\"per_user_earliest_records\",perUserEarliestRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getUserId,e -> e)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u90e8\u95e8-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"departments\",departmentService.groupByParent());\n//   data.put(\"dep_user_count\",departmentService.getDepartmentsUserCount());\n//   data.put(\"user_total\",userService.total());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/departments\") @Log(title=\"\u90e8\u95e8-\u5168\u90e8\u90e8\u95e8\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam(name=\"parent_id\",defaultValue=\"0\") Integer parentId){\n//   List<Department> departments=departmentService.listByParentId(parentId);\n//   return JsonResponse.data(departments);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceCategoryController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u8d44\u6e90-\u5206\u7c7b-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(){\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"categories\",categoryService.groupByParent());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceCategoryController.java\n// --------------------------------------------------\n// @GetMapping(\"/categories\") @Log(title=\"\u8d44\u6e90-\u5206\u7c7b-\u5168\u90e8\u5206\u7c7b\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam(name=\"parent_id\",defaultValue=\"0\") Integer parentId){\n//   List<Category> categories=categoryService.listByParentId(parentId);\n//   return JsonResponse.data(categories);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/ResourceController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") @Log(title=\"\u8d44\u6e90-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String name=MapUtils.getString(params,\"name\");\n//   String type=MapUtils.getString(params,\"type\");\n//   String categoryIds=MapUtils.getString(params,\"category_ids\");\n//   if (type == null || type.trim().isEmpty()) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u8d44\u6e90\u7c7b\u578b\");\n//   }\n//   ResourcePaginateFilter filter=new ResourcePaginateFilter();\n//   filter.setSortAlgo(sortAlgo);\n//   filter.setSortField(sortField);\n//   filter.setType(type);\n//   filter.setCategoryIds(categoryIds);\n//   filter.setName(name);\n//   if (!backendBus.isSuperAdmin()) {\n//     filter.setAdminId(BCtx.getId());\n//   }\n//   PaginationResult<Resource> result=resourceService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"result\",result);\n//   if (type.equals(BackendConstant.RESOURCE_TYPE_VIDEO)) {\n//     List<ResourceVideo> resourceVideos=resourceVideoService.chunksByRids(result.getData().stream().map(Resource::getId).toList());\n//     Map<Integer,ResourceVideo> resourceVideosExtra=resourceVideos.stream().collect(Collectors.toMap(ResourceVideo::getRid,e -> e));\n//     data.put(\"videos_extra\",resourceVideosExtra);\n//   }\n//   data.put(\"admin_users\",new HashMap<>());\n//   if (!result.getData().isEmpty()) {\n//     Map<Integer,String> adminUsers=adminUserService.chunks(result.getData().stream().map(Resource::getAdminId).toList()).stream().collect(Collectors.toMap(AdminUser::getId,AdminUser::getName));\n//     data.put(\"admin_users\",adminUsers);\n//   }\n//   if (!type.equals(BackendConstant.RESOURCE_TYPE_VIDEO) && !type.equals(BackendConstant.RESOURCE_TYPE_IMAGE)) {\n//     filter.setType(BackendConstant.RESOURCE_TYPE_ATTACHMENT);\n//     data.put(\"existing_types\",resourceService.paginateType(filter));\n//   }\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/UserController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.USER_INDEX) @GetMapping(\"/index\") @Log(title=\"\u5b66\u5458-\u5217\u8868\",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){\n//   Integer page=MapUtils.getInteger(params,\"page\",1);\n//   Integer size=MapUtils.getInteger(params,\"size\",10);\n//   String sortField=MapUtils.getString(params,\"sort_field\");\n//   String sortAlgo=MapUtils.getString(params,\"sort_algo\");\n//   String name=MapUtils.getString(params,\"name\");\n//   String email=MapUtils.getString(params,\"email\");\n//   String idCard=MapUtils.getString(params,\"id_card\");\n//   Integer isActive=MapUtils.getInteger(params,\"is_active\");\n//   Integer isLock=MapUtils.getInteger(params,\"is_lock\");\n//   Integer isVerify=MapUtils.getInteger(params,\"is_verify\");\n//   Integer isSetPassword=MapUtils.getInteger(params,\"is_set_password\");\n//   String createdAt=MapUtils.getString(params,\"created_at\");\n//   String depIdsStr=MapUtils.getString(params,\"dep_ids\");\n//   List<Integer> depIds=null;\n//   if (depIdsStr != null && !depIdsStr.trim().isEmpty()) {\n//     if (\"0\".equals(depIdsStr)) {\n//       depIds=new ArrayList<>();\n//     }\n//  else {\n//       depIds=Arrays.stream(depIdsStr.split(\",\")).map(Integer::valueOf).toList();\n//     }\n//   }\n//   List<Integer> finalDepIds=depIds;\n//   UserPaginateFilter filter=new UserPaginateFilter(){\n// {\n//       setName(name);\n//       setEmail(email);\n//       setIdCard(idCard);\n//       setIsActive(isActive);\n//       setIsLock(isLock);\n//       setIsVerify(isVerify);\n//       setIsSetPassword(isSetPassword);\n//       setDepIds(finalDepIds);\n//       setSortAlgo(sortAlgo);\n//       setSortField(sortField);\n//     }\n//   }\n// ;\n//   if (createdAt != null && !createdAt.trim().isEmpty()) {\n//     filter.setCreatedAt(createdAt.split(\",\"));\n//   }\n//   PaginationResult<User> result=userService.paginate(page,size,filter);\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"data\",result.getData());\n//   data.put(\"total\",result.getTotal());\n//   data.put(\"user_dep_ids\",userService.getDepIdsGroup(result.getData().stream().map(User::getId).toList()));\n//   data.put(\"departments\",departmentService.id2name());\n//   data.put(\"pure_total\",userService.total());\n//   data.put(\"dep_user_count\",departmentService.getDepartmentsUserCount());\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/DepartmentController.java\n// --------------------------------------------------\n// @GetMapping(\"/index\") public JsonResponse index(){\n//   return JsonResponse.data(departmentService.all().stream().collect(Collectors.groupingBy(Department::getParentId)));\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DashboardController {\n\n    @Autowired private AdminUserService adminUserService;\n\n    @Autowired private CategoryService categoryService;\n\n    @Autowired private UserService userService;\n\n    @Autowired private CourseService courseService;\n\n    @Autowired private DepartmentService departmentService;\n\n    @Autowired private ResourceService resourceService;\n\n    @Autowired private UserLearnDurationStatsService userLearnDurationStatsService;\n\n    @GetMapping(\"/index\")\n    @Log(title = \"\u4e3b\u9762\u677f\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse index() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/360", "ground_truth": "\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"version\", SystemConstant.VERSION);\n\n        data.put(\"user_total\", userService.total()); // \u603b\u5b66\u5458\u6570\u91cf\n        data.put(\"user_today\", userService.todayCount()); // \u4eca\u65e5\u6ce8\u518c\u5b66\u5458\u6570\u91cf\n        data.put(\"user_yesterday\", userService.yesterdayCount()); // \u6628\u65e5\u6ce8\u518c\u5b66\u5458\u6570\u91cf\n\n        data.put(\"course_total\", courseService.total()); // \u7ebf\u4e0a\u8bfe\u6570\u91cf\n\n        data.put(\"department_total\", departmentService.total());\n        data.put(\"resource_category_total\", categoryService.total());\n        data.put(\"admin_user_total\", adminUserService.total());\n\n        data.put(\n                \"resource_video_total\", resourceService.total(BackendConstant.RESOURCE_TYPE_VIDEO));\n        data.put(\n                \"resource_image_total\", resourceService.total(BackendConstant.RESOURCE_TYPE_IMAGE));\n\n        data.put(\"user_learn_today\", userLearnDurationStatsService.todayTotal());\n        data.put(\"user_learn_yesterday\", userLearnDurationStatsService.yesterdayTotal());\n\n        List<UserLearnDurationStats> userLearnTop10 = userLearnDurationStatsService.top10();\n        Map<Integer, User> top10Users =\n                userService\n                        .chunks(\n                                userLearnTop10.stream()\n                                        .map(UserLearnDurationStats::getUserId)\n                                        .toList(),\n                                new ArrayList<>() {\n                                    {\n                                        add(\"id\");\n                                        add(\"name\");\n                                        add(\"avatar\");\n                                        add(\"email\");\n                                    }\n                                })\n                        .stream()\n                        .collect(Collectors.toMap(User::getId, e -> e));\n        data.put(\"user_learn_top10\", userLearnTop10);\n        data.put(\"user_learn_top10_users\", top10Users);\n\n        return JsonResponse.data(data);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "backend", "DashboardController.java"], "context_start_lineno": 0, "function_name": "index", "left_context": "class DashboardController {\n\n    @Autowired private AdminUserService adminUserService;\n\n    @Autowired private CategoryService categoryService;\n\n    @Autowired private UserService userService;\n\n    @Autowired private CourseService courseService;\n\n    @Autowired private DepartmentService departmentService;\n\n    @Autowired private ResourceService resourceService;\n\n    @Autowired private UserLearnDurationStatsService userLearnDurationStatsService;\n\n    @GetMapping(\"/index\")\n    @Log(title = \"\u4e3b\u9762\u677f\", businessType = BusinessTypeConstant.GET)\n    public JsonResponse index() {", "right_context": "}\n}", "class_name": "DashboardController", "return_type": "JsonResponse", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CourseCategory implements Serializable {\n    /** */\n    @JsonProperty(\"course_id\")\n    private Integer courseId;\n\n    /** */\n    @JsonProperty(\"category_id\")\n    private Integer categoryId;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getCourseId() == null) ? 0 : getCourseId().hashCode());\n        result = prime * result + ((getCategoryId() == null) ? 0 : getCategoryId().hashCode());\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", courseId=\").append(courseId);\n        sb.append(\", categoryId=\").append(categoryId);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/418", "ground_truth": "\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        CourseCategory other = (CourseCategory) that;\n        return (this.getCourseId() == null\n                        ? other.getCourseId() == null\n                        : this.getCourseId().equals(other.getCourseId()))\n                && (this.getCategoryId() == null\n                        ? other.getCategoryId() == null\n                        : this.getCategoryId().equals(other.getCategoryId()));\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-course", "src", "main", "java", "xyz", "playedu", "course", "domain", "CourseCategory.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class CourseCategory implements Serializable {\n    /** */\n    @JsonProperty(\"course_id\")\n    private Integer courseId;\n\n    /** */\n    @JsonProperty(\"category_id\")\n    private Integer categoryId;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public boolean equals(Object that) {", "right_context": "}\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getCourseId() == null) ? 0 : getCourseId().hashCode());\n        result = prime * result + ((getCategoryId() == null) ? 0 : getCategoryId().hashCode());\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", courseId=\").append(courseId);\n        sb.append(\", categoryId=\").append(categoryId);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}", "class_name": "CourseCategory", "return_type": "boolean", "parameters": [{"type": "Object", "name": "that"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UserDepartmentServiceImpl extends ServiceImpl<UserDepartmentMapper, UserDepartment>\n        implements UserDepartmentService {\n\n    @Override\n    public List<Integer> getUserIdsByDepIds(List<Integer> depIds) {\n        return list(query().getWrapper().in(\"dep_id\", depIds)).stream()\n                .map(UserDepartment::getUserId)\n                .toList();\n    }\n\n    @Override\n    public void storeDepIds(Integer userId, Integer[] depIds) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void resetStoreDepIds(Integer userId, Integer[] depIds) {\n        remove(query().getWrapper().eq(\"user_id\", userId));\n        storeDepIds(userId, depIds);\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/422", "ground_truth": "\n        if (depIds == null) {\n            return;\n        }\n        List<UserDepartment> userDepartments = new ArrayList<>();\n        for (int i = 0; i < depIds.length; i++) {\n            Integer depId = depIds[i];\n            userDepartments.add(\n                    new UserDepartment() {\n                        {\n                            setUserId(userId);\n                            setDepId(depId);\n                        }\n                    });\n        }\n        saveBatch(userDepartments);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-common", "src", "main", "java", "xyz", "playedu", "common", "service", "impl", "UserDepartmentServiceImpl.java"], "context_start_lineno": 0, "function_name": "storeDepIds", "left_context": "class UserDepartmentServiceImpl extends ServiceImpl<UserDepartmentMapper, UserDepartment>\n        implements UserDepartmentService {\n\n    @Override\n    public List<Integer> getUserIdsByDepIds(List<Integer> depIds) {\n        return list(query().getWrapper().in(\"dep_id\", depIds)).stream()\n                .map(UserDepartment::getUserId)\n                .toList();\n    }\n\n    @Override\n    public void storeDepIds(Integer userId, Integer[] depIds) {", "right_context": "}\n\n    @Override\n    public void resetStoreDepIds(Integer userId, Integer[] depIds) {\n        remove(query().getWrapper().eq(\"user_id\", userId));\n        storeDepIds(userId, depIds);\n    }\n}", "class_name": "UserDepartmentServiceImpl", "return_type": "void", "parameters": [{"type": "Integer", "name": "userId"}, {"type": "Integer[]", "name": "depIds"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UserCourseHourFinishedListener {\n\n    @Autowired private UserCourseRecordService userCourseRecordService;\n\n    @Autowired private UserCourseHourRecordService userCourseHourRecordService;\n\n    @Autowired private CourseHourService hourService;\n\n    @EventListener\n    public void userCourseProgressUpdate(UserCourseHourFinishedEvent evt) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/450", "ground_truth": "\n        Integer hourCount = hourService.getCountByCourseId(evt.getCourseId());\n        Integer finishedCount =\n                userCourseHourRecordService.getFinishedHourCount(\n                        evt.getUserId(), evt.getCourseId());\n        userCourseRecordService.storeOrUpdate(\n                evt.getUserId(), evt.getCourseId(), hourCount, finishedCount);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "listener", "UserCourseHourFinishedListener.java"], "context_start_lineno": 0, "function_name": "userCourseProgressUpdate", "left_context": "class UserCourseHourFinishedListener {\n\n    @Autowired private UserCourseRecordService userCourseRecordService;\n\n    @Autowired private UserCourseHourRecordService userCourseHourRecordService;\n\n    @Autowired private CourseHourService hourService;\n\n    @EventListener\n    public void userCourseProgressUpdate(UserCourseHourFinishedEvent evt) {", "right_context": "}\n}", "class_name": "UserCourseHourFinishedListener", "return_type": "void", "parameters": [{"type": "UserCourseHourFinishedEvent", "name": "evt"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @PostMapping(\"/{id}/record\") @SneakyThrows public JsonResponse record(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id,@RequestBody @Validated CourseHourRecordRequest req){\n//   Integer duration=req.getDuration();\n//   if (duration <= 0) {\n//     return JsonResponse.error(\"duration\u53c2\u6570\u9519\u8bef\");\n//   }\n//   Course course=courseCache.findOrFail(courseId);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   String lockKey=String.format(\"record:%d\",FCtx.getId());\n//   boolean tryLock=redisDistributedLock.tryLock(lockKey,5,TimeUnit.SECONDS);\n//   if (!tryLock) {\n//     return JsonResponse.success();\n//   }\n//   try {\n//     boolean isFinished=userCourseHourRecordService.storeOrUpdate(FCtx.getId(),course.getId(),hour.getId(),duration,hour.getDuration());\n//     if (isFinished) {\n//       ctx.publishEvent(new UserCourseHourFinishedEvent(this,FCtx.getId(),courseId,hour.getId()));\n//     }\n//   }\n//   finally {\n//     redisDistributedLock.releaseLock(lockKey);\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @PostMapping(\"/{id}/ping\") @SneakyThrows public JsonResponse ping(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseCache.findOrFail(courseId);\n//   CourseHour hour=hourService.findOrFail(id,courseId);\n//   userCanSeeCourseCache.check(FCtx.getUser(),course,true);\n//   String lockKey=String.format(\"ping:%d\",FCtx.getId());\n//   boolean tryLock=redisDistributedLock.tryLock(lockKey,5,TimeUnit.SECONDS);\n//   if (!tryLock) {\n//     return JsonResponse.success();\n//   }\n//   try {\n//     Long curTime=System.currentTimeMillis();\n//     Long lastTime=userLastLearnTimeCache.get(FCtx.getId());\n//     if (lastTime == null || curTime - lastTime > 10500) {\n//       lastTime=curTime - 10000;\n//     }\n//     userLastLearnTimeCache.put(FCtx.getId(),curTime);\n//     ctx.publishEvent(new UserLearnCourseUpdateEvent(this,FCtx.getId(),course.getId(),hour.getId(),lastTime,curTime));\n//   }\n//   finally {\n//     redisDistributedLock.releaseLock(lockKey);\n//   }\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/password\") @SneakyThrows public JsonResponse password(@RequestBody @Validated LoginPasswordRequest req) throws LimitException {\n//   if (appConfigService.enabledLdapLogin()) {\n//     return JsonResponse.error(\"\u8bf7\u4f7f\u7528LDAP\u767b\u5f55\");\n//   }\n//   String email=req.getEmail();\n//   User user=userService.find(email);\n//   if (user == null) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   loginLimitCache.check(email);\n//   if (!HelperUtil.MD5(req.getPassword() + user.getSalt()).equals(user.getPassword())) {\n//     return JsonResponse.error(\"\u90ae\u7bb1\u6216\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   if (user.getIsLock() == 1) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u5df2\u9501\u5b9a\u65e0\u6cd5\u767b\u5f55\");\n//   }\n//   loginLimitCache.destroy(email);\n//   return JsonResponse.data(loginBus.tokenByUser(user));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/ldap\") @SneakyThrows public JsonResponse ldap(@RequestBody @Validated LoginLdapRequest req){\n//   String username=req.getUsername();\n//   LdapConfig ldapConfig=appConfigService.ldapConfig();\n//   String mail=null;\n//   String uid=null;\n//   if (StringUtil.contains(username,\"@\")) {\n//     mail=username;\n//   }\n//  else {\n//     uid=username;\n//   }\n//   loginLimitCache.check(username);\n//   if (!loginLockCache.apply(username)) {\n//     return JsonResponse.error(\"\u8bf7\u7a0d\u5019\u518d\u8bd5\");\n//   }\n//   try {\n//     LdapTransformUser ldapTransformUser=LdapUtil.loginByMailOrUid(ldapConfig.getUrl(),ldapConfig.getAdminUser(),ldapConfig.getAdminPass(),ldapConfig.getBaseDN(),mail,uid,req.getPassword());\n//     if (ldapTransformUser == null) {\n//       return JsonResponse.error(\"\u767b\u5f55\u5931\u8d25.\u8bf7\u68c0\u67e5\u8d26\u53f7\u548c\u5bc6\u7801\");\n//     }\n//     HashMap<String,Object> data=loginBus.tokenByLdapTransformUser(ldapTransformUser);\n//     loginLimitCache.destroy(username);\n//     return JsonResponse.data(data);\n//   }\n//  catch (  ServiceException e) {\n//     return JsonResponse.error(e.getMessage());\n//   }\n// catch (  Exception e) {\n//     log.error(\"LDAP\u767b\u5f55\u5931\u8d25\",e);\n//     return JsonResponse.error(\"\u7cfb\u7edf\u9519\u8bef\");\n//   }\n//  finally {\n//     loginLockCache.release(username);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/LoginController.java\n// --------------------------------------------------\n// @PostMapping(\"/logout\") public JsonResponse logout(){\n//   authService.logout();\n//   ctx.publishEvent(new UserLogoutEvent(this,FCtx.getId(),FCtx.getJwtJti()));\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/SystemController.java\n// --------------------------------------------------\n// @GetMapping(\"/config\") public JsonResponse config(){\n//   Map<String,String> configs=appConfigService.keyValues();\n//   HashMap<String,String> data=new HashMap<>();\n//   data.put(\"system-name\",configs.get(ConfigConstant.SYSTEM_NAME));\n//   data.put(\"system-logo\",configs.get(ConfigConstant.SYSTEM_LOGO));\n//   data.put(\"system-api-url\",configs.get(ConfigConstant.SYSTEM_API_URL));\n//   data.put(\"system-pc-url\",configs.get(ConfigConstant.SYSTEM_PC_URL));\n//   data.put(\"system-h5-url\",configs.get(ConfigConstant.SYSTEM_H5_URL));\n//   data.put(\"system-pc-index-footer-msg\",configs.get(\"system.pc_index_footer_msg\"));\n//   data.put(\"player-poster\",configs.get(\"player.poster\"));\n//   data.put(\"player-is-enabled-bullet-secret\",configs.get(\"player.is_enabled_bullet_secret\"));\n//   data.put(\"player-bullet-secret-text\",configs.get(\"player.bullet_secret_text\"));\n//   data.put(\"player-bullet-secret-color\",configs.get(\"player.bullet_secret_color\"));\n//   data.put(\"player-bullet-secret-opacity\",configs.get(\"player.bullet_secret_opacity\"));\n//   data.put(\"player-disabled-drag\",configs.get(\"player.disabled_drag\"));\n//   data.put(\"ldap-enabled\",configs.get(ConfigConstant.LDAP_ENABLED));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/avatar\") public JsonResponse changeAvatar(MultipartFile file){\n//   UserUploadImageLog log=uploadService.userAvatar(FCtx.getId(),file,FrontendConstant.USER_UPLOAD_IMAGE_TYPE_AVATAR,FrontendConstant.USER_UPLOAD_IMAGE_SCENE_AVATAR);\n//   userService.changeAvatar(FCtx.getId(),log.getUrl());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/password\") public JsonResponse changePassword(@RequestBody @Validated ChangePasswordRequest req) throws ServiceException {\n//   userService.passwordChange(FCtx.getUser(),req.getOldPassword(),req.getNewPassword());\n//   return JsonResponse.success();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/courses\") public JsonResponse courses(@RequestParam HashMap<String,Object> params){\n//   Integer depId=MapUtils.getInteger(params,\"dep_id\");\n//   if (depId == null || depId == 0) {\n//     return JsonResponse.error(\"\u8bf7\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   Integer categoryId=MapUtils.getInteger(params,\"category_id\");\n//   List<Integer> userJoinDepIds=userService.getDepIdsByUserId(FCtx.getId());\n//   if (userJoinDepIds == null) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u4efb\u4f55\u90e8\u95e8\");\n//   }\n//   if (!userJoinDepIds.contains(depId)) {\n//     return JsonResponse.error(\"\u5f53\u524d\u5b66\u5458\u672a\u52a0\u5165\u6240\u9009\u62e9\u90e8\u95e8\");\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"learn_course_records\",new HashMap<>());\n//   List<Course> courses=new ArrayList<>();\n//   List<Course> depCourses=courseService.getDepCoursesAndShow(new ArrayList<>(){\n// {\n//       add(depId);\n//     }\n//   }\n// ,categoryId);\n//   List<Course> openCourses=courseService.getOpenCoursesAndShow(500,categoryId);\n//   if (depCourses != null && !depCourses.isEmpty()) {\n//     courses.addAll(depCourses);\n//   }\n//   if (openCourses != null && !openCourses.isEmpty()) {\n//     courses.addAll(openCourses);\n//   }\n//   if (!courses.isEmpty()) {\n//     courses=courses.stream().sorted(Comparator.comparing(Course::getPublishedAt,Comparator.nullsFirst(Date::compareTo)).reversed()).toList();\n//   }\n//   data.put(\"courses\",courses);\n//   List<Integer> courseIds=courses.stream().map(Course::getId).toList();\n//   Map<Integer,UserCourseRecord> learnCourseRecords=new HashMap<>();\n//   if (!courses.isEmpty()) {\n//     learnCourseRecords=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   }\n//   data.put(\"learn_course_records\",learnCourseRecords);\n//   int requiredCourseCount=0;\n//   int nunRequiredCourseCount=0;\n//   int requiredFinishedCourseCount=0;\n//   int nunRequiredFinishedCourseCount=0;\n//   int requiredHourCount=0;\n//   int nunRequiredHourCount=0;\n//   int requiredFinishedHourCount=0;\n//   int nunRequiredFinishedHourCount=0;\n//   Long todayLearnDuration=userLearnDurationStatsService.todayUserDuration(FCtx.getId());\n//   Long learnDuration=userLearnDurationStatsService.userDuration(FCtx.getId());\n//   if (!courses.isEmpty()) {\n//     for (    Course courseItem : courses) {\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredHourCount+=courseItem.getClassHour();\n//         requiredCourseCount+=1;\n//       }\n//  else {\n//         nunRequiredHourCount+=courseItem.getClassHour();\n//         nunRequiredCourseCount+=1;\n//       }\n//       UserCourseRecord learnRecord=learnCourseRecords.get(courseItem.getId());\n//       if (learnRecord == null) {\n//         continue;\n//       }\n//       if (courseItem.getIsRequired() == 1) {\n//         requiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           requiredFinishedCourseCount++;\n//         }\n//       }\n//  else {\n//         nunRequiredFinishedHourCount+=learnRecord.getFinishedCount();\n//         if (learnRecord.getIsFinished() == 1) {\n//           nunRequiredFinishedCourseCount++;\n//         }\n//       }\n//     }\n//   }\n//   HashMap<String,Object> stats=new HashMap<>();\n//   stats.put(\"required_course_count\",requiredCourseCount);\n//   stats.put(\"nun_required_course_count\",nunRequiredCourseCount);\n//   stats.put(\"required_finished_course_count\",requiredFinishedCourseCount);\n//   stats.put(\"nun_required_finished_course_count\",nunRequiredFinishedCourseCount);\n//   stats.put(\"required_hour_count\",requiredHourCount);\n//   stats.put(\"nun_required_hour_count\",nunRequiredHourCount);\n//   stats.put(\"required_finished_hour_count\",requiredFinishedHourCount);\n//   stats.put(\"nun_required_finished_hour_count\",nunRequiredFinishedHourCount);\n//   stats.put(\"today_learn_duration\",todayLearnDuration);\n//   stats.put(\"learn_duration\",learnDuration);\n//   data.put(\"stats\",stats);\n//   data.put(\"user_course_hour_count\",userCourseHourRecordService.getUserCourseHourCount(FCtx.getId(),courseIds,null).stream().collect(Collectors.toMap(UserCourseHourRecordCourseCountMapper::getCourseId,UserCourseHourRecordCourseCountMapper::getTotal)));\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/latest-learn\") public JsonResponse latestLearn(){\n//   List<UserCourseHourRecord> userCourseHourRecords=userCourseHourRecordService.getLatestCourseIds(FCtx.getId(),100);\n//   if (userCourseHourRecords == null || userCourseHourRecords.isEmpty()) {\n//     return JsonResponse.data(new ArrayList<>());\n//   }\n//   List<Integer> courseIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getCourseId).toList();\n//   List<Integer> hourIds=userCourseHourRecords.stream().map(UserCourseHourRecord::getHourId).toList();\n//   Map<Integer,UserCourseHourRecord> hour2Record=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getHourId,e -> e));\n//   Map<Integer,Integer> course2hour=userCourseHourRecords.stream().collect(Collectors.toMap(UserCourseHourRecord::getCourseId,UserCourseHourRecord::getHourId));\n//   Map<Integer,Course> courses=courseService.chunks(courseIds,new ArrayList<>(){\n// {\n//       add(\"id\");\n//       add(\"title\");\n//       add(\"thumb\");\n//       add(\"short_desc\");\n//       add(\"class_hour\");\n//       add(\"is_required\");\n//     }\n//   }\n// ).stream().collect(Collectors.toMap(Course::getId,e -> e));\n//   Map<Integer,CourseHour> hours=hourService.chunk(hourIds).stream().collect(Collectors.toMap(CourseHour::getId,e -> e));\n//   Map<Integer,UserCourseRecord> records=userCourseRecordService.chunk(FCtx.getId(),courseIds).stream().collect(Collectors.toMap(UserCourseRecord::getCourseId,e -> e));\n//   List<UserLatestLearn> userLatestLearns=new ArrayList<>();\n//   for (  Integer courseId : courseIds) {\n//     UserCourseRecord record=records.get(courseId);\n//     Course tmpCourse=courses.get(courseId);\n//     Integer tmpHourId=course2hour.get(courseId);\n//     UserCourseHourRecord tmpUserCourseHourRecord=hour2Record.get(tmpHourId);\n//     CourseHour tmpHour=hours.get(tmpHourId);\n//     userLatestLearns.add(new UserLatestLearn(){\n// {\n//         setCourse(tmpCourse);\n//         setUserCourseRecord(record);\n//         setHourRecord(tmpUserCourseHourRecord);\n//         setLastLearnHour(tmpHour);\n//       }\n//     }\n// );\n//   }\n//   return JsonResponse.data(userLatestLearns);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(String msg){\n//   return new JsonResponse(0,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse success(){\n//   return new JsonResponse(0,\"\",null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse data(Object data){\n//   return new JsonResponse(0,\"\",data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Integer code){\n//   return new JsonResponse(code,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg){\n//   return new JsonResponse(-1,msg,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-common/src/main/java/xyz/playedu/common/types/JsonResponse.java\n// --------------------------------------------------\n// public static JsonResponse error(String msg,Object data){\n//   return new JsonResponse(-1,msg,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/AdminLogController.java\n// --------------------------------------------------\n// @BackendPermission(slug=BPermissionConstant.ADMIN_LOG) @GetMapping(\"/detail/{id}\") public JsonResponse detail(@PathVariable(name=\"id\") Integer id){\n//   Integer adminId=0;\n//   if (!backendBus.isSuperAdmin()) {\n//     adminId=BCtx.getId();\n//   }\n//   AdminLog log=adminLogService.find(id,adminId);\n//   if (log == null) {\n//     throw new ServiceException(\"\u65e5\u5fd7\u4e0d\u5b58\u5728\");\n//   }\n//   return JsonResponse.data(log);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/backend/LoginController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") @Log(title=\"\u7ba1\u7406\u5458-\u8be6\u60c5\",businessType=BusinessTypeConstant.GET) public JsonResponse detail(){\n//   AdminUser user=BCtx.getAdminUser();\n//   HashMap<String,Boolean> permissions=backendBus.adminUserPermissions(user.getId());\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"permissions\",permissions);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/HourController.java\n// --------------------------------------------------\n// @GetMapping(\"/{id}\") @SneakyThrows public JsonResponse detail(@PathVariable(name=\"courseId\") Integer courseId,@PathVariable(name=\"id\") Integer id){\n//   Course course=courseService.findOrFail(courseId);\n//   CourseHour courseHour=hourService.findOrFail(id,courseId);\n//   UserCourseHourRecord userCourseHourRecord=null;\n//   if (FCtx.getId() != null && FCtx.getId() > 0) {\n//     userCourseHourRecord=userCourseHourRecordService.find(FCtx.getId(),courseId,id);\n//   }\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"course\",course);\n//   data.put(\"hour\",courseHour);\n//   data.put(\"user_hour_record\",userCourseHourRecord);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// PlayEdu/playedu-api/src/main/java/xyz/playedu/api/controller/frontend/UserController.java\n// --------------------------------------------------\n// @GetMapping(\"/detail\") public JsonResponse detail(){\n//   User user=FCtx.getUser();\n//   List<Department> departments=new ArrayList<>();\n//   List<Integer> depIds=userService.getDepIdsByUserId(user.getId());\n//   if (depIds != null && !depIds.isEmpty()) {\n//     departments=departmentService.listByIds(depIds);\n//   }\n//   user.setIdCard(PrivacyUtil.hideIDCard(user.getIdCard()));\n//   HashMap<String,Object> data=new HashMap<>();\n//   data.put(\"user\",user);\n//   data.put(\"departments\",departments);\n//   return JsonResponse.data(data);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CourseController {\n\n    @Autowired private CourseService courseService;\n\n    @Autowired private CourseChapterService chapterService;\n\n    @Autowired private CourseHourService hourService;\n\n    @Autowired private CourseAttachmentService attachmentService;\n\n    @Autowired private ResourceService resourceService;\n\n    @Autowired private UserCourseRecordService userCourseRecordService;\n\n    @Autowired private UserCourseHourRecordService userCourseHourRecordService;\n\n    @Autowired private CourseAttachmentDownloadLogService courseAttachmentDownloadLogService;\n\n    @GetMapping(\"/{id}\")\n    @SneakyThrows\n    public JsonResponse detail(@PathVariable(name = \"id\") Integer id) {<FILL_FUNCTION_BODY>}\n\n    @GetMapping(\"/{courseId}/attach/{id}/download\")\n    @SneakyThrows\n    public JsonResponse attachmentDownload(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {\n        CourseAttachment attachment = attachmentService.findOrFail(id, courseId);\n        Resource resource = resourceService.findOrFail(attachment.getRid());\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"download_url\", resource.getUrl());\n\n        courseAttachmentDownloadLogService.save(\n                new CourseAttachmentDownloadLog() {\n                    {\n                        setUserId(FCtx.getId());\n                        setCourseId(attachment.getCourseId());\n                        setCourserAttachmentId(attachment.getId());\n                        setRid(resource.getId());\n                        setTitle(attachment.getTitle());\n                        setIp(IpUtil.getIpAddress());\n                        setCreatedAt(new Date());\n                    }\n                });\n\n        return JsonResponse.data(data);\n    }\n}", "metadata": {"task_id": "PlayEdu_PlayEdu/465", "ground_truth": "\n        Course course = courseService.findOrFail(id);\n\n        List<CourseHour> courseHours = hourService.getHoursByCourseId(course.getId());\n\n        List<CourseAttachment> attachments =\n                attachmentService.getAttachmentsByCourseId(course.getId());\n        if (null != attachments && !attachments.isEmpty()) {\n            Map<Integer, Resource> resourceMap =\n                    resourceService\n                            .chunks(attachments.stream().map(CourseAttachment::getRid).toList())\n                            .stream()\n                            .collect(Collectors.toMap(Resource::getId, Function.identity()));\n            attachments.forEach(\n                    courseAttachment -> {\n                        Resource resource = resourceMap.get(courseAttachment.getRid());\n                        if (null != resource) {\n                            courseAttachment.setExt(resource.getExtension());\n                        }\n                    });\n        }\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"course\", course);\n        data.put(\"chapters\", chapterService.getChaptersByCourseId(course.getId()));\n        data.put(\n                \"hours\",\n                courseHours.stream().collect(Collectors.groupingBy(CourseHour::getChapterId)));\n        data.put(\"learn_record\", userCourseRecordService.find(FCtx.getId(), course.getId()));\n        data.put(\n                \"learn_hour_records\",\n                userCourseHourRecordService.getRecords(FCtx.getId(), course.getId()).stream()\n                        .collect(Collectors.toMap(UserCourseHourRecord::getHourId, e -> e)));\n        data.put(\"attachments\", attachments);\n        return JsonResponse.data(data);\n    ", "fpath_tuple": ["PlayEdu_PlayEdu", "PlayEdu", "playedu-api", "src", "main", "java", "xyz", "playedu", "api", "controller", "frontend", "CourseController.java"], "context_start_lineno": 0, "function_name": "detail", "left_context": "class CourseController {\n\n    @Autowired private CourseService courseService;\n\n    @Autowired private CourseChapterService chapterService;\n\n    @Autowired private CourseHourService hourService;\n\n    @Autowired private CourseAttachmentService attachmentService;\n\n    @Autowired private ResourceService resourceService;\n\n    @Autowired private UserCourseRecordService userCourseRecordService;\n\n    @Autowired private UserCourseHourRecordService userCourseHourRecordService;\n\n    @Autowired private CourseAttachmentDownloadLogService courseAttachmentDownloadLogService;\n\n    @GetMapping(\"/{id}\")\n    @SneakyThrows\n    public JsonResponse detail(@PathVariable(name = \"id\") Integer id) {", "right_context": "}\n\n    @GetMapping(\"/{courseId}/attach/{id}/download\")\n    @SneakyThrows\n    public JsonResponse attachmentDownload(\n            @PathVariable(name = \"courseId\") Integer courseId,\n            @PathVariable(name = \"id\") Integer id) {\n        CourseAttachment attachment = attachmentService.findOrFail(id, courseId);\n        Resource resource = resourceService.findOrFail(attachment.getRid());\n\n        HashMap<String, Object> data = new HashMap<>();\n        data.put(\"download_url\", resource.getUrl());\n\n        courseAttachmentDownloadLogService.save(\n                new CourseAttachmentDownloadLog() {\n                    {\n                        setUserId(FCtx.getId());\n                        setCourseId(attachment.getCourseId());\n                        setCourserAttachmentId(attachment.getId());\n                        setRid(resource.getId());\n                        setTitle(attachment.getTitle());\n                        setIp(IpUtil.getIpAddress());\n                        setCreatedAt(new Date());\n                    }\n                });\n\n        return JsonResponse.data(data);\n    }\n}", "class_name": "CourseController", "return_type": "JsonResponse", "parameters": [{"type": "Integer", "name": "id"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DoubleCheckedLockingRule extends AbstractJavaRule {\n\n    @Override\n    protected @NonNull RuleTargetSelector buildTargetSelector() {\n        return RuleTargetSelector.forTypes(ASTMethodDeclaration.class);\n    }\n\n    @Override\n    public Object visit(ASTMethodDeclaration node, Object data) {<FILL_FUNCTION_BODY>}\n\n    private boolean isLocalOnlyStoredWithVolatileField(ASTMethodDeclaration method, JVariableSymbol local) {\n        ASTExpression initializer;\n        if (local instanceof JLocalVariableSymbol) {\n            ASTVariableId id = local.tryGetNode();\n            if (id == null) {\n                return false;\n            }\n            initializer = id.getInitializer();\n        } else {\n            // the return variable name doesn't seem to be a local variable\n            return false;\n        }\n\n        return (initializer == null || isVolatileFieldReference(initializer))\n            && method.descendants(ASTAssignmentExpression.class)\n                     .filter(it -> JavaAstUtils.isReferenceToVar(it.getLeftOperand(), local))\n                     .all(it -> isVolatileFieldReference(it.getRightOperand()));\n    }\n\n    private boolean isVolatileFieldReference(@Nullable ASTExpression initializer) {\n        if (initializer instanceof ASTNamedReferenceExpr) {\n            JVariableSymbol fieldSym = ((ASTNamedReferenceExpr) initializer).getReferencedSym();\n            return fieldSym instanceof JFieldSymbol && Modifier.isVolatile(((JFieldSymbol) fieldSym).getModifiers());\n        } else {\n            return false;\n        }\n    }\n\n}", "metadata": {"task_id": "pmd_pmd/6", "ground_truth": "\n        if (node.isVoid() || node.getResultTypeNode() instanceof ASTPrimitiveType || node.getBody() == null) {\n            return data;\n        }\n\n        List<ASTReturnStatement> rsl = node.descendants(ASTReturnStatement.class).toList();\n        if (rsl.size() != 1) {\n            return data;\n        }\n        ASTReturnStatement rs = rsl.get(0);\n\n        ASTExpression returnExpr = rs.getExpr();\n        if (!(returnExpr instanceof ASTNamedReferenceExpr)) {\n            return data;\n        }\n\n        JVariableSymbol returnVariable = ((ASTNamedReferenceExpr) returnExpr).getReferencedSym();\n        // With Java5 and volatile keyword, DCL is no longer an issue\n        if (returnVariable instanceof JFieldSymbol\n            && Modifier.isVolatile(((JFieldSymbol) returnVariable).getModifiers())) {\n            return data;\n        }\n\n        // if the return variable is local and only written with the volatile\n        // field, then it's ok, too\n        if (isLocalOnlyStoredWithVolatileField(node, returnVariable)) {\n            return data;\n        }\n\n        List<ASTIfStatement> isl = node.descendants(ASTIfStatement.class).toList();\n        if (isl.size() == 2) {\n            ASTIfStatement outerIf = isl.get(0);\n            if (JavaRuleUtil.isNullCheck(outerIf.getCondition(), returnVariable)) {\n                // find synchronized\n                List<ASTSynchronizedStatement> ssl = outerIf.descendants(ASTSynchronizedStatement.class).toList();\n                if (ssl.size() == 1 && ssl.get(0).ancestors().any(it -> it == outerIf)) {\n                    ASTIfStatement is2 = isl.get(1);\n                    if (JavaRuleUtil.isNullCheck(is2.getCondition(), returnVariable)) {\n                        List<ASTAssignmentExpression> assignments = is2.descendants(ASTAssignmentExpression.class).toList();\n                        if (assignments.size() == 1\n                            && JavaAstUtils.isReferenceToVar(assignments.get(0).getLeftOperand(), returnVariable)) {\n                            asCtx(data).addViolation(node);\n\n                        }\n                    }\n                }\n            }\n        }\n        return data;\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-java", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "java", "rule", "multithreading", "DoubleCheckedLockingRule.java"], "context_start_lineno": 0, "function_name": "visit", "left_context": "class DoubleCheckedLockingRule extends AbstractJavaRule {\n\n    @Override\n    protected @NonNull RuleTargetSelector buildTargetSelector() {\n        return RuleTargetSelector.forTypes(ASTMethodDeclaration.class);\n    }\n\n    @Override\n    public Object visit(ASTMethodDeclaration node, Object data) {", "right_context": "}\n\n    private boolean isLocalOnlyStoredWithVolatileField(ASTMethodDeclaration method, JVariableSymbol local) {\n        ASTExpression initializer;\n        if (local instanceof JLocalVariableSymbol) {\n            ASTVariableId id = local.tryGetNode();\n            if (id == null) {\n                return false;\n            }\n            initializer = id.getInitializer();\n        } else {\n            // the return variable name doesn't seem to be a local variable\n            return false;\n        }\n\n        return (initializer == null || isVolatileFieldReference(initializer))\n            && method.descendants(ASTAssignmentExpression.class)\n                     .filter(it -> JavaAstUtils.isReferenceToVar(it.getLeftOperand(), local))\n                     .all(it -> isVolatileFieldReference(it.getRightOperand()));\n    }\n\n    private boolean isVolatileFieldReference(@Nullable ASTExpression initializer) {\n        if (initializer instanceof ASTNamedReferenceExpr) {\n            JVariableSymbol fieldSym = ((ASTNamedReferenceExpr) initializer).getReferencedSym();\n            return fieldSym instanceof JFieldSymbol && Modifier.isVolatile(((JFieldSymbol) fieldSym).getModifiers());\n        } else {\n            return false;\n        }\n    }\n\n}", "class_name": "DoubleCheckedLockingRule", "return_type": "Object", "parameters": [{"type": "ASTMethodDeclaration", "name": "node"}, {"type": "Object", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTAnonymousClassDeclaration.java\n// --------------------------------------------------\n// @Override public @NonNull NodeStream<ASTClassType> getSuperInterfaceTypeNodes(){\n//   if (getParent() instanceof ASTConstructorCall) {\n//     ASTConstructorCall ctor=(ASTConstructorCall)getParent();\n//     @NonNull JTypeMirror type=ctor.getTypeMirror();\n//     if (type.isInterface()) {\n//       return NodeStream.of(ctor.getTypeNode());\n//     }\n//   }\n//   return NodeStream.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTTypeDeclaration.java\n// --------------------------------------------------\n// /** \n//  * Returns the list of interfaces implemented by this class, or extended by this interface. Returns null if no such list is declared.\n//  */\n// default @NonNull NodeStream<ASTClassType> getSuperInterfaceTypeNodes(){\n//   return ASTList.orEmptyStream(isInterface() ? firstChild(ASTExtendsList.class) : firstChild(ASTImplementsList.class));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTModuleProvidesDirective.java\n// --------------------------------------------------\n// /** \n//  * Returns the nodes representing the service providers, that is, the service implementations.\n//  */\n// public NodeStream<ASTClassType> getServiceProviders(){\n//   return children(ASTClassType.class).drop(1);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTIntersectionType.java\n// --------------------------------------------------\n// /** \n//  * Returns a stream of component types. \n//  */\n// public NodeStream<ASTClassType> getComponents(){\n//   return children(ASTClassType.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTUnionType.java\n// --------------------------------------------------\n// /** \n//  * Returns a stream of component types. \n//  */\n// public NodeStream<ASTClassType> getComponents(){\n//   return children(ASTClassType.class);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ASTCatchParameter extends AbstractJavaNode\n    implements InternalInterfaces.VariableIdOwner,\n        ModifierOwner {\n\n    ASTCatchParameter(int id) {\n        super(id);\n    }\n\n\n    @Override\n    protected <P, R> R acceptVisitor(JavaVisitor<? super P, ? extends R> visitor, P data) {\n        return visitor.visit(this, data);\n    }\n\n    /**\n     * Returns true if this is a multi-catch parameter,\n     * that is, it catches several unrelated exception types\n     * at the same time. For example:\n     *\n     * <pre>catch (IllegalStateException | IllegalArgumentException e) {}</pre>\n     */\n    public boolean isMulticatch() {\n        return getTypeNode() instanceof ASTUnionType;\n    }\n\n    @Override\n    @NonNull\n    public ASTVariableId getVarId() {\n        return (ASTVariableId) getLastChild();\n    }\n\n    /** Returns the name of this parameter. */\n    public String getName() {\n        return getVarId().getName();\n    }\n\n\n    /**\n     * Returns the type node of this catch parameter. May be a\n     * {@link ASTUnionType UnionType}.\n     */\n    public ASTType getTypeNode() {\n        return (ASTType) getChild(1);\n    }\n\n\n    /**\n     * Returns a stream of all declared exception types (expanding a union\n     * type if present).\n     *\n     * <p>Note that this is the only reliable way to inspect multi-catch clauses,\n     * as the type mirror of a {@link ASTUnionType} is not itself a {@link JIntersectionType},\n     * but the {@link TypeSystem#lub(Collection) LUB} of the components.\n     * Since exception types cannot be interfaces, the LUB always erases\n     * to a single class supertype (eg {@link RuntimeException}).\n     */\n    public NodeStream<ASTClassType> getAllExceptionTypes() {<FILL_FUNCTION_BODY>}\n\n    public boolean isFinal() {\n        return hasModifiers(JModifier.FINAL);\n    }\n}", "metadata": {"task_id": "pmd_pmd/77", "ground_truth": "\n        ASTType typeNode = getTypeNode();\n        if (typeNode instanceof ASTUnionType) {\n            return typeNode.children(ASTClassType.class);\n        } else {\n            return NodeStream.of((ASTClassType) typeNode);\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-java", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "java", "ast", "ASTCatchParameter.java"], "context_start_lineno": 0, "function_name": "getAllExceptionTypes", "left_context": "class ASTCatchParameter extends AbstractJavaNode\n    implements InternalInterfaces.VariableIdOwner,\n        ModifierOwner {\n\n    ASTCatchParameter(int id) {\n        super(id);\n    }\n\n\n    @Override\n    protected <P, R> R acceptVisitor(JavaVisitor<? super P, ? extends R> visitor, P data) {\n        return visitor.visit(this, data);\n    }\n\n    /**\n     * Returns true if this is a multi-catch parameter,\n     * that is, it catches several unrelated exception types\n     * at the same time. For example:\n     *\n     * <pre>catch (IllegalStateException | IllegalArgumentException e) {}</pre>\n     */\n    public boolean isMulticatch() {\n        return getTypeNode() instanceof ASTUnionType;\n    }\n\n    @Override\n    @NonNull\n    public ASTVariableId getVarId() {\n        return (ASTVariableId) getLastChild();\n    }\n\n    /** Returns the name of this parameter. */\n    public String getName() {\n        return getVarId().getName();\n    }\n\n\n    /**\n     * Returns the type node of this catch parameter. May be a\n     * {@link ASTUnionType UnionType}.\n     */\n    public ASTType getTypeNode() {\n        return (ASTType) getChild(1);\n    }\n\n\n    /**\n     * Returns a stream of all declared exception types (expanding a union\n     * type if present).\n     *\n     * <p>Note that this is the only reliable way to inspect multi-catch clauses,\n     * as the type mirror of a {@link ASTUnionType} is not itself a {@link JIntersectionType},\n     * but the {@link TypeSystem#lub(Collection) LUB} of the components.\n     * Since exception types cannot be interfaces, the LUB always erases\n     * to a single class supertype (eg {@link RuntimeException}).\n     */\n    public NodeStream<ASTClassType> getAllExceptionTypes() {", "right_context": "}\n\n    public boolean isFinal() {\n        return hasModifiers(JModifier.FINAL);\n    }\n}", "class_name": "ASTCatchParameter", "return_type": "NodeStream<ASTClassType>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BaseInvocMirror<T extends InvocationNode> extends BasePolyMirror<T> implements InvocationMirror {\n\n    private MethodCtDecl ctDecl;\n    private List<ExprMirror> args;\n\n    BaseInvocMirror(JavaExprMirrors mirrors, T call, @Nullable ExprMirror parent, MirrorMaker subexprMaker) {\n        super(mirrors, call, parent, subexprMaker);\n    }\n\n    @Override\n    public boolean isEquivalentToUnderlyingAst() {<FILL_FUNCTION_BODY>}\n\n    protected MethodCtDecl getStandaloneCtdecl() {\n        MethodCallSite site = factory.infer.newCallSite(this, null);\n        // this is cached for later anyway\n        return factory.infer.getCompileTimeDecl(site);\n    }\n\n    @Override\n    public List<JTypeMirror> getExplicitTypeArguments() {\n        return ASTList.orEmptyStream(myNode.getExplicitTypeArguments())\n                      .toStream()\n                      .map(TypeNode::getTypeMirror)\n                      .collect(Collectors.toList());\n    }\n\n    @Override\n    public JavaNode getExplicitTargLoc(int i) {\n        return ASTList.orEmptyStream(myNode.getExplicitTypeArguments()).get(i);\n    }\n\n    @Override\n    public List<ExprMirror> getArgumentExpressions() {\n        if (this.args == null) {\n            ASTArgumentList args = myNode.getArguments();\n            this.args = CollectionUtil.map(ASTList.orEmpty(args), this::createSubexpression);\n        }\n        return args;\n    }\n\n    @Override\n    public int getArgumentCount() {\n        return ASTList.sizeOrZero(myNode.getArguments());\n    }\n\n    @Override\n    public void setCtDecl(MethodCtDecl methodType) {\n        ctDecl = methodType;\n        if (mayMutateAst()) {\n            InternalApiBridge.setOverload(myNode, methodType);\n        }\n    }\n\n\n    @Override\n    public @Nullable MethodCtDecl getCtDecl() {\n        return ctDecl;\n    }\n\n    @Override\n    public @Nullable JTypeMirror getReceiverType() {\n        return null;\n    }\n}", "metadata": {"task_id": "pmd_pmd/112", "ground_truth": "\n        MethodCtDecl ctDecl = getCtDecl();\n        AssertionUtil.validateState(ctDecl != null, \"overload resolution is not complete\");\n        if (ctDecl.isFailed()) {\n            return false; // be conservative\n        }\n        if (!myNode.getMethodType().getSymbol().equals(ctDecl.getMethodType().getSymbol())) {\n            return false;\n        } else if (myNode instanceof ASTConstructorCall && ((ASTConstructorCall) myNode).isAnonymousClass()\n            && !((ASTConstructorCall) myNode).getTypeNode().getTypeMirror().equals(getInferredType())) {\n            // check anon class has same type args\n            return false;\n        } else if (myNode.getParent() instanceof ASTVariableDeclarator) {\n            ASTVariableId varId = ((ASTVariableDeclarator) myNode.getParent()).getVarId();\n            if (varId.isTypeInferred() && !getInferredType().equals(varId.getTypeMirror())) {\n                return false;\n            }\n        }\n\n        return CollectionUtil.all(this.getArgumentExpressions(), ExprMirror::isEquivalentToUnderlyingAst);\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-java", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "java", "types", "internal", "infer", "ast", "BaseInvocMirror.java"], "context_start_lineno": 0, "function_name": "isEquivalentToUnderlyingAst", "left_context": "class BaseInvocMirror<T extends InvocationNode> extends BasePolyMirror<T> implements InvocationMirror {\n\n    private MethodCtDecl ctDecl;\n    private List<ExprMirror> args;\n\n    BaseInvocMirror(JavaExprMirrors mirrors, T call, @Nullable ExprMirror parent, MirrorMaker subexprMaker) {\n        super(mirrors, call, parent, subexprMaker);\n    }\n\n    @Override\n    public boolean isEquivalentToUnderlyingAst() {", "right_context": "}\n\n    protected MethodCtDecl getStandaloneCtdecl() {\n        MethodCallSite site = factory.infer.newCallSite(this, null);\n        // this is cached for later anyway\n        return factory.infer.getCompileTimeDecl(site);\n    }\n\n    @Override\n    public List<JTypeMirror> getExplicitTypeArguments() {\n        return ASTList.orEmptyStream(myNode.getExplicitTypeArguments())\n                      .toStream()\n                      .map(TypeNode::getTypeMirror)\n                      .collect(Collectors.toList());\n    }\n\n    @Override\n    public JavaNode getExplicitTargLoc(int i) {\n        return ASTList.orEmptyStream(myNode.getExplicitTypeArguments()).get(i);\n    }\n\n    @Override\n    public List<ExprMirror> getArgumentExpressions() {\n        if (this.args == null) {\n            ASTArgumentList args = myNode.getArguments();\n            this.args = CollectionUtil.map(ASTList.orEmpty(args), this::createSubexpression);\n        }\n        return args;\n    }\n\n    @Override\n    public int getArgumentCount() {\n        return ASTList.sizeOrZero(myNode.getArguments());\n    }\n\n    @Override\n    public void setCtDecl(MethodCtDecl methodType) {\n        ctDecl = methodType;\n        if (mayMutateAst()) {\n            InternalApiBridge.setOverload(myNode, methodType);\n        }\n    }\n\n\n    @Override\n    public @Nullable MethodCtDecl getCtDecl() {\n        return ctDecl;\n    }\n\n    @Override\n    public @Nullable JTypeMirror getReceiverType() {\n        return null;\n    }\n}", "class_name": "BaseInvocMirror", "return_type": "boolean", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SourceObject {\n\n    private static final Logger LOG = LoggerFactory.getLogger(SourceObject.class);\n\n    /**\n     * Database Schema/Owner - SYS,SYSTEM,SCOTT\n     *\n     */\n\n    String schema;\n\n    /**\n     * Source Code Name - DBMS_METADATA\n     *\n     */\n\n    String name;\n\n    /**\n     * Source Code Type -\n     * FUNCTION,PROCEDURE,TRIGGER,PACKAGE,PACKAGE_BODY,TYPE,TYPE_BODY,JAVA_SOURCE.\n     *\n     */\n\n    String type;\n\n    /**\n     * Source Code Revision - Optional revision/version\n     *\n     */\n\n    String revision;\n\n    SourceObject(String schema, String type, String name, String revision) {\n        this.schema = schema;\n        this.type = type;\n        this.name = name;\n        this.revision = revision;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"schema=\\\"%s\\\",type=\\\"%s\\\",name=\\\"%s\\\",revision=\\\"%s\\\"\", this.getSchema(), this.getType(),\n                this.getName(), this.getRevision());\n    }\n\n    /**\n     * @return the schema\n     */\n    public String getSchema() {\n        return schema;\n    }\n\n    /**\n     * @param schema\n     *            the schema to set\n     */\n    public void setSchema(String schema) {\n        this.schema = schema;\n    }\n\n    /**\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @param name\n     *            the name to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return the type\n     */\n    public String getType() {\n        return type;\n    }\n\n    /**\n     * @param type\n     *            the type to set\n     */\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    /**\n     * @return the revision\n     */\n    public String getRevision() {\n        return revision;\n    }\n\n    /**\n     * @param revision\n     *            the revision to set\n     */\n    public void setRevision(String revision) {\n        this.revision = revision;\n    }\n\n    /**\n     * Map the type to a file suffix associated with a {@link Language}\n     *\n     * @return inferred suffix\n     */\n    public String getSuffixFromType() {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Gets the data source as a pseudo file name (faux-file). Adding a suffix\n     * matching the source object type ensures that the appropriate language\n     * parser is used.\n     */\n    public String getPseudoFileName() {\n        return String.format(\"/Database/%s/%s/%s%s\", getSchema(), getType(), getName(),\n                getSuffixFromType());\n    }\n}", "metadata": {"task_id": "pmd_pmd/124", "ground_truth": "\n        LOG.trace(\"Entering getSuffixFromType\");\n        if (null == type || type.isEmpty()) {\n            return \"\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"JAVA\")) {\n            return \".java\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"TRIGGER\")) {\n            return \".trg\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"FUNCTION\")) {\n            return \".fnc\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"PROCEDURE\")) {\n            return \".prc\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"PACKAGE_BODY\")) {\n            return \".pkb\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"PACKAGE\")) {\n            return \".pks\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"TYPE_BODY\")) {\n            return \".tpb\";\n        } else if (type.toUpperCase(Locale.ROOT).contains(\"TYPE\")) {\n            return \".tps\";\n        } else {\n            return \"\";\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "util", "database", "SourceObject.java"], "context_start_lineno": 0, "function_name": "getSuffixFromType", "left_context": "class SourceObject {\n\n    private static final Logger LOG = LoggerFactory.getLogger(SourceObject.class);\n\n    /**\n     * Database Schema/Owner - SYS,SYSTEM,SCOTT\n     *\n     */\n\n    String schema;\n\n    /**\n     * Source Code Name - DBMS_METADATA\n     *\n     */\n\n    String name;\n\n    /**\n     * Source Code Type -\n     * FUNCTION,PROCEDURE,TRIGGER,PACKAGE,PACKAGE_BODY,TYPE,TYPE_BODY,JAVA_SOURCE.\n     *\n     */\n\n    String type;\n\n    /**\n     * Source Code Revision - Optional revision/version\n     *\n     */\n\n    String revision;\n\n    SourceObject(String schema, String type, String name, String revision) {\n        this.schema = schema;\n        this.type = type;\n        this.name = name;\n        this.revision = revision;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"schema=\\\"%s\\\",type=\\\"%s\\\",name=\\\"%s\\\",revision=\\\"%s\\\"\", this.getSchema(), this.getType(),\n                this.getName(), this.getRevision());\n    }\n\n    /**\n     * @return the schema\n     */\n    public String getSchema() {\n        return schema;\n    }\n\n    /**\n     * @param schema\n     *            the schema to set\n     */\n    public void setSchema(String schema) {\n        this.schema = schema;\n    }\n\n    /**\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @param name\n     *            the name to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return the type\n     */\n    public String getType() {\n        return type;\n    }\n\n    /**\n     * @param type\n     *            the type to set\n     */\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    /**\n     * @return the revision\n     */\n    public String getRevision() {\n        return revision;\n    }\n\n    /**\n     * @param revision\n     *            the revision to set\n     */\n    public void setRevision(String revision) {\n        this.revision = revision;\n    }\n\n    /**\n     * Map the type to a file suffix associated with a {@link Language}\n     *\n     * @return inferred suffix\n     */\n    public String getSuffixFromType() {", "right_context": "}\n\n    /**\n     * Gets the data source as a pseudo file name (faux-file). Adding a suffix\n     * matching the source object type ensures that the appropriate language\n     * parser is used.\n     */\n    public String getPseudoFileName() {\n        return String.format(\"/Database/%s/%s/%s%s\", getSchema(), getType(), getName(),\n                getSuffixFromType());\n    }\n}", "class_name": "SourceObject", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ASTExtractExpression extends AbstractPLSQLNode {\n    private boolean xml;\n\n    ASTExtractExpression(int id) {\n        super(id);\n    }\n\n\n    @Override\n    protected <P, R> R acceptPlsqlVisitor(PlsqlVisitor<? super P, ? extends R> visitor, P data) {\n        return visitor.visit(this, data);\n    }\n\n    void setXml() {\n        xml = true;\n    }\n\n    public boolean isXml() {\n        return xml;\n    }\n\n    public String getXPath() {\n        if (xml) {\n            return firstChild(ASTStringLiteral.class).getString();\n        }\n        return \"\";\n    }\n\n    public String getNamespace() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "pmd_pmd/176", "ground_truth": "\n        if (xml) {\n            List<ASTStringLiteral> literals = children(ASTStringLiteral.class).toList();\n            if (literals.size() == 2) {\n                return literals.get(1).getString();\n            }\n        }\n        return \"\";\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-plsql", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "plsql", "ast", "ASTExtractExpression.java"], "context_start_lineno": 0, "function_name": "getNamespace", "left_context": "class ASTExtractExpression extends AbstractPLSQLNode {\n    private boolean xml;\n\n    ASTExtractExpression(int id) {\n        super(id);\n    }\n\n\n    @Override\n    protected <P, R> R acceptPlsqlVisitor(PlsqlVisitor<? super P, ? extends R> visitor, P data) {\n        return visitor.visit(this, data);\n    }\n\n    void setXml() {\n        xml = true;\n    }\n\n    public boolean isXml() {\n        return xml;\n    }\n\n    public String getXPath() {\n        if (xml) {\n            return firstChild(ASTStringLiteral.class).getString();\n        }\n        return \"\";\n    }\n\n    public String getNamespace() {", "right_context": "}\n}", "class_name": "ASTExtractExpression", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/FileAnalysisListener.java\n// --------------------------------------------------\n// /** \n//  * A listener that does nothing.\n//  */\n// static FileAnalysisListener noop(){\n//   return NoopFileListener.INSTANCE;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/FileAnalysisListener.java\n// --------------------------------------------------\n// /** \n//  * Produce an analysis listener that forwards all events to the given listeners.\n//  * @param listeners Listeners\n//  * @return A new listener\n//  * @throws IllegalArgumentException If the parameter is empty\n//  * @throws NullPointerException     If the parameter or any of its elements is null\n//  */\n// @SuppressWarnings(\"PMD.CloseResource\") static FileAnalysisListener tee(Collection<? extends FileAnalysisListener> listeners){\n//   AssertionUtil.requireParamNotNull(\"Listeners\",listeners);\n//   AssertionUtil.requireNotEmpty(\"Listeners\",listeners);\n//   AssertionUtil.requireContainsNoNullValue(\"Listeners\",listeners);\n//   List<FileAnalysisListener> list=new ArrayList<>(listeners);\n//   list.removeIf(it -> it == NoopFileListener.INSTANCE);\n//   if (list.isEmpty()) {\n//     return noop();\n//   }\n//  else   if (list.size() == 1) {\n//     return list.iterator().next();\n//   }\n// class TeeListener implements FileAnalysisListener {\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       for (      FileAnalysisListener it : list) {\n//         it.onRuleViolation(violation);\n//       }\n//     }\n//     @Override public void onSuppressedRuleViolation(    SuppressedViolation violation){\n//       for (      FileAnalysisListener it : list) {\n//         it.onSuppressedRuleViolation(violation);\n//       }\n//     }\n//     @Override public void onError(    ProcessingError error){\n//       for (      FileAnalysisListener it : list) {\n//         it.onError(error);\n//       }\n//     }\n//     @Override public void close() throws Exception {\n//       Exception composed=IOUtil.closeAll(list);\n//       if (composed != null) {\n//         throw composed;\n//       }\n//     }\n//     @Override public String toString(){\n//       return \"Tee\" + list;\n//     }\n//   }\n//   return new TeeListener();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-ant/src/main/java/net/sourceforge/pmd/ant/Formatter.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return listener.startFileAnalysis(file);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-ant/src/main/java/net/sourceforge/pmd/ant/internal/PMDTaskImpl.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile dataSource){\n//   String name=dataSource.getFileId().getUriString();\n//   project.log(\"Processing file \" + name,Project.MSG_VERBOSE);\n//   return FileAnalysisListener.noop();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-cli/src/main/java/net/sourceforge/pmd/cli/internal/ProgressBarListener.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return new FileAnalysisListener(){\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       ProgressBarListener.this.numViolations.addAndGet(1);\n//     }\n//     @Override public void onSuppressedRuleViolation(    Report.SuppressedViolation violation){\n//     }\n//     @Override public void onError(    Report.ProcessingError error){\n//       ProgressBarListener.this.numErrors.addAndGet(1);\n//     }\n//     @Override public void close(){\n//       progressBar.step();\n//       refreshProgressBar();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-compat6/src/main/java/net/sourceforge/pmd/Report.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return new ReportBuilderListener(this.report);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-compat6/src/main/java/net/sourceforge/pmd/renderers/Renderer.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   Renderer renderer=Renderer.this;\n//   renderer.startFileAnalysis(file);\n//   return new FileAnalysisListener(){\n//     final ReportBuilderListener reportBuilder=new ReportBuilderListener();\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       reportBuilder.onRuleViolation(violation);\n//     }\n//     @Override public void onSuppressedRuleViolation(    SuppressedViolation violation){\n//       reportBuilder.onSuppressedRuleViolation(violation);\n//     }\n//     @Override public void onError(    ProcessingError error){\n//       reportBuilder.onError(error);\n//     }\n//     @Override public void close() throws Exception {\n//       reportBuilder.close();\n// synchronized (reportMergeLock) {\n//         try (TimedOperation ignored=TimeTracker.startOperation(TimedOperationCategory.REPORTING)){\n//           renderer.renderFileReport(reportBuilder.getResult());\n//         }\n//        }\n//     }\n//     @Override public String toString(){\n//       return \"FileRendererListener[\" + Renderer.this + \"]\";\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/cache/internal/AbstractAnalysisCache.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextDocument file){\n//   final FileId fileName=file.getFileId();\n//   return new FileAnalysisListener(){\n//     private boolean failed=false;\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       if (!failed) {\n//         updatedResultsCache.get(fileName).addViolation(violation);\n//       }\n//     }\n//     @Override public void onError(    ProcessingError error){\n//       failed=true;\n//       analysisFailed(file);\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/cache/internal/AnalysisCache.java\n// --------------------------------------------------\n// /** \n//  * Returns a listener that will be used like in  {@link GlobalAnalysisListener#startFileAnalysis(TextFile)}. This should record violations, and call  {@link #analysisFailed(TextDocument)}upon error.\n//  */\n// FileAnalysisListener startFileAnalysis(TextDocument file);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/cache/internal/NoopAnalysisCache.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextDocument filename){\n//   return FileAnalysisListener.noop();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/renderers/AbstractAccumulatingRenderer.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   AbstractAccumulatingRenderer.this.startFileAnalysis(file);\n//   return reportBuilder.startFileAnalysis(file);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/renderers/Renderer.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   Renderer renderer=Renderer.this;\n//   renderer.startFileAnalysis(file);\n//   return new FileAnalysisListener(){\n//     final ReportBuilderListener reportBuilder=new ReportBuilderListener();\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       reportBuilder.onRuleViolation(violation);\n//     }\n//     @Override public void onSuppressedRuleViolation(    SuppressedViolation violation){\n//       reportBuilder.onSuppressedRuleViolation(violation);\n//     }\n//     @Override public void onError(    ProcessingError error){\n//       reportBuilder.onError(error);\n//     }\n//     @Override public void close() throws Exception {\n//       reportBuilder.close();\n// synchronized (reportMergeLock) {\n//         try (TimedOperation ignored=TimeTracker.startOperation(TimedOperationCategory.REPORTING)){\n//           renderer.renderFileReport(reportBuilder.getResult());\n//         }\n//        }\n//     }\n//     @Override public String toString(){\n//       return \"FileRendererListener[\" + Renderer.this + \"]\";\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/GlobalAnalysisListener.java\n// --------------------------------------------------\n// /** \n//  * Returns a file listener that will handle events occurring during the analysis of the given file. The new listener may receive events as soon as this method returns. The analysis stops when the {@link FileAnalysisListener#close()} method is called.\n//  * @implSpec This routine may be called from several threads at once andneeds to be thread-safe. But the returned listener will only be used in a single thread.\n//  * @param file File to be processed\n//  * @return A new listener\n//  * @throws IllegalStateException If {@link #close()} has already been called.This prevents manipulation mistakes but is not a strong requirement.\n//  */\n// FileAnalysisListener startFileAnalysis(TextFile file);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/GlobalAnalysisListener.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return FileAnalysisListener.tee(CollectionUtil.map(myList,it -> it.startFileAnalysis(file)));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/GlobalAnalysisListener.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return violation -> count.incrementAndGet();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/GlobalAnalysisListener.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   FileId filename=file.getFileId();\n//   return new FileAnalysisListener(){\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//     }\n//     @Override public void onError(    ProcessingError error) throws FileAnalysisException {\n//       throw FileAnalysisException.wrap(filename,error.getError().getMessage(),error.getError());\n//     }\n//     @Override public String toString(){\n//       return \"ExceptionThrower\";\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/NoopAnalysisListener.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return FileAnalysisListener.noop();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/Report.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return new ReportBuilderListener(this.report);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/reporting/ReportStatsListener.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   return new FileAnalysisListener(){\n//     private int numErrors=0;\n//     private int numViolations=0;\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       numViolations++;\n//     }\n//     @Override public void onError(    ProcessingError error){\n//       numErrors++;\n//     }\n//     @Override public void close(){\n//       if (numErrors > 0) {\n//         ReportStatsListener.this.numErrors.addAndGet(this.numErrors);\n//       }\n//       if (numViolations > 0) {\n//         ReportStatsListener.this.numViolations.addAndGet(this.numViolations);\n//       }\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/test/java/net/sourceforge/pmd/lang/impl/AbstractPMDProcessorTest.java\n// --------------------------------------------------\n// @Override public FileAnalysisListener startFileAnalysis(TextFile file){\n//   files.incrementAndGet();\n//   return new FileAnalysisListener(){\n//     @Override public void onRuleViolation(    RuleViolation violation){\n//       violations.incrementAndGet();\n//     }\n//     @Override public void onError(    Report.ProcessingError error){\n//       errors.incrementAndGet();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AnalysisCacheListener implements GlobalAnalysisListener {\n\n    private final AnalysisCache cache;\n\n    public AnalysisCacheListener(AnalysisCache cache, RuleSets ruleSets, ClassLoader classLoader,\n                                 Collection<? extends TextFile> textFiles) {\n        this.cache = cache;\n        cache.checkValidity(ruleSets, classLoader, textFiles);\n    }\n\n    @Override\n    public FileAnalysisListener startFileAnalysis(TextFile file) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void close() throws IOException {\n        cache.persist();\n    }\n\n}", "metadata": {"task_id": "pmd_pmd/207", "ground_truth": "\n        // AnalysisCache instances are handled specially in PmdRunnable\n        return FileAnalysisListener.noop();\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "cache", "internal", "AnalysisCacheListener.java"], "context_start_lineno": 0, "function_name": "startFileAnalysis", "left_context": "class AnalysisCacheListener implements GlobalAnalysisListener {\n\n    private final AnalysisCache cache;\n\n    public AnalysisCacheListener(AnalysisCache cache, RuleSets ruleSets, ClassLoader classLoader,\n                                 Collection<? extends TextFile> textFiles) {\n        this.cache = cache;\n        cache.checkValidity(ruleSets, classLoader, textFiles);\n    }\n\n    @Override\n    public FileAnalysisListener startFileAnalysis(TextFile file) {", "right_context": "}\n\n    @Override\n    public void close() throws IOException {\n        cache.persist();\n    }\n\n}", "class_name": "AnalysisCacheListener", "return_type": "FileAnalysisListener", "parameters": [{"type": "TextFile", "name": "file"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LexException extends FileAnalysisException {\n\n    private final int line;\n    private final int column;\n\n    /**\n     * Create a new exception.\n     *\n     * @param line     Line number\n     * @param column   Column number\n     * @param filename Filename. If unknown, it can be completed with {@link #setFileId(FileId)}} later\n     * @param message  Message of the error\n     * @param cause    Cause of the error, if any\n     */\n    public LexException(int line, int column, @Nullable FileId filename, String message, @Nullable Throwable cause) {\n        super(message, cause);\n        this.line = max(line, 1);\n        this.column = max(column, 1);\n        if (filename != null) {\n            super.setFileId(filename);\n        }\n    }\n\n    /**\n     * Constructor called by JavaCC.\n     *\n     * @apiNote Internal API.\n     */\n    LexException(boolean eofSeen, String lexStateName, int errorLine, int errorColumn, String errorAfter, char curChar) {\n        super(makeReason(eofSeen, lexStateName, errorAfter, curChar));\n        line = max(errorLine, 1);\n        column = max(errorColumn, 1);\n    }\n\n    public int getLine() {\n        return line;\n    }\n\n    public int getColumn() {\n        return column;\n    }\n\n    @Override\n    protected @NonNull FileLocation location() {\n        return FileLocation.caret(getFileId(), line, column);\n    }\n\n    @Override\n    protected String errorKind() {\n        return \"Lexical error\";\n    }\n\n    /**\n     * Replace the file name of this error.\n     *\n     * @param fileId New filename\n     *\n     * @return A new exception\n     */\n    @Override\n    public LexException setFileId(FileId fileId) {\n        super.setFileId(fileId);\n        return this;\n    }\n\n    private static String makeReason(boolean eofseen, String lexStateName, String errorAfter, char curChar) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "pmd_pmd/233", "ground_truth": "\n        String message;\n        if (eofseen) {\n            message = \"<EOF> \";\n        } else {\n            message = \"\\\"\" + StringUtil.escapeJava(String.valueOf(curChar)) + \"\\\"\" + \" (\" + (int) curChar + \"), \";\n        }\n        message += \"after : \\\"\" + StringUtil.escapeJava(errorAfter) + \"\\\" (in lexical state \" + lexStateName + \")\";\n\n        return message;\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "ast", "LexException.java"], "context_start_lineno": 0, "function_name": "makeReason", "left_context": "class LexException extends FileAnalysisException {\n\n    private final int line;\n    private final int column;\n\n    /**\n     * Create a new exception.\n     *\n     * @param line     Line number\n     * @param column   Column number\n     * @param filename Filename. If unknown, it can be completed with {@link #setFileId(FileId)}} later\n     * @param message  Message of the error\n     * @param cause    Cause of the error, if any\n     */\n    public LexException(int line, int column, @Nullable FileId filename, String message, @Nullable Throwable cause) {\n        super(message, cause);\n        this.line = max(line, 1);\n        this.column = max(column, 1);\n        if (filename != null) {\n            super.setFileId(filename);\n        }\n    }\n\n    /**\n     * Constructor called by JavaCC.\n     *\n     * @apiNote Internal API.\n     */\n    LexException(boolean eofSeen, String lexStateName, int errorLine, int errorColumn, String errorAfter, char curChar) {\n        super(makeReason(eofSeen, lexStateName, errorAfter, curChar));\n        line = max(errorLine, 1);\n        column = max(errorColumn, 1);\n    }\n\n    public int getLine() {\n        return line;\n    }\n\n    public int getColumn() {\n        return column;\n    }\n\n    @Override\n    protected @NonNull FileLocation location() {\n        return FileLocation.caret(getFileId(), line, column);\n    }\n\n    @Override\n    protected String errorKind() {\n        return \"Lexical error\";\n    }\n\n    /**\n     * Replace the file name of this error.\n     *\n     * @param fileId New filename\n     *\n     * @return A new exception\n     */\n    @Override\n    public LexException setFileId(FileId fileId) {\n        super.setFileId(fileId);\n        return this;\n    }\n\n    private static String makeReason(boolean eofseen, String lexStateName, String errorAfter, char curChar) {", "right_context": "}\n}", "class_name": "LexException", "return_type": "String", "parameters": [{"type": "boolean", "name": "eofseen"}, {"type": "String", "name": "lexStateName"}, {"type": "String", "name": "errorAfter"}, {"type": "char", "name": "curChar"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VSRenderer implements CPDReportRenderer {\n\n    @Override\n    public void render(CPDReport report, Writer writer) throws IOException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "pmd_pmd/236", "ground_truth": "\n        for (Match match: report.getMatches()) {\n            for (Mark mark : match) {\n                FileLocation loc = mark.getLocation();\n                writer.append(report.getDisplayName(loc.getFileId()))\n                      .append('(').append(String.valueOf(loc.getStartLine())).append(\"):\")\n                      .append(\" Between lines \").append(String.valueOf(loc.getStartLine()))\n                      .append(\" and \").append(String.valueOf(loc.getEndLine()))\n                      .append(System.lineSeparator());\n            }\n        }\n        writer.flush();\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "cpd", "VSRenderer.java"], "context_start_lineno": 0, "function_name": "render", "left_context": "class VSRenderer implements CPDReportRenderer {\n\n    @Override\n    public void render(CPDReport report, Writer writer) throws IOException {", "right_context": "}\n}", "class_name": "VSRenderer", "return_type": "void", "parameters": [{"type": "CPDReport", "name": "report"}, {"type": "Writer", "name": "writer"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ASTInput extends AbstractPLSQLNode implements RootNode {\n\n    private AstInfo<ASTInput> astInfo;\n\n    ASTInput(int id) {\n        super(id);\n    }\n\n    @Override\n    public AstInfo<ASTInput> getAstInfo() {\n        return astInfo;\n    }\n\n    ASTInput addTaskInfo(ParserTask task) {\n        this.astInfo = new AstInfo<>(task, this);\n        return this;\n    }\n\n\n    @Override\n    protected <P, R> R acceptPlsqlVisitor(PlsqlVisitor<? super P, ? extends R> visitor, P data) {\n        return visitor.visit(this, data);\n    }\n\n    private int excludedRangesCount = 0;\n    private int excludedLinesCount = 0;\n\n    /**\n     * Let the user know that a range of lines were excluded from parsing.\n     *\n     * @param first First line of the excluded line range (1-based).\n     * @param last Last line  of the excluded line range (1-based).\n     */\n    void addExcludedLineRange(int first, int last) {<FILL_FUNCTION_BODY>}\n\n    public int getExcludedLinesCount() {\n        return excludedLinesCount;\n    }\n\n    public int getExcludedRangesCount() {\n        return excludedRangesCount;\n    }\n}", "metadata": {"task_id": "pmd_pmd/246", "ground_truth": "\n        excludedLinesCount += last - first + 1;\n        excludedRangesCount += 1;\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-plsql", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "plsql", "ast", "ASTInput.java"], "context_start_lineno": 0, "function_name": "addExcludedLineRange", "left_context": "class ASTInput extends AbstractPLSQLNode implements RootNode {\n\n    private AstInfo<ASTInput> astInfo;\n\n    ASTInput(int id) {\n        super(id);\n    }\n\n    @Override\n    public AstInfo<ASTInput> getAstInfo() {\n        return astInfo;\n    }\n\n    ASTInput addTaskInfo(ParserTask task) {\n        this.astInfo = new AstInfo<>(task, this);\n        return this;\n    }\n\n\n    @Override\n    protected <P, R> R acceptPlsqlVisitor(PlsqlVisitor<? super P, ? extends R> visitor, P data) {\n        return visitor.visit(this, data);\n    }\n\n    private int excludedRangesCount = 0;\n    private int excludedLinesCount = 0;\n\n    /**\n     * Let the user know that a range of lines were excluded from parsing.\n     *\n     * @param first First line of the excluded line range (1-based).\n     * @param last Last line  of the excluded line range (1-based).\n     */\n    void addExcludedLineRange(int first, int last) {", "right_context": "}\n\n    public int getExcludedLinesCount() {\n        return excludedLinesCount;\n    }\n\n    public int getExcludedRangesCount() {\n        return excludedRangesCount;\n    }\n}", "class_name": "ASTInput", "return_type": "void", "parameters": [{"type": "int", "name": "first"}, {"type": "int", "name": "last"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SymbolicValueHelper {\n\n    private SymbolicValueHelper() {\n        // utility class\n    }\n\n    static boolean equalsModuloWrapper(SymbolicValue sv, Object other) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "pmd_pmd/254", "ground_truth": "\n        if (other instanceof SymbolicValue) {\n            return sv.equals(other);\n        } else {\n            return sv.valueEquals(other);\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-java", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "java", "symbols", "SymbolicValueHelper.java"], "context_start_lineno": 0, "function_name": "equalsModuloWrapper", "left_context": "class SymbolicValueHelper {\n\n    private SymbolicValueHelper() {\n        // utility class\n    }\n\n    static boolean equalsModuloWrapper(SymbolicValue sv, Object other) {", "right_context": "}\n\n}", "class_name": "SymbolicValueHelper", "return_type": "boolean", "parameters": [{"type": "SymbolicValue", "name": "sv"}, {"type": "Object", "name": "other"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NioTextFile extends BaseCloseable implements TextFile {\n\n    private final Path path;\n    private final Charset charset;\n    private final LanguageVersion languageVersion;\n    private final FileId fileId;\n    private boolean readOnly;\n\n    NioTextFile(Path path,\n                @Nullable FileId parentFsPath,\n                Charset charset,\n                LanguageVersion languageVersion,\n                boolean readOnly) {\n        AssertionUtil.requireParamNotNull(\"path\", path);\n        AssertionUtil.requireParamNotNull(\"charset\", charset);\n        AssertionUtil.requireParamNotNull(\"language version\", languageVersion);\n\n        this.readOnly = readOnly;\n        this.path = path;\n        this.charset = charset;\n        this.languageVersion = languageVersion;\n        this.fileId = FileId.fromPath(path, parentFsPath);\n    }\n\n    @Override\n    public @NonNull LanguageVersion getLanguageVersion() {\n        return languageVersion;\n    }\n\n    @Override\n    public FileId getFileId() {\n        return fileId;\n    }\n\n    @Override\n    public boolean isReadOnly() {\n        return readOnly || !Files.isWritable(path);\n    }\n\n    @Override\n    public void writeContents(TextFileContent content) throws IOException {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public TextFileContent readContents() throws IOException {\n        ensureOpen();\n\n        if (!Files.isRegularFile(path)) {\n            throw new IOException(\"Not a regular file: \" + path);\n        }\n\n        return TextFileContent.fromInputStream(Files.newInputStream(path), charset);\n    }\n\n\n    @Override\n    protected void doClose() throws IOException {\n        // nothing to do.\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        @SuppressWarnings(\"PMD.CloseResource\")\n        NioTextFile that = (NioTextFile) o;\n        return path.equals(that.path);\n    }\n\n    @Override\n    public int hashCode() {\n        return path.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        return \"NioTextFile[charset=\" + charset + \", path=\" + path + ']';\n    }\n}", "metadata": {"task_id": "pmd_pmd/305", "ground_truth": "\n        ensureOpen();\n        if (isReadOnly()) {\n            throw new ReadOnlyFileException(this);\n        }\n        try (BufferedWriter bw = Files.newBufferedWriter(path, charset)) {\n            if (TextFileContent.NORMALIZED_LINE_TERM.equals(content.getLineTerminator())) {\n                content.getNormalizedText().writeFully(bw);\n            } else {\n                for (Chars line : content.getNormalizedText().lines()) {\n                    line.writeFully(bw);\n                    bw.write(content.getLineTerminator());\n                }\n            }\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "document", "NioTextFile.java"], "context_start_lineno": 0, "function_name": "writeContents", "left_context": "class NioTextFile extends BaseCloseable implements TextFile {\n\n    private final Path path;\n    private final Charset charset;\n    private final LanguageVersion languageVersion;\n    private final FileId fileId;\n    private boolean readOnly;\n\n    NioTextFile(Path path,\n                @Nullable FileId parentFsPath,\n                Charset charset,\n                LanguageVersion languageVersion,\n                boolean readOnly) {\n        AssertionUtil.requireParamNotNull(\"path\", path);\n        AssertionUtil.requireParamNotNull(\"charset\", charset);\n        AssertionUtil.requireParamNotNull(\"language version\", languageVersion);\n\n        this.readOnly = readOnly;\n        this.path = path;\n        this.charset = charset;\n        this.languageVersion = languageVersion;\n        this.fileId = FileId.fromPath(path, parentFsPath);\n    }\n\n    @Override\n    public @NonNull LanguageVersion getLanguageVersion() {\n        return languageVersion;\n    }\n\n    @Override\n    public FileId getFileId() {\n        return fileId;\n    }\n\n    @Override\n    public boolean isReadOnly() {\n        return readOnly || !Files.isWritable(path);\n    }\n\n    @Override\n    public void writeContents(TextFileContent content) throws IOException {", "right_context": "}\n\n    @Override\n    public TextFileContent readContents() throws IOException {\n        ensureOpen();\n\n        if (!Files.isRegularFile(path)) {\n            throw new IOException(\"Not a regular file: \" + path);\n        }\n\n        return TextFileContent.fromInputStream(Files.newInputStream(path), charset);\n    }\n\n\n    @Override\n    protected void doClose() throws IOException {\n        // nothing to do.\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        @SuppressWarnings(\"PMD.CloseResource\")\n        NioTextFile that = (NioTextFile) o;\n        return path.equals(that.path);\n    }\n\n    @Override\n    public int hashCode() {\n        return path.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        return \"NioTextFile[charset=\" + charset + \", path=\" + path + ']';\n    }\n}", "class_name": "NioTextFile", "return_type": "void", "parameters": [{"type": "TextFileContent", "name": "content"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MetricsUtil {\n\n    static final String NULL_KEY_MESSAGE = \"The metric key must not be null\";\n    static final String NULL_OPTIONS_MESSAGE = \"The metric options must not be null\";\n    static final String NULL_NODE_MESSAGE = \"The node must not be null\";\n\n    private MetricsUtil() {\n        // util class\n    }\n\n    public static boolean supportsAll(Node node, Metric<?, ?>... metrics) {\n        for (Metric<?, ?> metric : metrics) {\n            if (!metric.supports(node)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Computes statistics for the results of a metric over a sequence of nodes.\n     *\n     * @param key The metric to compute\n     * @param ops List of nodes for which to compute the metric\n     *\n     * @return Statistics for the value of the metric over all the nodes\n     */\n    public static <O extends Node> DoubleSummaryStatistics computeStatistics(Metric<? super O, ?> key, Iterable<? extends O> ops) {\n        return computeStatistics(key, ops, MetricOptions.emptyOptions());\n    }\n\n    /**\n     * Computes statistics for the results of a metric over a sequence of nodes.\n     *\n     * @param key     The metric to compute\n     * @param ops     List of nodes for which to compute the metric\n     * @param options The options of the metric\n     *\n     * @return Statistics for the value of the metric over all the nodes\n     */\n    public static <O extends Node> DoubleSummaryStatistics computeStatistics(Metric<? super O, ?> key,\n                                                                             Iterable<? extends O> ops,\n                                                                             MetricOptions options) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Computes a metric identified by its code on a node, with the default options.\n     *\n     * @param key  The key identifying the metric to be computed\n     * @param node The node on which to compute the metric\n     *\n     * @return The value of the metric, or {@code Double.NaN} if the value couldn't be computed\n     *\n     * @throws IllegalArgumentException If the metric does not support the given node\n     */\n    public static <N extends Node, R extends Number> R computeMetric(Metric<? super N, R> key, N node) {\n        return computeMetric(key, node, MetricOptions.emptyOptions());\n    }\n\n    /**\n     * Computes a metric identified by its code on a node, possibly\n     * selecting a variant with the {@code options} parameter.\n     *\n     * <p>Note that contrary to the previous behaviour, this method\n     * throws an exception if the metric does not support the node.\n     *\n     * @param key     The key identifying the metric to be computed\n     * @param node    The node on which to compute the metric\n     * @param options The options of the metric\n     *\n     * @return The value of the metric\n     *\n     * @throws IllegalArgumentException If the metric does not support the given node\n     */\n    public static <N extends Node, R extends Number> R computeMetric(Metric<? super N, R> key, N node, MetricOptions options) {\n        return computeMetric(key, node, options, false);\n    }\n\n    /**\n     * Computes a metric identified by its code on a node, possibly\n     * selecting a variant with the {@code options} parameter.\n     *\n     * <p>Note that contrary to the previous behaviour, this method\n     * throws an exception if the metric does not support the node.\n     *\n     * @param key            The key identifying the metric to be computed\n     * @param node           The node on which to compute the metric\n     * @param options        The options of the metric\n     * @param forceRecompute Force recomputation of the result\n     *\n     * @return The value of the metric\n     *\n     * @throws IllegalArgumentException If the metric does not support the given node\n     */\n    public static <N extends Node, R extends Number> R computeMetric(Metric<? super N, R> key, N node, MetricOptions options, boolean forceRecompute) {\n        Objects.requireNonNull(key, NULL_KEY_MESSAGE);\n        Objects.requireNonNull(options, NULL_OPTIONS_MESSAGE);\n        Objects.requireNonNull(node, NULL_NODE_MESSAGE);\n\n\n        if (!key.supports(node)) {\n            throw new IllegalArgumentException(key + \" cannot be computed on \" + node);\n        }\n\n        ParameterizedMetricKey<? super N, R> paramKey = ParameterizedMetricKey.getInstance(key, options);\n        R prev = node.getUserMap().get(paramKey);\n        if (!forceRecompute && prev != null) {\n            return prev;\n        }\n\n        R val = key.computeFor(node, options);\n        node.getUserMap().set(paramKey, val);\n        return val;\n    }\n\n}", "metadata": {"task_id": "pmd_pmd/316", "ground_truth": "\n\n\n        Objects.requireNonNull(key, NULL_KEY_MESSAGE);\n        Objects.requireNonNull(options, NULL_OPTIONS_MESSAGE);\n        Objects.requireNonNull(ops, NULL_NODE_MESSAGE);\n\n        return StreamSupport.stream(ops.spliterator(), false)\n                            .filter(key::supports)\n                            .collect(Collectors.summarizingDouble(op -> computeMetric(key, op, options).doubleValue()));\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "metrics", "MetricsUtil.java"], "context_start_lineno": 0, "function_name": "computeStatistics", "left_context": "class MetricsUtil {\n\n    static final String NULL_KEY_MESSAGE = \"The metric key must not be null\";\n    static final String NULL_OPTIONS_MESSAGE = \"The metric options must not be null\";\n    static final String NULL_NODE_MESSAGE = \"The node must not be null\";\n\n    private MetricsUtil() {\n        // util class\n    }\n\n    public static boolean supportsAll(Node node, Metric<?, ?>... metrics) {\n        for (Metric<?, ?> metric : metrics) {\n            if (!metric.supports(node)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Computes statistics for the results of a metric over a sequence of nodes.\n     *\n     * @param key The metric to compute\n     * @param ops List of nodes for which to compute the metric\n     *\n     * @return Statistics for the value of the metric over all the nodes\n     */\n    public static <O extends Node> DoubleSummaryStatistics computeStatistics(Metric<? super O, ?> key, Iterable<? extends O> ops) {\n        return computeStatistics(key, ops, MetricOptions.emptyOptions());\n    }\n\n    /**\n     * Computes statistics for the results of a metric over a sequence of nodes.\n     *\n     * @param key     The metric to compute\n     * @param ops     List of nodes for which to compute the metric\n     * @param options The options of the metric\n     *\n     * @return Statistics for the value of the metric over all the nodes\n     */\n    public static <O extends Node> DoubleSummaryStatistics computeStatistics(Metric<? super O, ?> key,\n                                                                             Iterable<? extends O> ops,\n                                                                             MetricOptions options) {", "right_context": "}\n\n    /**\n     * Computes a metric identified by its code on a node, with the default options.\n     *\n     * @param key  The key identifying the metric to be computed\n     * @param node The node on which to compute the metric\n     *\n     * @return The value of the metric, or {@code Double.NaN} if the value couldn't be computed\n     *\n     * @throws IllegalArgumentException If the metric does not support the given node\n     */\n    public static <N extends Node, R extends Number> R computeMetric(Metric<? super N, R> key, N node) {\n        return computeMetric(key, node, MetricOptions.emptyOptions());\n    }\n\n    /**\n     * Computes a metric identified by its code on a node, possibly\n     * selecting a variant with the {@code options} parameter.\n     *\n     * <p>Note that contrary to the previous behaviour, this method\n     * throws an exception if the metric does not support the node.\n     *\n     * @param key     The key identifying the metric to be computed\n     * @param node    The node on which to compute the metric\n     * @param options The options of the metric\n     *\n     * @return The value of the metric\n     *\n     * @throws IllegalArgumentException If the metric does not support the given node\n     */\n    public static <N extends Node, R extends Number> R computeMetric(Metric<? super N, R> key, N node, MetricOptions options) {\n        return computeMetric(key, node, options, false);\n    }\n\n    /**\n     * Computes a metric identified by its code on a node, possibly\n     * selecting a variant with the {@code options} parameter.\n     *\n     * <p>Note that contrary to the previous behaviour, this method\n     * throws an exception if the metric does not support the node.\n     *\n     * @param key            The key identifying the metric to be computed\n     * @param node           The node on which to compute the metric\n     * @param options        The options of the metric\n     * @param forceRecompute Force recomputation of the result\n     *\n     * @return The value of the metric\n     *\n     * @throws IllegalArgumentException If the metric does not support the given node\n     */\n    public static <N extends Node, R extends Number> R computeMetric(Metric<? super N, R> key, N node, MetricOptions options, boolean forceRecompute) {\n        Objects.requireNonNull(key, NULL_KEY_MESSAGE);\n        Objects.requireNonNull(options, NULL_OPTIONS_MESSAGE);\n        Objects.requireNonNull(node, NULL_NODE_MESSAGE);\n\n\n        if (!key.supports(node)) {\n            throw new IllegalArgumentException(key + \" cannot be computed on \" + node);\n        }\n\n        ParameterizedMetricKey<? super N, R> paramKey = ParameterizedMetricKey.getInstance(key, options);\n        R prev = node.getUserMap().get(paramKey);\n        if (!forceRecompute && prev != null) {\n            return prev;\n        }\n\n        R val = key.computeFor(node, options);\n        node.getUserMap().set(paramKey, val);\n        return val;\n    }\n\n}", "class_name": "MetricsUtil", "return_type": "DoubleSummaryStatistics", "parameters": [{"type": "Metric<? super O,?>", "name": "key"}, {"type": "Iterable<? extends O>", "name": "ops"}, {"type": "MetricOptions", "name": "options"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PropertyParsingUtil {\n\n    public static final ValueSyntax<String> STRING = ValueSyntax.withDefaultToString(String::trim);\n    public static final ValueSyntax<Character> CHARACTER =\n        ValueSyntax.partialFunction(\n            c -> Character.toString(c),\n            s -> s.charAt(0),\n            PropertyConstraint.fromPredicate(\n                s -> s.length() == 1,\n                \"Should be exactly one character in length\"\n            ));\n\n    public static final ValueSyntax<Pattern> REGEX = ValueSyntax.withDefaultToString(Pattern::compile);\n    public static final ValueSyntax<Integer> INTEGER = ValueSyntax.withDefaultToString(preTrim(Integer::valueOf));\n    public static final ValueSyntax<Long> LONG = ValueSyntax.withDefaultToString(preTrim(Long::valueOf));\n    public static final ValueSyntax<Boolean> BOOLEAN = ValueSyntax.withDefaultToString(preTrim(Boolean::valueOf));\n    public static final ValueSyntax<Double> DOUBLE = ValueSyntax.withDefaultToString(preTrim(Double::valueOf));\n\n\n    public static final PropertySerializer<List<Integer>> INTEGER_LIST = numberList(INTEGER);\n    public static final PropertySerializer<List<Double>> DOUBLE_LIST = numberList(DOUBLE);\n    public static final PropertySerializer<List<Long>> LONG_LIST = numberList(LONG);\n\n    public static final PropertySerializer<List<Character>> CHAR_LIST = otherList(CHARACTER);\n    public static final PropertySerializer<List<String>> STRING_LIST = otherList(STRING);\n\n    private PropertyParsingUtil() {\n\n    }\n\n\n    private static <T extends Number> PropertySerializer<List<T>> numberList(ValueSyntax<T> valueSyntax) {\n        return delimitedString(valueSyntax, Collectors.toList());\n    }\n\n    private static <T> PropertySerializer<List<T>> otherList(ValueSyntax<T> valueSyntax) {\n        return delimitedString(valueSyntax, Collectors.toList() /* prefer old syntax for now */);\n    }\n\n    private static <T> Function<String, ? extends T> preTrim(Function<? super String, ? extends T> parser) {\n        return parser.compose(String::trim);\n    }\n\n    public static <T> PropertySerializer<Optional<T>> toOptional(PropertySerializer<T> itemSyntax, String missingValue) {\n        return ValueSyntax.create(\n            opt -> opt.map(itemSyntax::toString).orElse(missingValue),\n            str -> {\n                if (str.equals(missingValue)) {\n                    return Optional.empty();\n                }\n                return Optional.of(itemSyntax.fromString(str));\n            }\n        );\n    }\n\n\n    /**\n     * Checks the result of the constraints defined by this mapper on\n     * the given element. Returns all failures as a list of strings.\n     */\n    public static <T> void checkConstraintsThrow(T t, List<? extends PropertyConstraint<? super T>> constraints) {<FILL_FUNCTION_BODY>}\n\n    public static <T> PropertySerializer<T> withAllConstraints(PropertySerializer<T> mapper, List<PropertyConstraint<? super T>> constraints) {\n        PropertySerializer<T> result = mapper;\n        for (PropertyConstraint<? super T> constraint : constraints) {\n            result = result.withConstraint(constraint);\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds an XML syntax that understands delimited {@code <value>} syntax.\n     *\n     * @param <T>        Type of items\n     * @param <C>        Type of collection to handle\n     * @param itemSyntax Serializer for the items, must support string mapping\n     * @param collector  Collector to create the collection from strings\n     *\n     * @throws IllegalArgumentException If the item syntax doesn't support string mapping\n     */\n    public static <T, C extends Iterable<T>> PropertySerializer<C> delimitedString(PropertySerializer<T> itemSyntax,\n                                                                                   Collector<? super T, ?, ? extends C> collector) {\n        String delim = \"\" + PropertyFactory.DEFAULT_DELIMITER;\n        return ValueSyntax.create(\n            coll -> IteratorUtil.toStream(coll.iterator()).map(itemSyntax::toString).collect(Collectors.joining(delim)),\n            string -> parseListWithEscapes(string, PropertyFactory.DEFAULT_DELIMITER, itemSyntax::fromString).stream().collect(collector)\n        );\n    }\n\n    private static final char ESCAPE_CHAR = '\\\\';\n\n    /**\n     * Parse a list delimited with the given delimiter, converting individual\n     * values to type {@code <U>} with the given extractor. Any character is\n     * escaped with a backslash. This is useful to escape the delimiter, and\n     * to escape the backslash. For example:\n     * <pre>{@code\n     *\n     * \"a,c\"  -> [ \"a\", \"c\" ]\n     * \"a\\,c\" -> [ \"a,c\" ]\n     * \"a\\c\"  -> [ \"ac\" ]\n     * \"a\\\\c\" -> [ \"a\\c\" ]\n     * \"a\\\"   -> [ \"a\\\"  ]   (a backslash at the end of the string is just a backslash)\n     *\n     * }</pre>\n     */\n    public static <U> List<U> parseListWithEscapes(String str, char delimiter, Function<? super String, ? extends U> extractor) {\n        if (str.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<U> result = new ArrayList<>();\n        StringBuilder currentToken = new StringBuilder();\n        boolean inEscapeMode = false;\n\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n\n            if (inEscapeMode) {\n                inEscapeMode = false;\n                currentToken.append(c);\n            } else if (c == delimiter) {\n                result.add(extractor.apply(currentToken.toString()));\n                currentToken = new StringBuilder();\n            } else if (c == ESCAPE_CHAR && i < str.length() - 1) {\n                // this is ordered this way so that if the delimiter is\n                // itself a backslash, no escapes are processed.\n                inEscapeMode = true;\n            } else {\n                currentToken.append(c);\n            }\n        }\n\n        if (currentToken.length() > 0) {\n            result.add(extractor.apply(currentToken.toString()));\n        }\n        return result;\n    }\n\n\n    public static <T> ValueSyntax<T> enumerationParser(final Map<String, T> mappings, Function<? super T, String> reverseFun) {\n\n        if (mappings.containsValue(null)) {\n            throw new IllegalArgumentException(\"Map may not contain entries with null values\");\n        }\n\n        return ValueSyntax.partialFunction(\n            reverseFun,\n            mappings::get,\n            PropertyConstraint.fromPredicate(\n                mappings::containsKey,\n                \"Should be \" + XmlUtil.formatPossibleNames(XmlUtil.toConstants(mappings.keySet()))\n            )\n        );\n    }\n}", "metadata": {"task_id": "pmd_pmd/354", "ground_truth": "\n        ConstraintViolatedException exception = null;\n        for (PropertyConstraint<? super T> constraint : constraints) {\n            try {\n                constraint.validate(t);\n            } catch (ConstraintViolatedException e) {\n                if (exception == null) {\n                    exception = e;\n                } else {\n                    exception.addSuppressed(e);\n                }\n            }\n        }\n\n        if (exception != null) {\n            throw exception;\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "properties", "internal", "PropertyParsingUtil.java"], "context_start_lineno": 0, "function_name": "checkConstraintsThrow", "left_context": "class PropertyParsingUtil {\n\n    public static final ValueSyntax<String> STRING = ValueSyntax.withDefaultToString(String::trim);\n    public static final ValueSyntax<Character> CHARACTER =\n        ValueSyntax.partialFunction(\n            c -> Character.toString(c),\n            s -> s.charAt(0),\n            PropertyConstraint.fromPredicate(\n                s -> s.length() == 1,\n                \"Should be exactly one character in length\"\n            ));\n\n    public static final ValueSyntax<Pattern> REGEX = ValueSyntax.withDefaultToString(Pattern::compile);\n    public static final ValueSyntax<Integer> INTEGER = ValueSyntax.withDefaultToString(preTrim(Integer::valueOf));\n    public static final ValueSyntax<Long> LONG = ValueSyntax.withDefaultToString(preTrim(Long::valueOf));\n    public static final ValueSyntax<Boolean> BOOLEAN = ValueSyntax.withDefaultToString(preTrim(Boolean::valueOf));\n    public static final ValueSyntax<Double> DOUBLE = ValueSyntax.withDefaultToString(preTrim(Double::valueOf));\n\n\n    public static final PropertySerializer<List<Integer>> INTEGER_LIST = numberList(INTEGER);\n    public static final PropertySerializer<List<Double>> DOUBLE_LIST = numberList(DOUBLE);\n    public static final PropertySerializer<List<Long>> LONG_LIST = numberList(LONG);\n\n    public static final PropertySerializer<List<Character>> CHAR_LIST = otherList(CHARACTER);\n    public static final PropertySerializer<List<String>> STRING_LIST = otherList(STRING);\n\n    private PropertyParsingUtil() {\n\n    }\n\n\n    private static <T extends Number> PropertySerializer<List<T>> numberList(ValueSyntax<T> valueSyntax) {\n        return delimitedString(valueSyntax, Collectors.toList());\n    }\n\n    private static <T> PropertySerializer<List<T>> otherList(ValueSyntax<T> valueSyntax) {\n        return delimitedString(valueSyntax, Collectors.toList() /* prefer old syntax for now */);\n    }\n\n    private static <T> Function<String, ? extends T> preTrim(Function<? super String, ? extends T> parser) {\n        return parser.compose(String::trim);\n    }\n\n    public static <T> PropertySerializer<Optional<T>> toOptional(PropertySerializer<T> itemSyntax, String missingValue) {\n        return ValueSyntax.create(\n            opt -> opt.map(itemSyntax::toString).orElse(missingValue),\n            str -> {\n                if (str.equals(missingValue)) {\n                    return Optional.empty();\n                }\n                return Optional.of(itemSyntax.fromString(str));\n            }\n        );\n    }\n\n\n    /**\n     * Checks the result of the constraints defined by this mapper on\n     * the given element. Returns all failures as a list of strings.\n     */\n    public static <T> void checkConstraintsThrow(T t, List<? extends PropertyConstraint<? super T>> constraints) {", "right_context": "}\n\n    public static <T> PropertySerializer<T> withAllConstraints(PropertySerializer<T> mapper, List<PropertyConstraint<? super T>> constraints) {\n        PropertySerializer<T> result = mapper;\n        for (PropertyConstraint<? super T> constraint : constraints) {\n            result = result.withConstraint(constraint);\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds an XML syntax that understands delimited {@code <value>} syntax.\n     *\n     * @param <T>        Type of items\n     * @param <C>        Type of collection to handle\n     * @param itemSyntax Serializer for the items, must support string mapping\n     * @param collector  Collector to create the collection from strings\n     *\n     * @throws IllegalArgumentException If the item syntax doesn't support string mapping\n     */\n    public static <T, C extends Iterable<T>> PropertySerializer<C> delimitedString(PropertySerializer<T> itemSyntax,\n                                                                                   Collector<? super T, ?, ? extends C> collector) {\n        String delim = \"\" + PropertyFactory.DEFAULT_DELIMITER;\n        return ValueSyntax.create(\n            coll -> IteratorUtil.toStream(coll.iterator()).map(itemSyntax::toString).collect(Collectors.joining(delim)),\n            string -> parseListWithEscapes(string, PropertyFactory.DEFAULT_DELIMITER, itemSyntax::fromString).stream().collect(collector)\n        );\n    }\n\n    private static final char ESCAPE_CHAR = '\\\\';\n\n    /**\n     * Parse a list delimited with the given delimiter, converting individual\n     * values to type {@code <U>} with the given extractor. Any character is\n     * escaped with a backslash. This is useful to escape the delimiter, and\n     * to escape the backslash. For example:\n     * <pre>{@code\n     *\n     * \"a,c\"  -> [ \"a\", \"c\" ]\n     * \"a\\,c\" -> [ \"a,c\" ]\n     * \"a\\c\"  -> [ \"ac\" ]\n     * \"a\\\\c\" -> [ \"a\\c\" ]\n     * \"a\\\"   -> [ \"a\\\"  ]   (a backslash at the end of the string is just a backslash)\n     *\n     * }</pre>\n     */\n    public static <U> List<U> parseListWithEscapes(String str, char delimiter, Function<? super String, ? extends U> extractor) {\n        if (str.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<U> result = new ArrayList<>();\n        StringBuilder currentToken = new StringBuilder();\n        boolean inEscapeMode = false;\n\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n\n            if (inEscapeMode) {\n                inEscapeMode = false;\n                currentToken.append(c);\n            } else if (c == delimiter) {\n                result.add(extractor.apply(currentToken.toString()));\n                currentToken = new StringBuilder();\n            } else if (c == ESCAPE_CHAR && i < str.length() - 1) {\n                // this is ordered this way so that if the delimiter is\n                // itself a backslash, no escapes are processed.\n                inEscapeMode = true;\n            } else {\n                currentToken.append(c);\n            }\n        }\n\n        if (currentToken.length() > 0) {\n            result.add(extractor.apply(currentToken.toString()));\n        }\n        return result;\n    }\n\n\n    public static <T> ValueSyntax<T> enumerationParser(final Map<String, T> mappings, Function<? super T, String> reverseFun) {\n\n        if (mappings.containsValue(null)) {\n            throw new IllegalArgumentException(\"Map may not contain entries with null values\");\n        }\n\n        return ValueSyntax.partialFunction(\n            reverseFun,\n            mappings::get,\n            PropertyConstraint.fromPredicate(\n                mappings::containsKey,\n                \"Should be \" + XmlUtil.formatPossibleNames(XmlUtil.toConstants(mappings.keySet()))\n            )\n        );\n    }\n}", "class_name": "PropertyParsingUtil", "return_type": "void", "parameters": [{"type": "T", "name": "t"}, {"type": "List<? extends PropertyConstraint<? super T>>", "name": "constraints"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Builder<K, V> {\n\n        private final MapMaker<K> mapMaker;\n        private @Nullable Map<K, Object> map;\n        private boolean consumed;\n        /** True unless some entry has a list of values. */\n        private boolean isSingular = true;\n\n        private Builder(MapMaker<K> mapMaker) {\n            this.mapMaker = mapMaker;\n        }\n\n        private Map<K, Object> getMapInternal() {\n            if (map == null) {\n                map = mapMaker.copy(Collections.emptyMap());\n                Validate.isTrue(map.isEmpty(), \"Map should be empty\");\n            }\n            return map;\n        }\n\n\n        public void replaceValue(K key, V v) {\n            checkKeyValue(key, v);\n            getMapInternal().put(key, v);\n        }\n\n        public void addUnlessKeyExists(K key, V v) {\n            checkKeyValue(key, v);\n            getMapInternal().putIfAbsent(key, v);\n        }\n\n        public void appendValue(K key, V v) {\n            appendValue(key, v, false);\n        }\n\n        public void appendValue(K key, V v, boolean noDuplicate) {<FILL_FUNCTION_BODY>}\n\n        private void checkKeyValue(K key, V v) {\n            ensureOpen();\n            AssertionUtil.requireParamNotNull(\"value\", v);\n            AssertionUtil.requireParamNotNull(\"key\", key);\n        }\n\n        public Builder<K, V> groupBy(Iterable<? extends V> values,\n                                     Function<? super V, ? extends K> keyExtractor) {\n            ensureOpen();\n            return groupBy(values, keyExtractor, Function.identity());\n        }\n\n\n        public <I> Builder<K, V> groupBy(Iterable<? extends I> values,\n                                         Function<? super I, ? extends K> keyExtractor,\n                                         Function<? super I, ? extends V> valueExtractor) {\n            ensureOpen();\n            for (I i : values) {\n                appendValue(keyExtractor.apply(i), valueExtractor.apply(i));\n            }\n            return this;\n        }\n\n        // no duplicates\n        public Builder<K, V> absorb(Builder<K, V> other) {\n            ensureOpen();\n            other.ensureOpen();\n\n            if (this.map == null) {\n                this.map = other.map;\n                this.isSingular = other.isSingular;\n            } else {\n                // isSingular may be changed in the loop by appendSingle\n                this.isSingular &= other.isSingular;\n\n                for (Entry<K, Object> otherEntry : other.getMapInternal().entrySet()) {\n                    K key = otherEntry.getKey();\n                    Object otherV = otherEntry.getValue();\n                    map.compute(key, (k, myV) -> {\n                        if (myV == null) {\n                            return otherV;\n                        } else if (otherV instanceof VList) {\n                            Object newV = myV;\n                            for (V v : (VList<V>) otherV) {\n                                newV = appendSingle(newV, v, true);\n                            }\n                            return newV;\n                        } else {\n                            return appendSingle(myV, (V) otherV, true);\n                        }\n                    });\n                }\n            }\n\n            other.consume();\n            return this;\n        }\n\n        private Object appendSingle(@Nullable Object vs, V v, boolean noDuplicate) {\n            if (vs == null) {\n                return v;\n            } else if (vs instanceof VList) {\n                if (noDuplicate && ((VList) vs).contains(v)) {\n                    return vs;\n                }\n                ((VList) vs).add(v);\n                return vs;\n            } else {\n                if (noDuplicate && vs.equals(v)) {\n                    return vs;\n                }\n                List<V> vs2 = new VList<>(2);\n                isSingular = false;\n                vs2.add((V) vs);\n                vs2.add(v);\n                return vs2;\n            }\n        }\n\n        public MostlySingularMultimap<K, V> build() {\n            consume();\n            return isEmpty() ? empty() : new MostlySingularMultimap<>(getMapInternal());\n        }\n\n        public @Nullable Map<K, V> buildAsSingular() {\n            consume();\n            if (!isSingular) {\n                return null; // NOPMD: returning null as in the spec (Nullable)\n            }\n            return (Map<K, V>) map;\n        }\n\n\n        private void consume() {\n            ensureOpen();\n            consumed = true;\n        }\n\n        private void ensureOpen() {\n            Validate.isTrue(!consumed, \"Builder was already consumed\");\n        }\n\n        public boolean isSingular() {\n            return isSingular;\n        }\n\n        public Map<K, List<V>> getMutableMap() {\n            Map<K, List<V>> mutable = mapMaker.copy(Collections.emptyMap());\n            for (Entry<K, Object> entry : getMapInternal().entrySet()) {\n                mutable.put(entry.getKey(), interpretValue(entry.getValue()));\n            }\n            return mutable;\n        }\n\n        public boolean isEmpty() {\n            return map == null || map.isEmpty();\n        }\n\n    }", "metadata": {"task_id": "pmd_pmd/413", "ground_truth": "\n            checkKeyValue(key, v);\n\n            getMapInternal().compute(key, (k, oldV) -> {\n                return appendSingle(oldV, v, noDuplicate);\n            });\n        ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-java", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "java", "symbols", "table", "coreimpl", "MostlySingularMultimap.java"], "context_start_lineno": 0, "function_name": "appendValue", "left_context": "class Builder<K, V> {\n\n        private final MapMaker<K> mapMaker;\n        private @Nullable Map<K, Object> map;\n        private boolean consumed;\n        /** True unless some entry has a list of values. */\n        private boolean isSingular = true;\n\n        private Builder(MapMaker<K> mapMaker) {\n            this.mapMaker = mapMaker;\n        }\n\n        private Map<K, Object> getMapInternal() {\n            if (map == null) {\n                map = mapMaker.copy(Collections.emptyMap());\n                Validate.isTrue(map.isEmpty(), \"Map should be empty\");\n            }\n            return map;\n        }\n\n\n        public void replaceValue(K key, V v) {\n            checkKeyValue(key, v);\n            getMapInternal().put(key, v);\n        }\n\n        public void addUnlessKeyExists(K key, V v) {\n            checkKeyValue(key, v);\n            getMapInternal().putIfAbsent(key, v);\n        }\n\n        public void appendValue(K key, V v) {\n            appendValue(key, v, false);\n        }\n\n        public void appendValue(K key, V v, boolean noDuplicate) {", "right_context": "}\n\n        private void checkKeyValue(K key, V v) {\n            ensureOpen();\n            AssertionUtil.requireParamNotNull(\"value\", v);\n            AssertionUtil.requireParamNotNull(\"key\", key);\n        }\n\n        public Builder<K, V> groupBy(Iterable<? extends V> values,\n                                     Function<? super V, ? extends K> keyExtractor) {\n            ensureOpen();\n            return groupBy(values, keyExtractor, Function.identity());\n        }\n\n\n        public <I> Builder<K, V> groupBy(Iterable<? extends I> values,\n                                         Function<? super I, ? extends K> keyExtractor,\n                                         Function<? super I, ? extends V> valueExtractor) {\n            ensureOpen();\n            for (I i : values) {\n                appendValue(keyExtractor.apply(i), valueExtractor.apply(i));\n            }\n            return this;\n        }\n\n        // no duplicates\n        public Builder<K, V> absorb(Builder<K, V> other) {\n            ensureOpen();\n            other.ensureOpen();\n\n            if (this.map == null) {\n                this.map = other.map;\n                this.isSingular = other.isSingular;\n            } else {\n                // isSingular may be changed in the loop by appendSingle\n                this.isSingular &= other.isSingular;\n\n                for (Entry<K, Object> otherEntry : other.getMapInternal().entrySet()) {\n                    K key = otherEntry.getKey();\n                    Object otherV = otherEntry.getValue();\n                    map.compute(key, (k, myV) -> {\n                        if (myV == null) {\n                            return otherV;\n                        } else if (otherV instanceof VList) {\n                            Object newV = myV;\n                            for (V v : (VList<V>) otherV) {\n                                newV = appendSingle(newV, v, true);\n                            }\n                            return newV;\n                        } else {\n                            return appendSingle(myV, (V) otherV, true);\n                        }\n                    });\n                }\n            }\n\n            other.consume();\n            return this;\n        }\n\n        private Object appendSingle(@Nullable Object vs, V v, boolean noDuplicate) {\n            if (vs == null) {\n                return v;\n            } else if (vs instanceof VList) {\n                if (noDuplicate && ((VList) vs).contains(v)) {\n                    return vs;\n                }\n                ((VList) vs).add(v);\n                return vs;\n            } else {\n                if (noDuplicate && vs.equals(v)) {\n                    return vs;\n                }\n                List<V> vs2 = new VList<>(2);\n                isSingular = false;\n                vs2.add((V) vs);\n                vs2.add(v);\n                return vs2;\n            }\n        }\n\n        public MostlySingularMultimap<K, V> build() {\n            consume();\n            return isEmpty() ? empty() : new MostlySingularMultimap<>(getMapInternal());\n        }\n\n        public @Nullable Map<K, V> buildAsSingular() {\n            consume();\n            if (!isSingular) {\n                return null; // NOPMD: returning null as in the spec (Nullable)\n            }\n            return (Map<K, V>) map;\n        }\n\n\n        private void consume() {\n            ensureOpen();\n            consumed = true;\n        }\n\n        private void ensureOpen() {\n            Validate.isTrue(!consumed, \"Builder was already consumed\");\n        }\n\n        public boolean isSingular() {\n            return isSingular;\n        }\n\n        public Map<K, List<V>> getMutableMap() {\n            Map<K, List<V>> mutable = mapMaker.copy(Collections.emptyMap());\n            for (Entry<K, Object> entry : getMapInternal().entrySet()) {\n                mutable.put(entry.getKey(), interpretValue(entry.getValue()));\n            }\n            return mutable;\n        }\n\n        public boolean isEmpty() {\n            return map == null || map.isEmpty();\n        }\n\n    }", "class_name": "Builder", "return_type": "void", "parameters": [{"type": "K", "name": "key"}, {"type": "V", "name": "v"}, {"type": "boolean", "name": "noDuplicate"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-ant/src/main/java/net/sourceforge/pmd/ant/internal/Slf4jSimpleConfigurationForAnt.java\n// --------------------------------------------------\n// @SuppressWarnings(\"PMD.CloseResource\") public static Level reconfigureLoggingForAnt(Project antProject){\n//   if (!Slf4jSimpleConfiguration.isSimpleLogger()) {\n//     return DEFAULT_LEVEL;\n//   }\n//   PrintStream original=System.err;\n//   try {\n//     System.setErr(new SimpleLoggerToAntBridge(antProject,original));\n//     System.setProperty(\"org.slf4j.simpleLogger.showDateTime\",\"false\");\n//     System.setProperty(\"org.slf4j.simpleLogger.showThreadName\",\"false\");\n//     System.setProperty(\"org.slf4j.simpleLogger.showThreadId\",\"false\");\n//     System.setProperty(\"org.slf4j.simpleLogger.levelInBrackets\",\"false\");\n//     System.setProperty(\"org.slf4j.simpleLogger.cacheOutputStream\",\"true\");\n//     System.setProperty(\"org.slf4j.simpleLogger.logFile\",\"System.err\");\n//     Level level=getAntLogLevel(antProject);\n//     Slf4jSimpleConfiguration.reconfigureDefaultLogLevel(level);\n//     return level;\n//   }\n//   finally {\n//     System.setErr(original);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-ant/src/main/java/net/sourceforge/pmd/ant/internal/Slf4jSimpleConfigurationForAnt.java\n// --------------------------------------------------\n// @SuppressWarnings(\"PMD.AvoidAccessibilityAlteration\") private static Level determineGradleLogLevel(Project project,BuildListener l){\n//   try {\n//     project.log(\"Detected gradle AntLoggingAdapter\",Project.MSG_DEBUG);\n//     Field loggerField=l.getClass().getDeclaredField(\"logger\");\n//     loggerField.setAccessible(true);\n//     Object logger=loggerField.get(l);\n//     Class<?> gradleLogLevel=l.getClass().getClassLoader().loadClass(\"org.gradle.api.logging.LogLevel\");\n//     Method isLevelAtMostMethod=logger.getClass().getDeclaredMethod(\"isLevelAtMost\",gradleLogLevel);\n//     isLevelAtMostMethod.setAccessible(true);\n//     Object[] logLevels=gradleLogLevel.getEnumConstants();\n//     Level[] mapping=new Level[]{Level.TRACE,Level.DEBUG,Level.INFO,Level.WARN,Level.ERROR,Level.ERROR};\n//     for (int i=0; i < Math.min(logLevels.length,mapping.length); i++) {\n//       boolean enabled=(boolean)isLevelAtMostMethod.invoke(logger,logLevels[i]);\n//       if (enabled) {\n//         project.log(\"Current log level: \" + logLevels[i] + \" -> \"+ mapping[i],Project.MSG_DEBUG);\n//         return mapping[i];\n//       }\n//     }\n//   }\n//  catch (  ReflectiveOperationException ignored) {\n//   }\n//   project.log(\"Could not determine log level, falling back to default: \" + DEFAULT_LEVEL,Project.MSG_WARN);\n//   return DEFAULT_LEVEL;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-ant/src/main/java/net/sourceforge/pmd/ant/internal/Slf4jSimpleConfigurationForAnt.java\n// --------------------------------------------------\n// @SuppressWarnings(\"PMD.AvoidAccessibilityAlteration\") private static Level getAntLogLevel(Project project){\n//   for (  final BuildListener l : project.getBuildListeners()) {\n//     Field declaredField=null;\n//     try {\n//       if (l instanceof DefaultLogger) {\n//         declaredField=DefaultLogger.class.getDeclaredField(\"msgOutputLevel\");\n//       }\n//  else       if (l instanceof XmlLogger) {\n//         declaredField=XmlLogger.class.getDeclaredField(\"msgOutputLevel\");\n//       }\n//  else       if (l instanceof RecorderEntry) {\n//         declaredField=RecorderEntry.class.getDeclaredField(\"loglevel\");\n//       }\n//  else       if (\"org.gradle.api.internal.project.ant.AntLoggingAdapter\".equals(l.getClass().getName())) {\n//         return determineGradleLogLevel(project,l);\n//       }\n//  else {\n//         try {\n//           declaredField=l.getClass().getDeclaredField(\"logLevel\");\n//           if (declaredField.getType() != Integer.class && declaredField.getType() != int.class) {\n//             declaredField=null;\n//             project.log(\"Unsupported build listener: \" + l.getClass(),Project.MSG_DEBUG);\n//           }\n//         }\n//  catch (        final NoSuchFieldException e) {\n//           project.log(\"Unsupported build listener: \" + l.getClass(),Project.MSG_DEBUG);\n//         }\n//       }\n//       if (declaredField != null) {\n//         declaredField.setAccessible(true);\n//         return LOG_LEVELS[declaredField.getInt(l)];\n//       }\n//     }\n//  catch (    final ReflectiveOperationException ignored) {\n//     }\n//   }\n//   project.log(\"Could not determine ant log level, no supported build listeners found. \" + \"Log level is set to \" + DEFAULT_LEVEL,Project.MSG_WARN);\n//   return DEFAULT_LEVEL;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Slf4jSimpleConfiguration {\n    private static final String SIMPLE_LOGGER_FACTORY_CLASS = \"org.slf4j.impl.SimpleLoggerFactory\";\n    private static final String SIMPLE_LOGGER_CLASS = \"org.slf4j.impl.SimpleLogger\";\n    private static final String SIMPLE_LOGGER_CONFIGURATION = \"org.slf4j.impl.SimpleLoggerConfiguration\";\n    private static final String PMD_ROOT_LOGGER = \"net.sourceforge.pmd\";\n\n    private Slf4jSimpleConfiguration() { }\n\n    public static void reconfigureDefaultLogLevel(Level level) {\n        if (!isSimpleLogger()) {\n            // do nothing, not even set system properties, if not Simple Logger is in use\n            return;\n        }\n\n        if (level != null) {\n            System.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", level.toString());\n        }\n\n        // Call SimpleLogger.init() by reflection.\n        // Alternatively: move the CLI related classes into an own module, add\n        // slf4j-simple as a compile dependency and create a PmdSlf4jSimpleFriend class in\n        // the package org.slf4j.simple to gain access to this package-private init method.\n        //\n        // SimpleLogger.init() will reevaluate the configuration from the system properties or\n        // simplelogger.properties file.\n        ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();\n        ClassLoader classLoader = loggerFactory.getClass().getClassLoader();\n        try {\n            Class<?> simpleLoggerClass = classLoader.loadClass(SIMPLE_LOGGER_CLASS);\n            Method initMethod = simpleLoggerClass.getDeclaredMethod(\"init\");\n            initMethod.setAccessible(true);\n            initMethod.invoke(null);\n\n            int newDefaultLogLevel = getDefaultLogLevelInt(simpleLoggerClass);\n\n            Field currentLogLevelField = simpleLoggerClass.getDeclaredField(\"currentLogLevel\");\n            currentLogLevelField.setAccessible(true);\n\n            Method levelStringMethod = simpleLoggerClass.getDeclaredMethod(\"recursivelyComputeLevelString\");\n            levelStringMethod.setAccessible(true);\n\n            Method stringToLevelMethod = classLoader.loadClass(SIMPLE_LOGGER_CONFIGURATION)\n                    .getDeclaredMethod(\"stringToLevel\", String.class);\n            stringToLevelMethod.setAccessible(true);\n\n            // Change the logging level of loggers that were already created.\n            // For this we fetch the map of name to logger that is stored in the logger factory,\n            // then set the log level field of each logger via reflection.\n            // The new log level is determined similar to the constructor of SimpleLogger, that\n            // means, configuration params are being considered.\n            Class<?> loggerFactoryClass = classLoader.loadClass(SIMPLE_LOGGER_FACTORY_CLASS);\n            Field loggerMapField = loggerFactoryClass.getDeclaredField(\"loggerMap\");\n            loggerMapField.setAccessible(true);\n            // we checked previously, that loggerFactory instanceof SimpleLoggerFactory\n            // see #isSimpleLogger()\n            @SuppressWarnings(\"unchecked\")\n            Map<String, Logger> loggerMap = (Map<String, Logger>) loggerMapField.get(loggerFactory);\n            for (Logger logger : loggerMap.values()) {\n                if (logger.getName().startsWith(PMD_ROOT_LOGGER)\n                    && simpleLoggerClass.isAssignableFrom(logger.getClass())) {\n                    String newConfiguredLevel = (String) levelStringMethod.invoke(logger);\n                    int newLogLevel = newDefaultLogLevel;\n                    if (newConfiguredLevel != null) {\n                        newLogLevel = (int) stringToLevelMethod.invoke(null, newConfiguredLevel);\n                    }\n                    currentLogLevelField.set(logger, newLogLevel);\n                }\n            }\n        } catch (ReflectiveOperationException | ClassCastException ex) {\n            System.err.println(\"Error while initializing logging: \" + ex);\n        }\n    }\n\n    private static int getDefaultLogLevelInt(Class<?> simpleLoggerClass) throws ReflectiveOperationException {\n        Field configParamsField = simpleLoggerClass.getDeclaredField(\"CONFIG_PARAMS\");\n        configParamsField.setAccessible(true);\n        Object configParams = configParamsField.get(null);\n        Field defaultLogLevelField = configParams.getClass().getDeclaredField(\"defaultLogLevel\");\n        defaultLogLevelField.setAccessible(true);\n        return (int) defaultLogLevelField.get(configParams);\n    }\n\n    public static Level getDefaultLogLevel() {<FILL_FUNCTION_BODY>}\n\n    public static void disableLogging(Class<?> clazz) {\n        if (!isSimpleLogger()) {\n            // do nothing, not even set system properties, if not Simple Logger is in use\n            return;\n        }\n\n        System.setProperty(\"org.slf4j.simpleLogger.log.\" + clazz.getName(), \"off\");\n    }\n\n    public static boolean isSimpleLogger() {\n        try {\n            ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();\n            Class<?> loggerFactoryClass = loggerFactory.getClass().getClassLoader().loadClass(SIMPLE_LOGGER_FACTORY_CLASS);\n            return loggerFactoryClass.isAssignableFrom(loggerFactory.getClass());\n        } catch (ClassNotFoundException e) {\n            // not slf4j simple logger\n            return false;\n        }\n    }\n\n    public static void installJulBridge() {\n        if (!SLF4JBridgeHandler.isInstalled()) {\n            SLF4JBridgeHandler.removeHandlersForRootLogger(); // removes any existing ConsoleLogger\n            SLF4JBridgeHandler.install();\n        }\n    }\n}", "metadata": {"task_id": "pmd_pmd/442", "ground_truth": "\n        Logger rootLogger = LoggerFactory.getLogger(PMD_ROOT_LOGGER);\n\n        // check the lowest log level first\n        if (rootLogger.isTraceEnabled()) {\n            return Level.TRACE;\n        }\n        if (rootLogger.isDebugEnabled()) {\n            return Level.DEBUG;\n        }\n        if (rootLogger.isInfoEnabled()) {\n            return Level.INFO;\n        }\n        if (rootLogger.isWarnEnabled()) {\n            return Level.WARN;\n        }\n        if (rootLogger.isErrorEnabled()) {\n            return Level.ERROR;\n        }\n\n        return Level.INFO;\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "internal", "Slf4jSimpleConfiguration.java"], "context_start_lineno": 0, "function_name": "getDefaultLogLevel", "left_context": "class Slf4jSimpleConfiguration {\n    private static final String SIMPLE_LOGGER_FACTORY_CLASS = \"org.slf4j.impl.SimpleLoggerFactory\";\n    private static final String SIMPLE_LOGGER_CLASS = \"org.slf4j.impl.SimpleLogger\";\n    private static final String SIMPLE_LOGGER_CONFIGURATION = \"org.slf4j.impl.SimpleLoggerConfiguration\";\n    private static final String PMD_ROOT_LOGGER = \"net.sourceforge.pmd\";\n\n    private Slf4jSimpleConfiguration() { }\n\n    public static void reconfigureDefaultLogLevel(Level level) {\n        if (!isSimpleLogger()) {\n            // do nothing, not even set system properties, if not Simple Logger is in use\n            return;\n        }\n\n        if (level != null) {\n            System.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", level.toString());\n        }\n\n        // Call SimpleLogger.init() by reflection.\n        // Alternatively: move the CLI related classes into an own module, add\n        // slf4j-simple as a compile dependency and create a PmdSlf4jSimpleFriend class in\n        // the package org.slf4j.simple to gain access to this package-private init method.\n        //\n        // SimpleLogger.init() will reevaluate the configuration from the system properties or\n        // simplelogger.properties file.\n        ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();\n        ClassLoader classLoader = loggerFactory.getClass().getClassLoader();\n        try {\n            Class<?> simpleLoggerClass = classLoader.loadClass(SIMPLE_LOGGER_CLASS);\n            Method initMethod = simpleLoggerClass.getDeclaredMethod(\"init\");\n            initMethod.setAccessible(true);\n            initMethod.invoke(null);\n\n            int newDefaultLogLevel = getDefaultLogLevelInt(simpleLoggerClass);\n\n            Field currentLogLevelField = simpleLoggerClass.getDeclaredField(\"currentLogLevel\");\n            currentLogLevelField.setAccessible(true);\n\n            Method levelStringMethod = simpleLoggerClass.getDeclaredMethod(\"recursivelyComputeLevelString\");\n            levelStringMethod.setAccessible(true);\n\n            Method stringToLevelMethod = classLoader.loadClass(SIMPLE_LOGGER_CONFIGURATION)\n                    .getDeclaredMethod(\"stringToLevel\", String.class);\n            stringToLevelMethod.setAccessible(true);\n\n            // Change the logging level of loggers that were already created.\n            // For this we fetch the map of name to logger that is stored in the logger factory,\n            // then set the log level field of each logger via reflection.\n            // The new log level is determined similar to the constructor of SimpleLogger, that\n            // means, configuration params are being considered.\n            Class<?> loggerFactoryClass = classLoader.loadClass(SIMPLE_LOGGER_FACTORY_CLASS);\n            Field loggerMapField = loggerFactoryClass.getDeclaredField(\"loggerMap\");\n            loggerMapField.setAccessible(true);\n            // we checked previously, that loggerFactory instanceof SimpleLoggerFactory\n            // see #isSimpleLogger()\n            @SuppressWarnings(\"unchecked\")\n            Map<String, Logger> loggerMap = (Map<String, Logger>) loggerMapField.get(loggerFactory);\n            for (Logger logger : loggerMap.values()) {\n                if (logger.getName().startsWith(PMD_ROOT_LOGGER)\n                    && simpleLoggerClass.isAssignableFrom(logger.getClass())) {\n                    String newConfiguredLevel = (String) levelStringMethod.invoke(logger);\n                    int newLogLevel = newDefaultLogLevel;\n                    if (newConfiguredLevel != null) {\n                        newLogLevel = (int) stringToLevelMethod.invoke(null, newConfiguredLevel);\n                    }\n                    currentLogLevelField.set(logger, newLogLevel);\n                }\n            }\n        } catch (ReflectiveOperationException | ClassCastException ex) {\n            System.err.println(\"Error while initializing logging: \" + ex);\n        }\n    }\n\n    private static int getDefaultLogLevelInt(Class<?> simpleLoggerClass) throws ReflectiveOperationException {\n        Field configParamsField = simpleLoggerClass.getDeclaredField(\"CONFIG_PARAMS\");\n        configParamsField.setAccessible(true);\n        Object configParams = configParamsField.get(null);\n        Field defaultLogLevelField = configParams.getClass().getDeclaredField(\"defaultLogLevel\");\n        defaultLogLevelField.setAccessible(true);\n        return (int) defaultLogLevelField.get(configParams);\n    }\n\n    public static Level getDefaultLogLevel() {", "right_context": "}\n\n    public static void disableLogging(Class<?> clazz) {\n        if (!isSimpleLogger()) {\n            // do nothing, not even set system properties, if not Simple Logger is in use\n            return;\n        }\n\n        System.setProperty(\"org.slf4j.simpleLogger.log.\" + clazz.getName(), \"off\");\n    }\n\n    public static boolean isSimpleLogger() {\n        try {\n            ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();\n            Class<?> loggerFactoryClass = loggerFactory.getClass().getClassLoader().loadClass(SIMPLE_LOGGER_FACTORY_CLASS);\n            return loggerFactoryClass.isAssignableFrom(loggerFactory.getClass());\n        } catch (ClassNotFoundException e) {\n            // not slf4j simple logger\n            return false;\n        }\n    }\n\n    public static void installJulBridge() {\n        if (!SLF4JBridgeHandler.isInstalled()) {\n            SLF4JBridgeHandler.removeHandlersForRootLogger(); // removes any existing ConsoleLogger\n            SLF4JBridgeHandler.install();\n        }\n    }\n}", "class_name": "Slf4jSimpleConfiguration", "return_type": "Level", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractIncrementingRenderer extends AbstractRenderer {\n\n    /**\n     * Accumulated processing errors.\n     */\n    protected List<Report.ProcessingError> errors = new LinkedList<>();\n\n    /**\n     * Accumulated configuration errors.\n     */\n    protected List<Report.ConfigurationError> configErrors = new LinkedList<>();\n\n    /**\n     * Accumulated suppressed violations.\n     */\n    protected List<Report.SuppressedViolation> suppressed = new LinkedList<>();\n\n    public AbstractIncrementingRenderer(String name, String description) {\n        super(name, description);\n    }\n\n    @Override\n    public void start() throws IOException {\n        // does nothing - override if necessary\n    }\n\n    @Override\n    public void startFileAnalysis(TextFile dataSource) {\n        // does nothing - override if necessary\n    }\n\n    @Override\n    public void renderFileReport(Report report) throws IOException {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Render a series of {@link RuleViolation}s.\n     *\n     * @param violations\n     *            The iterator of violations to render.\n     * @throws IOException\n     */\n    public abstract void renderFileViolations(Iterator<RuleViolation> violations) throws IOException;\n\n    @Override\n    public void end() throws IOException {\n        // does nothing - override if necessary\n    }\n}", "metadata": {"task_id": "pmd_pmd/446", "ground_truth": "\n        Iterator<RuleViolation> violations = report.getViolations().iterator();\n        if (violations.hasNext()) {\n            renderFileViolations(violations);\n            getWriter().flush();\n        }\n\n        errors.addAll(report.getProcessingErrors());\n\n        configErrors.addAll(report.getConfigurationErrors());\n\n        if (showSuppressedViolations) {\n            suppressed.addAll(report.getSuppressedViolations());\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "renderers", "AbstractIncrementingRenderer.java"], "context_start_lineno": 0, "function_name": "renderFileReport", "left_context": "class AbstractIncrementingRenderer extends AbstractRenderer {\n\n    /**\n     * Accumulated processing errors.\n     */\n    protected List<Report.ProcessingError> errors = new LinkedList<>();\n\n    /**\n     * Accumulated configuration errors.\n     */\n    protected List<Report.ConfigurationError> configErrors = new LinkedList<>();\n\n    /**\n     * Accumulated suppressed violations.\n     */\n    protected List<Report.SuppressedViolation> suppressed = new LinkedList<>();\n\n    public AbstractIncrementingRenderer(String name, String description) {\n        super(name, description);\n    }\n\n    @Override\n    public void start() throws IOException {\n        // does nothing - override if necessary\n    }\n\n    @Override\n    public void startFileAnalysis(TextFile dataSource) {\n        // does nothing - override if necessary\n    }\n\n    @Override\n    public void renderFileReport(Report report) throws IOException {", "right_context": "}\n\n    /**\n     * Render a series of {@link RuleViolation}s.\n     *\n     * @param violations\n     *            The iterator of violations to render.\n     * @throws IOException\n     */\n    public abstract void renderFileViolations(Iterator<RuleViolation> violations) throws IOException;\n\n    @Override\n    public void end() throws IOException {\n        // does nothing - override if necessary\n    }\n}", "class_name": "AbstractIncrementingRenderer", "return_type": "void", "parameters": [{"type": "Report", "name": "report"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OrFilter<T> extends AbstractCompoundFilter<T> {\n\n    public OrFilter() {\n        super();\n    }\n\n    public OrFilter(Filter<T>... filters) {\n        super(filters);\n    }\n\n    @Override\n    public boolean filter(T obj) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    protected String getOperator() {\n        return \"or\";\n    }\n}", "metadata": {"task_id": "pmd_pmd/456", "ground_truth": "\n        boolean match = false;\n        for (Filter<T> filter : filters) {\n            if (filter.filter(obj)) {\n                match = true;\n                break;\n            }\n        }\n        return match;\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-compat6", "src", "main", "java", "net", "sourceforge", "pmd", "util", "filter", "OrFilter.java"], "context_start_lineno": 0, "function_name": "filter", "left_context": "class OrFilter<T> extends AbstractCompoundFilter<T> {\n\n    public OrFilter() {\n        super();\n    }\n\n    public OrFilter(Filter<T>... filters) {\n        super(filters);\n    }\n\n    @Override\n    public boolean filter(T obj) {", "right_context": "}\n\n    @Override\n    protected String getOperator() {\n        return \"or\";\n    }\n}", "class_name": "OrFilter", "return_type": "boolean", "parameters": [{"type": "T", "name": "obj"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitPlatformCondition(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitOperatingSystem(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitArchitecture(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitSwiftVersion(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitModuleName(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitLineControlStatement(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitLineNumber(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitFileName(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitWarningCompilationStatement(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitIdentifier(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitKeyword(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitContextSensitiveKeyword(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitGrammarString(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitIdentifierList(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitBooleanLiteral(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitLiteral(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitNumericLiteral(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-swift/target/generated-sources/antlr4/net/sourceforge/pmd/lang/swift/ast/SwiftParser.java\n// --------------------------------------------------\n// @Override public <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof SwiftVisitor)   return ((SwiftVisitor<? super P,? extends R>)visitor).visitIntegerLiteral(this,data);\n//  else   return super.acceptVisitor(visitor,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-velocity/src/main/java/net/sourceforge/pmd/lang/velocity/ast/AbstractVtlNode.java\n// --------------------------------------------------\n// @Override @SuppressWarnings(\"unchecked\") public final <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof VtlVisitor) {\n//     return acceptVtlVisitor((VtlVisitor<? super P,? extends R>)visitor,data);\n//   }\n//   return visitor.cannotVisit(this,data);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/visualforce/ast/AbstractVfNode.java\n// --------------------------------------------------\n// @Override @SuppressWarnings(\"unchecked\") public final <P,R>R acceptVisitor(AstVisitor<? super P,? extends R> visitor,P data){\n//   if (visitor instanceof VfVisitor) {\n//     return acceptVfVisitor((VfVisitor<? super P,? extends R>)visitor,data);\n//   }\n//   return visitor.cannotVisit(this,data);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass KotlinInnerNode extends BaseAntlrInnerNode<KotlinNode> implements KotlinNode {\n\n    KotlinInnerNode(ParserRuleContext parent, int invokingStateNumber) {\n        super(parent, invokingStateNumber);\n    }\n\n    @Override\n    public <P, R> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {<FILL_FUNCTION_BODY>}\n\n\n    @Override // override to make visible in package\n    protected PmdAsAntlrInnerNode<KotlinNode> asAntlrNode() {\n        return super.asAntlrNode();\n    }\n\n    @Override\n    public String getXPathNodeName() {\n        return KotlinParser.DICO.getXPathNameOfRule(getRuleIndex());\n    }\n}", "metadata": {"task_id": "pmd_pmd/462", "ground_truth": "\n        if (visitor instanceof KotlinVisitor) {\n            // some of the generated antlr nodes have no accept method...\n            return ((KotlinVisitor<? super P, ? extends R>) visitor).visitKotlinNode(this, data);\n        }\n        return visitor.visitNode(this, data);\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-kotlin", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "kotlin", "ast", "KotlinInnerNode.java"], "context_start_lineno": 0, "function_name": "acceptVisitor", "left_context": "class KotlinInnerNode extends BaseAntlrInnerNode<KotlinNode> implements KotlinNode {\n\n    KotlinInnerNode(ParserRuleContext parent, int invokingStateNumber) {\n        super(parent, invokingStateNumber);\n    }\n\n    @Override\n    public <P, R> R acceptVisitor(AstVisitor<? super P, ? extends R> visitor, P data) {", "right_context": "}\n\n\n    @Override // override to make visible in package\n    protected PmdAsAntlrInnerNode<KotlinNode> asAntlrNode() {\n        return super.asAntlrNode();\n    }\n\n    @Override\n    public String getXPathNodeName() {\n        return KotlinParser.DICO.getXPathNameOfRule(getRuleIndex());\n    }\n}", "class_name": "KotlinInnerNode", "return_type": "R", "parameters": [{"type": "AstVisitor<? super P,? extends R>", "name": "visitor"}, {"type": "P", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BaseFunctionalMirror<N extends FunctionalExpression> extends BasePolyMirror<N> implements FunctionalExprMirror {\n    private JMethodSig inferredMethod;\n\n    BaseFunctionalMirror(JavaExprMirrors mirrors, N myNode, @Nullable ExprMirror parent, MirrorMaker subexprMaker) {\n        super(mirrors, myNode, parent, subexprMaker);\n    }\n\n    @Override\n    public void setFunctionalMethod(JMethodSig methodType) {<FILL_FUNCTION_BODY>}\n\n    protected JMethodSig getInferredMethod() {\n        return inferredMethod;\n    }\n}", "metadata": {"task_id": "pmd_pmd/463", "ground_truth": "\n        this.inferredMethod = methodType;\n        if (mayMutateAst()) {\n            InternalApiBridge.setFunctionalMethod(myNode, methodType);\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-java", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "java", "types", "internal", "infer", "ast", "BaseFunctionalMirror.java"], "context_start_lineno": 0, "function_name": "setFunctionalMethod", "left_context": "class BaseFunctionalMirror<N extends FunctionalExpression> extends BasePolyMirror<N> implements FunctionalExprMirror {\n    private JMethodSig inferredMethod;\n\n    BaseFunctionalMirror(JavaExprMirrors mirrors, N myNode, @Nullable ExprMirror parent, MirrorMaker subexprMaker) {\n        super(mirrors, myNode, parent, subexprMaker);\n    }\n\n    @Override\n    public void setFunctionalMethod(JMethodSig methodType) {", "right_context": "}\n\n    protected JMethodSig getInferredMethod() {\n        return inferredMethod;\n    }\n}", "class_name": "BaseFunctionalMirror", "return_type": "void", "parameters": [{"type": "JMethodSig", "name": "methodType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SimpleRenderer implements CPDReportRenderer {\n\n    private String separator;\n    private boolean trimLeadingWhitespace;\n\n    public static final String DEFAULT_SEPARATOR = \"=====================================================================\";\n\n    public SimpleRenderer() {\n        this(false);\n    }\n\n    public SimpleRenderer(boolean trimLeadingWhitespace) {\n        this(DEFAULT_SEPARATOR);\n        this.trimLeadingWhitespace = trimLeadingWhitespace;\n    }\n\n    public SimpleRenderer(String theSeparator) {\n        separator = theSeparator;\n    }\n\n    @Override\n    public void render(CPDReport report, Writer writer0) throws IOException {\n        PrintWriter writer = new PrintWriter(writer0);\n        Iterator<Match> matches = report.getMatches().iterator();\n        if (matches.hasNext()) {\n            renderOn(report, writer, matches.next());\n        }\n\n        while (matches.hasNext()) {\n            Match match = matches.next();\n            writer.println(separator);\n            renderOn(report, writer, match);\n        }\n        writer.flush();\n    }\n\n    private void renderOn(CPDReport report, PrintWriter writer, Match match) throws IOException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "pmd_pmd/469", "ground_truth": "\n\n        writer.append(\"Found a \").append(String.valueOf(match.getLineCount())).append(\" line (\").append(String.valueOf(match.getTokenCount()))\n              .append(\" tokens) duplication in the following files: \").println();\n\n        for (Mark mark : match) {\n            FileLocation loc = mark.getLocation();\n            writer.append(\"Starting at line \")\n                  .append(String.valueOf(loc.getStartLine()))\n                  .append(\" of \").append(report.getDisplayName(loc.getFileId()))\n                  .println();\n        }\n\n        writer.println(); // add a line to separate the source from the desc above\n\n        Chars source = report.getSourceCodeSlice(match.getFirstMark());\n\n        if (trimLeadingWhitespace) {\n            for (Chars line : StringUtil.linesWithTrimIndent(source)) {\n                line.writeFully(writer);\n                writer.println();\n            }\n            return;\n        }\n\n        source.writeFully(writer);\n        writer.println();\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-core", "src", "main", "java", "net", "sourceforge", "pmd", "cpd", "SimpleRenderer.java"], "context_start_lineno": 0, "function_name": "renderOn", "left_context": "class SimpleRenderer implements CPDReportRenderer {\n\n    private String separator;\n    private boolean trimLeadingWhitespace;\n\n    public static final String DEFAULT_SEPARATOR = \"=====================================================================\";\n\n    public SimpleRenderer() {\n        this(false);\n    }\n\n    public SimpleRenderer(boolean trimLeadingWhitespace) {\n        this(DEFAULT_SEPARATOR);\n        this.trimLeadingWhitespace = trimLeadingWhitespace;\n    }\n\n    public SimpleRenderer(String theSeparator) {\n        separator = theSeparator;\n    }\n\n    @Override\n    public void render(CPDReport report, Writer writer0) throws IOException {\n        PrintWriter writer = new PrintWriter(writer0);\n        Iterator<Match> matches = report.getMatches().iterator();\n        if (matches.hasNext()) {\n            renderOn(report, writer, matches.next());\n        }\n\n        while (matches.hasNext()) {\n            Match match = matches.next();\n            writer.println(separator);\n            renderOn(report, writer, match);\n        }\n        writer.flush();\n    }\n\n    private void renderOn(CPDReport report, PrintWriter writer, Match match) throws IOException {", "right_context": "}\n\n}", "class_name": "SimpleRenderer", "return_type": "void", "parameters": [{"type": "CPDReport", "name": "report"}, {"type": "PrintWriter", "name": "writer"}, {"type": "Match", "name": "match"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/lang/symboltable/AbstractScope.java\n// --------------------------------------------------\n// @Override public Scope getParent(){\n//   return parent;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/lang/symboltable/Scope.java\n// --------------------------------------------------\n// /** \n//  * Retrieves this scope's parent\n//  */\n// Scope getParent();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/lang/symboltable/AbstractNameDeclaration.java\n// --------------------------------------------------\n// @Override public Scope getScope(){\n//   return node.getScope();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/lang/symboltable/NameDeclaration.java\n// --------------------------------------------------\n// /** \n//  * Gets the scope in which this name has been declared.\n//  * @return the scope\n//  */\n// Scope getScope();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-core/src/main/java/net/sourceforge/pmd/lang/symboltable/ScopedNode.java\n// --------------------------------------------------\n// Scope getScope();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-plsql/src/main/java/net/sourceforge/pmd/lang/plsql/ast/AbstractPLSQLNode.java\n// --------------------------------------------------\n// @Override public Scope getScope(){\n//   if (scope == null) {\n//     return getParent().getScope();\n//   }\n//   return scope;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// pmd/pmd-plsql/src/main/java/net/sourceforge/pmd/lang/plsql/ast/PLSQLNode.java\n// --------------------------------------------------\n// @Override Scope getScope();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VariableNameDeclaration extends AbstractNameDeclaration {\n    private static final Logger LOG = LoggerFactory.getLogger(VariableNameDeclaration.class);\n\n    public VariableNameDeclaration(ASTVariableOrConstantDeclaratorId node) {\n        super(node);\n    }\n\n    @Override\n    public Scope getScope() {<FILL_FUNCTION_BODY>}\n\n    public ASTVariableOrConstantDeclaratorId getDeclaratorId() {\n        return (ASTVariableOrConstantDeclaratorId) node;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof VariableNameDeclaration)) {\n            return false;\n        }\n        VariableNameDeclaration n = (VariableNameDeclaration) o;\n        try {\n            return n.getImage().equals(this.getImage());\n        } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n            LOG.debug(\"n.node={}\", n.node);\n            LOG.debug(\"n.getImage={}\", n.getImage());\n            LOG.debug(\"node={}\", node);\n            LOG.debug(\"this.getImage={}\", this.getImage());\n            return false;\n        }\n    }\n\n    @Override\n    public int hashCode() {\n        try {\n            return this.getImage().hashCode();\n        } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n            LOG.debug(\"VariableNameDeclaration: node={}\", node);\n            LOG.debug(\"VariableNameDeclaration: node,getImage={}\", this.getImage());\n            return 0;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"Variable: image = '\" + node.getImage() + \"', line = \" + node.getBeginLine();\n    }\n}", "metadata": {"task_id": "pmd_pmd/475", "ground_truth": "\n        try {\n            return node.getScope().getEnclosingScope(ClassScope.class);\n        } catch (Exception e) {\n            LOG.trace(\"This Node does not have an enclosing Class: {}/{} => {}\",\n                    node.getBeginLine(), node.getBeginColumn(),\n                    this.getImage());\n            return null; // @TODO SRT a cop-out\n        }\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-plsql", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "plsql", "symboltable", "VariableNameDeclaration.java"], "context_start_lineno": 0, "function_name": "getScope", "left_context": "class VariableNameDeclaration extends AbstractNameDeclaration {\n    private static final Logger LOG = LoggerFactory.getLogger(VariableNameDeclaration.class);\n\n    public VariableNameDeclaration(ASTVariableOrConstantDeclaratorId node) {\n        super(node);\n    }\n\n    @Override\n    public Scope getScope() {", "right_context": "}\n\n    public ASTVariableOrConstantDeclaratorId getDeclaratorId() {\n        return (ASTVariableOrConstantDeclaratorId) node;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof VariableNameDeclaration)) {\n            return false;\n        }\n        VariableNameDeclaration n = (VariableNameDeclaration) o;\n        try {\n            return n.getImage().equals(this.getImage());\n        } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n            LOG.debug(\"n.node={}\", n.node);\n            LOG.debug(\"n.getImage={}\", n.getImage());\n            LOG.debug(\"node={}\", node);\n            LOG.debug(\"this.getImage={}\", this.getImage());\n            return false;\n        }\n    }\n\n    @Override\n    public int hashCode() {\n        try {\n            return this.getImage().hashCode();\n        } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n            LOG.debug(\"VariableNameDeclaration: node={}\", node);\n            LOG.debug(\"VariableNameDeclaration: node,getImage={}\", this.getImage());\n            return 0;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"Variable: image = '\" + node.getImage() + \"', line = \" + node.getBeginLine();\n    }\n}", "class_name": "VariableNameDeclaration", "return_type": "Scope", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UnusedMacroParameterRule extends AbstractVtlRule {\n\n    @Override\n    public Object visit(final ASTDirective node, final Object data) {\n        if (\"macro\".equals(node.getDirectiveName())) {\n            final Set<String> paramNames = new HashSet<>();\n            for (final ASTReference param : node.children(ASTReference.class)) {\n                paramNames.add(param.literal());\n            }\n            final ASTBlock macroBlock = node.firstChild(ASTBlock.class);\n            if (macroBlock != null) {\n                for (final ASTReference referenceInMacro : macroBlock.descendants(ASTReference.class)) {\n                    checkForParameter(paramNames, referenceInMacro.literal());\n                }\n                for (final ASTStringLiteral literalInMacro : macroBlock.descendants(ASTStringLiteral.class)) {\n                    final String text = literalInMacro.literal();\n                    checkForParameter(paramNames, text);\n                }\n            }\n            if (!paramNames.isEmpty()) {\n                asCtx(data).addViolation(node, paramNames.toString());\n            }\n        }\n        return super.visit(node, data);\n    }\n\n    private void checkForParameter(final Set<String> paramNames, final String nameToSearch) {\n        final Set<String> paramsContained = new HashSet<>();\n        for (final String param : paramNames) {\n            if (containsAny(nameToSearch, formatNameVariations(param))) {\n                paramsContained.add(param);\n            }\n        }\n        paramNames.removeAll(paramsContained);\n    }\n\n    private boolean containsAny(final String text, final String[] formatNameVariations) {\n        for (final String formattedName : formatNameVariations) {\n            if (text.contains(formattedName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private String[] formatNameVariations(final String param) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "pmd_pmd/490", "ground_truth": "\n        final String actualName = param.substring(1);\n        return new String[] { param, \"${\" + actualName + \"}\", \"${\" + actualName + \".\", \"$!\" + actualName,\n            \"$!{\" + actualName + \".\", \"$!{\" + actualName + \"}\", };\n    ", "fpath_tuple": ["pmd_pmd", "pmd", "pmd-velocity", "src", "main", "java", "net", "sourceforge", "pmd", "lang", "velocity", "rule", "bestpractices", "UnusedMacroParameterRule.java"], "context_start_lineno": 0, "function_name": "formatNameVariations", "left_context": "class UnusedMacroParameterRule extends AbstractVtlRule {\n\n    @Override\n    public Object visit(final ASTDirective node, final Object data) {\n        if (\"macro\".equals(node.getDirectiveName())) {\n            final Set<String> paramNames = new HashSet<>();\n            for (final ASTReference param : node.children(ASTReference.class)) {\n                paramNames.add(param.literal());\n            }\n            final ASTBlock macroBlock = node.firstChild(ASTBlock.class);\n            if (macroBlock != null) {\n                for (final ASTReference referenceInMacro : macroBlock.descendants(ASTReference.class)) {\n                    checkForParameter(paramNames, referenceInMacro.literal());\n                }\n                for (final ASTStringLiteral literalInMacro : macroBlock.descendants(ASTStringLiteral.class)) {\n                    final String text = literalInMacro.literal();\n                    checkForParameter(paramNames, text);\n                }\n            }\n            if (!paramNames.isEmpty()) {\n                asCtx(data).addViolation(node, paramNames.toString());\n            }\n        }\n        return super.visit(node, data);\n    }\n\n    private void checkForParameter(final Set<String> paramNames, final String nameToSearch) {\n        final Set<String> paramsContained = new HashSet<>();\n        for (final String param : paramNames) {\n            if (containsAny(nameToSearch, formatNameVariations(param))) {\n                paramsContained.add(param);\n            }\n        }\n        paramNames.removeAll(paramsContained);\n    }\n\n    private boolean containsAny(final String text, final String[] formatNameVariations) {\n        for (final String formattedName : formatNameVariations) {\n            if (text.contains(formattedName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private String[] formatNameVariations(final String param) {", "right_context": "}\n}", "class_name": "UnusedMacroParameterRule", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ReactiveLoadBalancerClientFilter implements GlobalFilter, Ordered {\n\n\tprivate static final Log log = LogFactory.getLog(ReactiveLoadBalancerClientFilter.class);\n\n\t/**\n\t * Order of filter.\n\t */\n\tpublic static final int LOAD_BALANCER_CLIENT_FILTER_ORDER = 10150;\n\n\tprivate final LoadBalancerClientFactory clientFactory;\n\n\tprivate final GatewayLoadBalancerProperties properties;\n\n\t/**\n\t * @deprecated in favour of\n\t * {@link ReactiveLoadBalancerClientFilter#ReactiveLoadBalancerClientFilter(LoadBalancerClientFactory, GatewayLoadBalancerProperties)}\n\t */\n\t@Deprecated\n\tpublic ReactiveLoadBalancerClientFilter(LoadBalancerClientFactory clientFactory,\n\t\t\tGatewayLoadBalancerProperties properties, LoadBalancerProperties loadBalancerProperties) {\n\t\tthis.clientFactory = clientFactory;\n\t\tthis.properties = properties;\n\t}\n\n\tpublic ReactiveLoadBalancerClientFilter(LoadBalancerClientFactory clientFactory,\n\t\t\tGatewayLoadBalancerProperties properties) {\n\t\tthis.clientFactory = clientFactory;\n\t\tthis.properties = properties;\n\t}\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn LOAD_BALANCER_CLIENT_FILTER_ORDER;\n\t}\n\n\t@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\tURI url = exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);\n\t\tString schemePrefix = exchange.getAttribute(GATEWAY_SCHEME_PREFIX_ATTR);\n\t\tif (url == null || (!\"lb\".equals(url.getScheme()) && !\"lb\".equals(schemePrefix))) {\n\t\t\treturn chain.filter(exchange);\n\t\t}\n\t\t// preserve the original url\n\t\taddOriginalRequestUrl(exchange, url);\n\n\t\tif (log.isTraceEnabled()) {\n\t\t\tlog.trace(ReactiveLoadBalancerClientFilter.class.getSimpleName() + \" url before: \" + url);\n\t\t}\n\n\t\tURI requestUri = exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);\n\t\tString serviceId = requestUri.getHost();\n\t\tSet<LoadBalancerLifecycle> supportedLifecycleProcessors = LoadBalancerLifecycleValidator\n\t\t\t\t.getSupportedLifecycleProcessors(clientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),\n\t\t\t\t\t\tRequestDataContext.class, ResponseData.class, ServiceInstance.class);\n\t\tDefaultRequest<RequestDataContext> lbRequest = new DefaultRequest<>(new RequestDataContext(\n\t\t\t\tnew RequestData(exchange.getRequest(), exchange.getAttributes()), getHint(serviceId)));\n\t\treturn choose(lbRequest, serviceId, supportedLifecycleProcessors).doOnNext(response -> {\n\n\t\t\tif (!response.hasServer()) {\n\t\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<>(CompletionContext.Status.DISCARD, lbRequest, response)));\n\t\t\t\tthrow NotFoundException.create(properties.isUse404(), \"Unable to find instance for \" + url.getHost());\n\t\t\t}\n\n\t\t\tServiceInstance retrievedInstance = response.getServer();\n\n\t\t\tURI uri = exchange.getRequest().getURI();\n\n\t\t\t// if the `lb:<scheme>` mechanism was used, use `<scheme>` as the default,\n\t\t\t// if the loadbalancer doesn't provide one.\n\t\t\tString overrideScheme = retrievedInstance.isSecure() ? \"https\" : \"http\";\n\t\t\tif (schemePrefix != null) {\n\t\t\t\toverrideScheme = url.getScheme();\n\t\t\t}\n\n\t\t\tDelegatingServiceInstance serviceInstance = new DelegatingServiceInstance(retrievedInstance,\n\t\t\t\t\toverrideScheme);\n\n\t\t\tURI requestUrl = reconstructURI(serviceInstance, uri);\n\n\t\t\tif (log.isTraceEnabled()) {\n\t\t\t\tlog.trace(\"LoadBalancerClientFilter url chosen: \" + requestUrl);\n\t\t\t}\n\t\t\texchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, requestUrl);\n\t\t\texchange.getAttributes().put(GATEWAY_LOADBALANCER_RESPONSE_ATTR, response);\n\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStartRequest(lbRequest, response));\n\t\t}).then(chain.filter(exchange))\n\t\t\t\t.doOnError(throwable -> supportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<ResponseData, ServiceInstance, RequestDataContext>(\n\t\t\t\t\t\t\t\tCompletionContext.Status.FAILED, throwable, lbRequest,\n\t\t\t\t\t\t\t\texchange.getAttribute(GATEWAY_LOADBALANCER_RESPONSE_ATTR)))))\n\t\t\t\t.doOnSuccess(aVoid -> supportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<ResponseData, ServiceInstance, RequestDataContext>(\n\t\t\t\t\t\t\t\tCompletionContext.Status.SUCCESS, lbRequest,\n\t\t\t\t\t\t\t\texchange.getAttribute(GATEWAY_LOADBALANCER_RESPONSE_ATTR),\n\t\t\t\t\t\t\t\tnew ResponseData(exchange.getResponse(),\n\t\t\t\t\t\t\t\t\t\tnew RequestData(exchange.getRequest(), exchange.getAttributes()))))));\n\t}\n\n\tprotected URI reconstructURI(ServiceInstance serviceInstance, URI original) {\n\t\treturn LoadBalancerUriTools.reconstructURI(serviceInstance, original);\n\t}\n\n\tprivate Mono<Response<ServiceInstance>> choose(Request<RequestDataContext> lbRequest, String serviceId,\n\t\t\tSet<LoadBalancerLifecycle> supportedLifecycleProcessors) {<FILL_FUNCTION_BODY>}\n\n\tprivate String getHint(String serviceId) {\n\t\tLoadBalancerProperties loadBalancerProperties = clientFactory.getProperties(serviceId);\n\t\tMap<String, String> hints = loadBalancerProperties.getHint();\n\t\tString defaultHint = hints.getOrDefault(\"default\", \"default\");\n\t\tString hintPropertyValue = hints.get(serviceId);\n\t\treturn hintPropertyValue != null ? hintPropertyValue : defaultHint;\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/8", "ground_truth": "\n\t\tReactorLoadBalancer<ServiceInstance> loadBalancer = this.clientFactory.getInstance(serviceId,\n\t\t\t\tReactorServiceInstanceLoadBalancer.class);\n\t\tif (loadBalancer == null) {\n\t\t\tthrow new NotFoundException(\"No loadbalancer available for \" + serviceId);\n\t\t}\n\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStart(lbRequest));\n\t\treturn loadBalancer.choose(lbRequest);\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "filter", "ReactiveLoadBalancerClientFilter.java"], "context_start_lineno": 0, "function_name": "choose", "left_context": "class ReactiveLoadBalancerClientFilter implements GlobalFilter, Ordered {\n\n\tprivate static final Log log = LogFactory.getLog(ReactiveLoadBalancerClientFilter.class);\n\n\t/**\n\t * Order of filter.\n\t */\n\tpublic static final int LOAD_BALANCER_CLIENT_FILTER_ORDER = 10150;\n\n\tprivate final LoadBalancerClientFactory clientFactory;\n\n\tprivate final GatewayLoadBalancerProperties properties;\n\n\t/**\n\t * @deprecated in favour of\n\t * {@link ReactiveLoadBalancerClientFilter#ReactiveLoadBalancerClientFilter(LoadBalancerClientFactory, GatewayLoadBalancerProperties)}\n\t */\n\t@Deprecated\n\tpublic ReactiveLoadBalancerClientFilter(LoadBalancerClientFactory clientFactory,\n\t\t\tGatewayLoadBalancerProperties properties, LoadBalancerProperties loadBalancerProperties) {\n\t\tthis.clientFactory = clientFactory;\n\t\tthis.properties = properties;\n\t}\n\n\tpublic ReactiveLoadBalancerClientFilter(LoadBalancerClientFactory clientFactory,\n\t\t\tGatewayLoadBalancerProperties properties) {\n\t\tthis.clientFactory = clientFactory;\n\t\tthis.properties = properties;\n\t}\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn LOAD_BALANCER_CLIENT_FILTER_ORDER;\n\t}\n\n\t@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\tURI url = exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);\n\t\tString schemePrefix = exchange.getAttribute(GATEWAY_SCHEME_PREFIX_ATTR);\n\t\tif (url == null || (!\"lb\".equals(url.getScheme()) && !\"lb\".equals(schemePrefix))) {\n\t\t\treturn chain.filter(exchange);\n\t\t}\n\t\t// preserve the original url\n\t\taddOriginalRequestUrl(exchange, url);\n\n\t\tif (log.isTraceEnabled()) {\n\t\t\tlog.trace(ReactiveLoadBalancerClientFilter.class.getSimpleName() + \" url before: \" + url);\n\t\t}\n\n\t\tURI requestUri = exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);\n\t\tString serviceId = requestUri.getHost();\n\t\tSet<LoadBalancerLifecycle> supportedLifecycleProcessors = LoadBalancerLifecycleValidator\n\t\t\t\t.getSupportedLifecycleProcessors(clientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),\n\t\t\t\t\t\tRequestDataContext.class, ResponseData.class, ServiceInstance.class);\n\t\tDefaultRequest<RequestDataContext> lbRequest = new DefaultRequest<>(new RequestDataContext(\n\t\t\t\tnew RequestData(exchange.getRequest(), exchange.getAttributes()), getHint(serviceId)));\n\t\treturn choose(lbRequest, serviceId, supportedLifecycleProcessors).doOnNext(response -> {\n\n\t\t\tif (!response.hasServer()) {\n\t\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<>(CompletionContext.Status.DISCARD, lbRequest, response)));\n\t\t\t\tthrow NotFoundException.create(properties.isUse404(), \"Unable to find instance for \" + url.getHost());\n\t\t\t}\n\n\t\t\tServiceInstance retrievedInstance = response.getServer();\n\n\t\t\tURI uri = exchange.getRequest().getURI();\n\n\t\t\t// if the `lb:<scheme>` mechanism was used, use `<scheme>` as the default,\n\t\t\t// if the loadbalancer doesn't provide one.\n\t\t\tString overrideScheme = retrievedInstance.isSecure() ? \"https\" : \"http\";\n\t\t\tif (schemePrefix != null) {\n\t\t\t\toverrideScheme = url.getScheme();\n\t\t\t}\n\n\t\t\tDelegatingServiceInstance serviceInstance = new DelegatingServiceInstance(retrievedInstance,\n\t\t\t\t\toverrideScheme);\n\n\t\t\tURI requestUrl = reconstructURI(serviceInstance, uri);\n\n\t\t\tif (log.isTraceEnabled()) {\n\t\t\t\tlog.trace(\"LoadBalancerClientFilter url chosen: \" + requestUrl);\n\t\t\t}\n\t\t\texchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, requestUrl);\n\t\t\texchange.getAttributes().put(GATEWAY_LOADBALANCER_RESPONSE_ATTR, response);\n\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStartRequest(lbRequest, response));\n\t\t}).then(chain.filter(exchange))\n\t\t\t\t.doOnError(throwable -> supportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<ResponseData, ServiceInstance, RequestDataContext>(\n\t\t\t\t\t\t\t\tCompletionContext.Status.FAILED, throwable, lbRequest,\n\t\t\t\t\t\t\t\texchange.getAttribute(GATEWAY_LOADBALANCER_RESPONSE_ATTR)))))\n\t\t\t\t.doOnSuccess(aVoid -> supportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<ResponseData, ServiceInstance, RequestDataContext>(\n\t\t\t\t\t\t\t\tCompletionContext.Status.SUCCESS, lbRequest,\n\t\t\t\t\t\t\t\texchange.getAttribute(GATEWAY_LOADBALANCER_RESPONSE_ATTR),\n\t\t\t\t\t\t\t\tnew ResponseData(exchange.getResponse(),\n\t\t\t\t\t\t\t\t\t\tnew RequestData(exchange.getRequest(), exchange.getAttributes()))))));\n\t}\n\n\tprotected URI reconstructURI(ServiceInstance serviceInstance, URI original) {\n\t\treturn LoadBalancerUriTools.reconstructURI(serviceInstance, original);\n\t}\n\n\tprivate Mono<Response<ServiceInstance>> choose(Request<RequestDataContext> lbRequest, String serviceId,\n\t\t\tSet<LoadBalancerLifecycle> supportedLifecycleProcessors) {", "right_context": "}\n\n\tprivate String getHint(String serviceId) {\n\t\tLoadBalancerProperties loadBalancerProperties = clientFactory.getProperties(serviceId);\n\t\tMap<String, String> hints = loadBalancerProperties.getHint();\n\t\tString defaultHint = hints.getOrDefault(\"default\", \"default\");\n\t\tString hintPropertyValue = hints.get(serviceId);\n\t\treturn hintPropertyValue != null ? hintPropertyValue : defaultHint;\n\t}\n\n}", "class_name": "ReactiveLoadBalancerClientFilter", "return_type": "Mono<Response<ServiceInstance>>", "parameters": [{"type": "Request<RequestDataContext>", "name": "lbRequest"}, {"type": "String", "name": "serviceId"}, {"type": "Set<LoadBalancerLifecycle>", "name": "supportedLifecycleProcessors"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FilterDefinition {\n\n\t@NotNull\n\tprivate String name;\n\n\tprivate Map<String, String> args = new LinkedHashMap<>();\n\n\tpublic FilterDefinition() {\n\t}\n\n\tpublic FilterDefinition(String text) {\n\t\tint eqIdx = text.indexOf('=');\n\t\tif (eqIdx <= 0) {\n\t\t\tsetName(text);\n\t\t\treturn;\n\t\t}\n\t\tsetName(text.substring(0, eqIdx));\n\n\t\tString[] args = tokenizeToStringArray(text.substring(eqIdx + 1), \",\");\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tthis.args.put(NameUtils.generateName(i), args[i]);\n\t\t}\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic Map<String, String> getArgs() {\n\t\treturn args;\n\t}\n\n\tpublic void setArgs(Map<String, String> args) {\n\t\tthis.args = args;\n\t}\n\n\tpublic void addArg(String key, String value) {\n\t\tthis.args.put(key, value);\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tFilterDefinition that = (FilterDefinition) o;\n\t\treturn Objects.equals(name, that.name) && Objects.equals(args, that.args);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(name, args);\n\t}\n\n\t@Override\n\tpublic String toString() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/72", "ground_truth": "\n\t\tfinal StringBuilder sb = new StringBuilder(\"FilterDefinition{\");\n\t\tsb.append(\"name='\").append(name).append('\\'');\n\t\tsb.append(\", args=\").append(args);\n\t\tsb.append('}');\n\t\treturn sb.toString();\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "filter", "FilterDefinition.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class FilterDefinition {\n\n\t@NotNull\n\tprivate String name;\n\n\tprivate Map<String, String> args = new LinkedHashMap<>();\n\n\tpublic FilterDefinition() {\n\t}\n\n\tpublic FilterDefinition(String text) {\n\t\tint eqIdx = text.indexOf('=');\n\t\tif (eqIdx <= 0) {\n\t\t\tsetName(text);\n\t\t\treturn;\n\t\t}\n\t\tsetName(text.substring(0, eqIdx));\n\n\t\tString[] args = tokenizeToStringArray(text.substring(eqIdx + 1), \",\");\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tthis.args.put(NameUtils.generateName(i), args[i]);\n\t\t}\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic Map<String, String> getArgs() {\n\t\treturn args;\n\t}\n\n\tpublic void setArgs(Map<String, String> args) {\n\t\tthis.args = args;\n\t}\n\n\tpublic void addArg(String key, String value) {\n\t\tthis.args.put(key, value);\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tFilterDefinition that = (FilterDefinition) o;\n\t\treturn Objects.equals(name, that.name) && Objects.equals(args, that.args);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(name, args);\n\t}\n\n\t@Override\n\tpublic String toString() {", "right_context": "}\n\n}", "class_name": "FilterDefinition", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/handler/predicate/AfterRoutePredicateFactory.java\n// --------------------------------------------------\n// public ZonedDateTime getDatetime(){\n//   return datetime;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/handler/predicate/BeforeRoutePredicateFactory.java\n// --------------------------------------------------\n// public ZonedDateTime getDatetime(){\n//   return datetime;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/handler/predicate/BetweenRoutePredicateFactory.java\n// --------------------------------------------------\n// public ZonedDateTime getDatetime1(){\n//   return datetime1;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/handler/predicate/BetweenRoutePredicateFactory.java\n// --------------------------------------------------\n// public ZonedDateTime getDatetime2(){\n//   return datetime2;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StringToZonedDateTimeConverter implements Converter<String, ZonedDateTime> {\n\n\t@Override\n\tpublic ZonedDateTime convert(String source) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/73", "ground_truth": "\n\t\tZonedDateTime dateTime;\n\t\ttry {\n\t\t\tlong epoch = Long.parseLong(source);\n\n\t\t\tdateTime = Instant.ofEpochMilli(epoch).atOffset(ZoneOffset.ofTotalSeconds(0)).toZonedDateTime();\n\t\t}\n\t\tcatch (NumberFormatException e) {\n\t\t\t// try ZonedDateTime instead\n\t\t\tdateTime = ZonedDateTime.parse(source);\n\t\t}\n\n\t\treturn dateTime;\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "support", "StringToZonedDateTimeConverter.java"], "context_start_lineno": 0, "function_name": "convert", "left_context": "class StringToZonedDateTimeConverter implements Converter<String, ZonedDateTime> {\n\n\t@Override\n\tpublic ZonedDateTime convert(String source) {", "right_context": "}\n\n}", "class_name": "StringToZonedDateTimeConverter", "return_type": "ZonedDateTime", "parameters": [{"type": "String", "name": "source"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/tagsprovider/GatewayPathTagsProvider.java\n// --------------------------------------------------\n// @Override public Tags apply(ServerWebExchange exchange){\n//   Route route=exchange.getAttribute(GATEWAY_ROUTE_ATTR);\n//   if (route != null) {\n//     String matchedPathRouteId=exchange.getAttribute(GATEWAY_PREDICATE_MATCHED_PATH_ROUTE_ID_ATTR);\n//     String matchedPath=exchange.getAttribute(GATEWAY_PREDICATE_MATCHED_PATH_ATTR);\n//     if (route.getId().equals(matchedPathRouteId) && matchedPath != null) {\n//       return Tags.of(\"path\",matchedPath);\n//     }\n//   }\n//   return Tags.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/tagsprovider/GatewayRouteTagsProvider.java\n// --------------------------------------------------\n// @Override public Tags apply(ServerWebExchange exchange){\n//   Route route=exchange.getAttribute(GATEWAY_ROUTE_ATTR);\n//   if (route != null) {\n//     return Tags.of(\"routeId\",route.getId(),\"routeUri\",route.getUri().toString());\n//   }\n//   return Tags.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/tagsprovider/PropertiesTagsProvider.java\n// --------------------------------------------------\n// @Override public Tags apply(ServerWebExchange serverWebExchange){\n//   return propertiesTags;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/config/GatewayMetricsAutoConfigurationTests.java\n// --------------------------------------------------\n// @Override public Tags apply(ServerWebExchange exchange){\n//   return Tags.empty();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GatewayHttpTagsProvider implements GatewayTagsProvider {\n\n\t@Override\n\tpublic Tags apply(ServerWebExchange exchange) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/83", "ground_truth": "\n\t\tString outcome = \"CUSTOM\";\n\t\tString status = \"CUSTOM\";\n\t\tString httpStatusCodeStr = \"NA\";\n\n\t\tString httpMethod = exchange.getRequest().getMethod().name();\n\n\t\t// a non standard HTTPS status could be used. Let's be defensive here\n\t\t// it needs to be checked for first, otherwise the delegate response\n\t\t// who's status DIDN'T change, will be used\n\t\tif (exchange.getResponse() instanceof AbstractServerHttpResponse) {\n\t\t\tInteger statusInt = ((AbstractServerHttpResponse) exchange.getResponse()).getRawStatusCode();\n\t\t\tif (statusInt != null) {\n\t\t\t\tstatus = String.valueOf(statusInt);\n\t\t\t\thttpStatusCodeStr = status;\n\t\t\t\tHttpStatus resolved = HttpStatus.resolve(statusInt);\n\t\t\t\tif (resolved != null) {\n\t\t\t\t\t// this is not a CUSTOM status, so use series here.\n\t\t\t\t\toutcome = resolved.series().name();\n\t\t\t\t\tstatus = resolved.name();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tHttpStatusCode statusCode = exchange.getResponse().getStatusCode();\n\t\t\tif (statusCode != null) {\n\t\t\t\thttpStatusCodeStr = String.valueOf(statusCode.value());\n\t\t\t\tif (statusCode instanceof HttpStatus) {\n\t\t\t\t\tHttpStatus httpStatus = (HttpStatus) statusCode;\n\t\t\t\t\toutcome = httpStatus.series().name();\n\t\t\t\t\tstatus = httpStatus.name();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Tags.of(\"outcome\", outcome, \"status\", status, \"httpStatusCode\", httpStatusCodeStr, \"httpMethod\",\n\t\t\t\thttpMethod);\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "support", "tagsprovider", "GatewayHttpTagsProvider.java"], "context_start_lineno": 0, "function_name": "apply", "left_context": "class GatewayHttpTagsProvider implements GatewayTagsProvider {\n\n\t@Override\n\tpublic Tags apply(ServerWebExchange exchange) {", "right_context": "}\n\n}", "class_name": "GatewayHttpTagsProvider", "return_type": "Tags", "parameters": [{"type": "ServerWebExchange", "name": "exchange"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RequestSizeGatewayFilterFactory\n\t\textends AbstractGatewayFilterFactory<RequestSizeGatewayFilterFactory.RequestSizeConfig> {\n\n\tprivate static String PREFIX = \"kMGTPE\";\n\n\tprivate static String ERROR = \"Request size is larger than permissible limit.\"\n\t\t\t+ \" Request size is %s where permissible limit is %s\";\n\n\tpublic RequestSizeGatewayFilterFactory() {\n\t\tsuper(RequestSizeGatewayFilterFactory.RequestSizeConfig.class);\n\t}\n\n\tprivate static String getErrorMessage(Long currentRequestSize, Long maxSize) {\n\t\treturn String.format(ERROR, getReadableByteCount(currentRequestSize), getReadableByteCount(maxSize));\n\t}\n\n\tprivate static String getReadableByteCount(long bytes) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic GatewayFilter apply(RequestSizeGatewayFilterFactory.RequestSizeConfig requestSizeConfig) {\n\t\trequestSizeConfig.validate();\n\t\treturn new GatewayFilter() {\n\t\t\t@Override\n\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\tServerHttpRequest request = exchange.getRequest();\n\t\t\t\tString contentLength = request.getHeaders().getFirst(\"content-length\");\n\t\t\t\tif (!ObjectUtils.isEmpty(contentLength)) {\n\t\t\t\t\tLong currentRequestSize = Long.valueOf(contentLength);\n\t\t\t\t\tif (currentRequestSize > requestSizeConfig.getMaxSize().toBytes()) {\n\t\t\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.PAYLOAD_TOO_LARGE);\n\t\t\t\t\t\tif (!exchange.getResponse().isCommitted()) {\n\t\t\t\t\t\t\texchange.getResponse().getHeaders().add(\"errorMessage\",\n\t\t\t\t\t\t\t\t\tgetErrorMessage(currentRequestSize, requestSizeConfig.getMaxSize().toBytes()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn exchange.getResponse().setComplete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn chain.filter(exchange);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn filterToStringCreator(RequestSizeGatewayFilterFactory.this)\n\t\t\t\t\t\t.append(\"max\", requestSizeConfig.getMaxSize()).toString();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static class RequestSizeConfig {\n\n\t\t// TODO: use boot data size type\n\t\tprivate DataSize maxSize = DataSize.ofBytes(5000000L);\n\n\t\tpublic DataSize getMaxSize() {\n\t\t\treturn maxSize;\n\t\t}\n\n\t\tpublic RequestSizeGatewayFilterFactory.RequestSizeConfig setMaxSize(DataSize maxSize) {\n\t\t\tthis.maxSize = maxSize;\n\t\t\treturn this;\n\t\t}\n\n\t\t// TODO: use validator annotation\n\t\tpublic void validate() {\n\t\t\tAssert.notNull(this.maxSize, \"maxSize may not be null\");\n\t\t\tAssert.isTrue(this.maxSize.toBytes() > 0, \"maxSize must be greater than 0\");\n\t\t}\n\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/88", "ground_truth": "\n\t\tint unit = 1000;\n\t\tif (bytes < unit) {\n\t\t\treturn bytes + \" B\";\n\t\t}\n\t\tint exp = (int) (Math.log(bytes) / Math.log(unit));\n\t\tString pre = Character.toString(PREFIX.charAt(exp - 1));\n\t\treturn String.format(\"%.1f %sB\", bytes / Math.pow(unit, exp), pre);\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "filter", "factory", "RequestSizeGatewayFilterFactory.java"], "context_start_lineno": 0, "function_name": "getReadableByteCount", "left_context": "class RequestSizeGatewayFilterFactory\n\t\textends AbstractGatewayFilterFactory<RequestSizeGatewayFilterFactory.RequestSizeConfig> {\n\n\tprivate static String PREFIX = \"kMGTPE\";\n\n\tprivate static String ERROR = \"Request size is larger than permissible limit.\"\n\t\t\t+ \" Request size is %s where permissible limit is %s\";\n\n\tpublic RequestSizeGatewayFilterFactory() {\n\t\tsuper(RequestSizeGatewayFilterFactory.RequestSizeConfig.class);\n\t}\n\n\tprivate static String getErrorMessage(Long currentRequestSize, Long maxSize) {\n\t\treturn String.format(ERROR, getReadableByteCount(currentRequestSize), getReadableByteCount(maxSize));\n\t}\n\n\tprivate static String getReadableByteCount(long bytes) {", "right_context": "}\n\n\t@Override\n\tpublic GatewayFilter apply(RequestSizeGatewayFilterFactory.RequestSizeConfig requestSizeConfig) {\n\t\trequestSizeConfig.validate();\n\t\treturn new GatewayFilter() {\n\t\t\t@Override\n\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\tServerHttpRequest request = exchange.getRequest();\n\t\t\t\tString contentLength = request.getHeaders().getFirst(\"content-length\");\n\t\t\t\tif (!ObjectUtils.isEmpty(contentLength)) {\n\t\t\t\t\tLong currentRequestSize = Long.valueOf(contentLength);\n\t\t\t\t\tif (currentRequestSize > requestSizeConfig.getMaxSize().toBytes()) {\n\t\t\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.PAYLOAD_TOO_LARGE);\n\t\t\t\t\t\tif (!exchange.getResponse().isCommitted()) {\n\t\t\t\t\t\t\texchange.getResponse().getHeaders().add(\"errorMessage\",\n\t\t\t\t\t\t\t\t\tgetErrorMessage(currentRequestSize, requestSizeConfig.getMaxSize().toBytes()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn exchange.getResponse().setComplete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn chain.filter(exchange);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn filterToStringCreator(RequestSizeGatewayFilterFactory.this)\n\t\t\t\t\t\t.append(\"max\", requestSizeConfig.getMaxSize()).toString();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static class RequestSizeConfig {\n\n\t\t// TODO: use boot data size type\n\t\tprivate DataSize maxSize = DataSize.ofBytes(5000000L);\n\n\t\tpublic DataSize getMaxSize() {\n\t\t\treturn maxSize;\n\t\t}\n\n\t\tpublic RequestSizeGatewayFilterFactory.RequestSizeConfig setMaxSize(DataSize maxSize) {\n\t\t\tthis.maxSize = maxSize;\n\t\t\treturn this;\n\t\t}\n\n\t\t// TODO: use validator annotation\n\t\tpublic void validate() {\n\t\t\tAssert.notNull(this.maxSize, \"maxSize may not be null\");\n\t\t\tAssert.isTrue(this.maxSize.toBytes() > 0, \"maxSize must be greater than 0\");\n\t\t}\n\n\t}\n\n}", "class_name": "RequestSizeGatewayFilterFactory", "return_type": "String", "parameters": [{"type": "long", "name": "bytes"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConfigurableHintsRegistrationProcessor implements BeanFactoryInitializationAotProcessor {\n\n\tprivate static final Log LOG = LogFactory.getLog(ConfigurableHintsRegistrationProcessor.class);\n\n\tprivate static final String ROOT_GATEWAY_PACKAGE_NAME = \"org.springframework.cloud.gateway\";\n\n\tprivate static final Set<String> circuitBreakerConditionalClasses = Set.of(\n\t\t\t\"org.springframework.web.reactive.DispatcherHandler\",\n\t\t\t\"org.springframework.cloud.circuitbreaker.resilience4j.ReactiveResilience4JAutoConfiguration\",\n\t\t\t\"org.springframework.cloud.client.circuitbreaker.ReactiveCircuitBreakerFactory\",\n\t\t\t\"org.springframework.cloud.circuitbreaker.resilience4j.ReactiveResilience4JCircuitBreakerFactory\");\n\n\tprivate static final Map<Class<?>, Set<String>> beansConditionalOnClasses = Map.of(\n\t\t\tTokenRelayGatewayFilterFactory.class,\n\t\t\tSet.of(\"org.springframework.security.oauth2.client.OAuth2AuthorizedClient\",\n\t\t\t\t\t\"org.springframework.security.web.server.SecurityWebFilterChain\",\n\t\t\t\t\t\"org.springframework.boot.autoconfigure.security.SecurityProperties\"),\n\t\t\tJsonToGrpcGatewayFilterFactory.class, Set.of(\"io.grpc.Channel\"), RedisRateLimiter.class,\n\t\t\tSet.of(\"org.springframework.data.redis.core.RedisTemplate\",\n\t\t\t\t\t\"org.springframework.web.reactive.DispatcherHandler\"),\n\t\t\tSpringCloudCircuitBreakerResilience4JFilterFactory.class, circuitBreakerConditionalClasses,\n\t\t\tFallbackHeadersGatewayFilterFactory.class, circuitBreakerConditionalClasses,\n\t\t\tLocalResponseCacheGatewayFilterFactory.class,\n\t\t\tSet.of(\"com.github.benmanes.caffeine.cache.Weigher\", \"com.github.benmanes.caffeine.cache.Caffeine\",\n\t\t\t\t\t\"org.springframework.cache.caffeine.CaffeineCacheManager\"));\n\n\t@Override\n\tpublic BeanFactoryInitializationAotContribution processAheadOfTime(ConfigurableListableBeanFactory beanFactory) {\n\t\treturn (generationContext, beanFactoryInitializationCode) -> {\n\t\t\tReflectionHints hints = generationContext.getRuntimeHints().reflection();\n\t\t\tgetConfigurableTypes().forEach(clazz -> hints.registerType(TypeReference.of(clazz),\n\t\t\t\t\thint -> hint.withMembers(MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS,\n\t\t\t\t\t\t\tMemberCategory.INVOKE_DECLARED_CONSTRUCTORS)));\n\t\t};\n\t}\n\n\tprivate static Set<Class<?>> getConfigurableTypes() {\n\t\tSet<Class<?>> classesToAdd = getClassesToAdd();\n\t\tSet<Class<?>> genericsToAdd = new HashSet<>();\n\t\tSet<Class<?>> superTypes = new HashSet<>();\n\t\tfor (Class<?> clazz : classesToAdd) {\n\t\t\tResolvableType resolvableType = ResolvableType.forType(clazz);\n\t\t\taddGenericsForClass(genericsToAdd, resolvableType);\n\t\t\taddSuperTypesForClass(resolvableType, superTypes, genericsToAdd);\n\t\t}\n\t\tclassesToAdd.addAll(genericsToAdd);\n\t\tclassesToAdd.addAll(superTypes);\n\t\treturn classesToAdd.stream().filter(Objects::nonNull).collect(Collectors.toSet());\n\n\t}\n\n\tprivate static void addGenericsForClass(Set<Class<?>> genericsToAdd, ResolvableType resolvableType) {\n\t\tif (resolvableType.getSuperType().hasGenerics()) {\n\t\t\tgenericsToAdd.addAll(Arrays.stream(resolvableType.getSuperType().getGenerics()).map(ResolvableType::toClass)\n\t\t\t\t\t.collect(Collectors.toSet()));\n\t\t}\n\t}\n\n\tprivate static void addSuperTypesForClass(ResolvableType resolvableType, Set<Class<?>> supertypesToAdd,\n\t\t\tSet<Class<?>> genericsToAdd) {\n\t\tResolvableType superType = resolvableType.getSuperType();\n\t\tif (!ResolvableType.NONE.equals(superType)) {\n\t\t\taddGenericsForClass(genericsToAdd, superType);\n\t\t\tsupertypesToAdd.add(superType.toClass());\n\t\t\taddSuperTypesForClass(superType, supertypesToAdd, genericsToAdd);\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"rawtypes\" })\n\tprivate static Set<Class<?>> getClassesToAdd() {<FILL_FUNCTION_BODY>}\n\n\tprivate static boolean shouldRegisterClass(Class<?> clazz) {\n\t\tSet<String> conditionClasses = beansConditionalOnClasses.getOrDefault(clazz, Collections.emptySet());\n\t\tfor (String conditionClass : conditionClasses) {\n\t\t\ttry {\n\t\t\t\tConfigurableHintsRegistrationProcessor.class.getClassLoader().loadClass(conditionClass);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/132", "ground_truth": "\n\t\tSet<Class<?>> classesToAdd = new HashSet<>();\n\t\tClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n\t\tprovider.addIncludeFilter(new AssignableTypeFilter(Configurable.class));\n\t\tSet<BeanDefinition> components = provider.findCandidateComponents(ROOT_GATEWAY_PACKAGE_NAME);\n\t\tfor (BeanDefinition component : components) {\n\t\t\tClass clazz;\n\t\t\ttry {\n\t\t\t\tclazz = Class.forName(component.getBeanClassName());\n\t\t\t\tif (shouldRegisterClass(clazz)) {\n\t\t\t\t\tclassesToAdd.add(clazz);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NoClassDefFoundError | ClassNotFoundException exception) {\n\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\tLOG.debug(exception);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn classesToAdd;\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "config", "ConfigurableHintsRegistrationProcessor.java"], "context_start_lineno": 0, "function_name": "getClassesToAdd", "left_context": "class ConfigurableHintsRegistrationProcessor implements BeanFactoryInitializationAotProcessor {\n\n\tprivate static final Log LOG = LogFactory.getLog(ConfigurableHintsRegistrationProcessor.class);\n\n\tprivate static final String ROOT_GATEWAY_PACKAGE_NAME = \"org.springframework.cloud.gateway\";\n\n\tprivate static final Set<String> circuitBreakerConditionalClasses = Set.of(\n\t\t\t\"org.springframework.web.reactive.DispatcherHandler\",\n\t\t\t\"org.springframework.cloud.circuitbreaker.resilience4j.ReactiveResilience4JAutoConfiguration\",\n\t\t\t\"org.springframework.cloud.client.circuitbreaker.ReactiveCircuitBreakerFactory\",\n\t\t\t\"org.springframework.cloud.circuitbreaker.resilience4j.ReactiveResilience4JCircuitBreakerFactory\");\n\n\tprivate static final Map<Class<?>, Set<String>> beansConditionalOnClasses = Map.of(\n\t\t\tTokenRelayGatewayFilterFactory.class,\n\t\t\tSet.of(\"org.springframework.security.oauth2.client.OAuth2AuthorizedClient\",\n\t\t\t\t\t\"org.springframework.security.web.server.SecurityWebFilterChain\",\n\t\t\t\t\t\"org.springframework.boot.autoconfigure.security.SecurityProperties\"),\n\t\t\tJsonToGrpcGatewayFilterFactory.class, Set.of(\"io.grpc.Channel\"), RedisRateLimiter.class,\n\t\t\tSet.of(\"org.springframework.data.redis.core.RedisTemplate\",\n\t\t\t\t\t\"org.springframework.web.reactive.DispatcherHandler\"),\n\t\t\tSpringCloudCircuitBreakerResilience4JFilterFactory.class, circuitBreakerConditionalClasses,\n\t\t\tFallbackHeadersGatewayFilterFactory.class, circuitBreakerConditionalClasses,\n\t\t\tLocalResponseCacheGatewayFilterFactory.class,\n\t\t\tSet.of(\"com.github.benmanes.caffeine.cache.Weigher\", \"com.github.benmanes.caffeine.cache.Caffeine\",\n\t\t\t\t\t\"org.springframework.cache.caffeine.CaffeineCacheManager\"));\n\n\t@Override\n\tpublic BeanFactoryInitializationAotContribution processAheadOfTime(ConfigurableListableBeanFactory beanFactory) {\n\t\treturn (generationContext, beanFactoryInitializationCode) -> {\n\t\t\tReflectionHints hints = generationContext.getRuntimeHints().reflection();\n\t\t\tgetConfigurableTypes().forEach(clazz -> hints.registerType(TypeReference.of(clazz),\n\t\t\t\t\thint -> hint.withMembers(MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS,\n\t\t\t\t\t\t\tMemberCategory.INVOKE_DECLARED_CONSTRUCTORS)));\n\t\t};\n\t}\n\n\tprivate static Set<Class<?>> getConfigurableTypes() {\n\t\tSet<Class<?>> classesToAdd = getClassesToAdd();\n\t\tSet<Class<?>> genericsToAdd = new HashSet<>();\n\t\tSet<Class<?>> superTypes = new HashSet<>();\n\t\tfor (Class<?> clazz : classesToAdd) {\n\t\t\tResolvableType resolvableType = ResolvableType.forType(clazz);\n\t\t\taddGenericsForClass(genericsToAdd, resolvableType);\n\t\t\taddSuperTypesForClass(resolvableType, superTypes, genericsToAdd);\n\t\t}\n\t\tclassesToAdd.addAll(genericsToAdd);\n\t\tclassesToAdd.addAll(superTypes);\n\t\treturn classesToAdd.stream().filter(Objects::nonNull).collect(Collectors.toSet());\n\n\t}\n\n\tprivate static void addGenericsForClass(Set<Class<?>> genericsToAdd, ResolvableType resolvableType) {\n\t\tif (resolvableType.getSuperType().hasGenerics()) {\n\t\t\tgenericsToAdd.addAll(Arrays.stream(resolvableType.getSuperType().getGenerics()).map(ResolvableType::toClass)\n\t\t\t\t\t.collect(Collectors.toSet()));\n\t\t}\n\t}\n\n\tprivate static void addSuperTypesForClass(ResolvableType resolvableType, Set<Class<?>> supertypesToAdd,\n\t\t\tSet<Class<?>> genericsToAdd) {\n\t\tResolvableType superType = resolvableType.getSuperType();\n\t\tif (!ResolvableType.NONE.equals(superType)) {\n\t\t\taddGenericsForClass(genericsToAdd, superType);\n\t\t\tsupertypesToAdd.add(superType.toClass());\n\t\t\taddSuperTypesForClass(superType, supertypesToAdd, genericsToAdd);\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"rawtypes\" })\n\tprivate static Set<Class<?>> getClassesToAdd() {", "right_context": "}\n\n\tprivate static boolean shouldRegisterClass(Class<?> clazz) {\n\t\tSet<String> conditionClasses = beansConditionalOnClasses.getOrDefault(clazz, Collections.emptySet());\n\t\tfor (String conditionClass : conditionClasses) {\n\t\t\ttry {\n\t\t\t\tConfigurableHintsRegistrationProcessor.class.getClassLoader().loadClass(conditionClass);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n}", "class_name": "ConfigurableHintsRegistrationProcessor", "return_type": "Set<Class<?>>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/common/HttpStatusHolder.java\n// --------------------------------------------------\n// public static HttpStatusHolder valueOf(String status){\n//   HttpStatusCode httpStatus;\n//   try {\n//     httpStatus=HttpStatus.valueOf(status.toUpperCase());\n//   }\n//  catch (  IllegalArgumentException e) {\n//     httpStatus=null;\n//   }\n//   final Integer intStatus;\n//   if (httpStatus == null) {\n//     intStatus=Integer.parseInt(status);\n//   }\n//  else {\n//     intStatus=null;\n//   }\n//   return new HttpStatusHolder(httpStatus,intStatus);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HttpStatusHolder {\n\n\tprivate final HttpStatus httpStatus;\n\n\tprivate final Integer status;\n\n\tpublic HttpStatusHolder(HttpStatus httpStatus, Integer status) {\n\t\tAssert.isTrue(httpStatus != null || status != null, \"httpStatus and status may not both be null\");\n\t\tthis.httpStatus = httpStatus;\n\t\tthis.status = status;\n\t}\n\n\tpublic static HttpStatusHolder parse(String status) {<FILL_FUNCTION_BODY>}\n\n\tpublic HttpStatus getHttpStatus() {\n\t\treturn httpStatus;\n\t}\n\n\tpublic Integer getStatus() {\n\t\treturn status;\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#INFORMATIONAL}.\n\t * @return <code>true</code> if status code is in the INFORMATIONAL http series\n\t */\n\tpublic boolean is1xxInformational() {\n\t\treturn HttpStatus.Series.INFORMATIONAL.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#SUCCESSFUL}.\n\t * @return <code>true</code> if status code is in the SUCCESSFUL http series\n\t */\n\tpublic boolean is2xxSuccessful() {\n\t\treturn HttpStatus.Series.SUCCESSFUL.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#REDIRECTION}.\n\t * @return <code>true</code> if status code is in the REDIRECTION http series\n\t */\n\tpublic boolean is3xxRedirection() {\n\t\treturn HttpStatus.Series.REDIRECTION.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}.\n\t * @return <code>true</code> if status code is in the CLIENT_ERROR http series\n\t */\n\tpublic boolean is4xxClientError() {\n\t\treturn HttpStatus.Series.CLIENT_ERROR.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.\n\t * @return <code>true</code> if status code is in the SERVER_ERROR http series\n\t */\n\tpublic boolean is5xxServerError() {\n\t\treturn HttpStatus.Series.SERVER_ERROR.equals(getSeries());\n\t}\n\n\tpublic HttpStatus.Series getSeries() {\n\t\tif (httpStatus != null) {\n\t\t\treturn httpStatus.series();\n\t\t}\n\t\tif (status != null) {\n\t\t\treturn HttpStatus.Series.valueOf(status);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or\n\t * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.\n\t * @return <code>true</code> if is either CLIENT_ERROR or SERVER_ERROR\n\t */\n\tpublic boolean isError() {\n\t\treturn is4xxClientError() || is5xxServerError();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn new ToStringCreator(this).append(\"httpStatus\", httpStatus).append(\"status\", status).toString();\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/154", "ground_truth": "\n\t\tfinal HttpStatus httpStatus = ServerWebExchangeUtils.parse(status);\n\t\tfinal Integer intStatus;\n\t\tif (httpStatus == null) {\n\t\t\tintStatus = Integer.parseInt(status);\n\t\t}\n\t\telse {\n\t\t\tintStatus = null;\n\t\t}\n\n\t\treturn new HttpStatusHolder(httpStatus, intStatus);\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "support", "HttpStatusHolder.java"], "context_start_lineno": 0, "function_name": "parse", "left_context": "class HttpStatusHolder {\n\n\tprivate final HttpStatus httpStatus;\n\n\tprivate final Integer status;\n\n\tpublic HttpStatusHolder(HttpStatus httpStatus, Integer status) {\n\t\tAssert.isTrue(httpStatus != null || status != null, \"httpStatus and status may not both be null\");\n\t\tthis.httpStatus = httpStatus;\n\t\tthis.status = status;\n\t}\n\n\tpublic static HttpStatusHolder parse(String status) {", "right_context": "}\n\n\tpublic HttpStatus getHttpStatus() {\n\t\treturn httpStatus;\n\t}\n\n\tpublic Integer getStatus() {\n\t\treturn status;\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#INFORMATIONAL}.\n\t * @return <code>true</code> if status code is in the INFORMATIONAL http series\n\t */\n\tpublic boolean is1xxInformational() {\n\t\treturn HttpStatus.Series.INFORMATIONAL.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#SUCCESSFUL}.\n\t * @return <code>true</code> if status code is in the SUCCESSFUL http series\n\t */\n\tpublic boolean is2xxSuccessful() {\n\t\treturn HttpStatus.Series.SUCCESSFUL.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#REDIRECTION}.\n\t * @return <code>true</code> if status code is in the REDIRECTION http series\n\t */\n\tpublic boolean is3xxRedirection() {\n\t\treturn HttpStatus.Series.REDIRECTION.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}.\n\t * @return <code>true</code> if status code is in the CLIENT_ERROR http series\n\t */\n\tpublic boolean is4xxClientError() {\n\t\treturn HttpStatus.Series.CLIENT_ERROR.equals(getSeries());\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.\n\t * @return <code>true</code> if status code is in the SERVER_ERROR http series\n\t */\n\tpublic boolean is5xxServerError() {\n\t\treturn HttpStatus.Series.SERVER_ERROR.equals(getSeries());\n\t}\n\n\tpublic HttpStatus.Series getSeries() {\n\t\tif (httpStatus != null) {\n\t\t\treturn httpStatus.series();\n\t\t}\n\t\tif (status != null) {\n\t\t\treturn HttpStatus.Series.valueOf(status);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether this status code is in the HTTP series\n\t * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or\n\t * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.\n\t * @return <code>true</code> if is either CLIENT_ERROR or SERVER_ERROR\n\t */\n\tpublic boolean isError() {\n\t\treturn is4xxClientError() || is5xxServerError();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn new ToStringCreator(this).append(\"httpStatus\", httpStatus).append(\"status\", status).toString();\n\t}\n\n}", "class_name": "HttpStatusHolder", "return_type": "HttpStatusHolder", "parameters": [{"type": "String", "name": "status"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/NettyRoutingFilterIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   ServerHttpResponse decorator=exchange.getResponse();\n//   for (int counter=0; counter < decorationIterations; counter++) {\n//     decorator=new ServerHttpResponseDecorator(decorator);\n//   }\n//   return chain.filter(exchange.mutate().response(decorator).build());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/CacheRequestBodyGatewayFilterFactoryTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   String body=exchange.getAttribute(ServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR);\n//   if (exceptNullBody) {\n//     assertThat(body).isNull();\n//   }\n//  else {\n//     assertThat(body).isEqualTo(bodyExcepted);\n//   }\n//   return chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/CacheRequestBodyGatewayFilterFactoryTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   exchange.getAttributes().put(ServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR,bodyToSetCache);\n//   return chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/CacheRequestBodyGatewayFilterFactoryTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   return chain.filter(exchange).doAfterTerminate(() -> {\n//     Object o=exchange.getAttributes().get(CacheRequestBodyGatewayFilterFactory.CACHED_ORIGINAL_REQUEST_BODY_BACKUP_ATTR);\n//     if (o instanceof PooledDataBuffer) {\n//       if (dataBuffer.isAllocated()) {\n//         exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n//         fail(\"DataBuffer is not released\");\n//       }\n//     }\n//   }\n// );\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/rewrite/ModifyRequestBodyGatewayFilterFactorySslTimeoutTests.java\n// --------------------------------------------------\n// @Override protected Mono<Void> release(ServerWebExchange exchange,CachedBodyOutputMessage outputMessage,Throwable throwable){\n//   if (outputMessage.isCached()) {\n//     count.incrementAndGet();\n//   }\n//   return super.release(exchange,outputMessage,throwable);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/builder/GatewayFilterSpecTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   return Mono.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/builder/GatewayFilterSpecTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   return Mono.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/BaseWebClientTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   if (exchange.getRequest().getPath().toString().contains(\"httpbin/httpbin\")) {\n//     return Mono.error(new IllegalStateException(\"recursive call to /httpbin\"));\n//   }\n//   return chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/GatewayIntegrationTests.java\n// --------------------------------------------------\n// private static Mono<Void> postFilterWork(ServerWebExchange exchange){\n//   log.info(\"postFilterWork\");\n//   exchange.getResponse().getHeaders().add(\"X-Post-Header\",\"AddedAfterRoute\");\n//   return Mono.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/HttpBinCompatibleController.java\n// --------------------------------------------------\n// @GetMapping(path=\"/gzip\",produces=MediaType.APPLICATION_JSON_VALUE) public Mono<Void> gzip(ServerWebExchange exchange) throws IOException {\n//   if (log.isDebugEnabled()) {\n//     log.debug(\"httpbin /gzip\");\n//   }\n//   String jsonResponse=OBJECT_MAPPER.writeValueAsString(\"httpbin compatible home\");\n//   byte[] bytes=jsonResponse.getBytes(StandardCharsets.UTF_8);\n//   ServerHttpResponse response=exchange.getResponse();\n//   response.getHeaders().add(HttpHeaders.CONTENT_ENCODING,\"gzip\");\n//   DataBufferFactory dataBufferFactory=response.bufferFactory();\n//   response.setStatusCode(HttpStatus.OK);\n//   ByteArrayOutputStream bos=new ByteArrayOutputStream();\n//   GZIPOutputStream is=new GZIPOutputStream(bos);\n//   FileCopyUtils.copy(bytes,is);\n//   byte[] gzippedResponse=bos.toByteArray();\n//   DataBuffer wrap=dataBufferFactory.wrap(gzippedResponse);\n//   return response.writeWith(Flux.just(wrap));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   infoRef.set(session.getHandshakeInfo());\n//   return session.receive().map(WebSocketMessage::getPayloadAsText).doOnNext(protocolRef::set).doOnError(protocolRef::set).then();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   return session.send(session.receive().doOnNext(WebSocketMessage::retain));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   String protocol=session.getHandshakeInfo().getSubProtocol();\n//   if (!StringUtils.hasText(protocol)) {\n//     return Mono.error(new IllegalStateException(\"Missing protocol\"));\n//   }\n//   List<String> protocols=session.getHandshakeInfo().getHeaders().get(SEC_WEBSOCKET_PROTOCOL);\n//   assertThat(protocols).contains(\"echo-v1,echo-v2\");\n//   WebSocketMessage message=session.textMessage(protocol != null ? protocol : \"none\");\n//   return session.send(Mono.just(message));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   HttpHeaders headers=session.getHandshakeInfo().getHeaders();\n//   if (!headers.containsKey(\"my-header\")) {\n//     return Mono.error(new IllegalStateException(\"Missing my-header\"));\n//   }\n//   String payload=\"my-header:\" + headers.getFirst(\"my-header\");\n//   WebSocketMessage message=session.textMessage(payload);\n//   return session.send(Mono.just(message));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   return Flux.never().mergeWith(session.close(CloseStatus.create(4999,\"server-close\"))).then();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   return session.closeStatus().doOnNext(serverCloseStatusSink::tryEmitValue).then();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   WebSocketMessage message=session.textMessage(\"cookie\");\n//   return session.send(Mono.just(message));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-webflux/src/test/java/org/springframework/cloud/gateway/webflux/ReactiveTests.java\n// --------------------------------------------------\n// @GetMapping(\"/forward/foos\") public Mono<Void> forwardFoos(ServerWebExchange exchange){\n//   return handler.handle(exchange.mutate().request(request -> request.path(\"/foos\").build()).build());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/RedisRouteDefinitionRepository.java\n// --------------------------------------------------\n// @Override public Mono<Void> delete(Mono<String> routeId){\n//   return routeId.flatMap(id -> routeDefinitionReactiveValueOperations.delete(createKey(id)).flatMap(success -> {\n//     if (success) {\n//       return Mono.empty();\n//     }\n//     return Mono.defer(() -> Mono.error(new NotFoundException(String.format(\"Could not remove route from redis repository with id: %s\",routeId))));\n//   }\n// ));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionWriter.java\n// --------------------------------------------------\n// Mono<Void> delete(Mono<String> routeId);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InMemoryRouteDefinitionRepository implements RouteDefinitionRepository {\n\n\tprivate final Map<String, RouteDefinition> routes = synchronizedMap(new LinkedHashMap<String, RouteDefinition>());\n\n\t@Override\n\tpublic Mono<Void> save(Mono<RouteDefinition> route) {\n\t\treturn route.flatMap(r -> {\n\t\t\tif (ObjectUtils.isEmpty(r.getId())) {\n\t\t\t\treturn Mono.error(new IllegalArgumentException(\"id may not be empty\"));\n\t\t\t}\n\t\t\troutes.put(r.getId(), r);\n\t\t\treturn Mono.empty();\n\t\t});\n\t}\n\n\t@Override\n\tpublic Mono<Void> delete(Mono<String> routeId) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic Flux<RouteDefinition> getRouteDefinitions() {\n\t\tMap<String, RouteDefinition> routesSafeCopy = new LinkedHashMap<>(routes);\n\t\treturn Flux.fromIterable(routesSafeCopy.values());\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/188", "ground_truth": "\n\t\treturn routeId.flatMap(id -> {\n\t\t\tif (routes.containsKey(id)) {\n\t\t\t\troutes.remove(id);\n\t\t\t\treturn Mono.empty();\n\t\t\t}\n\t\t\treturn Mono.defer(() -> Mono.error(new NotFoundException(\"RouteDefinition not found: \" + routeId)));\n\t\t});\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "route", "InMemoryRouteDefinitionRepository.java"], "context_start_lineno": 0, "function_name": "delete", "left_context": "class InMemoryRouteDefinitionRepository implements RouteDefinitionRepository {\n\n\tprivate final Map<String, RouteDefinition> routes = synchronizedMap(new LinkedHashMap<String, RouteDefinition>());\n\n\t@Override\n\tpublic Mono<Void> save(Mono<RouteDefinition> route) {\n\t\treturn route.flatMap(r -> {\n\t\t\tif (ObjectUtils.isEmpty(r.getId())) {\n\t\t\t\treturn Mono.error(new IllegalArgumentException(\"id may not be empty\"));\n\t\t\t}\n\t\t\troutes.put(r.getId(), r);\n\t\t\treturn Mono.empty();\n\t\t});\n\t}\n\n\t@Override\n\tpublic Mono<Void> delete(Mono<String> routeId) {", "right_context": "}\n\n\t@Override\n\tpublic Flux<RouteDefinition> getRouteDefinitions() {\n\t\tMap<String, RouteDefinition> routesSafeCopy = new LinkedHashMap<>(routes);\n\t\treturn Flux.fromIterable(routesSafeCopy.values());\n\t}\n\n}", "class_name": "InMemoryRouteDefinitionRepository", "return_type": "Mono<Void>", "parameters": [{"type": "Mono<String>", "name": "routeId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/RewriteRequestParameterGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       ServerHttpRequest req=exchange.getRequest();\n//       UriComponentsBuilder uriComponentsBuilder=UriComponentsBuilder.fromUri(req.getURI());\n//       if (req.getQueryParams().containsKey(config.getName())) {\n//         uriComponentsBuilder.replaceQueryParam(config.getName(),config.getReplacement());\n//       }\n//       URI uri=uriComponentsBuilder.build().toUri();\n//       ServerHttpRequest request=req.mutate().uri(uri).build();\n//       return chain.filter(exchange.mutate().request(request).build());\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(RewriteRequestParameterGatewayFilterFactory.this).append(config.getName(),config.replacement).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/RewriteResponseHeaderGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       return chain.filter(exchange).then(Mono.fromRunnable(() -> rewriteHeaders(exchange,config)));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(RewriteResponseHeaderGatewayFilterFactory.this).append(\"name\",config.getName()).append(\"regexp\",config.getRegexp()).append(\"replacement\",config.getReplacement()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SaveSessionGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Object config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       return exchange.getSession().flatMap(WebSession::save).then(chain.filter(exchange));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SaveSessionGatewayFilterFactory.this).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SecureHeadersGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config originalConfig){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       HttpHeaders headers=exchange.getResponse().getHeaders();\n//       List<String> disabled=properties.getDisable();\n//       Config config=originalConfig.withDefaults(properties);\n//       return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n//         if (isEnabled(disabled,X_XSS_PROTECTION_HEADER)) {\n//           headers.addIfAbsent(X_XSS_PROTECTION_HEADER,config.getXssProtectionHeader());\n//         }\n//         if (isEnabled(disabled,STRICT_TRANSPORT_SECURITY_HEADER)) {\n//           headers.addIfAbsent(STRICT_TRANSPORT_SECURITY_HEADER,config.getStrictTransportSecurity());\n//         }\n//         if (isEnabled(disabled,X_FRAME_OPTIONS_HEADER)) {\n//           headers.addIfAbsent(X_FRAME_OPTIONS_HEADER,config.getFrameOptions());\n//         }\n//         if (isEnabled(disabled,X_CONTENT_TYPE_OPTIONS_HEADER)) {\n//           headers.addIfAbsent(X_CONTENT_TYPE_OPTIONS_HEADER,config.getContentTypeOptions());\n//         }\n//         if (isEnabled(disabled,REFERRER_POLICY_HEADER)) {\n//           headers.addIfAbsent(REFERRER_POLICY_HEADER,config.getReferrerPolicy());\n//         }\n//         if (isEnabled(disabled,CONTENT_SECURITY_POLICY_HEADER)) {\n//           headers.addIfAbsent(CONTENT_SECURITY_POLICY_HEADER,config.getContentSecurityPolicy());\n//         }\n//         if (isEnabled(disabled,X_DOWNLOAD_OPTIONS_HEADER)) {\n//           headers.addIfAbsent(X_DOWNLOAD_OPTIONS_HEADER,config.getDownloadOptions());\n//         }\n//         if (isEnabled(disabled,X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER)) {\n//           headers.addIfAbsent(X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER,config.getPermittedCrossDomainPolicies());\n//         }\n//       }\n// ));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SecureHeadersGatewayFilterFactory.this).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SetPathGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   UriTemplate uriTemplate=new UriTemplate(config.template);\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       ServerHttpRequest req=exchange.getRequest();\n//       addOriginalRequestUrl(exchange,req.getURI());\n//       Map<String,String> uriVariables=getUriTemplateVariables(exchange);\n//       URI uri=uriTemplate.expand(uriVariables);\n//       String newPath=uri.getRawPath();\n//       exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR,uri);\n//       ServerHttpRequest request=req.mutate().path(newPath).build();\n//       return chain.filter(exchange.mutate().request(request).build());\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SetPathGatewayFilterFactory.this).append(\"template\",config.getTemplate()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SetRequestHeaderGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(NameValueConfig config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       String value=ServerWebExchangeUtils.expand(exchange,config.getValue());\n//       ServerHttpRequest request=exchange.getRequest().mutate().headers(httpHeaders -> httpHeaders.set(config.name,value)).build();\n//       return chain.filter(exchange.mutate().request(request).build());\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SetRequestHeaderGatewayFilterFactory.this).append(config.getName(),config.getValue()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SetRequestHostHeaderGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       String value=ServerWebExchangeUtils.expand(exchange,config.getHost());\n//       ServerHttpRequest request=exchange.getRequest().mutate().headers(httpHeaders -> {\n//         httpHeaders.remove(\"Host\");\n//         httpHeaders.add(\"Host\",value);\n//       }\n// ).build();\n//       exchange.getAttributes().put(PRESERVE_HOST_HEADER_ATTRIBUTE,true);\n//       return chain.filter(exchange.mutate().request(request).build());\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SetRequestHostHeaderGatewayFilterFactory.this).append(config.getHost()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SetResponseHeaderGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(NameValueConfig config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       String value=ServerWebExchangeUtils.expand(exchange,config.getValue());\n//       return chain.filter(exchange).then(Mono.fromRunnable(() -> exchange.getResponse().getHeaders().set(config.name,value)));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SetResponseHeaderGatewayFilterFactory.this).append(config.getName(),config.getValue()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SetStatusGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   HttpStatusHolder statusHolder=HttpStatusHolder.parse(config.status);\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n//         HttpStatusCode statusCode=exchange.getResponse().getStatusCode();\n//         boolean isStatusCodeUpdated=setResponseStatus(exchange,statusHolder);\n//         if (isStatusCodeUpdated && originalStatusHeaderName != null) {\n//           exchange.getResponse().getHeaders().set(originalStatusHeaderName,singletonList(statusCode.value()).toString());\n//         }\n//       }\n// ));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SetStatusGatewayFilterFactory.this).append(\"status\",config.getStatus()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/SpringCloudCircuitBreakerFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   ReactiveCircuitBreaker cb=reactiveCircuitBreakerFactory.create(config.getId());\n//   Set<HttpStatus> statuses=config.getStatusCodes().stream().map(HttpStatusHolder::parse).filter(statusHolder -> statusHolder.getHttpStatus() != null).map(HttpStatusHolder::getHttpStatus).collect(Collectors.toSet());\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       return cb.run(chain.filter(exchange).doOnSuccess(v -> {\n//         if (statuses.contains(exchange.getResponse().getStatusCode())) {\n//           HttpStatusCode status=exchange.getResponse().getStatusCode();\n//           throw new CircuitBreakerStatusCodeException(status);\n//         }\n//       }\n// ),t -> {\n//         if (config.getFallbackUri() == null) {\n//           return Mono.error(t);\n//         }\n//         exchange.getResponse().setStatusCode(null);\n//         URI uri=exchange.getRequest().getURI();\n//         boolean encoded=containsEncodedParts(uri);\n//         String expandedFallbackUri=ServerWebExchangeUtils.expand(exchange,config.getFallbackUri().getPath());\n//         String fullFallbackUri=String.format(\"%s:%s\",config.getFallbackUri().getScheme(),expandedFallbackUri);\n//         URI requestUrl=UriComponentsBuilder.fromUri(uri).host(null).port(null).uri(URI.create(fullFallbackUri)).scheme(null).build(encoded).toUri();\n//         exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR,requestUrl);\n//         addExceptionDetails(t,exchange);\n//         reset(exchange);\n//         ServerHttpRequest request=exchange.getRequest().mutate().uri(requestUrl).build();\n//         return handle(getDispatcherHandler(),exchange.mutate().request(request).build());\n//       }\n// ).onErrorResume(t -> handleErrorWithoutFallback(t,config.isResumeWithoutError()));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(SpringCloudCircuitBreakerFilterFactory.this).append(\"name\",config.getName()).append(\"fallback\",config.fallbackUri).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/StripPrefixGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       ServerHttpRequest request=exchange.getRequest();\n//       addOriginalRequestUrl(exchange,request.getURI());\n//       String path=request.getURI().getRawPath();\n//       String[] originalParts=StringUtils.tokenizeToStringArray(path,\"/\");\n//       StringBuilder newPath=new StringBuilder(\"/\");\n//       for (int i=0; i < originalParts.length; i++) {\n//         if (i >= config.getParts()) {\n//           if (newPath.length() > 1) {\n//             newPath.append('/');\n//           }\n//           newPath.append(originalParts[i]);\n//         }\n//       }\n//       if (newPath.length() > 1 && path.endsWith(\"/\")) {\n//         newPath.append('/');\n//       }\n//       ServerHttpRequest newRequest=request.mutate().path(newPath.toString()).build();\n//       exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR,newRequest.getURI());\n//       return chain.filter(exchange.mutate().request(newRequest).build());\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(StripPrefixGatewayFilterFactory.this).append(\"parts\",config.getParts()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/TokenRelayGatewayFilterFactory.java\n// --------------------------------------------------\n// public GatewayFilter apply(){\n//   return apply((NameConfig)null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/TokenRelayGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(NameConfig config){\n//   String defaultClientRegistrationId=(config == null) ? null : config.getName();\n//   return (exchange,chain) -> exchange.getPrincipal().filter(principal -> principal instanceof Authentication).cast(Authentication.class).flatMap(principal -> authorizationRequest(defaultClientRegistrationId,principal)).flatMap(this::authorizedClient).map(OAuth2AuthorizedClient::getAccessToken).map(token -> withBearerAuth(exchange,token)).defaultIfEmpty(exchange).flatMap(chain::filter);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/cache/LocalResponseCacheGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override @SuppressWarnings({\"unchecked\",\"rawtypes\"}) public GatewayFilter apply(RouteCacheConfiguration config){\n//   LocalResponseCacheProperties cacheProperties=mapRouteCacheConfig(config);\n//   Caffeine caffeine=LocalResponseCacheUtils.createCaffeine(cacheProperties);\n//   String cacheName=config.getRouteId() + \"-cache\";\n//   caffeineCacheManager.registerCustomCache(cacheName,caffeine.build());\n//   Cache routeCache=caffeineCacheManager.getCache(cacheName);\n//   return new ResponseCacheGatewayFilter(cacheManagerFactory.create(routeCache,cacheProperties.getTimeToLive(),requestOptions));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/rewrite/ModifyRequestBodyGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override @SuppressWarnings(\"unchecked\") public GatewayFilter apply(Config config){\n//   return new GatewayFilter(){\n//     @Override public Mono<Void> filter(    ServerWebExchange exchange,    GatewayFilterChain chain){\n//       ParameterizedTypeReference inClass=config.getInClass();\n//       ServerRequest serverRequest=ServerRequest.create(exchange,messageReaders);\n//       Mono<?> modifiedBody=serverRequest.bodyToMono(inClass).flatMap(originalBody -> config.getRewriteFunction().apply(exchange,originalBody)).switchIfEmpty(Mono.defer(() -> (Mono)config.getRewriteFunction().apply(exchange,null)));\n//       BodyInserter bodyInserter=BodyInserters.fromPublisher(modifiedBody,config.getOutClass());\n//       HttpHeaders headers=new HttpHeaders();\n//       headers.putAll(exchange.getRequest().getHeaders());\n//       headers.remove(HttpHeaders.CONTENT_LENGTH);\n//       if (config.getContentType() != null) {\n//         headers.set(HttpHeaders.CONTENT_TYPE,config.getContentType());\n//       }\n//       CachedBodyOutputMessage outputMessage=new CachedBodyOutputMessage(exchange,headers);\n//       return bodyInserter.insert(outputMessage,new BodyInserterContext()).then(Mono.defer(() -> {\n//         ServerHttpRequest decorator=decorate(exchange,headers,outputMessage);\n//         return chain.filter(exchange.mutate().request(decorator).build());\n//       }\n// )).onErrorResume((Function<Throwable,Mono<Void>>)throwable -> release(exchange,outputMessage,throwable));\n//     }\n//     @Override public String toString(){\n//       return filterToStringCreator(ModifyRequestBodyGatewayFilterFactory.this).append(\"Content type\",config.getContentType()).append(\"In class\",config.getInClass()).append(\"Out class\",config.getOutClass()).toString();\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/rewrite/ModifyResponseBodyGatewayFilterFactory.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   ModifyResponseGatewayFilter gatewayFilter=new ModifyResponseGatewayFilter(config);\n//   gatewayFilter.setFactory(this);\n//   return gatewayFilter;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/actuate/GatewayControllerEndpointTests.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Object config){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/RedisRouteDefinitionRepositoryTests.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Object config){\n//   return (exchange,chain) -> chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/RouteDefinitionRouteLocatorTests.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Object config){\n//   return new OrderedGatewayFilter((exchange,chain) -> chain.filter(exchange),9999);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/RouteConstructionIntegrationTests.java\n// --------------------------------------------------\n// @Override public GatewayFilter apply(Config config){\n//   throw new AssertionError(\"Stop right now!\");\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RemoveRequestParameterGatewayFilterFactory\n\t\textends AbstractGatewayFilterFactory<AbstractGatewayFilterFactory.NameConfig> {\n\n\tpublic RemoveRequestParameterGatewayFilterFactory() {\n\t\tsuper(NameConfig.class);\n\t}\n\n\t@Override\n\tpublic List<String> shortcutFieldOrder() {\n\t\treturn Arrays.asList(NAME_KEY);\n\t}\n\n\t@Override\n\tpublic GatewayFilter apply(NameConfig config) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/204", "ground_truth": "\n\t\treturn new GatewayFilter() {\n\t\t\t@Override\n\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\t\t\tServerHttpRequest request = exchange.getRequest();\n\t\t\t\tMultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>(request.getQueryParams());\n\t\t\t\tqueryParams.remove(config.getName());\n\n\t\t\t\tURI newUri = UriComponentsBuilder.fromUri(request.getURI())\n\t\t\t\t\t\t.replaceQueryParams(unmodifiableMultiValueMap(queryParams)).build().toUri();\n\n\t\t\t\tServerHttpRequest updatedRequest = exchange.getRequest().mutate().uri(newUri).build();\n\n\t\t\t\treturn chain.filter(exchange.mutate().request(updatedRequest).build());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn filterToStringCreator(RemoveRequestParameterGatewayFilterFactory.this)\n\t\t\t\t\t\t.append(\"name\", config.getName()).toString();\n\t\t\t}\n\t\t};\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "filter", "factory", "RemoveRequestParameterGatewayFilterFactory.java"], "context_start_lineno": 0, "function_name": "apply", "left_context": "class RemoveRequestParameterGatewayFilterFactory\n\t\textends AbstractGatewayFilterFactory<AbstractGatewayFilterFactory.NameConfig> {\n\n\tpublic RemoveRequestParameterGatewayFilterFactory() {\n\t\tsuper(NameConfig.class);\n\t}\n\n\t@Override\n\tpublic List<String> shortcutFieldOrder() {\n\t\treturn Arrays.asList(NAME_KEY);\n\t}\n\n\t@Override\n\tpublic GatewayFilter apply(NameConfig config) {", "right_context": "}\n\n}", "class_name": "RemoveRequestParameterGatewayFilterFactory", "return_type": "GatewayFilter", "parameters": [{"type": "NameConfig", "name": "config"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RoutePredicateHandlerMapping extends AbstractHandlerMapping {\n\n\tprivate final FilteringWebHandler webHandler;\n\n\tprivate final RouteLocator routeLocator;\n\n\tprivate final Integer managementPort;\n\n\tprivate final ManagementPortType managementPortType;\n\n\tpublic RoutePredicateHandlerMapping(FilteringWebHandler webHandler, RouteLocator routeLocator,\n\t\t\tGlobalCorsProperties globalCorsProperties, Environment environment) {\n\t\tthis.webHandler = webHandler;\n\t\tthis.routeLocator = routeLocator;\n\n\t\tthis.managementPort = getPortProperty(environment, \"management.server.\");\n\t\tthis.managementPortType = getManagementPortType(environment);\n\t\tsetOrder(environment.getProperty(GatewayProperties.PREFIX + \".handler-mapping.order\", Integer.class, 1));\n\t\tsetCorsConfigurations(globalCorsProperties.getCorsConfigurations());\n\t}\n\n\tprivate ManagementPortType getManagementPortType(Environment environment) {\n\t\tInteger serverPort = getPortProperty(environment, \"server.\");\n\t\tif (this.managementPort != null && this.managementPort < 0) {\n\t\t\treturn DISABLED;\n\t\t}\n\t\treturn ((this.managementPort == null || (serverPort == null && this.managementPort.equals(8080))\n\t\t\t\t|| (this.managementPort != 0 && this.managementPort.equals(serverPort))) ? SAME : DIFFERENT);\n\t}\n\n\tprivate static Integer getPortProperty(Environment environment, String prefix) {\n\t\treturn environment.getProperty(prefix + \"port\", Integer.class);\n\t}\n\n\t@Override\n\tprotected Mono<?> getHandlerInternal(ServerWebExchange exchange) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tprotected CorsConfiguration getCorsConfiguration(Object handler, ServerWebExchange exchange) {\n\t\t// TODO: support cors configuration via properties on a route see gh-229\n\t\t// see RequestMappingHandlerMapping.initCorsConfiguration()\n\t\t// also see\n\t\t// https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsWebFilterTests.java\n\t\treturn super.getCorsConfiguration(handler, exchange);\n\t}\n\n\t// TODO: get desc from factory?\n\tprivate String getExchangeDesc(ServerWebExchange exchange) {\n\t\tStringBuilder out = new StringBuilder();\n\t\tout.append(\"Exchange: \");\n\t\tout.append(exchange.getRequest().getMethod());\n\t\tout.append(\" \");\n\t\tout.append(exchange.getRequest().getURI());\n\t\treturn out.toString();\n\t}\n\n\tprotected Mono<Route> lookupRoute(ServerWebExchange exchange) {\n\t\treturn this.routeLocator.getRoutes()\n\t\t\t\t// individually filter routes so that filterWhen error delaying is not a\n\t\t\t\t// problem\n\t\t\t\t.concatMap(route -> Mono.just(route).filterWhen(r -> {\n\t\t\t\t\t// add the current route we are testing\n\t\t\t\t\texchange.getAttributes().put(GATEWAY_PREDICATE_ROUTE_ATTR, r.getId());\n\t\t\t\t\treturn r.getPredicate().apply(exchange);\n\t\t\t\t})\n\t\t\t\t\t\t// instead of immediately stopping main flux due to error, log and\n\t\t\t\t\t\t// swallow it\n\t\t\t\t\t\t.doOnError(e -> logger.error(\"Error applying predicate for route: \" + route.getId(), e))\n\t\t\t\t\t\t.onErrorResume(e -> Mono.empty()))\n\t\t\t\t// .defaultIfEmpty() put a static Route not found\n\t\t\t\t// or .switchIfEmpty()\n\t\t\t\t// .switchIfEmpty(Mono.<Route>empty().log(\"noroute\"))\n\t\t\t\t.next()\n\t\t\t\t// TODO: error handling\n\t\t\t\t.map(route -> {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Route matched: \" + route.getId());\n\t\t\t\t\t}\n\t\t\t\t\tvalidateRoute(route, exchange);\n\t\t\t\t\treturn route;\n\t\t\t\t});\n\n\t\t/*\n\t\t * TODO: trace logging if (logger.isTraceEnabled()) {\n\t\t * logger.trace(\"RouteDefinition did not match: \" + routeDefinition.getId()); }\n\t\t */\n\t}\n\n\t/**\n\t * Validate the given handler against the current request.\n\t * <p>\n\t * The default implementation is empty. Can be overridden in subclasses, for example\n\t * to enforce specific preconditions expressed in URL mappings.\n\t * @param route the Route object to validate\n\t * @param exchange current exchange\n\t * @throws Exception if validation failed\n\t */\n\t@SuppressWarnings(\"UnusedParameters\")\n\tprotected void validateRoute(Route route, ServerWebExchange exchange) {\n\t}\n\n\tprotected String getSimpleName() {\n\t\treturn \"RoutePredicateHandlerMapping\";\n\t}\n\n\tpublic enum ManagementPortType {\n\n\t\t/**\n\t\t * The management port has been disabled.\n\t\t */\n\t\tDISABLED,\n\n\t\t/**\n\t\t * The management port is the same as the server port.\n\t\t */\n\t\tSAME,\n\n\t\t/**\n\t\t * The management port and server port are different.\n\t\t */\n\t\tDIFFERENT;\n\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/221", "ground_truth": "\n\t\t// don't handle requests on management port if set and different than server port\n\t\tif (this.managementPortType == DIFFERENT && this.managementPort != null\n\t\t\t\t&& exchange.getRequest().getLocalAddress() != null\n\t\t\t\t&& exchange.getRequest().getLocalAddress().getPort() == this.managementPort) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\texchange.getAttributes().put(GATEWAY_HANDLER_MAPPER_ATTR, getSimpleName());\n\n\t\treturn Mono.deferContextual(contextView -> {\n\t\t\texchange.getAttributes().put(GATEWAY_REACTOR_CONTEXT_ATTR, contextView);\n\t\t\treturn lookupRoute(exchange)\n\t\t\t\t\t// .log(\"route-predicate-handler-mapping\", Level.FINER) //name this\n\t\t\t\t\t.map((Function<Route, ?>) r -> {\n\t\t\t\t\t\texchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Mapping [\" + getExchangeDesc(exchange) + \"] to \" + r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texchange.getAttributes().put(GATEWAY_ROUTE_ATTR, r);\n\t\t\t\t\t\treturn webHandler;\n\t\t\t\t\t}).switchIfEmpty(Mono.empty().then(Mono.fromRunnable(() -> {\n\t\t\t\t\t\texchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\tlogger.trace(\"No RouteDefinition found for [\" + getExchangeDesc(exchange) + \"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\t});\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "handler", "RoutePredicateHandlerMapping.java"], "context_start_lineno": 0, "function_name": "getHandlerInternal", "left_context": "class RoutePredicateHandlerMapping extends AbstractHandlerMapping {\n\n\tprivate final FilteringWebHandler webHandler;\n\n\tprivate final RouteLocator routeLocator;\n\n\tprivate final Integer managementPort;\n\n\tprivate final ManagementPortType managementPortType;\n\n\tpublic RoutePredicateHandlerMapping(FilteringWebHandler webHandler, RouteLocator routeLocator,\n\t\t\tGlobalCorsProperties globalCorsProperties, Environment environment) {\n\t\tthis.webHandler = webHandler;\n\t\tthis.routeLocator = routeLocator;\n\n\t\tthis.managementPort = getPortProperty(environment, \"management.server.\");\n\t\tthis.managementPortType = getManagementPortType(environment);\n\t\tsetOrder(environment.getProperty(GatewayProperties.PREFIX + \".handler-mapping.order\", Integer.class, 1));\n\t\tsetCorsConfigurations(globalCorsProperties.getCorsConfigurations());\n\t}\n\n\tprivate ManagementPortType getManagementPortType(Environment environment) {\n\t\tInteger serverPort = getPortProperty(environment, \"server.\");\n\t\tif (this.managementPort != null && this.managementPort < 0) {\n\t\t\treturn DISABLED;\n\t\t}\n\t\treturn ((this.managementPort == null || (serverPort == null && this.managementPort.equals(8080))\n\t\t\t\t|| (this.managementPort != 0 && this.managementPort.equals(serverPort))) ? SAME : DIFFERENT);\n\t}\n\n\tprivate static Integer getPortProperty(Environment environment, String prefix) {\n\t\treturn environment.getProperty(prefix + \"port\", Integer.class);\n\t}\n\n\t@Override\n\tprotected Mono<?> getHandlerInternal(ServerWebExchange exchange) {", "right_context": "}\n\n\t@Override\n\tprotected CorsConfiguration getCorsConfiguration(Object handler, ServerWebExchange exchange) {\n\t\t// TODO: support cors configuration via properties on a route see gh-229\n\t\t// see RequestMappingHandlerMapping.initCorsConfiguration()\n\t\t// also see\n\t\t// https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsWebFilterTests.java\n\t\treturn super.getCorsConfiguration(handler, exchange);\n\t}\n\n\t// TODO: get desc from factory?\n\tprivate String getExchangeDesc(ServerWebExchange exchange) {\n\t\tStringBuilder out = new StringBuilder();\n\t\tout.append(\"Exchange: \");\n\t\tout.append(exchange.getRequest().getMethod());\n\t\tout.append(\" \");\n\t\tout.append(exchange.getRequest().getURI());\n\t\treturn out.toString();\n\t}\n\n\tprotected Mono<Route> lookupRoute(ServerWebExchange exchange) {\n\t\treturn this.routeLocator.getRoutes()\n\t\t\t\t// individually filter routes so that filterWhen error delaying is not a\n\t\t\t\t// problem\n\t\t\t\t.concatMap(route -> Mono.just(route).filterWhen(r -> {\n\t\t\t\t\t// add the current route we are testing\n\t\t\t\t\texchange.getAttributes().put(GATEWAY_PREDICATE_ROUTE_ATTR, r.getId());\n\t\t\t\t\treturn r.getPredicate().apply(exchange);\n\t\t\t\t})\n\t\t\t\t\t\t// instead of immediately stopping main flux due to error, log and\n\t\t\t\t\t\t// swallow it\n\t\t\t\t\t\t.doOnError(e -> logger.error(\"Error applying predicate for route: \" + route.getId(), e))\n\t\t\t\t\t\t.onErrorResume(e -> Mono.empty()))\n\t\t\t\t// .defaultIfEmpty() put a static Route not found\n\t\t\t\t// or .switchIfEmpty()\n\t\t\t\t// .switchIfEmpty(Mono.<Route>empty().log(\"noroute\"))\n\t\t\t\t.next()\n\t\t\t\t// TODO: error handling\n\t\t\t\t.map(route -> {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Route matched: \" + route.getId());\n\t\t\t\t\t}\n\t\t\t\t\tvalidateRoute(route, exchange);\n\t\t\t\t\treturn route;\n\t\t\t\t});\n\n\t\t/*\n\t\t * TODO: trace logging if (logger.isTraceEnabled()) {\n\t\t * logger.trace(\"RouteDefinition did not match: \" + routeDefinition.getId()); }\n\t\t */\n\t}\n\n\t/**\n\t * Validate the given handler against the current request.\n\t * <p>\n\t * The default implementation is empty. Can be overridden in subclasses, for example\n\t * to enforce specific preconditions expressed in URL mappings.\n\t * @param route the Route object to validate\n\t * @param exchange current exchange\n\t * @throws Exception if validation failed\n\t */\n\t@SuppressWarnings(\"UnusedParameters\")\n\tprotected void validateRoute(Route route, ServerWebExchange exchange) {\n\t}\n\n\tprotected String getSimpleName() {\n\t\treturn \"RoutePredicateHandlerMapping\";\n\t}\n\n\tpublic enum ManagementPortType {\n\n\t\t/**\n\t\t * The management port has been disabled.\n\t\t */\n\t\tDISABLED,\n\n\t\t/**\n\t\t * The management port is the same as the server port.\n\t\t */\n\t\tSAME,\n\n\t\t/**\n\t\t * The management port and server port are different.\n\t\t */\n\t\tDIFFERENT;\n\n\t}\n\n}", "class_name": "RoutePredicateHandlerMapping", "return_type": "Mono<?>", "parameters": [{"type": "ServerWebExchange", "name": "exchange"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> rewritePath(String regexp,String replacement){\n//   return ofRequestProcessor(BeforeFilterFunctions.rewritePath(regexp,replacement));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> rewriteResponseHeader(String name,String regexp,String replacement){\n//   return ofResponseProcessor(AfterFilterFunctions.rewriteResponseHeader(name,regexp,replacement));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> routeId(String routeId){\n//   return ofRequestProcessor(BeforeFilterFunctions.routeId(routeId));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setPath(String path){\n//   return ofRequestProcessor(BeforeFilterFunctions.setPath(path));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setRequestHeader(String name,String value){\n//   return ofRequestProcessor(BeforeFilterFunctions.setRequestHeader(name,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setRequestHostHeader(String host){\n//   return ofRequestProcessor(BeforeFilterFunctions.setRequestHostHeader(host));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setResponseHeader(String name,String value){\n//   return ofResponseProcessor(AfterFilterFunctions.setResponseHeader(name,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> stripPrefix(){\n//   return stripPrefix(1);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> stripPrefix(int parts){\n//   return ofRequestProcessor(BeforeFilterFunctions.stripPrefix(parts));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> setStatus(int statusCode){\n//   return setStatus(new HttpStatusHolder(null,statusCode));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> setStatus(HttpStatusCode statusCode){\n//   return setStatus(new HttpStatusHolder(statusCode,null));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setStatus(HttpStatusHolder statusCode){\n//   return ofResponseProcessor(AfterFilterFunctions.setStatus(statusCode));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/LoadBalancerFilterFunctions.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> lb(String serviceId){\n//   return lb(serviceId,LoadBalancerUriTools::reconstructURI);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/LoadBalancerFilterFunctions.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> lb(String serviceId,BiFunction<ServiceInstance,URI,URI> reconstructUriFunction){\n//   return (request,next) -> {\n//     LoadBalancerClientFactory clientFactory=getApplicationContext(request).getBean(LoadBalancerClientFactory.class);\n//     Set<LoadBalancerLifecycle> supportedLifecycleProcessors=LoadBalancerLifecycleValidator.getSupportedLifecycleProcessors(clientFactory.getInstances(serviceId,LoadBalancerLifecycle.class),RequestDataContext.class,ResponseData.class,ServiceInstance.class);\n//     RequestData requestData=new RequestData(request.method(),request.uri(),request.headers().asHttpHeaders(),buildCookies(request.cookies()),request.attributes());\n//     DefaultRequest<RequestDataContext> lbRequest=new DefaultRequest<>(new RequestDataContext(requestData,getHint(clientFactory,serviceId)));\n//     LoadBalancerClient loadBalancerClient=clientFactory.getInstance(serviceId,LoadBalancerClient.class);\n//     if (loadBalancerClient == null) {\n//       throw new HttpServerErrorException(HttpStatus.SERVICE_UNAVAILABLE,\"No loadbalancer available for \" + serviceId);\n//     }\n//     supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStart(lbRequest));\n//     ServiceInstance retrievedInstance=loadBalancerClient.choose(serviceId,lbRequest);\n//     if (retrievedInstance == null) {\n//       supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(new CompletionContext<>(CompletionContext.Status.DISCARD,lbRequest)));\n//       throw new HttpServerErrorException(HttpStatus.SERVICE_UNAVAILABLE,\"Unable to find instance for \" + serviceId);\n//     }\n//     URI uri=request.uri();\n//     String scheme=retrievedInstance.isSecure() ? \"https\" : \"http\";\n//     DelegatingServiceInstance serviceInstance=new DelegatingServiceInstance(retrievedInstance,scheme);\n//     URI requestUrl=reconstructUriFunction.apply(serviceInstance,uri);\n//     if (log.isTraceEnabled()) {\n//       log.trace(\"LoadBalancerClientFilter url chosen: \" + requestUrl);\n//     }\n//     MvcUtils.setRequestUrl(request,requestUrl);\n//     DefaultResponse defaultResponse=new DefaultResponse(serviceInstance);\n//     supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStartRequest(lbRequest,defaultResponse));\n//     try {\n//       ServerResponse serverResponse=next.handle(request);\n//       supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(new CompletionContext<>(CompletionContext.Status.SUCCESS,lbRequest,defaultResponse,serverResponse)));\n//       return serverResponse;\n//     }\n//  catch (    Exception e) {\n//       supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(new CompletionContext<>(CompletionContext.Status.FAILED,e,lbRequest,defaultResponse)));\n//       throw new RuntimeException(e);\n//     }\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/RetryFilterFunctions.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> retry(int retries){\n//   return retry(config -> config.setRetries(retries));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/RetryFilterFunctions.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> retry(Consumer<RetryConfig> configConsumer){\n//   RetryConfig config=new RetryConfig();\n//   configConsumer.accept(config);\n//   return retry(config);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/RetryFilterFunctions.java\n// --------------------------------------------------\n// @Shortcut @Configurable public static HandlerFilterFunction<ServerResponse,ServerResponse> retry(RetryConfig config){\n//   RetryTemplateBuilder retryTemplateBuilder=RetryTemplate.builder();\n//   CompositeRetryPolicy compositeRetryPolicy=new CompositeRetryPolicy();\n//   Map<Class<? extends Throwable>,Boolean> retryableExceptions=new HashMap<>();\n//   config.getExceptions().forEach(exception -> retryableExceptions.put(exception,true));\n//   SimpleRetryPolicy simpleRetryPolicy=new SimpleRetryPolicy(config.getRetries(),retryableExceptions);\n//   compositeRetryPolicy.setPolicies(Arrays.asList(simpleRetryPolicy,new HttpRetryPolicy(config)).toArray(new RetryPolicy[0]));\n//   RetryTemplate retryTemplate=retryTemplateBuilder.customPolicy(compositeRetryPolicy).build();\n//   return (request,next) -> retryTemplate.execute(context -> {\n//     ServerResponse serverResponse=next.handle(request);\n//     if (isRetryableStatusCode(serverResponse.statusCode(),config) && isRetryableMethod(request.method(),config)) {\n//       throw new RetryException(request,serverResponse);\n//     }\n//     return serverResponse;\n//   }\n// );\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/TokenRelayFilterFunctions.java\n// --------------------------------------------------\n// @Shortcut public static HandlerFilterFunction<ServerResponse,ServerResponse> tokenRelay(){\n//   return (request,next) -> {\n//     Principal principle=request.servletRequest().getUserPrincipal();\n//     if (principle instanceof OAuth2AuthenticationToken) {\n//       String clientRegistrationId=token.getAuthorizedClientRegistrationId();\n//       OAuth2AuthorizeRequest authorizeRequest=OAuth2AuthorizeRequest.withClientRegistrationId(clientRegistrationId).principal(token).build();\n//       OAuth2AuthorizedClientManager clientManager=getApplicationContext(request).getBean(OAuth2AuthorizedClientManager.class);\n//       OAuth2AuthorizedClient authorizedClient=clientManager.authorize(authorizeRequest);\n//       OAuth2AccessToken accessToken=authorizedClient.getAccessToken();\n//       ServerRequest modified=ServerRequest.from(request).headers(httpHeaders -> httpHeaders.setBearerAuth(accessToken.getTokenValue())).build();\n//       return next.handle(modified);\n//     }\n//     return next.handle(request);\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/TestFilterSupplier.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> localServerPortUriResolver(){\n//   return new LocalServerPortUriResolver();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/TestFilterSupplier.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> httpbinUriResolver(){\n//   return new HttpbinUriResolver();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CircuitBreakerFilterFunctions {\n\n\tprivate CircuitBreakerFilterFunctions() {\n\t}\n\n\t@Shortcut\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(String id) {\n\t\treturn circuitBreaker(config -> config.setId(id));\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(String id, URI fallbackUri) {\n\t\treturn circuitBreaker(config -> config.setId(id).setFallbackUri(fallbackUri));\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(String id, String fallbackPath) {\n\t\treturn circuitBreaker(config -> config.setId(id).setFallbackPath(fallbackPath));\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(\n\t\t\tConsumer<CircuitBreakerConfig> configConsumer) {\n\t\tCircuitBreakerConfig config = new CircuitBreakerConfig();\n\t\tconfigConsumer.accept(config);\n\t\treturn circuitBreaker(config);\n\t}\n\n\t@Shortcut\n\t@Configurable\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(CircuitBreakerConfig config) {<FILL_FUNCTION_BODY>}\n\n\tpublic static class CircuitBreakerConfig {\n\n\t\tprivate String id;\n\n\t\tprivate String fallbackPath;\n\n\t\tprivate Set<String> statusCodes = new HashSet<>();\n\n\t\tpublic String getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setId(String id) {\n\t\t\tthis.id = id;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic String getFallbackPath() {\n\t\t\treturn fallbackPath;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setFallbackUri(String fallbackUri) {\n\t\t\tAssert.notNull(fallbackUri, \"fallbackUri String may not be null\");\n\t\t\tsetFallbackUri(URI.create(fallbackUri));\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setFallbackUri(URI fallbackUri) {\n\t\t\tif (fallbackUri != null) {\n\t\t\t\tAssert.isTrue(fallbackUri.getScheme().equalsIgnoreCase(\"forward\"),\n\t\t\t\t\t\t() -> \"Scheme must be forward, but is \" + fallbackUri.getScheme());\n\t\t\t\tfallbackPath = fallbackUri.getPath();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfallbackPath = null;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setFallbackPath(String fallbackPath) {\n\t\t\tthis.fallbackPath = fallbackPath;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Set<String> getStatusCodes() {\n\t\t\treturn statusCodes;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setStatusCodes(String... statusCodes) {\n\t\t\treturn setStatusCodes(new LinkedHashSet<>(Arrays.asList(statusCodes)));\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setStatusCodes(Set<String> statusCodes) {\n\t\t\tthis.statusCodes = statusCodes;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tpublic static class CircuitBreakerStatusCodeException extends ResponseStatusException {\n\n\t\tpublic CircuitBreakerStatusCodeException(HttpStatusCode statusCode) {\n\t\t\tsuper(statusCode);\n\t\t}\n\n\t}\n\n\tpublic static class FilterSupplier extends SimpleFilterSupplier {\n\n\t\tpublic FilterSupplier() {\n\t\t\tsuper(CircuitBreakerFilterFunctions.class);\n\t\t}\n\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/241", "ground_truth": "\n\t\tSet<HttpStatusCode> failureStatuses = config.getStatusCodes().stream()\n\t\t\t\t.map(status -> HttpStatusHolder.valueOf(status).resolve()).collect(Collectors.toSet());\n\t\treturn (request, next) -> {\n\t\t\tCircuitBreakerFactory<?, ?> circuitBreakerFactory = MvcUtils.getApplicationContext(request)\n\t\t\t\t\t.getBean(CircuitBreakerFactory.class);\n\t\t\t// TODO: cache\n\t\t\tCircuitBreaker circuitBreaker = circuitBreakerFactory.create(config.getId());\n\t\t\treturn circuitBreaker.run(() -> {\n\t\t\t\ttry {\n\t\t\t\t\tServerResponse serverResponse = next.handle(request);\n\t\t\t\t\t// on configured status code, throw exception\n\t\t\t\t\tif (failureStatuses.contains(serverResponse.statusCode())) {\n\t\t\t\t\t\tthrow new CircuitBreakerStatusCodeException(serverResponse.statusCode());\n\t\t\t\t\t}\n\t\t\t\t\treturn serverResponse;\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}, throwable -> {\n\t\t\t\t// if no fallback\n\t\t\t\tif (!StringUtils.hasText(config.getFallbackPath())) {\n\t\t\t\t\t// if timeout exception, GATEWAY_TIMEOUT\n\t\t\t\t\tif (throwable instanceof TimeoutException) {\n\t\t\t\t\t\tthrow new ResponseStatusException(HttpStatus.GATEWAY_TIMEOUT, throwable.getMessage(),\n\t\t\t\t\t\t\t\tthrowable);\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: if not permitted (like circuit open), SERVICE_UNAVAILABLE\n\t\t\t\t\t// TODO: if resume without error, return ok response?\n\t\t\t\t\tthrow new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, throwable.getMessage(),\n\t\t\t\t\t\t\tthrowable);\n\t\t\t\t}\n\n\t\t\t\t// add the throwable as an attribute. That way, if the fallback is a\n\t\t\t\t// different gateway route, it can use the fallbackHeaders() filter\n\t\t\t\t// to convert it to headers.\n\t\t\t\tMvcUtils.putAttribute(request, MvcUtils.CIRCUITBREAKER_EXECUTION_EXCEPTION_ATTR, throwable);\n\n\t\t\t\t// handle fallback\n\t\t\t\t// ok() is wrong, but will be overwritten by the forwarded request\n\t\t\t\treturn GatewayServerResponse.ok().build((httpServletRequest, httpServletResponse) -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tString expandedFallback = MvcUtils.expand(request, config.getFallbackPath());\n\t\t\t\t\t\trequest.servletRequest().getServletContext().getRequestDispatcher(expandedFallback)\n\t\t\t\t\t\t\t\t.forward(httpServletRequest, httpServletResponse);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ServletException | IOException e) {\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "filter", "CircuitBreakerFilterFunctions.java"], "context_start_lineno": 0, "function_name": "circuitBreaker", "left_context": "class CircuitBreakerFilterFunctions {\n\n\tprivate CircuitBreakerFilterFunctions() {\n\t}\n\n\t@Shortcut\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(String id) {\n\t\treturn circuitBreaker(config -> config.setId(id));\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(String id, URI fallbackUri) {\n\t\treturn circuitBreaker(config -> config.setId(id).setFallbackUri(fallbackUri));\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(String id, String fallbackPath) {\n\t\treturn circuitBreaker(config -> config.setId(id).setFallbackPath(fallbackPath));\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(\n\t\t\tConsumer<CircuitBreakerConfig> configConsumer) {\n\t\tCircuitBreakerConfig config = new CircuitBreakerConfig();\n\t\tconfigConsumer.accept(config);\n\t\treturn circuitBreaker(config);\n\t}\n\n\t@Shortcut\n\t@Configurable\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> circuitBreaker(CircuitBreakerConfig config) {", "right_context": "}\n\n\tpublic static class CircuitBreakerConfig {\n\n\t\tprivate String id;\n\n\t\tprivate String fallbackPath;\n\n\t\tprivate Set<String> statusCodes = new HashSet<>();\n\n\t\tpublic String getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setId(String id) {\n\t\t\tthis.id = id;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic String getFallbackPath() {\n\t\t\treturn fallbackPath;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setFallbackUri(String fallbackUri) {\n\t\t\tAssert.notNull(fallbackUri, \"fallbackUri String may not be null\");\n\t\t\tsetFallbackUri(URI.create(fallbackUri));\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setFallbackUri(URI fallbackUri) {\n\t\t\tif (fallbackUri != null) {\n\t\t\t\tAssert.isTrue(fallbackUri.getScheme().equalsIgnoreCase(\"forward\"),\n\t\t\t\t\t\t() -> \"Scheme must be forward, but is \" + fallbackUri.getScheme());\n\t\t\t\tfallbackPath = fallbackUri.getPath();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfallbackPath = null;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setFallbackPath(String fallbackPath) {\n\t\t\tthis.fallbackPath = fallbackPath;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Set<String> getStatusCodes() {\n\t\t\treturn statusCodes;\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setStatusCodes(String... statusCodes) {\n\t\t\treturn setStatusCodes(new LinkedHashSet<>(Arrays.asList(statusCodes)));\n\t\t}\n\n\t\tpublic CircuitBreakerConfig setStatusCodes(Set<String> statusCodes) {\n\t\t\tthis.statusCodes = statusCodes;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tpublic static class CircuitBreakerStatusCodeException extends ResponseStatusException {\n\n\t\tpublic CircuitBreakerStatusCodeException(HttpStatusCode statusCode) {\n\t\t\tsuper(statusCode);\n\t\t}\n\n\t}\n\n\tpublic static class FilterSupplier extends SimpleFilterSupplier {\n\n\t\tpublic FilterSupplier() {\n\t\t\tsuper(CircuitBreakerFilterFunctions.class);\n\t\t}\n\n\t}\n\n}", "class_name": "CircuitBreakerFilterFunctions", "return_type": "HandlerFilterFunction<ServerResponse,ServerResponse>", "parameters": [{"type": "CircuitBreakerConfig", "name": "config"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LoadBalancerHandlerSupplier implements HandlerSupplier {\n\n\t@Override\n\tpublic Collection<Method> get() {\n\t\treturn Arrays.asList(getClass().getMethods());\n\t}\n\n\tpublic static HandlerDiscoverer.Result lb(RouteProperties routeProperties) {\n\t\treturn lb(routeProperties.getUri());\n\t}\n\n\tpublic static HandlerDiscoverer.Result lb(URI uri) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/248", "ground_truth": "\n\t\t// TODO: how to do something other than http\n\t\treturn new HandlerDiscoverer.Result(HandlerFunctions.http(),\n\t\t\t\tCollections.singletonList(LoadBalancerFilterFunctions.lb(uri.getHost())));\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "filter", "LoadBalancerHandlerSupplier.java"], "context_start_lineno": 0, "function_name": "lb", "left_context": "class LoadBalancerHandlerSupplier implements HandlerSupplier {\n\n\t@Override\n\tpublic Collection<Method> get() {\n\t\treturn Arrays.asList(getClass().getMethods());\n\t}\n\n\tpublic static HandlerDiscoverer.Result lb(RouteProperties routeProperties) {\n\t\treturn lb(routeProperties.getUri());\n\t}\n\n\tpublic static HandlerDiscoverer.Result lb(URI uri) {", "right_context": "}\n\n}", "class_name": "LoadBalancerHandlerSupplier", "return_type": "HandlerDiscoverer.Result", "parameters": [{"type": "URI", "name": "uri"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GatewayEndpointInfo {\n\n\tprivate String href;\n\n\tprivate List<String> methods;\n\n\tpublic String getHref() {\n\t\treturn href;\n\t}\n\n\tpublic void setHref(String href) {\n\t\tthis.href = href;\n\t}\n\n\tpublic String[] getMethods() {\n\t\treturn methods.stream().toArray(String[]::new);\n\t}\n\n\tGatewayEndpointInfo(String href, String method) {\n\t\tthis.href = href;\n\t\tthis.methods = Collections.singletonList(method);\n\t}\n\n\tGatewayEndpointInfo(String href, List<String> methods) {\n\t\tthis.href = href;\n\t\tthis.methods = methods;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(href, methods);\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/249", "ground_truth": "\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tGatewayEndpointInfo that = (GatewayEndpointInfo) o;\n\t\treturn Objects.equals(href, that.href) && Objects.equals(methods, that.methods);\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "actuate", "GatewayEndpointInfo.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class GatewayEndpointInfo {\n\n\tprivate String href;\n\n\tprivate List<String> methods;\n\n\tpublic String getHref() {\n\t\treturn href;\n\t}\n\n\tpublic void setHref(String href) {\n\t\tthis.href = href;\n\t}\n\n\tpublic String[] getMethods() {\n\t\treturn methods.stream().toArray(String[]::new);\n\t}\n\n\tGatewayEndpointInfo(String href, String method) {\n\t\tthis.href = href;\n\t\tthis.methods = Collections.singletonList(method);\n\t}\n\n\tGatewayEndpointInfo(String href, List<String> methods) {\n\t\tthis.href = href;\n\t\tthis.methods = methods;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {", "right_context": "}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(href, methods);\n\t}\n\n}", "class_name": "GatewayEndpointInfo", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OperationMethodParameters implements OperationParameters {\n\n\tprivate final List<OperationParameter> operationParameters;\n\n\t/**\n\t * Create a new {@link OperationMethodParameters} instance.\n\t * @param method the source method\n\t * @param parameterNameDiscoverer the parameter name discoverer\n\t */\n\tOperationMethodParameters(Method method, ParameterNameDiscoverer parameterNameDiscoverer) {\n\t\tAssert.notNull(method, \"Method must not be null\");\n\t\tAssert.notNull(parameterNameDiscoverer, \"ParameterNameDiscoverer must not be null\");\n\t\tString[] parameterNames = parameterNameDiscoverer.getParameterNames(method);\n\t\tParameter[] parameters = method.getParameters();\n\t\tAssert.state(parameterNames != null, () -> \"Failed to extract parameter names for \" + method);\n\t\tthis.operationParameters = getOperationParameters(parameters, parameterNames);\n\t}\n\n\tprivate List<OperationParameter> getOperationParameters(Parameter[] parameters, String[] names) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic int getParameterCount() {\n\t\treturn this.operationParameters.size();\n\t}\n\n\t@Override\n\tpublic OperationParameter get(int index) {\n\t\treturn this.operationParameters.get(index);\n\t}\n\n\t@Override\n\tpublic Iterator<OperationParameter> iterator() {\n\t\treturn this.operationParameters.iterator();\n\t}\n\n\t@Override\n\tpublic Stream<OperationParameter> stream() {\n\t\treturn this.operationParameters.stream();\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/260", "ground_truth": "\n\t\tList<OperationParameter> operationParameters = new ArrayList<>(parameters.length);\n\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\toperationParameters.add(new OperationMethodParameter(names[i], parameters[i]));\n\t\t}\n\t\treturn Collections.unmodifiableList(operationParameters);\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "invoke", "reflect", "OperationMethodParameters.java"], "context_start_lineno": 0, "function_name": "getOperationParameters", "left_context": "class OperationMethodParameters implements OperationParameters {\n\n\tprivate final List<OperationParameter> operationParameters;\n\n\t/**\n\t * Create a new {@link OperationMethodParameters} instance.\n\t * @param method the source method\n\t * @param parameterNameDiscoverer the parameter name discoverer\n\t */\n\tOperationMethodParameters(Method method, ParameterNameDiscoverer parameterNameDiscoverer) {\n\t\tAssert.notNull(method, \"Method must not be null\");\n\t\tAssert.notNull(parameterNameDiscoverer, \"ParameterNameDiscoverer must not be null\");\n\t\tString[] parameterNames = parameterNameDiscoverer.getParameterNames(method);\n\t\tParameter[] parameters = method.getParameters();\n\t\tAssert.state(parameterNames != null, () -> \"Failed to extract parameter names for \" + method);\n\t\tthis.operationParameters = getOperationParameters(parameters, parameterNames);\n\t}\n\n\tprivate List<OperationParameter> getOperationParameters(Parameter[] parameters, String[] names) {", "right_context": "}\n\n\t@Override\n\tpublic int getParameterCount() {\n\t\treturn this.operationParameters.size();\n\t}\n\n\t@Override\n\tpublic OperationParameter get(int index) {\n\t\treturn this.operationParameters.get(index);\n\t}\n\n\t@Override\n\tpublic Iterator<OperationParameter> iterator() {\n\t\treturn this.operationParameters.iterator();\n\t}\n\n\t@Override\n\tpublic Stream<OperationParameter> stream() {\n\t\treturn this.operationParameters.stream();\n\t}\n\n}", "class_name": "OperationMethodParameters", "return_type": "List<OperationParameter>", "parameters": [{"type": "Parameter[]", "name": "parameters"}, {"type": "String[]", "name": "names"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/NettyRoutingFilterIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   ServerHttpResponse decorator=exchange.getResponse();\n//   for (int counter=0; counter < decorationIterations; counter++) {\n//     decorator=new ServerHttpResponseDecorator(decorator);\n//   }\n//   return chain.filter(exchange.mutate().response(decorator).build());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/CacheRequestBodyGatewayFilterFactoryTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   String body=exchange.getAttribute(ServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR);\n//   if (exceptNullBody) {\n//     assertThat(body).isNull();\n//   }\n//  else {\n//     assertThat(body).isEqualTo(bodyExcepted);\n//   }\n//   return chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/CacheRequestBodyGatewayFilterFactoryTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   exchange.getAttributes().put(ServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR,bodyToSetCache);\n//   return chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/CacheRequestBodyGatewayFilterFactoryTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   return chain.filter(exchange).doAfterTerminate(() -> {\n//     Object o=exchange.getAttributes().get(CacheRequestBodyGatewayFilterFactory.CACHED_ORIGINAL_REQUEST_BODY_BACKUP_ATTR);\n//     if (o instanceof PooledDataBuffer) {\n//       if (dataBuffer.isAllocated()) {\n//         exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n//         fail(\"DataBuffer is not released\");\n//       }\n//     }\n//   }\n// );\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/rewrite/ModifyRequestBodyGatewayFilterFactorySslTimeoutTests.java\n// --------------------------------------------------\n// @Override protected Mono<Void> release(ServerWebExchange exchange,CachedBodyOutputMessage outputMessage,Throwable throwable){\n//   if (outputMessage.isCached()) {\n//     count.incrementAndGet();\n//   }\n//   return super.release(exchange,outputMessage,throwable);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/builder/GatewayFilterSpecTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   return Mono.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/builder/GatewayFilterSpecTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   return Mono.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/BaseWebClientTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){\n//   if (exchange.getRequest().getPath().toString().contains(\"httpbin/httpbin\")) {\n//     return Mono.error(new IllegalStateException(\"recursive call to /httpbin\"));\n//   }\n//   return chain.filter(exchange);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/GatewayIntegrationTests.java\n// --------------------------------------------------\n// private static Mono<Void> postFilterWork(ServerWebExchange exchange){\n//   log.info(\"postFilterWork\");\n//   exchange.getResponse().getHeaders().add(\"X-Post-Header\",\"AddedAfterRoute\");\n//   return Mono.empty();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/HttpBinCompatibleController.java\n// --------------------------------------------------\n// @GetMapping(path=\"/gzip\",produces=MediaType.APPLICATION_JSON_VALUE) public Mono<Void> gzip(ServerWebExchange exchange) throws IOException {\n//   if (log.isDebugEnabled()) {\n//     log.debug(\"httpbin /gzip\");\n//   }\n//   String jsonResponse=OBJECT_MAPPER.writeValueAsString(\"httpbin compatible home\");\n//   byte[] bytes=jsonResponse.getBytes(StandardCharsets.UTF_8);\n//   ServerHttpResponse response=exchange.getResponse();\n//   response.getHeaders().add(HttpHeaders.CONTENT_ENCODING,\"gzip\");\n//   DataBufferFactory dataBufferFactory=response.bufferFactory();\n//   response.setStatusCode(HttpStatus.OK);\n//   ByteArrayOutputStream bos=new ByteArrayOutputStream();\n//   GZIPOutputStream is=new GZIPOutputStream(bos);\n//   FileCopyUtils.copy(bytes,is);\n//   byte[] gzippedResponse=bos.toByteArray();\n//   DataBuffer wrap=dataBufferFactory.wrap(gzippedResponse);\n//   return response.writeWith(Flux.just(wrap));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   infoRef.set(session.getHandshakeInfo());\n//   return session.receive().map(WebSocketMessage::getPayloadAsText).doOnNext(protocolRef::set).doOnError(protocolRef::set).then();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   return session.send(session.receive().doOnNext(WebSocketMessage::retain));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   String protocol=session.getHandshakeInfo().getSubProtocol();\n//   if (!StringUtils.hasText(protocol)) {\n//     return Mono.error(new IllegalStateException(\"Missing protocol\"));\n//   }\n//   List<String> protocols=session.getHandshakeInfo().getHeaders().get(SEC_WEBSOCKET_PROTOCOL);\n//   assertThat(protocols).contains(\"echo-v1,echo-v2\");\n//   WebSocketMessage message=session.textMessage(protocol != null ? protocol : \"none\");\n//   return session.send(Mono.just(message));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   HttpHeaders headers=session.getHandshakeInfo().getHeaders();\n//   if (!headers.containsKey(\"my-header\")) {\n//     return Mono.error(new IllegalStateException(\"Missing my-header\"));\n//   }\n//   String payload=\"my-header:\" + headers.getFirst(\"my-header\");\n//   WebSocketMessage message=session.textMessage(payload);\n//   return session.send(Mono.just(message));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   return Flux.never().mergeWith(session.close(CloseStatus.create(4999,\"server-close\"))).then();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   return session.closeStatus().doOnNext(serverCloseStatusSink::tryEmitValue).then();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/test/websocket/WebSocketIntegrationTests.java\n// --------------------------------------------------\n// @Override public Mono<Void> handle(WebSocketSession session){\n//   WebSocketMessage message=session.textMessage(\"cookie\");\n//   return session.send(Mono.just(message));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-webflux/src/test/java/org/springframework/cloud/gateway/webflux/ReactiveTests.java\n// --------------------------------------------------\n// @GetMapping(\"/forward/foos\") public Mono<Void> forwardFoos(ServerWebExchange exchange){\n//   return handler.handle(exchange.mutate().request(request -> request.path(\"/foos\").build()).build());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/InMemoryRouteDefinitionRepository.java\n// --------------------------------------------------\n// @Override public Mono<Void> delete(Mono<String> routeId){\n//   return routeId.flatMap(id -> {\n//     if (routes.containsKey(id)) {\n//       routes.remove(id);\n//       return Mono.empty();\n//     }\n//     return Mono.defer(() -> Mono.error(new NotFoundException(\"RouteDefinition not found: \" + routeId)));\n//   }\n// );\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionWriter.java\n// --------------------------------------------------\n// Mono<Void> delete(Mono<String> routeId);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RedisRouteDefinitionRepository implements RouteDefinitionRepository {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(RedisRouteDefinitionRepository.class);\n\n\t/**\n\t * Key prefix for RouteDefinition queries to redis.\n\t */\n\tprivate static final String ROUTEDEFINITION_REDIS_KEY_PREFIX_QUERY = \"routedefinition_\";\n\n\tprivate ReactiveRedisTemplate<String, RouteDefinition> reactiveRedisTemplate;\n\n\tprivate ReactiveValueOperations<String, RouteDefinition> routeDefinitionReactiveValueOperations;\n\n\tpublic RedisRouteDefinitionRepository(ReactiveRedisTemplate<String, RouteDefinition> reactiveRedisTemplate) {\n\t\tthis.reactiveRedisTemplate = reactiveRedisTemplate;\n\t\tthis.routeDefinitionReactiveValueOperations = reactiveRedisTemplate.opsForValue();\n\t}\n\n\t@Override\n\tpublic Flux<RouteDefinition> getRouteDefinitions() {\n\t\treturn reactiveRedisTemplate.scan(ScanOptions.scanOptions().match(createKey(\"*\")).build())\n\t\t\t\t.flatMap(key -> reactiveRedisTemplate.opsForValue().get(key))\n\t\t\t\t.onErrorContinue((throwable, routeDefinition) -> {\n\t\t\t\t\tif (log.isErrorEnabled()) {\n\t\t\t\t\t\tlog.error(\"get routes from redis error cause : {}\", throwable.toString(), throwable);\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\t@Override\n\tpublic Mono<Void> save(Mono<RouteDefinition> route) {\n\t\treturn route.flatMap(routeDefinition -> routeDefinitionReactiveValueOperations\n\t\t\t\t.set(createKey(routeDefinition.getId()), routeDefinition).flatMap(success -> {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.defer(() -> Mono.error(new RuntimeException(\n\t\t\t\t\t\t\tString.format(\"Could not add route to redis repository: %s\", routeDefinition))));\n\t\t\t\t}));\n\t}\n\n\t@Override\n\tpublic Mono<Void> delete(Mono<String> routeId) {<FILL_FUNCTION_BODY>}\n\n\tprivate String createKey(String routeId) {\n\t\treturn ROUTEDEFINITION_REDIS_KEY_PREFIX_QUERY + routeId;\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/280", "ground_truth": "\n\t\treturn routeId.flatMap(id -> routeDefinitionReactiveValueOperations.delete(createKey(id)).flatMap(success -> {\n\t\t\tif (success) {\n\t\t\t\treturn Mono.empty();\n\t\t\t}\n\t\t\treturn Mono.defer(() -> Mono.error(new NotFoundException(\n\t\t\t\t\tString.format(\"Could not remove route from redis repository with id: %s\", routeId))));\n\t\t}));\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "route", "RedisRouteDefinitionRepository.java"], "context_start_lineno": 0, "function_name": "delete", "left_context": "class RedisRouteDefinitionRepository implements RouteDefinitionRepository {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(RedisRouteDefinitionRepository.class);\n\n\t/**\n\t * Key prefix for RouteDefinition queries to redis.\n\t */\n\tprivate static final String ROUTEDEFINITION_REDIS_KEY_PREFIX_QUERY = \"routedefinition_\";\n\n\tprivate ReactiveRedisTemplate<String, RouteDefinition> reactiveRedisTemplate;\n\n\tprivate ReactiveValueOperations<String, RouteDefinition> routeDefinitionReactiveValueOperations;\n\n\tpublic RedisRouteDefinitionRepository(ReactiveRedisTemplate<String, RouteDefinition> reactiveRedisTemplate) {\n\t\tthis.reactiveRedisTemplate = reactiveRedisTemplate;\n\t\tthis.routeDefinitionReactiveValueOperations = reactiveRedisTemplate.opsForValue();\n\t}\n\n\t@Override\n\tpublic Flux<RouteDefinition> getRouteDefinitions() {\n\t\treturn reactiveRedisTemplate.scan(ScanOptions.scanOptions().match(createKey(\"*\")).build())\n\t\t\t\t.flatMap(key -> reactiveRedisTemplate.opsForValue().get(key))\n\t\t\t\t.onErrorContinue((throwable, routeDefinition) -> {\n\t\t\t\t\tif (log.isErrorEnabled()) {\n\t\t\t\t\t\tlog.error(\"get routes from redis error cause : {}\", throwable.toString(), throwable);\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\t@Override\n\tpublic Mono<Void> save(Mono<RouteDefinition> route) {\n\t\treturn route.flatMap(routeDefinition -> routeDefinitionReactiveValueOperations\n\t\t\t\t.set(createKey(routeDefinition.getId()), routeDefinition).flatMap(success -> {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.defer(() -> Mono.error(new RuntimeException(\n\t\t\t\t\t\t\tString.format(\"Could not add route to redis repository: %s\", routeDefinition))));\n\t\t\t\t}));\n\t}\n\n\t@Override\n\tpublic Mono<Void> delete(Mono<String> routeId) {", "right_context": "}\n\n\tprivate String createKey(String routeId) {\n\t\treturn ROUTEDEFINITION_REDIS_KEY_PREFIX_QUERY + routeId;\n\t}\n\n}", "class_name": "RedisRouteDefinitionRepository", "return_type": "Mono<Void>", "parameters": [{"type": "Mono<String>", "name": "routeId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RateLimitConfig {\n\n\t\tFunction<RateLimitConfig, BucketConfiguration> configurationBuilder = DEFAULT_CONFIGURATION_BUILDER;\n\n\t\tlong capacity;\n\n\t\tDuration period;\n\n\t\tFunction<ServerRequest, String> keyResolver;\n\n\t\tHttpStatusCode statusCode = HttpStatus.TOO_MANY_REQUESTS;\n\n\t\tDuration timeout;\n\n\t\tint tokens = 1;\n\n\t\tString headerName = DEFAULT_HEADER_NAME;\n\n\t\tpublic Function<RateLimitConfig, BucketConfiguration> getConfigurationBuilder() {\n\t\t\treturn configurationBuilder;\n\t\t}\n\n\t\tpublic void setConfigurationBuilder(Function<RateLimitConfig, BucketConfiguration> configurationBuilder) {\n\t\t\tAssert.notNull(configurationBuilder, \"configurationBuilder may not be null\");\n\t\t\tthis.configurationBuilder = configurationBuilder;\n\t\t}\n\n\t\tpublic long getCapacity() {\n\t\t\treturn capacity;\n\t\t}\n\n\t\tpublic RateLimitConfig setCapacity(long capacity) {\n\t\t\tthis.capacity = capacity;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Duration getPeriod() {\n\t\t\treturn period;\n\t\t}\n\n\t\tpublic RateLimitConfig setPeriod(Duration period) {\n\t\t\tthis.period = period;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Function<ServerRequest, String> getKeyResolver() {\n\t\t\treturn keyResolver;\n\t\t}\n\n\t\tpublic RateLimitConfig setKeyResolver(Function<ServerRequest, String> keyResolver) {\n\t\t\tAssert.notNull(keyResolver, \"keyResolver may not be null\");\n\t\t\tthis.keyResolver = keyResolver;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic HttpStatusCode getStatusCode() {\n\t\t\treturn statusCode;\n\t\t}\n\n\t\tpublic RateLimitConfig setStatusCode(HttpStatusCode statusCode) {\n\t\t\tthis.statusCode = statusCode;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Duration getTimeout() {\n\t\t\treturn timeout;\n\t\t}\n\n\t\tpublic RateLimitConfig setTimeout(Duration timeout) {\n\t\t\tthis.timeout = timeout;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic int getTokens() {\n\t\t\treturn tokens;\n\t\t}\n\n\t\tpublic RateLimitConfig setTokens(int tokens) {<FILL_FUNCTION_BODY>}\n\n\t\tpublic String getHeaderName() {\n\t\t\treturn headerName;\n\t\t}\n\n\t\tpublic RateLimitConfig setHeaderName(String headerName) {\n\t\t\tAssert.notNull(headerName, \"headerName may not be null\");\n\t\t\tthis.headerName = headerName;\n\t\t\treturn this;\n\t\t}\n\n\t}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/288", "ground_truth": "\n\t\t\tAssert.isTrue(tokens > 0, \"tokens must be greater than zero\");\n\t\t\tthis.tokens = tokens;\n\t\t\treturn this;\n\t\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "filter", "Bucket4jFilterFunctions.java"], "context_start_lineno": 0, "function_name": "setTokens", "left_context": "class RateLimitConfig {\n\n\t\tFunction<RateLimitConfig, BucketConfiguration> configurationBuilder = DEFAULT_CONFIGURATION_BUILDER;\n\n\t\tlong capacity;\n\n\t\tDuration period;\n\n\t\tFunction<ServerRequest, String> keyResolver;\n\n\t\tHttpStatusCode statusCode = HttpStatus.TOO_MANY_REQUESTS;\n\n\t\tDuration timeout;\n\n\t\tint tokens = 1;\n\n\t\tString headerName = DEFAULT_HEADER_NAME;\n\n\t\tpublic Function<RateLimitConfig, BucketConfiguration> getConfigurationBuilder() {\n\t\t\treturn configurationBuilder;\n\t\t}\n\n\t\tpublic void setConfigurationBuilder(Function<RateLimitConfig, BucketConfiguration> configurationBuilder) {\n\t\t\tAssert.notNull(configurationBuilder, \"configurationBuilder may not be null\");\n\t\t\tthis.configurationBuilder = configurationBuilder;\n\t\t}\n\n\t\tpublic long getCapacity() {\n\t\t\treturn capacity;\n\t\t}\n\n\t\tpublic RateLimitConfig setCapacity(long capacity) {\n\t\t\tthis.capacity = capacity;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Duration getPeriod() {\n\t\t\treturn period;\n\t\t}\n\n\t\tpublic RateLimitConfig setPeriod(Duration period) {\n\t\t\tthis.period = period;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Function<ServerRequest, String> getKeyResolver() {\n\t\t\treturn keyResolver;\n\t\t}\n\n\t\tpublic RateLimitConfig setKeyResolver(Function<ServerRequest, String> keyResolver) {\n\t\t\tAssert.notNull(keyResolver, \"keyResolver may not be null\");\n\t\t\tthis.keyResolver = keyResolver;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic HttpStatusCode getStatusCode() {\n\t\t\treturn statusCode;\n\t\t}\n\n\t\tpublic RateLimitConfig setStatusCode(HttpStatusCode statusCode) {\n\t\t\tthis.statusCode = statusCode;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Duration getTimeout() {\n\t\t\treturn timeout;\n\t\t}\n\n\t\tpublic RateLimitConfig setTimeout(Duration timeout) {\n\t\t\tthis.timeout = timeout;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic int getTokens() {\n\t\t\treturn tokens;\n\t\t}\n\n\t\tpublic RateLimitConfig setTokens(int tokens) {", "right_context": "}\n\n\t\tpublic String getHeaderName() {\n\t\t\treturn headerName;\n\t\t}\n\n\t\tpublic RateLimitConfig setHeaderName(String headerName) {\n\t\t\tAssert.notNull(headerName, \"headerName may not be null\");\n\t\t\tthis.headerName = headerName;\n\t\t\treturn this;\n\t\t}\n\n\t}", "class_name": "RateLimitConfig", "return_type": "RateLimitConfig", "parameters": [{"type": "int", "name": "tokens"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SecureHeadersProperties {\n\n\t/**\n\t * Xss-Protection header default.\n\t */\n\tpublic static final String X_XSS_PROTECTION_HEADER_DEFAULT = \"1 ; mode=block\";\n\n\t/**\n\t * Strict transport security header default.\n\t */\n\tpublic static final String STRICT_TRANSPORT_SECURITY_HEADER_DEFAULT = \"max-age=631138519\";\n\n\t/**\n\t * Frame Options header default.\n\t */\n\tpublic static final String X_FRAME_OPTIONS_HEADER_DEFAULT = \"DENY\";\n\n\t/**\n\t * Content-Type Options header default.\n\t */\n\tpublic static final String X_CONTENT_TYPE_OPTIONS_HEADER_DEFAULT = \"nosniff\";\n\n\t/**\n\t * Referrer Policy header default.\n\t */\n\tpublic static final String REFERRER_POLICY_HEADER_DEFAULT = \"no-referrer\";\n\n\t/**\n\t * Content-Security Policy header default.\n\t */\n\tpublic static final String CONTENT_SECURITY_POLICY_HEADER_DEFAULT = \"default-src 'self' https:; font-src 'self' https: data:; img-src 'self' https: data:; object-src 'none'; script-src https:; style-src 'self' https: 'unsafe-inline'\";\n\n\t/**\n\t * Download Options header default.\n\t */\n\tpublic static final String X_DOWNLOAD_OPTIONS_HEADER_DEFAULT = \"noopen\";\n\n\t/**\n\t * Permitted Cross-Domain Policies header default.\n\t */\n\tpublic static final String X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER_DEFAULT = \"none\";\n\n\tprivate String xssProtectionHeader = X_XSS_PROTECTION_HEADER_DEFAULT;\n\n\tprivate String strictTransportSecurity = STRICT_TRANSPORT_SECURITY_HEADER_DEFAULT;\n\n\tprivate String frameOptions = X_FRAME_OPTIONS_HEADER_DEFAULT;\n\n\tprivate String contentTypeOptions = X_CONTENT_TYPE_OPTIONS_HEADER_DEFAULT;\n\n\tprivate String referrerPolicy = REFERRER_POLICY_HEADER_DEFAULT;\n\n\tprivate String contentSecurityPolicy = CONTENT_SECURITY_POLICY_HEADER_DEFAULT;\n\n\tprivate String downloadOptions = X_DOWNLOAD_OPTIONS_HEADER_DEFAULT;\n\n\tprivate String permittedCrossDomainPolicies = X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER_DEFAULT;\n\n\tprivate List<String> disable = new ArrayList<>();\n\n\tpublic String getXssProtectionHeader() {\n\t\treturn xssProtectionHeader;\n\t}\n\n\tpublic void setXssProtectionHeader(String xssProtectionHeader) {\n\t\tthis.xssProtectionHeader = xssProtectionHeader;\n\t}\n\n\tpublic String getStrictTransportSecurity() {\n\t\treturn strictTransportSecurity;\n\t}\n\n\tpublic void setStrictTransportSecurity(String strictTransportSecurity) {\n\t\tthis.strictTransportSecurity = strictTransportSecurity;\n\t}\n\n\tpublic String getFrameOptions() {\n\t\treturn frameOptions;\n\t}\n\n\tpublic void setFrameOptions(String frameOptions) {\n\t\tthis.frameOptions = frameOptions;\n\t}\n\n\tpublic String getContentTypeOptions() {\n\t\treturn contentTypeOptions;\n\t}\n\n\tpublic void setContentTypeOptions(String contentTypeOptions) {\n\t\tthis.contentTypeOptions = contentTypeOptions;\n\t}\n\n\tpublic String getReferrerPolicy() {\n\t\treturn referrerPolicy;\n\t}\n\n\tpublic void setReferrerPolicy(String referrerPolicy) {\n\t\tthis.referrerPolicy = referrerPolicy;\n\t}\n\n\tpublic String getContentSecurityPolicy() {\n\t\treturn contentSecurityPolicy;\n\t}\n\n\tpublic void setContentSecurityPolicy(String contentSecurityPolicy) {\n\t\tthis.contentSecurityPolicy = contentSecurityPolicy;\n\t}\n\n\tpublic String getDownloadOptions() {\n\t\treturn downloadOptions;\n\t}\n\n\tpublic void setDownloadOptions(String downloadOptions) {\n\t\tthis.downloadOptions = downloadOptions;\n\t}\n\n\tpublic String getPermittedCrossDomainPolicies() {\n\t\treturn permittedCrossDomainPolicies;\n\t}\n\n\tpublic void setPermittedCrossDomainPolicies(String permittedCrossDomainPolicies) {\n\t\tthis.permittedCrossDomainPolicies = permittedCrossDomainPolicies;\n\t}\n\n\tpublic List<String> getDisable() {\n\t\treturn disable;\n\t}\n\n\tpublic void setDisable(List<String> disable) {\n\t\tthis.disable = disable;\n\t}\n\n\t@Override\n\tpublic String toString() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/294", "ground_truth": "\n\t\tfinal StringBuffer sb = new StringBuffer(\"SecureHeadersProperties{\");\n\t\tsb.append(\"xssProtectionHeader='\").append(xssProtectionHeader).append('\\'');\n\t\tsb.append(\", strictTransportSecurity='\").append(strictTransportSecurity).append('\\'');\n\t\tsb.append(\", frameOptions='\").append(frameOptions).append('\\'');\n\t\tsb.append(\", contentTypeOptions='\").append(contentTypeOptions).append('\\'');\n\t\tsb.append(\", referrerPolicy='\").append(referrerPolicy).append('\\'');\n\t\tsb.append(\", contentSecurityPolicy='\").append(contentSecurityPolicy).append('\\'');\n\t\tsb.append(\", downloadOptions='\").append(downloadOptions).append('\\'');\n\t\tsb.append(\", permittedCrossDomainPolicies='\").append(permittedCrossDomainPolicies).append('\\'');\n\t\tsb.append(\", disabled='\").append(disable).append('\\'');\n\t\tsb.append('}');\n\t\treturn sb.toString();\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "filter", "factory", "SecureHeadersProperties.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class SecureHeadersProperties {\n\n\t/**\n\t * Xss-Protection header default.\n\t */\n\tpublic static final String X_XSS_PROTECTION_HEADER_DEFAULT = \"1 ; mode=block\";\n\n\t/**\n\t * Strict transport security header default.\n\t */\n\tpublic static final String STRICT_TRANSPORT_SECURITY_HEADER_DEFAULT = \"max-age=631138519\";\n\n\t/**\n\t * Frame Options header default.\n\t */\n\tpublic static final String X_FRAME_OPTIONS_HEADER_DEFAULT = \"DENY\";\n\n\t/**\n\t * Content-Type Options header default.\n\t */\n\tpublic static final String X_CONTENT_TYPE_OPTIONS_HEADER_DEFAULT = \"nosniff\";\n\n\t/**\n\t * Referrer Policy header default.\n\t */\n\tpublic static final String REFERRER_POLICY_HEADER_DEFAULT = \"no-referrer\";\n\n\t/**\n\t * Content-Security Policy header default.\n\t */\n\tpublic static final String CONTENT_SECURITY_POLICY_HEADER_DEFAULT = \"default-src 'self' https:; font-src 'self' https: data:; img-src 'self' https: data:; object-src 'none'; script-src https:; style-src 'self' https: 'unsafe-inline'\";\n\n\t/**\n\t * Download Options header default.\n\t */\n\tpublic static final String X_DOWNLOAD_OPTIONS_HEADER_DEFAULT = \"noopen\";\n\n\t/**\n\t * Permitted Cross-Domain Policies header default.\n\t */\n\tpublic static final String X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER_DEFAULT = \"none\";\n\n\tprivate String xssProtectionHeader = X_XSS_PROTECTION_HEADER_DEFAULT;\n\n\tprivate String strictTransportSecurity = STRICT_TRANSPORT_SECURITY_HEADER_DEFAULT;\n\n\tprivate String frameOptions = X_FRAME_OPTIONS_HEADER_DEFAULT;\n\n\tprivate String contentTypeOptions = X_CONTENT_TYPE_OPTIONS_HEADER_DEFAULT;\n\n\tprivate String referrerPolicy = REFERRER_POLICY_HEADER_DEFAULT;\n\n\tprivate String contentSecurityPolicy = CONTENT_SECURITY_POLICY_HEADER_DEFAULT;\n\n\tprivate String downloadOptions = X_DOWNLOAD_OPTIONS_HEADER_DEFAULT;\n\n\tprivate String permittedCrossDomainPolicies = X_PERMITTED_CROSS_DOMAIN_POLICIES_HEADER_DEFAULT;\n\n\tprivate List<String> disable = new ArrayList<>();\n\n\tpublic String getXssProtectionHeader() {\n\t\treturn xssProtectionHeader;\n\t}\n\n\tpublic void setXssProtectionHeader(String xssProtectionHeader) {\n\t\tthis.xssProtectionHeader = xssProtectionHeader;\n\t}\n\n\tpublic String getStrictTransportSecurity() {\n\t\treturn strictTransportSecurity;\n\t}\n\n\tpublic void setStrictTransportSecurity(String strictTransportSecurity) {\n\t\tthis.strictTransportSecurity = strictTransportSecurity;\n\t}\n\n\tpublic String getFrameOptions() {\n\t\treturn frameOptions;\n\t}\n\n\tpublic void setFrameOptions(String frameOptions) {\n\t\tthis.frameOptions = frameOptions;\n\t}\n\n\tpublic String getContentTypeOptions() {\n\t\treturn contentTypeOptions;\n\t}\n\n\tpublic void setContentTypeOptions(String contentTypeOptions) {\n\t\tthis.contentTypeOptions = contentTypeOptions;\n\t}\n\n\tpublic String getReferrerPolicy() {\n\t\treturn referrerPolicy;\n\t}\n\n\tpublic void setReferrerPolicy(String referrerPolicy) {\n\t\tthis.referrerPolicy = referrerPolicy;\n\t}\n\n\tpublic String getContentSecurityPolicy() {\n\t\treturn contentSecurityPolicy;\n\t}\n\n\tpublic void setContentSecurityPolicy(String contentSecurityPolicy) {\n\t\tthis.contentSecurityPolicy = contentSecurityPolicy;\n\t}\n\n\tpublic String getDownloadOptions() {\n\t\treturn downloadOptions;\n\t}\n\n\tpublic void setDownloadOptions(String downloadOptions) {\n\t\tthis.downloadOptions = downloadOptions;\n\t}\n\n\tpublic String getPermittedCrossDomainPolicies() {\n\t\treturn permittedCrossDomainPolicies;\n\t}\n\n\tpublic void setPermittedCrossDomainPolicies(String permittedCrossDomainPolicies) {\n\t\tthis.permittedCrossDomainPolicies = permittedCrossDomainPolicies;\n\t}\n\n\tpublic List<String> getDisable() {\n\t\treturn disable;\n\t}\n\n\tpublic void setDisable(List<String> disable) {\n\t\tthis.disable = disable;\n\t}\n\n\t@Override\n\tpublic String toString() {", "right_context": "}\n\n}", "class_name": "SecureHeadersProperties", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/config/GatewayAutoConfigurationTests.java\n// --------------------------------------------------\n// @Bean ReactiveOAuth2AuthorizedClientManager myReactiveOAuth2AuthorizedClientManager(){\n//   return authorizeRequest -> null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GatewayReactiveOAuth2AutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(ReactiveClientRegistrationRepository.class)\n\tpublic ReactiveOAuth2AuthorizedClientManager gatewayReactiveOAuth2AuthorizedClientManager(\n\t\t\tReactiveClientRegistrationRepository clientRegistrationRepository,\n\t\t\tServerOAuth2AuthorizedClientRepository authorizedClientRepository) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/306", "ground_truth": "\n\t\tReactiveOAuth2AuthorizedClientProvider authorizedClientProvider = ReactiveOAuth2AuthorizedClientProviderBuilder\n\t\t\t\t.builder().authorizationCode().refreshToken().build();\n\t\tDefaultReactiveOAuth2AuthorizedClientManager authorizedClientManager = new DefaultReactiveOAuth2AuthorizedClientManager(\n\t\t\t\tclientRegistrationRepository, authorizedClientRepository);\n\t\tauthorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n\t\treturn authorizedClientManager;\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "config", "GatewayReactiveOAuth2AutoConfiguration.java"], "context_start_lineno": 0, "function_name": "gatewayReactiveOAuth2AuthorizedClientManager", "left_context": "class GatewayReactiveOAuth2AutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(ReactiveClientRegistrationRepository.class)\n\tpublic ReactiveOAuth2AuthorizedClientManager gatewayReactiveOAuth2AuthorizedClientManager(\n\t\t\tReactiveClientRegistrationRepository clientRegistrationRepository,\n\t\t\tServerOAuth2AuthorizedClientRepository authorizedClientRepository) {", "right_context": "}\n\n}", "class_name": "GatewayReactiveOAuth2AutoConfiguration", "return_type": "ReactiveOAuth2AuthorizedClientManager", "parameters": [{"type": "ReactiveClientRegistrationRepository", "name": "clientRegistrationRepository"}, {"type": "ServerOAuth2AuthorizedClientRepository", "name": "authorizedClientRepository"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> requestSize(DataSize maxSize){\n//   return ofRequestProcessor(BeforeFilterFunctions.requestSize(maxSize));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> rewriteLocationResponseHeader(String stripVersion,String locationHeaderName,String hostValue,String protocolsRegex){\n//   return ofResponseProcessor(RewriteLocationResponseHeaderFilterFunctions.rewriteLocationResponseHeader(config -> config.setStripVersion(stripVersion).setLocationHeaderName(locationHeaderName).setHostValue(hostValue).setProtocolsRegex(protocolsRegex)));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> rewritePath(String regexp,String replacement){\n//   return ofRequestProcessor(BeforeFilterFunctions.rewritePath(regexp,replacement));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> rewriteResponseHeader(String name,String regexp,String replacement){\n//   return ofResponseProcessor(AfterFilterFunctions.rewriteResponseHeader(name,regexp,replacement));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> routeId(String routeId){\n//   return ofRequestProcessor(BeforeFilterFunctions.routeId(routeId));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setPath(String path){\n//   return ofRequestProcessor(BeforeFilterFunctions.setPath(path));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setRequestHeader(String name,String value){\n//   return ofRequestProcessor(BeforeFilterFunctions.setRequestHeader(name,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setRequestHostHeader(String host){\n//   return ofRequestProcessor(BeforeFilterFunctions.setRequestHostHeader(host));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setResponseHeader(String name,String value){\n//   return ofResponseProcessor(AfterFilterFunctions.setResponseHeader(name,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> stripPrefix(){\n//   return stripPrefix(1);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> stripPrefix(int parts){\n//   return ofRequestProcessor(BeforeFilterFunctions.stripPrefix(parts));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> setStatus(int statusCode){\n//   return setStatus(new HttpStatusHolder(null,statusCode));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// static HandlerFilterFunction<ServerResponse,ServerResponse> setStatus(HttpStatusCode statusCode){\n//   return setStatus(new HttpStatusHolder(statusCode,null));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/FilterFunctions.java\n// --------------------------------------------------\n// @Shortcut static HandlerFilterFunction<ServerResponse,ServerResponse> setStatus(HttpStatusHolder statusCode){\n//   return ofResponseProcessor(AfterFilterFunctions.setStatus(statusCode));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/RetryFilterFunctions.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> retry(int retries){\n//   return retry(config -> config.setRetries(retries));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/RetryFilterFunctions.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> retry(Consumer<RetryConfig> configConsumer){\n//   RetryConfig config=new RetryConfig();\n//   configConsumer.accept(config);\n//   return retry(config);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/RetryFilterFunctions.java\n// --------------------------------------------------\n// @Shortcut @Configurable public static HandlerFilterFunction<ServerResponse,ServerResponse> retry(RetryConfig config){\n//   RetryTemplateBuilder retryTemplateBuilder=RetryTemplate.builder();\n//   CompositeRetryPolicy compositeRetryPolicy=new CompositeRetryPolicy();\n//   Map<Class<? extends Throwable>,Boolean> retryableExceptions=new HashMap<>();\n//   config.getExceptions().forEach(exception -> retryableExceptions.put(exception,true));\n//   SimpleRetryPolicy simpleRetryPolicy=new SimpleRetryPolicy(config.getRetries(),retryableExceptions);\n//   compositeRetryPolicy.setPolicies(Arrays.asList(simpleRetryPolicy,new HttpRetryPolicy(config)).toArray(new RetryPolicy[0]));\n//   RetryTemplate retryTemplate=retryTemplateBuilder.customPolicy(compositeRetryPolicy).build();\n//   return (request,next) -> retryTemplate.execute(context -> {\n//     ServerResponse serverResponse=next.handle(request);\n//     if (isRetryableStatusCode(serverResponse.statusCode(),config) && isRetryableMethod(request.method(),config)) {\n//       throw new RetryException(request,serverResponse);\n//     }\n//     return serverResponse;\n//   }\n// );\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/TokenRelayFilterFunctions.java\n// --------------------------------------------------\n// @Shortcut public static HandlerFilterFunction<ServerResponse,ServerResponse> tokenRelay(){\n//   return (request,next) -> {\n//     Principal principle=request.servletRequest().getUserPrincipal();\n//     if (principle instanceof OAuth2AuthenticationToken) {\n//       String clientRegistrationId=token.getAuthorizedClientRegistrationId();\n//       OAuth2AuthorizeRequest authorizeRequest=OAuth2AuthorizeRequest.withClientRegistrationId(clientRegistrationId).principal(token).build();\n//       OAuth2AuthorizedClientManager clientManager=getApplicationContext(request).getBean(OAuth2AuthorizedClientManager.class);\n//       OAuth2AuthorizedClient authorizedClient=clientManager.authorize(authorizeRequest);\n//       OAuth2AccessToken accessToken=authorizedClient.getAccessToken();\n//       ServerRequest modified=ServerRequest.from(request).headers(httpHeaders -> httpHeaders.setBearerAuth(accessToken.getTokenValue())).build();\n//       return next.handle(modified);\n//     }\n//     return next.handle(request);\n//   }\n// ;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/TestFilterSupplier.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> localServerPortUriResolver(){\n//   return new LocalServerPortUriResolver();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/TestFilterSupplier.java\n// --------------------------------------------------\n// public static HandlerFilterFunction<ServerResponse,ServerResponse> httpbinUriResolver(){\n//   return new HttpbinUriResolver();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LoadBalancerFilterFunctions {\n\n\tprivate static final Log log = LogFactory.getLog(LoadBalancerFilterFunctions.class);\n\n\tprivate LoadBalancerFilterFunctions() {\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> lb(String serviceId) {\n\t\treturn lb(serviceId, LoadBalancerUriTools::reconstructURI);\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> lb(String serviceId,\n\t\t\tBiFunction<ServiceInstance, URI, URI> reconstructUriFunction) {<FILL_FUNCTION_BODY>}\n\n\tprivate static String getHint(LoadBalancerClientFactory clientFactory, String serviceId) {\n\t\tLoadBalancerProperties loadBalancerProperties = clientFactory.getProperties(serviceId);\n\t\tMap<String, String> hints = loadBalancerProperties.getHint();\n\t\tString defaultHint = hints.getOrDefault(\"default\", \"default\");\n\t\tString hintPropertyValue = hints.get(serviceId);\n\t\treturn hintPropertyValue != null ? hintPropertyValue : defaultHint;\n\t}\n\n\tprivate static MultiValueMap<String, String> buildCookies(MultiValueMap<String, Cookie> cookies) {\n\t\tHttpHeaders newCookies = new HttpHeaders();\n\t\tif (cookies != null) {\n\t\t\tcookies.forEach((key, value) -> value\n\t\t\t\t\t.forEach(cookie -> newCookies.put(cookie.getName(), Collections.singletonList(cookie.getValue()))));\n\t\t}\n\t\treturn newCookies;\n\t}\n\n\tstatic class DelegatingServiceInstance implements ServiceInstance {\n\n\t\tfinal ServiceInstance delegate;\n\n\t\tprivate String overrideScheme;\n\n\t\tDelegatingServiceInstance(ServiceInstance delegate, String overrideScheme) {\n\t\t\tthis.delegate = delegate;\n\t\t\tthis.overrideScheme = overrideScheme;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getServiceId() {\n\t\t\treturn delegate.getServiceId();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getHost() {\n\t\t\treturn delegate.getHost();\n\t\t}\n\n\t\t@Override\n\t\tpublic int getPort() {\n\t\t\treturn delegate.getPort();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSecure() {\n\t\t\t// TODO: move to map\n\t\t\tif (\"https\".equals(this.overrideScheme) || \"wss\".equals(this.overrideScheme)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn delegate.isSecure();\n\t\t}\n\n\t\t@Override\n\t\tpublic URI getUri() {\n\t\t\treturn delegate.getUri();\n\t\t}\n\n\t\t@Override\n\t\tpublic Map<String, String> getMetadata() {\n\t\t\treturn delegate.getMetadata();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getScheme() {\n\t\t\tString scheme = delegate.getScheme();\n\t\t\tif (scheme != null) {\n\t\t\t\treturn scheme;\n\t\t\t}\n\t\t\treturn this.overrideScheme;\n\t\t}\n\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/341", "ground_truth": "\n\t\treturn (request, next) -> {\n\t\t\tLoadBalancerClientFactory clientFactory = getApplicationContext(request)\n\t\t\t\t\t.getBean(LoadBalancerClientFactory.class);\n\t\t\tSet<LoadBalancerLifecycle> supportedLifecycleProcessors = LoadBalancerLifecycleValidator\n\t\t\t\t\t.getSupportedLifecycleProcessors(clientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),\n\t\t\t\t\t\t\tRequestDataContext.class, ResponseData.class, ServiceInstance.class);\n\t\t\tRequestData requestData = new RequestData(request.method(), request.uri(),\n\t\t\t\t\trequest.headers().asHttpHeaders(), buildCookies(request.cookies()), request.attributes());\n\t\t\tDefaultRequest<RequestDataContext> lbRequest = new DefaultRequest<>(\n\t\t\t\t\tnew RequestDataContext(requestData, getHint(clientFactory, serviceId)));\n\n\t\t\tLoadBalancerClient loadBalancerClient = clientFactory.getInstance(serviceId, LoadBalancerClient.class);\n\t\t\tif (loadBalancerClient == null) {\n\t\t\t\tthrow new HttpServerErrorException(HttpStatus.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"No loadbalancer available for \" + serviceId);\n\t\t\t}\n\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStart(lbRequest));\n\t\t\tServiceInstance retrievedInstance = loadBalancerClient.choose(serviceId, lbRequest);\n\t\t\tif (retrievedInstance == null) {\n\t\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle\n\t\t\t\t\t\t.onComplete(new CompletionContext<>(CompletionContext.Status.DISCARD, lbRequest)));\n\t\t\t\tthrow new HttpServerErrorException(HttpStatus.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"Unable to find instance for \" + serviceId);\n\t\t\t\t// throw NotFoundException.create(properties.isUse404(), \"Unable to find\n\t\t\t\t// instance for \" + serviceId);\n\t\t\t}\n\n\t\t\tURI uri = request.uri();\n\n\t\t\t// if the `lb:<scheme>` mechanism was used, use `<scheme>` as the default,\n\t\t\t// if the loadbalancer doesn't provide one.\n\t\t\tString scheme = retrievedInstance.isSecure() ? \"https\" : \"http\";\n\n\t\t\tDelegatingServiceInstance serviceInstance = new DelegatingServiceInstance(retrievedInstance, scheme);\n\n\t\t\tURI requestUrl = reconstructUriFunction.apply(serviceInstance, uri);\n\n\t\t\tif (log.isTraceEnabled()) {\n\t\t\t\tlog.trace(\"LoadBalancerClientFilter url chosen: \" + requestUrl);\n\t\t\t}\n\t\t\tMvcUtils.setRequestUrl(request, requestUrl);\n\t\t\t// exchange.getAttributes().put(GATEWAY_LOADBALANCER_RESPONSE_ATTR, response);\n\t\t\tDefaultResponse defaultResponse = new DefaultResponse(serviceInstance);\n\n\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStartRequest(lbRequest, defaultResponse));\n\n\t\t\ttry {\n\t\t\t\tServerResponse serverResponse = next.handle(request);\n\t\t\t\tsupportedLifecycleProcessors.forEach(\n\t\t\t\t\t\tlifecycle -> lifecycle.onComplete(new CompletionContext<>(CompletionContext.Status.SUCCESS,\n\t\t\t\t\t\t\t\tlbRequest, defaultResponse, serverResponse)));\n\t\t\t\treturn serverResponse;\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tsupportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(\n\t\t\t\t\t\tnew CompletionContext<>(CompletionContext.Status.FAILED, e, lbRequest, defaultResponse)));\n\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t};\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "filter", "LoadBalancerFilterFunctions.java"], "context_start_lineno": 0, "function_name": "lb", "left_context": "class LoadBalancerFilterFunctions {\n\n\tprivate static final Log log = LogFactory.getLog(LoadBalancerFilterFunctions.class);\n\n\tprivate LoadBalancerFilterFunctions() {\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> lb(String serviceId) {\n\t\treturn lb(serviceId, LoadBalancerUriTools::reconstructURI);\n\t}\n\n\tpublic static HandlerFilterFunction<ServerResponse, ServerResponse> lb(String serviceId,\n\t\t\tBiFunction<ServiceInstance, URI, URI> reconstructUriFunction) {", "right_context": "}\n\n\tprivate static String getHint(LoadBalancerClientFactory clientFactory, String serviceId) {\n\t\tLoadBalancerProperties loadBalancerProperties = clientFactory.getProperties(serviceId);\n\t\tMap<String, String> hints = loadBalancerProperties.getHint();\n\t\tString defaultHint = hints.getOrDefault(\"default\", \"default\");\n\t\tString hintPropertyValue = hints.get(serviceId);\n\t\treturn hintPropertyValue != null ? hintPropertyValue : defaultHint;\n\t}\n\n\tprivate static MultiValueMap<String, String> buildCookies(MultiValueMap<String, Cookie> cookies) {\n\t\tHttpHeaders newCookies = new HttpHeaders();\n\t\tif (cookies != null) {\n\t\t\tcookies.forEach((key, value) -> value\n\t\t\t\t\t.forEach(cookie -> newCookies.put(cookie.getName(), Collections.singletonList(cookie.getValue()))));\n\t\t}\n\t\treturn newCookies;\n\t}\n\n\tstatic class DelegatingServiceInstance implements ServiceInstance {\n\n\t\tfinal ServiceInstance delegate;\n\n\t\tprivate String overrideScheme;\n\n\t\tDelegatingServiceInstance(ServiceInstance delegate, String overrideScheme) {\n\t\t\tthis.delegate = delegate;\n\t\t\tthis.overrideScheme = overrideScheme;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getServiceId() {\n\t\t\treturn delegate.getServiceId();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getHost() {\n\t\t\treturn delegate.getHost();\n\t\t}\n\n\t\t@Override\n\t\tpublic int getPort() {\n\t\t\treturn delegate.getPort();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSecure() {\n\t\t\t// TODO: move to map\n\t\t\tif (\"https\".equals(this.overrideScheme) || \"wss\".equals(this.overrideScheme)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn delegate.isSecure();\n\t\t}\n\n\t\t@Override\n\t\tpublic URI getUri() {\n\t\t\treturn delegate.getUri();\n\t\t}\n\n\t\t@Override\n\t\tpublic Map<String, String> getMetadata() {\n\t\t\treturn delegate.getMetadata();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getScheme() {\n\t\t\tString scheme = delegate.getScheme();\n\t\t\tif (scheme != null) {\n\t\t\t\treturn scheme;\n\t\t\t}\n\t\t\treturn this.overrideScheme;\n\t\t}\n\n\t}\n\n}", "class_name": "LoadBalancerFilterFunctions", "return_type": "HandlerFilterFunction<ServerResponse,ServerResponse>", "parameters": [{"type": "String", "name": "serviceId"}, {"type": "BiFunction<ServiceInstance,URI,URI>", "name": "reconstructUriFunction"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/client/TestRestClient.java\n// --------------------------------------------------\n// /** \n//  * Assert the extracted body is equal to the given value.\n//  */\n// <T extends S>T isEqualTo(B expected);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/client/TestRestClient.java\n// --------------------------------------------------\n// /** \n//  * Assert the extracted body with a  {@link Matcher}.\n//  * @since 5.1\n//  */\n// <T extends S>T value(Matcher<? super B> matcher);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/client/TestRestClient.java\n// --------------------------------------------------\n// /** \n//  * Transform the extracted the body with a function, e.g. extracting a property, and assert the mapped value with a  {@link Matcher}.\n//  * @since 5.1\n//  */\n// <T extends S,R>T value(Function<B,R> bodyMapper,Matcher<? super R> matcher);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/client/TestRestClient.java\n// --------------------------------------------------\n// /** \n//  * Assert the extracted body with a  {@link Consumer}.\n//  * @since 5.1\n//  */\n// <T extends S>T value(Consumer<B> consumer);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/test/client/TestRestClient.java\n// --------------------------------------------------\n// /** \n//  * Assert the exchange result with the given  {@link Consumer}.\n//  */\n// <T extends S>T consumeWith(Consumer<EntityExchangeResult<B>> consumer);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/RequestRateLimiterGatewayFilterFactory.java\n// --------------------------------------------------\n// private <T>T getOrDefault(T configValue,T defaultValue){\n//   return (configValue != null) ? configValue : defaultValue;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/builder/Buildable.java\n// --------------------------------------------------\n// T build();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/builder/UriSpec.java\n// --------------------------------------------------\n// <T>T getBean(Class<T> type){\n//   return this.builder.getContext().getBean(type);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ConfigurationService.java\n// --------------------------------------------------\n// static <T>T bindOrCreate(Bindable<T> bindable,Map<String,Object> properties,String configurationPropertyName,Validator validator,ConversionService conversionService){\n//   BindHandler handler=new IgnoreTopLevelConverterNotFoundBindHandler();\n//   if (validator != null) {\n//     handler=new ValidationBindHandler(handler,validator);\n//   }\n//   List<ConfigurationPropertySource> propertySources=Collections.singletonList(new MapConfigurationPropertySource(properties));\n//   return new Binder(propertySources,null,conversionService).bindOrCreate(configurationPropertyName,bindable,handler);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ConfigurationService.java\n// --------------------------------------------------\n// @SuppressWarnings(\"unchecked\") static <T>T getTargetObject(Object candidate){\n//   try {\n//     if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {\n//       return (T)((Advised)candidate).getTargetSource().getTarget();\n//     }\n//   }\n//  catch (  Exception ex) {\n//     throw new IllegalStateException(\"Failed to unwrap proxied object\",ex);\n//   }\n//   return (T)candidate;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ConfigurationService.java\n// --------------------------------------------------\n// @Override protected T doBind(){\n//   Bindable<T> bindable=Bindable.of(this.configurable.getConfigClass());\n//   T bound=bindOrCreate(bindable,this.normalizedProperties,this.configurable.shortcutFieldPrefix(),this.service.validator.get(),this.service.conversionService.get());\n//   return bound;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ConfigurationService.java\n// --------------------------------------------------\n// @Override protected T doBind(){\n//   T toBind=getTargetObject(this.instance);\n//   Bindable<T> bindable=Bindable.ofInstance(toBind);\n//   return bindOrCreate(bindable,this.normalizedProperties,this.name,this.service.validator.get(),this.service.conversionService.get());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ConfigurationService.java\n// --------------------------------------------------\n// protected abstract T doBind();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ConfigurationService.java\n// --------------------------------------------------\n// public T bind(){\n//   validate();\n//   Assert.hasText(this.name,\"name may not be empty\");\n//   Assert.isTrue(this.properties != null || this.normalizedProperties != null,\"properties and normalizedProperties both may not be null\");\n//   if (this.normalizedProperties == null) {\n//     this.normalizedProperties=normalizeProperties();\n//   }\n//   T bound=doBind();\n//   if (this.eventFunction != null && this.service.publisher != null) {\n//     ApplicationEvent applicationEvent=this.eventFunction.apply(bound,this.normalizedProperties);\n//     this.service.publisher.publishEvent(applicationEvent);\n//   }\n//   return bound;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/handler/predicate/BetweenRoutePredicateFactoryTests.java\n// --------------------------------------------------\n// static <T>T bindConfig(HashMap<String,Object> properties,AbstractRoutePredicateFactory<T> factory){\n//   ApplicationConversionService conversionService=new ApplicationConversionService();\n//   conversionService.addConverter(new StringToZonedDateTimeConverter());\n//   T config=new ConfigurationService(null,() -> conversionService,() -> null).with(factory).name(\"myname\").normalizedProperties(properties).bind();\n//   return config;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/common/ArgumentSupplier.java\n// --------------------------------------------------\n// T getArgument();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/common/AttributedArugmentSuppliedEvent.java\n// --------------------------------------------------\n// @Override public T getArgument(){\n//   return event.getArgument();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/common/DefaultArgumentSuppliedEvent.java\n// --------------------------------------------------\n// @Override public T getArgument(){\n//   return argument;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/config/RouterFunctionHolderFactory.java\n// --------------------------------------------------\n// @Override public <T>T resolve(Class<T> type){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// spring-cloud-gateway/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/invoke/OperationArgumentResolver.java\n// --------------------------------------------------\n// /** \n//  * Resolves an argument of the given  {@code type}.\n//  * @param < T > required type of the argument\n//  * @param type argument type\n//  * @return an argument of the required type, or {@code null}\n//  */\n// <T>T resolve(Class<T> type);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InvocationContext {\n\n\tprivate final Map<String, Object> arguments;\n\n\tprivate final List<OperationArgumentResolver> argumentResolvers;\n\n\t/**\n\t * Creates a new context for an operation being invoked by the given\n\t * {@code securityContext} with the given available {@code arguments}.\n\t * @param arguments the arguments available to the operation. Never {@code null}\n\t * @param argumentResolvers resolvers for additional arguments should be available to\n\t * the operation.\n\t */\n\tpublic InvocationContext(Map<String, Object> arguments, OperationArgumentResolver... argumentResolvers) {\n\t\tAssert.notNull(arguments, \"Arguments must not be null\");\n\t\tthis.arguments = arguments;\n\t\tthis.argumentResolvers = new ArrayList<>();\n\t\tif (argumentResolvers != null) {\n\t\t\tthis.argumentResolvers.addAll(Arrays.asList(argumentResolvers));\n\t\t}\n\t}\n\n\t/**\n\t * Return the invocation arguments.\n\t * @return the arguments\n\t */\n\tpublic Map<String, Object> getArguments() {\n\t\treturn this.arguments;\n\t}\n\n\t/**\n\t * Resolves an argument with the given {@code argumentType}.\n\t * @param <T> type of the argument\n\t * @param argumentType type of the argument\n\t * @return resolved argument of the required type or {@code null}\n\t * @since 2.5.0\n\t * @see #canResolve(Class)\n\t */\n\tpublic <T> T resolveArgument(Class<T> argumentType) {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * Returns whether the context is capable of resolving an argument of the given\n\t * {@code type}. Note that, even when {@code true} is returned,\n\t * {@link #resolveArgument argument resolution} will return {@code null} if no\n\t * argument of the required type is available.\n\t * @param type argument type\n\t * @return {@code true} if resolution of arguments of the given type is possible,\n\t * otherwise {@code false}.\n\t * @since 2.5.0\n\t * @see #resolveArgument(Class)\n\t */\n\tpublic boolean canResolve(Class<?> type) {\n\t\tfor (OperationArgumentResolver argumentResolver : this.argumentResolvers) {\n\t\t\tif (argumentResolver.canResolve(type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/387", "ground_truth": "\n\t\tfor (OperationArgumentResolver argumentResolver : this.argumentResolvers) {\n\t\t\tif (argumentResolver.canResolve(argumentType)) {\n\t\t\t\tT result = argumentResolver.resolve(argumentType);\n\t\t\t\tif (result != null) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "invoke", "InvocationContext.java"], "context_start_lineno": 0, "function_name": "resolveArgument", "left_context": "class InvocationContext {\n\n\tprivate final Map<String, Object> arguments;\n\n\tprivate final List<OperationArgumentResolver> argumentResolvers;\n\n\t/**\n\t * Creates a new context for an operation being invoked by the given\n\t * {@code securityContext} with the given available {@code arguments}.\n\t * @param arguments the arguments available to the operation. Never {@code null}\n\t * @param argumentResolvers resolvers for additional arguments should be available to\n\t * the operation.\n\t */\n\tpublic InvocationContext(Map<String, Object> arguments, OperationArgumentResolver... argumentResolvers) {\n\t\tAssert.notNull(arguments, \"Arguments must not be null\");\n\t\tthis.arguments = arguments;\n\t\tthis.argumentResolvers = new ArrayList<>();\n\t\tif (argumentResolvers != null) {\n\t\t\tthis.argumentResolvers.addAll(Arrays.asList(argumentResolvers));\n\t\t}\n\t}\n\n\t/**\n\t * Return the invocation arguments.\n\t * @return the arguments\n\t */\n\tpublic Map<String, Object> getArguments() {\n\t\treturn this.arguments;\n\t}\n\n\t/**\n\t * Resolves an argument with the given {@code argumentType}.\n\t * @param <T> type of the argument\n\t * @param argumentType type of the argument\n\t * @return resolved argument of the required type or {@code null}\n\t * @since 2.5.0\n\t * @see #canResolve(Class)\n\t */\n\tpublic <T> T resolveArgument(Class<T> argumentType) {", "right_context": "}\n\n\t/**\n\t * Returns whether the context is capable of resolving an argument of the given\n\t * {@code type}. Note that, even when {@code true} is returned,\n\t * {@link #resolveArgument argument resolution} will return {@code null} if no\n\t * argument of the required type is available.\n\t * @param type argument type\n\t * @return {@code true} if resolution of arguments of the given type is possible,\n\t * otherwise {@code false}.\n\t * @since 2.5.0\n\t * @see #resolveArgument(Class)\n\t */\n\tpublic boolean canResolve(Class<?> type) {\n\t\tfor (OperationArgumentResolver argumentResolver : this.argumentResolvers) {\n\t\t\tif (argumentResolver.canResolve(type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}", "class_name": "InvocationContext", "return_type": "T", "parameters": [{"type": "Class<T>", "name": "argumentType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DiscoveryLocatorProperties {\n\n\t/** Flag that enables DiscoveryClient gateway integration. */\n\tprivate boolean enabled = false;\n\n\t/**\n\t * The prefix for the routeId, defaults to discoveryClient.getClass().getSimpleName()\n\t * + \"_\". Service Id will be appended to create the routeId.\n\t */\n\tprivate String routeIdPrefix;\n\n\t/**\n\t * SpEL expression that will evaluate whether to include a service in gateway\n\t * integration or not, defaults to: true.\n\t */\n\tprivate String includeExpression = \"true\";\n\n\t/**\n\t * SpEL expression that create the uri for each route, defaults to: 'lb://'+serviceId.\n\t */\n\tprivate String urlExpression = \"'lb://'+serviceId\";\n\n\t/**\n\t * Option to lower case serviceId in predicates and filters, defaults to false. Useful\n\t * with eureka when it automatically uppercases serviceId. so MYSERIVCE, would match\n\t * /myservice/**\n\t */\n\tprivate boolean lowerCaseServiceId = false;\n\n\tprivate List<PredicateDefinition> predicates = new ArrayList<>();\n\n\tprivate List<FilterDefinition> filters = new ArrayList<>();\n\n\tpublic boolean isEnabled() {\n\t\treturn enabled;\n\t}\n\n\tpublic void setEnabled(boolean enabled) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tpublic String getRouteIdPrefix() {\n\t\treturn routeIdPrefix;\n\t}\n\n\tpublic void setRouteIdPrefix(String routeIdPrefix) {\n\t\tthis.routeIdPrefix = routeIdPrefix;\n\t}\n\n\tpublic String getIncludeExpression() {\n\t\treturn includeExpression;\n\t}\n\n\tpublic void setIncludeExpression(String includeExpression) {\n\t\tthis.includeExpression = includeExpression;\n\t}\n\n\tpublic String getUrlExpression() {\n\t\treturn urlExpression;\n\t}\n\n\tpublic void setUrlExpression(String urlExpression) {\n\t\tthis.urlExpression = urlExpression;\n\t}\n\n\tpublic boolean isLowerCaseServiceId() {\n\t\treturn lowerCaseServiceId;\n\t}\n\n\tpublic void setLowerCaseServiceId(boolean lowerCaseServiceId) {\n\t\tthis.lowerCaseServiceId = lowerCaseServiceId;\n\t}\n\n\tpublic List<PredicateDefinition> getPredicates() {\n\t\treturn predicates;\n\t}\n\n\tpublic void setPredicates(List<PredicateDefinition> predicates) {\n\t\tthis.predicates = predicates;\n\t}\n\n\tpublic List<FilterDefinition> getFilters() {\n\t\treturn filters;\n\t}\n\n\tpublic void setFilters(List<FilterDefinition> filters) {\n\t\tthis.filters = filters;\n\t}\n\n\t@Override\n\tpublic String toString() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/390", "ground_truth": "\n\t\treturn new ToStringCreator(this).append(\"enabled\", enabled).append(\"routeIdPrefix\", routeIdPrefix)\n\t\t\t\t.append(\"includeExpression\", includeExpression).append(\"urlExpression\", urlExpression)\n\t\t\t\t.append(\"lowerCaseServiceId\", lowerCaseServiceId).append(\"predicates\", predicates)\n\t\t\t\t.append(\"filters\", filters).toString();\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server", "src", "main", "java", "org", "springframework", "cloud", "gateway", "discovery", "DiscoveryLocatorProperties.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class DiscoveryLocatorProperties {\n\n\t/** Flag that enables DiscoveryClient gateway integration. */\n\tprivate boolean enabled = false;\n\n\t/**\n\t * The prefix for the routeId, defaults to discoveryClient.getClass().getSimpleName()\n\t * + \"_\". Service Id will be appended to create the routeId.\n\t */\n\tprivate String routeIdPrefix;\n\n\t/**\n\t * SpEL expression that will evaluate whether to include a service in gateway\n\t * integration or not, defaults to: true.\n\t */\n\tprivate String includeExpression = \"true\";\n\n\t/**\n\t * SpEL expression that create the uri for each route, defaults to: 'lb://'+serviceId.\n\t */\n\tprivate String urlExpression = \"'lb://'+serviceId\";\n\n\t/**\n\t * Option to lower case serviceId in predicates and filters, defaults to false. Useful\n\t * with eureka when it automatically uppercases serviceId. so MYSERIVCE, would match\n\t * /myservice/**\n\t */\n\tprivate boolean lowerCaseServiceId = false;\n\n\tprivate List<PredicateDefinition> predicates = new ArrayList<>();\n\n\tprivate List<FilterDefinition> filters = new ArrayList<>();\n\n\tpublic boolean isEnabled() {\n\t\treturn enabled;\n\t}\n\n\tpublic void setEnabled(boolean enabled) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tpublic String getRouteIdPrefix() {\n\t\treturn routeIdPrefix;\n\t}\n\n\tpublic void setRouteIdPrefix(String routeIdPrefix) {\n\t\tthis.routeIdPrefix = routeIdPrefix;\n\t}\n\n\tpublic String getIncludeExpression() {\n\t\treturn includeExpression;\n\t}\n\n\tpublic void setIncludeExpression(String includeExpression) {\n\t\tthis.includeExpression = includeExpression;\n\t}\n\n\tpublic String getUrlExpression() {\n\t\treturn urlExpression;\n\t}\n\n\tpublic void setUrlExpression(String urlExpression) {\n\t\tthis.urlExpression = urlExpression;\n\t}\n\n\tpublic boolean isLowerCaseServiceId() {\n\t\treturn lowerCaseServiceId;\n\t}\n\n\tpublic void setLowerCaseServiceId(boolean lowerCaseServiceId) {\n\t\tthis.lowerCaseServiceId = lowerCaseServiceId;\n\t}\n\n\tpublic List<PredicateDefinition> getPredicates() {\n\t\treturn predicates;\n\t}\n\n\tpublic void setPredicates(List<PredicateDefinition> predicates) {\n\t\tthis.predicates = predicates;\n\t}\n\n\tpublic List<FilterDefinition> getFilters() {\n\t\treturn filters;\n\t}\n\n\tpublic void setFilters(List<FilterDefinition> filters) {\n\t\tthis.filters = filters;\n\t}\n\n\t@Override\n\tpublic String toString() {", "right_context": "}\n\n}", "class_name": "DiscoveryLocatorProperties", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AfterFilterFunctions {\n\n\tprivate AfterFilterFunctions() {\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> addResponseHeader(String name,\n\t\t\tString... values) {\n\t\treturn (request, response) -> {\n\t\t\tString[] expandedValues = MvcUtils.expandMultiple(request, values);\n\t\t\tresponse.headers().addAll(name, Arrays.asList(expandedValues));\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> dedupeResponseHeader(String name) {\n\t\treturn dedupeResponseHeader(name, DedupeStrategy.RETAIN_FIRST);\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> dedupeResponseHeader(String name,\n\t\t\tDedupeStrategy strategy) {\n\t\tAssert.hasText(name, \"name must not be null or empty\");\n\t\tAssert.notNull(strategy, \"strategy must not be null\");\n\t\treturn (request, response) -> {\n\t\t\tdedupeHeaders(response.headers(), name, strategy);\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tprivate static void dedupeHeaders(HttpHeaders headers, String names, DedupeStrategy strategy) {<FILL_FUNCTION_BODY>}\n\n\tprivate static void dedupeHeader(HttpHeaders headers, String name, DedupeStrategy strategy) {\n\t\tList<String> values = headers.get(name);\n\t\tif (values == null || values.size() <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (strategy) {\n\t\t\tcase RETAIN_FIRST:\n\t\t\t\theaders.set(name, values.get(0));\n\t\t\t\tbreak;\n\t\t\tcase RETAIN_LAST:\n\t\t\t\theaders.set(name, values.get(values.size() - 1));\n\t\t\t\tbreak;\n\t\t\tcase RETAIN_UNIQUE:\n\t\t\t\theaders.put(name, new ArrayList<>(new LinkedHashSet<>(values)));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> removeResponseHeader(String name) {\n\t\treturn (request, response) -> {\n\t\t\tresponse.headers().remove(name);\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> rewriteLocationResponseHeader() {\n\t\treturn RewriteLocationResponseHeaderFilterFunctions.rewriteLocationResponseHeader(config -> {\n\t\t});\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> rewriteLocationResponseHeader(\n\t\t\tConsumer<RewriteLocationResponseHeaderFilterFunctions.RewriteLocationResponseHeaderConfig> configConsumer) {\n\t\treturn RewriteLocationResponseHeaderFilterFunctions.rewriteLocationResponseHeader(configConsumer);\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> rewriteResponseHeader(String name,\n\t\t\tString regexp, String originalReplacement) {\n\t\tString replacement = originalReplacement.replace(\"$\\\\\", \"$\");\n\t\tPattern pattern = Pattern.compile(regexp);\n\t\treturn (request, response) -> {\n\t\t\tresponse.headers().computeIfPresent(name, (key, values) -> {\n\t\t\t\tList<String> rewrittenValues = values.stream()\n\t\t\t\t\t\t.map(value -> pattern.matcher(value).replaceAll(replacement)).toList();\n\t\t\t\treturn new ArrayList<>(rewrittenValues);\n\t\t\t});\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setResponseHeader(String name,\n\t\t\tString value) {\n\t\treturn (request, response) -> {\n\t\t\tString expandedValue = MvcUtils.expand(request, value);\n\t\t\tresponse.headers().set(name, expandedValue);\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(int statusCode) {\n\t\treturn setStatus(new HttpStatusHolder(null, statusCode));\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(String statusCode) {\n\t\treturn setStatus(HttpStatusHolder.valueOf(statusCode));\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(HttpStatusCode statusCode) {\n\t\treturn setStatus(new HttpStatusHolder(statusCode, null));\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(HttpStatusHolder statusCode) {\n\t\treturn (request, response) -> {\n\t\t\tif (response instanceof GatewayServerResponse res) {\n\t\t\t\tres.setStatusCode(statusCode.resolve());\n\t\t\t}\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic enum DedupeStrategy {\n\n\t\t/**\n\t\t * Default: Retain the first value only.\n\t\t */\n\t\tRETAIN_FIRST,\n\n\t\t/**\n\t\t * Retain the last value only.\n\t\t */\n\t\tRETAIN_LAST,\n\n\t\t/**\n\t\t * Retain all unique values in the order of their first encounter.\n\t\t */\n\t\tRETAIN_UNIQUE\n\n\t}\n\n}", "metadata": {"task_id": "spring-cloud_spring-cloud-gateway/424", "ground_truth": "\n\t\tif (headers == null || names == null || strategy == null) {\n\t\t\treturn;\n\t\t}\n\t\tString[] tokens = StringUtils.tokenizeToStringArray(names, \" \", true, true);\n\t\tfor (String name : tokens) {\n\t\t\tdedupeHeader(headers, name.trim(), strategy);\n\t\t}\n\t", "fpath_tuple": ["spring-cloud_spring-cloud-gateway", "spring-cloud-gateway", "spring-cloud-gateway-server-mvc", "src", "main", "java", "org", "springframework", "cloud", "gateway", "server", "mvc", "filter", "AfterFilterFunctions.java"], "context_start_lineno": 0, "function_name": "dedupeHeaders", "left_context": "class AfterFilterFunctions {\n\n\tprivate AfterFilterFunctions() {\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> addResponseHeader(String name,\n\t\t\tString... values) {\n\t\treturn (request, response) -> {\n\t\t\tString[] expandedValues = MvcUtils.expandMultiple(request, values);\n\t\t\tresponse.headers().addAll(name, Arrays.asList(expandedValues));\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> dedupeResponseHeader(String name) {\n\t\treturn dedupeResponseHeader(name, DedupeStrategy.RETAIN_FIRST);\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> dedupeResponseHeader(String name,\n\t\t\tDedupeStrategy strategy) {\n\t\tAssert.hasText(name, \"name must not be null or empty\");\n\t\tAssert.notNull(strategy, \"strategy must not be null\");\n\t\treturn (request, response) -> {\n\t\t\tdedupeHeaders(response.headers(), name, strategy);\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tprivate static void dedupeHeaders(HttpHeaders headers, String names, DedupeStrategy strategy) {", "right_context": "}\n\n\tprivate static void dedupeHeader(HttpHeaders headers, String name, DedupeStrategy strategy) {\n\t\tList<String> values = headers.get(name);\n\t\tif (values == null || values.size() <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (strategy) {\n\t\t\tcase RETAIN_FIRST:\n\t\t\t\theaders.set(name, values.get(0));\n\t\t\t\tbreak;\n\t\t\tcase RETAIN_LAST:\n\t\t\t\theaders.set(name, values.get(values.size() - 1));\n\t\t\t\tbreak;\n\t\t\tcase RETAIN_UNIQUE:\n\t\t\t\theaders.put(name, new ArrayList<>(new LinkedHashSet<>(values)));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> removeResponseHeader(String name) {\n\t\treturn (request, response) -> {\n\t\t\tresponse.headers().remove(name);\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> rewriteLocationResponseHeader() {\n\t\treturn RewriteLocationResponseHeaderFilterFunctions.rewriteLocationResponseHeader(config -> {\n\t\t});\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> rewriteLocationResponseHeader(\n\t\t\tConsumer<RewriteLocationResponseHeaderFilterFunctions.RewriteLocationResponseHeaderConfig> configConsumer) {\n\t\treturn RewriteLocationResponseHeaderFilterFunctions.rewriteLocationResponseHeader(configConsumer);\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> rewriteResponseHeader(String name,\n\t\t\tString regexp, String originalReplacement) {\n\t\tString replacement = originalReplacement.replace(\"$\\\\\", \"$\");\n\t\tPattern pattern = Pattern.compile(regexp);\n\t\treturn (request, response) -> {\n\t\t\tresponse.headers().computeIfPresent(name, (key, values) -> {\n\t\t\t\tList<String> rewrittenValues = values.stream()\n\t\t\t\t\t\t.map(value -> pattern.matcher(value).replaceAll(replacement)).toList();\n\t\t\t\treturn new ArrayList<>(rewrittenValues);\n\t\t\t});\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setResponseHeader(String name,\n\t\t\tString value) {\n\t\treturn (request, response) -> {\n\t\t\tString expandedValue = MvcUtils.expand(request, value);\n\t\t\tresponse.headers().set(name, expandedValue);\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(int statusCode) {\n\t\treturn setStatus(new HttpStatusHolder(null, statusCode));\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(String statusCode) {\n\t\treturn setStatus(HttpStatusHolder.valueOf(statusCode));\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(HttpStatusCode statusCode) {\n\t\treturn setStatus(new HttpStatusHolder(statusCode, null));\n\t}\n\n\tpublic static BiFunction<ServerRequest, ServerResponse, ServerResponse> setStatus(HttpStatusHolder statusCode) {\n\t\treturn (request, response) -> {\n\t\t\tif (response instanceof GatewayServerResponse res) {\n\t\t\t\tres.setStatusCode(statusCode.resolve());\n\t\t\t}\n\t\t\treturn response;\n\t\t};\n\t}\n\n\tpublic enum DedupeStrategy {\n\n\t\t/**\n\t\t * Default: Retain the first value only.\n\t\t */\n\t\tRETAIN_FIRST,\n\n\t\t/**\n\t\t * Retain the last value only.\n\t\t */\n\t\tRETAIN_LAST,\n\n\t\t/**\n\t\t * Retain all unique values in the order of their first encounter.\n\t\t */\n\t\tRETAIN_UNIQUE\n\n\t}\n\n}", "class_name": "AfterFilterFunctions", "return_type": "void", "parameters": [{"type": "HttpHeaders", "name": "headers"}, {"type": "String", "name": "names"}, {"type": "DedupeStrategy", "name": "strategy"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TokenAuthenticationFilter extends OncePerRequestFilter {\n\n    private final SecurityProperties securityProperties;\n\n    private final GlobalExceptionHandler globalExceptionHandler;\n\n    private final OAuth2TokenApi oauth2TokenApi;\n\n    @Override\n    @SuppressWarnings(\"NullableProblems\")\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException {<FILL_FUNCTION_BODY>}\n\n    private LoginUser buildLoginUserByToken(String token, Integer userType) {\n        try {\n            OAuth2AccessTokenCheckRespDTO accessToken = oauth2TokenApi.checkAccessToken(token);\n            if (accessToken == null) {\n                return null;\n            }\n            // \u7528\u6237\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u65e0\u6743\u9650\n            // \u6ce8\u610f\uff1a\u53ea\u6709 /admin-api/* \u548c /app-api/* \u6709 userType\uff0c\u624d\u9700\u8981\u6bd4\u5bf9\u7528\u6237\u7c7b\u578b\n            // \u7c7b\u4f3c WebSocket \u7684 /ws/* \u8fde\u63a5\u5730\u5740\uff0c\u662f\u4e0d\u9700\u8981\u6bd4\u5bf9\u7528\u6237\u7c7b\u578b\u7684\n            if (userType != null\n                    && ObjectUtil.notEqual(accessToken.getUserType(), userType)) {\n                throw new AccessDeniedException(\"\u9519\u8bef\u7684\u7528\u6237\u7c7b\u578b\");\n            }\n            // \u6784\u5efa\u767b\u5f55\u7528\u6237\n            return new LoginUser().setId(accessToken.getUserId()).setUserType(accessToken.getUserType())\n                    .setInfo(accessToken.getUserInfo()) // \u989d\u5916\u7684\u7528\u6237\u4fe1\u606f\n                    .setTenantId(accessToken.getTenantId()).setScopes(accessToken.getScopes());\n        } catch (ServiceException serviceException) {\n            // \u6821\u9a8c Token \u4e0d\u901a\u8fc7\u65f6\uff0c\u8003\u8651\u5230\u4e00\u4e9b\u63a5\u53e3\u662f\u65e0\u9700\u767b\u5f55\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de null \u5373\u53ef\n            return null;\n        }\n    }\n\n    /**\n     * \u6a21\u62df\u767b\u5f55\u7528\u6237\uff0c\u65b9\u4fbf\u65e5\u5e38\u5f00\u53d1\u8c03\u8bd5\n     *\n     * \u6ce8\u610f\uff0c\u5728\u7ebf\u4e0a\u73af\u5883\u4e0b\uff0c\u4e00\u5b9a\u8981\u5173\u95ed\u8be5\u529f\u80fd\uff01\uff01\uff01\n     *\n     * @param request \u8bf7\u6c42\n     * @param token \u6a21\u62df\u7684 token\uff0c\u683c\u5f0f\u4e3a {@link SecurityProperties#getMockSecret()} + \u7528\u6237\u7f16\u53f7\n     * @param userType \u7528\u6237\u7c7b\u578b\n     * @return \u6a21\u62df\u7684 LoginUser\n     */\n    private LoginUser mockLoginUser(HttpServletRequest request, String token, Integer userType) {\n        if (!securityProperties.getMockEnable()) {\n            return null;\n        }\n        // \u5fc5\u987b\u4ee5 mockSecret \u5f00\u5934\n        if (!token.startsWith(securityProperties.getMockSecret())) {\n            return null;\n        }\n        // \u6784\u5efa\u6a21\u62df\u7528\u6237\n        Long userId = Long.valueOf(token.substring(securityProperties.getMockSecret().length()));\n        return new LoginUser().setId(userId).setUserType(userType)\n                .setTenantId(WebFrameworkUtils.getTenantId(request));\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/24", "ground_truth": "\n        String token = SecurityFrameworkUtils.obtainAuthorization(request,\n                securityProperties.getTokenHeader(), securityProperties.getTokenParameter());\n        if (StrUtil.isNotEmpty(token)) {\n            Integer userType = WebFrameworkUtils.getLoginUserType(request);\n            try {\n                // 1.1 \u57fa\u4e8e token \u6784\u5efa\u767b\u5f55\u7528\u6237\n                LoginUser loginUser = buildLoginUserByToken(token, userType);\n                // 1.2 \u6a21\u62df Login \u529f\u80fd\uff0c\u65b9\u4fbf\u65e5\u5e38\u5f00\u53d1\u8c03\u8bd5\n                if (loginUser == null) {\n                    loginUser = mockLoginUser(request, token, userType);\n                }\n\n                // 2. \u8bbe\u7f6e\u5f53\u524d\u7528\u6237\n                if (loginUser != null) {\n                    SecurityFrameworkUtils.setLoginUser(loginUser, request);\n                }\n            } catch (Throwable ex) {\n                CommonResult<?> result = globalExceptionHandler.allExceptionHandler(request, ex);\n                ServletUtils.writeJSON(response, result);\n                return;\n            }\n        }\n\n        // \u7ee7\u7eed\u8fc7\u6ee4\u94fe\n        chain.doFilter(request, response);\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-security", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "security", "core", "filter", "TokenAuthenticationFilter.java"], "context_start_lineno": 0, "function_name": "doFilterInternal", "left_context": "class TokenAuthenticationFilter extends OncePerRequestFilter {\n\n    private final SecurityProperties securityProperties;\n\n    private final GlobalExceptionHandler globalExceptionHandler;\n\n    private final OAuth2TokenApi oauth2TokenApi;\n\n    @Override\n    @SuppressWarnings(\"NullableProblems\")\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException {", "right_context": "}\n\n    private LoginUser buildLoginUserByToken(String token, Integer userType) {\n        try {\n            OAuth2AccessTokenCheckRespDTO accessToken = oauth2TokenApi.checkAccessToken(token);\n            if (accessToken == null) {\n                return null;\n            }\n            // \u7528\u6237\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u65e0\u6743\u9650\n            // \u6ce8\u610f\uff1a\u53ea\u6709 /admin-api/* \u548c /app-api/* \u6709 userType\uff0c\u624d\u9700\u8981\u6bd4\u5bf9\u7528\u6237\u7c7b\u578b\n            // \u7c7b\u4f3c WebSocket \u7684 /ws/* \u8fde\u63a5\u5730\u5740\uff0c\u662f\u4e0d\u9700\u8981\u6bd4\u5bf9\u7528\u6237\u7c7b\u578b\u7684\n            if (userType != null\n                    && ObjectUtil.notEqual(accessToken.getUserType(), userType)) {\n                throw new AccessDeniedException(\"\u9519\u8bef\u7684\u7528\u6237\u7c7b\u578b\");\n            }\n            // \u6784\u5efa\u767b\u5f55\u7528\u6237\n            return new LoginUser().setId(accessToken.getUserId()).setUserType(accessToken.getUserType())\n                    .setInfo(accessToken.getUserInfo()) // \u989d\u5916\u7684\u7528\u6237\u4fe1\u606f\n                    .setTenantId(accessToken.getTenantId()).setScopes(accessToken.getScopes());\n        } catch (ServiceException serviceException) {\n            // \u6821\u9a8c Token \u4e0d\u901a\u8fc7\u65f6\uff0c\u8003\u8651\u5230\u4e00\u4e9b\u63a5\u53e3\u662f\u65e0\u9700\u767b\u5f55\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de null \u5373\u53ef\n            return null;\n        }\n    }\n\n    /**\n     * \u6a21\u62df\u767b\u5f55\u7528\u6237\uff0c\u65b9\u4fbf\u65e5\u5e38\u5f00\u53d1\u8c03\u8bd5\n     *\n     * \u6ce8\u610f\uff0c\u5728\u7ebf\u4e0a\u73af\u5883\u4e0b\uff0c\u4e00\u5b9a\u8981\u5173\u95ed\u8be5\u529f\u80fd\uff01\uff01\uff01\n     *\n     * @param request \u8bf7\u6c42\n     * @param token \u6a21\u62df\u7684 token\uff0c\u683c\u5f0f\u4e3a {@link SecurityProperties#getMockSecret()} + \u7528\u6237\u7f16\u53f7\n     * @param userType \u7528\u6237\u7c7b\u578b\n     * @return \u6a21\u62df\u7684 LoginUser\n     */\n    private LoginUser mockLoginUser(HttpServletRequest request, String token, Integer userType) {\n        if (!securityProperties.getMockEnable()) {\n            return null;\n        }\n        // \u5fc5\u987b\u4ee5 mockSecret \u5f00\u5934\n        if (!token.startsWith(securityProperties.getMockSecret())) {\n            return null;\n        }\n        // \u6784\u5efa\u6a21\u62df\u7528\u6237\n        Long userId = Long.valueOf(token.substring(securityProperties.getMockSecret().length()));\n        return new LoginUser().setId(userId).setUserType(userType)\n                .setTenantId(WebFrameworkUtils.getTenantId(request));\n    }\n\n}", "class_name": "TokenAuthenticationFilter", "return_type": "void", "parameters": [{"type": "HttpServletRequest", "name": "request"}, {"type": "HttpServletResponse", "name": "response"}, {"type": "FilterChain", "name": "chain"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TenantRabbitMQInitializer implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/49", "ground_truth": "\n        if (bean instanceof RabbitTemplate) {\n            RabbitTemplate rabbitTemplate = (RabbitTemplate) bean;\n            rabbitTemplate.addBeforePublishPostProcessors(new TenantRabbitMQMessagePostProcessor());\n        }\n        return bean;\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-biz-tenant", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "tenant", "core", "mq", "rabbitmq", "TenantRabbitMQInitializer.java"], "context_start_lineno": 0, "function_name": "postProcessAfterInitialization", "left_context": "class TenantRabbitMQInitializer implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {", "right_context": "}\n\n}", "class_name": "TenantRabbitMQInitializer", "return_type": "Object", "parameters": [{"type": "Object", "name": "bean"}, {"type": "String", "name": "beanName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractSmsClient implements SmsClient {\n\n    /**\n     * \u77ed\u4fe1\u6e20\u9053\u914d\u7f6e\n     */\n    protected volatile SmsChannelProperties properties;\n\n    public AbstractSmsClient(SmsChannelProperties properties) {\n        this.properties = properties;\n    }\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    public final void init() {\n        doInit();\n        log.debug(\"[init][\u914d\u7f6e({}) \u521d\u59cb\u5316\u5b8c\u6210]\", properties);\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u521d\u59cb\u5316\n     */\n    protected abstract void doInit();\n\n    public final void refresh(SmsChannelProperties properties) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public Long getId() {\n        return properties.getId();\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/65", "ground_truth": "\n        // \u5224\u65ad\u662f\u5426\u66f4\u65b0\n        if (properties.equals(this.properties)) {\n            return;\n        }\n        log.info(\"[refresh][\u914d\u7f6e({})\u53d1\u751f\u53d8\u5316\uff0c\u91cd\u65b0\u521d\u59cb\u5316]\", properties);\n        this.properties = properties;\n        // \u521d\u59cb\u5316\n        this.init();\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-system", "yudao-module-system-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "system", "framework", "sms", "core", "client", "impl", "AbstractSmsClient.java"], "context_start_lineno": 0, "function_name": "refresh", "left_context": "class AbstractSmsClient implements SmsClient {\n\n    /**\n     * \u77ed\u4fe1\u6e20\u9053\u914d\u7f6e\n     */\n    protected volatile SmsChannelProperties properties;\n\n    public AbstractSmsClient(SmsChannelProperties properties) {\n        this.properties = properties;\n    }\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    public final void init() {\n        doInit();\n        log.debug(\"[init][\u914d\u7f6e({}) \u521d\u59cb\u5316\u5b8c\u6210]\", properties);\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u521d\u59cb\u5316\n     */\n    protected abstract void doInit();\n\n    public final void refresh(SmsChannelProperties properties) {", "right_context": "}\n\n    @Override\n    public Long getId() {\n        return properties.getId();\n    }\n\n}", "class_name": "AbstractSmsClient", "return_type": "void", "parameters": [{"type": "SmsChannelProperties", "name": "properties"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InEnumValidator implements ConstraintValidator<InEnum, Integer> {\n\n    private List<Integer> values;\n\n    @Override\n    public void initialize(InEnum annotation) {\n        IntArrayValuable[] values = annotation.value().getEnumConstants();\n        if (values.length == 0) {\n            this.values = Collections.emptyList();\n        } else {\n            this.values = Arrays.stream(values[0].array()).boxed().collect(Collectors.toList());\n        }\n    }\n\n    @Override\n    public boolean isValid(Integer value, ConstraintValidatorContext context) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/68", "ground_truth": "\n        // \u4e3a\u7a7a\u65f6\uff0c\u9ed8\u8ba4\u4e0d\u6821\u9a8c\uff0c\u5373\u8ba4\u4e3a\u901a\u8fc7\n        if (value == null) {\n            return true;\n        }\n        // \u6821\u9a8c\u901a\u8fc7\n        if (values.contains(value)) {\n            return true;\n        }\n        // \u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u81ea\u5b9a\u4e49\u63d0\u793a\u8bed\u53e5\uff08\u56e0\u4e3a\uff0c\u6ce8\u89e3\u4e0a\u7684 value \u662f\u679a\u4e3e\u7c7b\uff0c\u65e0\u6cd5\u83b7\u5f97\u679a\u4e3e\u7c7b\u7684\u5b9e\u9645\u503c\uff09\n        context.disableDefaultConstraintViolation(); // \u7981\u7528\u9ed8\u8ba4\u7684 message \u7684\u503c\n        context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()\n                .replaceAll(\"\\\\{value}\", values.toString())).addConstraintViolation(); // \u91cd\u65b0\u6dfb\u52a0\u9519\u8bef\u63d0\u793a\u8bed\u53e5\n        return false;\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-common", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "common", "validation", "InEnumValidator.java"], "context_start_lineno": 0, "function_name": "isValid", "left_context": "class InEnumValidator implements ConstraintValidator<InEnum, Integer> {\n\n    private List<Integer> values;\n\n    @Override\n    public void initialize(InEnum annotation) {\n        IntArrayValuable[] values = annotation.value().getEnumConstants();\n        if (values.length == 0) {\n            this.values = Collections.emptyList();\n        } else {\n            this.values = Arrays.stream(values[0].array()).boxed().collect(Collectors.toList());\n        }\n    }\n\n    @Override\n    public boolean isValid(Integer value, ConstraintValidatorContext context) {", "right_context": "}\n\n}", "class_name": "InEnumValidator", "return_type": "boolean", "parameters": [{"type": "Integer", "name": "value"}, {"type": "ConstraintValidatorContext", "name": "context"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PageUtils {\n\n    private static final Object[] ORDER_TYPES = new String[]{SortingField.ORDER_ASC, SortingField.ORDER_DESC};\n\n    public static int getStart(PageParam pageParam) {\n        return (pageParam.getPageNo() - 1) * pageParam.getPageSize();\n    }\n\n    /**\n     * \u6784\u5efa\u6392\u5e8f\u5b57\u6bb5\uff08\u9ed8\u8ba4\u5012\u5e8f\uff09\n     *\n     * @param func \u6392\u5e8f\u5b57\u6bb5\u7684 Lambda \u8868\u8fbe\u5f0f\n     * @param <T>  \u6392\u5e8f\u5b57\u6bb5\u6240\u5c5e\u7684\u7c7b\u578b\n     * @return \u6392\u5e8f\u5b57\u6bb5\n     */\n    public static <T> SortingField buildSortingField(Func1<T, ?> func) {\n        return buildSortingField(func, SortingField.ORDER_DESC);\n    }\n\n    /**\n     * \u6784\u5efa\u6392\u5e8f\u5b57\u6bb5\n     *\n     * @param func  \u6392\u5e8f\u5b57\u6bb5\u7684 Lambda \u8868\u8fbe\u5f0f\n     * @param order \u6392\u5e8f\u7c7b\u578b {@link SortingField#ORDER_ASC} {@link SortingField#ORDER_DESC}\n     * @param <T>   \u6392\u5e8f\u5b57\u6bb5\u6240\u5c5e\u7684\u7c7b\u578b\n     * @return \u6392\u5e8f\u5b57\u6bb5\n     */\n    public static <T> SortingField buildSortingField(Func1<T, ?> func, String order) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u6784\u5efa\u9ed8\u8ba4\u7684\u6392\u5e8f\u5b57\u6bb5\n     * \u5982\u679c\u6392\u5e8f\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u5219\u8bbe\u7f6e\u6392\u5e8f\u5b57\u6bb5\uff1b\u5426\u5219\u5ffd\u7565\n     *\n     * @param sortablePageParam \u6392\u5e8f\u5206\u9875\u67e5\u8be2\u53c2\u6570\n     * @param func              \u6392\u5e8f\u5b57\u6bb5\u7684 Lambda \u8868\u8fbe\u5f0f\n     * @param <T>               \u6392\u5e8f\u5b57\u6bb5\u6240\u5c5e\u7684\u7c7b\u578b\n     */\n    public static <T> void buildDefaultSortingField(SortablePageParam sortablePageParam, Func1<T, ?> func) {\n        if (sortablePageParam != null && CollUtil.isEmpty(sortablePageParam.getSortingFields())) {\n            sortablePageParam.setSortingFields(singletonList(buildSortingField(func)));\n        }\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/74", "ground_truth": "\n        Assert.isTrue(ArrayUtil.contains(ORDER_TYPES, order), String.format(\"\u5b57\u6bb5\u7684\u6392\u5e8f\u7c7b\u578b\u53ea\u80fd\u662f %s/%s\", ORDER_TYPES));\n\n        String fieldName = LambdaUtil.getFieldName(func);\n        return new SortingField(fieldName, order);\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-common", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "common", "util", "object", "PageUtils.java"], "context_start_lineno": 0, "function_name": "buildSortingField", "left_context": "class PageUtils {\n\n    private static final Object[] ORDER_TYPES = new String[]{SortingField.ORDER_ASC, SortingField.ORDER_DESC};\n\n    public static int getStart(PageParam pageParam) {\n        return (pageParam.getPageNo() - 1) * pageParam.getPageSize();\n    }\n\n    /**\n     * \u6784\u5efa\u6392\u5e8f\u5b57\u6bb5\uff08\u9ed8\u8ba4\u5012\u5e8f\uff09\n     *\n     * @param func \u6392\u5e8f\u5b57\u6bb5\u7684 Lambda \u8868\u8fbe\u5f0f\n     * @param <T>  \u6392\u5e8f\u5b57\u6bb5\u6240\u5c5e\u7684\u7c7b\u578b\n     * @return \u6392\u5e8f\u5b57\u6bb5\n     */\n    public static <T> SortingField buildSortingField(Func1<T, ?> func) {\n        return buildSortingField(func, SortingField.ORDER_DESC);\n    }\n\n    /**\n     * \u6784\u5efa\u6392\u5e8f\u5b57\u6bb5\n     *\n     * @param func  \u6392\u5e8f\u5b57\u6bb5\u7684 Lambda \u8868\u8fbe\u5f0f\n     * @param order \u6392\u5e8f\u7c7b\u578b {@link SortingField#ORDER_ASC} {@link SortingField#ORDER_DESC}\n     * @param <T>   \u6392\u5e8f\u5b57\u6bb5\u6240\u5c5e\u7684\u7c7b\u578b\n     * @return \u6392\u5e8f\u5b57\u6bb5\n     */\n    public static <T> SortingField buildSortingField(Func1<T, ?> func, String order) {", "right_context": "}\n\n    /**\n     * \u6784\u5efa\u9ed8\u8ba4\u7684\u6392\u5e8f\u5b57\u6bb5\n     * \u5982\u679c\u6392\u5e8f\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u5219\u8bbe\u7f6e\u6392\u5e8f\u5b57\u6bb5\uff1b\u5426\u5219\u5ffd\u7565\n     *\n     * @param sortablePageParam \u6392\u5e8f\u5206\u9875\u67e5\u8be2\u53c2\u6570\n     * @param func              \u6392\u5e8f\u5b57\u6bb5\u7684 Lambda \u8868\u8fbe\u5f0f\n     * @param <T>               \u6392\u5e8f\u5b57\u6bb5\u6240\u5c5e\u7684\u7c7b\u578b\n     */\n    public static <T> void buildDefaultSortingField(SortablePageParam sortablePageParam, Func1<T, ?> func) {\n        if (sortablePageParam != null && CollUtil.isEmpty(sortablePageParam.getSortingFields())) {\n            sortablePageParam.setSortingFields(singletonList(buildSortingField(func)));\n        }\n    }\n\n}", "class_name": "PageUtils", "return_type": "SortingField", "parameters": [{"type": "Func1<T,?>", "name": "func"}, {"type": "String", "name": "order"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T>List<T> filterList(Collection<T> from,Predicate<T> predicate){\n//   if (CollUtil.isEmpty(from)) {\n//     return new ArrayList<>();\n//   }\n//   return from.stream().filter(predicate).collect(Collectors.toList());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T,R>List<T> distinct(Collection<T> from,Function<T,R> keyMapper){\n//   if (CollUtil.isEmpty(from)) {\n//     return new ArrayList<>();\n//   }\n//   return distinct(from,keyMapper,(t1,t2) -> t1);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T,R>List<T> distinct(Collection<T> from,Function<T,R> keyMapper,BinaryOperator<T> cover){\n//   if (CollUtil.isEmpty(from)) {\n//     return new ArrayList<>();\n//   }\n//   return new ArrayList<>(convertMap(from,keyMapper,Function.identity(),cover).values());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T>List<T> newArrayList(List<List<T>> list){\n//   return list.stream().flatMap(Collection::stream).collect(Collectors.toList());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/json/JsonUtils.java\n// --------------------------------------------------\n// public static <T>List<T> parseArray(String text,Class<T> clazz){\n//   if (StrUtil.isEmpty(text)) {\n//     return new ArrayList<>();\n//   }\n//   try {\n//     return objectMapper.readValue(text,objectMapper.getTypeFactory().constructCollectionType(List.class,clazz));\n//   }\n//  catch (  IOException e) {\n//     log.error(\"json parse err,json:{}\",text,e);\n//     throw new RuntimeException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/json/JsonUtils.java\n// --------------------------------------------------\n// public static <T>List<T> parseArray(String text,String path,Class<T> clazz){\n//   if (StrUtil.isEmpty(text)) {\n//     return null;\n//   }\n//   try {\n//     JsonNode treeNode=objectMapper.readTree(text);\n//     JsonNode pathNode=treeNode.path(path);\n//     return objectMapper.readValue(pathNode.toString(),objectMapper.getTypeFactory().constructCollectionType(List.class,clazz));\n//   }\n//  catch (  IOException e) {\n//     log.error(\"json parse err,json:{}\",text,e);\n//     throw new RuntimeException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-biz-ip/src/main/java/cn/iocoder/yudao/framework/ip/core/utils/AreaUtils.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u6307\u5b9a\u7c7b\u578b\u7684\u533a\u57df\u5217\u8868\n//  * @param type \u533a\u57df\u7c7b\u578b\n//  * @param func \u8f6c\u6362\u51fd\u6570\n//  * @param < T >  \u7ed3\u679c\u7c7b\u578b\n//  * @return \u533a\u57df\u5217\u8868\n//  */\n// public static <T>List<T> getByType(AreaTypeEnum type,Function<Area,T> func){\n//   return convertList(areas.values(),func,area -> type.getType().equals(area.getType()));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/util/ExcelUtils.java\n// --------------------------------------------------\n// public static <T>List<T> read(MultipartFile file,Class<T> head) throws IOException {\n//   return EasyExcel.read(file.getInputStream(),head,null).autoCloseStream(false).doReadAllSync();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// default List<T> selectList(){\n//   return selectList(new QueryWrapper<>());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// default List<T> selectList(String field,Object value){\n//   return selectList(new QueryWrapper<T>().eq(field,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// default List<T> selectList(SFunction<T,?> field,Object value){\n//   return selectList(new LambdaQueryWrapper<T>().eq(field,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// default List<T> selectList(String field,Collection<?> values){\n//   if (CollUtil.isEmpty(values)) {\n//     return CollUtil.newArrayList();\n//   }\n//   return selectList(new QueryWrapper<T>().in(field,values));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// default List<T> selectList(SFunction<T,?> field,Collection<?> values){\n//   if (CollUtil.isEmpty(values)) {\n//     return CollUtil.newArrayList();\n//   }\n//   return selectList(new LambdaQueryWrapper<T>().in(field,values));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// @Deprecated default List<T> selectList(SFunction<T,?> leField,SFunction<T,?> geField,Object value){\n//   return selectList(new LambdaQueryWrapper<T>().le(leField,value).ge(geField,value));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java\n// --------------------------------------------------\n// default List<T> selectList(SFunction<T,?> field1,Object value1,SFunction<T,?> field2,Object value2){\n//   return selectList(new LambdaQueryWrapper<T>().eq(field1,value1).eq(field2,value2));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/translate/core/TranslateUtils.java\n// --------------------------------------------------\n// /** \n//  * \u6570\u636e\u7ffb\u8bd1 \u4f7f\u7528\u573a\u666f\uff1a\u65e0\u6cd5\u4f7f\u7528 @TransMethodResult \u6ce8\u89e3\u7684\u573a\u666f\uff0c\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u89e6\u53d1\u7ffb\u8bd1\n//  * @param data \u6570\u636e\n//  * @return \u7ffb\u8bd1\u7ed3\u679c\n//  */\n// public static <T extends VO>List<T> translate(List<T> data){\n//   if (CollUtil.isNotEmpty((data))) {\n//     transService.transBatch(data);\n//   }\n//   return data;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-test/src/main/java/cn/iocoder/yudao/framework/test/core/util/RandomUtils.java\n// --------------------------------------------------\n// @SafeVarargs public static <T>List<T> randomPojoList(Class<T> clazz,Consumer<T>... consumers){\n//   int size=RandomUtil.randomInt(1,RANDOM_COLLECTION_LENGTH);\n//   return Stream.iterate(0,i -> i).limit(size).map(o -> randomPojo(clazz,consumers)).collect(Collectors.toList());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/util/BpmnModelUtils.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u5f97 BPMN \u6d41\u7a0b\u4e2d\uff0c\u6307\u5b9a\u7684\u5143\u7d20\u4eec\n//  * @param model \u6a21\u578b\n//  * @param clazz \u6307\u5b9a\u5143\u7d20\u3002\u4f8b\u5982\u8bf4\uff0c{@link UserTask}\u3001 {@link Gateway} \u7b49\u7b49\n//  * @return \u5143\u7d20\u4eec\n//  */\n// public static <T extends FlowElement>List<T> getBpmnModelElements(BpmnModel model,Class<T> clazz){\n//   List<T> result=new ArrayList<>();\n//   model.getProcesses().forEach(process -> {\n//     process.getFlowElements().forEach(flowElement -> {\n//       if (flowElement.getClass().isAssignableFrom(clazz)) {\n//         result.add((T)flowElement);\n//       }\n//     }\n// );\n//   }\n// );\n//   return result;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BeanUtils {\n\n    public static <T> T toBean(Object source, Class<T> targetClass) {\n        return BeanUtil.toBean(source, targetClass);\n    }\n\n    public static <T> T toBean(Object source, Class<T> targetClass, Consumer<T> peek) {\n        T target = toBean(source, targetClass);\n        if (target != null) {\n            peek.accept(target);\n        }\n        return target;\n    }\n\n    public static <S, T> List<T> toBean(List<S> source, Class<T> targetType) {<FILL_FUNCTION_BODY>}\n\n    public static <S, T> List<T> toBean(List<S> source, Class<T> targetType, Consumer<T> peek) {\n        List<T> list = toBean(source, targetType);\n        if (list != null) {\n            list.forEach(peek);\n        }\n        return list;\n    }\n\n    public static <S, T> PageResult<T> toBean(PageResult<S> source, Class<T> targetType) {\n        return toBean(source, targetType, null);\n    }\n\n    public static <S, T> PageResult<T> toBean(PageResult<S> source, Class<T> targetType, Consumer<T> peek) {\n        if (source == null) {\n            return null;\n        }\n        List<T> list = toBean(source.getList(), targetType);\n        if (peek != null) {\n            list.forEach(peek);\n        }\n        return new PageResult<>(list, source.getTotal());\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/91", "ground_truth": "\n        if (source == null) {\n            return null;\n        }\n        return CollectionUtils.convertList(source, s -> toBean(s, targetType));\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-common", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "common", "util", "object", "BeanUtils.java"], "context_start_lineno": 0, "function_name": "toBean", "left_context": "class BeanUtils {\n\n    public static <T> T toBean(Object source, Class<T> targetClass) {\n        return BeanUtil.toBean(source, targetClass);\n    }\n\n    public static <T> T toBean(Object source, Class<T> targetClass, Consumer<T> peek) {\n        T target = toBean(source, targetClass);\n        if (target != null) {\n            peek.accept(target);\n        }\n        return target;\n    }\n\n    public static <S, T> List<T> toBean(List<S> source, Class<T> targetType) {", "right_context": "}\n\n    public static <S, T> List<T> toBean(List<S> source, Class<T> targetType, Consumer<T> peek) {\n        List<T> list = toBean(source, targetType);\n        if (list != null) {\n            list.forEach(peek);\n        }\n        return list;\n    }\n\n    public static <S, T> PageResult<T> toBean(PageResult<S> source, Class<T> targetType) {\n        return toBean(source, targetType, null);\n    }\n\n    public static <S, T> PageResult<T> toBean(PageResult<S> source, Class<T> targetType, Consumer<T> peek) {\n        if (source == null) {\n            return null;\n        }\n        List<T> list = toBean(source.getList(), targetType);\n        if (peek != null) {\n            list.forEach(peek);\n        }\n        return new PageResult<>(list, source.getTotal());\n    }\n\n}", "class_name": "BeanUtils", "return_type": "List<T>", "parameters": [{"type": "List<S>", "name": "source"}, {"type": "Class<T>", "name": "targetType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DictTypeServiceImpl implements DictTypeService {\n\n    @Resource\n    private DictDataService dictDataService;\n\n    @Resource\n    private DictTypeMapper dictTypeMapper;\n\n    @Override\n    public PageResult<DictTypeDO> getDictTypePage(DictTypePageReqVO pageReqVO) {\n        return dictTypeMapper.selectPage(pageReqVO);\n    }\n\n    @Override\n    public DictTypeDO getDictType(Long id) {\n        return dictTypeMapper.selectById(id);\n    }\n\n    @Override\n    public DictTypeDO getDictType(String type) {\n        return dictTypeMapper.selectByType(type);\n    }\n\n    @Override\n    public Long createDictType(DictTypeSaveReqVO createReqVO) {\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDictTypeNameUnique(null, createReqVO.getName());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u7c7b\u578b\u7684\u552f\u4e00\u6027\n        validateDictTypeUnique(null, createReqVO.getType());\n\n        // \u63d2\u5165\u5b57\u5178\u7c7b\u578b\n        DictTypeDO dictType = BeanUtils.toBean(createReqVO, DictTypeDO.class);\n        dictType.setDeletedTime(LocalDateTimeUtils.EMPTY); // \u552f\u4e00\u7d22\u5f15\uff0c\u907f\u514d null \u503c\n        dictTypeMapper.insert(dictType);\n        return dictType.getId();\n    }\n\n    @Override\n    public void updateDictType(DictTypeSaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u81ea\u5df1\u5b58\u5728\n        validateDictTypeExists(updateReqVO.getId());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDictTypeNameUnique(updateReqVO.getId(), updateReqVO.getName());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u7c7b\u578b\u7684\u552f\u4e00\u6027\n        validateDictTypeUnique(updateReqVO.getId(), updateReqVO.getType());\n\n        // \u66f4\u65b0\u5b57\u5178\u7c7b\u578b\n        DictTypeDO updateObj = BeanUtils.toBean(updateReqVO, DictTypeDO.class);\n        dictTypeMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDictType(Long id) {\n        // \u6821\u9a8c\u662f\u5426\u5b58\u5728\n        DictTypeDO dictType = validateDictTypeExists(id);\n        // \u6821\u9a8c\u662f\u5426\u6709\u5b57\u5178\u6570\u636e\n        if (dictDataService.getDictDataCountByDictType(dictType.getType()) > 0) {\n            throw exception(DICT_TYPE_HAS_CHILDREN);\n        }\n        // \u5220\u9664\u5b57\u5178\u7c7b\u578b\n        dictTypeMapper.updateToDelete(id, LocalDateTime.now());\n    }\n\n    @Override\n    public List<DictTypeDO> getDictTypeList() {\n        return dictTypeMapper.selectList();\n    }\n\n    @VisibleForTesting\n    void validateDictTypeNameUnique(Long id, String name) {\n        DictTypeDO dictType = dictTypeMapper.selectByName(name);\n        if (dictType == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u5b57\u5178\u7c7b\u578b\n        if (id == null) {\n            throw exception(DICT_TYPE_NAME_DUPLICATE);\n        }\n        if (!dictType.getId().equals(id)) {\n            throw exception(DICT_TYPE_NAME_DUPLICATE);\n        }\n    }\n\n    @VisibleForTesting\n    void validateDictTypeUnique(Long id, String type) {<FILL_FUNCTION_BODY>}\n\n    @VisibleForTesting\n    DictTypeDO validateDictTypeExists(Long id) {\n        if (id == null) {\n            return null;\n        }\n        DictTypeDO dictType = dictTypeMapper.selectById(id);\n        if (dictType == null) {\n            throw exception(DICT_TYPE_NOT_EXISTS);\n        }\n        return dictType;\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/113", "ground_truth": "\n        if (StrUtil.isEmpty(type)) {\n            return;\n        }\n        DictTypeDO dictType = dictTypeMapper.selectByType(type);\n        if (dictType == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u5b57\u5178\u7c7b\u578b\n        if (id == null) {\n            throw exception(DICT_TYPE_TYPE_DUPLICATE);\n        }\n        if (!dictType.getId().equals(id)) {\n            throw exception(DICT_TYPE_TYPE_DUPLICATE);\n        }\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-system", "yudao-module-system-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "system", "service", "dict", "DictTypeServiceImpl.java"], "context_start_lineno": 0, "function_name": "validateDictTypeUnique", "left_context": "class DictTypeServiceImpl implements DictTypeService {\n\n    @Resource\n    private DictDataService dictDataService;\n\n    @Resource\n    private DictTypeMapper dictTypeMapper;\n\n    @Override\n    public PageResult<DictTypeDO> getDictTypePage(DictTypePageReqVO pageReqVO) {\n        return dictTypeMapper.selectPage(pageReqVO);\n    }\n\n    @Override\n    public DictTypeDO getDictType(Long id) {\n        return dictTypeMapper.selectById(id);\n    }\n\n    @Override\n    public DictTypeDO getDictType(String type) {\n        return dictTypeMapper.selectByType(type);\n    }\n\n    @Override\n    public Long createDictType(DictTypeSaveReqVO createReqVO) {\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDictTypeNameUnique(null, createReqVO.getName());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u7c7b\u578b\u7684\u552f\u4e00\u6027\n        validateDictTypeUnique(null, createReqVO.getType());\n\n        // \u63d2\u5165\u5b57\u5178\u7c7b\u578b\n        DictTypeDO dictType = BeanUtils.toBean(createReqVO, DictTypeDO.class);\n        dictType.setDeletedTime(LocalDateTimeUtils.EMPTY); // \u552f\u4e00\u7d22\u5f15\uff0c\u907f\u514d null \u503c\n        dictTypeMapper.insert(dictType);\n        return dictType.getId();\n    }\n\n    @Override\n    public void updateDictType(DictTypeSaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u81ea\u5df1\u5b58\u5728\n        validateDictTypeExists(updateReqVO.getId());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDictTypeNameUnique(updateReqVO.getId(), updateReqVO.getName());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u7684\u7c7b\u578b\u7684\u552f\u4e00\u6027\n        validateDictTypeUnique(updateReqVO.getId(), updateReqVO.getType());\n\n        // \u66f4\u65b0\u5b57\u5178\u7c7b\u578b\n        DictTypeDO updateObj = BeanUtils.toBean(updateReqVO, DictTypeDO.class);\n        dictTypeMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDictType(Long id) {\n        // \u6821\u9a8c\u662f\u5426\u5b58\u5728\n        DictTypeDO dictType = validateDictTypeExists(id);\n        // \u6821\u9a8c\u662f\u5426\u6709\u5b57\u5178\u6570\u636e\n        if (dictDataService.getDictDataCountByDictType(dictType.getType()) > 0) {\n            throw exception(DICT_TYPE_HAS_CHILDREN);\n        }\n        // \u5220\u9664\u5b57\u5178\u7c7b\u578b\n        dictTypeMapper.updateToDelete(id, LocalDateTime.now());\n    }\n\n    @Override\n    public List<DictTypeDO> getDictTypeList() {\n        return dictTypeMapper.selectList();\n    }\n\n    @VisibleForTesting\n    void validateDictTypeNameUnique(Long id, String name) {\n        DictTypeDO dictType = dictTypeMapper.selectByName(name);\n        if (dictType == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u5b57\u5178\u7c7b\u578b\n        if (id == null) {\n            throw exception(DICT_TYPE_NAME_DUPLICATE);\n        }\n        if (!dictType.getId().equals(id)) {\n            throw exception(DICT_TYPE_NAME_DUPLICATE);\n        }\n    }\n\n    @VisibleForTesting\n    void validateDictTypeUnique(Long id, String type) {", "right_context": "}\n\n    @VisibleForTesting\n    DictTypeDO validateDictTypeExists(Long id) {\n        if (id == null) {\n            return null;\n        }\n        DictTypeDO dictType = dictTypeMapper.selectById(id);\n        if (dictType == null) {\n            throw exception(DICT_TYPE_NOT_EXISTS);\n        }\n        return dictType;\n    }\n\n}", "class_name": "DictTypeServiceImpl", "return_type": "void", "parameters": [{"type": "Long", "name": "id"}, {"type": "String", "name": "type"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass YudaoServerApplication {\n\n    public static void main(String[] args) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/117", "ground_truth": "\n        // \u5982\u679c\u4f60\u78b0\u5230\u542f\u52a8\u7684\u95ee\u9898\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb https://doc.iocoder.cn/quick-start/ \u6587\u7ae0\n        // \u5982\u679c\u4f60\u78b0\u5230\u542f\u52a8\u7684\u95ee\u9898\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb https://doc.iocoder.cn/quick-start/ \u6587\u7ae0\n        // \u5982\u679c\u4f60\u78b0\u5230\u542f\u52a8\u7684\u95ee\u9898\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb https://doc.iocoder.cn/quick-start/ \u6587\u7ae0\n\n        SpringApplication.run(YudaoServerApplication.class, args);\n//        new SpringApplicationBuilder(YudaoServerApplication.class)\n//                .applicationStartup(new BufferingApplicationStartup(20480))\n//                .run(args);\n\n        // \u5982\u679c\u4f60\u78b0\u5230\u542f\u52a8\u7684\u95ee\u9898\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb https://doc.iocoder.cn/quick-start/ \u6587\u7ae0\n        // \u5982\u679c\u4f60\u78b0\u5230\u542f\u52a8\u7684\u95ee\u9898\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb https://doc.iocoder.cn/quick-start/ \u6587\u7ae0\n        // \u5982\u679c\u4f60\u78b0\u5230\u542f\u52a8\u7684\u95ee\u9898\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb https://doc.iocoder.cn/quick-start/ \u6587\u7ae0\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-server", "src", "main", "java", "cn", "iocoder", "yudao", "server", "YudaoServerApplication.java"], "context_start_lineno": 0, "function_name": "main", "left_context": "class YudaoServerApplication {\n\n    public static void main(String[] args) {", "right_context": "}\n\n}", "class_name": "YudaoServerApplication", "return_type": "void", "parameters": [{"type": "String[]", "name": "args"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractRedisStreamMessageListener<T extends AbstractRedisStreamMessage>\n        implements StreamListener<String, ObjectRecord<String, String>> {\n\n    /**\n     * \u6d88\u606f\u7c7b\u578b\n     */\n    private final Class<T> messageType;\n    /**\n     * Redis Channel\n     */\n    @Getter\n    private final String streamKey;\n\n    /**\n     * Redis \u6d88\u8d39\u8005\u5206\u7ec4\uff0c\u9ed8\u8ba4\u4f7f\u7528 spring.application.name \u540d\u5b57\n     */\n    @Value(\"${spring.application.name}\")\n    @Getter\n    private String group;\n    /**\n     * RedisMQTemplate\n     */\n    @Setter\n    private RedisMQTemplate redisMQTemplate;\n\n    @SneakyThrows\n    protected AbstractRedisStreamMessageListener() {\n        this.messageType = getMessageClass();\n        this.streamKey = messageType.getDeclaredConstructor().newInstance().getStreamKey();\n    }\n\n    @Override\n    public void onMessage(ObjectRecord<String, String> message) {\n        // \u6d88\u8d39\u6d88\u606f\n        T messageObj = JsonUtils.parseObject(message.getValue(), messageType);\n        try {\n            consumeMessageBefore(messageObj);\n            // \u6d88\u8d39\u6d88\u606f\n            this.onMessage(messageObj);\n            // ack \u6d88\u606f\u6d88\u8d39\u5b8c\u6210\n            redisMQTemplate.getRedisTemplate().opsForStream().acknowledge(group, message);\n            // TODO \u828b\u827f\uff1a\u9700\u8981\u989d\u5916\u8003\u8651\u4ee5\u4e0b\u51e0\u4e2a\u70b9\uff1a\n            // 1. \u5904\u7406\u5f02\u5e38\u7684\u60c5\u51b5\n            // 2. \u53d1\u9001\u65e5\u5fd7\uff1b\u4ee5\u53ca\u4e8b\u52a1\u7684\u7ed3\u5408\n            // 3. \u6d88\u8d39\u65e5\u5fd7\uff1b\u4ee5\u53ca\u901a\u7528\u7684\u5e42\u7b49\u6027\n            // 4. \u6d88\u8d39\u5931\u8d25\u7684\u91cd\u8bd5\uff0chttps://zhuanlan.zhihu.com/p/60501638\n        } finally {\n            consumeMessageAfter(messageObj);\n        }\n    }\n\n    /**\n     * \u5904\u7406\u6d88\u606f\n     *\n     * @param message \u6d88\u606f\n     */\n    public abstract void onMessage(T message);\n\n    /**\n     * \u901a\u8fc7\u89e3\u6790\u7c7b\u4e0a\u7684\u6cdb\u578b\uff0c\u83b7\u5f97\u6d88\u606f\u7c7b\u578b\n     *\n     * @return \u6d88\u606f\u7c7b\u578b\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class<T> getMessageClass() {\n        Type type = TypeUtil.getTypeArgument(getClass(), 0);\n        if (type == null) {\n            throw new IllegalStateException(String.format(\"\u7c7b\u578b(%s) \u9700\u8981\u8bbe\u7f6e\u6d88\u606f\u7c7b\u578b\", getClass().getName()));\n        }\n        return (Class<T>) type;\n    }\n\n    private void consumeMessageBefore(AbstractRedisMessage message) {<FILL_FUNCTION_BODY>}\n\n    private void consumeMessageAfter(AbstractRedisMessage message) {\n        assert redisMQTemplate != null;\n        List<RedisMessageInterceptor> interceptors = redisMQTemplate.getInterceptors();\n        // \u5012\u5e8f\n        for (int i = interceptors.size() - 1; i >= 0; i--) {\n            interceptors.get(i).consumeMessageAfter(message);\n        }\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/191", "ground_truth": "\n        assert redisMQTemplate != null;\n        List<RedisMessageInterceptor> interceptors = redisMQTemplate.getInterceptors();\n        // \u6b63\u5e8f\n        interceptors.forEach(interceptor -> interceptor.consumeMessageBefore(message));\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-mq", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "mq", "redis", "core", "stream", "AbstractRedisStreamMessageListener.java"], "context_start_lineno": 0, "function_name": "consumeMessageBefore", "left_context": "class AbstractRedisStreamMessageListener<T extends AbstractRedisStreamMessage>\n        implements StreamListener<String, ObjectRecord<String, String>> {\n\n    /**\n     * \u6d88\u606f\u7c7b\u578b\n     */\n    private final Class<T> messageType;\n    /**\n     * Redis Channel\n     */\n    @Getter\n    private final String streamKey;\n\n    /**\n     * Redis \u6d88\u8d39\u8005\u5206\u7ec4\uff0c\u9ed8\u8ba4\u4f7f\u7528 spring.application.name \u540d\u5b57\n     */\n    @Value(\"${spring.application.name}\")\n    @Getter\n    private String group;\n    /**\n     * RedisMQTemplate\n     */\n    @Setter\n    private RedisMQTemplate redisMQTemplate;\n\n    @SneakyThrows\n    protected AbstractRedisStreamMessageListener() {\n        this.messageType = getMessageClass();\n        this.streamKey = messageType.getDeclaredConstructor().newInstance().getStreamKey();\n    }\n\n    @Override\n    public void onMessage(ObjectRecord<String, String> message) {\n        // \u6d88\u8d39\u6d88\u606f\n        T messageObj = JsonUtils.parseObject(message.getValue(), messageType);\n        try {\n            consumeMessageBefore(messageObj);\n            // \u6d88\u8d39\u6d88\u606f\n            this.onMessage(messageObj);\n            // ack \u6d88\u606f\u6d88\u8d39\u5b8c\u6210\n            redisMQTemplate.getRedisTemplate().opsForStream().acknowledge(group, message);\n            // TODO \u828b\u827f\uff1a\u9700\u8981\u989d\u5916\u8003\u8651\u4ee5\u4e0b\u51e0\u4e2a\u70b9\uff1a\n            // 1. \u5904\u7406\u5f02\u5e38\u7684\u60c5\u51b5\n            // 2. \u53d1\u9001\u65e5\u5fd7\uff1b\u4ee5\u53ca\u4e8b\u52a1\u7684\u7ed3\u5408\n            // 3. \u6d88\u8d39\u65e5\u5fd7\uff1b\u4ee5\u53ca\u901a\u7528\u7684\u5e42\u7b49\u6027\n            // 4. \u6d88\u8d39\u5931\u8d25\u7684\u91cd\u8bd5\uff0chttps://zhuanlan.zhihu.com/p/60501638\n        } finally {\n            consumeMessageAfter(messageObj);\n        }\n    }\n\n    /**\n     * \u5904\u7406\u6d88\u606f\n     *\n     * @param message \u6d88\u606f\n     */\n    public abstract void onMessage(T message);\n\n    /**\n     * \u901a\u8fc7\u89e3\u6790\u7c7b\u4e0a\u7684\u6cdb\u578b\uff0c\u83b7\u5f97\u6d88\u606f\u7c7b\u578b\n     *\n     * @return \u6d88\u606f\u7c7b\u578b\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class<T> getMessageClass() {\n        Type type = TypeUtil.getTypeArgument(getClass(), 0);\n        if (type == null) {\n            throw new IllegalStateException(String.format(\"\u7c7b\u578b(%s) \u9700\u8981\u8bbe\u7f6e\u6d88\u606f\u7c7b\u578b\", getClass().getName()));\n        }\n        return (Class<T>) type;\n    }\n\n    private void consumeMessageBefore(AbstractRedisMessage message) {", "right_context": "}\n\n    private void consumeMessageAfter(AbstractRedisMessage message) {\n        assert redisMQTemplate != null;\n        List<RedisMessageInterceptor> interceptors = redisMQTemplate.getInterceptors();\n        // \u5012\u5e8f\n        for (int i = interceptors.size() - 1; i >= 0; i--) {\n            interceptors.get(i).consumeMessageAfter(message);\n        }\n    }\n\n}", "class_name": "AbstractRedisStreamMessageListener", "return_type": "void", "parameters": [{"type": "AbstractRedisMessage", "name": "message"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/db/DataSourceConfigService.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u5f97\u6570\u636e\u6e90\u914d\u7f6e\u5217\u8868\n//  * @return \u6570\u636e\u6e90\u914d\u7f6e\u5217\u8868\n//  */\n// List<DataSourceConfigDO> getDataSourceConfigList();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DataSourceConfigServiceImpl implements DataSourceConfigService {\n\n    @Resource\n    private DataSourceConfigMapper dataSourceConfigMapper;\n\n    @Resource\n    private DynamicDataSourceProperties dynamicDataSourceProperties;\n\n    @Override\n    public Long createDataSourceConfig(DataSourceConfigSaveReqVO createReqVO) {\n        DataSourceConfigDO config = BeanUtils.toBean(createReqVO, DataSourceConfigDO.class);\n        validateConnectionOK(config);\n\n        // \u63d2\u5165\n        dataSourceConfigMapper.insert(config);\n        // \u8fd4\u56de\n        return config.getId();\n    }\n\n    @Override\n    public void updateDataSourceConfig(DataSourceConfigSaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDataSourceConfigExists(updateReqVO.getId());\n        DataSourceConfigDO updateObj = BeanUtils.toBean(updateReqVO, DataSourceConfigDO.class);\n        validateConnectionOK(updateObj);\n\n        // \u66f4\u65b0\n        dataSourceConfigMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDataSourceConfig(Long id) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDataSourceConfigExists(id);\n        // \u5220\u9664\n        dataSourceConfigMapper.deleteById(id);\n    }\n\n    private void validateDataSourceConfigExists(Long id) {\n        if (dataSourceConfigMapper.selectById(id) == null) {\n            throw exception(DATA_SOURCE_CONFIG_NOT_EXISTS);\n        }\n    }\n\n    @Override\n    public DataSourceConfigDO getDataSourceConfig(Long id) {\n        // \u5982\u679c id \u4e3a 0\uff0c\u9ed8\u8ba4\u4e3a master \u7684\u6570\u636e\u6e90\n        if (Objects.equals(id, DataSourceConfigDO.ID_MASTER)) {\n            return buildMasterDataSourceConfig();\n        }\n        // \u4ece DB \u4e2d\u8bfb\u53d6\n        return dataSourceConfigMapper.selectById(id);\n    }\n\n    @Override\n    public List<DataSourceConfigDO> getDataSourceConfigList() {<FILL_FUNCTION_BODY>}\n\n    private void validateConnectionOK(DataSourceConfigDO config) {\n        boolean success = JdbcUtils.isConnectionOK(config.getUrl(), config.getUsername(), config.getPassword());\n        if (!success) {\n            throw exception(DATA_SOURCE_CONFIG_NOT_OK);\n        }\n    }\n\n    private DataSourceConfigDO buildMasterDataSourceConfig() {\n        String primary = dynamicDataSourceProperties.getPrimary();\n        DataSourceProperty dataSourceProperty = dynamicDataSourceProperties.getDatasource().get(primary);\n        return new DataSourceConfigDO().setId(DataSourceConfigDO.ID_MASTER).setName(primary)\n                .setUrl(dataSourceProperty.getUrl())\n                .setUsername(dataSourceProperty.getUsername())\n                .setPassword(dataSourceProperty.getPassword());\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/216", "ground_truth": "\n        List<DataSourceConfigDO> result = dataSourceConfigMapper.selectList();\n        // \u8865\u5145 master \u6570\u636e\u6e90\n        result.add(0, buildMasterDataSourceConfig());\n        return result;\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-infra", "yudao-module-infra-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "infra", "service", "db", "DataSourceConfigServiceImpl.java"], "context_start_lineno": 0, "function_name": "getDataSourceConfigList", "left_context": "class DataSourceConfigServiceImpl implements DataSourceConfigService {\n\n    @Resource\n    private DataSourceConfigMapper dataSourceConfigMapper;\n\n    @Resource\n    private DynamicDataSourceProperties dynamicDataSourceProperties;\n\n    @Override\n    public Long createDataSourceConfig(DataSourceConfigSaveReqVO createReqVO) {\n        DataSourceConfigDO config = BeanUtils.toBean(createReqVO, DataSourceConfigDO.class);\n        validateConnectionOK(config);\n\n        // \u63d2\u5165\n        dataSourceConfigMapper.insert(config);\n        // \u8fd4\u56de\n        return config.getId();\n    }\n\n    @Override\n    public void updateDataSourceConfig(DataSourceConfigSaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDataSourceConfigExists(updateReqVO.getId());\n        DataSourceConfigDO updateObj = BeanUtils.toBean(updateReqVO, DataSourceConfigDO.class);\n        validateConnectionOK(updateObj);\n\n        // \u66f4\u65b0\n        dataSourceConfigMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDataSourceConfig(Long id) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDataSourceConfigExists(id);\n        // \u5220\u9664\n        dataSourceConfigMapper.deleteById(id);\n    }\n\n    private void validateDataSourceConfigExists(Long id) {\n        if (dataSourceConfigMapper.selectById(id) == null) {\n            throw exception(DATA_SOURCE_CONFIG_NOT_EXISTS);\n        }\n    }\n\n    @Override\n    public DataSourceConfigDO getDataSourceConfig(Long id) {\n        // \u5982\u679c id \u4e3a 0\uff0c\u9ed8\u8ba4\u4e3a master \u7684\u6570\u636e\u6e90\n        if (Objects.equals(id, DataSourceConfigDO.ID_MASTER)) {\n            return buildMasterDataSourceConfig();\n        }\n        // \u4ece DB \u4e2d\u8bfb\u53d6\n        return dataSourceConfigMapper.selectById(id);\n    }\n\n    @Override\n    public List<DataSourceConfigDO> getDataSourceConfigList() {", "right_context": "}\n\n    private void validateConnectionOK(DataSourceConfigDO config) {\n        boolean success = JdbcUtils.isConnectionOK(config.getUrl(), config.getUsername(), config.getPassword());\n        if (!success) {\n            throw exception(DATA_SOURCE_CONFIG_NOT_OK);\n        }\n    }\n\n    private DataSourceConfigDO buildMasterDataSourceConfig() {\n        String primary = dynamicDataSourceProperties.getPrimary();\n        DataSourceProperty dataSourceProperty = dynamicDataSourceProperties.getDatasource().get(primary);\n        return new DataSourceConfigDO().setId(DataSourceConfigDO.ID_MASTER).setName(primary)\n                .setUrl(dataSourceProperty.getUrl())\n                .setUsername(dataSourceProperty.getUsername())\n                .setPassword(dataSourceProperty.getPassword());\n    }\n\n}", "class_name": "DataSourceConfigServiceImpl", "return_type": "List<DataSourceConfigDO>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/socail/SocialClientController.java\n// --------------------------------------------------\n// @DeleteMapping(\"/delete\") @Operation(summary=\"\u5220\u9664\u793e\u4ea4\u5ba2\u6237\u7aef\") @Parameter(name=\"id\",description=\"\u7f16\u53f7\",required=true) @PreAuthorize(\"@ss.hasPermission('system:social-client:delete')\") public CommonResult<Boolean> deleteSocialClient(@RequestParam(\"id\") Long id){\n//   socialClientService.deleteSocialClient(id);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/socail/SocialUserController.java\n// --------------------------------------------------\n// @PostMapping(\"/bind\") @Operation(summary=\"\u793e\u4ea4\u7ed1\u5b9a\uff0c\u4f7f\u7528 code \u6388\u6743\u7801\") public CommonResult<Boolean> socialBind(@RequestBody @Valid SocialUserBindReqVO reqVO){\n//   socialUserService.bindSocialUser(SocialUserConvert.INSTANCE.convert(getLoginUserId(),UserTypeEnum.ADMIN.getValue(),reqVO));\n//   return CommonResult.success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/socail/SocialUserController.java\n// --------------------------------------------------\n// @DeleteMapping(\"/unbind\") @Operation(summary=\"\u53d6\u6d88\u793e\u4ea4\u7ed1\u5b9a\") public CommonResult<Boolean> socialUnbind(@RequestBody SocialUserUnbindReqVO reqVO){\n//   socialUserService.unbindSocialUser(getLoginUserId(),UserTypeEnum.ADMIN.getValue(),reqVO.getType(),reqVO.getOpenid());\n//   return CommonResult.success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/tenant/TenantController.java\n// --------------------------------------------------\n// @PutMapping(\"/update\") @Operation(summary=\"\u66f4\u65b0\u79df\u6237\") @PreAuthorize(\"@ss.hasPermission('system:tenant:update')\") public CommonResult<Boolean> updateTenant(@Valid @RequestBody TenantSaveReqVO updateReqVO){\n//   tenantService.updateTenant(updateReqVO);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/tenant/TenantController.java\n// --------------------------------------------------\n// @DeleteMapping(\"/delete\") @Operation(summary=\"\u5220\u9664\u79df\u6237\") @Parameter(name=\"id\",description=\"\u7f16\u53f7\",required=true,example=\"1024\") @PreAuthorize(\"@ss.hasPermission('system:tenant:delete')\") public CommonResult<Boolean> deleteTenant(@RequestParam(\"id\") Long id){\n//   tenantService.deleteTenant(id);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/tenant/TenantPackageController.java\n// --------------------------------------------------\n// @PutMapping(\"/update\") @Operation(summary=\"\u66f4\u65b0\u79df\u6237\u5957\u9910\") @PreAuthorize(\"@ss.hasPermission('system:tenant-package:update')\") public CommonResult<Boolean> updateTenantPackage(@Valid @RequestBody TenantPackageSaveReqVO updateReqVO){\n//   tenantPackageService.updateTenantPackage(updateReqVO);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/tenant/TenantPackageController.java\n// --------------------------------------------------\n// @DeleteMapping(\"/delete\") @Operation(summary=\"\u5220\u9664\u79df\u6237\u5957\u9910\") @Parameter(name=\"id\",description=\"\u7f16\u53f7\",required=true) @PreAuthorize(\"@ss.hasPermission('system:tenant-package:delete')\") public CommonResult<Boolean> deleteTenantPackage(@RequestParam(\"id\") Long id){\n//   tenantPackageService.deleteTenantPackage(id);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"update\") @Operation(summary=\"\u4fee\u6539\u7528\u6237\") @PreAuthorize(\"@ss.hasPermission('system:user:update')\") public CommonResult<Boolean> updateUser(@Valid @RequestBody UserSaveReqVO reqVO){\n//   userService.updateUser(reqVO);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserController.java\n// --------------------------------------------------\n// @DeleteMapping(\"/delete\") @Operation(summary=\"\u5220\u9664\u7528\u6237\") @Parameter(name=\"id\",description=\"\u7f16\u53f7\",required=true,example=\"1024\") @PreAuthorize(\"@ss.hasPermission('system:user:delete')\") public CommonResult<Boolean> deleteUser(@RequestParam(\"id\") Long id){\n//   userService.deleteUser(id);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/update-password\") @Operation(summary=\"\u91cd\u7f6e\u7528\u6237\u5bc6\u7801\") @PreAuthorize(\"@ss.hasPermission('system:user:update-password')\") public CommonResult<Boolean> updateUserPassword(@Valid @RequestBody UserUpdatePasswordReqVO reqVO){\n//   userService.updateUserPassword(reqVO.getId(),reqVO.getPassword());\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserController.java\n// --------------------------------------------------\n// @PutMapping(\"/update-status\") @Operation(summary=\"\u4fee\u6539\u7528\u6237\u72b6\u6001\") @PreAuthorize(\"@ss.hasPermission('system:user:update')\") public CommonResult<Boolean> updateUserStatus(@Valid @RequestBody UserUpdateStatusReqVO reqVO){\n//   userService.updateUserStatus(reqVO.getId(),reqVO.getStatus());\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserProfileController.java\n// --------------------------------------------------\n// @PutMapping(\"/update\") @Operation(summary=\"\u4fee\u6539\u7528\u6237\u4e2a\u4eba\u4fe1\u606f\") public CommonResult<Boolean> updateUserProfile(@Valid @RequestBody UserProfileUpdateReqVO reqVO){\n//   userService.updateUserProfile(getLoginUserId(),reqVO);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserProfileController.java\n// --------------------------------------------------\n// @PutMapping(\"/update-password\") @Operation(summary=\"\u4fee\u6539\u7528\u6237\u4e2a\u4eba\u5bc6\u7801\") public CommonResult<Boolean> updateUserProfilePassword(@Valid @RequestBody UserProfileUpdatePasswordReqVO reqVO){\n//   userService.updateUserPassword(getLoginUserId(),reqVO);\n//   return success(true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(\"/admin-api/bpm/**\") public CommonResult<Boolean> bpm404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[\u5de5\u4f5c\u6d41\u6a21\u5757 yudao-module-bpm - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/bpm/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(\"/admin-api/mp/**\") public CommonResult<Boolean> mp404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[\u5fae\u4fe1\u516c\u4f17\u53f7 yudao-module-mp - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/mp/build/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(value={\"/admin-api/product/**\",\"/admin-api/trade/**\",\"/admin-api/promotion/**\"}) public CommonResult<Boolean> mall404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[\u5546\u57ce\u7cfb\u7edf yudao-module-mall - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/mall/build/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(\"/admin-api/erp/**\") public CommonResult<Boolean> erp404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[ERP \u6a21\u5757 yudao-module-erp - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/erp/build/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(\"/admin-api/crm/**\") public CommonResult<Boolean> crm404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[CRM \u6a21\u5757 yudao-module-crm - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/crm/build/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(value={\"/admin-api/report/**\"}) public CommonResult<Boolean> report404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[\u62a5\u8868\u6a21\u5757 yudao-module-report - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/report/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-server/src/main/java/cn/iocoder/yudao/server/controller/DefaultController.java\n// --------------------------------------------------\n// @RequestMapping(value={\"/admin-api/pay/**\"}) public CommonResult<Boolean> pay404(){\n//   return CommonResult.error(NOT_IMPLEMENTED.getCode(),\"[\u652f\u4ed8\u6a21\u5757 yudao-module-pay - \u5df2\u7981\u7528][\u53c2\u8003 https://doc.iocoder.cn/pay/build/ \u5f00\u542f]\");\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NoticeController {\n\n    @Resource\n    private NoticeService noticeService;\n\n    @Resource\n    private WebSocketSenderApi webSocketSenderApi;\n\n    @PostMapping(\"/create\")\n    @Operation(summary = \"\u521b\u5efa\u901a\u77e5\u516c\u544a\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:create')\")\n    public CommonResult<Long> createNotice(@Valid @RequestBody NoticeSaveReqVO createReqVO) {\n        Long noticeId = noticeService.createNotice(createReqVO);\n        return success(noticeId);\n    }\n\n    @PutMapping(\"/update\")\n    @Operation(summary = \"\u4fee\u6539\u901a\u77e5\u516c\u544a\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:update')\")\n    public CommonResult<Boolean> updateNotice(@Valid @RequestBody NoticeSaveReqVO updateReqVO) {\n        noticeService.updateNotice(updateReqVO);\n        return success(true);\n    }\n\n    @DeleteMapping(\"/delete\")\n    @Operation(summary = \"\u5220\u9664\u901a\u77e5\u516c\u544a\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true, example = \"1024\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:delete')\")\n    public CommonResult<Boolean> deleteNotice(@RequestParam(\"id\") Long id) {\n        noticeService.deleteNotice(id);\n        return success(true);\n    }\n\n    @GetMapping(\"/page\")\n    @Operation(summary = \"\u83b7\u53d6\u901a\u77e5\u516c\u544a\u5217\u8868\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:query')\")\n    public CommonResult<PageResult<NoticeRespVO>> getNoticePage(@Validated NoticePageReqVO pageReqVO) {\n        PageResult<NoticeDO> pageResult = noticeService.getNoticePage(pageReqVO);\n        return success(BeanUtils.toBean(pageResult, NoticeRespVO.class));\n    }\n\n    @GetMapping(\"/get\")\n    @Operation(summary = \"\u83b7\u5f97\u901a\u77e5\u516c\u544a\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true, example = \"1024\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:query')\")\n    public CommonResult<NoticeRespVO> getNotice(@RequestParam(\"id\") Long id) {\n        NoticeDO notice = noticeService.getNotice(id);\n        return success(BeanUtils.toBean(notice, NoticeRespVO.class));\n    }\n\n    @PostMapping(\"/push\")\n    @Operation(summary = \"\u63a8\u9001\u901a\u77e5\u516c\u544a\", description = \"\u53ea\u53d1\u9001\u7ed9 websocket \u8fde\u63a5\u5728\u7ebf\u7684\u7528\u6237\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true, example = \"1024\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:update')\")\n    public CommonResult<Boolean> push(@RequestParam(\"id\") Long id) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/258", "ground_truth": "\n        NoticeDO notice = noticeService.getNotice(id);\n        Assert.notNull(notice, \"\u516c\u544a\u4e0d\u80fd\u4e3a\u7a7a\");\n        // \u901a\u8fc7 websocket \u63a8\u9001\u7ed9\u5728\u7ebf\u7684\u7528\u6237\n        webSocketSenderApi.sendObject(UserTypeEnum.ADMIN.getValue(), \"notice-push\", notice);\n        return success(true);\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-system", "yudao-module-system-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "system", "controller", "admin", "notice", "NoticeController.java"], "context_start_lineno": 0, "function_name": "push", "left_context": "class NoticeController {\n\n    @Resource\n    private NoticeService noticeService;\n\n    @Resource\n    private WebSocketSenderApi webSocketSenderApi;\n\n    @PostMapping(\"/create\")\n    @Operation(summary = \"\u521b\u5efa\u901a\u77e5\u516c\u544a\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:create')\")\n    public CommonResult<Long> createNotice(@Valid @RequestBody NoticeSaveReqVO createReqVO) {\n        Long noticeId = noticeService.createNotice(createReqVO);\n        return success(noticeId);\n    }\n\n    @PutMapping(\"/update\")\n    @Operation(summary = \"\u4fee\u6539\u901a\u77e5\u516c\u544a\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:update')\")\n    public CommonResult<Boolean> updateNotice(@Valid @RequestBody NoticeSaveReqVO updateReqVO) {\n        noticeService.updateNotice(updateReqVO);\n        return success(true);\n    }\n\n    @DeleteMapping(\"/delete\")\n    @Operation(summary = \"\u5220\u9664\u901a\u77e5\u516c\u544a\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true, example = \"1024\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:delete')\")\n    public CommonResult<Boolean> deleteNotice(@RequestParam(\"id\") Long id) {\n        noticeService.deleteNotice(id);\n        return success(true);\n    }\n\n    @GetMapping(\"/page\")\n    @Operation(summary = \"\u83b7\u53d6\u901a\u77e5\u516c\u544a\u5217\u8868\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:query')\")\n    public CommonResult<PageResult<NoticeRespVO>> getNoticePage(@Validated NoticePageReqVO pageReqVO) {\n        PageResult<NoticeDO> pageResult = noticeService.getNoticePage(pageReqVO);\n        return success(BeanUtils.toBean(pageResult, NoticeRespVO.class));\n    }\n\n    @GetMapping(\"/get\")\n    @Operation(summary = \"\u83b7\u5f97\u901a\u77e5\u516c\u544a\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true, example = \"1024\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:query')\")\n    public CommonResult<NoticeRespVO> getNotice(@RequestParam(\"id\") Long id) {\n        NoticeDO notice = noticeService.getNotice(id);\n        return success(BeanUtils.toBean(notice, NoticeRespVO.class));\n    }\n\n    @PostMapping(\"/push\")\n    @Operation(summary = \"\u63a8\u9001\u901a\u77e5\u516c\u544a\", description = \"\u53ea\u53d1\u9001\u7ed9 websocket \u8fde\u63a5\u5728\u7ebf\u7684\u7528\u6237\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true, example = \"1024\")\n    @PreAuthorize(\"@ss.hasPermission('system:notice:update')\")\n    public CommonResult<Boolean> push(@RequestParam(\"id\") Long id) {", "right_context": "}\n\n}", "class_name": "NoticeController", "return_type": "CommonResult<Boolean>", "parameters": [{"type": "Long", "name": "id"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JobLogServiceImpl implements JobLogService {\n\n    @Resource\n    private JobLogMapper jobLogMapper;\n\n    @Override\n    public Long createJobLog(Long jobId, LocalDateTime beginTime,\n                             String jobHandlerName, String jobHandlerParam, Integer executeIndex) {\n        JobLogDO log = JobLogDO.builder().jobId(jobId).handlerName(jobHandlerName)\n                .handlerParam(jobHandlerParam).executeIndex(executeIndex)\n                .beginTime(beginTime).status(JobLogStatusEnum.RUNNING.getStatus()).build();\n        jobLogMapper.insert(log);\n        return log.getId();\n    }\n\n    @Override\n    @Async\n    public void updateJobLogResultAsync(Long logId, LocalDateTime endTime, Integer duration, boolean success, String result) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    @SuppressWarnings(\"DuplicatedCode\")\n    public Integer cleanJobLog(Integer exceedDay, Integer deleteLimit) {\n        int count = 0;\n        LocalDateTime expireDate = LocalDateTime.now().minusDays(exceedDay);\n        // \u5faa\u73af\u5220\u9664\uff0c\u76f4\u5230\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u636e\n        for (int i = 0; i < Short.MAX_VALUE; i++) {\n            int deleteCount = jobLogMapper.deleteByCreateTimeLt(expireDate, deleteLimit);\n            count += deleteCount;\n            // \u8fbe\u5230\u5220\u9664\u9884\u671f\u6761\u6570\uff0c\u8bf4\u660e\u5230\u5e95\u4e86\n            if (deleteCount < deleteLimit) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    @Override\n    public JobLogDO getJobLog(Long id) {\n        return jobLogMapper.selectById(id);\n    }\n\n    @Override\n    public PageResult<JobLogDO> getJobLogPage(JobLogPageReqVO pageReqVO) {\n        return jobLogMapper.selectPage(pageReqVO);\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/261", "ground_truth": "\n        try {\n            JobLogDO updateObj = JobLogDO.builder().id(logId).endTime(endTime).duration(duration)\n                    .status(success ? JobLogStatusEnum.SUCCESS.getStatus() : JobLogStatusEnum.FAILURE.getStatus())\n                    .result(result).build();\n            jobLogMapper.updateById(updateObj);\n        } catch (Exception ex) {\n            log.error(\"[updateJobLogResultAsync][logId({}) endTime({}) duration({}) success({}) result({})]\",\n                    logId, endTime, duration, success, result);\n        }\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-infra", "yudao-module-infra-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "infra", "service", "job", "JobLogServiceImpl.java"], "context_start_lineno": 0, "function_name": "updateJobLogResultAsync", "left_context": "class JobLogServiceImpl implements JobLogService {\n\n    @Resource\n    private JobLogMapper jobLogMapper;\n\n    @Override\n    public Long createJobLog(Long jobId, LocalDateTime beginTime,\n                             String jobHandlerName, String jobHandlerParam, Integer executeIndex) {\n        JobLogDO log = JobLogDO.builder().jobId(jobId).handlerName(jobHandlerName)\n                .handlerParam(jobHandlerParam).executeIndex(executeIndex)\n                .beginTime(beginTime).status(JobLogStatusEnum.RUNNING.getStatus()).build();\n        jobLogMapper.insert(log);\n        return log.getId();\n    }\n\n    @Override\n    @Async\n    public void updateJobLogResultAsync(Long logId, LocalDateTime endTime, Integer duration, boolean success, String result) {", "right_context": "}\n\n    @Override\n    @SuppressWarnings(\"DuplicatedCode\")\n    public Integer cleanJobLog(Integer exceedDay, Integer deleteLimit) {\n        int count = 0;\n        LocalDateTime expireDate = LocalDateTime.now().minusDays(exceedDay);\n        // \u5faa\u73af\u5220\u9664\uff0c\u76f4\u5230\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u636e\n        for (int i = 0; i < Short.MAX_VALUE; i++) {\n            int deleteCount = jobLogMapper.deleteByCreateTimeLt(expireDate, deleteLimit);\n            count += deleteCount;\n            // \u8fbe\u5230\u5220\u9664\u9884\u671f\u6761\u6570\uff0c\u8bf4\u660e\u5230\u5e95\u4e86\n            if (deleteCount < deleteLimit) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    @Override\n    public JobLogDO getJobLog(Long id) {\n        return jobLogMapper.selectById(id);\n    }\n\n    @Override\n    public PageResult<JobLogDO> getJobLogPage(JobLogPageReqVO pageReqVO) {\n        return jobLogMapper.selectPage(pageReqVO);\n    }\n\n}", "class_name": "JobLogServiceImpl", "return_type": "void", "parameters": [{"type": "Long", "name": "logId"}, {"type": "LocalDateTime", "name": "endTime"}, {"type": "Integer", "name": "duration"}, {"type": "boolean", "name": "success"}, {"type": "String", "name": "result"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc){\n//   if (CollUtil.isEmpty(from)) {\n//     return new HashMap<>();\n//   }\n//   return convertMap(from,keyFunc,valueFunc,(v1,v2) -> v1);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc,BinaryOperator<V> mergeFunction){\n//   if (CollUtil.isEmpty(from)) {\n//     return new HashMap<>();\n//   }\n//   return convertMap(from,keyFunc,valueFunc,mergeFunction,HashMap::new);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc,Supplier<? extends Map<K,V>> supplier){\n//   if (CollUtil.isEmpty(from)) {\n//     return supplier.get();\n//   }\n//   return convertMap(from,keyFunc,valueFunc,(v1,v2) -> v1,supplier);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/collection/CollectionUtils.java\n// --------------------------------------------------\n// public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc,BinaryOperator<V> mergeFunction,Supplier<? extends Map<K,V>> supplier){\n//   if (CollUtil.isEmpty(from)) {\n//     return new HashMap<>();\n//   }\n//   return from.stream().collect(Collectors.toMap(keyFunc,valueFunc,mergeFunction,supplier));\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MapUtils {\n\n    /**\n     * \u4ece\u54c8\u5e0c\u8868\u8868\u4e2d\uff0c\u83b7\u5f97 keys \u5bf9\u5e94\u7684\u6240\u6709 value \u6570\u7ec4\n     *\n     * @param multimap \u54c8\u5e0c\u8868\n     * @param keys keys\n     * @return value \u6570\u7ec4\n     */\n    public static <K, V> List<V> getList(Multimap<K, V> multimap, Collection<K> keys) {\n        List<V> result = new ArrayList<>();\n        keys.forEach(k -> {\n            Collection<V> values = multimap.get(k);\n            if (CollectionUtil.isEmpty(values)) {\n                return;\n            }\n            result.addAll(values);\n        });\n        return result;\n    }\n\n    /**\n     * \u4ece\u54c8\u5e0c\u8868\u67e5\u627e\u5230 key \u5bf9\u5e94\u7684 value\uff0c\u7136\u540e\u8fdb\u4e00\u6b65\u5904\u7406\n     * key \u4e3a null \u65f6, \u4e0d\u5904\u7406\n     * \u6ce8\u610f\uff0c\u5982\u679c\u67e5\u627e\u5230\u7684 value \u4e3a null \u65f6\uff0c\u4e0d\u8fdb\u884c\u5904\u7406\n     *\n     * @param map \u54c8\u5e0c\u8868\n     * @param key key\n     * @param consumer \u8fdb\u4e00\u6b65\u5904\u7406\u7684\u903b\u8f91\n     */\n    public static <K, V> void findAndThen(Map<K, V> map, K key, Consumer<V> consumer) {\n        if (ObjUtil.isNull(key) || CollUtil.isEmpty(map)) {\n            return;\n        }\n        V value = map.get(key);\n        if (value == null) {\n            return;\n        }\n        consumer.accept(value);\n    }\n\n    public static <K, V> Map<K, V> convertMap(List<KeyValue<K, V>> keyValues) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/273", "ground_truth": "\n        Map<K, V> map = Maps.newLinkedHashMapWithExpectedSize(keyValues.size());\n        keyValues.forEach(keyValue -> map.put(keyValue.getKey(), keyValue.getValue()));\n        return map;\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-common", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "common", "util", "collection", "MapUtils.java"], "context_start_lineno": 0, "function_name": "convertMap", "left_context": "class MapUtils {\n\n    /**\n     * \u4ece\u54c8\u5e0c\u8868\u8868\u4e2d\uff0c\u83b7\u5f97 keys \u5bf9\u5e94\u7684\u6240\u6709 value \u6570\u7ec4\n     *\n     * @param multimap \u54c8\u5e0c\u8868\n     * @param keys keys\n     * @return value \u6570\u7ec4\n     */\n    public static <K, V> List<V> getList(Multimap<K, V> multimap, Collection<K> keys) {\n        List<V> result = new ArrayList<>();\n        keys.forEach(k -> {\n            Collection<V> values = multimap.get(k);\n            if (CollectionUtil.isEmpty(values)) {\n                return;\n            }\n            result.addAll(values);\n        });\n        return result;\n    }\n\n    /**\n     * \u4ece\u54c8\u5e0c\u8868\u67e5\u627e\u5230 key \u5bf9\u5e94\u7684 value\uff0c\u7136\u540e\u8fdb\u4e00\u6b65\u5904\u7406\n     * key \u4e3a null \u65f6, \u4e0d\u5904\u7406\n     * \u6ce8\u610f\uff0c\u5982\u679c\u67e5\u627e\u5230\u7684 value \u4e3a null \u65f6\uff0c\u4e0d\u8fdb\u884c\u5904\u7406\n     *\n     * @param map \u54c8\u5e0c\u8868\n     * @param key key\n     * @param consumer \u8fdb\u4e00\u6b65\u5904\u7406\u7684\u903b\u8f91\n     */\n    public static <K, V> void findAndThen(Map<K, V> map, K key, Consumer<V> consumer) {\n        if (ObjUtil.isNull(key) || CollUtil.isEmpty(map)) {\n            return;\n        }\n        V value = map.get(key);\n        if (value == null) {\n            return;\n        }\n        consumer.accept(value);\n    }\n\n    public static <K, V> Map<K, V> convertMap(List<KeyValue<K, V>> keyValues) {", "right_context": "}\n\n}", "class_name": "MapUtils", "return_type": "Map<K,V>", "parameters": [{"type": "List<KeyValue<K,V>>", "name": "keyValues"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Demo02CategoryServiceImpl implements Demo02CategoryService {\n\n    @Resource\n    private Demo02CategoryMapper demo02CategoryMapper;\n\n    @Override\n    public Long createDemo02Category(Demo02CategorySaveReqVO createReqVO) {\n        // \u6821\u9a8c\u7236\u7ea7\u7f16\u53f7\u7684\u6709\u6548\u6027\n        validateParentDemo02Category(null, createReqVO.getParentId());\n        // \u6821\u9a8c\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDemo02CategoryNameUnique(null, createReqVO.getParentId(), createReqVO.getName());\n\n        // \u63d2\u5165\n        Demo02CategoryDO demo02Category = BeanUtils.toBean(createReqVO, Demo02CategoryDO.class);\n        demo02CategoryMapper.insert(demo02Category);\n        // \u8fd4\u56de\n        return demo02Category.getId();\n    }\n\n    @Override\n    public void updateDemo02Category(Demo02CategorySaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDemo02CategoryExists(updateReqVO.getId());\n        // \u6821\u9a8c\u7236\u7ea7\u7f16\u53f7\u7684\u6709\u6548\u6027\n        validateParentDemo02Category(updateReqVO.getId(), updateReqVO.getParentId());\n        // \u6821\u9a8c\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDemo02CategoryNameUnique(updateReqVO.getId(), updateReqVO.getParentId(), updateReqVO.getName());\n\n        // \u66f4\u65b0\n        Demo02CategoryDO updateObj = BeanUtils.toBean(updateReqVO, Demo02CategoryDO.class);\n        demo02CategoryMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDemo02Category(Long id) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDemo02CategoryExists(id);\n        // \u6821\u9a8c\u662f\u5426\u6709\u5b50\u793a\u4f8b\u5206\u7c7b\n        if (demo02CategoryMapper.selectCountByParentId(id) > 0) {\n            throw exception(DEMO02_CATEGORY_EXITS_CHILDREN);\n        }\n        // \u5220\u9664\n        demo02CategoryMapper.deleteById(id);\n    }\n\n    private void validateDemo02CategoryExists(Long id) {\n        if (demo02CategoryMapper.selectById(id) == null) {\n            throw exception(DEMO02_CATEGORY_NOT_EXISTS);\n        }\n    }\n\n    private void validateParentDemo02Category(Long id, Long parentId) {<FILL_FUNCTION_BODY>}\n\n    private void validateDemo02CategoryNameUnique(Long id, Long parentId, String name) {\n        Demo02CategoryDO demo02Category = demo02CategoryMapper.selectByParentIdAndName(parentId, name);\n        if (demo02Category == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u793a\u4f8b\u5206\u7c7b\n        if (id == null) {\n            throw exception(DEMO02_CATEGORY_NAME_DUPLICATE);\n        }\n        if (!Objects.equals(demo02Category.getId(), id)) {\n            throw exception(DEMO02_CATEGORY_NAME_DUPLICATE);\n        }\n    }\n\n    @Override\n    public Demo02CategoryDO getDemo02Category(Long id) {\n        return demo02CategoryMapper.selectById(id);\n    }\n\n    @Override\n    public List<Demo02CategoryDO> getDemo02CategoryList(Demo02CategoryListReqVO listReqVO) {\n        return demo02CategoryMapper.selectList(listReqVO);\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/283", "ground_truth": "\n        if (parentId == null || Demo02CategoryDO.PARENT_ID_ROOT.equals(parentId)) {\n            return;\n        }\n        // 1. \u4e0d\u80fd\u8bbe\u7f6e\u81ea\u5df1\u4e3a\u7236\u793a\u4f8b\u5206\u7c7b\n        if (Objects.equals(id, parentId)) {\n            throw exception(DEMO02_CATEGORY_PARENT_ERROR);\n        }\n        // 2. \u7236\u793a\u4f8b\u5206\u7c7b\u4e0d\u5b58\u5728\n        Demo02CategoryDO parentDemo02Category = demo02CategoryMapper.selectById(parentId);\n        if (parentDemo02Category == null) {\n            throw exception(DEMO02_CATEGORY_PARENT_NOT_EXITS);\n        }\n        // 3. \u9012\u5f52\u6821\u9a8c\u7236\u793a\u4f8b\u5206\u7c7b\uff0c\u5982\u679c\u7236\u793a\u4f8b\u5206\u7c7b\u662f\u81ea\u5df1\u7684\u5b50\u793a\u4f8b\u5206\u7c7b\uff0c\u5219\u62a5\u9519\uff0c\u907f\u514d\u5f62\u6210\u73af\u8def\n        if (id == null) { // id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u65b0\u589e\uff0c\u4e0d\u9700\u8981\u8003\u8651\u73af\u8def\n            return;\n        }\n        for (int i = 0; i < Short.MAX_VALUE; i++) {\n            // 3.1 \u6821\u9a8c\u73af\u8def\n            parentId = parentDemo02Category.getParentId();\n            if (Objects.equals(id, parentId)) {\n                throw exception(DEMO02_CATEGORY_PARENT_IS_CHILD);\n            }\n            // 3.2 \u7ee7\u7eed\u9012\u5f52\u4e0b\u4e00\u7ea7\u7236\u793a\u4f8b\u5206\u7c7b\n            if (parentId == null || Demo02CategoryDO.PARENT_ID_ROOT.equals(parentId)) {\n                break;\n            }\n            parentDemo02Category = demo02CategoryMapper.selectById(parentId);\n            if (parentDemo02Category == null) {\n                break;\n            }\n        }\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-infra", "yudao-module-infra-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "infra", "service", "demo", "demo02", "Demo02CategoryServiceImpl.java"], "context_start_lineno": 0, "function_name": "validateParentDemo02Category", "left_context": "class Demo02CategoryServiceImpl implements Demo02CategoryService {\n\n    @Resource\n    private Demo02CategoryMapper demo02CategoryMapper;\n\n    @Override\n    public Long createDemo02Category(Demo02CategorySaveReqVO createReqVO) {\n        // \u6821\u9a8c\u7236\u7ea7\u7f16\u53f7\u7684\u6709\u6548\u6027\n        validateParentDemo02Category(null, createReqVO.getParentId());\n        // \u6821\u9a8c\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDemo02CategoryNameUnique(null, createReqVO.getParentId(), createReqVO.getName());\n\n        // \u63d2\u5165\n        Demo02CategoryDO demo02Category = BeanUtils.toBean(createReqVO, Demo02CategoryDO.class);\n        demo02CategoryMapper.insert(demo02Category);\n        // \u8fd4\u56de\n        return demo02Category.getId();\n    }\n\n    @Override\n    public void updateDemo02Category(Demo02CategorySaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDemo02CategoryExists(updateReqVO.getId());\n        // \u6821\u9a8c\u7236\u7ea7\u7f16\u53f7\u7684\u6709\u6548\u6027\n        validateParentDemo02Category(updateReqVO.getId(), updateReqVO.getParentId());\n        // \u6821\u9a8c\u540d\u5b57\u7684\u552f\u4e00\u6027\n        validateDemo02CategoryNameUnique(updateReqVO.getId(), updateReqVO.getParentId(), updateReqVO.getName());\n\n        // \u66f4\u65b0\n        Demo02CategoryDO updateObj = BeanUtils.toBean(updateReqVO, Demo02CategoryDO.class);\n        demo02CategoryMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDemo02Category(Long id) {\n        // \u6821\u9a8c\u5b58\u5728\n        validateDemo02CategoryExists(id);\n        // \u6821\u9a8c\u662f\u5426\u6709\u5b50\u793a\u4f8b\u5206\u7c7b\n        if (demo02CategoryMapper.selectCountByParentId(id) > 0) {\n            throw exception(DEMO02_CATEGORY_EXITS_CHILDREN);\n        }\n        // \u5220\u9664\n        demo02CategoryMapper.deleteById(id);\n    }\n\n    private void validateDemo02CategoryExists(Long id) {\n        if (demo02CategoryMapper.selectById(id) == null) {\n            throw exception(DEMO02_CATEGORY_NOT_EXISTS);\n        }\n    }\n\n    private void validateParentDemo02Category(Long id, Long parentId) {", "right_context": "}\n\n    private void validateDemo02CategoryNameUnique(Long id, Long parentId, String name) {\n        Demo02CategoryDO demo02Category = demo02CategoryMapper.selectByParentIdAndName(parentId, name);\n        if (demo02Category == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u793a\u4f8b\u5206\u7c7b\n        if (id == null) {\n            throw exception(DEMO02_CATEGORY_NAME_DUPLICATE);\n        }\n        if (!Objects.equals(demo02Category.getId(), id)) {\n            throw exception(DEMO02_CATEGORY_NAME_DUPLICATE);\n        }\n    }\n\n    @Override\n    public Demo02CategoryDO getDemo02Category(Long id) {\n        return demo02CategoryMapper.selectById(id);\n    }\n\n    @Override\n    public List<Demo02CategoryDO> getDemo02CategoryList(Demo02CategoryListReqVO listReqVO) {\n        return demo02CategoryMapper.selectList(listReqVO);\n    }\n\n}", "class_name": "Demo02CategoryServiceImpl", "return_type": "void", "parameters": [{"type": "Long", "name": "id"}, {"type": "Long", "name": "parentId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DictDataServiceImpl implements DictDataService {\n\n    /**\n     * \u6392\u5e8f dictType > sort\n     */\n    private static final Comparator<DictDataDO> COMPARATOR_TYPE_AND_SORT = Comparator\n            .comparing(DictDataDO::getDictType)\n            .thenComparingInt(DictDataDO::getSort);\n\n    @Resource\n    private DictTypeService dictTypeService;\n\n    @Resource\n    private DictDataMapper dictDataMapper;\n\n    @Override\n    public List<DictDataDO> getDictDataList(Integer status, String dictType) {\n        List<DictDataDO> list = dictDataMapper.selectListByStatusAndDictType(status, dictType);\n        list.sort(COMPARATOR_TYPE_AND_SORT);\n        return list;\n    }\n\n    @Override\n    public PageResult<DictDataDO> getDictDataPage(DictDataPageReqVO pageReqVO) {\n        return dictDataMapper.selectPage(pageReqVO);\n    }\n\n    @Override\n    public DictDataDO getDictData(Long id) {\n        return dictDataMapper.selectById(id);\n    }\n\n    @Override\n    public Long createDictData(DictDataSaveReqVO createReqVO) {\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u6709\u6548\n        validateDictTypeExists(createReqVO.getDictType());\n        // \u6821\u9a8c\u5b57\u5178\u6570\u636e\u7684\u503c\u7684\u552f\u4e00\u6027\n        validateDictDataValueUnique(null, createReqVO.getDictType(), createReqVO.getValue());\n\n        // \u63d2\u5165\u5b57\u5178\u7c7b\u578b\n        DictDataDO dictData = BeanUtils.toBean(createReqVO, DictDataDO.class);\n        dictDataMapper.insert(dictData);\n        return dictData.getId();\n    }\n\n    @Override\n    public void updateDictData(DictDataSaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u81ea\u5df1\u5b58\u5728\n        validateDictDataExists(updateReqVO.getId());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u6709\u6548\n        validateDictTypeExists(updateReqVO.getDictType());\n        // \u6821\u9a8c\u5b57\u5178\u6570\u636e\u7684\u503c\u7684\u552f\u4e00\u6027\n        validateDictDataValueUnique(updateReqVO.getId(), updateReqVO.getDictType(), updateReqVO.getValue());\n\n        // \u66f4\u65b0\u5b57\u5178\u7c7b\u578b\n        DictDataDO updateObj = BeanUtils.toBean(updateReqVO, DictDataDO.class);\n        dictDataMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDictData(Long id) {\n        // \u6821\u9a8c\u662f\u5426\u5b58\u5728\n        validateDictDataExists(id);\n\n        // \u5220\u9664\u5b57\u5178\u6570\u636e\n        dictDataMapper.deleteById(id);\n    }\n\n    @Override\n    public long getDictDataCountByDictType(String dictType) {\n        return dictDataMapper.selectCountByDictType(dictType);\n    }\n\n    @VisibleForTesting\n    public void validateDictDataValueUnique(Long id, String dictType, String value) {\n        DictDataDO dictData = dictDataMapper.selectByDictTypeAndValue(dictType, value);\n        if (dictData == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u5b57\u5178\u6570\u636e\n        if (id == null) {\n            throw exception(DICT_DATA_VALUE_DUPLICATE);\n        }\n        if (!dictData.getId().equals(id)) {\n            throw exception(DICT_DATA_VALUE_DUPLICATE);\n        }\n    }\n\n    @VisibleForTesting\n    public void validateDictDataExists(Long id) {<FILL_FUNCTION_BODY>}\n\n    @VisibleForTesting\n    public void validateDictTypeExists(String type) {\n        DictTypeDO dictType = dictTypeService.getDictType(type);\n        if (dictType == null) {\n            throw exception(DICT_TYPE_NOT_EXISTS);\n        }\n        if (!CommonStatusEnum.ENABLE.getStatus().equals(dictType.getStatus())) {\n            throw exception(DICT_TYPE_NOT_ENABLE);\n        }\n    }\n\n    @Override\n    public void validateDictDataList(String dictType, Collection<String> values) {\n        if (CollUtil.isEmpty(values)) {\n            return;\n        }\n        Map<String, DictDataDO> dictDataMap = CollectionUtils.convertMap(\n                dictDataMapper.selectByDictTypeAndValues(dictType, values), DictDataDO::getValue);\n        // \u6821\u9a8c\n        values.forEach(value -> {\n            DictDataDO dictData = dictDataMap.get(value);\n            if (dictData == null) {\n                throw exception(DICT_DATA_NOT_EXISTS);\n            }\n            if (!CommonStatusEnum.ENABLE.getStatus().equals(dictData.getStatus())) {\n                throw exception(DICT_DATA_NOT_ENABLE, dictData.getLabel());\n            }\n        });\n    }\n\n    @Override\n    public DictDataDO getDictData(String dictType, String value) {\n        return dictDataMapper.selectByDictTypeAndValue(dictType, value);\n    }\n\n    @Override\n    public DictDataDO parseDictData(String dictType, String label) {\n        return dictDataMapper.selectByDictTypeAndLabel(dictType, label);\n    }\n\n    @Override\n    public List<DictDataDO> getDictDataListByDictType(String dictType) {\n        List<DictDataDO> list = dictDataMapper.selectList(DictDataDO::getDictType, dictType);\n        list.sort(Comparator.comparing(DictDataDO::getSort));\n        return list;\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/344", "ground_truth": "\n        if (id == null) {\n            return;\n        }\n        DictDataDO dictData = dictDataMapper.selectById(id);\n        if (dictData == null) {\n            throw exception(DICT_DATA_NOT_EXISTS);\n        }\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-system", "yudao-module-system-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "system", "service", "dict", "DictDataServiceImpl.java"], "context_start_lineno": 0, "function_name": "validateDictDataExists", "left_context": "class DictDataServiceImpl implements DictDataService {\n\n    /**\n     * \u6392\u5e8f dictType > sort\n     */\n    private static final Comparator<DictDataDO> COMPARATOR_TYPE_AND_SORT = Comparator\n            .comparing(DictDataDO::getDictType)\n            .thenComparingInt(DictDataDO::getSort);\n\n    @Resource\n    private DictTypeService dictTypeService;\n\n    @Resource\n    private DictDataMapper dictDataMapper;\n\n    @Override\n    public List<DictDataDO> getDictDataList(Integer status, String dictType) {\n        List<DictDataDO> list = dictDataMapper.selectListByStatusAndDictType(status, dictType);\n        list.sort(COMPARATOR_TYPE_AND_SORT);\n        return list;\n    }\n\n    @Override\n    public PageResult<DictDataDO> getDictDataPage(DictDataPageReqVO pageReqVO) {\n        return dictDataMapper.selectPage(pageReqVO);\n    }\n\n    @Override\n    public DictDataDO getDictData(Long id) {\n        return dictDataMapper.selectById(id);\n    }\n\n    @Override\n    public Long createDictData(DictDataSaveReqVO createReqVO) {\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u6709\u6548\n        validateDictTypeExists(createReqVO.getDictType());\n        // \u6821\u9a8c\u5b57\u5178\u6570\u636e\u7684\u503c\u7684\u552f\u4e00\u6027\n        validateDictDataValueUnique(null, createReqVO.getDictType(), createReqVO.getValue());\n\n        // \u63d2\u5165\u5b57\u5178\u7c7b\u578b\n        DictDataDO dictData = BeanUtils.toBean(createReqVO, DictDataDO.class);\n        dictDataMapper.insert(dictData);\n        return dictData.getId();\n    }\n\n    @Override\n    public void updateDictData(DictDataSaveReqVO updateReqVO) {\n        // \u6821\u9a8c\u81ea\u5df1\u5b58\u5728\n        validateDictDataExists(updateReqVO.getId());\n        // \u6821\u9a8c\u5b57\u5178\u7c7b\u578b\u6709\u6548\n        validateDictTypeExists(updateReqVO.getDictType());\n        // \u6821\u9a8c\u5b57\u5178\u6570\u636e\u7684\u503c\u7684\u552f\u4e00\u6027\n        validateDictDataValueUnique(updateReqVO.getId(), updateReqVO.getDictType(), updateReqVO.getValue());\n\n        // \u66f4\u65b0\u5b57\u5178\u7c7b\u578b\n        DictDataDO updateObj = BeanUtils.toBean(updateReqVO, DictDataDO.class);\n        dictDataMapper.updateById(updateObj);\n    }\n\n    @Override\n    public void deleteDictData(Long id) {\n        // \u6821\u9a8c\u662f\u5426\u5b58\u5728\n        validateDictDataExists(id);\n\n        // \u5220\u9664\u5b57\u5178\u6570\u636e\n        dictDataMapper.deleteById(id);\n    }\n\n    @Override\n    public long getDictDataCountByDictType(String dictType) {\n        return dictDataMapper.selectCountByDictType(dictType);\n    }\n\n    @VisibleForTesting\n    public void validateDictDataValueUnique(Long id, String dictType, String value) {\n        DictDataDO dictData = dictDataMapper.selectByDictTypeAndValue(dictType, value);\n        if (dictData == null) {\n            return;\n        }\n        // \u5982\u679c id \u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u7528\u6bd4\u8f83\u662f\u5426\u4e3a\u76f8\u540c id \u7684\u5b57\u5178\u6570\u636e\n        if (id == null) {\n            throw exception(DICT_DATA_VALUE_DUPLICATE);\n        }\n        if (!dictData.getId().equals(id)) {\n            throw exception(DICT_DATA_VALUE_DUPLICATE);\n        }\n    }\n\n    @VisibleForTesting\n    public void validateDictDataExists(Long id) {", "right_context": "}\n\n    @VisibleForTesting\n    public void validateDictTypeExists(String type) {\n        DictTypeDO dictType = dictTypeService.getDictType(type);\n        if (dictType == null) {\n            throw exception(DICT_TYPE_NOT_EXISTS);\n        }\n        if (!CommonStatusEnum.ENABLE.getStatus().equals(dictType.getStatus())) {\n            throw exception(DICT_TYPE_NOT_ENABLE);\n        }\n    }\n\n    @Override\n    public void validateDictDataList(String dictType, Collection<String> values) {\n        if (CollUtil.isEmpty(values)) {\n            return;\n        }\n        Map<String, DictDataDO> dictDataMap = CollectionUtils.convertMap(\n                dictDataMapper.selectByDictTypeAndValues(dictType, values), DictDataDO::getValue);\n        // \u6821\u9a8c\n        values.forEach(value -> {\n            DictDataDO dictData = dictDataMap.get(value);\n            if (dictData == null) {\n                throw exception(DICT_DATA_NOT_EXISTS);\n            }\n            if (!CommonStatusEnum.ENABLE.getStatus().equals(dictData.getStatus())) {\n                throw exception(DICT_DATA_NOT_ENABLE, dictData.getLabel());\n            }\n        });\n    }\n\n    @Override\n    public DictDataDO getDictData(String dictType, String value) {\n        return dictDataMapper.selectByDictTypeAndValue(dictType, value);\n    }\n\n    @Override\n    public DictDataDO parseDictData(String dictType, String label) {\n        return dictDataMapper.selectByDictTypeAndLabel(dictType, label);\n    }\n\n    @Override\n    public List<DictDataDO> getDictDataListByDictType(String dictType) {\n        List<DictDataDO> list = dictDataMapper.selectList(DictDataDO::getDictType, dictType);\n        list.sort(Comparator.comparing(DictDataDO::getSort));\n        return list;\n    }\n\n}", "class_name": "DictDataServiceImpl", "return_type": "void", "parameters": [{"type": "Long", "name": "id"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/social/SocialUserService.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u5f97\u6307\u5b9a\u7528\u6237\u7684\u793e\u4ea4\u7528\u6237\u5217\u8868\n//  * @param userId   \u7528\u6237\u7f16\u53f7\n//  * @param userType \u7528\u6237\u7c7b\u578b\n//  * @return \u793e\u4ea4\u7528\u6237\u5217\u8868\n//  */\n// List<SocialUserDO> getSocialUserList(Long userId,Integer userType);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SocialUserServiceImpl implements SocialUserService {\n\n    @Resource\n    private SocialUserBindMapper socialUserBindMapper;\n    @Resource\n    private SocialUserMapper socialUserMapper;\n\n    @Resource\n    private SocialClientService socialClientService;\n\n    @Override\n    public List<SocialUserDO> getSocialUserList(Long userId, Integer userType) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public String bindSocialUser(SocialUserBindReqDTO reqDTO) {\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = authSocialUser(reqDTO.getSocialType(), reqDTO.getUserType(),\n                reqDTO.getCode(), reqDTO.getState());\n        Assert.notNull(socialUser, \"\u793e\u4ea4\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        // \u793e\u4ea4\u7528\u6237\u53ef\u80fd\u4e4b\u524d\u7ed1\u5b9a\u8fc7\u522b\u7684\u7528\u6237\uff0c\u9700\u8981\u8fdb\u884c\u89e3\u7ed1\n        socialUserBindMapper.deleteByUserTypeAndSocialUserId(reqDTO.getUserType(), socialUser.getId());\n\n        // \u7528\u6237\u53ef\u80fd\u4e4b\u524d\u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u8be5\u793e\u4ea4\u7c7b\u578b\uff0c\u9700\u8981\u8fdb\u884c\u89e3\u7ed1\n        socialUserBindMapper.deleteByUserTypeAndUserIdAndSocialType(reqDTO.getUserType(), reqDTO.getUserId(),\n                socialUser.getType());\n\n        // \u7ed1\u5b9a\u5f53\u524d\u767b\u5f55\u7684\u793e\u4ea4\u7528\u6237\n        SocialUserBindDO socialUserBind = SocialUserBindDO.builder()\n                .userId(reqDTO.getUserId()).userType(reqDTO.getUserType())\n                .socialUserId(socialUser.getId()).socialType(socialUser.getType()).build();\n        socialUserBindMapper.insert(socialUserBind);\n        return socialUser.getOpenid();\n    }\n\n    @Override\n    public void unbindSocialUser(Long userId, Integer userType, Integer socialType, String openid) {\n        // \u83b7\u5f97 openid \u5bf9\u5e94\u7684 SocialUserDO \u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = socialUserMapper.selectByTypeAndOpenid(socialType, openid);\n        if (socialUser == null) {\n            throw exception(SOCIAL_USER_NOT_FOUND);\n        }\n\n        // \u83b7\u5f97\u5bf9\u5e94\u7684\u793e\u4ea4\u7ed1\u5b9a\u5173\u7cfb\n        socialUserBindMapper.deleteByUserTypeAndUserIdAndSocialType(userType, userId, socialUser.getType());\n    }\n\n    @Override\n    public SocialUserRespDTO getSocialUserByUserId(Integer userType, Long userId, Integer socialType) {\n        // \u83b7\u5f97\u7ed1\u5b9a\u7528\u6237\n        SocialUserBindDO socialUserBind = socialUserBindMapper.selectByUserIdAndUserTypeAndSocialType(userId, userType, socialType);\n        if (socialUserBind == null) {\n            return null;\n        }\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = socialUserMapper.selectById(socialUserBind.getSocialUserId());\n        Assert.notNull(socialUser, \"\u793e\u4ea4\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n        return new SocialUserRespDTO(socialUser.getOpenid(), socialUser.getNickname(), socialUser.getAvatar(),\n                socialUserBind.getUserId());\n    }\n\n    @Override\n    public SocialUserRespDTO getSocialUserByCode(Integer userType, Integer socialType, String code, String state) {\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = authSocialUser(socialType, userType, code, state);\n        Assert.notNull(socialUser, \"\u793e\u4ea4\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        // \u83b7\u5f97\u7ed1\u5b9a\u7528\u6237\n        SocialUserBindDO socialUserBind = socialUserBindMapper.selectByUserTypeAndSocialUserId(userType,\n                socialUser.getId());\n        return new SocialUserRespDTO(socialUser.getOpenid(), socialUser.getNickname(), socialUser.getAvatar(),\n                socialUserBind != null ? socialUserBind.getUserId() : null);\n    }\n\n    /**\n     * \u6388\u6743\u83b7\u5f97\u5bf9\u5e94\u7684\u793e\u4ea4\u7528\u6237\n     * \u5982\u679c\u6388\u6743\u5931\u8d25\uff0c\u5219\u4f1a\u629b\u51fa {@link ServiceException} \u5f02\u5e38\n     *\n     * @param socialType \u793e\u4ea4\u5e73\u53f0\u7684\u7c7b\u578b {@link SocialTypeEnum}\n     * @param userType \u7528\u6237\u7c7b\u578b\n     * @param code     \u6388\u6743\u7801\n     * @param state    state\n     * @return \u6388\u6743\u7528\u6237\n     */\n    @NotNull\n    public SocialUserDO authSocialUser(Integer socialType, Integer userType, String code, String state) {\n        // \u4f18\u5148\u4ece DB \u4e2d\u83b7\u53d6\uff0c\u56e0\u4e3a code \u6709\u4e14\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u3002\n        // \u5728\u793e\u4ea4\u767b\u5f55\u65f6\uff0c\u5f53\u672a\u7ed1\u5b9a User \u65f6\uff0c\u9700\u8981\u7ed1\u5b9a\u767b\u5f55\uff0c\u6b64\u65f6\u9700\u8981 code \u4f7f\u7528\u4e24\u6b21\n        SocialUserDO socialUser = socialUserMapper.selectByTypeAndCodeAnState(socialType, code, state);\n        if (socialUser != null) {\n            return socialUser;\n        }\n\n        // \u8bf7\u6c42\u83b7\u53d6\n        AuthUser authUser = socialClientService.getAuthUser(socialType, userType, code, state);\n        Assert.notNull(authUser, \"\u4e09\u65b9\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        // \u4fdd\u5b58\u5230 DB \u4e2d\n        socialUser = socialUserMapper.selectByTypeAndOpenid(socialType, authUser.getUuid());\n        if (socialUser == null) {\n            socialUser = new SocialUserDO();\n        }\n        socialUser.setType(socialType).setCode(code).setState(state) // \u9700\u8981\u4fdd\u5b58 code + state \u5b57\u6bb5\uff0c\u4fdd\u8bc1\u540e\u7eed\u53ef\u67e5\u8be2\n                .setOpenid(authUser.getUuid()).setToken(authUser.getToken().getAccessToken()).setRawTokenInfo((toJsonString(authUser.getToken())))\n                .setNickname(authUser.getNickname()).setAvatar(authUser.getAvatar()).setRawUserInfo(toJsonString(authUser.getRawUserInfo()));\n        if (socialUser.getId() == null) {\n            socialUserMapper.insert(socialUser);\n        } else {\n            socialUserMapper.updateById(socialUser);\n        }\n        return socialUser;\n    }\n\n    // ==================== \u793e\u4ea4\u7528\u6237 CRUD ====================\n\n    @Override\n    public SocialUserDO getSocialUser(Long id) {\n        return socialUserMapper.selectById(id);\n    }\n\n    @Override\n    public PageResult<SocialUserDO> getSocialUserPage(SocialUserPageReqVO pageReqVO) {\n        return socialUserMapper.selectPage(pageReqVO);\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/347", "ground_truth": "\n        // \u83b7\u5f97\u7ed1\u5b9a\n        List<SocialUserBindDO> socialUserBinds = socialUserBindMapper.selectListByUserIdAndUserType(userId, userType);\n        if (CollUtil.isEmpty(socialUserBinds)) {\n            return Collections.emptyList();\n        }\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        return socialUserMapper.selectBatchIds(convertSet(socialUserBinds, SocialUserBindDO::getSocialUserId));\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-system", "yudao-module-system-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "system", "service", "social", "SocialUserServiceImpl.java"], "context_start_lineno": 0, "function_name": "getSocialUserList", "left_context": "class SocialUserServiceImpl implements SocialUserService {\n\n    @Resource\n    private SocialUserBindMapper socialUserBindMapper;\n    @Resource\n    private SocialUserMapper socialUserMapper;\n\n    @Resource\n    private SocialClientService socialClientService;\n\n    @Override\n    public List<SocialUserDO> getSocialUserList(Long userId, Integer userType) {", "right_context": "}\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public String bindSocialUser(SocialUserBindReqDTO reqDTO) {\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = authSocialUser(reqDTO.getSocialType(), reqDTO.getUserType(),\n                reqDTO.getCode(), reqDTO.getState());\n        Assert.notNull(socialUser, \"\u793e\u4ea4\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        // \u793e\u4ea4\u7528\u6237\u53ef\u80fd\u4e4b\u524d\u7ed1\u5b9a\u8fc7\u522b\u7684\u7528\u6237\uff0c\u9700\u8981\u8fdb\u884c\u89e3\u7ed1\n        socialUserBindMapper.deleteByUserTypeAndSocialUserId(reqDTO.getUserType(), socialUser.getId());\n\n        // \u7528\u6237\u53ef\u80fd\u4e4b\u524d\u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u8be5\u793e\u4ea4\u7c7b\u578b\uff0c\u9700\u8981\u8fdb\u884c\u89e3\u7ed1\n        socialUserBindMapper.deleteByUserTypeAndUserIdAndSocialType(reqDTO.getUserType(), reqDTO.getUserId(),\n                socialUser.getType());\n\n        // \u7ed1\u5b9a\u5f53\u524d\u767b\u5f55\u7684\u793e\u4ea4\u7528\u6237\n        SocialUserBindDO socialUserBind = SocialUserBindDO.builder()\n                .userId(reqDTO.getUserId()).userType(reqDTO.getUserType())\n                .socialUserId(socialUser.getId()).socialType(socialUser.getType()).build();\n        socialUserBindMapper.insert(socialUserBind);\n        return socialUser.getOpenid();\n    }\n\n    @Override\n    public void unbindSocialUser(Long userId, Integer userType, Integer socialType, String openid) {\n        // \u83b7\u5f97 openid \u5bf9\u5e94\u7684 SocialUserDO \u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = socialUserMapper.selectByTypeAndOpenid(socialType, openid);\n        if (socialUser == null) {\n            throw exception(SOCIAL_USER_NOT_FOUND);\n        }\n\n        // \u83b7\u5f97\u5bf9\u5e94\u7684\u793e\u4ea4\u7ed1\u5b9a\u5173\u7cfb\n        socialUserBindMapper.deleteByUserTypeAndUserIdAndSocialType(userType, userId, socialUser.getType());\n    }\n\n    @Override\n    public SocialUserRespDTO getSocialUserByUserId(Integer userType, Long userId, Integer socialType) {\n        // \u83b7\u5f97\u7ed1\u5b9a\u7528\u6237\n        SocialUserBindDO socialUserBind = socialUserBindMapper.selectByUserIdAndUserTypeAndSocialType(userId, userType, socialType);\n        if (socialUserBind == null) {\n            return null;\n        }\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = socialUserMapper.selectById(socialUserBind.getSocialUserId());\n        Assert.notNull(socialUser, \"\u793e\u4ea4\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n        return new SocialUserRespDTO(socialUser.getOpenid(), socialUser.getNickname(), socialUser.getAvatar(),\n                socialUserBind.getUserId());\n    }\n\n    @Override\n    public SocialUserRespDTO getSocialUserByCode(Integer userType, Integer socialType, String code, String state) {\n        // \u83b7\u5f97\u793e\u4ea4\u7528\u6237\n        SocialUserDO socialUser = authSocialUser(socialType, userType, code, state);\n        Assert.notNull(socialUser, \"\u793e\u4ea4\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        // \u83b7\u5f97\u7ed1\u5b9a\u7528\u6237\n        SocialUserBindDO socialUserBind = socialUserBindMapper.selectByUserTypeAndSocialUserId(userType,\n                socialUser.getId());\n        return new SocialUserRespDTO(socialUser.getOpenid(), socialUser.getNickname(), socialUser.getAvatar(),\n                socialUserBind != null ? socialUserBind.getUserId() : null);\n    }\n\n    /**\n     * \u6388\u6743\u83b7\u5f97\u5bf9\u5e94\u7684\u793e\u4ea4\u7528\u6237\n     * \u5982\u679c\u6388\u6743\u5931\u8d25\uff0c\u5219\u4f1a\u629b\u51fa {@link ServiceException} \u5f02\u5e38\n     *\n     * @param socialType \u793e\u4ea4\u5e73\u53f0\u7684\u7c7b\u578b {@link SocialTypeEnum}\n     * @param userType \u7528\u6237\u7c7b\u578b\n     * @param code     \u6388\u6743\u7801\n     * @param state    state\n     * @return \u6388\u6743\u7528\u6237\n     */\n    @NotNull\n    public SocialUserDO authSocialUser(Integer socialType, Integer userType, String code, String state) {\n        // \u4f18\u5148\u4ece DB \u4e2d\u83b7\u53d6\uff0c\u56e0\u4e3a code \u6709\u4e14\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u3002\n        // \u5728\u793e\u4ea4\u767b\u5f55\u65f6\uff0c\u5f53\u672a\u7ed1\u5b9a User \u65f6\uff0c\u9700\u8981\u7ed1\u5b9a\u767b\u5f55\uff0c\u6b64\u65f6\u9700\u8981 code \u4f7f\u7528\u4e24\u6b21\n        SocialUserDO socialUser = socialUserMapper.selectByTypeAndCodeAnState(socialType, code, state);\n        if (socialUser != null) {\n            return socialUser;\n        }\n\n        // \u8bf7\u6c42\u83b7\u53d6\n        AuthUser authUser = socialClientService.getAuthUser(socialType, userType, code, state);\n        Assert.notNull(authUser, \"\u4e09\u65b9\u7528\u6237\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        // \u4fdd\u5b58\u5230 DB \u4e2d\n        socialUser = socialUserMapper.selectByTypeAndOpenid(socialType, authUser.getUuid());\n        if (socialUser == null) {\n            socialUser = new SocialUserDO();\n        }\n        socialUser.setType(socialType).setCode(code).setState(state) // \u9700\u8981\u4fdd\u5b58 code + state \u5b57\u6bb5\uff0c\u4fdd\u8bc1\u540e\u7eed\u53ef\u67e5\u8be2\n                .setOpenid(authUser.getUuid()).setToken(authUser.getToken().getAccessToken()).setRawTokenInfo((toJsonString(authUser.getToken())))\n                .setNickname(authUser.getNickname()).setAvatar(authUser.getAvatar()).setRawUserInfo(toJsonString(authUser.getRawUserInfo()));\n        if (socialUser.getId() == null) {\n            socialUserMapper.insert(socialUser);\n        } else {\n            socialUserMapper.updateById(socialUser);\n        }\n        return socialUser;\n    }\n\n    // ==================== \u793e\u4ea4\u7528\u6237 CRUD ====================\n\n    @Override\n    public SocialUserDO getSocialUser(Long id) {\n        return socialUserMapper.selectById(id);\n    }\n\n    @Override\n    public PageResult<SocialUserDO> getSocialUserPage(SocialUserPageReqVO pageReqVO) {\n        return socialUserMapper.selectPage(pageReqVO);\n    }\n\n}", "class_name": "SocialUserServiceImpl", "return_type": "List<SocialUserDO>", "parameters": [{"type": "Long", "name": "userId"}, {"type": "Integer", "name": "userType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/ServiceException.java\n// --------------------------------------------------\n// public ServiceException setCode(Integer code){\n//   this.code=code;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/ServiceException.java\n// --------------------------------------------------\n// public ServiceException setMessage(String message){\n//   this.message=message;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java\n// --------------------------------------------------\n// public static ServiceException exception(ErrorCode errorCode){\n//   String messagePattern=MESSAGES.getOrDefault(errorCode.getCode(),errorCode.getMsg());\n//   return exception0(errorCode.getCode(),messagePattern);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java\n// --------------------------------------------------\n// public static ServiceException exception(ErrorCode errorCode,Object... params){\n//   String messagePattern=MESSAGES.getOrDefault(errorCode.getCode(),errorCode.getMsg());\n//   return exception0(errorCode.getCode(),messagePattern,params);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java\n// --------------------------------------------------\n// /** \n//  * \u521b\u5efa\u6307\u5b9a\u7f16\u53f7\u7684 ServiceException \u7684\u5f02\u5e38\n//  * @param code \u7f16\u53f7\n//  * @return \u5f02\u5e38\n//  */\n// public static ServiceException exception(Integer code){\n//   return exception0(code,MESSAGES.get(code));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java\n// --------------------------------------------------\n// /** \n//  * \u521b\u5efa\u6307\u5b9a\u7f16\u53f7\u7684 ServiceException \u7684\u5f02\u5e38\n//  * @param code \u7f16\u53f7\n//  * @param params \u6d88\u606f\u63d0\u793a\u7684\u5360\u4f4d\u7b26\u5bf9\u5e94\u7684\u53c2\u6570\n//  * @return \u5f02\u5e38\n//  */\n// public static ServiceException exception(Integer code,Object... params){\n//   return exception0(code,MESSAGES.get(code),params);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java\n// --------------------------------------------------\n// public static ServiceException exception0(Integer code,String messagePattern,Object... params){\n//   String message=doFormat(code,messagePattern,params);\n//   return new ServiceException(code,message);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java\n// --------------------------------------------------\n// public static ServiceException invalidParamException(String messagePattern,Object... params){\n//   return exception0(GlobalErrorCodeConstants.BAD_REQUEST.getCode(),messagePattern,params);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TenantFrameworkServiceImpl implements TenantFrameworkService {\n\n    private static final ServiceException SERVICE_EXCEPTION_NULL = new ServiceException();\n\n    private final TenantApi tenantApi;\n\n    /**\n     * \u9488\u5bf9 {@link #getTenantIds()} \u7684\u7f13\u5b58\n     */\n    private final LoadingCache<Object, List<Long>> getTenantIdsCache = CacheUtils.buildAsyncReloadingCache(\n            Duration.ofMinutes(1L), // \u8fc7\u671f\u65f6\u95f4 1 \u5206\u949f\n            new CacheLoader<Object, List<Long>>() {\n\n                @Override\n                public List<Long> load(Object key) {\n                    return tenantApi.getTenantIdList();\n                }\n\n            });\n\n    /**\n     * \u9488\u5bf9 {@link #validTenant(Long)} \u7684\u7f13\u5b58\n     */\n    private final LoadingCache<Long, ServiceException> validTenantCache = CacheUtils.buildAsyncReloadingCache(\n            Duration.ofMinutes(1L), // \u8fc7\u671f\u65f6\u95f4 1 \u5206\u949f\n            new CacheLoader<Long, ServiceException>() {\n\n                @Override\n                public ServiceException load(Long id) {<FILL_FUNCTION_BODY>}\n\n            });\n\n    @Override\n    @SneakyThrows\n    public List<Long> getTenantIds() {\n        return getTenantIdsCache.get(Boolean.TRUE);\n    }\n\n    @Override\n    public void validTenant(Long id) {\n        ServiceException serviceException = validTenantCache.getUnchecked(id);\n        if (serviceException != SERVICE_EXCEPTION_NULL) {\n            throw serviceException;\n        }\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/351", "ground_truth": "\n                    try {\n                        tenantApi.validateTenant(id);\n                        return SERVICE_EXCEPTION_NULL;\n                    } catch (ServiceException ex) {\n                        return ex;\n                    }\n                ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-biz-tenant", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "tenant", "core", "service", "TenantFrameworkServiceImpl.java"], "context_start_lineno": 0, "function_name": "load", "left_context": "class TenantFrameworkServiceImpl implements TenantFrameworkService {\n\n    private static final ServiceException SERVICE_EXCEPTION_NULL = new ServiceException();\n\n    private final TenantApi tenantApi;\n\n    /**\n     * \u9488\u5bf9 {@link #getTenantIds()} \u7684\u7f13\u5b58\n     */\n    private final LoadingCache<Object, List<Long>> getTenantIdsCache = CacheUtils.buildAsyncReloadingCache(\n            Duration.ofMinutes(1L), // \u8fc7\u671f\u65f6\u95f4 1 \u5206\u949f\n            new CacheLoader<Object, List<Long>>() {\n\n                @Override\n                public List<Long> load(Object key) {\n                    return tenantApi.getTenantIdList();\n                }\n\n            });\n\n    /**\n     * \u9488\u5bf9 {@link #validTenant(Long)} \u7684\u7f13\u5b58\n     */\n    private final LoadingCache<Long, ServiceException> validTenantCache = CacheUtils.buildAsyncReloadingCache(\n            Duration.ofMinutes(1L), // \u8fc7\u671f\u65f6\u95f4 1 \u5206\u949f\n            new CacheLoader<Long, ServiceException>() {\n\n                @Override\n                public ServiceException load(Long id) {", "right_context": "}\n\n            });\n\n    @Override\n    @SneakyThrows\n    public List<Long> getTenantIds() {\n        return getTenantIdsCache.get(Boolean.TRUE);\n    }\n\n    @Override\n    public void validTenant(Long id) {\n        ServiceException serviceException = validTenantCache.getUnchecked(id);\n        if (serviceException != SERVICE_EXCEPTION_NULL) {\n            throw serviceException;\n        }\n    }\n\n}", "class_name": "TenantFrameworkServiceImpl", "return_type": "ServiceException", "parameters": [{"type": "Long", "name": "id"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FileController {\n\n    @Resource\n    private FileService fileService;\n\n    @PostMapping(\"/upload\")\n    @Operation(summary = \"\u4e0a\u4f20\u6587\u4ef6\", description = \"\u6a21\u5f0f\u4e00\uff1a\u540e\u7aef\u4e0a\u4f20\u6587\u4ef6\")\n    public CommonResult<String> uploadFile(FileUploadReqVO uploadReqVO) throws Exception {\n        MultipartFile file = uploadReqVO.getFile();\n        String path = uploadReqVO.getPath();\n        return success(fileService.createFile(file.getOriginalFilename(), path, IoUtil.readBytes(file.getInputStream())));\n    }\n\n    @GetMapping(\"/presigned-url\")\n    @Operation(summary = \"\u83b7\u53d6\u6587\u4ef6\u9884\u7b7e\u540d\u5730\u5740\", description = \"\u6a21\u5f0f\u4e8c\uff1a\u524d\u7aef\u4e0a\u4f20\u6587\u4ef6\uff1a\u7528\u4e8e\u524d\u7aef\u76f4\u63a5\u4e0a\u4f20\u4e03\u725b\u3001\u963f\u91cc\u4e91 OSS \u7b49\u6587\u4ef6\u5b58\u50a8\u5668\")\n    public CommonResult<FilePresignedUrlRespVO> getFilePresignedUrl(@RequestParam(\"path\") String path) throws Exception {\n        return success(fileService.getFilePresignedUrl(path));\n    }\n\n    @PostMapping(\"/create\")\n    @Operation(summary = \"\u521b\u5efa\u6587\u4ef6\", description = \"\u6a21\u5f0f\u4e8c\uff1a\u524d\u7aef\u4e0a\u4f20\u6587\u4ef6\uff1a\u914d\u5408 presigned-url \u63a5\u53e3\uff0c\u8bb0\u5f55\u4e0a\u4f20\u4e86\u4e0a\u4f20\u7684\u6587\u4ef6\")\n    public CommonResult<Long> createFile(@Valid @RequestBody FileCreateReqVO createReqVO) {\n        return success(fileService.createFile(createReqVO));\n    }\n\n    @DeleteMapping(\"/delete\")\n    @Operation(summary = \"\u5220\u9664\u6587\u4ef6\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true)\n    @PreAuthorize(\"@ss.hasPermission('infra:file:delete')\")\n    public CommonResult<Boolean> deleteFile(@RequestParam(\"id\") Long id) throws Exception {\n        fileService.deleteFile(id);\n        return success(true);\n    }\n\n    @GetMapping(\"/{configId}/get/**\")\n    @PermitAll\n    @Operation(summary = \"\u4e0b\u8f7d\u6587\u4ef6\")\n    @Parameter(name = \"configId\", description = \"\u914d\u7f6e\u7f16\u53f7\", required = true)\n    public void getFileContent(HttpServletRequest request,\n                               HttpServletResponse response,\n                               @PathVariable(\"configId\") Long configId) throws Exception {<FILL_FUNCTION_BODY>}\n\n    @GetMapping(\"/page\")\n    @Operation(summary = \"\u83b7\u5f97\u6587\u4ef6\u5206\u9875\")\n    @PreAuthorize(\"@ss.hasPermission('infra:file:query')\")\n    public CommonResult<PageResult<FileRespVO>> getFilePage(@Valid FilePageReqVO pageVO) {\n        PageResult<FileDO> pageResult = fileService.getFilePage(pageVO);\n        return success(BeanUtils.toBean(pageResult, FileRespVO.class));\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/375", "ground_truth": "\n        // \u83b7\u53d6\u8bf7\u6c42\u7684\u8def\u5f84\n        String path = StrUtil.subAfter(request.getRequestURI(), \"/get/\", false);\n        if (StrUtil.isEmpty(path)) {\n            throw new IllegalArgumentException(\"\u7ed3\u5c3e\u7684 path \u8def\u5f84\u5fc5\u987b\u4f20\u9012\");\n        }\n        // \u89e3\u7801\uff0c\u89e3\u51b3\u4e2d\u6587\u8def\u5f84\u7684\u95ee\u9898 https://gitee.com/zhijiantianya/ruoyi-vue-pro/pulls/807/\n        path = URLUtil.decode(path);\n\n        // \u8bfb\u53d6\u5185\u5bb9\n        byte[] content = fileService.getFileContent(configId, path);\n        if (content == null) {\n            log.warn(\"[getFileContent][configId({}) path({}) \u6587\u4ef6\u4e0d\u5b58\u5728]\", configId, path);\n            response.setStatus(HttpStatus.NOT_FOUND.value());\n            return;\n        }\n        ServletUtils.writeAttachment(response, path, content);\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-infra", "yudao-module-infra-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "infra", "controller", "admin", "file", "FileController.java"], "context_start_lineno": 0, "function_name": "getFileContent", "left_context": "class FileController {\n\n    @Resource\n    private FileService fileService;\n\n    @PostMapping(\"/upload\")\n    @Operation(summary = \"\u4e0a\u4f20\u6587\u4ef6\", description = \"\u6a21\u5f0f\u4e00\uff1a\u540e\u7aef\u4e0a\u4f20\u6587\u4ef6\")\n    public CommonResult<String> uploadFile(FileUploadReqVO uploadReqVO) throws Exception {\n        MultipartFile file = uploadReqVO.getFile();\n        String path = uploadReqVO.getPath();\n        return success(fileService.createFile(file.getOriginalFilename(), path, IoUtil.readBytes(file.getInputStream())));\n    }\n\n    @GetMapping(\"/presigned-url\")\n    @Operation(summary = \"\u83b7\u53d6\u6587\u4ef6\u9884\u7b7e\u540d\u5730\u5740\", description = \"\u6a21\u5f0f\u4e8c\uff1a\u524d\u7aef\u4e0a\u4f20\u6587\u4ef6\uff1a\u7528\u4e8e\u524d\u7aef\u76f4\u63a5\u4e0a\u4f20\u4e03\u725b\u3001\u963f\u91cc\u4e91 OSS \u7b49\u6587\u4ef6\u5b58\u50a8\u5668\")\n    public CommonResult<FilePresignedUrlRespVO> getFilePresignedUrl(@RequestParam(\"path\") String path) throws Exception {\n        return success(fileService.getFilePresignedUrl(path));\n    }\n\n    @PostMapping(\"/create\")\n    @Operation(summary = \"\u521b\u5efa\u6587\u4ef6\", description = \"\u6a21\u5f0f\u4e8c\uff1a\u524d\u7aef\u4e0a\u4f20\u6587\u4ef6\uff1a\u914d\u5408 presigned-url \u63a5\u53e3\uff0c\u8bb0\u5f55\u4e0a\u4f20\u4e86\u4e0a\u4f20\u7684\u6587\u4ef6\")\n    public CommonResult<Long> createFile(@Valid @RequestBody FileCreateReqVO createReqVO) {\n        return success(fileService.createFile(createReqVO));\n    }\n\n    @DeleteMapping(\"/delete\")\n    @Operation(summary = \"\u5220\u9664\u6587\u4ef6\")\n    @Parameter(name = \"id\", description = \"\u7f16\u53f7\", required = true)\n    @PreAuthorize(\"@ss.hasPermission('infra:file:delete')\")\n    public CommonResult<Boolean> deleteFile(@RequestParam(\"id\") Long id) throws Exception {\n        fileService.deleteFile(id);\n        return success(true);\n    }\n\n    @GetMapping(\"/{configId}/get/**\")\n    @PermitAll\n    @Operation(summary = \"\u4e0b\u8f7d\u6587\u4ef6\")\n    @Parameter(name = \"configId\", description = \"\u914d\u7f6e\u7f16\u53f7\", required = true)\n    public void getFileContent(HttpServletRequest request,\n                               HttpServletResponse response,\n                               @PathVariable(\"configId\") Long configId) throws Exception {", "right_context": "}\n\n    @GetMapping(\"/page\")\n    @Operation(summary = \"\u83b7\u5f97\u6587\u4ef6\u5206\u9875\")\n    @PreAuthorize(\"@ss.hasPermission('infra:file:query')\")\n    public CommonResult<PageResult<FileRespVO>> getFilePage(@Valid FilePageReqVO pageVO) {\n        PageResult<FileDO> pageResult = fileService.getFilePage(pageVO);\n        return success(BeanUtils.toBean(pageResult, FileRespVO.class));\n    }\n\n}", "class_name": "FileController", "return_type": "void", "parameters": [{"type": "HttpServletRequest", "name": "request"}, {"type": "HttpServletResponse", "name": "response"}, {"type": "Long", "name": "configId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LoginUserHandshakeInterceptor implements HandshakeInterceptor {\n\n    @Override\n    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response,\n                                   WebSocketHandler wsHandler, Map<String, Object> attributes) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n                               WebSocketHandler wsHandler, Exception exception) {\n        // do nothing\n    }\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/376", "ground_truth": "\n        LoginUser loginUser = SecurityFrameworkUtils.getLoginUser();\n        if (loginUser != null) {\n            WebSocketFrameworkUtils.setLoginUser(loginUser, attributes);\n        }\n        return true;\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-websocket", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "websocket", "core", "security", "LoginUserHandshakeInterceptor.java"], "context_start_lineno": 0, "function_name": "beforeHandshake", "left_context": "class LoginUserHandshakeInterceptor implements HandshakeInterceptor {\n\n    @Override\n    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response,\n                                   WebSocketHandler wsHandler, Map<String, Object> attributes) {", "right_context": "}\n\n    @Override\n    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n                               WebSocketHandler wsHandler, Exception exception) {\n        // do nothing\n    }\n\n}", "class_name": "LoginUserHandshakeInterceptor", "return_type": "boolean", "parameters": [{"type": "ServerHttpRequest", "name": "request"}, {"type": "ServerHttpResponse", "name": "response"}, {"type": "WebSocketHandler", "name": "wsHandler"}, {"type": "Map<String,Object>", "name": "attributes"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/convert/DictConvert.java\n// --------------------------------------------------\n// @Override public WriteCellData<String> convertToExcelData(Object object,ExcelContentProperty contentProperty,GlobalConfiguration globalConfiguration){\n//   if (object == null) {\n//     return new WriteCellData<>(\"\");\n//   }\n//   String type=getType(contentProperty);\n//   String value=String.valueOf(object);\n//   String label=DictFrameworkUtils.getDictDataLabel(type,value);\n//   if (label == null) {\n//     log.error(\"[convertToExcelData][type({}) \u8f6c\u6362\u4e0d\u4e86 label({})]\",type,value);\n//     return new WriteCellData<>(\"\");\n//   }\n//   return new WriteCellData<>(label);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// ruoyi-vue-pro/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/convert/JsonConvert.java\n// --------------------------------------------------\n// @Override public WriteCellData<String> convertToExcelData(Object value,ExcelContentProperty contentProperty,GlobalConfiguration globalConfiguration){\n//   return new WriteCellData<>(JsonUtils.toJsonString(value));\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MoneyConvert implements Converter<Integer> {\n\n    @Override\n    public Class<?> supportJavaTypeKey() {\n        throw new UnsupportedOperationException(\"\u6682\u4e0d\u652f\u6301\uff0c\u4e5f\u4e0d\u9700\u8981\");\n    }\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey() {\n        throw new UnsupportedOperationException(\"\u6682\u4e0d\u652f\u6301\uff0c\u4e5f\u4e0d\u9700\u8981\");\n    }\n\n    @Override\n    public WriteCellData<String> convertToExcelData(Integer value, ExcelContentProperty contentProperty,\n                                                    GlobalConfiguration globalConfiguration) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/401", "ground_truth": "\n        BigDecimal result = BigDecimal.valueOf(value)\n                .divide(new BigDecimal(100), 2, RoundingMode.HALF_UP);\n        return new WriteCellData<>(result.toString());\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-excel", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "excel", "core", "convert", "MoneyConvert.java"], "context_start_lineno": 0, "function_name": "convertToExcelData", "left_context": "class MoneyConvert implements Converter<Integer> {\n\n    @Override\n    public Class<?> supportJavaTypeKey() {\n        throw new UnsupportedOperationException(\"\u6682\u4e0d\u652f\u6301\uff0c\u4e5f\u4e0d\u9700\u8981\");\n    }\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey() {\n        throw new UnsupportedOperationException(\"\u6682\u4e0d\u652f\u6301\uff0c\u4e5f\u4e0d\u9700\u8981\");\n    }\n\n    @Override\n    public WriteCellData<String> convertToExcelData(Integer value, ExcelContentProperty contentProperty,\n                                                    GlobalConfiguration globalConfiguration) {", "right_context": "}\n\n}", "class_name": "MoneyConvert", "return_type": "WriteCellData<String>", "parameters": [{"type": "Integer", "name": "value"}, {"type": "ExcelContentProperty", "name": "contentProperty"}, {"type": "GlobalConfiguration", "name": "globalConfiguration"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DruidAdRemoveFilter extends OncePerRequestFilter {\n\n    /**\n     * common.js \u7684\u8def\u5f84\n     */\n    private static final String COMMON_JS_ILE_PATH = \"support/http/resources/js/common.js\";\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/448", "ground_truth": "\n        chain.doFilter(request, response);\n        // \u91cd\u7f6e\u7f13\u51b2\u533a\uff0c\u54cd\u5e94\u5934\u4e0d\u4f1a\u88ab\u91cd\u7f6e\n        response.resetBuffer();\n        // \u83b7\u53d6 common.js\n        String text = Utils.readFromResource(COMMON_JS_ILE_PATH);\n        // \u6b63\u5219\u66ff\u6362 banner, \u9664\u53bb\u5e95\u90e8\u7684\u5e7f\u544a\u4fe1\u606f\n        text = text.replaceAll(\"<a.*?banner\\\"></a><br/>\", \"\");\n        text = text.replaceAll(\"powered.*?shrek.wang</a>\", \"\");\n        response.getWriter().write(text);\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-framework", "yudao-spring-boot-starter-mybatis", "src", "main", "java", "cn", "iocoder", "yudao", "framework", "datasource", "core", "filter", "DruidAdRemoveFilter.java"], "context_start_lineno": 0, "function_name": "doFilterInternal", "left_context": "class DruidAdRemoveFilter extends OncePerRequestFilter {\n\n    /**\n     * common.js \u7684\u8def\u5f84\n     */\n    private static final String COMMON_JS_ILE_PATH = \"support/http/resources/js/common.js\";\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException {", "right_context": "}\n\n}", "class_name": "DruidAdRemoveFilter", "return_type": "void", "parameters": [{"type": "HttpServletRequest", "name": "request"}, {"type": "HttpServletResponse", "name": "response"}, {"type": "FilterChain", "name": "chain"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MailLogServiceImpl implements MailLogService {\n\n    @Resource\n    private MailLogMapper mailLogMapper;\n\n    @Override\n    public PageResult<MailLogDO> getMailLogPage(MailLogPageReqVO pageVO) {\n        return mailLogMapper.selectPage(pageVO);\n    }\n\n    @Override\n    public MailLogDO getMailLog(Long id) {\n        return mailLogMapper.selectById(id);\n    }\n\n    @Override\n    public Long createMailLog(Long userId, Integer userType, String toMail,\n                              MailAccountDO account, MailTemplateDO template,\n                              String templateContent, Map<String, Object> templateParams, Boolean isSend) {\n        MailLogDO.MailLogDOBuilder logDOBuilder = MailLogDO.builder();\n        // \u6839\u636e\u662f\u5426\u8981\u53d1\u9001\uff0c\u8bbe\u7f6e\u72b6\u6001\n        logDOBuilder.sendStatus(Objects.equals(isSend, true) ? MailSendStatusEnum.INIT.getStatus()\n                : MailSendStatusEnum.IGNORE.getStatus())\n                // \u7528\u6237\u4fe1\u606f\n                .userId(userId).userType(userType).toMail(toMail)\n                .accountId(account.getId()).fromMail(account.getMail())\n                // \u6a21\u677f\u76f8\u5173\u5b57\u6bb5\n                .templateId(template.getId()).templateCode(template.getCode()).templateNickname(template.getNickname())\n                .templateTitle(template.getTitle()).templateContent(templateContent).templateParams(templateParams);\n\n        // \u63d2\u5165\u6570\u636e\u5e93\n        MailLogDO logDO = logDOBuilder.build();\n        mailLogMapper.insert(logDO);\n        return logDO.getId();\n    }\n\n    @Override\n    public void updateMailSendResult(Long logId, String messageId, Exception exception) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "YunaiV_ruoyi-vue-pro/497", "ground_truth": "\n        // 1. \u6210\u529f\n        if (exception == null) {\n            mailLogMapper.updateById(new MailLogDO().setId(logId).setSendTime(LocalDateTime.now())\n                    .setSendStatus(MailSendStatusEnum.SUCCESS.getStatus()).setSendMessageId(messageId));\n            return;\n        }\n        // 2. \u5931\u8d25\n        mailLogMapper.updateById(new MailLogDO().setId(logId).setSendTime(LocalDateTime.now())\n                .setSendStatus(MailSendStatusEnum.FAILURE.getStatus()).setSendException(getRootCauseMessage(exception)));\n\n    ", "fpath_tuple": ["YunaiV_ruoyi-vue-pro", "ruoyi-vue-pro", "yudao-module-system", "yudao-module-system-biz", "src", "main", "java", "cn", "iocoder", "yudao", "module", "system", "service", "mail", "MailLogServiceImpl.java"], "context_start_lineno": 0, "function_name": "updateMailSendResult", "left_context": "class MailLogServiceImpl implements MailLogService {\n\n    @Resource\n    private MailLogMapper mailLogMapper;\n\n    @Override\n    public PageResult<MailLogDO> getMailLogPage(MailLogPageReqVO pageVO) {\n        return mailLogMapper.selectPage(pageVO);\n    }\n\n    @Override\n    public MailLogDO getMailLog(Long id) {\n        return mailLogMapper.selectById(id);\n    }\n\n    @Override\n    public Long createMailLog(Long userId, Integer userType, String toMail,\n                              MailAccountDO account, MailTemplateDO template,\n                              String templateContent, Map<String, Object> templateParams, Boolean isSend) {\n        MailLogDO.MailLogDOBuilder logDOBuilder = MailLogDO.builder();\n        // \u6839\u636e\u662f\u5426\u8981\u53d1\u9001\uff0c\u8bbe\u7f6e\u72b6\u6001\n        logDOBuilder.sendStatus(Objects.equals(isSend, true) ? MailSendStatusEnum.INIT.getStatus()\n                : MailSendStatusEnum.IGNORE.getStatus())\n                // \u7528\u6237\u4fe1\u606f\n                .userId(userId).userType(userType).toMail(toMail)\n                .accountId(account.getId()).fromMail(account.getMail())\n                // \u6a21\u677f\u76f8\u5173\u5b57\u6bb5\n                .templateId(template.getId()).templateCode(template.getCode()).templateNickname(template.getNickname())\n                .templateTitle(template.getTitle()).templateContent(templateContent).templateParams(templateParams);\n\n        // \u63d2\u5165\u6570\u636e\u5e93\n        MailLogDO logDO = logDOBuilder.build();\n        mailLogMapper.insert(logDO);\n        return logDO.getId();\n    }\n\n    @Override\n    public void updateMailSendResult(Long logId, String messageId, Exception exception) {", "right_context": "}\n\n}", "class_name": "MailLogServiceImpl", "return_type": "void", "parameters": [{"type": "Long", "name": "logId"}, {"type": "String", "name": "messageId"}, {"type": "Exception", "name": "exception"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HeapByteBufUtil {\n\n    static byte getByte(byte[] memory, int index) {\n        return memory[index];\n    }\n\n    static short getShort(byte[] memory, int index) {\n        return (short) (memory[index] << 8 | memory[index + 1] & 0xFF);\n    }\n\n    static short getShortLE(byte[] memory, int index) {\n        return (short) (memory[index] & 0xff | memory[index + 1] << 8);\n    }\n\n    static int getUnsignedMedium(byte[] memory, int index) {\n        return (memory[index] & 0xff) << 16 |\n                (memory[index + 1] & 0xff) << 8 |\n                memory[index + 2] & 0xff;\n    }\n\n    static int getUnsignedMediumLE(byte[] memory, int index) {\n        return memory[index] & 0xff |\n                (memory[index + 1] & 0xff) << 8 |\n                (memory[index + 2] & 0xff) << 16;\n    }\n\n    static int getInt(byte[] memory, int index) {\n        return (memory[index] & 0xff) << 24 |\n                (memory[index + 1] & 0xff) << 16 |\n                (memory[index + 2] & 0xff) << 8 |\n                memory[index + 3] & 0xff;\n    }\n\n    static int getIntLE(byte[] memory, int index) {\n        return memory[index] & 0xff |\n                (memory[index + 1] & 0xff) << 8 |\n                (memory[index + 2] & 0xff) << 16 |\n                (memory[index + 3] & 0xff) << 24;\n    }\n\n    static long getLong(byte[] memory, int index) {\n        return ((long) memory[index] & 0xff) << 56 |\n                ((long) memory[index + 1] & 0xff) << 48 |\n                ((long) memory[index + 2] & 0xff) << 40 |\n                ((long) memory[index + 3] & 0xff) << 32 |\n                ((long) memory[index + 4] & 0xff) << 24 |\n                ((long) memory[index + 5] & 0xff) << 16 |\n                ((long) memory[index + 6] & 0xff) << 8 |\n                (long) memory[index + 7] & 0xff;\n    }\n\n    static long getLongLE(byte[] memory, int index) {\n        return (long) memory[index] & 0xff |\n                ((long) memory[index + 1] & 0xff) << 8 |\n                ((long) memory[index + 2] & 0xff) << 16 |\n                ((long) memory[index + 3] & 0xff) << 24 |\n                ((long) memory[index + 4] & 0xff) << 32 |\n                ((long) memory[index + 5] & 0xff) << 40 |\n                ((long) memory[index + 6] & 0xff) << 48 |\n                ((long) memory[index + 7] & 0xff) << 56;\n    }\n\n    static void setByte(byte[] memory, int index, int value) {\n        memory[index] = (byte) value;\n    }\n\n    static void setShort(byte[] memory, int index, int value) {\n        memory[index] = (byte) (value >>> 8);\n        memory[index + 1] = (byte) value;\n    }\n\n    static void setShortLE(byte[] memory, int index, int value) {\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n    }\n\n    static void setMedium(byte[] memory, int index, int value) {\n        memory[index] = (byte) (value >>> 16);\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) value;\n    }\n\n    static void setMediumLE(byte[] memory, int index, int value) {\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) (value >>> 16);\n    }\n\n    static void setInt(byte[] memory, int index, int value) {\n        memory[index] = (byte) (value >>> 24);\n        memory[index + 1] = (byte) (value >>> 16);\n        memory[index + 2] = (byte) (value >>> 8);\n        memory[index + 3] = (byte) value;\n    }\n\n    static void setIntLE(byte[] memory, int index, int value) {<FILL_FUNCTION_BODY>}\n\n    static void setLong(byte[] memory, int index, long value) {\n        memory[index] = (byte) (value >>> 56);\n        memory[index + 1] = (byte) (value >>> 48);\n        memory[index + 2] = (byte) (value >>> 40);\n        memory[index + 3] = (byte) (value >>> 32);\n        memory[index + 4] = (byte) (value >>> 24);\n        memory[index + 5] = (byte) (value >>> 16);\n        memory[index + 6] = (byte) (value >>> 8);\n        memory[index + 7] = (byte) value;\n    }\n\n    static void setLongLE(byte[] memory, int index, long value) {\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) (value >>> 16);\n        memory[index + 3] = (byte) (value >>> 24);\n        memory[index + 4] = (byte) (value >>> 32);\n        memory[index + 5] = (byte) (value >>> 40);\n        memory[index + 6] = (byte) (value >>> 48);\n        memory[index + 7] = (byte) (value >>> 56);\n    }\n\n    private HeapByteBufUtil() {\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/0", "ground_truth": "\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) (value >>> 16);\n        memory[index + 3] = (byte) (value >>> 24);\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-protobuf", "src", "main", "java", "com", "jarvis", "cache", "serializer", "protobuf", "HeapByteBufUtil.java"], "context_start_lineno": 0, "function_name": "setIntLE", "left_context": "class HeapByteBufUtil {\n\n    static byte getByte(byte[] memory, int index) {\n        return memory[index];\n    }\n\n    static short getShort(byte[] memory, int index) {\n        return (short) (memory[index] << 8 | memory[index + 1] & 0xFF);\n    }\n\n    static short getShortLE(byte[] memory, int index) {\n        return (short) (memory[index] & 0xff | memory[index + 1] << 8);\n    }\n\n    static int getUnsignedMedium(byte[] memory, int index) {\n        return (memory[index] & 0xff) << 16 |\n                (memory[index + 1] & 0xff) << 8 |\n                memory[index + 2] & 0xff;\n    }\n\n    static int getUnsignedMediumLE(byte[] memory, int index) {\n        return memory[index] & 0xff |\n                (memory[index + 1] & 0xff) << 8 |\n                (memory[index + 2] & 0xff) << 16;\n    }\n\n    static int getInt(byte[] memory, int index) {\n        return (memory[index] & 0xff) << 24 |\n                (memory[index + 1] & 0xff) << 16 |\n                (memory[index + 2] & 0xff) << 8 |\n                memory[index + 3] & 0xff;\n    }\n\n    static int getIntLE(byte[] memory, int index) {\n        return memory[index] & 0xff |\n                (memory[index + 1] & 0xff) << 8 |\n                (memory[index + 2] & 0xff) << 16 |\n                (memory[index + 3] & 0xff) << 24;\n    }\n\n    static long getLong(byte[] memory, int index) {\n        return ((long) memory[index] & 0xff) << 56 |\n                ((long) memory[index + 1] & 0xff) << 48 |\n                ((long) memory[index + 2] & 0xff) << 40 |\n                ((long) memory[index + 3] & 0xff) << 32 |\n                ((long) memory[index + 4] & 0xff) << 24 |\n                ((long) memory[index + 5] & 0xff) << 16 |\n                ((long) memory[index + 6] & 0xff) << 8 |\n                (long) memory[index + 7] & 0xff;\n    }\n\n    static long getLongLE(byte[] memory, int index) {\n        return (long) memory[index] & 0xff |\n                ((long) memory[index + 1] & 0xff) << 8 |\n                ((long) memory[index + 2] & 0xff) << 16 |\n                ((long) memory[index + 3] & 0xff) << 24 |\n                ((long) memory[index + 4] & 0xff) << 32 |\n                ((long) memory[index + 5] & 0xff) << 40 |\n                ((long) memory[index + 6] & 0xff) << 48 |\n                ((long) memory[index + 7] & 0xff) << 56;\n    }\n\n    static void setByte(byte[] memory, int index, int value) {\n        memory[index] = (byte) value;\n    }\n\n    static void setShort(byte[] memory, int index, int value) {\n        memory[index] = (byte) (value >>> 8);\n        memory[index + 1] = (byte) value;\n    }\n\n    static void setShortLE(byte[] memory, int index, int value) {\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n    }\n\n    static void setMedium(byte[] memory, int index, int value) {\n        memory[index] = (byte) (value >>> 16);\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) value;\n    }\n\n    static void setMediumLE(byte[] memory, int index, int value) {\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) (value >>> 16);\n    }\n\n    static void setInt(byte[] memory, int index, int value) {\n        memory[index] = (byte) (value >>> 24);\n        memory[index + 1] = (byte) (value >>> 16);\n        memory[index + 2] = (byte) (value >>> 8);\n        memory[index + 3] = (byte) value;\n    }\n\n    static void setIntLE(byte[] memory, int index, int value) {", "right_context": "}\n\n    static void setLong(byte[] memory, int index, long value) {\n        memory[index] = (byte) (value >>> 56);\n        memory[index + 1] = (byte) (value >>> 48);\n        memory[index + 2] = (byte) (value >>> 40);\n        memory[index + 3] = (byte) (value >>> 32);\n        memory[index + 4] = (byte) (value >>> 24);\n        memory[index + 5] = (byte) (value >>> 16);\n        memory[index + 6] = (byte) (value >>> 8);\n        memory[index + 7] = (byte) value;\n    }\n\n    static void setLongLE(byte[] memory, int index, long value) {\n        memory[index] = (byte) value;\n        memory[index + 1] = (byte) (value >>> 8);\n        memory[index + 2] = (byte) (value >>> 16);\n        memory[index + 3] = (byte) (value >>> 24);\n        memory[index + 4] = (byte) (value >>> 32);\n        memory[index + 5] = (byte) (value >>> 40);\n        memory[index + 6] = (byte) (value >>> 48);\n        memory[index + 7] = (byte) (value >>> 56);\n    }\n\n    private HeapByteBufUtil() {\n    }\n}", "class_name": "HeapByteBufUtil", "return_type": "void", "parameters": [{"type": "byte[]", "name": "memory"}, {"type": "int", "name": "index"}, {"type": "int", "name": "value"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/ReadByteBuf.java\n// --------------------------------------------------\n// public byte[] readableBytes(){\n//   byte[] newArray=new byte[array.length - readerIndex];\n//   System.arraycopy(array,readerIndex,newArray,0,newArray.length);\n//   return newArray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/WriteByteBuf.java\n// --------------------------------------------------\n// public byte[] toByteArray(){\n//   byte[] newArray=new byte[count];\n//   System.arraycopy(buf,0,newArray,0,count);\n//   return newArray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/redis/SpringRedisCacheManager.java\n// --------------------------------------------------\n// @Override public byte[] get(byte[] key){\n//   return redisConnection.stringCommands().get(key);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/redis/SpringRedisCacheManager.java\n// --------------------------------------------------\n// @Override public byte[] hget(byte[] key,byte[] field){\n//   return redisConnection.hashCommands().hGet(key,field);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/FST.java\n// --------------------------------------------------\n// private static byte[] write(Object obj) throws Exception {\n//   byte barray[]=conf.asByteArray(obj);\n//   return barray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/KryoTest.java\n// --------------------------------------------------\n// private static byte[] write(Object obj) throws Exception {\n//   Output output=null;\n//   try {\n//     ByteArrayOutputStream baos=new ByteArrayOutputStream();\n//     output=new Output(baos);\n//     kryo.writeClassAndObject(output,obj);\n//     output.flush();\n//     return baos.toByteArray();\n//   }\n//   finally {\n//     if (output != null) {\n//       output.close();\n//     }\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/ISerializer.java\n// --------------------------------------------------\n// /** \n//  * Serialize the given object to binary data.\n//  * @param obj object to serialize\n//  * @return the equivalent binary data\n//  * @throws Exception \u5f02\u5e38\n//  */\n// byte[] serialize(final T obj) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/StringSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(String string){\n//   return (string == null ? null : string.getBytes(charset));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-fastjson/src/main/java/com/jarvis/cache/serializer/FastjsonSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   String json=JSON.toJSONString(obj,FEATURES);\n//   return json.getBytes(charset);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-hessian/src/main/java/com/jarvis/cache/serializer/HessianSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n//   AbstractHessianOutput output=new Hessian2Output(outputStream);\n//   output.setSerializerFactory(SERIALIZER_FACTORY);\n//   output.writeObject(obj);\n//   output.flush();\n//   byte[] val=outputStream.toByteArray();\n//   output.close();\n//   return val;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson-msgpack/src/main/java/com/jarvis/cache/serializer/JacksonMsgpackSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return MAPPER.writeValueAsBytes(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson/src/main/java/com/jarvis/cache/serializer/JacksonJsonSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return MAPPER.writeValueAsBytes(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jdk/src/main/java/com/jarvis/cache/serializer/JdkSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return new byte[0];\n//   }\n//   ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n//   ObjectOutputStream output=new ObjectOutputStream(outputStream);\n//   output.writeObject(obj);\n//   output.flush();\n//   return outputStream.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/KryoSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return kryoContext.serialize(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/DefaultKryoContext.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj){\n//   return serialize(obj,DEFAULT_BUFFER_SIZE);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/DefaultKryoContext.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj,int bufferSize){\n//   Kryo kryo=pool.borrow();\n//   try (Output output=new Output(new ByteArrayOutputStream(),bufferSize)){\n//     kryo.writeClassAndObject(output,obj);\n//     return output.toBytes();\n//   }\n//   finally {\n//     pool.release(kryo);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/KryoContext.java\n// --------------------------------------------------\n// /** \n//  * \u5e8f\u5217\u5316\n//  * @param obj \u5bf9\u8c61\n//  * @return byte[]\n//  */\n// byte[] serialize(Object obj);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/KryoContext.java\n// --------------------------------------------------\n// /** \n//  * \u5e8f\u5217\u5316\n//  * @param obj        \u5bf9\u8c61\n//  * @param bufferSize \u7f13\u51b2\u5927\u5c0f\n//  * @return byte[]\n//  */\n// byte[] serialize(Object obj,int bufferSize);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/ProtoBufSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(CacheWrapper<Object> obj) throws Exception {\n//   WriteByteBuf byteBuf=new WriteByteBuf();\n//   byteBuf.writeInt(obj.getExpire());\n//   byteBuf.writeLong(obj.getLastLoadTime());\n//   Object cacheObj=obj.getCacheObject();\n//   if (cacheObj != null) {\n//     if (cacheObj instanceof Message) {\n//       byteBuf.writeBytes(((Message)cacheObj).toByteArray());\n//     }\n//  else {\n//       MAPPER.writeValue(byteBuf,cacheObj);\n//     }\n//   }\n//   return byteBuf.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/FSTSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   byte barray[]=conf.asByteArray(obj);\n//   return barray;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CompressorSerializer implements ISerializer<Object> {\n\n    private static final int DEFAULT_COMPRESSION_THRESHOLD = 16384;\n\n    private int compressionThreshold = DEFAULT_COMPRESSION_THRESHOLD;\n\n    private final ISerializer<Object> serializer;\n\n    private final ICompressor compressor;\n\n    public CompressorSerializer(ISerializer<Object> serializer) {\n        this.serializer = serializer;\n        this.compressor = new CommonsCompressor(CompressorStreamFactory.GZIP);\n    }\n\n    public CompressorSerializer(ISerializer<Object> serializer, int compressionThreshold) {\n        this.serializer = serializer;\n        this.compressionThreshold = compressionThreshold;\n        this.compressor = new CommonsCompressor(CompressorStreamFactory.GZIP);\n    }\n\n    public CompressorSerializer(ISerializer<Object> serializer, int compressionThreshold, String compressType) {\n        this.serializer = serializer;\n        this.compressionThreshold = compressionThreshold;\n        this.compressor = new CommonsCompressor(compressType);\n    }\n\n    public CompressorSerializer(ISerializer<Object> serializer, int compressionThreshold, ICompressor compressor) {\n        this.serializer = serializer;\n        this.compressionThreshold = compressionThreshold;\n        this.compressor = compressor;\n    }\n\n    @Override\n    public byte[] serialize(final Object obj) throws Exception {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public Object deserialize(final byte[] bytes, final Type returnType) throws Exception {\n        if (null == bytes || bytes.length == 0) {\n            return null;\n        }\n        byte flag = bytes[0];\n        byte[] data;\n        if (flag == 0) {\n            data = new byte[bytes.length - 1];\n            System.arraycopy(bytes, 1, data, 0, data.length);\n        } else {\n            data = compressor.decompress(new ByteArrayInputStream(bytes, 1, bytes.length - 1));\n        }\n        return serializer.deserialize(data, returnType);\n    }\n\n    @Override\n    public Object deepClone(Object obj, final Type type) throws Exception {\n        return serializer.deepClone(obj, type);\n    }\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {\n        return serializer.deepCloneMethodArgs(method, args);\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/22", "ground_truth": "\n        if (null == obj) {\n            return null;\n        }\n        byte[] data = serializer.serialize(obj);\n        byte flag = 0;\n        if (data.length > compressionThreshold) {\n            data = compressor.compress(new ByteArrayInputStream(data));\n            flag = 1;\n        }\n        byte[] out = new byte[data.length + 1];\n        out[0] = flag;\n        System.arraycopy(data, 0, out, 1, data.length);\n        return out;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-api", "src", "main", "java", "com", "jarvis", "cache", "serializer", "CompressorSerializer.java"], "context_start_lineno": 0, "function_name": "serialize", "left_context": "class CompressorSerializer implements ISerializer<Object> {\n\n    private static final int DEFAULT_COMPRESSION_THRESHOLD = 16384;\n\n    private int compressionThreshold = DEFAULT_COMPRESSION_THRESHOLD;\n\n    private final ISerializer<Object> serializer;\n\n    private final ICompressor compressor;\n\n    public CompressorSerializer(ISerializer<Object> serializer) {\n        this.serializer = serializer;\n        this.compressor = new CommonsCompressor(CompressorStreamFactory.GZIP);\n    }\n\n    public CompressorSerializer(ISerializer<Object> serializer, int compressionThreshold) {\n        this.serializer = serializer;\n        this.compressionThreshold = compressionThreshold;\n        this.compressor = new CommonsCompressor(CompressorStreamFactory.GZIP);\n    }\n\n    public CompressorSerializer(ISerializer<Object> serializer, int compressionThreshold, String compressType) {\n        this.serializer = serializer;\n        this.compressionThreshold = compressionThreshold;\n        this.compressor = new CommonsCompressor(compressType);\n    }\n\n    public CompressorSerializer(ISerializer<Object> serializer, int compressionThreshold, ICompressor compressor) {\n        this.serializer = serializer;\n        this.compressionThreshold = compressionThreshold;\n        this.compressor = compressor;\n    }\n\n    @Override\n    public byte[] serialize(final Object obj) throws Exception {", "right_context": "}\n\n    @Override\n    public Object deserialize(final byte[] bytes, final Type returnType) throws Exception {\n        if (null == bytes || bytes.length == 0) {\n            return null;\n        }\n        byte flag = bytes[0];\n        byte[] data;\n        if (flag == 0) {\n            data = new byte[bytes.length - 1];\n            System.arraycopy(bytes, 1, data, 0, data.length);\n        } else {\n            data = compressor.decompress(new ByteArrayInputStream(bytes, 1, bytes.length - 1));\n        }\n        return serializer.deserialize(data, returnType);\n    }\n\n    @Override\n    public Object deepClone(Object obj, final Type type) throws Exception {\n        return serializer.deepClone(obj, type);\n    }\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {\n        return serializer.deepCloneMethodArgs(method, args);\n    }\n}", "class_name": "CompressorSerializer", "return_type": "byte[]", "parameters": [{"type": "Object", "name": "obj"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ShardedJedisLock extends AbstractRedisLock {\n\n    private ShardedJedisPool shardedJedisPool;\n\n    public ShardedJedisLock(ShardedJedisPool shardedJedisPool) {\n        this.shardedJedisPool = shardedJedisPool;\n    }\n\n    private void returnResource(ShardedJedis shardedJedis) {\n        shardedJedis.close();\n    }\n\n    @Override\n    protected boolean setnx(String key, String val, int expire) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    protected void del(String key) {\n        ShardedJedis shardedJedis = null;\n        try {\n            shardedJedis = shardedJedisPool.getResource();\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.del(key);\n        } finally {\n            returnResource(shardedJedis);\n        }\n    }\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/61", "ground_truth": "\n        ShardedJedis shardedJedis = null;\n        try {\n            shardedJedis = shardedJedisPool.getResource();\n            Jedis jedis = shardedJedis.getShard(key);\n            return OK.equalsIgnoreCase(jedis.set(key, val, SetParams.setParams().nx().ex(expire)));\n        } finally {\n            returnResource(shardedJedis);\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-lock", "autoload-cache-lock-jedis", "src", "main", "java", "com", "jarvis", "cache", "lock", "ShardedJedisLock.java"], "context_start_lineno": 0, "function_name": "setnx", "left_context": "class ShardedJedisLock extends AbstractRedisLock {\n\n    private ShardedJedisPool shardedJedisPool;\n\n    public ShardedJedisLock(ShardedJedisPool shardedJedisPool) {\n        this.shardedJedisPool = shardedJedisPool;\n    }\n\n    private void returnResource(ShardedJedis shardedJedis) {\n        shardedJedis.close();\n    }\n\n    @Override\n    protected boolean setnx(String key, String val, int expire) {", "right_context": "}\n\n    @Override\n    protected void del(String key) {\n        ShardedJedis shardedJedis = null;\n        try {\n            shardedJedis = shardedJedisPool.getResource();\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.del(key);\n        } finally {\n            returnResource(shardedJedis);\n        }\n    }\n\n}", "class_name": "ShardedJedisLock", "return_type": "boolean", "parameters": [{"type": "String", "name": "key"}, {"type": "String", "name": "val"}, {"type": "int", "name": "expire"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JedisClusterPipeline extends PipelineBase implements Closeable {\n\n    private final JedisClusterInfoCache clusterInfoCache;\n\n    /**\n     * \u6839\u636e\u987a\u5e8f\u5b58\u50a8\u6bcf\u4e2a\u547d\u4ee4\u5bf9\u5e94\u7684Client\n     */\n    private final Queue<Client> clients;\n    /**\n     * \u7528\u4e8e\u7f13\u5b58\u8fde\u63a5\n     */\n    private final Map<JedisPool, Jedis> jedisMap;\n\n    public JedisClusterPipeline(JedisClusterInfoCache clusterInfoCache) {\n        this.clusterInfoCache = clusterInfoCache;\n        this.clients = new LinkedList<>();\n        this.jedisMap = new HashMap<>(3);\n    }\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e. \u4e0esyncAndReturnAll()\u76f8\u6bd4\uff0csync()\u53ea\u662f\u6ca1\u6709\u5bf9\u6570\u636e\u505a\u53cd\u5e8f\u5217\u5316\n     */\n    protected void sync() {\n        innerSync(null);\n    }\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e \u5e76\u6309\u547d\u4ee4\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\n     *\n     * @return \u6309\u7167\u547d\u4ee4\u7684\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u7684\u6570\u636e\n     */\n    protected List<Object> syncAndReturnAll() {\n        List<Object> responseList = new ArrayList<>(clients.size());\n        innerSync(responseList);\n        return responseList;\n    }\n\n    private void innerSync(List<Object> formatted) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void close() {\n        clean();\n        clients.clear();\n        for (Jedis jedis : jedisMap.values()) {\n            flushCachedData(jedis);\n            jedis.close();\n        }\n        jedisMap.clear();\n    }\n\n    private void flushCachedData(Jedis jedis) {\n        try {\n            //FIXME \u8fd9\u4e2acount\u600e\u4e48\u53d6\u503c? \u6267\u884c\u547d\u4ee4\u7684\u4e2a\u6570??\n            jedis.getClient().getMany(jedisMap.size());\n            //jedis.getClient().getAll();\n        } catch (RuntimeException ex) {\n            // \u5176\u4e2d\u4e00\u4e2aclient\u51fa\u95ee\u9898\uff0c\u540e\u9762\u51fa\u95ee\u9898\u7684\u51e0\u7387\u8f83\u5927\n        }\n    }\n\n    @Override\n    protected Client getClient(String key) {\n        byte[] bKey = SafeEncoder.encode(key);\n        return getClient(bKey);\n    }\n\n    @Override\n    protected Client getClient(byte[] key) {\n        Client client = getClient(JedisClusterCRC16.getSlot(key));\n        clients.add(client);\n        return client;\n    }\n\n    private Client getClient(int slot) {\n        JedisPool pool = clusterInfoCache.getSlotPool(slot);\n        // \u6839\u636epool\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6Jedis\n        Jedis jedis = jedisMap.get(pool);\n        if (null == jedis) {\n            jedis = pool.getResource();\n            jedisMap.put(pool, jedis);\n        }\n        return jedis.getClient();\n    }\n    \n    public JedisClusterInfoCache getClusterInfoCache() {\n        return clusterInfoCache;\n    }\n\n    public Queue<Client> getClients() {\n        return clients;\n    }\n\n    public Map<JedisPool, Jedis> getJedisMap() {\n        return jedisMap;\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/75", "ground_truth": "\n        try {\n            Response<?> response;\n            Object data;\n            for (Client client : clients) {\n                response = generateResponse(client.getOne());\n                if (null != formatted) {\n                    data = response.get();\n                    formatted.add(data);\n                }\n            }\n        } catch (JedisRedirectionException jre) {\n            throw jre;\n        } finally {\n            close();\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-manager", "autoload-cache-manager-jedis", "src", "main", "java", "com", "jarvis", "cache", "redis", "JedisClusterPipeline.java"], "context_start_lineno": 0, "function_name": "innerSync", "left_context": "class JedisClusterPipeline extends PipelineBase implements Closeable {\n\n    private final JedisClusterInfoCache clusterInfoCache;\n\n    /**\n     * \u6839\u636e\u987a\u5e8f\u5b58\u50a8\u6bcf\u4e2a\u547d\u4ee4\u5bf9\u5e94\u7684Client\n     */\n    private final Queue<Client> clients;\n    /**\n     * \u7528\u4e8e\u7f13\u5b58\u8fde\u63a5\n     */\n    private final Map<JedisPool, Jedis> jedisMap;\n\n    public JedisClusterPipeline(JedisClusterInfoCache clusterInfoCache) {\n        this.clusterInfoCache = clusterInfoCache;\n        this.clients = new LinkedList<>();\n        this.jedisMap = new HashMap<>(3);\n    }\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e. \u4e0esyncAndReturnAll()\u76f8\u6bd4\uff0csync()\u53ea\u662f\u6ca1\u6709\u5bf9\u6570\u636e\u505a\u53cd\u5e8f\u5217\u5316\n     */\n    protected void sync() {\n        innerSync(null);\n    }\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e \u5e76\u6309\u547d\u4ee4\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\n     *\n     * @return \u6309\u7167\u547d\u4ee4\u7684\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u7684\u6570\u636e\n     */\n    protected List<Object> syncAndReturnAll() {\n        List<Object> responseList = new ArrayList<>(clients.size());\n        innerSync(responseList);\n        return responseList;\n    }\n\n    private void innerSync(List<Object> formatted) {", "right_context": "}\n\n    @Override\n    public void close() {\n        clean();\n        clients.clear();\n        for (Jedis jedis : jedisMap.values()) {\n            flushCachedData(jedis);\n            jedis.close();\n        }\n        jedisMap.clear();\n    }\n\n    private void flushCachedData(Jedis jedis) {\n        try {\n            //FIXME \u8fd9\u4e2acount\u600e\u4e48\u53d6\u503c? \u6267\u884c\u547d\u4ee4\u7684\u4e2a\u6570??\n            jedis.getClient().getMany(jedisMap.size());\n            //jedis.getClient().getAll();\n        } catch (RuntimeException ex) {\n            // \u5176\u4e2d\u4e00\u4e2aclient\u51fa\u95ee\u9898\uff0c\u540e\u9762\u51fa\u95ee\u9898\u7684\u51e0\u7387\u8f83\u5927\n        }\n    }\n\n    @Override\n    protected Client getClient(String key) {\n        byte[] bKey = SafeEncoder.encode(key);\n        return getClient(bKey);\n    }\n\n    @Override\n    protected Client getClient(byte[] key) {\n        Client client = getClient(JedisClusterCRC16.getSlot(key));\n        clients.add(client);\n        return client;\n    }\n\n    private Client getClient(int slot) {\n        JedisPool pool = clusterInfoCache.getSlotPool(slot);\n        // \u6839\u636epool\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6Jedis\n        Jedis jedis = jedisMap.get(pool);\n        if (null == jedis) {\n            jedis = pool.getResource();\n            jedisMap.put(pool, jedis);\n        }\n        return jedis.getClient();\n    }\n    \n    public JedisClusterInfoCache getClusterInfoCache() {\n        return clusterInfoCache;\n    }\n\n    public Queue<Client> getClients() {\n        return clients;\n    }\n\n    public Map<JedisPool, Jedis> getJedisMap() {\n        return jedisMap;\n    }\n}", "class_name": "JedisClusterPipeline", "return_type": "void", "parameters": [{"type": "List<Object>", "name": "formatted"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JavaScriptParser extends AbstractScriptParser {\n\n    private final ScriptEngineManager manager = new ScriptEngineManager();\n\n    private final ConcurrentHashMap<String, CompiledScript> expCache = new ConcurrentHashMap<String, CompiledScript>();\n\n    private final StringBuffer funcs = new StringBuffer();\n\n    private static int versionCode;\n\n    private final ScriptEngine engine;\n\n    public JavaScriptParser() {\n        engine = manager.getEngineByName(\"javascript\");\n        try {\n            addFunction(HASH, CacheUtil.class.getDeclaredMethod(\"getUniqueHashStr\", new Class[]{Object.class}));\n            addFunction(EMPTY, CacheUtil.class.getDeclaredMethod(\"isEmpty\", new Class[]{Object.class}));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void addFunction(String name, Method method) {<FILL_FUNCTION_BODY>}\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T getElValue(String exp, Object target, Object[] arguments, Object retVal, boolean hasRetVal,\n                            Class<T> valueType) throws Exception {\n        Bindings bindings = new SimpleBindings();\n        bindings.put(TARGET, target);\n        bindings.put(ARGS, arguments);\n        if (hasRetVal) {\n            bindings.put(RET_VAL, retVal);\n        }\n        CompiledScript script = expCache.get(exp);\n        if (null != script) {\n            return (T) script.eval(bindings);\n        }\n        if (engine instanceof Compilable) {\n            Compilable compEngine = (Compilable) engine;\n            script = compEngine.compile(funcs + exp);\n            expCache.put(exp, script);\n            return (T) script.eval(bindings);\n        } else {\n            return (T) engine.eval(funcs + exp, bindings);\n        }\n    }\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/133", "ground_truth": "\n        try {\n            String clsName = method.getDeclaringClass().getName();\n            String methodName = method.getName();\n            funcs.append(\"function \" + name + \"(obj){return \" + clsName + \".\" + methodName + \"(obj);}\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-script", "autoload-cache-script-js", "src", "main", "java", "com", "jarvis", "cache", "script", "JavaScriptParser.java"], "context_start_lineno": 0, "function_name": "addFunction", "left_context": "class JavaScriptParser extends AbstractScriptParser {\n\n    private final ScriptEngineManager manager = new ScriptEngineManager();\n\n    private final ConcurrentHashMap<String, CompiledScript> expCache = new ConcurrentHashMap<String, CompiledScript>();\n\n    private final StringBuffer funcs = new StringBuffer();\n\n    private static int versionCode;\n\n    private final ScriptEngine engine;\n\n    public JavaScriptParser() {\n        engine = manager.getEngineByName(\"javascript\");\n        try {\n            addFunction(HASH, CacheUtil.class.getDeclaredMethod(\"getUniqueHashStr\", new Class[]{Object.class}));\n            addFunction(EMPTY, CacheUtil.class.getDeclaredMethod(\"isEmpty\", new Class[]{Object.class}));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void addFunction(String name, Method method) {", "right_context": "}\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T getElValue(String exp, Object target, Object[] arguments, Object retVal, boolean hasRetVal,\n                            Class<T> valueType) throws Exception {\n        Bindings bindings = new SimpleBindings();\n        bindings.put(TARGET, target);\n        bindings.put(ARGS, arguments);\n        if (hasRetVal) {\n            bindings.put(RET_VAL, retVal);\n        }\n        CompiledScript script = expCache.get(exp);\n        if (null != script) {\n            return (T) script.eval(bindings);\n        }\n        if (engine instanceof Compilable) {\n            Compilable compEngine = (Compilable) engine;\n            script = compEngine.compile(funcs + exp);\n            expCache.put(exp, script);\n            return (T) script.eval(bindings);\n        } else {\n            return (T) engine.eval(funcs + exp, bindings);\n        }\n    }\n\n}", "class_name": "JavaScriptParser", "return_type": "void", "parameters": [{"type": "String", "name": "name"}, {"type": "Method", "name": "method"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-core/src/main/java/com/jarvis/cache/MagicHandler.java\n// --------------------------------------------------\n// /** \n//  * \u8fc7\u6ee4\u5df2\u7ecf\u547d\u4e2d\u7f13\u5b58\u7684\u53c2\u6570\uff0c\u5c06\u5269\u4f59\u53c2\u6570\u8fdb\u884c\u91cd\u65b0\u7ec4\u88c5\n//  * @param keyArgMap\n//  * @param cacheValues\n//  * @param argSize\n//  * @return\n//  * @throws Exception\n//  */\n// private Object[] getUnmatchArg(Map<CacheKeyTO,Object> keyArgMap,Map<CacheKeyTO,CacheWrapper<Object>> cacheValues,int argSize) throws Exception {\n//   Iterator<Map.Entry<CacheKeyTO,Object>> keyArgMapIt=keyArgMap.entrySet().iterator();\n//   Object unmatchArg;\n//   if (null != iterableCollectionArg) {\n//     Collection<Object> argList=newCollection(iterableCollectionArg.getClass(),argSize);\n//     while (keyArgMapIt.hasNext()) {\n//       Map.Entry<CacheKeyTO,Object> item=keyArgMapIt.next();\n//       if (!cacheValues.containsKey(item.getKey())) {\n//         argList.add(item.getValue());\n//       }\n//     }\n//     unmatchArg=argList;\n//   }\n//  else {\n//     Object arg=iterableArrayArg[0];\n//     Object[] args=(Object[])Array.newInstance(arg.getClass(),argSize);\n//     int i=0;\n//     while (keyArgMapIt.hasNext()) {\n//       Map.Entry<CacheKeyTO,Object> item=keyArgMapIt.next();\n//       if (!cacheValues.containsKey(item.getKey())) {\n//         args[i]=item.getValue();\n//         i++;\n//       }\n//     }\n//     unmatchArg=args;\n//   }\n//   Object[] args=new Object[arguments.length];\n//   for (int i=0; i < arguments.length; i++) {\n//     if (i == iterableArgIndex) {\n//       args[i]=unmatchArg;\n//     }\n//  else {\n//       args[i]=arguments[i];\n//     }\n//   }\n//   return args;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-aop/autoload-cache-aop-aspectj/src/main/java/com/jarvis/cache/aop/aspectj/AspectjCacheAopProxyChain.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return jp.getArgs();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-aop/autoload-cache-aop-aspectj/src/main/java/com/jarvis/cache/aop/aspectj/AspectjDeleteCacheAopProxyChain.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return jp.getArgs();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-common/src/main/java/com/jarvis/cache/aop/CacheAopProxyChain.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u53c2\u6570\n//  * @return \u53c2\u6570\n//  */\n// Object[] getArgs();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-common/src/main/java/com/jarvis/cache/aop/DeleteCacheAopProxyChain.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u53c2\u6570\n//  * @return \u53c2\u6570\n//  */\n// Object[] getArgs();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-common/src/main/java/com/jarvis/cache/to/AutoLoadTO.java\n// --------------------------------------------------\n// public Object[] getArgs(){\n//   return args;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/admin/AutoloadCacheController.java\n// --------------------------------------------------\n// @GetMapping(\"/args\") public Object[] showArgs(String key,String hfield){\n//   CacheKeyTO cacheKeyTO=new CacheKeyTO(autoloadCacheHandler.getAutoLoadConfig().getNamespace(),key,hfield);\n//   AutoLoadTO tmpTO=autoloadCacheHandler.getAutoLoadHandler().getAutoLoadTO(cacheKeyTO);\n//   if (null != tmpTO && null != tmpTO.getArgs()) {\n//     return tmpTO.getArgs();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/interceptor/aopproxy/CacheAopProxy.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return invocation.getArguments();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/interceptor/aopproxy/DeleteCacheAopProxy.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return invocation.getArguments();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/clone/Cloning.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/clone/ICloner.java\n// --------------------------------------------------\n// /** \n//  * \u6df1\u5ea6\u590d\u5236 Method \u4e2d\u7684\u53c2\u6570\n//  * @param method Method\n//  * @param args   \u53c2\u6570\n//  * @return \u53c2\u6570\n//  * @throws Exception \u5f02\u5e38\n//  */\n// Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/CompressorSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   return serializer.deepCloneMethodArgs(method,args);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/StringSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args){\n//   return (Object[])deepClone(args,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-hessian/src/main/java/com/jarvis/cache/serializer/HessianSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson-msgpack/src/main/java/com/jarvis/cache/serializer/JacksonMsgpackSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Class<?> clazz=args.getClass();\n//   Object[] res=((Object)clazz == (Object)Object[].class) ? (Object[])new Object[args.length] : (Object[])Array.newInstance(clazz.getComponentType(),args.length);\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     Type genericParameterType=genericParameterTypes[i];\n//     Object obj=args[i];\n//     if (genericParameterType instanceof ParameterizedType) {\n//       byte[] tmp=MAPPER.writeValueAsBytes(obj);\n//       JavaType javaType=MAPPER.getTypeFactory().constructType(genericParameterType);\n//       res[i]=MAPPER.readValue(tmp,javaType);\n//     }\n//  else {\n//       res[i]=deepClone(obj,null);\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson/src/main/java/com/jarvis/cache/serializer/JacksonJsonSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Class<?> clazz=args.getClass();\n//   Object[] res=((Object)clazz == (Object)Object[].class) ? (Object[])new Object[args.length] : (Object[])Array.newInstance(clazz.getComponentType(),args.length);\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     Type genericParameterType=genericParameterTypes[i];\n//     Object obj=args[i];\n//     if (genericParameterType instanceof ParameterizedType) {\n//       String json=MAPPER.writeValueAsString(obj);\n//       JavaType javaType=MAPPER.getTypeFactory().constructType(genericParameterType);\n//       res[i]=MAPPER.readValue(json,javaType);\n//     }\n//  else {\n//       res[i]=deepClone(obj,null);\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jdk/src/main/java/com/jarvis/cache/serializer/JdkSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/KryoSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/ProtoBufSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FastjsonSerializer implements ISerializer<Object> {\n\n    private final Charset charset;\n\n    private static final SerializerFeature[] FEATURES = {SerializerFeature.DisableCircularReferenceDetect};\n\n    private static final Map<Type, ParameterizedTypeImpl> TYPE_CACHE = new ConcurrentHashMap<>(1024);\n\n    public FastjsonSerializer() {\n        this(StandardCharsets.UTF_8);\n    }\n\n    public FastjsonSerializer(Charset charset) {\n        this.charset = charset;\n    }\n\n    @Override\n    public byte[] serialize(final Object obj) throws Exception {\n        if (obj == null) {\n            return null;\n        }\n        String json = JSON.toJSONString(obj, FEATURES);\n        return json.getBytes(charset);\n    }\n\n    @Override\n    public Object deserialize(final byte[] bytes, final Type returnType) throws Exception {\n        if (null == bytes || bytes.length == 0) {\n            return null;\n        }\n        ParameterizedTypeImpl type = TYPE_CACHE.get(returnType);\n        if (null == type) {\n            Type[] agsType = new Type[]{returnType};\n            type = ParameterizedTypeImpl.make(CacheWrapper.class, agsType, null);\n            TYPE_CACHE.put(returnType, type);\n        }\n        String json = new String(bytes, charset);\n        return JSON.parseObject(json, type);\n    }\n\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override\n    public Object deepClone(Object obj, final Type type) throws Exception {\n        if (null == obj) {\n            return null;\n        }\n        Class<?> clazz = obj.getClass();\n        if (BeanUtil.isPrimitive(obj) || clazz.isEnum() || obj instanceof Class || clazz.isAnnotation()\n                || clazz.isSynthetic()) {// \u5e38\u89c1\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\n            return obj;\n        }\n        if (obj instanceof Date) {\n            return ((Date) obj).clone();\n        } else if (obj instanceof Calendar) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTimeInMillis(((Calendar) obj).getTime().getTime());\n            return cal;\n        }\n        // List/Map\u5728\u7f16\u8bd1\u65f6\u7c7b\u578b\u4f1a\u88ab\u64e6\u9664\uff0c\u5bfc\u81f4List<Object>\u53cd\u5e8f\u5217\u5316\u540e\u53d8\u4e3aList<JSONObject>\n        if (null != type && !(obj instanceof Collection) && !(obj instanceof Map)) {\n            String json = JSON.toJSONString(obj, FEATURES);\n            return JSON.parseObject(json, type);\n        }\n\n        if (clazz.isArray()) {\n            Object[] arr = (Object[]) obj;\n\n            Object[] res = ((Object) clazz == (Object) Object[].class) ? (Object[]) new Object[arr.length]\n                    : (Object[]) Array.newInstance(clazz.getComponentType(), arr.length);\n            for (int i = 0; i < arr.length; i++) {\n                res[i] = deepClone(arr[i], null);\n            }\n            return res;\n        } else if (obj instanceof Collection) {\n            Collection<?> tempCol = (Collection<?>) obj;\n            Collection res = tempCol.getClass().newInstance();\n\n            Iterator<?> it = tempCol.iterator();\n            while (it.hasNext()) {\n                Object val = deepClone(it.next(), null);\n                res.add(val);\n            }\n            return res;\n        } else if (obj instanceof Map) {\n            Map tempMap = (Map) obj;\n            Map res = tempMap.getClass().newInstance();\n            Iterator it = tempMap.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry entry = (Entry) it.next();\n                Object key = entry.getKey();\n                Object val = entry.getValue();\n                res.put(deepClone(key, null), deepClone(val, null));\n            }\n            return res;\n        } else if (obj instanceof CacheWrapper) {\n            CacheWrapper<Object> wrapper = (CacheWrapper<Object>) obj;\n            CacheWrapper<Object> res = new CacheWrapper<Object>();\n            res.setExpire(wrapper.getExpire());\n            res.setLastLoadTime(wrapper.getLastLoadTime());\n            res.setCacheObject(deepClone(wrapper.getCacheObject(), null));\n            return res;\n        } else {\n            String json = JSON.toJSONString(obj, FEATURES);\n            return JSON.parseObject(json, clazz);\n        }\n    }\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/155", "ground_truth": "\n        if (null == args || args.length == 0) {\n            return args;\n        }\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n        if (args.length != genericParameterTypes.length) {\n            throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\" + method.getName()\n                    + \" must \" + genericParameterTypes.length);\n        }\n        Class<?> clazz = args.getClass();\n        Object[] res = ((Object) clazz == (Object) Object[].class) ? (Object[]) new Object[args.length]\n                : (Object[]) Array.newInstance(clazz.getComponentType(), args.length);\n        int len = genericParameterTypes.length;\n        for (int i = 0; i < len; i++) {\n            Type genericParameterType = genericParameterTypes[i];\n            Object obj = args[i];\n            if (genericParameterType instanceof ParameterizedType) {\n                String json = JSON.toJSONString(obj, FEATURES);\n                res[i] = JSON.parseObject(json, genericParameterType);\n            } else {\n                res[i] = deepClone(obj, null);\n            }\n        }\n        return res;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-fastjson", "src", "main", "java", "com", "jarvis", "cache", "serializer", "FastjsonSerializer.java"], "context_start_lineno": 0, "function_name": "deepCloneMethodArgs", "left_context": "class FastjsonSerializer implements ISerializer<Object> {\n\n    private final Charset charset;\n\n    private static final SerializerFeature[] FEATURES = {SerializerFeature.DisableCircularReferenceDetect};\n\n    private static final Map<Type, ParameterizedTypeImpl> TYPE_CACHE = new ConcurrentHashMap<>(1024);\n\n    public FastjsonSerializer() {\n        this(StandardCharsets.UTF_8);\n    }\n\n    public FastjsonSerializer(Charset charset) {\n        this.charset = charset;\n    }\n\n    @Override\n    public byte[] serialize(final Object obj) throws Exception {\n        if (obj == null) {\n            return null;\n        }\n        String json = JSON.toJSONString(obj, FEATURES);\n        return json.getBytes(charset);\n    }\n\n    @Override\n    public Object deserialize(final byte[] bytes, final Type returnType) throws Exception {\n        if (null == bytes || bytes.length == 0) {\n            return null;\n        }\n        ParameterizedTypeImpl type = TYPE_CACHE.get(returnType);\n        if (null == type) {\n            Type[] agsType = new Type[]{returnType};\n            type = ParameterizedTypeImpl.make(CacheWrapper.class, agsType, null);\n            TYPE_CACHE.put(returnType, type);\n        }\n        String json = new String(bytes, charset);\n        return JSON.parseObject(json, type);\n    }\n\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override\n    public Object deepClone(Object obj, final Type type) throws Exception {\n        if (null == obj) {\n            return null;\n        }\n        Class<?> clazz = obj.getClass();\n        if (BeanUtil.isPrimitive(obj) || clazz.isEnum() || obj instanceof Class || clazz.isAnnotation()\n                || clazz.isSynthetic()) {// \u5e38\u89c1\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\n            return obj;\n        }\n        if (obj instanceof Date) {\n            return ((Date) obj).clone();\n        } else if (obj instanceof Calendar) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTimeInMillis(((Calendar) obj).getTime().getTime());\n            return cal;\n        }\n        // List/Map\u5728\u7f16\u8bd1\u65f6\u7c7b\u578b\u4f1a\u88ab\u64e6\u9664\uff0c\u5bfc\u81f4List<Object>\u53cd\u5e8f\u5217\u5316\u540e\u53d8\u4e3aList<JSONObject>\n        if (null != type && !(obj instanceof Collection) && !(obj instanceof Map)) {\n            String json = JSON.toJSONString(obj, FEATURES);\n            return JSON.parseObject(json, type);\n        }\n\n        if (clazz.isArray()) {\n            Object[] arr = (Object[]) obj;\n\n            Object[] res = ((Object) clazz == (Object) Object[].class) ? (Object[]) new Object[arr.length]\n                    : (Object[]) Array.newInstance(clazz.getComponentType(), arr.length);\n            for (int i = 0; i < arr.length; i++) {\n                res[i] = deepClone(arr[i], null);\n            }\n            return res;\n        } else if (obj instanceof Collection) {\n            Collection<?> tempCol = (Collection<?>) obj;\n            Collection res = tempCol.getClass().newInstance();\n\n            Iterator<?> it = tempCol.iterator();\n            while (it.hasNext()) {\n                Object val = deepClone(it.next(), null);\n                res.add(val);\n            }\n            return res;\n        } else if (obj instanceof Map) {\n            Map tempMap = (Map) obj;\n            Map res = tempMap.getClass().newInstance();\n            Iterator it = tempMap.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry entry = (Entry) it.next();\n                Object key = entry.getKey();\n                Object val = entry.getValue();\n                res.put(deepClone(key, null), deepClone(val, null));\n            }\n            return res;\n        } else if (obj instanceof CacheWrapper) {\n            CacheWrapper<Object> wrapper = (CacheWrapper<Object>) obj;\n            CacheWrapper<Object> res = new CacheWrapper<Object>();\n            res.setExpire(wrapper.getExpire());\n            res.setLastLoadTime(wrapper.getLastLoadTime());\n            res.setCacheObject(deepClone(wrapper.getCacheObject(), null));\n            return res;\n        } else {\n            String json = JSON.toJSONString(obj, FEATURES);\n            return JSON.parseObject(json, clazz);\n        }\n    }\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {", "right_context": "}\n}", "class_name": "FastjsonSerializer", "return_type": "Object[]", "parameters": [{"type": "Method", "name": "method"}, {"type": "Object[]", "name": "args"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AutoLoadRequestTimesComparator implements Comparator<AutoLoadTO> {\n\n    @Override\n    public int compare(AutoLoadTO autoLoadTO1, AutoLoadTO autoLoadTO2) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/187", "ground_truth": "\n        if (autoLoadTO1 == null && autoLoadTO2 != null) {\n            return 1;\n        } else if (autoLoadTO1 != null && autoLoadTO2 == null) {\n            return -1;\n        } else if (autoLoadTO1 == null && autoLoadTO2 == null) {\n            return 0;\n        }\n        if (autoLoadTO1.getRequestTimes() > autoLoadTO2.getRequestTimes()) {\n            return -1;\n        } else if (autoLoadTO1.getRequestTimes() < autoLoadTO2.getRequestTimes()) {\n            return 1;\n        }\n        return 0;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-common", "src", "main", "java", "com", "jarvis", "cache", "comparator", "AutoLoadRequestTimesComparator.java"], "context_start_lineno": 0, "function_name": "compare", "left_context": "class AutoLoadRequestTimesComparator implements Comparator<AutoLoadTO> {\n\n    @Override\n    public int compare(AutoLoadTO autoLoadTO1, AutoLoadTO autoLoadTO2) {", "right_context": "}\n\n}", "class_name": "AutoLoadRequestTimesComparator", "return_type": "int", "parameters": [{"type": "AutoLoadTO", "name": "autoLoadTO1"}, {"type": "AutoLoadTO", "name": "autoLoadTO2"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WeakReferenceDeserializer extends AbstractMapDeserializer {\n\n    @Override\n    public Object readObject(AbstractHessianInput in, Object[] fields) throws IOException {<FILL_FUNCTION_BODY>}\n\n    protected WeakReference<Object> instantiate() throws Exception {\n        Object obj = new Object();\n        return new WeakReference<Object>(obj);\n    }\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/228", "ground_truth": "\n        try {\n            WeakReference<Object> obj = instantiate();\n            in.addRef(obj);\n            Object value = in.readObject();\n            obj = null;\n            return new WeakReference<Object>(value);\n        } catch (IOException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new IOExceptionWrapper(e);\n        }\n\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-hessian", "src", "main", "java", "com", "jarvis", "cache", "serializer", "hession", "WeakReferenceDeserializer.java"], "context_start_lineno": 0, "function_name": "readObject", "left_context": "class WeakReferenceDeserializer extends AbstractMapDeserializer {\n\n    @Override\n    public Object readObject(AbstractHessianInput in, Object[] fields) throws IOException {", "right_context": "}\n\n    protected WeakReference<Object> instantiate() throws Exception {\n        Object obj = new Object();\n        return new WeakReference<Object>(obj);\n    }\n\n}", "class_name": "WeakReferenceDeserializer", "return_type": "Object", "parameters": [{"type": "AbstractHessianInput", "name": "in"}, {"type": "Object[]", "name": "fields"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-manager/autoload-cache-manager-jedis/src/main/java/com/jarvis/cache/redis/JedisClusterPipeline.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e \u5e76\u6309\u547d\u4ee4\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\n//  * @return \u6309\u7167\u547d\u4ee4\u7684\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u7684\u6570\u636e\n//  */\n// protected List<Object> syncAndReturnAll(){\n//   List<Object> responseList=new ArrayList<>(clients.size());\n//   innerSync(responseList);\n//   return responseList;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RetryableJedisClusterPipeline {\n\n    /**\n     * \u90e8\u5206\u5b57\u6bb5\u6ca1\u6709\u5bf9\u5e94\u7684\u83b7\u53d6\u65b9\u6cd5\uff0c\u53ea\u80fd\u91c7\u7528\u53cd\u5c04\u6765\u505a\n     * \u4e5f\u53ef\u4ee5\u53bb\u7ee7\u627fJedisCluster\u548cJedisSlotBasedConnectionHandler\u6765\u63d0\u4f9b\u8bbf\u95ee\u63a5\u53e3\n     **/\n    private static final Field FIELD_CONNECTION_HANDLER;\n    private static final Field FIELD_CACHE;\n    private static final Logger log = LoggerFactory.getLogger(JedisUtil.class);\n\n    static {\n        FIELD_CONNECTION_HANDLER = getField(BinaryJedisCluster.class, \"connectionHandler\");\n        FIELD_CACHE = getField(JedisClusterConnectionHandler.class, \"cache\");\n    }\n\n    private final JedisSlotBasedConnectionHandler connectionHandler;\n\n    private final JedisClusterInfoCache clusterInfoCache;\n\n    private int maxAttempts = 1;\n\n    public RetryableJedisClusterPipeline(JedisCluster jedisCluster) {\n        connectionHandler = getValue(jedisCluster, FIELD_CONNECTION_HANDLER);\n        clusterInfoCache = getValue(connectionHandler, FIELD_CACHE);\n    }\n\n    public abstract void execute(JedisClusterPipeline pipeline) throws Exception;\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e. \u4e0esyncAndReturnAll()\u76f8\u6bd4\uff0csync()\u53ea\u662f\u6ca1\u6709\u5bf9\u6570\u636e\u505a\u53cd\u5e8f\u5217\u5316\n     * @throws Exception redis \u5f02\u5e38\n     */\n    public void sync() throws Exception {\n        try {\n            JedisClusterPipeline pipeline = new JedisClusterPipeline(clusterInfoCache);\n            execute(pipeline);\n            pipeline.sync();\n        } catch (JedisMovedDataException jre) {\n            // if MOVED redirection occurred, rebuilds cluster's slot cache,\n            // recommended by Redis cluster specification\n            connectionHandler.renewSlotCache();\n            if (maxAttempts > 0) {\n                maxAttempts--;\n                sync();\n                return;\n            }\n            throw jre;\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e \u5e76\u6309\u547d\u4ee4\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\n     *\n     * @return \u6309\u7167\u547d\u4ee4\u7684\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u7684\u6570\u636e\n     * @throws Exception redis \u5f02\u5e38\n     */\n    public List<Object> syncAndReturnAll() throws Exception {<FILL_FUNCTION_BODY>}\n\n    private static Field getField(Class<?> cls, String fieldName) {\n        try {\n            Field field = cls.getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field;\n        } catch (NoSuchFieldException | SecurityException e) {\n            throw new RuntimeException(\"cannot find or access field '\" + fieldName + \"' from \" + cls.getName(), e);\n        }\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    private static <T> T getValue(Object obj, Field field) {\n        try {\n            return (T) field.get(obj);\n        } catch (IllegalArgumentException | IllegalAccessException e) {\n            log.error(\"get value fail\", e);\n            throw new RuntimeException(e);\n        }\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/250", "ground_truth": "\n        try {\n            JedisClusterPipeline pipeline = new JedisClusterPipeline(clusterInfoCache);\n            execute(pipeline);\n            return pipeline.syncAndReturnAll();\n        } catch (JedisMovedDataException jre) {\n            // if MOVED redirection occurred, rebuilds cluster's slot cache,\n            // recommended by Redis cluster specification\n            connectionHandler.renewSlotCache();\n            if (maxAttempts > 0) {\n                maxAttempts--;\n                return syncAndReturnAll();\n            }\n            throw jre;\n        } catch (Exception ex) {\n            throw ex;\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-manager", "autoload-cache-manager-jedis", "src", "main", "java", "com", "jarvis", "cache", "redis", "RetryableJedisClusterPipeline.java"], "context_start_lineno": 0, "function_name": "syncAndReturnAll", "left_context": "class RetryableJedisClusterPipeline {\n\n    /**\n     * \u90e8\u5206\u5b57\u6bb5\u6ca1\u6709\u5bf9\u5e94\u7684\u83b7\u53d6\u65b9\u6cd5\uff0c\u53ea\u80fd\u91c7\u7528\u53cd\u5c04\u6765\u505a\n     * \u4e5f\u53ef\u4ee5\u53bb\u7ee7\u627fJedisCluster\u548cJedisSlotBasedConnectionHandler\u6765\u63d0\u4f9b\u8bbf\u95ee\u63a5\u53e3\n     **/\n    private static final Field FIELD_CONNECTION_HANDLER;\n    private static final Field FIELD_CACHE;\n    private static final Logger log = LoggerFactory.getLogger(JedisUtil.class);\n\n    static {\n        FIELD_CONNECTION_HANDLER = getField(BinaryJedisCluster.class, \"connectionHandler\");\n        FIELD_CACHE = getField(JedisClusterConnectionHandler.class, \"cache\");\n    }\n\n    private final JedisSlotBasedConnectionHandler connectionHandler;\n\n    private final JedisClusterInfoCache clusterInfoCache;\n\n    private int maxAttempts = 1;\n\n    public RetryableJedisClusterPipeline(JedisCluster jedisCluster) {\n        connectionHandler = getValue(jedisCluster, FIELD_CONNECTION_HANDLER);\n        clusterInfoCache = getValue(connectionHandler, FIELD_CACHE);\n    }\n\n    public abstract void execute(JedisClusterPipeline pipeline) throws Exception;\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e. \u4e0esyncAndReturnAll()\u76f8\u6bd4\uff0csync()\u53ea\u662f\u6ca1\u6709\u5bf9\u6570\u636e\u505a\u53cd\u5e8f\u5217\u5316\n     * @throws Exception redis \u5f02\u5e38\n     */\n    public void sync() throws Exception {\n        try {\n            JedisClusterPipeline pipeline = new JedisClusterPipeline(clusterInfoCache);\n            execute(pipeline);\n            pipeline.sync();\n        } catch (JedisMovedDataException jre) {\n            // if MOVED redirection occurred, rebuilds cluster's slot cache,\n            // recommended by Redis cluster specification\n            connectionHandler.renewSlotCache();\n            if (maxAttempts > 0) {\n                maxAttempts--;\n                sync();\n                return;\n            }\n            throw jre;\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n\n    /**\n     * \u540c\u6b65\u8bfb\u53d6\u6240\u6709\u6570\u636e \u5e76\u6309\u547d\u4ee4\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\n     *\n     * @return \u6309\u7167\u547d\u4ee4\u7684\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u7684\u6570\u636e\n     * @throws Exception redis \u5f02\u5e38\n     */\n    public List<Object> syncAndReturnAll() throws Exception {", "right_context": "}\n\n    private static Field getField(Class<?> cls, String fieldName) {\n        try {\n            Field field = cls.getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field;\n        } catch (NoSuchFieldException | SecurityException e) {\n            throw new RuntimeException(\"cannot find or access field '\" + fieldName + \"' from \" + cls.getName(), e);\n        }\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    private static <T> T getValue(Object obj, Field field) {\n        try {\n            return (T) field.get(obj);\n        } catch (IllegalArgumentException | IllegalAccessException e) {\n            log.error(\"get value fail\", e);\n            throw new RuntimeException(e);\n        }\n    }\n}", "class_name": "RetryableJedisClusterPipeline", "return_type": "List<Object>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/CompressorSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (null == obj) {\n//     return null;\n//   }\n//   byte[] data=serializer.serialize(obj);\n//   byte flag=0;\n//   if (data.length > compressionThreshold) {\n//     data=compressor.compress(new ByteArrayInputStream(data));\n//     flag=1;\n//   }\n//   byte[] out=new byte[data.length + 1];\n//   out[0]=flag;\n//   System.arraycopy(data,0,out,1,data.length);\n//   return out;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/ISerializer.java\n// --------------------------------------------------\n// /** \n//  * Serialize the given object to binary data.\n//  * @param obj object to serialize\n//  * @return the equivalent binary data\n//  * @throws Exception \u5f02\u5e38\n//  */\n// byte[] serialize(final T obj) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/StringSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(String string){\n//   return (string == null ? null : string.getBytes(charset));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-fastjson/src/main/java/com/jarvis/cache/serializer/FastjsonSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   String json=JSON.toJSONString(obj,FEATURES);\n//   return json.getBytes(charset);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-hessian/src/main/java/com/jarvis/cache/serializer/HessianSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n//   AbstractHessianOutput output=new Hessian2Output(outputStream);\n//   output.setSerializerFactory(SERIALIZER_FACTORY);\n//   output.writeObject(obj);\n//   output.flush();\n//   byte[] val=outputStream.toByteArray();\n//   output.close();\n//   return val;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson-msgpack/src/main/java/com/jarvis/cache/serializer/JacksonMsgpackSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return MAPPER.writeValueAsBytes(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson/src/main/java/com/jarvis/cache/serializer/JacksonJsonSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return MAPPER.writeValueAsBytes(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jdk/src/main/java/com/jarvis/cache/serializer/JdkSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return new byte[0];\n//   }\n//   ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n//   ObjectOutputStream output=new ObjectOutputStream(outputStream);\n//   output.writeObject(obj);\n//   output.flush();\n//   return outputStream.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/KryoSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return kryoContext.serialize(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/DefaultKryoContext.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj){\n//   return serialize(obj,DEFAULT_BUFFER_SIZE);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/DefaultKryoContext.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj,int bufferSize){\n//   Kryo kryo=pool.borrow();\n//   try (Output output=new Output(new ByteArrayOutputStream(),bufferSize)){\n//     kryo.writeClassAndObject(output,obj);\n//     return output.toBytes();\n//   }\n//   finally {\n//     pool.release(kryo);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/KryoContext.java\n// --------------------------------------------------\n// /** \n//  * \u5e8f\u5217\u5316\n//  * @param obj \u5bf9\u8c61\n//  * @return byte[]\n//  */\n// byte[] serialize(Object obj);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/KryoContext.java\n// --------------------------------------------------\n// /** \n//  * \u5e8f\u5217\u5316\n//  * @param obj        \u5bf9\u8c61\n//  * @param bufferSize \u7f13\u51b2\u5927\u5c0f\n//  * @return byte[]\n//  */\n// byte[] serialize(Object obj,int bufferSize);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/ProtoBufSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(CacheWrapper<Object> obj) throws Exception {\n//   WriteByteBuf byteBuf=new WriteByteBuf();\n//   byteBuf.writeInt(obj.getExpire());\n//   byteBuf.writeLong(obj.getLastLoadTime());\n//   Object cacheObj=obj.getCacheObject();\n//   if (cacheObj != null) {\n//     if (cacheObj instanceof Message) {\n//       byteBuf.writeBytes(((Message)cacheObj).toByteArray());\n//     }\n//  else {\n//       MAPPER.writeValue(byteBuf,cacheObj);\n//     }\n//   }\n//   return byteBuf.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/WriteByteBuf.java\n// --------------------------------------------------\n// public byte[] toByteArray(){\n//   byte[] newArray=new byte[count];\n//   System.arraycopy(buf,0,newArray,0,count);\n//   return newArray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/redis/SpringRedisCacheManager.java\n// --------------------------------------------------\n// @Override public byte[] get(byte[] key){\n//   return redisConnection.stringCommands().get(key);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/redis/SpringRedisCacheManager.java\n// --------------------------------------------------\n// @Override public byte[] hget(byte[] key,byte[] field){\n//   return redisConnection.hashCommands().hGet(key,field);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/FST.java\n// --------------------------------------------------\n// private static byte[] write(Object obj) throws Exception {\n//   byte barray[]=conf.asByteArray(obj);\n//   return barray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/FSTSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   byte barray[]=conf.asByteArray(obj);\n//   return barray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/KryoTest.java\n// --------------------------------------------------\n// private static byte[] write(Object obj) throws Exception {\n//   Output output=null;\n//   try {\n//     ByteArrayOutputStream baos=new ByteArrayOutputStream();\n//     output=new Output(baos);\n//     kryo.writeClassAndObject(output,obj);\n//     output.flush();\n//     return baos.toByteArray();\n//   }\n//   finally {\n//     if (output != null) {\n//       output.close();\n//     }\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ReadByteBuf {\n\n    private byte[] array;\n    private int readerIndex;\n\n    public ReadByteBuf(byte[] array) {\n        this.array = array;\n        this.readerIndex = 0;\n    }\n\n    public byte readByte() {\n        byte value = HeapByteBufUtil.getByte(array, readerIndex);\n        readerIndex += 1;\n        return value;\n    }\n\n    public int readInt() {\n        int value = HeapByteBufUtil.getInt(array, readerIndex);\n        readerIndex += 4;\n        return value;\n    }\n\n    public long readLong() {\n        long value = HeapByteBufUtil.getLong(array, readerIndex);\n        readerIndex += 8;\n        return value;\n    }\n\n    public byte[] readableBytes() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/264", "ground_truth": "\n        byte[] newArray = new byte[array.length - readerIndex];\n        System.arraycopy(array, readerIndex, newArray, 0, newArray.length);\n        return newArray;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-protobuf", "src", "main", "java", "com", "jarvis", "cache", "serializer", "protobuf", "ReadByteBuf.java"], "context_start_lineno": 0, "function_name": "readableBytes", "left_context": "class ReadByteBuf {\n\n    private byte[] array;\n    private int readerIndex;\n\n    public ReadByteBuf(byte[] array) {\n        this.array = array;\n        this.readerIndex = 0;\n    }\n\n    public byte readByte() {\n        byte value = HeapByteBufUtil.getByte(array, readerIndex);\n        readerIndex += 1;\n        return value;\n    }\n\n    public int readInt() {\n        int value = HeapByteBufUtil.getInt(array, readerIndex);\n        readerIndex += 4;\n        return value;\n    }\n\n    public long readLong() {\n        long value = HeapByteBufUtil.getLong(array, readerIndex);\n        readerIndex += 8;\n        return value;\n    }\n\n    public byte[] readableBytes() {", "right_context": "}\n\n}", "class_name": "ReadByteBuf", "return_type": "byte[]", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ShardedJedisClient implements IRedis {\n\n        private static final Logger LOGGER = LoggerFactory.getLogger(ShardedJedisClient.class);\n\n        private final ShardedJedis shardedJedis;\n\n        private final AbstractRedisCacheManager cacheManager;\n\n        public ShardedJedisClient(ShardedJedis shardedJedis, AbstractRedisCacheManager cacheManager) {\n            this.shardedJedis = shardedJedis;\n            this.cacheManager = cacheManager;\n        }\n\n        @Override\n        public void close() throws IOException {\n            if (null != shardedJedis) {\n                shardedJedis.close();\n            }\n        }\n\n        @Override\n        public void set(byte[] key, byte[] value) {\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.set(key, value);\n        }\n\n        @Override\n        public void setex(byte[] key, int seconds, byte[] value) {\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.setex(key, seconds, value);\n        }\n\n        @Override\n        public void hset(byte[] key, byte[] field, byte[] value) {\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.hset(key, field, value);\n        }\n\n        @Override\n        public void hset(byte[] key, byte[] field, byte[] value, int seconds) {\n            Jedis jedis = shardedJedis.getShard(key);\n            Pipeline pipeline = jedis.pipelined();\n            pipeline.hset(key, field, value);\n            pipeline.expire(key, seconds);\n            pipeline.sync();\n        }\n\n        @Override\n        public void mset(Collection<MSetParam> params) {\n            ShardedJedisPipeline pipeline = new ShardedJedisPipeline();\n            pipeline.setShardedJedis(shardedJedis);\n            try {\n                JedisUtil.executeMSet(pipeline, this.cacheManager, params);\n            } catch (Exception ex) {\n                LOGGER.error(ex.getMessage(), ex);\n            }\n            pipeline.sync();\n        }\n\n        @Override\n        public byte[] get(byte[] key) {\n            Jedis jedis = shardedJedis.getShard(key);\n            return jedis.get(key);\n        }\n\n        @Override\n        public byte[] hget(byte[] key, byte[] field) {\n            Jedis jedis = shardedJedis.getShard(key);\n            return jedis.hget(key, field);\n        }\n\n        @Override\n        public Map<CacheKeyTO, CacheWrapper<Object>> mget(Type returnType, Set<CacheKeyTO> keys) throws Exception {\n            ShardedJedisPipeline pipeline = new ShardedJedisPipeline();\n            pipeline.setShardedJedis(shardedJedis);\n            JedisUtil.executeMGet(pipeline, keys);\n            Collection<Object> values = pipeline.syncAndReturnAll();\n            return cacheManager.deserialize(keys, values, returnType);\n        }\n\n        @Override\n        public void delete(Set<CacheKeyTO> keys) {<FILL_FUNCTION_BODY>}\n\n    }", "metadata": {"task_id": "qiujiayu_AutoLoadCache/270", "ground_truth": "\n            ShardedJedisPipeline pipeline = new ShardedJedisPipeline();\n            pipeline.setShardedJedis(shardedJedis);\n            JedisUtil.executeDelete(pipeline, keys);\n            pipeline.sync();\n        ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-manager", "autoload-cache-manager-jedis", "src", "main", "java", "com", "jarvis", "cache", "redis", "ShardedJedisCacheManager.java"], "context_start_lineno": 0, "function_name": "delete", "left_context": "class ShardedJedisClient implements IRedis {\n\n        private static final Logger LOGGER = LoggerFactory.getLogger(ShardedJedisClient.class);\n\n        private final ShardedJedis shardedJedis;\n\n        private final AbstractRedisCacheManager cacheManager;\n\n        public ShardedJedisClient(ShardedJedis shardedJedis, AbstractRedisCacheManager cacheManager) {\n            this.shardedJedis = shardedJedis;\n            this.cacheManager = cacheManager;\n        }\n\n        @Override\n        public void close() throws IOException {\n            if (null != shardedJedis) {\n                shardedJedis.close();\n            }\n        }\n\n        @Override\n        public void set(byte[] key, byte[] value) {\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.set(key, value);\n        }\n\n        @Override\n        public void setex(byte[] key, int seconds, byte[] value) {\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.setex(key, seconds, value);\n        }\n\n        @Override\n        public void hset(byte[] key, byte[] field, byte[] value) {\n            Jedis jedis = shardedJedis.getShard(key);\n            jedis.hset(key, field, value);\n        }\n\n        @Override\n        public void hset(byte[] key, byte[] field, byte[] value, int seconds) {\n            Jedis jedis = shardedJedis.getShard(key);\n            Pipeline pipeline = jedis.pipelined();\n            pipeline.hset(key, field, value);\n            pipeline.expire(key, seconds);\n            pipeline.sync();\n        }\n\n        @Override\n        public void mset(Collection<MSetParam> params) {\n            ShardedJedisPipeline pipeline = new ShardedJedisPipeline();\n            pipeline.setShardedJedis(shardedJedis);\n            try {\n                JedisUtil.executeMSet(pipeline, this.cacheManager, params);\n            } catch (Exception ex) {\n                LOGGER.error(ex.getMessage(), ex);\n            }\n            pipeline.sync();\n        }\n\n        @Override\n        public byte[] get(byte[] key) {\n            Jedis jedis = shardedJedis.getShard(key);\n            return jedis.get(key);\n        }\n\n        @Override\n        public byte[] hget(byte[] key, byte[] field) {\n            Jedis jedis = shardedJedis.getShard(key);\n            return jedis.hget(key, field);\n        }\n\n        @Override\n        public Map<CacheKeyTO, CacheWrapper<Object>> mget(Type returnType, Set<CacheKeyTO> keys) throws Exception {\n            ShardedJedisPipeline pipeline = new ShardedJedisPipeline();\n            pipeline.setShardedJedis(shardedJedis);\n            JedisUtil.executeMGet(pipeline, keys);\n            Collection<Object> values = pipeline.syncAndReturnAll();\n            return cacheManager.deserialize(keys, values, returnType);\n        }\n\n        @Override\n        public void delete(Set<CacheKeyTO> keys) {", "right_context": "}\n\n    }", "class_name": "ShardedJedisClient", "return_type": "void", "parameters": [{"type": "Set<CacheKeyTO>", "name": "keys"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RefreshHandler {\n\n    private static final Logger log = LoggerFactory.getLogger(RefreshHandler.class);\n    \n    private static final int REFRESH_MIN_EXPIRE = 120;\n\n    private static final int ONE_THOUSAND_MS = 1000;\n    /**\n     * \u5237\u65b0\u7f13\u5b58\u7ebf\u7a0b\u6c60\n     */\n    private final ThreadPoolExecutor refreshThreadPool;\n\n    /**\n     * \u6b63\u5728\u5237\u65b0\u7f13\u5b58\u961f\u5217\n     */\n    private final ConcurrentHashMap<CacheKeyTO, Byte> refreshing;\n\n    private final CacheHandler cacheHandler;\n\n    public RefreshHandler(CacheHandler cacheHandler, AutoLoadConfig config) {\n        this.cacheHandler = cacheHandler;\n        int corePoolSize = config.getRefreshThreadPoolSize();// \u7ebf\u7a0b\u6c60\u7684\u57fa\u672c\u5927\u5c0f\n        int maximumPoolSize = config.getRefreshThreadPoolMaxSize();// \u7ebf\u7a0b\u6c60\u6700\u5927\u5927\u5c0f,\u7ebf\u7a0b\u6c60\u5141\u8bb8\u521b\u5efa\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u3002\u5982\u679c\u961f\u5217\u6ee1\u4e86\uff0c\u5e76\u4e14\u5df2\u521b\u5efa\u7684\u7ebf\u7a0b\u6570\u5c0f\u4e8e\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u5219\u7ebf\u7a0b\u6c60\u4f1a\u518d\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5982\u679c\u4f7f\u7528\u4e86\u65e0\u754c\u7684\u4efb\u52a1\u961f\u5217\u8fd9\u4e2a\u53c2\u6570\u5c31\u6ca1\u4ec0\u4e48\u6548\u679c\u3002\n        int keepAliveTime = config.getRefreshThreadPoolkeepAliveTime();\n        TimeUnit unit = TimeUnit.MINUTES;\n        int queueCapacity = config.getRefreshQueueCapacity();// \u961f\u5217\u5bb9\u91cf\n        refreshing = new ConcurrentHashMap<CacheKeyTO, Byte>(queueCapacity);\n        LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(queueCapacity);\n        RejectedExecutionHandler rejectedHandler = new RefreshRejectedExecutionHandler();\n        refreshThreadPool = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, queue,\n                new ThreadFactory() {\n\n                    private final AtomicInteger threadNumber = new AtomicInteger(1);\n\n                    private final String namePrefix = \"autoload-cache-RefreshHandler-\";\n\n                    @Override\n                    public Thread newThread(Runnable r) {\n                        Thread t = new Thread(r, namePrefix + threadNumber.getAndIncrement());\n                        t.setDaemon(true);\n                        return t;\n                    }\n                }, rejectedHandler);\n    }\n\n    public void removeTask(CacheKeyTO cacheKey) {\n        refreshing.remove(cacheKey);\n    }\n\n    public void doRefresh(CacheAopProxyChain pjp, Cache cache, CacheKeyTO cacheKey, CacheWrapper<Object> cacheWrapper) {<FILL_FUNCTION_BODY>}\n\n    public void shutdown() {\n        refreshThreadPool.shutdownNow();\n        try {\n            refreshThreadPool.awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    class RefreshTask implements Runnable {\n\n        private final CacheAopProxyChain pjp;\n\n        private final Cache cache;\n\n        private final CacheKeyTO cacheKey;\n\n        private final CacheWrapper<Object> cacheWrapper;\n\n        private final Object[] arguments;\n\n        public RefreshTask(CacheAopProxyChain pjp, Cache cache, CacheKeyTO cacheKey, CacheWrapper<Object> cacheWrapper)\n                throws Exception {\n            this.pjp = pjp;\n            this.cache = cache;\n            this.cacheKey = cacheKey;\n            this.cacheWrapper = cacheWrapper;\n            if (cache.argumentsDeepCloneEnable()) {\n                // \u8fdb\u884c\u6df1\u5ea6\u590d\u5236(\u56e0\u4e3a\u662f\u5f02\u6b65\u6267\u884c\uff0c\u9632\u6b62\u5916\u90e8\u4fee\u6539\u53c2\u6570\u503c)\n                this.arguments = (Object[]) cacheHandler.getCloner().deepCloneMethodArgs(pjp.getMethod(),\n                        pjp.getArgs());\n            } else {\n                this.arguments = pjp.getArgs();\n            }\n        }\n\n        @Override\n        public void run() {\n            DataLoader dataLoader;\n            if(cacheHandler.getAutoLoadConfig().isDataLoaderPooled()) {\n                DataLoaderFactory factory = DataLoaderFactory.getInstance();\n                dataLoader = factory.getDataLoader();\n            } else {\n                dataLoader = new DataLoader();\n            }\n            CacheWrapper<Object> newCacheWrapper = null;\n            boolean isFirst = false;\n            try {\n                newCacheWrapper = dataLoader.init(pjp, cacheKey, cache, cacheHandler, arguments).loadData()\n                        .getCacheWrapper();\n            } catch (Throwable ex) {\n                log.error(ex.getMessage(), ex);\n            } finally {\n                // dataLoader \u7684\u6570\u636e\u5fc5\u987b\u5728\u653e\u56de\u5bf9\u8c61\u6c60\u4e4b\u524d\u83b7\u53d6\n                isFirst = dataLoader.isFirst();\n                if(cacheHandler.getAutoLoadConfig().isDataLoaderPooled()) {\n                    DataLoaderFactory factory = DataLoaderFactory.getInstance();\n                    factory.returnObject(dataLoader);\n                }\n            }\n            if (isFirst) {\n                // \u5982\u679c\u6570\u636e\u52a0\u8f7d\u5931\u8d25\uff0c\u5219\u628a\u65e7\u6570\u636e\u8fdb\u884c\u7eed\u79df\n                if (null == newCacheWrapper && null != cacheWrapper) {\n                    int newExpire = cacheWrapper.getExpire() / 2;\n                    if (newExpire < 120) {\n                        newExpire = 120;\n                    }\n                    newCacheWrapper = new CacheWrapper<Object>(cacheWrapper.getCacheObject(), newExpire);\n                }\n                try {\n                    if (null != newCacheWrapper) {\n                        cacheHandler.writeCache(pjp, arguments, cache, cacheKey, newCacheWrapper);\n                    }\n                } catch (Throwable e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n            refreshing.remove(cacheKey);\n        }\n\n        public CacheKeyTO getCacheKey() {\n            return cacheKey;\n        }\n\n    }\n\n    class RefreshRejectedExecutionHandler implements RejectedExecutionHandler {\n\n        @Override\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                Runnable last = e.getQueue().poll();\n                if (last instanceof RefreshTask) {\n                    RefreshTask lastTask = (RefreshTask) last;\n                    refreshing.remove(lastTask.getCacheKey());\n                }\n                e.execute(r);\n            }\n        }\n\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/303", "ground_truth": "\n        int expire = cacheWrapper.getExpire();\n        if (expire < REFRESH_MIN_EXPIRE) {// \u5982\u679c\u8fc7\u671f\u65f6\u95f4\u592a\u5c0f\u4e86\uff0c\u5c31\u4e0d\u5141\u8bb8\u81ea\u52a8\u52a0\u8f7d\uff0c\u907f\u514d\u52a0\u8f7d\u8fc7\u4e8e\u9891\u7e41\uff0c\u5f71\u54cd\u7cfb\u7edf\u7a33\u5b9a\u6027\n            return;\n        }\n        // \u8ba1\u7b97\u8d85\u65f6\u65f6\u95f4\n        int alarmTime = cache.alarmTime();\n        long timeout;\n        if (alarmTime > 0 && alarmTime < expire) {\n            timeout = expire - alarmTime;\n        } else {\n            if (expire >= 600) {\n                timeout = expire - REFRESH_MIN_EXPIRE;\n            } else {\n                timeout = expire - 60;\n            }\n        }\n\n        if ((System.currentTimeMillis() - cacheWrapper.getLastLoadTime()) < (timeout * ONE_THOUSAND_MS)) {\n            return;\n        }\n        Byte tmpByte = refreshing.get(cacheKey);\n        // \u5982\u679c\u6709\u6b63\u5728\u5237\u65b0\u7684\u8bf7\u6c42\uff0c\u5219\u4e0d\u5904\u7406\n        if (null != tmpByte) {\n            return;\n        }\n        tmpByte = 1;\n        if (null == refreshing.putIfAbsent(cacheKey, tmpByte)) {\n            try {\n                refreshThreadPool.execute(new RefreshTask(pjp, cache, cacheKey, cacheWrapper));\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-core", "src", "main", "java", "com", "jarvis", "cache", "RefreshHandler.java"], "context_start_lineno": 0, "function_name": "doRefresh", "left_context": "class RefreshHandler {\n\n    private static final Logger log = LoggerFactory.getLogger(RefreshHandler.class);\n    \n    private static final int REFRESH_MIN_EXPIRE = 120;\n\n    private static final int ONE_THOUSAND_MS = 1000;\n    /**\n     * \u5237\u65b0\u7f13\u5b58\u7ebf\u7a0b\u6c60\n     */\n    private final ThreadPoolExecutor refreshThreadPool;\n\n    /**\n     * \u6b63\u5728\u5237\u65b0\u7f13\u5b58\u961f\u5217\n     */\n    private final ConcurrentHashMap<CacheKeyTO, Byte> refreshing;\n\n    private final CacheHandler cacheHandler;\n\n    public RefreshHandler(CacheHandler cacheHandler, AutoLoadConfig config) {\n        this.cacheHandler = cacheHandler;\n        int corePoolSize = config.getRefreshThreadPoolSize();// \u7ebf\u7a0b\u6c60\u7684\u57fa\u672c\u5927\u5c0f\n        int maximumPoolSize = config.getRefreshThreadPoolMaxSize();// \u7ebf\u7a0b\u6c60\u6700\u5927\u5927\u5c0f,\u7ebf\u7a0b\u6c60\u5141\u8bb8\u521b\u5efa\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u3002\u5982\u679c\u961f\u5217\u6ee1\u4e86\uff0c\u5e76\u4e14\u5df2\u521b\u5efa\u7684\u7ebf\u7a0b\u6570\u5c0f\u4e8e\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u5219\u7ebf\u7a0b\u6c60\u4f1a\u518d\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5982\u679c\u4f7f\u7528\u4e86\u65e0\u754c\u7684\u4efb\u52a1\u961f\u5217\u8fd9\u4e2a\u53c2\u6570\u5c31\u6ca1\u4ec0\u4e48\u6548\u679c\u3002\n        int keepAliveTime = config.getRefreshThreadPoolkeepAliveTime();\n        TimeUnit unit = TimeUnit.MINUTES;\n        int queueCapacity = config.getRefreshQueueCapacity();// \u961f\u5217\u5bb9\u91cf\n        refreshing = new ConcurrentHashMap<CacheKeyTO, Byte>(queueCapacity);\n        LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(queueCapacity);\n        RejectedExecutionHandler rejectedHandler = new RefreshRejectedExecutionHandler();\n        refreshThreadPool = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, queue,\n                new ThreadFactory() {\n\n                    private final AtomicInteger threadNumber = new AtomicInteger(1);\n\n                    private final String namePrefix = \"autoload-cache-RefreshHandler-\";\n\n                    @Override\n                    public Thread newThread(Runnable r) {\n                        Thread t = new Thread(r, namePrefix + threadNumber.getAndIncrement());\n                        t.setDaemon(true);\n                        return t;\n                    }\n                }, rejectedHandler);\n    }\n\n    public void removeTask(CacheKeyTO cacheKey) {\n        refreshing.remove(cacheKey);\n    }\n\n    public void doRefresh(CacheAopProxyChain pjp, Cache cache, CacheKeyTO cacheKey, CacheWrapper<Object> cacheWrapper) {", "right_context": "}\n\n    public void shutdown() {\n        refreshThreadPool.shutdownNow();\n        try {\n            refreshThreadPool.awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    class RefreshTask implements Runnable {\n\n        private final CacheAopProxyChain pjp;\n\n        private final Cache cache;\n\n        private final CacheKeyTO cacheKey;\n\n        private final CacheWrapper<Object> cacheWrapper;\n\n        private final Object[] arguments;\n\n        public RefreshTask(CacheAopProxyChain pjp, Cache cache, CacheKeyTO cacheKey, CacheWrapper<Object> cacheWrapper)\n                throws Exception {\n            this.pjp = pjp;\n            this.cache = cache;\n            this.cacheKey = cacheKey;\n            this.cacheWrapper = cacheWrapper;\n            if (cache.argumentsDeepCloneEnable()) {\n                // \u8fdb\u884c\u6df1\u5ea6\u590d\u5236(\u56e0\u4e3a\u662f\u5f02\u6b65\u6267\u884c\uff0c\u9632\u6b62\u5916\u90e8\u4fee\u6539\u53c2\u6570\u503c)\n                this.arguments = (Object[]) cacheHandler.getCloner().deepCloneMethodArgs(pjp.getMethod(),\n                        pjp.getArgs());\n            } else {\n                this.arguments = pjp.getArgs();\n            }\n        }\n\n        @Override\n        public void run() {\n            DataLoader dataLoader;\n            if(cacheHandler.getAutoLoadConfig().isDataLoaderPooled()) {\n                DataLoaderFactory factory = DataLoaderFactory.getInstance();\n                dataLoader = factory.getDataLoader();\n            } else {\n                dataLoader = new DataLoader();\n            }\n            CacheWrapper<Object> newCacheWrapper = null;\n            boolean isFirst = false;\n            try {\n                newCacheWrapper = dataLoader.init(pjp, cacheKey, cache, cacheHandler, arguments).loadData()\n                        .getCacheWrapper();\n            } catch (Throwable ex) {\n                log.error(ex.getMessage(), ex);\n            } finally {\n                // dataLoader \u7684\u6570\u636e\u5fc5\u987b\u5728\u653e\u56de\u5bf9\u8c61\u6c60\u4e4b\u524d\u83b7\u53d6\n                isFirst = dataLoader.isFirst();\n                if(cacheHandler.getAutoLoadConfig().isDataLoaderPooled()) {\n                    DataLoaderFactory factory = DataLoaderFactory.getInstance();\n                    factory.returnObject(dataLoader);\n                }\n            }\n            if (isFirst) {\n                // \u5982\u679c\u6570\u636e\u52a0\u8f7d\u5931\u8d25\uff0c\u5219\u628a\u65e7\u6570\u636e\u8fdb\u884c\u7eed\u79df\n                if (null == newCacheWrapper && null != cacheWrapper) {\n                    int newExpire = cacheWrapper.getExpire() / 2;\n                    if (newExpire < 120) {\n                        newExpire = 120;\n                    }\n                    newCacheWrapper = new CacheWrapper<Object>(cacheWrapper.getCacheObject(), newExpire);\n                }\n                try {\n                    if (null != newCacheWrapper) {\n                        cacheHandler.writeCache(pjp, arguments, cache, cacheKey, newCacheWrapper);\n                    }\n                } catch (Throwable e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n            refreshing.remove(cacheKey);\n        }\n\n        public CacheKeyTO getCacheKey() {\n            return cacheKey;\n        }\n\n    }\n\n    class RefreshRejectedExecutionHandler implements RejectedExecutionHandler {\n\n        @Override\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                Runnable last = e.getQueue().poll();\n                if (last instanceof RefreshTask) {\n                    RefreshTask lastTask = (RefreshTask) last;\n                    refreshing.remove(lastTask.getCacheKey());\n                }\n                e.execute(r);\n            }\n        }\n\n    }\n}", "class_name": "RefreshHandler", "return_type": "void", "parameters": [{"type": "CacheAopProxyChain", "name": "pjp"}, {"type": "Cache", "name": "cache"}, {"type": "CacheKeyTO", "name": "cacheKey"}, {"type": "CacheWrapper<Object>", "name": "cacheWrapper"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JdkSerializer implements ISerializer<Object> {\n\n    @Override\n    public Object deserialize(byte[] bytes, Type returnType) throws Exception {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public byte[] serialize(Object obj) throws Exception {\n        if (obj == null) {\n            return new byte[0];\n        }\n        // \u5c06\u5bf9\u8c61\u5199\u5230\u6d41\u91cc\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        ObjectOutputStream output = new ObjectOutputStream(outputStream);\n        output.writeObject(obj);\n        output.flush();\n        return outputStream.toByteArray();\n    }\n\n    @Override\n    public Object deepClone(Object obj, final Type type) throws Exception {\n        if (null == obj) {\n            return obj;\n        }\n        Class<?> clazz = obj.getClass();\n        if (BeanUtil.isPrimitive(obj) || clazz.isEnum() || obj instanceof Class || clazz.isAnnotation()\n                || clazz.isSynthetic()) {// \u5e38\u89c1\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\n            return obj;\n        }\n        if (obj instanceof Date) {\n            return ((Date) obj).clone();\n        } else if (obj instanceof Calendar) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTimeInMillis(((Calendar) obj).getTime().getTime());\n            return cal;\n        }\n        return deserialize(serialize(obj), null);\n    }\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {\n        if (null == args || args.length == 0) {\n            return args;\n        }\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n        if (args.length != genericParameterTypes.length) {\n            throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\" + method.getName()\n                    + \" must \" + genericParameterTypes.length);\n        }\n        Object[] res = new Object[args.length];\n        int len = genericParameterTypes.length;\n        for (int i = 0; i < len; i++) {\n            res[i] = deepClone(args[i], null);\n        }\n        return res;\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/350", "ground_truth": "\n        if (null == bytes || bytes.length == 0) {\n            return null;\n        }\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n        ObjectInputStream input = new ObjectInputStream(inputStream);\n        return input.readObject();\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-jdk", "src", "main", "java", "com", "jarvis", "cache", "serializer", "JdkSerializer.java"], "context_start_lineno": 0, "function_name": "deserialize", "left_context": "class JdkSerializer implements ISerializer<Object> {\n\n    @Override\n    public Object deserialize(byte[] bytes, Type returnType) throws Exception {", "right_context": "}\n\n    @Override\n    public byte[] serialize(Object obj) throws Exception {\n        if (obj == null) {\n            return new byte[0];\n        }\n        // \u5c06\u5bf9\u8c61\u5199\u5230\u6d41\u91cc\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        ObjectOutputStream output = new ObjectOutputStream(outputStream);\n        output.writeObject(obj);\n        output.flush();\n        return outputStream.toByteArray();\n    }\n\n    @Override\n    public Object deepClone(Object obj, final Type type) throws Exception {\n        if (null == obj) {\n            return obj;\n        }\n        Class<?> clazz = obj.getClass();\n        if (BeanUtil.isPrimitive(obj) || clazz.isEnum() || obj instanceof Class || clazz.isAnnotation()\n                || clazz.isSynthetic()) {// \u5e38\u89c1\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\n            return obj;\n        }\n        if (obj instanceof Date) {\n            return ((Date) obj).clone();\n        } else if (obj instanceof Calendar) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTimeInMillis(((Calendar) obj).getTime().getTime());\n            return cal;\n        }\n        return deserialize(serialize(obj), null);\n    }\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {\n        if (null == args || args.length == 0) {\n            return args;\n        }\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n        if (args.length != genericParameterTypes.length) {\n            throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\" + method.getName()\n                    + \" must \" + genericParameterTypes.length);\n        }\n        Object[] res = new Object[args.length];\n        int len = genericParameterTypes.length;\n        for (int i = 0; i < len; i++) {\n            res[i] = deepClone(args[i], null);\n        }\n        return res;\n    }\n}", "class_name": "JdkSerializer", "return_type": "Object", "parameters": [{"type": "byte[]", "name": "bytes"}, {"type": "Type", "name": "returnType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CacheKeyTO implements Serializable {\n\n    private static final long serialVersionUID = 7229320497442357252L;\n\n    private final String namespace;\n\n    private final String key;// \u7f13\u5b58Key\n\n    private final String hfield;// \u8bbe\u7f6e\u54c8\u5e0c\u8868\u4e2d\u7684\u5b57\u6bb5\uff0c\u5982\u679c\u8bbe\u7f6e\u6b64\u9879\uff0c\u5219\u7528\u54c8\u5e0c\u8868\u8fdb\u884c\u5b58\u50a8\n\n    public CacheKeyTO(String namespace, String key, String hfield) {\n        this.namespace = namespace;\n        this.key = key;\n        this.hfield = hfield;\n    }\n\n    public String getCacheKey() {<FILL_FUNCTION_BODY>}\n\n    public String getLockKey() {\n        StringBuilder key = new StringBuilder(getCacheKey());\n        if (null != hfield && hfield.length() > 0) {\n            key.append(\":\").append(hfield);\n        }\n        key.append(\":lock\");\n        return key.toString();\n    }\n\n    public String getNamespace() {\n        return namespace;\n    }\n\n    public String getHfield() {\n        return hfield;\n    }\n    \n    public String getKey() {\n        return key;\n    }\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        CacheKeyTO that = (CacheKeyTO) o;\n        return Objects.equals(namespace, that.namespace) &&\n                Objects.equals(key, that.key) &&\n                Objects.equals(hfield, that.hfield);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(namespace, key, hfield);\n    }\n\n    @Override\n    public String toString() {\n        return \"CacheKeyTO{\" +\n                \"namespace='\" + namespace + '\\'' +\n                \", key='\" + key + '\\'' +\n                \", hfield='\" + hfield + '\\'' +\n                '}';\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/382", "ground_truth": "\n        if (null != this.namespace && this.namespace.length() > 0) {\n            return new StringBuilder(this.namespace).append(\":\").append(this.key).toString();\n        }\n        return this.key;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-common", "src", "main", "java", "com", "jarvis", "cache", "to", "CacheKeyTO.java"], "context_start_lineno": 0, "function_name": "getCacheKey", "left_context": "class CacheKeyTO implements Serializable {\n\n    private static final long serialVersionUID = 7229320497442357252L;\n\n    private final String namespace;\n\n    private final String key;// \u7f13\u5b58Key\n\n    private final String hfield;// \u8bbe\u7f6e\u54c8\u5e0c\u8868\u4e2d\u7684\u5b57\u6bb5\uff0c\u5982\u679c\u8bbe\u7f6e\u6b64\u9879\uff0c\u5219\u7528\u54c8\u5e0c\u8868\u8fdb\u884c\u5b58\u50a8\n\n    public CacheKeyTO(String namespace, String key, String hfield) {\n        this.namespace = namespace;\n        this.key = key;\n        this.hfield = hfield;\n    }\n\n    public String getCacheKey() {", "right_context": "}\n\n    public String getLockKey() {\n        StringBuilder key = new StringBuilder(getCacheKey());\n        if (null != hfield && hfield.length() > 0) {\n            key.append(\":\").append(hfield);\n        }\n        key.append(\":lock\");\n        return key.toString();\n    }\n\n    public String getNamespace() {\n        return namespace;\n    }\n\n    public String getHfield() {\n        return hfield;\n    }\n    \n    public String getKey() {\n        return key;\n    }\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        CacheKeyTO that = (CacheKeyTO) o;\n        return Objects.equals(namespace, that.namespace) &&\n                Objects.equals(key, that.key) &&\n                Objects.equals(hfield, that.hfield);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(namespace, key, hfield);\n    }\n\n    @Override\n    public String toString() {\n        return \"CacheKeyTO{\" +\n                \"namespace='\" + namespace + '\\'' +\n                \", key='\" + key + '\\'' +\n                \", hfield='\" + hfield + '\\'' +\n                '}';\n    }\n}", "class_name": "CacheKeyTO", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/compress/ICompressor.java\n// --------------------------------------------------\n// /** \n//  * \u89e3\u538b\n//  * @param bais ByteArrayInputStream\n//  * @return \u89e3\u538b\u540e\u6570\u636e\n//  * @throws Exception \u5f02\u5e38\n//  */\n// byte[] decompress(ByteArrayInputStream bais) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/ReadByteBuf.java\n// --------------------------------------------------\n// public byte[] readableBytes(){\n//   byte[] newArray=new byte[array.length - readerIndex];\n//   System.arraycopy(array,readerIndex,newArray,0,newArray.length);\n//   return newArray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/WriteByteBuf.java\n// --------------------------------------------------\n// public byte[] toByteArray(){\n//   byte[] newArray=new byte[count];\n//   System.arraycopy(buf,0,newArray,0,count);\n//   return newArray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/redis/SpringRedisCacheManager.java\n// --------------------------------------------------\n// @Override public byte[] get(byte[] key){\n//   return redisConnection.stringCommands().get(key);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/redis/SpringRedisCacheManager.java\n// --------------------------------------------------\n// @Override public byte[] hget(byte[] key,byte[] field){\n//   return redisConnection.hashCommands().hGet(key,field);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/FST.java\n// --------------------------------------------------\n// private static byte[] write(Object obj) throws Exception {\n//   byte barray[]=conf.asByteArray(obj);\n//   return barray;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/KryoTest.java\n// --------------------------------------------------\n// private static byte[] write(Object obj) throws Exception {\n//   Output output=null;\n//   try {\n//     ByteArrayOutputStream baos=new ByteArrayOutputStream();\n//     output=new Output(baos);\n//     kryo.writeClassAndObject(output,obj);\n//     output.flush();\n//     return baos.toByteArray();\n//   }\n//   finally {\n//     if (output != null) {\n//       output.close();\n//     }\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/CompressorSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (null == obj) {\n//     return null;\n//   }\n//   byte[] data=serializer.serialize(obj);\n//   byte flag=0;\n//   if (data.length > compressionThreshold) {\n//     data=compressor.compress(new ByteArrayInputStream(data));\n//     flag=1;\n//   }\n//   byte[] out=new byte[data.length + 1];\n//   out[0]=flag;\n//   System.arraycopy(data,0,out,1,data.length);\n//   return out;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/ISerializer.java\n// --------------------------------------------------\n// /** \n//  * Serialize the given object to binary data.\n//  * @param obj object to serialize\n//  * @return the equivalent binary data\n//  * @throws Exception \u5f02\u5e38\n//  */\n// byte[] serialize(final T obj) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/StringSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(String string){\n//   return (string == null ? null : string.getBytes(charset));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-fastjson/src/main/java/com/jarvis/cache/serializer/FastjsonSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   String json=JSON.toJSONString(obj,FEATURES);\n//   return json.getBytes(charset);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-hessian/src/main/java/com/jarvis/cache/serializer/HessianSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n//   AbstractHessianOutput output=new Hessian2Output(outputStream);\n//   output.setSerializerFactory(SERIALIZER_FACTORY);\n//   output.writeObject(obj);\n//   output.flush();\n//   byte[] val=outputStream.toByteArray();\n//   output.close();\n//   return val;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson-msgpack/src/main/java/com/jarvis/cache/serializer/JacksonMsgpackSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return MAPPER.writeValueAsBytes(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson/src/main/java/com/jarvis/cache/serializer/JacksonJsonSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(final Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return MAPPER.writeValueAsBytes(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jdk/src/main/java/com/jarvis/cache/serializer/JdkSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return new byte[0];\n//   }\n//   ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n//   ObjectOutputStream output=new ObjectOutputStream(outputStream);\n//   output.writeObject(obj);\n//   output.flush();\n//   return outputStream.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/KryoSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   if (obj == null) {\n//     return null;\n//   }\n//   return kryoContext.serialize(obj);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/KryoContext.java\n// --------------------------------------------------\n// /** \n//  * \u5e8f\u5217\u5316\n//  * @param obj \u5bf9\u8c61\n//  * @return byte[]\n//  */\n// byte[] serialize(Object obj);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/kryo/KryoContext.java\n// --------------------------------------------------\n// /** \n//  * \u5e8f\u5217\u5316\n//  * @param obj        \u5bf9\u8c61\n//  * @param bufferSize \u7f13\u51b2\u5927\u5c0f\n//  * @return byte[]\n//  */\n// byte[] serialize(Object obj,int bufferSize);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-protobuf/src/main/java/com/jarvis/cache/serializer/protobuf/ProtoBufSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(CacheWrapper<Object> obj) throws Exception {\n//   WriteByteBuf byteBuf=new WriteByteBuf();\n//   byteBuf.writeInt(obj.getExpire());\n//   byteBuf.writeLong(obj.getLastLoadTime());\n//   Object cacheObj=obj.getCacheObject();\n//   if (cacheObj != null) {\n//     if (cacheObj instanceof Message) {\n//       byteBuf.writeBytes(((Message)cacheObj).toByteArray());\n//     }\n//  else {\n//       MAPPER.writeValue(byteBuf,cacheObj);\n//     }\n//   }\n//   return byteBuf.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/doc/FSTSerializer.java\n// --------------------------------------------------\n// @Override public byte[] serialize(Object obj) throws Exception {\n//   byte barray[]=conf.asByteArray(obj);\n//   return barray;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DefaultKryoContext implements KryoContext {\n    private static final int DEFAULT_BUFFER_SIZE = 1024 * 100;\n    private KryoPool pool;\n    private List<KryoClassRegistration> registrations;\n\n    public static KryoContext newKryoContextFactory(KryoClassRegistration registration) {\n        KryoContext kryoContext = new DefaultKryoContext();\n        kryoContext.addKryoClassRegistration(registration);\n        return kryoContext;\n    }\n\n    private DefaultKryoContext() {\n        registrations = new ArrayList<>();\n\n        //KryoFactory\u7684create\u65b9\u6cd5\u4f1a\u5ef6\u540e\u8c03\u7528\n        pool = new KryoPool.Builder(() -> {\n            Kryo kryo = new Kryo();\n            registrations.forEach(reg -> reg.register(kryo));\n            return kryo;\n        }).softReferences().build();\n    }\n\n    @Override\n    public byte[] serialize(Object obj) {\n        return serialize(obj, DEFAULT_BUFFER_SIZE);\n    }\n\n    @Override\n    public byte[] serialize(Object obj, int bufferSize) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public Object deserialize(byte[] serialized) {\n        Kryo kryo = pool.borrow();\n        try (Input input = new Input(new ByteArrayInputStream(serialized))) {\n            Object o = kryo.readClassAndObject(input);\n            return o;\n        } finally {\n            pool.release(kryo);\n        }\n    }\n\n    @Override\n    public void addKryoClassRegistration(KryoClassRegistration registration) {\n        if (null != registration) {\n            registrations.add(registration);\n        }\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/393", "ground_truth": "\n        Kryo kryo = pool.borrow();\n        try (Output output = new Output(new ByteArrayOutputStream(), bufferSize)) {\n            kryo.writeClassAndObject(output, obj);\n            return output.toBytes();\n        } finally {\n            pool.release(kryo);\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-kryo", "src", "main", "java", "com", "jarvis", "cache", "serializer", "kryo", "DefaultKryoContext.java"], "context_start_lineno": 0, "function_name": "serialize", "left_context": "class DefaultKryoContext implements KryoContext {\n    private static final int DEFAULT_BUFFER_SIZE = 1024 * 100;\n    private KryoPool pool;\n    private List<KryoClassRegistration> registrations;\n\n    public static KryoContext newKryoContextFactory(KryoClassRegistration registration) {\n        KryoContext kryoContext = new DefaultKryoContext();\n        kryoContext.addKryoClassRegistration(registration);\n        return kryoContext;\n    }\n\n    private DefaultKryoContext() {\n        registrations = new ArrayList<>();\n\n        //KryoFactory\u7684create\u65b9\u6cd5\u4f1a\u5ef6\u540e\u8c03\u7528\n        pool = new KryoPool.Builder(() -> {\n            Kryo kryo = new Kryo();\n            registrations.forEach(reg -> reg.register(kryo));\n            return kryo;\n        }).softReferences().build();\n    }\n\n    @Override\n    public byte[] serialize(Object obj) {\n        return serialize(obj, DEFAULT_BUFFER_SIZE);\n    }\n\n    @Override\n    public byte[] serialize(Object obj, int bufferSize) {", "right_context": "}\n\n    @Override\n    public Object deserialize(byte[] serialized) {\n        Kryo kryo = pool.borrow();\n        try (Input input = new Input(new ByteArrayInputStream(serialized))) {\n            Object o = kryo.readClassAndObject(input);\n            return o;\n        } finally {\n            pool.release(kryo);\n        }\n    }\n\n    @Override\n    public void addKryoClassRegistration(KryoClassRegistration registration) {\n        if (null != registration) {\n            registrations.add(registration);\n        }\n    }\n}", "class_name": "DefaultKryoContext", "return_type": "byte[]", "parameters": [{"type": "Object", "name": "obj"}, {"type": "int", "name": "bufferSize"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WeakReferenceSerializer extends AbstractSerializer implements ObjectSerializer {\n\n    @Override\n    public Serializer getObjectSerializer() {\n        return this;\n    }\n\n    @Override\n    public void writeObject(Object obj, AbstractHessianOutput out) throws IOException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/394", "ground_truth": "\n        if (out.addRef(obj)) {\n            return;\n        }\n        @SuppressWarnings(\"unchecked\")\n        WeakReference<Object> data = (WeakReference<Object>) obj;\n\n        int refV = out.writeObjectBegin(WeakReference.class.getName());\n\n        if (refV == -1) {\n            out.writeInt(1);\n            out.writeString(\"ref\");\n            out.writeObjectBegin(WeakReference.class.getName());\n        }\n        if (data != null) {\n            Object ref = data.get();\n            if (null != ref) {\n                out.writeObject(ref);\n            } else {\n                out.writeNull();\n            }\n        } else {\n            out.writeNull();\n        }\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-hessian", "src", "main", "java", "com", "jarvis", "cache", "serializer", "hession", "WeakReferenceSerializer.java"], "context_start_lineno": 0, "function_name": "writeObject", "left_context": "class WeakReferenceSerializer extends AbstractSerializer implements ObjectSerializer {\n\n    @Override\n    public Serializer getObjectSerializer() {\n        return this;\n    }\n\n    @Override\n    public void writeObject(Object obj, AbstractHessianOutput out) throws IOException {", "right_context": "}\n}", "class_name": "WeakReferenceSerializer", "return_type": "void", "parameters": [{"type": "Object", "name": "obj"}, {"type": "AbstractHessianOutput", "name": "out"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WriteByteBuf extends OutputStream {\n\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    private byte[] buf;\n\n    private int count;\n\n    public WriteByteBuf() {\n        this(32);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        writeByte((byte) b);\n    }\n\n    public WriteByteBuf(int arrayLength) {\n        buf = new byte[arrayLength];\n    }\n\n    public void writeByte(byte value) {\n        int length = 1;\n        ensureCapacity(length + count);\n        HeapByteBufUtil.setByte(buf, count, value);\n        count += length;\n    }\n\n    public void writeInt(int value) {\n        int length = 4;\n        ensureCapacity(length + count);\n        HeapByteBufUtil.setInt(buf, count, value);\n        count += length;\n    }\n\n    public void writeLong(long value) {\n        int length = 8;\n        ensureCapacity(length + count);\n        HeapByteBufUtil.setLong(buf, count, value);\n        count += length;\n    }\n\n    public void writeBytes(byte[] bytes) {<FILL_FUNCTION_BODY>}\n\n\n    public byte[] toByteArray() {\n        byte[] newArray = new byte[count];\n        System.arraycopy(buf, 0, newArray, 0, count);\n        return newArray;\n    }\n\n\n    private void ensureCapacity(int minCapacity) {\n        // overflow-conscious code\n        if (minCapacity - buf.length > 0)\n            grow(minCapacity);\n    }\n\n\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = buf.length;\n        int newCapacity = oldCapacity << 1;\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        buf = Arrays.copyOf(buf, newCapacity);\n    }\n\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n                Integer.MAX_VALUE :\n                MAX_ARRAY_SIZE;\n    }\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/399", "ground_truth": "\n        int length = bytes.length;\n        ensureCapacity(bytes.length + count);\n        System.arraycopy(bytes, 0, buf, count, length);\n        count += bytes.length;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-protobuf", "src", "main", "java", "com", "jarvis", "cache", "serializer", "protobuf", "WriteByteBuf.java"], "context_start_lineno": 0, "function_name": "writeBytes", "left_context": "class WriteByteBuf extends OutputStream {\n\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    private byte[] buf;\n\n    private int count;\n\n    public WriteByteBuf() {\n        this(32);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        writeByte((byte) b);\n    }\n\n    public WriteByteBuf(int arrayLength) {\n        buf = new byte[arrayLength];\n    }\n\n    public void writeByte(byte value) {\n        int length = 1;\n        ensureCapacity(length + count);\n        HeapByteBufUtil.setByte(buf, count, value);\n        count += length;\n    }\n\n    public void writeInt(int value) {\n        int length = 4;\n        ensureCapacity(length + count);\n        HeapByteBufUtil.setInt(buf, count, value);\n        count += length;\n    }\n\n    public void writeLong(long value) {\n        int length = 8;\n        ensureCapacity(length + count);\n        HeapByteBufUtil.setLong(buf, count, value);\n        count += length;\n    }\n\n    public void writeBytes(byte[] bytes) {", "right_context": "}\n\n\n    public byte[] toByteArray() {\n        byte[] newArray = new byte[count];\n        System.arraycopy(buf, 0, newArray, 0, count);\n        return newArray;\n    }\n\n\n    private void ensureCapacity(int minCapacity) {\n        // overflow-conscious code\n        if (minCapacity - buf.length > 0)\n            grow(minCapacity);\n    }\n\n\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = buf.length;\n        int newCapacity = oldCapacity << 1;\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        buf = Arrays.copyOf(buf, newCapacity);\n    }\n\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n                Integer.MAX_VALUE :\n                MAX_ARRAY_SIZE;\n    }\n\n}", "class_name": "WriteByteBuf", "return_type": "void", "parameters": [{"type": "byte[]", "name": "bytes"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-core/src/main/java/com/jarvis/cache/MagicHandler.java\n// --------------------------------------------------\n// /** \n//  * \u8fc7\u6ee4\u5df2\u7ecf\u547d\u4e2d\u7f13\u5b58\u7684\u53c2\u6570\uff0c\u5c06\u5269\u4f59\u53c2\u6570\u8fdb\u884c\u91cd\u65b0\u7ec4\u88c5\n//  * @param keyArgMap\n//  * @param cacheValues\n//  * @param argSize\n//  * @return\n//  * @throws Exception\n//  */\n// private Object[] getUnmatchArg(Map<CacheKeyTO,Object> keyArgMap,Map<CacheKeyTO,CacheWrapper<Object>> cacheValues,int argSize) throws Exception {\n//   Iterator<Map.Entry<CacheKeyTO,Object>> keyArgMapIt=keyArgMap.entrySet().iterator();\n//   Object unmatchArg;\n//   if (null != iterableCollectionArg) {\n//     Collection<Object> argList=newCollection(iterableCollectionArg.getClass(),argSize);\n//     while (keyArgMapIt.hasNext()) {\n//       Map.Entry<CacheKeyTO,Object> item=keyArgMapIt.next();\n//       if (!cacheValues.containsKey(item.getKey())) {\n//         argList.add(item.getValue());\n//       }\n//     }\n//     unmatchArg=argList;\n//   }\n//  else {\n//     Object arg=iterableArrayArg[0];\n//     Object[] args=(Object[])Array.newInstance(arg.getClass(),argSize);\n//     int i=0;\n//     while (keyArgMapIt.hasNext()) {\n//       Map.Entry<CacheKeyTO,Object> item=keyArgMapIt.next();\n//       if (!cacheValues.containsKey(item.getKey())) {\n//         args[i]=item.getValue();\n//         i++;\n//       }\n//     }\n//     unmatchArg=args;\n//   }\n//   Object[] args=new Object[arguments.length];\n//   for (int i=0; i < arguments.length; i++) {\n//     if (i == iterableArgIndex) {\n//       args[i]=unmatchArg;\n//     }\n//  else {\n//       args[i]=arguments[i];\n//     }\n//   }\n//   return args;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-aop/autoload-cache-aop-aspectj/src/main/java/com/jarvis/cache/aop/aspectj/AspectjCacheAopProxyChain.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return jp.getArgs();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-aop/autoload-cache-aop-aspectj/src/main/java/com/jarvis/cache/aop/aspectj/AspectjDeleteCacheAopProxyChain.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return jp.getArgs();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-common/src/main/java/com/jarvis/cache/aop/CacheAopProxyChain.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u53c2\u6570\n//  * @return \u53c2\u6570\n//  */\n// Object[] getArgs();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-common/src/main/java/com/jarvis/cache/aop/DeleteCacheAopProxyChain.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u53c2\u6570\n//  * @return \u53c2\u6570\n//  */\n// Object[] getArgs();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-common/src/main/java/com/jarvis/cache/to/AutoLoadTO.java\n// --------------------------------------------------\n// public Object[] getArgs(){\n//   return args;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/admin/AutoloadCacheController.java\n// --------------------------------------------------\n// @GetMapping(\"/args\") public Object[] showArgs(String key,String hfield){\n//   CacheKeyTO cacheKeyTO=new CacheKeyTO(autoloadCacheHandler.getAutoLoadConfig().getNamespace(),key,hfield);\n//   AutoLoadTO tmpTO=autoloadCacheHandler.getAutoLoadHandler().getAutoLoadTO(cacheKeyTO);\n//   if (null != tmpTO && null != tmpTO.getArgs()) {\n//     return tmpTO.getArgs();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/interceptor/aopproxy/CacheAopProxy.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return invocation.getArguments();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-spring-boot-starter/src/main/java/com/jarvis/cache/interceptor/aopproxy/DeleteCacheAopProxy.java\n// --------------------------------------------------\n// @Override public Object[] getArgs(){\n//   return invocation.getArguments();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/clone/Cloning.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/clone/ICloner.java\n// --------------------------------------------------\n// /** \n//  * \u6df1\u5ea6\u590d\u5236 Method \u4e2d\u7684\u53c2\u6570\n//  * @param method Method\n//  * @param args   \u53c2\u6570\n//  * @return \u53c2\u6570\n//  * @throws Exception \u5f02\u5e38\n//  */\n// Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/CompressorSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   return serializer.deepCloneMethodArgs(method,args);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-api/src/main/java/com/jarvis/cache/serializer/StringSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args){\n//   return (Object[])deepClone(args,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-fastjson/src/main/java/com/jarvis/cache/serializer/FastjsonSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Class<?> clazz=args.getClass();\n//   Object[] res=((Object)clazz == (Object)Object[].class) ? (Object[])new Object[args.length] : (Object[])Array.newInstance(clazz.getComponentType(),args.length);\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     Type genericParameterType=genericParameterTypes[i];\n//     Object obj=args[i];\n//     if (genericParameterType instanceof ParameterizedType) {\n//       String json=JSON.toJSONString(obj,FEATURES);\n//       res[i]=JSON.parseObject(json,genericParameterType);\n//     }\n//  else {\n//       res[i]=deepClone(obj,null);\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-hessian/src/main/java/com/jarvis/cache/serializer/HessianSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson-msgpack/src/main/java/com/jarvis/cache/serializer/JacksonMsgpackSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Class<?> clazz=args.getClass();\n//   Object[] res=((Object)clazz == (Object)Object[].class) ? (Object[])new Object[args.length] : (Object[])Array.newInstance(clazz.getComponentType(),args.length);\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     Type genericParameterType=genericParameterTypes[i];\n//     Object obj=args[i];\n//     if (genericParameterType instanceof ParameterizedType) {\n//       byte[] tmp=MAPPER.writeValueAsBytes(obj);\n//       JavaType javaType=MAPPER.getTypeFactory().constructType(genericParameterType);\n//       res[i]=MAPPER.readValue(tmp,javaType);\n//     }\n//  else {\n//       res[i]=deepClone(obj,null);\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jackson/src/main/java/com/jarvis/cache/serializer/JacksonJsonSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Class<?> clazz=args.getClass();\n//   Object[] res=((Object)clazz == (Object)Object[].class) ? (Object[])new Object[args.length] : (Object[])Array.newInstance(clazz.getComponentType(),args.length);\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     Type genericParameterType=genericParameterTypes[i];\n//     Object obj=args[i];\n//     if (genericParameterType instanceof ParameterizedType) {\n//       String json=MAPPER.writeValueAsString(obj);\n//       JavaType javaType=MAPPER.getTypeFactory().constructType(genericParameterType);\n//       res[i]=MAPPER.readValue(json,javaType);\n//     }\n//  else {\n//       res[i]=deepClone(obj,null);\n//     }\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-jdk/src/main/java/com/jarvis/cache/serializer/JdkSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// AutoLoadCache/autoload-cache-serializer/autoload-cache-serializer-kryo/src/main/java/com/jarvis/cache/serializer/KryoSerializer.java\n// --------------------------------------------------\n// @Override public Object[] deepCloneMethodArgs(Method method,Object[] args) throws Exception {\n//   if (null == args || args.length == 0) {\n//     return args;\n//   }\n//   Type[] genericParameterTypes=method.getGenericParameterTypes();\n//   if (args.length != genericParameterTypes.length) {\n//     throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\"+ method.getName()+ \" must \"+ genericParameterTypes.length);\n//   }\n//   Object[] res=new Object[args.length];\n//   int len=genericParameterTypes.length;\n//   for (int i=0; i < len; i++) {\n//     res[i]=deepClone(args[i],null);\n//   }\n//   return res;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ProtoBufSerializer implements ISerializer<CacheWrapper<Object>> {\n\n    private ConcurrentHashMap<Class, Lambda> lambdaMap = new ConcurrentHashMap<>();\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    public ProtoBufSerializer() {\n        MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        MAPPER.registerModule(new SimpleModule().addSerializer(new NullValueSerializer(null)));\n        MAPPER.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n    }\n\n    @Override\n    public byte[] serialize(CacheWrapper<Object> obj) throws Exception {\n        WriteByteBuf byteBuf = new WriteByteBuf();\n        byteBuf.writeInt(obj.getExpire());\n        byteBuf.writeLong(obj.getLastLoadTime());\n        Object cacheObj = obj.getCacheObject();\n        if (cacheObj != null) {\n            if (cacheObj instanceof Message) {\n                byteBuf.writeBytes(((Message) cacheObj).toByteArray());\n            } else {\n                MAPPER.writeValue(byteBuf, cacheObj);\n            }\n        }\n        return byteBuf.toByteArray();\n    }\n\n\n    @Override\n    public CacheWrapper<Object> deserialize(final byte[] bytes, Type returnType) throws Exception {\n        if (bytes == null || bytes.length == 0) {\n            return null;\n        }\n        CacheWrapper<Object> cacheWrapper = new CacheWrapper<>();\n        ReadByteBuf byteBuf = new ReadByteBuf(bytes);\n        cacheWrapper.setExpire(byteBuf.readInt());\n        cacheWrapper.setLastLoadTime(byteBuf.readLong());\n        byte[] body = byteBuf.readableBytes();\n        if (body == null || body.length == 0) {\n            return cacheWrapper;\n        }\n        Class<?> clazz = TypeFactory.rawClass(returnType);\n        if (Message.class.isAssignableFrom(clazz)) {\n            Lambda lambda = getLambda(clazz);\n            Object obj = lambda.invoke_for_Object(new ByteArrayInputStream(body));\n            cacheWrapper.setCacheObject(obj);\n        } else {\n            Type[] agsType = new Type[]{returnType};\n            JavaType javaType = MAPPER.getTypeFactory().constructType(ParameterizedTypeImpl.make(CacheWrapper.class, agsType, null));\n            cacheWrapper.setCacheObject(MAPPER.readValue(body, clazz));\n        }\n        return cacheWrapper;\n    }\n\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object deepClone(Object obj, Type type) throws Exception {\n        if (null == obj) {\n            return null;\n        }\n        Class<?> clazz = obj.getClass();\n        if (BeanUtil.isPrimitive(obj) || clazz.isEnum() || obj instanceof Class || clazz.isAnnotation()\n                || clazz.isSynthetic()) {// \u5e38\u89c1\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\n            return obj;\n        }\n        if (obj instanceof Date) {\n            return ((Date) obj).clone();\n        } else if (obj instanceof Calendar) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTimeInMillis(((Calendar) obj).getTime().getTime());\n            return cal;\n        }\n        if (obj instanceof CacheWrapper) {\n            CacheWrapper<Object> wrapper = (CacheWrapper<Object>) obj;\n            CacheWrapper<Object> res = new CacheWrapper<>();\n            res.setExpire(wrapper.getExpire());\n            res.setLastLoadTime(wrapper.getLastLoadTime());\n            res.setCacheObject(deepClone(wrapper.getCacheObject(), null));\n            return res;\n        }\n        if (obj instanceof Message) {\n            return ((Message) obj).toBuilder().build();\n        }\n        return MAPPER.readValue(MAPPER.writeValueAsBytes(obj), clazz);\n    }\n\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {<FILL_FUNCTION_BODY>}\n\n    @SuppressWarnings(\"unchecked\")\n    private Lambda getLambda(Class clazz) throws NoSuchMethodException {\n        Lambda lambda = lambdaMap.get(clazz);\n        if (lambda == null) {\n            Method method = clazz.getDeclaredMethod(\"parseFrom\", InputStream.class);\n            try {\n                lambda = LambdaFactory.create(method);\n                lambdaMap.put(clazz, lambda);\n            } catch (Throwable throwable) {\n                throwable.printStackTrace();\n            }\n        }\n        return lambda;\n    }\n\n    private class NullValueSerializer extends StdSerializer<NullValue> {\n\n        private static final long serialVersionUID = 1999052150548658808L;\n\n        private final String classIdentifier;\n\n        /**\n         * @param classIdentifier can be {@literal null} and will be defaulted\n         *                        to {@code @class}.\n         */\n        NullValueSerializer(String classIdentifier) {\n\n            super(NullValue.class);\n            this.classIdentifier = StringUtil.hasText(classIdentifier) ? classIdentifier : \"@class\";\n        }\n\n        /*\n         * (non-Javadoc)\n         * @see\n         * com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.\n         * lang.Object, com.fasterxml.jackson.core.JsonGenerator,\n         * com.fasterxml.jackson.databind.SerializerProvider)\n         */\n        @Override\n        public void serialize(NullValue value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n\n            jgen.writeStartObject();\n            jgen.writeStringField(classIdentifier, NullValue.class.getName());\n            jgen.writeEndObject();\n        }\n    }\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/411", "ground_truth": "\n        if (null == args || args.length == 0) {\n            return args;\n        }\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n        if (args.length != genericParameterTypes.length) {\n            throw new Exception(\"the length of \" + method.getDeclaringClass().getName() + \".\" + method.getName() + \" must \" + genericParameterTypes.length);\n        }\n        Object[] res = new Object[args.length];\n        int len = genericParameterTypes.length;\n        for (int i = 0; i < len; i++) {\n            res[i] = deepClone(args[i], null);\n        }\n        return res;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-serializer", "autoload-cache-serializer-protobuf", "src", "main", "java", "com", "jarvis", "cache", "serializer", "protobuf", "ProtoBufSerializer.java"], "context_start_lineno": 0, "function_name": "deepCloneMethodArgs", "left_context": "class ProtoBufSerializer implements ISerializer<CacheWrapper<Object>> {\n\n    private ConcurrentHashMap<Class, Lambda> lambdaMap = new ConcurrentHashMap<>();\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    public ProtoBufSerializer() {\n        MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        MAPPER.registerModule(new SimpleModule().addSerializer(new NullValueSerializer(null)));\n        MAPPER.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n    }\n\n    @Override\n    public byte[] serialize(CacheWrapper<Object> obj) throws Exception {\n        WriteByteBuf byteBuf = new WriteByteBuf();\n        byteBuf.writeInt(obj.getExpire());\n        byteBuf.writeLong(obj.getLastLoadTime());\n        Object cacheObj = obj.getCacheObject();\n        if (cacheObj != null) {\n            if (cacheObj instanceof Message) {\n                byteBuf.writeBytes(((Message) cacheObj).toByteArray());\n            } else {\n                MAPPER.writeValue(byteBuf, cacheObj);\n            }\n        }\n        return byteBuf.toByteArray();\n    }\n\n\n    @Override\n    public CacheWrapper<Object> deserialize(final byte[] bytes, Type returnType) throws Exception {\n        if (bytes == null || bytes.length == 0) {\n            return null;\n        }\n        CacheWrapper<Object> cacheWrapper = new CacheWrapper<>();\n        ReadByteBuf byteBuf = new ReadByteBuf(bytes);\n        cacheWrapper.setExpire(byteBuf.readInt());\n        cacheWrapper.setLastLoadTime(byteBuf.readLong());\n        byte[] body = byteBuf.readableBytes();\n        if (body == null || body.length == 0) {\n            return cacheWrapper;\n        }\n        Class<?> clazz = TypeFactory.rawClass(returnType);\n        if (Message.class.isAssignableFrom(clazz)) {\n            Lambda lambda = getLambda(clazz);\n            Object obj = lambda.invoke_for_Object(new ByteArrayInputStream(body));\n            cacheWrapper.setCacheObject(obj);\n        } else {\n            Type[] agsType = new Type[]{returnType};\n            JavaType javaType = MAPPER.getTypeFactory().constructType(ParameterizedTypeImpl.make(CacheWrapper.class, agsType, null));\n            cacheWrapper.setCacheObject(MAPPER.readValue(body, clazz));\n        }\n        return cacheWrapper;\n    }\n\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object deepClone(Object obj, Type type) throws Exception {\n        if (null == obj) {\n            return null;\n        }\n        Class<?> clazz = obj.getClass();\n        if (BeanUtil.isPrimitive(obj) || clazz.isEnum() || obj instanceof Class || clazz.isAnnotation()\n                || clazz.isSynthetic()) {// \u5e38\u89c1\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\n            return obj;\n        }\n        if (obj instanceof Date) {\n            return ((Date) obj).clone();\n        } else if (obj instanceof Calendar) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTimeInMillis(((Calendar) obj).getTime().getTime());\n            return cal;\n        }\n        if (obj instanceof CacheWrapper) {\n            CacheWrapper<Object> wrapper = (CacheWrapper<Object>) obj;\n            CacheWrapper<Object> res = new CacheWrapper<>();\n            res.setExpire(wrapper.getExpire());\n            res.setLastLoadTime(wrapper.getLastLoadTime());\n            res.setCacheObject(deepClone(wrapper.getCacheObject(), null));\n            return res;\n        }\n        if (obj instanceof Message) {\n            return ((Message) obj).toBuilder().build();\n        }\n        return MAPPER.readValue(MAPPER.writeValueAsBytes(obj), clazz);\n    }\n\n\n    @Override\n    public Object[] deepCloneMethodArgs(Method method, Object[] args) throws Exception {", "right_context": "}\n\n    @SuppressWarnings(\"unchecked\")\n    private Lambda getLambda(Class clazz) throws NoSuchMethodException {\n        Lambda lambda = lambdaMap.get(clazz);\n        if (lambda == null) {\n            Method method = clazz.getDeclaredMethod(\"parseFrom\", InputStream.class);\n            try {\n                lambda = LambdaFactory.create(method);\n                lambdaMap.put(clazz, lambda);\n            } catch (Throwable throwable) {\n                throwable.printStackTrace();\n            }\n        }\n        return lambda;\n    }\n\n    private class NullValueSerializer extends StdSerializer<NullValue> {\n\n        private static final long serialVersionUID = 1999052150548658808L;\n\n        private final String classIdentifier;\n\n        /**\n         * @param classIdentifier can be {@literal null} and will be defaulted\n         *                        to {@code @class}.\n         */\n        NullValueSerializer(String classIdentifier) {\n\n            super(NullValue.class);\n            this.classIdentifier = StringUtil.hasText(classIdentifier) ? classIdentifier : \"@class\";\n        }\n\n        /*\n         * (non-Javadoc)\n         * @see\n         * com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.\n         * lang.Object, com.fasterxml.jackson.core.JsonGenerator,\n         * com.fasterxml.jackson.databind.SerializerProvider)\n         */\n        @Override\n        public void serialize(NullValue value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n\n            jgen.writeStartObject();\n            jgen.writeStringField(classIdentifier, NullValue.class.getName());\n            jgen.writeEndObject();\n        }\n    }\n}", "class_name": "ProtoBufSerializer", "return_type": "Object[]", "parameters": [{"type": "Method", "name": "method"}, {"type": "Object[]", "name": "args"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StringUtil {\n    /**\n     * Check whether the given {@code CharSequence} contains actual <em>text</em>.\n     * <p>More specifically, this method returns {@code true} if the\n     * {@code CharSequence} is not {@code null}, its length is greater than\n     * 0, and it contains at least one non-whitespace character.\n     * <p><pre class=\"code\">\n     * StringUtils.hasText(null) = false\n     * StringUtils.hasText(\"\") = false\n     * StringUtils.hasText(\" \") = false\n     * StringUtils.hasText(\"12345\") = true\n     * StringUtils.hasText(\" 12345 \") = true\n     * </pre>\n     * @param str the {@code CharSequence} to check (may be {@code null})\n     * @return {@code true} if the {@code CharSequence} is not {@code null},\n     * its length is greater than 0, and it does not contain whitespace only\n     * @see Character#isWhitespace\n     */\n    public static boolean hasText(CharSequence str) {\n        return (str != null && str.length() > 0 && containsText(str));\n    }\n\n    /**\n     * Check whether the given {@code String} contains actual <em>text</em>.\n     * <p>More specifically, this method returns {@code true} if the\n     * {@code String} is not {@code null}, its length is greater than 0,\n     * and it contains at least one non-whitespace character.\n     * @param str the {@code String} to check (may be {@code null})\n     * @return {@code true} if the {@code String} is not {@code null}, its\n     * length is greater than 0, and it does not contain whitespace only\n     * @see #hasText(CharSequence)\n     */\n    public static boolean hasText(String str) {\n        return (str != null && !str.isEmpty() && containsText(str));\n    }\n\n    private static boolean containsText(CharSequence str) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/435", "ground_truth": "\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-common", "src", "main", "java", "com", "jarvis", "lib", "util", "StringUtil.java"], "context_start_lineno": 0, "function_name": "containsText", "left_context": "class StringUtil {\n    /**\n     * Check whether the given {@code CharSequence} contains actual <em>text</em>.\n     * <p>More specifically, this method returns {@code true} if the\n     * {@code CharSequence} is not {@code null}, its length is greater than\n     * 0, and it contains at least one non-whitespace character.\n     * <p><pre class=\"code\">\n     * StringUtils.hasText(null) = false\n     * StringUtils.hasText(\"\") = false\n     * StringUtils.hasText(\" \") = false\n     * StringUtils.hasText(\"12345\") = true\n     * StringUtils.hasText(\" 12345 \") = true\n     * </pre>\n     * @param str the {@code CharSequence} to check (may be {@code null})\n     * @return {@code true} if the {@code CharSequence} is not {@code null},\n     * its length is greater than 0, and it does not contain whitespace only\n     * @see Character#isWhitespace\n     */\n    public static boolean hasText(CharSequence str) {\n        return (str != null && str.length() > 0 && containsText(str));\n    }\n\n    /**\n     * Check whether the given {@code String} contains actual <em>text</em>.\n     * <p>More specifically, this method returns {@code true} if the\n     * {@code String} is not {@code null}, its length is greater than 0,\n     * and it contains at least one non-whitespace character.\n     * @param str the {@code String} to check (may be {@code null})\n     * @return {@code true} if the {@code String} is not {@code null}, its\n     * length is greater than 0, and it does not contain whitespace only\n     * @see #hasText(CharSequence)\n     */\n    public static boolean hasText(String str) {\n        return (str != null && !str.isEmpty() && containsText(str));\n    }\n\n    private static boolean containsText(CharSequence str) {", "right_context": "}\n}", "class_name": "StringUtil", "return_type": "boolean", "parameters": [{"type": "CharSequence", "name": "str"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CacheDeleteInterceptor implements MethodInterceptor {\n\n    private static final Logger logger = LoggerFactory.getLogger(CacheDeleteInterceptor.class);\n\n    private final CacheHandler cacheHandler;\n\n    private final AutoloadCacheProperties config;\n\n    public CacheDeleteInterceptor(CacheHandler cacheHandler, AutoloadCacheProperties config) {\n        this.cacheHandler = cacheHandler;\n        this.config = config;\n    }\n\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/466", "ground_truth": "\n        if (!this.config.isEnable()) {\n            return invocation.proceed();\n        }\n        Method method = invocation.getMethod();\n        // if (method.getDeclaringClass().isInterface()) {\n        Class<?> cls = AopUtil.getTargetClass(invocation.getThis());\n        if (!cls.equals(invocation.getThis().getClass())) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(invocation.getThis().getClass() + \"-->\" + cls);\n            }\n            return invocation.proceed();\n        }\n        // }\n        Object result = invocation.proceed();\n        if (method.isAnnotationPresent(CacheDelete.class)) {\n            CacheDelete cacheDelete = method.getAnnotation(CacheDelete.class);\n            if (logger.isDebugEnabled()) {\n                logger.debug(invocation.getThis().getClass().getName() + \".\" + method.getName() + \"-->@CacheDelete\");\n            }\n            cacheHandler.deleteCache(new DeleteCacheAopProxy(invocation), cacheDelete, result);\n        } else {\n            Method specificMethod = AopUtils.getMostSpecificMethod(method, invocation.getThis().getClass());\n            if (specificMethod.isAnnotationPresent(CacheDelete.class)) {\n                CacheDelete cacheDelete = specificMethod.getAnnotation(CacheDelete.class);\n                if (logger.isDebugEnabled()) {\n                    logger.debug(invocation.getThis().getClass().getName() + \".\" + specificMethod.getName()\n                            + \"-->@CacheDelete\");\n                }\n                cacheHandler.deleteCache(new DeleteCacheAopProxy(invocation), cacheDelete, result);\n            }\n        }\n        return result;\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-spring-boot-starter", "src", "main", "java", "com", "jarvis", "cache", "interceptor", "CacheDeleteInterceptor.java"], "context_start_lineno": 0, "function_name": "invoke", "left_context": "class CacheDeleteInterceptor implements MethodInterceptor {\n\n    private static final Logger logger = LoggerFactory.getLogger(CacheDeleteInterceptor.class);\n\n    private final CacheHandler cacheHandler;\n\n    private final AutoloadCacheProperties config;\n\n    public CacheDeleteInterceptor(CacheHandler cacheHandler, AutoloadCacheProperties config) {\n        this.cacheHandler = cacheHandler;\n        this.config = config;\n    }\n\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {", "right_context": "}\n\n}", "class_name": "CacheDeleteInterceptor", "return_type": "Object", "parameters": [{"type": "MethodInvocation", "name": "invocation"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ParameterizedTypeImpl implements ParameterizedType {\n\n    private Type[] actualTypeArguments;\n\n    private Class<?> rawType;\n\n    private Type ownerType;\n\n    private ParameterizedTypeImpl(Class<?> paramClass, Type[] paramArrayOfType, Type paramType) {\n        this.actualTypeArguments = paramArrayOfType;\n        this.rawType = paramClass;\n        if (paramType != null) {\n            this.ownerType = paramType;\n        } else {\n            this.ownerType = paramClass.getDeclaringClass();\n        }\n        validateConstructorArguments();\n    }\n\n    private void validateConstructorArguments() {<FILL_FUNCTION_BODY>}\n\n    public static ParameterizedTypeImpl make(Class<?> paramClass, Type[] paramArrayOfType, Type paramType) {\n        return new ParameterizedTypeImpl(paramClass, paramArrayOfType, paramType);\n    }\n\n    @Override\n    public Type[] getActualTypeArguments() {\n        return (Type[]) this.actualTypeArguments.clone();\n    }\n\n    @Override\n    public Class<?> getRawType() {\n        return this.rawType;\n    }\n\n    @Override\n    public Type getOwnerType() {\n        return this.ownerType;\n    }\n\n    @Override\n    public boolean equals(Object paramObject) {\n        if ((paramObject instanceof ParameterizedType)) {\n            ParameterizedType localParameterizedType = (ParameterizedType) paramObject;\n\n            if (this == localParameterizedType) {\n                return true;\n            }\n            Type localType1 = localParameterizedType.getOwnerType();\n            Type localType2 = localParameterizedType.getRawType();\n\n            return (this.ownerType == null ? localType1 == null : this.ownerType.equals(localType1))\n                    && (this.rawType == null ? localType2 == null : this.rawType.equals(localType2))\n                    && (Arrays.equals(this.actualTypeArguments, localParameterizedType.getActualTypeArguments()));\n        }\n\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return Arrays.hashCode(this.actualTypeArguments) ^ (this.ownerType == null ? 0 : this.ownerType.hashCode())\n                ^ (this.rawType == null ? 0 : this.rawType.hashCode());\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder localStringBuilder = new StringBuilder();\n\n        if (this.ownerType != null) {\n            if ((this.ownerType instanceof Class<?>))\n                localStringBuilder.append(((Class<?>) this.ownerType).getName());\n            else {\n                localStringBuilder.append(this.ownerType.toString());\n            }\n            localStringBuilder.append(\".\");\n\n            if ((this.ownerType instanceof ParameterizedTypeImpl)) {\n                localStringBuilder.append(this.rawType.getName()\n                        .replace(((ParameterizedTypeImpl) this.ownerType).rawType.getName() + \"$\", \"\"));\n            } else {\n                localStringBuilder.append(this.rawType.getName());\n            }\n        } else {\n            localStringBuilder.append(this.rawType.getName());\n        }\n        if ((this.actualTypeArguments != null) && (this.actualTypeArguments.length > 0)) {\n            localStringBuilder.append(\"<\");\n            int i = 1;\n            for (Type localType : this.actualTypeArguments) {\n                if (i == 0) {\n                    localStringBuilder.append(\", \");\n                }\n                if ((localType instanceof Class<?>)) {\n                    localStringBuilder.append(((Class<?>) localType).getName());\n                } else {\n                    // if(null!=localType){\n                    localStringBuilder.append(localType.toString());\n                    // }\n                }\n\n                i = 0;\n            }\n            localStringBuilder.append(\">\");\n        }\n\n        return localStringBuilder.toString();\n    }\n\n}", "metadata": {"task_id": "qiujiayu_AutoLoadCache/476", "ground_truth": "\n        @SuppressWarnings(\"rawtypes\")\n        TypeVariable[] arrayOfTypeVariable = this.rawType.getTypeParameters();\n\n        if (arrayOfTypeVariable.length != this.actualTypeArguments.length) {\n            throw new MalformedParameterizedTypeException();\n        }\n        // for(int i=0; i < this.actualTypeArguments.length; i++);\n    ", "fpath_tuple": ["qiujiayu_AutoLoadCache", "AutoLoadCache", "autoload-cache-common", "src", "main", "java", "com", "jarvis", "cache", "reflect", "generics", "ParameterizedTypeImpl.java"], "context_start_lineno": 0, "function_name": "validateConstructorArguments", "left_context": "class ParameterizedTypeImpl implements ParameterizedType {\n\n    private Type[] actualTypeArguments;\n\n    private Class<?> rawType;\n\n    private Type ownerType;\n\n    private ParameterizedTypeImpl(Class<?> paramClass, Type[] paramArrayOfType, Type paramType) {\n        this.actualTypeArguments = paramArrayOfType;\n        this.rawType = paramClass;\n        if (paramType != null) {\n            this.ownerType = paramType;\n        } else {\n            this.ownerType = paramClass.getDeclaringClass();\n        }\n        validateConstructorArguments();\n    }\n\n    private void validateConstructorArguments() {", "right_context": "}\n\n    public static ParameterizedTypeImpl make(Class<?> paramClass, Type[] paramArrayOfType, Type paramType) {\n        return new ParameterizedTypeImpl(paramClass, paramArrayOfType, paramType);\n    }\n\n    @Override\n    public Type[] getActualTypeArguments() {\n        return (Type[]) this.actualTypeArguments.clone();\n    }\n\n    @Override\n    public Class<?> getRawType() {\n        return this.rawType;\n    }\n\n    @Override\n    public Type getOwnerType() {\n        return this.ownerType;\n    }\n\n    @Override\n    public boolean equals(Object paramObject) {\n        if ((paramObject instanceof ParameterizedType)) {\n            ParameterizedType localParameterizedType = (ParameterizedType) paramObject;\n\n            if (this == localParameterizedType) {\n                return true;\n            }\n            Type localType1 = localParameterizedType.getOwnerType();\n            Type localType2 = localParameterizedType.getRawType();\n\n            return (this.ownerType == null ? localType1 == null : this.ownerType.equals(localType1))\n                    && (this.rawType == null ? localType2 == null : this.rawType.equals(localType2))\n                    && (Arrays.equals(this.actualTypeArguments, localParameterizedType.getActualTypeArguments()));\n        }\n\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return Arrays.hashCode(this.actualTypeArguments) ^ (this.ownerType == null ? 0 : this.ownerType.hashCode())\n                ^ (this.rawType == null ? 0 : this.rawType.hashCode());\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder localStringBuilder = new StringBuilder();\n\n        if (this.ownerType != null) {\n            if ((this.ownerType instanceof Class<?>))\n                localStringBuilder.append(((Class<?>) this.ownerType).getName());\n            else {\n                localStringBuilder.append(this.ownerType.toString());\n            }\n            localStringBuilder.append(\".\");\n\n            if ((this.ownerType instanceof ParameterizedTypeImpl)) {\n                localStringBuilder.append(this.rawType.getName()\n                        .replace(((ParameterizedTypeImpl) this.ownerType).rawType.getName() + \"$\", \"\"));\n            } else {\n                localStringBuilder.append(this.rawType.getName());\n            }\n        } else {\n            localStringBuilder.append(this.rawType.getName());\n        }\n        if ((this.actualTypeArguments != null) && (this.actualTypeArguments.length > 0)) {\n            localStringBuilder.append(\"<\");\n            int i = 1;\n            for (Type localType : this.actualTypeArguments) {\n                if (i == 0) {\n                    localStringBuilder.append(\", \");\n                }\n                if ((localType instanceof Class<?>)) {\n                    localStringBuilder.append(((Class<?>) localType).getName());\n                } else {\n                    // if(null!=localType){\n                    localStringBuilder.append(localType.toString());\n                    // }\n                }\n\n                i = 0;\n            }\n            localStringBuilder.append(\">\");\n        }\n\n        return localStringBuilder.toString();\n    }\n\n}", "class_name": "ParameterizedTypeImpl", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Device extends DockerObject implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @JsonProperty(\"CgroupPermissions\")\n    private String cGroupPermissions = \"\";\n\n    @JsonProperty(\"PathOnHost\")\n    private String pathOnHost = null;\n\n    @JsonProperty(\"PathInContainer\")\n    private String pathInContainer = null;\n\n    public Device() {\n    }\n\n    public Device(String cGroupPermissions, String pathInContainer, String pathOnHost) {\n        requireNonNull(cGroupPermissions, \"cGroupPermissions is null\");\n        requireNonNull(pathInContainer, \"pathInContainer is null\");\n        requireNonNull(pathOnHost, \"pathOnHost is null\");\n        this.cGroupPermissions = cGroupPermissions;\n        this.pathInContainer = pathInContainer;\n        this.pathOnHost = pathOnHost;\n    }\n\n    public String getcGroupPermissions() {\n        return cGroupPermissions;\n    }\n\n    public String getPathInContainer() {\n        return pathInContainer;\n    }\n\n    public String getPathOnHost() {\n        return pathOnHost;\n    }\n\n    /**\n     * @link https://github.com/docker/docker/blob/6b4a46f28266031ce1a1315f17fb69113a06efe1/runconfig/opts/parse_test.go#L468\n     */\n    @Nonnull\n    public static Device parse(@Nonnull String deviceStr) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * ValidDeviceMode checks if the mode for device is valid or not.\n     * Valid mode is a composition of r (read), w (write), and m (mknod).\n     *\n     * @link https://github.com/docker/docker/blob/6b4a46f28266031ce1a1315f17fb69113a06efe1/runconfig/opts/parse.go#L796\n     */\n    private static boolean validDeviceMode(String deviceMode) {\n        Map<String, Boolean> validModes = new HashMap<>(3);\n        validModes.put(\"r\", true);\n        validModes.put(\"w\", true);\n        validModes.put(\"m\", true);\n\n        if (deviceMode == null || deviceMode.length() == 0) {\n            return false;\n        }\n\n        for (char ch : deviceMode.toCharArray()) {\n            final String mode = String.valueOf(ch);\n            if (!Boolean.TRUE.equals(validModes.get(mode))) {\n                return false; // wrong mode\n            }\n            validModes.put(mode, false);\n        }\n\n        return true;\n    }\n}", "metadata": {"task_id": "docker-java_docker-java/2", "ground_truth": "\n        String src = \"\";\n        String dst = \"\";\n        String permissions = \"rwm\";\n        final String[] arr = deviceStr.trim().split(\":\");\n        // java String.split() returns wrong length, use tokenizer instead\n        switch (new StringTokenizer(deviceStr, \":\").countTokens()) {\n            case 3: {\n                // Mismatches docker code logic. While there is no validations after parsing, checking heregit\n                if (validDeviceMode(arr[2])) {\n                    permissions = arr[2];\n                } else {\n                    throw new IllegalArgumentException(\"Invalid device specification: \" + deviceStr);\n                }\n            }\n            case 2: {\n                if (validDeviceMode(arr[1])) {\n                    permissions = arr[1];\n                } else {\n                    dst = arr[1];\n                }\n            }\n            case 1: {\n                src = arr[0];\n                break;\n            }\n            default: {\n                throw new IllegalArgumentException(\"Invalid device specification: \" + deviceStr);\n            }\n        }\n\n        if (dst == null || dst.length() == 0) {\n            dst = src;\n        }\n\n        return new Device(permissions, dst, src);\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-api", "src", "main", "java", "com", "github", "dockerjava", "api", "model", "Device.java"], "context_start_lineno": 0, "function_name": "parse", "left_context": "class Device extends DockerObject implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @JsonProperty(\"CgroupPermissions\")\n    private String cGroupPermissions = \"\";\n\n    @JsonProperty(\"PathOnHost\")\n    private String pathOnHost = null;\n\n    @JsonProperty(\"PathInContainer\")\n    private String pathInContainer = null;\n\n    public Device() {\n    }\n\n    public Device(String cGroupPermissions, String pathInContainer, String pathOnHost) {\n        requireNonNull(cGroupPermissions, \"cGroupPermissions is null\");\n        requireNonNull(pathInContainer, \"pathInContainer is null\");\n        requireNonNull(pathOnHost, \"pathOnHost is null\");\n        this.cGroupPermissions = cGroupPermissions;\n        this.pathInContainer = pathInContainer;\n        this.pathOnHost = pathOnHost;\n    }\n\n    public String getcGroupPermissions() {\n        return cGroupPermissions;\n    }\n\n    public String getPathInContainer() {\n        return pathInContainer;\n    }\n\n    public String getPathOnHost() {\n        return pathOnHost;\n    }\n\n    /**\n     * @link https://github.com/docker/docker/blob/6b4a46f28266031ce1a1315f17fb69113a06efe1/runconfig/opts/parse_test.go#L468\n     */\n    @Nonnull\n    public static Device parse(@Nonnull String deviceStr) {", "right_context": "}\n\n    /**\n     * ValidDeviceMode checks if the mode for device is valid or not.\n     * Valid mode is a composition of r (read), w (write), and m (mknod).\n     *\n     * @link https://github.com/docker/docker/blob/6b4a46f28266031ce1a1315f17fb69113a06efe1/runconfig/opts/parse.go#L796\n     */\n    private static boolean validDeviceMode(String deviceMode) {\n        Map<String, Boolean> validModes = new HashMap<>(3);\n        validModes.put(\"r\", true);\n        validModes.put(\"w\", true);\n        validModes.put(\"m\", true);\n\n        if (deviceMode == null || deviceMode.length() == 0) {\n            return false;\n        }\n\n        for (char ch : deviceMode.toCharArray()) {\n            final String mode = String.valueOf(ch);\n            if (!Boolean.TRUE.equals(validModes.get(mode))) {\n                return false; // wrong mode\n            }\n            validModes.put(mode, false);\n        }\n\n        return true;\n    }\n}", "class_name": "Device", "return_type": "Device", "parameters": [{"type": "String", "name": "deviceStr"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(PauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/pause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PingCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(PingCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/_ping\");\n//   LOGGER.trace(\"GET: {}\",webResource);\n//   try {\n//     webResource.request().get().close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveConfigCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveConfigCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/configs/\" + command.getConfigId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveContainerCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/\" + command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"v\",command.hasRemoveVolumesEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"noprune\",command.hasNoPruneEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveNetworkCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveNetworkCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/networks/\" + command.getNetworkId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSecretCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSecretCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/secrets/\" + command.getSecretId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveServiceCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/services/\" + command.getServiceId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSwarmNodeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/nodes/\" + command.getSwarmNodeId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveVolumeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveVolumeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/volumes/\" + command.getName());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RenameContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RenameContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/rename\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"name\",command.getName());\n//   LOG.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/resize\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UnpauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UnpauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StartContainerCmdExec extends AbstrSyncDockerCmdExec<StartContainerCmd, Void> implements\n        StartContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(StartContainerCmdExec.class);\n\n    public StartContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(StartContainerCmd command) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "docker-java_docker-java/89", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",\n                command.getContainerId());\n\n        LOGGER.trace(\"POST: {}\", webResource);\n        try {\n            webResource.request()\n                    .accept(MediaType.APPLICATION_JSON)\n                    .post(null)\n                    .close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "StartContainerCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class StartContainerCmdExec extends AbstrSyncDockerCmdExec<StartContainerCmd, Void> implements\n        StartContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(StartContainerCmdExec.class);\n\n    public StartContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(StartContainerCmd command) {", "right_context": "}\n\n}", "class_name": "StartContainerCmdExec", "return_type": "Void", "parameters": [{"type": "StartContainerCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ListImagesCmdExec extends AbstrSyncDockerCmdExec<ListImagesCmd, List<Image>> implements ListImagesCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ListImagesCmdExec.class);\n\n    public ListImagesCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected List<Image> execute(ListImagesCmd command) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/104", "ground_truth": "\n        WebTarget webTarget = getBaseResource().path(\"/images/json\");\n\n        webTarget = booleanQueryParam(webTarget, \"all\", command.hasShowAllEnabled());\n\n        if (command.getFilters() != null && !command.getFilters().isEmpty()) {\n            webTarget = webTarget.queryParam(\"filters\", FiltersEncoder.jsonEncode(command.getFilters()));\n        }\n\n       if (command.getImageNameFilter() != null) {\n            webTarget = webTarget.queryParam(\"filter\", command.getImageNameFilter());\n       }\n\n        LOGGER.trace(\"GET: {}\", webTarget);\n\n        List<Image> images = webTarget.request().accept(MediaType.APPLICATION_JSON)\n                .get(new TypeReference<List<Image>>() {\n                });\n\n        LOGGER.trace(\"Response: {}\", images);\n\n        return images;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "ListImagesCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class ListImagesCmdExec extends AbstrSyncDockerCmdExec<ListImagesCmd, List<Image>> implements ListImagesCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ListImagesCmdExec.class);\n\n    public ListImagesCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected List<Image> execute(ListImagesCmd command) {", "right_context": "}\n}", "class_name": "ListImagesCmdExec", "return_type": "List<Image>", "parameters": [{"type": "ListImagesCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(PauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/pause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PingCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(PingCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/_ping\");\n//   LOGGER.trace(\"GET: {}\",webResource);\n//   try {\n//     webResource.request().get().close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveConfigCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveConfigCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/configs/\" + command.getConfigId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveContainerCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/\" + command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"v\",command.hasRemoveVolumesEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"noprune\",command.hasNoPruneEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveNetworkCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveNetworkCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/networks/\" + command.getNetworkId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSecretCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSecretCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/secrets/\" + command.getSecretId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveServiceCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/services/\" + command.getServiceId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSwarmNodeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/nodes/\" + command.getSwarmNodeId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveVolumeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveVolumeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/volumes/\" + command.getName());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RenameContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RenameContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/rename\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"name\",command.getName());\n//   LOG.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/resize\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UnpauseContainerCmdExec extends AbstrSyncDockerCmdExec<UnpauseContainerCmd, Void> implements\n        UnpauseContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(UnpauseContainerCmdExec.class);\n\n    public UnpauseContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(UnpauseContainerCmd command) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "docker-java_docker-java/152", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",\n                command.getContainerId());\n\n        LOGGER.trace(\"POST: {}\", webResource);\n        try {\n            webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "UnpauseContainerCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class UnpauseContainerCmdExec extends AbstrSyncDockerCmdExec<UnpauseContainerCmd, Void> implements\n        UnpauseContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(UnpauseContainerCmdExec.class);\n\n    public UnpauseContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(UnpauseContainerCmd command) {", "right_context": "}\n\n}", "class_name": "UnpauseContainerCmdExec", "return_type": "Void", "parameters": [{"type": "UnpauseContainerCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClient.java\n// --------------------------------------------------\n// ResizeExecCmd resizeExecCmd(@Nonnull String execId);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClientDelegate.java\n// --------------------------------------------------\n// @Override public ResizeExecCmd resizeExecCmd(@Nonnull String execId){\n//   return getDockerClient().resizeExecCmd(execId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/DockerClientImpl.java\n// --------------------------------------------------\n// @Override public ResizeExecCmd resizeExecCmd(@Nonnull String execId){\n//   return new ResizeExecCmdImpl(getDockerCmdExecFactory().createResizeExecCmdExec(),execId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/ResizeExecCmd.java\n// --------------------------------------------------\n// ResizeExecCmd withSize(int height,int width);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/ResizeExecCmd.java\n// --------------------------------------------------\n// ResizeExecCmd withExecId(@Nonnull String execId);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ResizeExecCmdImpl extends AbstrDockerCmd<ResizeExecCmd, Void> implements ResizeExecCmd {\n\n    private String execId;\n\n    private Integer height;\n\n    private Integer width;\n\n    public ResizeExecCmdImpl(ResizeExecCmd.Exec exec, String execId) {\n        super(exec);\n        withExecId(execId);\n    }\n\n    @Override\n    public String getExecId() {\n        return execId;\n    }\n\n    @Override\n    public Integer getHeight() {\n        return height;\n    }\n\n    @Override\n    public Integer getWidth() {\n        return width;\n    }\n\n    @Override\n    public ResizeExecCmd withExecId(String execId) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public ResizeExecCmd withSize(int height, int width) {\n        this.height = height;\n        this.width = width;\n        return this;\n    }\n\n    /**\n     * @throws NotFoundException no such exec instance\n     */\n    @Override\n    public Void exec() throws NotFoundException {\n        return super.exec();\n    }\n\n}", "metadata": {"task_id": "docker-java_docker-java/205", "ground_truth": "\n        this.execId = Objects.requireNonNull(execId, \"execId was not specified\");\n        return this;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "command", "ResizeExecCmdImpl.java"], "context_start_lineno": 0, "function_name": "withExecId", "left_context": "class ResizeExecCmdImpl extends AbstrDockerCmd<ResizeExecCmd, Void> implements ResizeExecCmd {\n\n    private String execId;\n\n    private Integer height;\n\n    private Integer width;\n\n    public ResizeExecCmdImpl(ResizeExecCmd.Exec exec, String execId) {\n        super(exec);\n        withExecId(execId);\n    }\n\n    @Override\n    public String getExecId() {\n        return execId;\n    }\n\n    @Override\n    public Integer getHeight() {\n        return height;\n    }\n\n    @Override\n    public Integer getWidth() {\n        return width;\n    }\n\n    @Override\n    public ResizeExecCmd withExecId(String execId) {", "right_context": "}\n\n    @Override\n    public ResizeExecCmd withSize(int height, int width) {\n        this.height = height;\n        this.width = width;\n        return this;\n    }\n\n    /**\n     * @throws NotFoundException no such exec instance\n     */\n    @Override\n    public Void exec() throws NotFoundException {\n        return super.exec();\n    }\n\n}", "class_name": "ResizeExecCmdImpl", "return_type": "ResizeExecCmd", "parameters": [{"type": "String", "name": "execId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClient.java\n// --------------------------------------------------\n// InspectContainerCmd inspectContainerCmd(@Nonnull String containerId);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClientDelegate.java\n// --------------------------------------------------\n// @Override public InspectContainerCmd inspectContainerCmd(@Nonnull String containerId){\n//   return getDockerClient().inspectContainerCmd(containerId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/DockerClientImpl.java\n// --------------------------------------------------\n// @Override public InspectContainerCmd inspectContainerCmd(String containerId){\n//   return new InspectContainerCmdImpl(getDockerCmdExecFactory().createInspectContainerCmdExec(),containerId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/InspectContainerCmd.java\n// --------------------------------------------------\n// InspectContainerCmd withSize(Boolean showSize);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/InspectContainerCmd.java\n// --------------------------------------------------\n// InspectContainerCmd withContainerId(@Nonnull String containerId);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InspectContainerCmdImpl extends AbstrDockerCmd<InspectContainerCmd, InspectContainerResponse> implements\n        InspectContainerCmd {\n\n    private String containerId;\n    private boolean size;\n\n    public InspectContainerCmdImpl(InspectContainerCmd.Exec exec, String containerId) {\n        super(exec);\n        withContainerId(containerId);\n    }\n\n    @Override\n    public String getContainerId() {\n        return containerId;\n    }\n\n    @Override\n    public InspectContainerCmd withContainerId(String containerId) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public InspectContainerCmd withSize(Boolean showSize) {\n        this.size = showSize;\n        return this;\n    }\n\n    @Override\n    public Boolean getSize() {\n        return size;\n    }\n\n    /**\n     * @throws NotFoundException\n     *             No such container\n     */\n    @Override\n    public InspectContainerResponse exec() throws NotFoundException {\n        return super.exec();\n    }\n}", "metadata": {"task_id": "docker-java_docker-java/247", "ground_truth": "\n        this.containerId = Objects.requireNonNull(containerId, \"containerId was not specified\");\n        return this;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "command", "InspectContainerCmdImpl.java"], "context_start_lineno": 0, "function_name": "withContainerId", "left_context": "class InspectContainerCmdImpl extends AbstrDockerCmd<InspectContainerCmd, InspectContainerResponse> implements\n        InspectContainerCmd {\n\n    private String containerId;\n    private boolean size;\n\n    public InspectContainerCmdImpl(InspectContainerCmd.Exec exec, String containerId) {\n        super(exec);\n        withContainerId(containerId);\n    }\n\n    @Override\n    public String getContainerId() {\n        return containerId;\n    }\n\n    @Override\n    public InspectContainerCmd withContainerId(String containerId) {", "right_context": "}\n\n    @Override\n    public InspectContainerCmd withSize(Boolean showSize) {\n        this.size = showSize;\n        return this;\n    }\n\n    @Override\n    public Boolean getSize() {\n        return size;\n    }\n\n    /**\n     * @throws NotFoundException\n     *             No such container\n     */\n    @Override\n    public InspectContainerResponse exec() throws NotFoundException {\n        return super.exec();\n    }\n}", "class_name": "InspectContainerCmdImpl", "return_type": "InspectContainerCmd", "parameters": [{"type": "String", "name": "containerId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BuildImageResultCallback extends ResultCallbackTemplate<BuildImageResultCallback, BuildResponseItem> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BuildImageResultCallback.class);\n\n    private String imageId;\n\n    private String error;\n\n    @Override\n    public void onNext(BuildResponseItem item) {\n        if (item.isBuildSuccessIndicated()) {\n            this.imageId = item.getImageId();\n        } else if (item.isErrorIndicated()) {\n            this.error = item.getError();\n        }\n        LOGGER.debug(item.toString());\n    }\n\n    /**\n     * Awaits the image id from the response stream.\n     *\n     * @throws DockerClientException\n     *             if the build fails.\n     */\n    public String awaitImageId() {\n        try {\n            awaitCompletion();\n        } catch (InterruptedException e) {\n            throw new DockerClientException(\"\", e);\n        }\n\n        return getImageId();\n    }\n\n    /**\n     * Awaits the image id from the response stream.\n     *\n     * @throws DockerClientException\n     *             if the build fails or the timeout occurs.\n     */\n    public String awaitImageId(long timeout, TimeUnit timeUnit) {\n        try {\n            awaitCompletion(timeout, timeUnit);\n        } catch (InterruptedException e) {\n            throw new DockerClientException(\"Awaiting image id interrupted: \", e);\n        }\n\n        return getImageId();\n    }\n\n    private String getImageId() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/298", "ground_truth": "\n        if (imageId != null) {\n            return imageId;\n        }\n\n        if (error == null) {\n            throw new DockerClientException(\"Could not build image\");\n        }\n\n        throw new DockerClientException(\"Could not build image: \" + error);\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "command", "BuildImageResultCallback.java"], "context_start_lineno": 0, "function_name": "getImageId", "left_context": "class BuildImageResultCallback extends ResultCallbackTemplate<BuildImageResultCallback, BuildResponseItem> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BuildImageResultCallback.class);\n\n    private String imageId;\n\n    private String error;\n\n    @Override\n    public void onNext(BuildResponseItem item) {\n        if (item.isBuildSuccessIndicated()) {\n            this.imageId = item.getImageId();\n        } else if (item.isErrorIndicated()) {\n            this.error = item.getError();\n        }\n        LOGGER.debug(item.toString());\n    }\n\n    /**\n     * Awaits the image id from the response stream.\n     *\n     * @throws DockerClientException\n     *             if the build fails.\n     */\n    public String awaitImageId() {\n        try {\n            awaitCompletion();\n        } catch (InterruptedException e) {\n            throw new DockerClientException(\"\", e);\n        }\n\n        return getImageId();\n    }\n\n    /**\n     * Awaits the image id from the response stream.\n     *\n     * @throws DockerClientException\n     *             if the build fails or the timeout occurs.\n     */\n    public String awaitImageId(long timeout, TimeUnit timeUnit) {\n        try {\n            awaitCompletion(timeout, timeUnit);\n        } catch (InterruptedException e) {\n            throw new DockerClientException(\"Awaiting image id interrupted: \", e);\n        }\n\n        return getImageId();\n    }\n\n    private String getImageId() {", "right_context": "}\n}", "class_name": "BuildImageResultCallback", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UnpauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UnpauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/AbstrAsyncDockerCmdExec.java\n// --------------------------------------------------\n// protected abstract Void execute0(final CMD_T command,final ResultCallback<A_RES_T> resultCallback);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/AttachContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(AttachContainerCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/attach\").resolveTemplate(\"id\",command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"logs\",command.hasLogsEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.hasStdoutEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.hasStderrEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdin\",command.getStdin() != null);\n//   webTarget=booleanQueryParam(webTarget,\"stream\",command.hasFollowStreamEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().post(null,command.getStdin(),resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/BuildImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(BuildImageCmd command,ResultCallback<BuildResponseItem> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/build\");\n//   String dockerFilePath=command.getPathToDockerfile();\n//   if (dockerFilePath != null && command.getRemote() == null && !\"Dockerfile\".equals(dockerFilePath)) {\n//     webTarget=webTarget.queryParam(\"dockerfile\",dockerFilePath);\n//   }\n//   if (command.getTags() != null && !command.getTags().isEmpty()) {\n//     webTarget=webTarget.queryParamsSet(\"t\",command.getTags());\n//   }\n//  else   if (isNotBlank(command.getTag())) {\n//     webTarget=webTarget.queryParam(\"t\",command.getTag());\n//   }\n//   if (command.getCacheFrom() != null && !command.getCacheFrom().isEmpty()) {\n//     webTarget=webTarget.queryParam(\"cachefrom\",jsonEncode(command.getCacheFrom()));\n//   }\n//   if (command.getRemote() != null) {\n//     webTarget=webTarget.queryParam(\"remote\",command.getRemote().toString());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"q\",command.isQuiet());\n//   webTarget=booleanQueryParam(webTarget,\"nocache\",command.hasNoCacheEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"pull\",command.hasPullEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"rm\",command.hasRemoveEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"forcerm\",command.isForcerm());\n//   if (command.hasRemoveEnabled() == null || !command.hasRemoveEnabled()) {\n//     webTarget=webTarget.queryParam(\"rm\",\"false\");\n//   }\n//   if (command.getMemory() != null) {\n//     webTarget=webTarget.queryParam(\"memory\",command.getMemory());\n//   }\n//   if (command.getMemswap() != null) {\n//     webTarget=webTarget.queryParam(\"memswap\",command.getMemswap());\n//   }\n//   if (command.getCpushares() != null) {\n//     webTarget=webTarget.queryParam(\"cpushares\",command.getCpushares());\n//   }\n//   if (command.getCpusetcpus() != null) {\n//     webTarget=webTarget.queryParam(\"cpusetcpus\",command.getCpusetcpus());\n//   }\n//   if (command.getBuildArgs() != null) {\n//     webTarget=webTarget.queryParamsJsonMap(\"buildargs\",command.getBuildArgs());\n//   }\n//   if (command.getShmsize() != null) {\n//     webTarget=webTarget.queryParam(\"shmsize\",command.getShmsize());\n//   }\n//   if (command.getLabels() != null) {\n//     webTarget=webTarget.queryParamsJsonMap(\"labels\",command.getLabels());\n//   }\n//   if (command.getNetworkMode() != null) {\n//     webTarget=webTarget.queryParam(\"networkmode\",command.getNetworkMode());\n//   }\n//   if (command.getPlatform() != null) {\n//     webTarget=webTarget.queryParam(\"platform\",command.getPlatform());\n//   }\n//   if (command.getTarget() != null) {\n//     webTarget=webTarget.queryParam(\"target\",command.getTarget());\n//   }\n//   if (command.getExtraHosts() != null) {\n//     webTarget=webTarget.queryParamsSet(\"extrahosts\",command.getExtraHosts());\n//   }\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   InvocationBuilder builder=resourceWithOptionalAuthConfig(command,webTarget.request()).accept(MediaType.APPLICATION_JSON).header(\"Content-Type\",\"application/tar\").header(\"encoding\",\"gzip\");\n//   builder.post(new TypeReference<BuildResponseItem>(){\n//   }\n// ,resultCallback,command.getTarInputStream());\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/EventsCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(EventsCmd command,ResultCallback<Event> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/events\").queryParam(\"since\",command.getSince()).queryParam(\"until\",command.getUntil());\n//   if (command.getFilters() != null && !command.getFilters().isEmpty()) {\n//     webTarget=webTarget.queryParam(\"filters\",FiltersEncoder.jsonEncode(command.getFilters()));\n//   }\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(new TypeReference<Event>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ExecStartCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(ExecStartCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/exec/{id}/start\").resolveTemplate(\"id\",command.getExecId());\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).post(command,command.getStdin(),resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LoadImageAsyncCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LoadImageAsyncCmd command,ResultCallback<LoadResponseItem> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/images/load\");\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().post(new TypeReference<LoadResponseItem>(){\n//   }\n// ,resultCallback,command.getImageStream());\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LogContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LogContainerCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/logs\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTail() != null) {\n//     webTarget=webTarget.queryParam(\"tail\",command.getTail());\n//   }\n//   if (command.getSince() != null) {\n//     webTarget=webTarget.queryParam(\"since\",command.getSince());\n//   }\n//   if (command.getUntil() != null) {\n//     webTarget=webTarget.queryParam(\"until\",command.getUntil());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"timestamps\",command.hasTimestampsEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.hasStdoutEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.hasStderrEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"follow\",command.hasFollowStreamEnabled());\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LogSwarmObjectExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LogSwarmObjectCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/\" + endpoint + \"/{id}/logs\").resolveTemplate(\"id\",command.getId());\n//   if (command.getTail() != null) {\n//     webTarget=webTarget.queryParam(\"tail\",command.getTail());\n//   }\n//  else {\n//     webTarget=webTarget.queryParam(\"tail\",\"all\");\n//   }\n//   if (command.getSince() != null) {\n//     webTarget=webTarget.queryParam(\"since\",command.getSince());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"timestamps\",command.getTimestamps());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.getStdout());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.getStderr());\n//   webTarget=booleanQueryParam(webTarget,\"follow\",command.getFollow());\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PushImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(PushImageCmd command,ResultCallback<PushResponseItem> resultCallback){\n//   WebTarget webResource=getBaseResource().path(\"/images/{imageName}/push\").resolveTemplate(\"imageName\",command.getName()).queryParam(\"tag\",command.getTag());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   InvocationBuilder builder=resourceWithAuthConfig(command.getAuthConfig(),webResource.request()).accept(MediaType.APPLICATION_JSON);\n//   builder.post(null,new TypeReference<PushResponseItem>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StatsCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(StatsCmd command,ResultCallback<Statistics> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/stats\").resolveTemplate(\"id\",command.getContainerId());\n//   if (Boolean.TRUE.equals(command.hasNoStream())) {\n//     webTarget=webTarget.queryParam(\"stream\",\"0\");\n//   }\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(new TypeReference<Statistics>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/WaitContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(WaitContainerCmd command,ResultCallback<WaitResponse> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/wait\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).post((Object)null,new TypeReference<WaitResponse>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PullImageCmdExec extends AbstrAsyncDockerCmdExec<PullImageCmd, PullResponseItem> implements\n        PullImageCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PullImageCmdExec.class);\n\n    public PullImageCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute0(PullImageCmd command, ResultCallback<PullResponseItem> resultCallback) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/304", "ground_truth": "\n\n        WebTarget webResource = getBaseResource().path(\"/images/create\").queryParam(\"tag\", command.getTag())\n                .queryParam(\"fromImage\", command.getRepository()).queryParam(\"registry\", command.getRegistry());\n\n        if (command.getPlatform() != null) {\n            webResource = webResource.queryParam(\"platform\", command.getPlatform());\n        }\n\n        LOGGER.trace(\"POST: {}\", webResource);\n        resourceWithOptionalAuthConfig(command.getAuthConfig(), webResource.request())\n                .accept(MediaType.APPLICATION_OCTET_STREAM)\n                .post(null, new TypeReference<PullResponseItem>() {\n                }, resultCallback);\n\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "PullImageCmdExec.java"], "context_start_lineno": 0, "function_name": "execute0", "left_context": "class PullImageCmdExec extends AbstrAsyncDockerCmdExec<PullImageCmd, PullResponseItem> implements\n        PullImageCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PullImageCmdExec.class);\n\n    public PullImageCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute0(PullImageCmd command, ResultCallback<PullResponseItem> resultCallback) {", "right_context": "}\n}", "class_name": "PullImageCmdExec", "return_type": "Void", "parameters": [{"type": "PullImageCmd", "name": "command"}, {"type": "ResultCallback<PullResponseItem>", "name": "resultCallback"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/model/TaskStatus.java\n// --------------------------------------------------\n// public TaskStatusContainerStatus getContainerStatus(){\n//   return containerStatus;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TaskStatusContainerStatus extends DockerObject implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @JsonProperty(\"ContainerID\")\n    private String containerID = null;\n\n    @JsonProperty(\"PID\")\n    private Long pid = null;\n\n    @JsonProperty(\"ExitCode\")\n    private Long exitCode = null;\n\n    public String getContainerID() {\n        return containerID;\n    }\n\n    /**\n     *\n     * @deprecated use {@link #getPidLong()}\n     */\n    @Deprecated\n    public Integer getPid() {\n        return pid != null ? pid.intValue() : null;\n    }\n\n    public Long getPidLong() {\n        return pid;\n    }\n\n    /**\n     * @deprecated use {@link #getExitCodeLong()}\n     */\n    @Deprecated\n    public Integer getExitCode() {\n        return exitCode != null ? exitCode.intValue() : null;\n    }\n\n    public Long getExitCodeLong() {\n        return exitCode;\n    }\n\n    public TaskStatusContainerStatus withContainerID(String containerID) {\n        this.containerID = containerID;\n        return this;\n    }\n\n    public TaskStatusContainerStatus withPid(Long pid) {\n        this.pid = pid;\n        return this;\n    }\n\n    /**\n     *\n     * @deprecated use {@link #withPid(Long)}\n     */\n    @Deprecated\n    public TaskStatusContainerStatus withPid(Integer pid) {<FILL_FUNCTION_BODY>}\n\n    public TaskStatusContainerStatus withExitCode(Long exitCode) {\n        this.exitCode = exitCode;\n        return this;\n    }\n\n    /**\n     *\n     * @deprecated use {@link #withExitCode(Long)}\n     */\n    @Deprecated\n    public TaskStatusContainerStatus withExitCode(Integer exitCode) {\n        this.exitCode = exitCode != null ? exitCode.longValue() : null;\n        return this;\n    }\n}", "metadata": {"task_id": "docker-java_docker-java/343", "ground_truth": "\n        this.pid = pid != null ? pid.longValue() : null;\n        return this;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-api", "src", "main", "java", "com", "github", "dockerjava", "api", "model", "TaskStatusContainerStatus.java"], "context_start_lineno": 0, "function_name": "withPid", "left_context": "class TaskStatusContainerStatus extends DockerObject implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @JsonProperty(\"ContainerID\")\n    private String containerID = null;\n\n    @JsonProperty(\"PID\")\n    private Long pid = null;\n\n    @JsonProperty(\"ExitCode\")\n    private Long exitCode = null;\n\n    public String getContainerID() {\n        return containerID;\n    }\n\n    /**\n     *\n     * @deprecated use {@link #getPidLong()}\n     */\n    @Deprecated\n    public Integer getPid() {\n        return pid != null ? pid.intValue() : null;\n    }\n\n    public Long getPidLong() {\n        return pid;\n    }\n\n    /**\n     * @deprecated use {@link #getExitCodeLong()}\n     */\n    @Deprecated\n    public Integer getExitCode() {\n        return exitCode != null ? exitCode.intValue() : null;\n    }\n\n    public Long getExitCodeLong() {\n        return exitCode;\n    }\n\n    public TaskStatusContainerStatus withContainerID(String containerID) {\n        this.containerID = containerID;\n        return this;\n    }\n\n    public TaskStatusContainerStatus withPid(Long pid) {\n        this.pid = pid;\n        return this;\n    }\n\n    /**\n     *\n     * @deprecated use {@link #withPid(Long)}\n     */\n    @Deprecated\n    public TaskStatusContainerStatus withPid(Integer pid) {", "right_context": "}\n\n    public TaskStatusContainerStatus withExitCode(Long exitCode) {\n        this.exitCode = exitCode;\n        return this;\n    }\n\n    /**\n     *\n     * @deprecated use {@link #withExitCode(Long)}\n     */\n    @Deprecated\n    public TaskStatusContainerStatus withExitCode(Integer exitCode) {\n        this.exitCode = exitCode != null ? exitCode.longValue() : null;\n        return this;\n    }\n}", "class_name": "TaskStatusContainerStatus", "return_type": "TaskStatusContainerStatus", "parameters": [{"type": "Integer", "name": "pid"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PingCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(PingCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/_ping\");\n//   LOGGER.trace(\"GET: {}\",webResource);\n//   try {\n//     webResource.request().get().close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveConfigCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveConfigCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/configs/\" + command.getConfigId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveContainerCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/\" + command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"v\",command.hasRemoveVolumesEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"noprune\",command.hasNoPruneEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveNetworkCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveNetworkCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/networks/\" + command.getNetworkId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSecretCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSecretCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/secrets/\" + command.getSecretId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveServiceCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/services/\" + command.getServiceId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSwarmNodeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/nodes/\" + command.getSwarmNodeId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveVolumeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveVolumeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/volumes/\" + command.getName());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RenameContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RenameContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/rename\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"name\",command.getName());\n//   LOG.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/resize\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UnpauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UnpauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CopyArchiveToContainerCmdExec extends AbstrSyncDockerCmdExec<CopyArchiveToContainerCmd, Void> implements\n        CopyArchiveToContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CopyArchiveFromContainerCmdExec.class);\n\n    public CopyArchiveToContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(CopyArchiveToContainerCmd command) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/346", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/containers/{id}/archive\").resolveTemplate(\"id\",\n                command.getContainerId());\n\n        LOGGER.trace(\"PUT: \" + webResource.toString());\n        InputStream streamToUpload = command.getTarInputStream();\n\n        webResource.queryParam(\"path\", command.getRemotePath())\n                .queryParam(\"noOverwriteDirNonDir\", command.isNoOverwriteDirNonDir())\n                .queryParam(\"copyUIDGID\", command.isCopyUIDGID())\n                .request()\n                .put(streamToUpload, MediaType.APPLICATION_X_TAR);\n\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "CopyArchiveToContainerCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class CopyArchiveToContainerCmdExec extends AbstrSyncDockerCmdExec<CopyArchiveToContainerCmd, Void> implements\n        CopyArchiveToContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CopyArchiveFromContainerCmdExec.class);\n\n    public CopyArchiveToContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(CopyArchiveToContainerCmd command) {", "right_context": "}\n}", "class_name": "CopyArchiveToContainerCmdExec", "return_type": "Void", "parameters": [{"type": "CopyArchiveToContainerCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-httpclient5/src/main/java/com/github/dockerjava/httpclient5/HijackingHttpRequestExecutor.java\n// --------------------------------------------------\n// @Override public InputStream getContent(){\n//   return inStream;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-jersey/src/main/java/com/github/dockerjava/jaxrs/ApacheUnixSocket.java\n// --------------------------------------------------\n// @Override public InputStream getInputStream() throws IOException {\n//   return inner.getInputStream();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-jersey/src/main/java/com/github/dockerjava/jaxrs/JerseyDockerHttpClient.java\n// --------------------------------------------------\n// @Override public InputStream getBody(){\n//   return response.hasEntity() ? response.readEntity(InputStream.class) : EmptyInputStream.INSTANCE;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-jersey/src/main/java/com/github/dockerjava/jaxrs/filter/LoggingFilter.java\n// --------------------------------------------------\n// private InputStream logInboundEntity(final StringBuilder b,InputStream stream) throws IOException {\n//   if (!stream.markSupported()) {\n//     stream=new BufferedInputStream(stream);\n//   }\n//   stream.mark(maxEntitySize + 1);\n//   final byte[] entity=new byte[maxEntitySize + 1];\n//   final int entitySize=Math.max(0,stream.read(entity));\n//   b.append(new String(entity,0,Math.min(entitySize,maxEntitySize)));\n//   if (entitySize > maxEntitySize) {\n//     b.append(\"...more...\");\n//   }\n//   b.append('\\n');\n//   stream.reset();\n//   return stream;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-netty/src/main/java/com/github/dockerjava/netty/NettyInvocationBuilder.java\n// --------------------------------------------------\n// public InputStream post(final Object entity){\n//   HttpRequestProvider requestProvider=httpPostRequestProvider(entity);\n//   Channel channel=getChannel();\n//   AsyncResultCallback<InputStream> callback=new AsyncResultCallback<>();\n//   HttpResponseHandler responseHandler=new HttpResponseHandler(requestProvider,callback);\n//   HttpResponseStreamHandler streamHandler=new HttpResponseStreamHandler(callback);\n//   channel.pipeline().addLast(responseHandler);\n//   channel.pipeline().addLast(streamHandler);\n//   sendRequest(requestProvider,channel);\n//   return callback.awaitResult();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-netty/src/main/java/com/github/dockerjava/netty/NettyInvocationBuilder.java\n// --------------------------------------------------\n// public InputStream get(){\n//   HttpRequestProvider requestProvider=httpGetRequestProvider();\n//   Channel channel=getChannel();\n//   AsyncResultCallback<InputStream> resultCallback=new AsyncResultCallback<>();\n//   HttpResponseHandler responseHandler=new HttpResponseHandler(requestProvider,resultCallback);\n//   HttpResponseStreamHandler streamHandler=new HttpResponseStreamHandler(resultCallback);\n//   channel.pipeline().addLast(responseHandler);\n//   channel.pipeline().addLast(streamHandler);\n//   sendRequest(requestProvider,channel);\n//   return resultCallback.awaitResult();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport-okhttp/src/main/java/com/github/dockerjava/okhttp/OkDockerHttpClient.java\n// --------------------------------------------------\n// @Override public InputStream getBody(){\n//   ResponseBody body=response.body();\n//   if (body == null) {\n//     return null;\n//   }\n//   return body.source().inputStream();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/src/main/java/com/github/dockerjava/transport/DockerHttpClient.java\n// --------------------------------------------------\n// InputStream getBody();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/src/main/java/com/github/dockerjava/transport/DockerHttpClient.java\n// --------------------------------------------------\n// @Nullable @Value.Default public InputStream body(){\n//   byte[] bodyBytes=bodyBytes();\n//   return bodyBytes != null ? new ByteArrayInputStream(bodyBytes) : null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/src/main/java/com/github/dockerjava/transport/DockerHttpClient.java\n// --------------------------------------------------\n// @Nullable public abstract InputStream hijackedInput();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/src/main/java/com/github/dockerjava/transport/DomainSocket.java\n// --------------------------------------------------\n// @Override public InputStream getInputStream(){\n//   return this.inputStream;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/src/main/java/com/github/dockerjava/transport/NamedPipeSocket.java\n// --------------------------------------------------\n// @Override public InputStream getInputStream(){\n//   return Channels.newInputStream(channel);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/src/main/java/com/github/dockerjava/transport/UnixSocket.java\n// --------------------------------------------------\n// @Override public InputStream getInputStream() throws IOException {\n//   if (isClosed()) {\n//     throw new SocketException(\"Socket is closed\");\n//   }\n//   if (!isConnected()) {\n//     throw new SocketException(\"Socket is not connected\");\n//   }\n//   if (isInputShutdown()) {\n//     throw new SocketException(\"Socket input is shutdown\");\n//   }\n//   return Channels.newInputStream(socketChannel);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/target/generated-sources/annotations/com/github/dockerjava/transport/ImmutableRequest.java\n// --------------------------------------------------\n// /** \n//  * @return The value of the {@code body} attribute\n//  */\n// @Override public @Nullable InputStream body(){\n//   return body;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-transport/target/generated-sources/annotations/com/github/dockerjava/transport/ImmutableRequest.java\n// --------------------------------------------------\n// /** \n//  * @return The value of the {@code hijackedInput} attribute\n//  */\n// @Override public @Nullable InputStream hijackedInput(){\n//   return hijackedInput;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java/src/test/java/com/github/dockerjava/cmd/TrackingDockerHttpClient.java\n// --------------------------------------------------\n// @Override public InputStream getBody(){\n//   return delegate.getBody();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java/src/test/java/com/github/dockerjava/netty/handler/HttpResponseStreamHandlerTest.java\n// --------------------------------------------------\n// private InputStream getInputStream(){\n//   return stream;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/CopyArchiveFromContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected InputStream execute(CopyArchiveFromContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/archive\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"Get: \" + webResource.toString());\n//   return webResource.queryParam(\"path\",command.getResource()).request().accept(MediaType.APPLICATION_X_TAR).get();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/SaveImageCmdExec.java\n// --------------------------------------------------\n// @Override protected InputStream execute(SaveImageCmd command){\n//   String name=command.getName();\n//   if (!Strings.isNullOrEmpty(command.getTag())) {\n//     name+=\":\" + command.getTag();\n//   }\n//   WebTarget webResource=getBaseResource().path(\"/images/\" + name + \"/get\");\n//   LOGGER.trace(\"GET: {}\",webResource);\n//   return webResource.request().accept(MediaType.APPLICATION_JSON).get();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/SaveImagesCmdExec.java\n// --------------------------------------------------\n// @Override protected InputStream execute(SaveImagesCmd command){\n//   final List<SaveImagesCmd.TaggedImage> images=command.getImages();\n//   if (images.isEmpty()) {\n//     LOGGER.warn(\"No images specified for \" + SaveImagesCmd.class.getName() + \".\");\n//   }\n//   final ImmutableSet.Builder<String> queryParamSet=ImmutableSet.builder();\n//   for (  SaveImagesCmd.TaggedImage image : images) {\n//     queryParamSet.add(image.asString());\n//   }\n//   final WebTarget webResource=getBaseResource().path(\"/images/get\").queryParamsSet(\"names\",queryParamSet.build());\n//   LOGGER.trace(\"GET: {}\",webResource);\n//   return webResource.request().accept(MediaType.APPLICATION_JSON).get();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CopyFileFromContainerCmdExec extends AbstrSyncDockerCmdExec<CopyFileFromContainerCmd, InputStream>\n        implements CopyFileFromContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CopyFileFromContainerCmdExec.class);\n\n    public CopyFileFromContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected InputStream execute(CopyFileFromContainerCmd command) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "docker-java_docker-java/356", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/containers/{id}/copy\").resolveTemplate(\"id\",\n                command.getContainerId());\n\n        LOGGER.trace(\"POST: \" + webResource.toString());\n\n        return webResource.request().accept(MediaType.APPLICATION_OCTET_STREAM)\n                .post(command);\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "CopyFileFromContainerCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class CopyFileFromContainerCmdExec extends AbstrSyncDockerCmdExec<CopyFileFromContainerCmd, InputStream>\n        implements CopyFileFromContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CopyFileFromContainerCmdExec.class);\n\n    public CopyFileFromContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected InputStream execute(CopyFileFromContainerCmd command) {", "right_context": "}\n\n}", "class_name": "CopyFileFromContainerCmdExec", "return_type": "InputStream", "parameters": [{"type": "CopyFileFromContainerCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PingCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(PingCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/_ping\");\n//   LOGGER.trace(\"GET: {}\",webResource);\n//   try {\n//     webResource.request().get().close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveConfigCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveConfigCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/configs/\" + command.getConfigId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveContainerCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/\" + command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"v\",command.hasRemoveVolumesEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"noprune\",command.hasNoPruneEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveNetworkCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveNetworkCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/networks/\" + command.getNetworkId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSecretCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSecretCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/secrets/\" + command.getSecretId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveServiceCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/services/\" + command.getServiceId());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveSwarmNodeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/nodes/\" + command.getSwarmNodeId());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RemoveVolumeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RemoveVolumeCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/volumes/\" + command.getName());\n//   LOGGER.trace(\"DELETE: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).delete();\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RenameContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RenameContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/rename\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"name\",command.getName());\n//   LOG.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/resize\").resolveTemplate(\"id\",command.getContainerId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UnpauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UnpauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JoinSwarmCmdExec extends AbstrSyncDockerCmdExec<JoinSwarmCmd, Void>\n        implements JoinSwarmCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(InitializeSwarmCmdExec.class);\n\n    public JoinSwarmCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(JoinSwarmCmd command) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/357", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/swarm/join\");\n\n        LOGGER.trace(\"POST: {} \", webResource);\n        try {\n            webResource.request().accept(MediaType.APPLICATION_JSON).post(command).close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "JoinSwarmCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class JoinSwarmCmdExec extends AbstrSyncDockerCmdExec<JoinSwarmCmd, Void>\n        implements JoinSwarmCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(InitializeSwarmCmdExec.class);\n\n    public JoinSwarmCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute(JoinSwarmCmd command) {", "right_context": "}\n}", "class_name": "JoinSwarmCmdExec", "return_type": "Void", "parameters": [{"type": "JoinSwarmCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UnpauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UnpauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/AbstrAsyncDockerCmdExec.java\n// --------------------------------------------------\n// protected abstract Void execute0(final CMD_T command,final ResultCallback<A_RES_T> resultCallback);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/AttachContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(AttachContainerCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/attach\").resolveTemplate(\"id\",command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"logs\",command.hasLogsEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.hasStdoutEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.hasStderrEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdin\",command.getStdin() != null);\n//   webTarget=booleanQueryParam(webTarget,\"stream\",command.hasFollowStreamEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().post(null,command.getStdin(),resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/BuildImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(BuildImageCmd command,ResultCallback<BuildResponseItem> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/build\");\n//   String dockerFilePath=command.getPathToDockerfile();\n//   if (dockerFilePath != null && command.getRemote() == null && !\"Dockerfile\".equals(dockerFilePath)) {\n//     webTarget=webTarget.queryParam(\"dockerfile\",dockerFilePath);\n//   }\n//   if (command.getTags() != null && !command.getTags().isEmpty()) {\n//     webTarget=webTarget.queryParamsSet(\"t\",command.getTags());\n//   }\n//  else   if (isNotBlank(command.getTag())) {\n//     webTarget=webTarget.queryParam(\"t\",command.getTag());\n//   }\n//   if (command.getCacheFrom() != null && !command.getCacheFrom().isEmpty()) {\n//     webTarget=webTarget.queryParam(\"cachefrom\",jsonEncode(command.getCacheFrom()));\n//   }\n//   if (command.getRemote() != null) {\n//     webTarget=webTarget.queryParam(\"remote\",command.getRemote().toString());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"q\",command.isQuiet());\n//   webTarget=booleanQueryParam(webTarget,\"nocache\",command.hasNoCacheEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"pull\",command.hasPullEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"rm\",command.hasRemoveEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"forcerm\",command.isForcerm());\n//   if (command.hasRemoveEnabled() == null || !command.hasRemoveEnabled()) {\n//     webTarget=webTarget.queryParam(\"rm\",\"false\");\n//   }\n//   if (command.getMemory() != null) {\n//     webTarget=webTarget.queryParam(\"memory\",command.getMemory());\n//   }\n//   if (command.getMemswap() != null) {\n//     webTarget=webTarget.queryParam(\"memswap\",command.getMemswap());\n//   }\n//   if (command.getCpushares() != null) {\n//     webTarget=webTarget.queryParam(\"cpushares\",command.getCpushares());\n//   }\n//   if (command.getCpusetcpus() != null) {\n//     webTarget=webTarget.queryParam(\"cpusetcpus\",command.getCpusetcpus());\n//   }\n//   if (command.getBuildArgs() != null) {\n//     webTarget=webTarget.queryParamsJsonMap(\"buildargs\",command.getBuildArgs());\n//   }\n//   if (command.getShmsize() != null) {\n//     webTarget=webTarget.queryParam(\"shmsize\",command.getShmsize());\n//   }\n//   if (command.getLabels() != null) {\n//     webTarget=webTarget.queryParamsJsonMap(\"labels\",command.getLabels());\n//   }\n//   if (command.getNetworkMode() != null) {\n//     webTarget=webTarget.queryParam(\"networkmode\",command.getNetworkMode());\n//   }\n//   if (command.getPlatform() != null) {\n//     webTarget=webTarget.queryParam(\"platform\",command.getPlatform());\n//   }\n//   if (command.getTarget() != null) {\n//     webTarget=webTarget.queryParam(\"target\",command.getTarget());\n//   }\n//   if (command.getExtraHosts() != null) {\n//     webTarget=webTarget.queryParamsSet(\"extrahosts\",command.getExtraHosts());\n//   }\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   InvocationBuilder builder=resourceWithOptionalAuthConfig(command,webTarget.request()).accept(MediaType.APPLICATION_JSON).header(\"Content-Type\",\"application/tar\").header(\"encoding\",\"gzip\");\n//   builder.post(new TypeReference<BuildResponseItem>(){\n//   }\n// ,resultCallback,command.getTarInputStream());\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ExecStartCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(ExecStartCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/exec/{id}/start\").resolveTemplate(\"id\",command.getExecId());\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).post(command,command.getStdin(),resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LoadImageAsyncCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LoadImageAsyncCmd command,ResultCallback<LoadResponseItem> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/images/load\");\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().post(new TypeReference<LoadResponseItem>(){\n//   }\n// ,resultCallback,command.getImageStream());\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LogContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LogContainerCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/logs\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTail() != null) {\n//     webTarget=webTarget.queryParam(\"tail\",command.getTail());\n//   }\n//   if (command.getSince() != null) {\n//     webTarget=webTarget.queryParam(\"since\",command.getSince());\n//   }\n//   if (command.getUntil() != null) {\n//     webTarget=webTarget.queryParam(\"until\",command.getUntil());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"timestamps\",command.hasTimestampsEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.hasStdoutEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.hasStderrEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"follow\",command.hasFollowStreamEnabled());\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LogSwarmObjectExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LogSwarmObjectCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/\" + endpoint + \"/{id}/logs\").resolveTemplate(\"id\",command.getId());\n//   if (command.getTail() != null) {\n//     webTarget=webTarget.queryParam(\"tail\",command.getTail());\n//   }\n//  else {\n//     webTarget=webTarget.queryParam(\"tail\",\"all\");\n//   }\n//   if (command.getSince() != null) {\n//     webTarget=webTarget.queryParam(\"since\",command.getSince());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"timestamps\",command.getTimestamps());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.getStdout());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.getStderr());\n//   webTarget=booleanQueryParam(webTarget,\"follow\",command.getFollow());\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PullImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(PullImageCmd command,ResultCallback<PullResponseItem> resultCallback){\n//   WebTarget webResource=getBaseResource().path(\"/images/create\").queryParam(\"tag\",command.getTag()).queryParam(\"fromImage\",command.getRepository()).queryParam(\"registry\",command.getRegistry());\n//   if (command.getPlatform() != null) {\n//     webResource=webResource.queryParam(\"platform\",command.getPlatform());\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   resourceWithOptionalAuthConfig(command.getAuthConfig(),webResource.request()).accept(MediaType.APPLICATION_OCTET_STREAM).post(null,new TypeReference<PullResponseItem>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PushImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(PushImageCmd command,ResultCallback<PushResponseItem> resultCallback){\n//   WebTarget webResource=getBaseResource().path(\"/images/{imageName}/push\").resolveTemplate(\"imageName\",command.getName()).queryParam(\"tag\",command.getTag());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   InvocationBuilder builder=resourceWithAuthConfig(command.getAuthConfig(),webResource.request()).accept(MediaType.APPLICATION_JSON);\n//   builder.post(null,new TypeReference<PushResponseItem>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StatsCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(StatsCmd command,ResultCallback<Statistics> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/stats\").resolveTemplate(\"id\",command.getContainerId());\n//   if (Boolean.TRUE.equals(command.hasNoStream())) {\n//     webTarget=webTarget.queryParam(\"stream\",\"0\");\n//   }\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(new TypeReference<Statistics>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/WaitContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(WaitContainerCmd command,ResultCallback<WaitResponse> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/wait\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).post((Object)null,new TypeReference<WaitResponse>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EventsCmdExec extends AbstrAsyncDockerCmdExec<EventsCmd, Event> implements EventsCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(EventsCmdExec.class);\n\n    public EventsCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute0(EventsCmd command, ResultCallback<Event> resultCallback) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/374", "ground_truth": "\n\n        WebTarget webTarget = getBaseResource().path(\"/events\").queryParam(\"since\", command.getSince())\n                .queryParam(\"until\", command.getUntil());\n\n        if (command.getFilters() != null && !command.getFilters().isEmpty()) {\n            webTarget = webTarget\n                    .queryParam(\"filters\", FiltersEncoder.jsonEncode(command.getFilters()));\n        }\n\n        LOGGER.trace(\"GET: {}\", webTarget);\n\n        webTarget.request().get(new TypeReference<Event>() {\n        }, resultCallback);\n\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "EventsCmdExec.java"], "context_start_lineno": 0, "function_name": "execute0", "left_context": "class EventsCmdExec extends AbstrAsyncDockerCmdExec<EventsCmd, Event> implements EventsCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(EventsCmdExec.class);\n\n    public EventsCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Void execute0(EventsCmd command, ResultCallback<Event> resultCallback) {", "right_context": "}\n}", "class_name": "EventsCmdExec", "return_type": "Void", "parameters": [{"type": "EventsCmd", "name": "command"}, {"type": "ResultCallback<Event>", "name": "resultCallback"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/TopContainerCmd.java\n// --------------------------------------------------\n// /** \n//  * @throws NotFoundException No such container\n//  */\n// @Override TopContainerResponse exec() throws NotFoundException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/command/TopContainerCmdImpl.java\n// --------------------------------------------------\n// /** \n//  * @throws NotFoundException No such container\n//  */\n// @Override public TopContainerResponse exec() throws NotFoundException {\n//   return super.exec();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TopContainerCmdExec extends AbstrSyncDockerCmdExec<TopContainerCmd, TopContainerResponse> implements\n        TopContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TopContainerCmdExec.class);\n\n    public TopContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected TopContainerResponse execute(TopContainerCmd command) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "docker-java_docker-java/385", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/containers/{id}/top\").resolveTemplate(\"id\",\n                command.getContainerId());\n\n        if (!StringUtils.isEmpty(command.getPsArgs())) {\n            webResource = webResource.queryParam(\"ps_args\", command.getPsArgs());\n        }\n\n        LOGGER.trace(\"GET: {}\", webResource);\n        return webResource.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<TopContainerResponse>() {\n        });\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "TopContainerCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class TopContainerCmdExec extends AbstrSyncDockerCmdExec<TopContainerCmd, TopContainerResponse> implements\n        TopContainerCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TopContainerCmdExec.class);\n\n    public TopContainerCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected TopContainerResponse execute(TopContainerCmd command) {", "right_context": "}\n\n}", "class_name": "TopContainerCmdExec", "return_type": "TopContainerResponse", "parameters": [{"type": "TopContainerCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/InspectExecCmd.java\n// --------------------------------------------------\n// /** \n//  * @throws NotFoundException if no such exec has been found\n//  */\n// @Override InspectExecResponse exec() throws NotFoundException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/command/InspectExecCmdImpl.java\n// --------------------------------------------------\n// /** \n//  * @throws NotFoundException No such exec\n//  */\n// @Override public InspectExecResponse exec() throws NotFoundException {\n//   return super.exec();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InspectExecCmdExec extends AbstrSyncDockerCmdExec<InspectExecCmd, InspectExecResponse> implements\n        InspectExecCmd.Exec {\n    private static final Logger LOGGER = LoggerFactory.getLogger(InspectExecCmdExec.class);\n\n    public InspectExecCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected InspectExecResponse execute(InspectExecCmd command) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/398", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/exec/{id}/json\").resolveTemplate(\"id\", command.getExecId());\n\n        LOGGER.debug(\"GET: {}\", webResource);\n\n        return webResource.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<InspectExecResponse>() {\n        });\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "InspectExecCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class InspectExecCmdExec extends AbstrSyncDockerCmdExec<InspectExecCmd, InspectExecResponse> implements\n        InspectExecCmd.Exec {\n    private static final Logger LOGGER = LoggerFactory.getLogger(InspectExecCmdExec.class);\n\n    public InspectExecCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected InspectExecResponse execute(InspectExecCmd command) {", "right_context": "}\n}", "class_name": "InspectExecCmdExec", "return_type": "InspectExecResponse", "parameters": [{"type": "InspectExecCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClient.java\n// --------------------------------------------------\n// /** \n//  * Rename container.\n//  * @param containerId id of the container\n//  * @return command\n//  * @since {@link RemoteApiVersion#VERSION_1_17}\n//  */\n// RenameContainerCmd renameContainerCmd(@Nonnull String containerId);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClientDelegate.java\n// --------------------------------------------------\n// @Override public RenameContainerCmd renameContainerCmd(@Nonnull String containerId){\n//   return getDockerClient().renameContainerCmd(containerId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/DockerClientImpl.java\n// --------------------------------------------------\n// @Override public RenameContainerCmd renameContainerCmd(@Nonnull String containerId){\n//   return new RenameContainerCmdImpl(getDockerCmdExecFactory().createRenameContainerCmdExec(),containerId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/RenameContainerCmd.java\n// --------------------------------------------------\n// RenameContainerCmd withName(@Nonnull String name);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/RenameContainerCmd.java\n// --------------------------------------------------\n// RenameContainerCmd withContainerId(@Nonnull String containerId);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RenameContainerCmdImpl extends AbstrDockerCmd<RenameContainerCmd, Void> implements RenameContainerCmd {\n\n    private String containerId;\n\n    private String name;\n\n    public RenameContainerCmdImpl(RenameContainerCmd.Exec exec, String containerId) {\n        super(exec);\n        withContainerId(containerId);\n    }\n\n    @Override\n    public String getContainerId() {\n        return containerId;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public RenameContainerCmd withContainerId(@Nonnull String containerId) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public RenameContainerCmd withName(@Nonnull String name) {\n        this.name = Objects.requireNonNull(name, \"name was not specified\");\n        return this;\n    }\n\n    /**\n     * @throws NotFoundException No such container\n     */\n    @Override\n    public Void exec() throws NotFoundException {\n        return super.exec();\n    }\n}", "metadata": {"task_id": "docker-java_docker-java/408", "ground_truth": "\n        this.containerId = Objects.requireNonNull(containerId, \"containerId was not specified\");\n        return this;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "command", "RenameContainerCmdImpl.java"], "context_start_lineno": 0, "function_name": "withContainerId", "left_context": "class RenameContainerCmdImpl extends AbstrDockerCmd<RenameContainerCmd, Void> implements RenameContainerCmd {\n\n    private String containerId;\n\n    private String name;\n\n    public RenameContainerCmdImpl(RenameContainerCmd.Exec exec, String containerId) {\n        super(exec);\n        withContainerId(containerId);\n    }\n\n    @Override\n    public String getContainerId() {\n        return containerId;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public RenameContainerCmd withContainerId(@Nonnull String containerId) {", "right_context": "}\n\n    @Override\n    public RenameContainerCmd withName(@Nonnull String name) {\n        this.name = Objects.requireNonNull(name, \"name was not specified\");\n        return this;\n    }\n\n    /**\n     * @throws NotFoundException No such container\n     */\n    @Override\n    public Void exec() throws NotFoundException {\n        return super.exec();\n    }\n}", "class_name": "RenameContainerCmdImpl", "return_type": "RenameContainerCmd", "parameters": [{"type": "String", "name": "containerId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ResizeExecCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(ResizeExecCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/exec/{id}/resize\").resolveTemplate(\"id\",command.getExecId()).queryParam(\"h\",command.getHeight()).queryParam(\"w\",command.getWidth());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/RestartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(RestartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/restart\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getSignal() != null) {\n//     webResource=webResource.queryParam(\"signal\",command.getSignal());\n//   }\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StartContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StartContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/start\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StopContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(StopContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/stop\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTimeout() != null) {\n//     webResource=webResource.queryParam(\"t\",String.valueOf(command.getTimeout()));\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/TagImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(TagImageCmd command){\n//   WebTarget webTarget=getBaseResource().path(\"/images/\" + command.getImageId() + \"/tag\").queryParam(\"repo\",command.getRepository()).queryParam(\"tag\",command.getTag());\n//   webTarget=booleanQueryParam(webTarget,\"force\",command.hasForceEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   try {\n//     webTarget.request().post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UnpauseContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UnpauseContainerCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/containers/{id}/unpause\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateServiceCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateServiceCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/services/{id}/update\").resolveTemplate(\"id\",command.getServiceId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getServiceSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/swarm/update\").queryParam(\"version\",command.getVersion());\n//   webResource=booleanQueryParam(webResource,\"rotateManagerToken\",command.getRotateManagerToken());\n//   webResource=booleanQueryParam(webResource,\"rotateWorkertoken\",command.getRotateWorkerToken());\n//   LOGGER.trace(\"POST: {} \",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/UpdateSwarmNodeCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute(UpdateSwarmNodeCmd command){\n//   WebTarget webResource=getBaseResource().path(\"/nodes/{id}/update\").resolveTemplate(\"id\",command.getSwarmNodeId()).queryParam(\"version\",command.getVersion());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   try {\n//     webResource.request().accept(MediaType.APPLICATION_JSON).post(command.getSwarmNodeSpec()).close();\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/AbstrAsyncDockerCmdExec.java\n// --------------------------------------------------\n// protected abstract Void execute0(final CMD_T command,final ResultCallback<A_RES_T> resultCallback);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/AttachContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(AttachContainerCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/attach\").resolveTemplate(\"id\",command.getContainerId());\n//   webTarget=booleanQueryParam(webTarget,\"logs\",command.hasLogsEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.hasStdoutEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.hasStderrEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdin\",command.getStdin() != null);\n//   webTarget=booleanQueryParam(webTarget,\"stream\",command.hasFollowStreamEnabled());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().post(null,command.getStdin(),resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/BuildImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(BuildImageCmd command,ResultCallback<BuildResponseItem> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/build\");\n//   String dockerFilePath=command.getPathToDockerfile();\n//   if (dockerFilePath != null && command.getRemote() == null && !\"Dockerfile\".equals(dockerFilePath)) {\n//     webTarget=webTarget.queryParam(\"dockerfile\",dockerFilePath);\n//   }\n//   if (command.getTags() != null && !command.getTags().isEmpty()) {\n//     webTarget=webTarget.queryParamsSet(\"t\",command.getTags());\n//   }\n//  else   if (isNotBlank(command.getTag())) {\n//     webTarget=webTarget.queryParam(\"t\",command.getTag());\n//   }\n//   if (command.getCacheFrom() != null && !command.getCacheFrom().isEmpty()) {\n//     webTarget=webTarget.queryParam(\"cachefrom\",jsonEncode(command.getCacheFrom()));\n//   }\n//   if (command.getRemote() != null) {\n//     webTarget=webTarget.queryParam(\"remote\",command.getRemote().toString());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"q\",command.isQuiet());\n//   webTarget=booleanQueryParam(webTarget,\"nocache\",command.hasNoCacheEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"pull\",command.hasPullEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"rm\",command.hasRemoveEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"forcerm\",command.isForcerm());\n//   if (command.hasRemoveEnabled() == null || !command.hasRemoveEnabled()) {\n//     webTarget=webTarget.queryParam(\"rm\",\"false\");\n//   }\n//   if (command.getMemory() != null) {\n//     webTarget=webTarget.queryParam(\"memory\",command.getMemory());\n//   }\n//   if (command.getMemswap() != null) {\n//     webTarget=webTarget.queryParam(\"memswap\",command.getMemswap());\n//   }\n//   if (command.getCpushares() != null) {\n//     webTarget=webTarget.queryParam(\"cpushares\",command.getCpushares());\n//   }\n//   if (command.getCpusetcpus() != null) {\n//     webTarget=webTarget.queryParam(\"cpusetcpus\",command.getCpusetcpus());\n//   }\n//   if (command.getBuildArgs() != null) {\n//     webTarget=webTarget.queryParamsJsonMap(\"buildargs\",command.getBuildArgs());\n//   }\n//   if (command.getShmsize() != null) {\n//     webTarget=webTarget.queryParam(\"shmsize\",command.getShmsize());\n//   }\n//   if (command.getLabels() != null) {\n//     webTarget=webTarget.queryParamsJsonMap(\"labels\",command.getLabels());\n//   }\n//   if (command.getNetworkMode() != null) {\n//     webTarget=webTarget.queryParam(\"networkmode\",command.getNetworkMode());\n//   }\n//   if (command.getPlatform() != null) {\n//     webTarget=webTarget.queryParam(\"platform\",command.getPlatform());\n//   }\n//   if (command.getTarget() != null) {\n//     webTarget=webTarget.queryParam(\"target\",command.getTarget());\n//   }\n//   if (command.getExtraHosts() != null) {\n//     webTarget=webTarget.queryParamsSet(\"extrahosts\",command.getExtraHosts());\n//   }\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   InvocationBuilder builder=resourceWithOptionalAuthConfig(command,webTarget.request()).accept(MediaType.APPLICATION_JSON).header(\"Content-Type\",\"application/tar\").header(\"encoding\",\"gzip\");\n//   builder.post(new TypeReference<BuildResponseItem>(){\n//   }\n// ,resultCallback,command.getTarInputStream());\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/EventsCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(EventsCmd command,ResultCallback<Event> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/events\").queryParam(\"since\",command.getSince()).queryParam(\"until\",command.getUntil());\n//   if (command.getFilters() != null && !command.getFilters().isEmpty()) {\n//     webTarget=webTarget.queryParam(\"filters\",FiltersEncoder.jsonEncode(command.getFilters()));\n//   }\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(new TypeReference<Event>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/ExecStartCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(ExecStartCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/exec/{id}/start\").resolveTemplate(\"id\",command.getExecId());\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).post(command,command.getStdin(),resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LoadImageAsyncCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LoadImageAsyncCmd command,ResultCallback<LoadResponseItem> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/images/load\");\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().post(new TypeReference<LoadResponseItem>(){\n//   }\n// ,resultCallback,command.getImageStream());\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/LogContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(LogContainerCmd command,ResultCallback<Frame> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/logs\").resolveTemplate(\"id\",command.getContainerId());\n//   if (command.getTail() != null) {\n//     webTarget=webTarget.queryParam(\"tail\",command.getTail());\n//   }\n//   if (command.getSince() != null) {\n//     webTarget=webTarget.queryParam(\"since\",command.getSince());\n//   }\n//   if (command.getUntil() != null) {\n//     webTarget=webTarget.queryParam(\"until\",command.getUntil());\n//   }\n//   webTarget=booleanQueryParam(webTarget,\"timestamps\",command.hasTimestampsEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stdout\",command.hasStdoutEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"stderr\",command.hasStderrEnabled());\n//   webTarget=booleanQueryParam(webTarget,\"follow\",command.hasFollowStreamEnabled());\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PullImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(PullImageCmd command,ResultCallback<PullResponseItem> resultCallback){\n//   WebTarget webResource=getBaseResource().path(\"/images/create\").queryParam(\"tag\",command.getTag()).queryParam(\"fromImage\",command.getRepository()).queryParam(\"registry\",command.getRegistry());\n//   if (command.getPlatform() != null) {\n//     webResource=webResource.queryParam(\"platform\",command.getPlatform());\n//   }\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   resourceWithOptionalAuthConfig(command.getAuthConfig(),webResource.request()).accept(MediaType.APPLICATION_OCTET_STREAM).post(null,new TypeReference<PullResponseItem>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/PushImageCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(PushImageCmd command,ResultCallback<PushResponseItem> resultCallback){\n//   WebTarget webResource=getBaseResource().path(\"/images/{imageName}/push\").resolveTemplate(\"imageName\",command.getName()).queryParam(\"tag\",command.getTag());\n//   LOGGER.trace(\"POST: {}\",webResource);\n//   InvocationBuilder builder=resourceWithAuthConfig(command.getAuthConfig(),webResource.request()).accept(MediaType.APPLICATION_JSON);\n//   builder.post(null,new TypeReference<PushResponseItem>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/StatsCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(StatsCmd command,ResultCallback<Statistics> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/stats\").resolveTemplate(\"id\",command.getContainerId());\n//   if (Boolean.TRUE.equals(command.hasNoStream())) {\n//     webTarget=webTarget.queryParam(\"stream\",\"0\");\n//   }\n//   LOGGER.trace(\"GET: {}\",webTarget);\n//   webTarget.request().get(new TypeReference<Statistics>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/exec/WaitContainerCmdExec.java\n// --------------------------------------------------\n// @Override protected Void execute0(WaitContainerCmd command,ResultCallback<WaitResponse> resultCallback){\n//   WebTarget webTarget=getBaseResource().path(\"/containers/{id}/wait\").resolveTemplate(\"id\",command.getContainerId());\n//   LOGGER.trace(\"POST: {}\",webTarget);\n//   webTarget.request().accept(MediaType.APPLICATION_JSON).post((Object)null,new TypeReference<WaitResponse>(){\n//   }\n// ,resultCallback);\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LogSwarmObjectExec extends AbstrAsyncDockerCmdExec<LogSwarmObjectCmd, Frame> implements\n        LogSwarmObjectCmd.Exec {\n    private String endpoint = \"\";\n    private static final Logger LOGGER = LoggerFactory.getLogger(LogSwarmObjectExec.class);\n\n    public LogSwarmObjectExec(com.github.dockerjava.core.WebTarget baseResource, DockerClientConfig dockerClientConfig, String endpoint) {\n        super(baseResource, dockerClientConfig);\n        this.endpoint = endpoint;\n    }\n\n    @Override\n    protected Void execute0(LogSwarmObjectCmd command, ResultCallback<Frame> resultCallback) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "docker-java_docker-java/439", "ground_truth": "\n\n        WebTarget webTarget = getBaseResource().path(\"/\" + endpoint + \"/{id}/logs\").resolveTemplate(\"id\", command.getId());\n\n        if (command.getTail() != null) {\n            webTarget = webTarget.queryParam(\"tail\", command.getTail());\n        } else {\n            webTarget = webTarget.queryParam(\"tail\", \"all\");\n        }\n\n        if (command.getSince() != null) {\n            webTarget = webTarget.queryParam(\"since\", command.getSince());\n        }\n\n        webTarget = booleanQueryParam(webTarget, \"timestamps\", command.getTimestamps());\n        webTarget = booleanQueryParam(webTarget, \"stdout\", command.getStdout());\n        webTarget = booleanQueryParam(webTarget, \"stderr\", command.getStderr());\n        webTarget = booleanQueryParam(webTarget, \"follow\", command.getFollow());\n\n        LOGGER.trace(\"GET: {}\", webTarget);\n\n        webTarget.request().get(resultCallback);\n\n        return null;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "LogSwarmObjectExec.java"], "context_start_lineno": 0, "function_name": "execute0", "left_context": "class LogSwarmObjectExec extends AbstrAsyncDockerCmdExec<LogSwarmObjectCmd, Frame> implements\n        LogSwarmObjectCmd.Exec {\n    private String endpoint = \"\";\n    private static final Logger LOGGER = LoggerFactory.getLogger(LogSwarmObjectExec.class);\n\n    public LogSwarmObjectExec(com.github.dockerjava.core.WebTarget baseResource, DockerClientConfig dockerClientConfig, String endpoint) {\n        super(baseResource, dockerClientConfig);\n        this.endpoint = endpoint;\n    }\n\n    @Override\n    protected Void execute0(LogSwarmObjectCmd command, ResultCallback<Frame> resultCallback) {", "right_context": "}\n}", "class_name": "LogSwarmObjectExec", "return_type": "Void", "parameters": [{"type": "LogSwarmObjectCmd", "name": "command"}, {"type": "ResultCallback<Frame>", "name": "resultCallback"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/RemoveSwarmNodeCmd.java\n// --------------------------------------------------\n// RemoveSwarmNodeCmd withForce(Boolean force);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClient.java\n// --------------------------------------------------\n// /** \n//  * Remove the swarm node\n//  * @param swarmNodeId swarmNodeId\n//  * @return the command\n//  * @since 1.24\n//  */\n// RemoveSwarmNodeCmd removeSwarmNodeCmd(String swarmNodeId);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/DockerClientDelegate.java\n// --------------------------------------------------\n// @Override public RemoveSwarmNodeCmd removeSwarmNodeCmd(String swarmNodeId){\n//   return getDockerClient().removeSwarmNodeCmd(swarmNodeId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-core/src/main/java/com/github/dockerjava/core/DockerClientImpl.java\n// --------------------------------------------------\n// @Override public RemoveSwarmNodeCmd removeSwarmNodeCmd(String swarmNodeId){\n//   return new RemoveSwarmNodeCmdImpl(getDockerCmdExecFactory().removeSwarmNodeCmdExec(),swarmNodeId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// docker-java/docker-java-api/src/main/java/com/github/dockerjava/api/command/RemoveSwarmNodeCmd.java\n// --------------------------------------------------\n// RemoveSwarmNodeCmd withSwarmNodeId(@Nonnull String swarmNodeId);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RemoveSwarmNodeCmdImpl extends AbstrDockerCmd<RemoveSwarmNodeCmd, Void> implements RemoveSwarmNodeCmd {\n\n    private String swarmNodeId;\n\n    private Boolean force;\n\n    public RemoveSwarmNodeCmdImpl(RemoveSwarmNodeCmd.Exec exec, String swarmNodeId) {\n        super(exec);\n        withSwarmNodeId(swarmNodeId);\n    }\n\n    @Override\n    @CheckForNull\n    public String getSwarmNodeId() {\n        return swarmNodeId;\n    }\n\n    @Override\n    @CheckForNull\n    public Boolean hasForceEnabled() {\n        return force;\n    }\n\n    @Override\n    public RemoveSwarmNodeCmd withSwarmNodeId(@Nonnull String swarmNodeId) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public RemoveSwarmNodeCmd withForce(Boolean force) {\n        this.force = force;\n        return this;\n    }\n\n    /**\n     * @throws NotFoundException No such swarmNode\n     */\n    @Override\n    public Void exec() throws NotFoundException {\n        return super.exec();\n    }\n}", "metadata": {"task_id": "docker-java_docker-java/443", "ground_truth": "\n        this.swarmNodeId = Objects.requireNonNull(swarmNodeId, \"swarmNodeId was not specified\");\n        return this;\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "command", "RemoveSwarmNodeCmdImpl.java"], "context_start_lineno": 0, "function_name": "withSwarmNodeId", "left_context": "class RemoveSwarmNodeCmdImpl extends AbstrDockerCmd<RemoveSwarmNodeCmd, Void> implements RemoveSwarmNodeCmd {\n\n    private String swarmNodeId;\n\n    private Boolean force;\n\n    public RemoveSwarmNodeCmdImpl(RemoveSwarmNodeCmd.Exec exec, String swarmNodeId) {\n        super(exec);\n        withSwarmNodeId(swarmNodeId);\n    }\n\n    @Override\n    @CheckForNull\n    public String getSwarmNodeId() {\n        return swarmNodeId;\n    }\n\n    @Override\n    @CheckForNull\n    public Boolean hasForceEnabled() {\n        return force;\n    }\n\n    @Override\n    public RemoveSwarmNodeCmd withSwarmNodeId(@Nonnull String swarmNodeId) {", "right_context": "}\n\n    @Override\n    public RemoveSwarmNodeCmd withForce(Boolean force) {\n        this.force = force;\n        return this;\n    }\n\n    /**\n     * @throws NotFoundException No such swarmNode\n     */\n    @Override\n    public Void exec() throws NotFoundException {\n        return super.exec();\n    }\n}", "class_name": "RemoveSwarmNodeCmdImpl", "return_type": "RemoveSwarmNodeCmd", "parameters": [{"type": "String", "name": "swarmNodeId"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VolumeRW implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private Volume volume;\n\n    private AccessMode accessMode = AccessMode.rw;\n\n    public VolumeRW(Volume volume) {\n        this.volume = volume;\n    }\n\n    public VolumeRW(Volume volume, AccessMode accessMode) {\n        this.volume = volume;\n        this.accessMode = accessMode;\n    }\n\n    public Volume getVolume() {\n        return volume;\n    }\n\n    public AccessMode getAccessMode() {\n        return accessMode;\n    }\n\n    /**\n     * Returns a string representation of this {@link VolumeRW} suitable for inclusion in a JSON message. The returned String is simply the\n     * container path, {@link #getPath()}.\n     *\n     * @return a string representation of this {@link VolumeRW}\n     */\n    @Override\n    public String toString() {\n        return getVolume() + \":\" + getAccessMode();\n    }\n\n    @JsonCreator\n    public static VolumeRW fromPrimitive(Map<String, Boolean> map) {<FILL_FUNCTION_BODY>}\n\n    @JsonValue\n    public Map<String, Boolean> toPrimitive() {\n        return Collections.singletonMap(volume.getPath(), accessMode.toBoolean());\n    }\n\n}", "metadata": {"task_id": "docker-java_docker-java/482", "ground_truth": "\n        Entry<String, Boolean> entry = map.entrySet().iterator().next();\n        return new VolumeRW(new Volume(entry.getKey()), AccessMode.fromBoolean(entry.getValue()));\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-api", "src", "main", "java", "com", "github", "dockerjava", "api", "model", "VolumeRW.java"], "context_start_lineno": 0, "function_name": "fromPrimitive", "left_context": "class VolumeRW implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private Volume volume;\n\n    private AccessMode accessMode = AccessMode.rw;\n\n    public VolumeRW(Volume volume) {\n        this.volume = volume;\n    }\n\n    public VolumeRW(Volume volume, AccessMode accessMode) {\n        this.volume = volume;\n        this.accessMode = accessMode;\n    }\n\n    public Volume getVolume() {\n        return volume;\n    }\n\n    public AccessMode getAccessMode() {\n        return accessMode;\n    }\n\n    /**\n     * Returns a string representation of this {@link VolumeRW} suitable for inclusion in a JSON message. The returned String is simply the\n     * container path, {@link #getPath()}.\n     *\n     * @return a string representation of this {@link VolumeRW}\n     */\n    @Override\n    public String toString() {\n        return getVolume() + \":\" + getAccessMode();\n    }\n\n    @JsonCreator\n    public static VolumeRW fromPrimitive(Map<String, Boolean> map) {", "right_context": "}\n\n    @JsonValue\n    public Map<String, Boolean> toPrimitive() {\n        return Collections.singletonMap(volume.getPath(), accessMode.toBoolean());\n    }\n\n}", "class_name": "VolumeRW", "return_type": "VolumeRW", "parameters": [{"type": "Map<String,Boolean>", "name": "map"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VolumeBinds implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private final VolumeBind[] binds;\n\n    public VolumeBinds(VolumeBind... binds) {\n        this.binds = binds;\n    }\n\n    public VolumeBind[] getBinds() {\n        return binds;\n    }\n\n    @JsonCreator\n    public static VolumeBinds fromPrimitive(Map<String, String> primitive) {<FILL_FUNCTION_BODY>}\n\n    @JsonValue\n    public Map<String, String> toPrimitive() {\n        return Stream.of(binds).collect(Collectors.toMap(\n                VolumeBind::getContainerPath,\n                VolumeBind::getHostPath\n        ));\n    }\n\n}", "metadata": {"task_id": "docker-java_docker-java/486", "ground_truth": "\n        return new VolumeBinds(\n                primitive.entrySet().stream()\n                .map(it -> new VolumeBind(it.getValue(), it.getKey()))\n                .toArray(VolumeBind[]::new)\n        );\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-api", "src", "main", "java", "com", "github", "dockerjava", "api", "model", "VolumeBinds.java"], "context_start_lineno": 0, "function_name": "fromPrimitive", "left_context": "class VolumeBinds implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private final VolumeBind[] binds;\n\n    public VolumeBinds(VolumeBind... binds) {\n        this.binds = binds;\n    }\n\n    public VolumeBind[] getBinds() {\n        return binds;\n    }\n\n    @JsonCreator\n    public static VolumeBinds fromPrimitive(Map<String, String> primitive) {", "right_context": "}\n\n    @JsonValue\n    public Map<String, String> toPrimitive() {\n        return Stream.of(binds).collect(Collectors.toMap(\n                VolumeBind::getContainerPath,\n                VolumeBind::getHostPath\n        ));\n    }\n\n}", "class_name": "VolumeBinds", "return_type": "VolumeBinds", "parameters": [{"type": "Map<String,String>", "name": "primitive"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VersionCmdExec extends AbstrSyncDockerCmdExec<VersionCmd, Version> implements VersionCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(VersionCmdExec.class);\n\n    public VersionCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Version execute(VersionCmd command) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "docker-java_docker-java/499", "ground_truth": "\n        WebTarget webResource = getBaseResource().path(\"/version\");\n\n        LOGGER.trace(\"GET: {}\", webResource);\n        return webResource.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<Version>() {\n        });\n    ", "fpath_tuple": ["docker-java_docker-java", "docker-java", "docker-java-core", "src", "main", "java", "com", "github", "dockerjava", "core", "exec", "VersionCmdExec.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class VersionCmdExec extends AbstrSyncDockerCmdExec<VersionCmd, Version> implements VersionCmd.Exec {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(VersionCmdExec.class);\n\n    public VersionCmdExec(WebTarget baseResource, DockerClientConfig dockerClientConfig) {\n        super(baseResource, dockerClientConfig);\n    }\n\n    @Override\n    protected Version execute(VersionCmd command) {", "right_context": "}\n\n}", "class_name": "VersionCmdExec", "return_type": "Version", "parameters": [{"type": "VersionCmd", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MonitoringTargetInterceptor extends MonitoringInterceptor {\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t@Override\r\n\tprotected String getRequestName(InvocationContext context) {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "javamelody_javamelody/46", "ground_truth": "\r\n\t\tfinal Method method = context.getMethod();\r\n\t\tfinal Object target = context.getTarget();\r\n\t\treturn target.getClass().getSimpleName() + '.' + method.getName();\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "MonitoringTargetInterceptor.java"], "context_start_lineno": 0, "function_name": "getRequestName", "left_context": "class MonitoringTargetInterceptor extends MonitoringInterceptor {\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t@Override\r\n\tprotected String getRequestName(InvocationContext context) {", "right_context": "}\r\n}", "class_name": "MonitoringTargetInterceptor", "return_type": "String", "parameters": [{"type": "InvocationContext", "name": "context"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Log4JAppender extends AppenderSkeleton {\r\n\tprivate static final String MESSAGE_PATTERN = \"%-5p [%c] %m%n\";\r\n\tprivate static final Level THRESHOLD = Level.WARN;\r\n\r\n\tprivate static final Log4JAppender SINGLETON = new Log4JAppender();\r\n\r\n\t/**\r\n\t * Constructeur.\r\n\t */\r\n\tpublic Log4JAppender() {\r\n\t\tsuper();\r\n\t\tsetLayout(new PatternLayout(MESSAGE_PATTERN));\r\n\t\tsetThreshold(THRESHOLD);\r\n\t\tsetName(getClass().getName());\r\n\t}\r\n\r\n\tstatic Log4JAppender getSingleton() {\r\n\t\treturn SINGLETON;\r\n\t}\r\n\r\n\tvoid register() {\r\n\t\tLogger.getRootLogger().addAppender(this);\r\n\t}\r\n\r\n\tvoid deregister() {\r\n\t\tLogger.getRootLogger().removeAppender(this);\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tprotected void append(LoggingEvent event) {<FILL_FUNCTION_BODY>}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tpublic void close() {\r\n\t\t// rien \u00e0 faire\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tpublic boolean requiresLayout() {\r\n\t\treturn false;\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/63", "ground_truth": "\r\n\t\tfinal Throwable throwable;\r\n\t\tif (event.getThrowableInformation() == null) {\r\n\t\t\tthrowable = null;\r\n\t\t} else {\r\n\t\t\tthrowable = event.getThrowableInformation().getThrowable();\r\n\t\t}\r\n\t\tLoggingHandler.addErrorLogToCounter(getLayout().format(event), throwable);\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "Log4JAppender.java"], "context_start_lineno": 0, "function_name": "append", "left_context": "class Log4JAppender extends AppenderSkeleton {\r\n\tprivate static final String MESSAGE_PATTERN = \"%-5p [%c] %m%n\";\r\n\tprivate static final Level THRESHOLD = Level.WARN;\r\n\r\n\tprivate static final Log4JAppender SINGLETON = new Log4JAppender();\r\n\r\n\t/**\r\n\t * Constructeur.\r\n\t */\r\n\tpublic Log4JAppender() {\r\n\t\tsuper();\r\n\t\tsetLayout(new PatternLayout(MESSAGE_PATTERN));\r\n\t\tsetThreshold(THRESHOLD);\r\n\t\tsetName(getClass().getName());\r\n\t}\r\n\r\n\tstatic Log4JAppender getSingleton() {\r\n\t\treturn SINGLETON;\r\n\t}\r\n\r\n\tvoid register() {\r\n\t\tLogger.getRootLogger().addAppender(this);\r\n\t}\r\n\r\n\tvoid deregister() {\r\n\t\tLogger.getRootLogger().removeAppender(this);\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tprotected void append(LoggingEvent event) {", "right_context": "}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tpublic void close() {\r\n\t\t// rien \u00e0 faire\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tpublic boolean requiresLayout() {\r\n\t\treturn false;\r\n\t}\r\n}", "class_name": "Log4JAppender", "return_type": "void", "parameters": [{"type": "LoggingEvent", "name": "event"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MetricsPublisher {\n\tpublic static List<MetricsPublisher> getMetricsPublishers(\n\t\t\tList<JavaInformations> javaInformationsList) {<FILL_FUNCTION_BODY>}\n\n\tprivate static List<MetricsPublisher> getMetricsPublishers(String contextPath, String hosts) {\n\t\tfinal List<MetricsPublisher> metricsPublishers = new ArrayList<>();\n\t\tfinal Graphite graphite = Graphite.getInstance(contextPath, hosts);\n\t\tfinal Statsd statsd = Statsd.getInstance(contextPath, hosts);\n\t\tfinal CloudWatch cloudWatch = CloudWatch.getInstance(contextPath, hosts);\n\t\tfinal InfluxDB influxDb = InfluxDB.getInstance(contextPath, hosts);\n\t\tfinal Datadog datadog = Datadog.getInstance(contextPath, hosts);\n\t\tif (graphite != null) {\n\t\t\tmetricsPublishers.add(graphite);\n\t\t}\n\t\tif (statsd != null) {\n\t\t\tmetricsPublishers.add(statsd);\n\t\t}\n\t\tif (cloudWatch != null) {\n\t\t\tmetricsPublishers.add(cloudWatch);\n\t\t}\n\t\tif (influxDb != null) {\n\t\t\tmetricsPublishers.add(influxDb);\n\t\t}\n\t\tif (datadog != null) {\n\t\t\tmetricsPublishers.add(datadog);\n\t\t}\n\t\tif (metricsPublishers.isEmpty()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn metricsPublishers;\n\t}\n\n\tpublic abstract void addValue(String metric, double value) throws IOException;\n\n\tpublic abstract void send() throws IOException;\n\n\tpublic abstract void stop();\n}", "metadata": {"task_id": "javamelody_javamelody/90", "ground_truth": "\n\t\tassert javaInformationsList != null && !javaInformationsList.isEmpty();\n\t\tfinal StringBuilder sb = new StringBuilder();\n\t\tfor (final JavaInformations javaInformations : javaInformationsList) {\n\t\t\tif (sb.length() != 0) {\n\t\t\t\tsb.append('_');\n\t\t\t}\n\t\t\tsb.append(javaInformations.getHost().replaceFirst(\"@.*\", \"\"));\n\t\t}\n\t\tString contextPath = Parameter.APPLICATION_NAME.getValue();\n\t\tif (contextPath == null) {\n\t\t\tcontextPath = javaInformationsList.get(0).getContextPath();\n\t\t}\n\t\tif (contextPath == null) {\n\t\t\t// for NodesCollector in Jenkins, contextPath is null\n\t\t\tcontextPath = \"NA\";\n\t\t} else if (contextPath.isEmpty()) {\n\t\t\t// for CloudWatch, InfluxDB, Datadog, a tag/dimension is not supposed to be empty\n\t\t\tcontextPath = \"/\";\n\t\t}\n\t\tfinal String hosts = sb.toString();\n\t\treturn getMetricsPublishers(contextPath, hosts);\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "publish", "MetricsPublisher.java"], "context_start_lineno": 0, "function_name": "getMetricsPublishers", "left_context": "class MetricsPublisher {\n\tpublic static List<MetricsPublisher> getMetricsPublishers(\n\t\t\tList<JavaInformations> javaInformationsList) {", "right_context": "}\n\n\tprivate static List<MetricsPublisher> getMetricsPublishers(String contextPath, String hosts) {\n\t\tfinal List<MetricsPublisher> metricsPublishers = new ArrayList<>();\n\t\tfinal Graphite graphite = Graphite.getInstance(contextPath, hosts);\n\t\tfinal Statsd statsd = Statsd.getInstance(contextPath, hosts);\n\t\tfinal CloudWatch cloudWatch = CloudWatch.getInstance(contextPath, hosts);\n\t\tfinal InfluxDB influxDb = InfluxDB.getInstance(contextPath, hosts);\n\t\tfinal Datadog datadog = Datadog.getInstance(contextPath, hosts);\n\t\tif (graphite != null) {\n\t\t\tmetricsPublishers.add(graphite);\n\t\t}\n\t\tif (statsd != null) {\n\t\t\tmetricsPublishers.add(statsd);\n\t\t}\n\t\tif (cloudWatch != null) {\n\t\t\tmetricsPublishers.add(cloudWatch);\n\t\t}\n\t\tif (influxDb != null) {\n\t\t\tmetricsPublishers.add(influxDb);\n\t\t}\n\t\tif (datadog != null) {\n\t\t\tmetricsPublishers.add(datadog);\n\t\t}\n\t\tif (metricsPublishers.isEmpty()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn metricsPublishers;\n\t}\n\n\tpublic abstract void addValue(String metric, double value) throws IOException;\n\n\tpublic abstract void send() throws IOException;\n\n\tpublic abstract void stop();\n}", "class_name": "MetricsPublisher", "return_type": "List<MetricsPublisher>", "parameters": [{"type": "List<JavaInformations>", "name": "javaInformationsList"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/JdbcWrapper.java\n// --------------------------------------------------\n// Connection createConnectionProxyOrRewrapIfJBossOrGlassfish(Connection connection) throws IllegalAccessException {\n//   if (jboss || glassfish) {\n//     rewrapConnection(connection);\n//     return connection;\n//   }\n//   return createConnectionProxy(connection);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/JdbcWrapper.java\n// --------------------------------------------------\n// /** \n//  * Cr\u00e9e un proxy d'une  {@link Connection} jdbc.\n//  * @param connection Connection\n//  * @return Connection\n//  */\n// public Connection createConnectionProxy(Connection connection){\n//   assert connection != null;\n//   if (isMonitoringDisabled()) {\n//     return connection;\n//   }\n//   final ConnectionInvocationHandler invocationHandler=new ConnectionInvocationHandler(connection);\n//   final Connection result=createProxy(connection,invocationHandler);\n//   if (result != connection) {\n//     invocationHandler.init();\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/internal/model/DatabaseInformations.java\n// --------------------------------------------------\n// private static Connection getConnection() throws SQLException, NamingException {\n//   if (Parameters.getLastConnectUrl() != null) {\n//     final Connection connection=DriverManager.getConnection(Parameters.getLastConnectUrl(),Parameters.getLastConnectInfo());\n//     connection.setAutoCommit(false);\n//     return connection;\n//   }\n//   final Collection<DataSource> dataSources=JdbcWrapper.getJndiAndSpringDataSources().values();\n//   for (  final DataSource dataSource : dataSources) {\n//     try {\n//       return dataSource.getConnection();\n//     }\n//  catch (    final Exception e) {\n//       continue;\n//     }\n//   }\n//   if (!dataSources.isEmpty()) {\n//     return dataSources.iterator().next().getConnection();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestJdbcWrapper.java\n// --------------------------------------------------\n// /** \n//  * {@inheritDoc} \n//  */\n// @Override public Connection getConnection(String username,String password) throws SQLException {\n//   return tomcatDataSource.getConnection();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestJdbcWrapper.java\n// --------------------------------------------------\n// /** \n//  * {@inheritDoc} \n//  */\n// @Override public Connection getConnection() throws SQLException {\n//   return tomcatDataSource.getConnection();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/test/java/net/bull/javamelody/internal/model/TestDatabaseInformations.java\n// --------------------------------------------------\n// public static Connection initH2(){\n//   final Properties info=new Properties();\n//   info.put(\"driver\",\"org.h2.Driver\");\n//   try {\n//     return new JdbcDriver().connect(TestJdbcWrapper.H2_DATABASE_URL,info);\n//   }\n//  catch (  final SQLException e) {\n//     throw new IllegalStateException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/test/java/net/bull/javamelody/internal/web/html/TestHtmlReport.java\n// --------------------------------------------------\n// @Override public Connection call(){\n//   return TestDatabaseInformations.initH2();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JdbcDriver implements Driver {\r\n\t// cette classe est publique pour \u00eatre d\u00e9clar\u00e9e dans une configuration jdbc\r\n\tstatic final JdbcDriver SINGLETON = new JdbcDriver();\r\n\r\n\t// initialisation statique du driver\r\n\tstatic {\r\n\t\ttry {\r\n\t\t\tDriverManager.registerDriver(SINGLETON);\r\n\t\t\tLOG.debug(\"JDBC driver registered\");\r\n\r\n\t\t\t// on d\u00e9sinstalle et on r\u00e9installe les autres drivers pour que le notre soit en premier\r\n\t\t\t// (notamment, si le jar du driver contient un fichier java.sql.Driver dans META-INF/services\r\n\t\t\t// pour initialiser automatiquement le driver contenu dans le jar)\r\n\t\t\tfor (final Driver driver : Collections.list(DriverManager.getDrivers())) {\r\n\t\t\t\tif (driver != SINGLETON) {\r\n\t\t\t\t\tDriverManager.deregisterDriver(driver);\r\n\t\t\t\t\tDriverManager.registerDriver(driver);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (final SQLException e) {\r\n\t\t\t// ne peut arriver\r\n\t\t\tthrow new IllegalStateException(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Connection connect(String url, Properties info) throws SQLException {<FILL_FUNCTION_BODY>}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic boolean acceptsURL(String url) throws SQLException {\r\n\t\t// test sur dbcp n\u00e9cessaire pour le cas o\u00f9 le monitoring est utilis\u00e9 avec le web.xml global\r\n\t\t// et le r\u00e9pertoire lib global de tomcat et \u00e9galement pour les anomalies 1&2 (sonar, grails)\r\n\t\t// (rq: Thread.currentThread().getStackTrace() a \u00e9t\u00e9 mesur\u00e9 \u00e0 environ 3 micro-secondes)\r\n\t\tfor (final StackTraceElement element : Thread.currentThread().getStackTrace()) {\r\n\t\t\tif (element.getClassName().endsWith(\"dbcp.BasicDataSource\")) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic int getMajorVersion() {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic int getMinorVersion() {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {\r\n\t\treturn new DriverPropertyInfo[0];\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic boolean jdbcCompliant() {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn getClass().getSimpleName() + \"[lastConnectUrl=\" + Parameters.getLastConnectUrl()\r\n\t\t\t\t+ \", lastConnectInfo=\" + Parameters.getLastConnectInfo() + ']';\r\n\t}\r\n\r\n\t/**\r\n\t * D\u00e9finition de la m\u00e9thode getParentLogger ajout\u00e9e dans l'interface Driver en jdk 1.7.\r\n\t * @return Logger\r\n\t * @throws SQLFeatureNotSupportedException e\r\n\t */\r\n\t@Override\r\n\tpublic Logger getParentLogger() throws SQLFeatureNotSupportedException {\r\n\t\treturn Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/116", "ground_truth": "\r\n\t\tif (\"false\".equals(info.get(\"javamelody\"))) {\r\n\t\t\t// if property javamelody=false then it's not for us\r\n\t\t\t// (we pass here from the DriverManager.getConnection below)\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tString myUrl = url;\r\n\t\t// we load first the driver class from the info or the url, to be sure that it will be found\r\n\t\tString proxiedDriver = info.getProperty(\"driver\");\r\n\t\tif (proxiedDriver == null && myUrl != null) {\r\n\t\t\t// if not in the info, the driver class could also be passed at the end of the url, for example ...?driver=org.h2.Driver\r\n\t\t\tfinal int index = myUrl.indexOf(\"driver=\");\r\n\t\t\tif (index != -1) {\r\n\t\t\t\tproxiedDriver = myUrl.substring(index + \"driver=\".length());\r\n\t\t\t\tmyUrl = myUrl.substring(0, index - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (proxiedDriver == null) {\r\n\t\t\t// if the driver is not defined in the info or in the url\r\n\t\t\t// it could still be found automatically if the driver is in the classpath\r\n\t\t\t// or (in WEB-INF/lib and if the jdbc drivers are not loaded by the JDK before this webapp)\r\n\t\t\t// but we don't want to create proxies and increment counts for the connections inside datasources\r\n\t\t\t// so we only accept and go further if driver is defined in the info or in the url\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t// on utilise Thread.currentThread().getContextClassLoader() car le driver peut ne pas \u00eatre\r\n\t\t\t// dans le m\u00eame classLoader que les classes de javamelody\r\n\t\t\t// Class driverClass =\r\n\t\t\tClass.forName(proxiedDriver, true, Thread.currentThread().getContextClassLoader());\r\n\t\t\t// et non Class.forName(proxiedDriver);\r\n\t\t} catch (final ClassNotFoundException e) {\r\n\t\t\tthrow new SQLException(e.getMessage(), e);\r\n\t\t}\r\n\r\n\t\tfinal Properties myInfo = (Properties) info.clone();\r\n\t\tmyInfo.remove(\"driver\");\r\n\t\tmyInfo.put(\"javamelody\", \"false\");\r\n\t\tParameters.initJdbcDriverParameters(myUrl, myInfo);\r\n\t\t// we could call driverClass.newInstance().connect(myUrl, myInfo)\r\n\t\t// possibly by looking the driver which accepts the url in DriverManager.getDrivers()\r\n\t\t// but we prefer calling the standard DriverManager.getConnection(myUrl, myInfo)\r\n\t\treturn JdbcWrapper.SINGLETON\r\n\t\t\t\t.createConnectionProxy(DriverManager.getConnection(myUrl, myInfo));\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "JdbcDriver.java"], "context_start_lineno": 0, "function_name": "connect", "left_context": "class JdbcDriver implements Driver {\r\n\t// cette classe est publique pour \u00eatre d\u00e9clar\u00e9e dans une configuration jdbc\r\n\tstatic final JdbcDriver SINGLETON = new JdbcDriver();\r\n\r\n\t// initialisation statique du driver\r\n\tstatic {\r\n\t\ttry {\r\n\t\t\tDriverManager.registerDriver(SINGLETON);\r\n\t\t\tLOG.debug(\"JDBC driver registered\");\r\n\r\n\t\t\t// on d\u00e9sinstalle et on r\u00e9installe les autres drivers pour que le notre soit en premier\r\n\t\t\t// (notamment, si le jar du driver contient un fichier java.sql.Driver dans META-INF/services\r\n\t\t\t// pour initialiser automatiquement le driver contenu dans le jar)\r\n\t\t\tfor (final Driver driver : Collections.list(DriverManager.getDrivers())) {\r\n\t\t\t\tif (driver != SINGLETON) {\r\n\t\t\t\t\tDriverManager.deregisterDriver(driver);\r\n\t\t\t\t\tDriverManager.registerDriver(driver);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (final SQLException e) {\r\n\t\t\t// ne peut arriver\r\n\t\t\tthrow new IllegalStateException(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Connection connect(String url, Properties info) throws SQLException {", "right_context": "}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic boolean acceptsURL(String url) throws SQLException {\r\n\t\t// test sur dbcp n\u00e9cessaire pour le cas o\u00f9 le monitoring est utilis\u00e9 avec le web.xml global\r\n\t\t// et le r\u00e9pertoire lib global de tomcat et \u00e9galement pour les anomalies 1&2 (sonar, grails)\r\n\t\t// (rq: Thread.currentThread().getStackTrace() a \u00e9t\u00e9 mesur\u00e9 \u00e0 environ 3 micro-secondes)\r\n\t\tfor (final StackTraceElement element : Thread.currentThread().getStackTrace()) {\r\n\t\t\tif (element.getClassName().endsWith(\"dbcp.BasicDataSource\")) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic int getMajorVersion() {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic int getMinorVersion() {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {\r\n\t\treturn new DriverPropertyInfo[0];\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic boolean jdbcCompliant() {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn getClass().getSimpleName() + \"[lastConnectUrl=\" + Parameters.getLastConnectUrl()\r\n\t\t\t\t+ \", lastConnectInfo=\" + Parameters.getLastConnectInfo() + ']';\r\n\t}\r\n\r\n\t/**\r\n\t * D\u00e9finition de la m\u00e9thode getParentLogger ajout\u00e9e dans l'interface Driver en jdk 1.7.\r\n\t * @return Logger\r\n\t * @throws SQLFeatureNotSupportedException e\r\n\t */\r\n\t@Override\r\n\tpublic Logger getParentLogger() throws SQLFeatureNotSupportedException {\r\n\t\treturn Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n\t}\r\n}", "class_name": "JdbcDriver", "return_type": "Connection", "parameters": [{"type": "String", "name": "url"}, {"type": "Properties", "name": "info"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/internal/model/JavaInformations.java\n// --------------------------------------------------\n// public List<JCacheInformations> getJCacheInformationsList(){\n//   final List<JCacheInformations> result=new ArrayList<>(jcacheInformationsList);\n//   Collections.sort(result,new JCacheInformationsComparator());\n//   return Collections.unmodifiableList(result);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JCacheInformations implements Serializable {\n\tprivate static final long serialVersionUID = -3025833425994923286L;\n\tprivate static final MBeanServer MBEAN_SERVER = MBeans.getPlatformMBeanServer();\n\tprivate static final boolean JCACHE_AVAILABLE = isJCacheAvailable();\n\n\tprivate final String name;\n\tprivate final long cacheHits;\n\tprivate final long cacheMisses;\n\tprivate boolean availableByApi;\n\tprivate List<?> cacheKeys;\n\n\tJCacheInformations(ObjectName cache) {\n\t\tsuper();\n\t\tassert cache != null;\n\t\tthis.name = cache.getKeyProperty(\"Cache\");\n\t\tthis.cacheHits = getValue(cache, \"CacheHits\");\n\t\tthis.cacheMisses = getValue(cache, \"CacheMisses\");\n\t\t// an element can be put several times in a cache before being removed or evicted\n\t\t// so objectCount != CachePuts - CacheRemovals - CacheEvictions\n\t\t// size and keys can only be read by javax.cache.Cache.iterator()\n\t}\n\n\tJCacheInformations(String cacheName) {\n\t\tsuper();\n\t\tassert cacheName != null;\n\t\tthis.name = cacheName;\n\t\tthis.cacheHits = -1;\n\t\tthis.cacheMisses = 1;\n\t}\n\n\tprivate static Long getValue(ObjectName cache, String attribute) {\n\t\ttry {\n\t\t\treturn (Long) MBEAN_SERVER.getAttribute(cache, attribute);\n\t\t} catch (final JMException e) {\n\t\t\treturn -1L;\n\t\t}\n\t}\n\n\tstatic List<JCacheInformations> buildJCacheInformationsList() {<FILL_FUNCTION_BODY>}\n\n\tpublic static JCacheInformations buildJCacheInformationsWithKeys(String cacheId) {\n\t\tassert JCACHE_AVAILABLE;\n\t\tassert cacheId != null;\n\t\tfor (final CachingProvider cachingProvider : Caching.getCachingProviders()) {\n\t\t\ttry {\n\t\t\t\tfinal CacheManager cacheManager = cachingProvider.getCacheManager();\n\t\t\t\tfor (final String cacheName : cacheManager.getCacheNames()) {\n\t\t\t\t\tif (cacheName.equals(cacheId)) {\n\t\t\t\t\t\t// getCache may never return null\n\t\t\t\t\t\tfinal Cache<Object, Object> cache = cacheManager.getCache(cacheId);\n\t\t\t\t\t\tfinal List<Object> cacheKeys = new ArrayList<>();\n\t\t\t\t\t\tfor (final Entry<Object, Object> entry : cache) {\n\t\t\t\t\t\t\tcacheKeys.add(entry.getKey());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (final JCacheInformations cacheInformations : buildJCacheInformationsList()) {\n\t\t\t\t\t\t\tif (cacheInformations.getName().equals(cacheId)) {\n\t\t\t\t\t\t\t\tcacheInformations.cacheKeys = cacheKeys;\n\t\t\t\t\t\t\t\treturn cacheInformations; // NOPMD\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (final Exception e) {\n\t\t\t\t// issue 1197, if hazelcast 3.12.13 + xalan 2.7.3\n\t\t\t\tLOG.warn(e.toString(), e);\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Cache not found\");\n\t}\n\n\tprivate static Set<ObjectName> getJsr107CacheStatistics() {\n\t\ttry {\n\t\t\tfinal ObjectName objectName = new ObjectName(\"javax.cache:type=CacheStatistics,*\");\n\t\t\treturn MBEAN_SERVER.queryNames(objectName, null);\n\t\t} catch (final MalformedObjectNameException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\tprivate static boolean isJCacheAvailable() {\n\t\ttry {\n\t\t\tClass.forName(\"javax.cache.Cache\");\n\t\t\treturn true;\n\t\t} catch (final ClassNotFoundException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic long getCacheHits() {\n\t\treturn cacheHits;\n\t}\n\n\tpublic long getCacheMisses() {\n\t\treturn cacheMisses;\n\t}\n\n\t// efficacit\u00e9 en pourcentage du cache par rapport au total des acc\u00e8s\n\tpublic int getHitsRatio() {\n\t\tfinal long accessCount = cacheHits + cacheMisses;\n\t\tif (accessCount == 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn (int) (100 * cacheHits / accessCount);\n\t}\n\n\tpublic boolean isAvailableByApi() {\n\t\treturn availableByApi;\n\t}\n\n\tpublic List<?> getCacheKeys() {\n\t\treturn cacheKeys;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic String toString() {\n\t\treturn getClass().getSimpleName() + \"[name=\" + getName() + \", hitsRatio=\" + getHitsRatio()\n\t\t\t\t+ ']';\n\t}\n}", "metadata": {"task_id": "javamelody_javamelody/180", "ground_truth": "\n\t\tif (!JCACHE_AVAILABLE) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal List<JCacheInformations> result = new ArrayList<>();\n\t\tfinal Set<ObjectName> cacheStatistics = getJsr107CacheStatistics();\n\t\tfor (final ObjectName cache : cacheStatistics) {\n\t\t\tfinal JCacheInformations jcacheInformations = new JCacheInformations(cache);\n\t\t\tresult.add(jcacheInformations);\n\t\t}\n\t\tfor (final CachingProvider cachingProvider : Caching.getCachingProviders()) {\n\t\t\ttry {\n\t\t\t\tfinal CacheManager cacheManager = cachingProvider.getCacheManager();\n\t\t\t\tfor (final String cacheName : cacheManager.getCacheNames()) {\n\t\t\t\t\tboolean found = false;\n\t\t\t\t\tfor (final JCacheInformations jcacheInformations : result) {\n\t\t\t\t\t\tif (cacheName != null && cacheName.equals(jcacheInformations.getName())) {\n\t\t\t\t\t\t\tjcacheInformations.availableByApi = true;\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!found) {\n\t\t\t\t\t\tfinal JCacheInformations jcacheInformations = new JCacheInformations(\n\t\t\t\t\t\t\t\tcacheName);\n\t\t\t\t\t\tjcacheInformations.availableByApi = true;\n\t\t\t\t\t\tresult.add(jcacheInformations);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (final Exception e) {\n\t\t\t\t// issue 1197, if hazelcast 3.12.13 + xalan 2.7.3\n\t\t\t\tLOG.warn(e.toString(), e);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "model", "JCacheInformations.java"], "context_start_lineno": 0, "function_name": "buildJCacheInformationsList", "left_context": "class JCacheInformations implements Serializable {\n\tprivate static final long serialVersionUID = -3025833425994923286L;\n\tprivate static final MBeanServer MBEAN_SERVER = MBeans.getPlatformMBeanServer();\n\tprivate static final boolean JCACHE_AVAILABLE = isJCacheAvailable();\n\n\tprivate final String name;\n\tprivate final long cacheHits;\n\tprivate final long cacheMisses;\n\tprivate boolean availableByApi;\n\tprivate List<?> cacheKeys;\n\n\tJCacheInformations(ObjectName cache) {\n\t\tsuper();\n\t\tassert cache != null;\n\t\tthis.name = cache.getKeyProperty(\"Cache\");\n\t\tthis.cacheHits = getValue(cache, \"CacheHits\");\n\t\tthis.cacheMisses = getValue(cache, \"CacheMisses\");\n\t\t// an element can be put several times in a cache before being removed or evicted\n\t\t// so objectCount != CachePuts - CacheRemovals - CacheEvictions\n\t\t// size and keys can only be read by javax.cache.Cache.iterator()\n\t}\n\n\tJCacheInformations(String cacheName) {\n\t\tsuper();\n\t\tassert cacheName != null;\n\t\tthis.name = cacheName;\n\t\tthis.cacheHits = -1;\n\t\tthis.cacheMisses = 1;\n\t}\n\n\tprivate static Long getValue(ObjectName cache, String attribute) {\n\t\ttry {\n\t\t\treturn (Long) MBEAN_SERVER.getAttribute(cache, attribute);\n\t\t} catch (final JMException e) {\n\t\t\treturn -1L;\n\t\t}\n\t}\n\n\tstatic List<JCacheInformations> buildJCacheInformationsList() {", "right_context": "}\n\n\tpublic static JCacheInformations buildJCacheInformationsWithKeys(String cacheId) {\n\t\tassert JCACHE_AVAILABLE;\n\t\tassert cacheId != null;\n\t\tfor (final CachingProvider cachingProvider : Caching.getCachingProviders()) {\n\t\t\ttry {\n\t\t\t\tfinal CacheManager cacheManager = cachingProvider.getCacheManager();\n\t\t\t\tfor (final String cacheName : cacheManager.getCacheNames()) {\n\t\t\t\t\tif (cacheName.equals(cacheId)) {\n\t\t\t\t\t\t// getCache may never return null\n\t\t\t\t\t\tfinal Cache<Object, Object> cache = cacheManager.getCache(cacheId);\n\t\t\t\t\t\tfinal List<Object> cacheKeys = new ArrayList<>();\n\t\t\t\t\t\tfor (final Entry<Object, Object> entry : cache) {\n\t\t\t\t\t\t\tcacheKeys.add(entry.getKey());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (final JCacheInformations cacheInformations : buildJCacheInformationsList()) {\n\t\t\t\t\t\t\tif (cacheInformations.getName().equals(cacheId)) {\n\t\t\t\t\t\t\t\tcacheInformations.cacheKeys = cacheKeys;\n\t\t\t\t\t\t\t\treturn cacheInformations; // NOPMD\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (final Exception e) {\n\t\t\t\t// issue 1197, if hazelcast 3.12.13 + xalan 2.7.3\n\t\t\t\tLOG.warn(e.toString(), e);\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Cache not found\");\n\t}\n\n\tprivate static Set<ObjectName> getJsr107CacheStatistics() {\n\t\ttry {\n\t\t\tfinal ObjectName objectName = new ObjectName(\"javax.cache:type=CacheStatistics,*\");\n\t\t\treturn MBEAN_SERVER.queryNames(objectName, null);\n\t\t} catch (final MalformedObjectNameException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\tprivate static boolean isJCacheAvailable() {\n\t\ttry {\n\t\t\tClass.forName(\"javax.cache.Cache\");\n\t\t\treturn true;\n\t\t} catch (final ClassNotFoundException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic long getCacheHits() {\n\t\treturn cacheHits;\n\t}\n\n\tpublic long getCacheMisses() {\n\t\treturn cacheMisses;\n\t}\n\n\t// efficacit\u00e9 en pourcentage du cache par rapport au total des acc\u00e8s\n\tpublic int getHitsRatio() {\n\t\tfinal long accessCount = cacheHits + cacheMisses;\n\t\tif (accessCount == 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn (int) (100 * cacheHits / accessCount);\n\t}\n\n\tpublic boolean isAvailableByApi() {\n\t\treturn availableByApi;\n\t}\n\n\tpublic List<?> getCacheKeys() {\n\t\treturn cacheKeys;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic String toString() {\n\t\treturn getClass().getSimpleName() + \"[name=\" + getName() + \", hitsRatio=\" + getHitsRatio()\n\t\t\t\t+ ']';\n\t}\n}", "class_name": "JCacheInformations", "return_type": "List<JCacheInformations>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SpringDataSourceBeanPostProcessor implements BeanPostProcessor, PriorityOrdered {\r\n\tprivate Set<String> excludedDatasources;\r\n\t// l'interface PriorityOrdered place la priorit\u00e9 assez haute dans le contexte Spring\r\n\t// quelle que soit la valeur de order\r\n\tprivate int order = LOWEST_PRECEDENCE;\r\n\r\n\tprivate final Class<?> delegatingDataSourceClass = getDelegatingDataSourceClass();\r\n\r\n\t/**\r\n\t * D\u00e9finit les noms des datasources Spring exclues.\r\n\t * @param excludedDatasources Set\r\n\t */\r\n\tpublic void setExcludedDatasources(Set<String> excludedDatasources) {\r\n\t\tthis.excludedDatasources = excludedDatasources;\r\n\r\n\t\t// exemple:\r\n\t\t//\t<bean id=\"springDataSourceBeanPostProcessor\" class=\"net.bull.javamelody.SpringDataSourceBeanPostProcessor\">\r\n\t\t//\t\t<property name=\"excludedDatasources\">\r\n\t\t//\t\t\t<set>\r\n\t\t//\t\t\t\t<value>excludedDataSourceName</value>\r\n\t\t//\t\t\t</set>\r\n\t\t//\t\t</property>\r\n\t\t// \t</bean>\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic int getOrder() {\r\n\t\treturn order;\r\n\t}\r\n\r\n\t/**\r\n\t * D\u00e9finit la priorit\u00e9 dans le contexte Spring.\r\n\t * @param order int\r\n\t */\r\n\tpublic void setOrder(int order) {\r\n\t\tthis.order = order;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) {\r\n\t\treturn bean;\r\n\t}\r\n\r\n\tprivate boolean isExcludedDataSource(String beanName) {\r\n\t\tif (excludedDatasources != null && excludedDatasources.contains(beanName)) {\r\n\t\t\tLOG.debug(\"Spring datasource excluded: \" + beanName);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {<FILL_FUNCTION_BODY>}\r\n\r\n\tprivate Object createProxy(final Object bean, final String beanName) {\r\n\t\tfinal InvocationHandler invocationHandler = new InvocationHandler() {\r\n\t\t\t/** {@inheritDoc} */\r\n\t\t\t@Override\r\n\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n\t\t\t\tObject result = method.invoke(bean, args);\r\n\t\t\t\tif (result instanceof DataSource) {\r\n\t\t\t\t\tresult = JdbcWrapper.SINGLETON.createDataSourceProxy(beanName,\r\n\t\t\t\t\t\t\t(DataSource) result);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn JdbcWrapper.createProxy(bean, invocationHandler);\r\n\t}\r\n\r\n\tprivate boolean isDelegatingDataSourceAndAlreadyProxied(Object bean, String beanName) {\r\n\t\t// bean instanceof DelegatingDataSource ?\r\n\t\t// use reflection in case spring-jdbc is not available\r\n\t\tif (delegatingDataSourceClass != null && delegatingDataSourceClass.isInstance(bean)) {\r\n\t\t\tfinal DataSource targetDataSource;\r\n\t\t\ttry {\r\n\t\t\t\ttargetDataSource = (DataSource) delegatingDataSourceClass\r\n\t\t\t\t\t\t.getMethod(\"getTargetDataSource\").invoke(bean);\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\t// call to ((DelegatingDataSource) bean).getTargetDataSource() is not supposed to fail\r\n\t\t\t\tthrow new IllegalStateException(e);\r\n\t\t\t}\r\n\t\t\tif (JdbcWrapper.isProxyAlready(targetDataSource)) {\r\n\t\t\t\tLOG.debug(\"Spring delegating datasource excluded: \" + beanName);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate static Class<?> getDelegatingDataSourceClass() {\r\n\t\ttry {\r\n\t\t\treturn Class.forName(\"org.springframework.jdbc.datasource.DelegatingDataSource\");\r\n\t\t} catch (final ClassNotFoundException e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/200", "ground_truth": "\r\n\t\tif (bean instanceof DataSource) {\r\n\t\t\t// on ne teste isExcludedDataSource que si on est sur une datasource\r\n\t\t\tif (isExcludedDataSource(beanName) || Parameters.isNoDatabase()\r\n\t\t\t\t\t|| isDelegatingDataSourceAndAlreadyProxied(bean, beanName)) {\r\n\t\t\t\treturn bean;\r\n\t\t\t}\r\n\r\n\t\t\tfinal DataSource dataSource = (DataSource) bean;\r\n\t\t\tJdbcWrapper.registerSpringDataSource(beanName, dataSource);\r\n\t\t\tfinal DataSource result = JdbcWrapper.SINGLETON.createDataSourceProxy(beanName,\r\n\t\t\t\t\tdataSource);\r\n\t\t\tLOG.debug(\"Spring datasource wrapped: \" + beanName);\r\n\t\t\treturn result;\r\n\t\t} else if (bean instanceof JndiObjectFactoryBean) {\r\n\t\t\t// ou sur un JndiObjectFactoryBean\r\n\t\t\tif (isExcludedDataSource(beanName) || Parameters.isNoDatabase()) {\r\n\t\t\t\treturn bean;\r\n\t\t\t}\r\n\r\n\t\t\t// fix issue 20\r\n\t\t\tfinal Object result = createProxy(bean, beanName);\r\n\t\t\tLOG.debug(\"Spring JNDI factory wrapped: \" + beanName);\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// I tried here in the post-processor to fix \"quartz jobs which are scheduled with spring\r\n\t\t// are not displayed in javamelody, except if there is the following property for\r\n\t\t// SchedulerFactoryBean in spring xml:\r\n\t\t// <property name=\"exposeSchedulerInRepository\" value=\"true\" /> \",\r\n\r\n\t\t// but I had some problem with Spring creating the scheduler\r\n\t\t// twice and so registering the scheduler in SchedulerRepository with the same name\r\n\t\t// as the one registered below (and Quartz wants not)\r\n\t\t//\t\telse if (bean != null\r\n\t\t//\t\t\t\t&& \"org.springframework.scheduling.quartz.SchedulerFactoryBean\".equals(bean\r\n\t\t//\t\t\t\t\t\t.getClass().getName())) {\r\n\t\t//\t\t\ttry {\r\n\t\t//\t\t\t\t// Remarque: on ajoute nous m\u00eame le scheduler de Spring dans le SchedulerRepository\r\n\t\t//\t\t\t\t// de Quartz, car l'appel ici de schedulerFactoryBean.setExposeSchedulerInRepository(true)\r\n\t\t//\t\t\t\t// est trop tard et ne fonctionnerait pas\r\n\t\t//\t\t\t\tfinal Method method = bean.getClass().getMethod(\"getScheduler\", (Class<?>[]) null);\r\n\t\t//\t\t\t\tfinal Scheduler scheduler = (Scheduler) method.invoke(bean, (Object[]) null);\r\n\t\t//\r\n\t\t//\t\t\t\tfinal SchedulerRepository schedulerRepository = SchedulerRepository.getInstance();\r\n\t\t//\t\t\t\tsynchronized (schedulerRepository) {\r\n\t\t//\t\t\t\t\tif (schedulerRepository.lookup(scheduler.getSchedulerName()) == null) {\r\n\t\t//\t\t\t\t\t\tschedulerRepository.bind(scheduler);\r\n\t\t//\t\t\t\t\t\tscheduler.addGlobalJobListener(new JobGlobalListener());\r\n\t\t//\t\t\t\t\t}\r\n\t\t//\t\t\t\t}\r\n\t\t//\t\t\t} catch (final NoSuchMethodException e) {\r\n\t\t//\t\t\t\t// si la m\u00e9thode n'existe pas (avant spring 2.5.6), alors cela marche sans rien faire\r\n\t\t//\t\t\t\treturn bean;\r\n\t\t//\t\t\t} catch (final InvocationTargetException e) {\r\n\t\t//\t\t\t\t// tant pis\r\n\t\t//\t\t\t\treturn bean;\r\n\t\t//\t\t\t} catch (final IllegalAccessException e) {\r\n\t\t//\t\t\t\t// tant pis\r\n\t\t//\t\t\t\treturn bean;\r\n\t\t//\t\t\t} catch (SchedulerException e) {\r\n\t\t//\t\t\t\t// tant pis\r\n\t\t//\t\t\t\treturn bean;\r\n\t\t//\t\t\t}\r\n\t\t//\t\t}\r\n\r\n\t\treturn bean;\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "SpringDataSourceBeanPostProcessor.java"], "context_start_lineno": 0, "function_name": "postProcessAfterInitialization", "left_context": "class SpringDataSourceBeanPostProcessor implements BeanPostProcessor, PriorityOrdered {\r\n\tprivate Set<String> excludedDatasources;\r\n\t// l'interface PriorityOrdered place la priorit\u00e9 assez haute dans le contexte Spring\r\n\t// quelle que soit la valeur de order\r\n\tprivate int order = LOWEST_PRECEDENCE;\r\n\r\n\tprivate final Class<?> delegatingDataSourceClass = getDelegatingDataSourceClass();\r\n\r\n\t/**\r\n\t * D\u00e9finit les noms des datasources Spring exclues.\r\n\t * @param excludedDatasources Set\r\n\t */\r\n\tpublic void setExcludedDatasources(Set<String> excludedDatasources) {\r\n\t\tthis.excludedDatasources = excludedDatasources;\r\n\r\n\t\t// exemple:\r\n\t\t//\t<bean id=\"springDataSourceBeanPostProcessor\" class=\"net.bull.javamelody.SpringDataSourceBeanPostProcessor\">\r\n\t\t//\t\t<property name=\"excludedDatasources\">\r\n\t\t//\t\t\t<set>\r\n\t\t//\t\t\t\t<value>excludedDataSourceName</value>\r\n\t\t//\t\t\t</set>\r\n\t\t//\t\t</property>\r\n\t\t// \t</bean>\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic int getOrder() {\r\n\t\treturn order;\r\n\t}\r\n\r\n\t/**\r\n\t * D\u00e9finit la priorit\u00e9 dans le contexte Spring.\r\n\t * @param order int\r\n\t */\r\n\tpublic void setOrder(int order) {\r\n\t\tthis.order = order;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) {\r\n\t\treturn bean;\r\n\t}\r\n\r\n\tprivate boolean isExcludedDataSource(String beanName) {\r\n\t\tif (excludedDatasources != null && excludedDatasources.contains(beanName)) {\r\n\t\t\tLOG.debug(\"Spring datasource excluded: \" + beanName);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {", "right_context": "}\r\n\r\n\tprivate Object createProxy(final Object bean, final String beanName) {\r\n\t\tfinal InvocationHandler invocationHandler = new InvocationHandler() {\r\n\t\t\t/** {@inheritDoc} */\r\n\t\t\t@Override\r\n\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n\t\t\t\tObject result = method.invoke(bean, args);\r\n\t\t\t\tif (result instanceof DataSource) {\r\n\t\t\t\t\tresult = JdbcWrapper.SINGLETON.createDataSourceProxy(beanName,\r\n\t\t\t\t\t\t\t(DataSource) result);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn JdbcWrapper.createProxy(bean, invocationHandler);\r\n\t}\r\n\r\n\tprivate boolean isDelegatingDataSourceAndAlreadyProxied(Object bean, String beanName) {\r\n\t\t// bean instanceof DelegatingDataSource ?\r\n\t\t// use reflection in case spring-jdbc is not available\r\n\t\tif (delegatingDataSourceClass != null && delegatingDataSourceClass.isInstance(bean)) {\r\n\t\t\tfinal DataSource targetDataSource;\r\n\t\t\ttry {\r\n\t\t\t\ttargetDataSource = (DataSource) delegatingDataSourceClass\r\n\t\t\t\t\t\t.getMethod(\"getTargetDataSource\").invoke(bean);\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\t// call to ((DelegatingDataSource) bean).getTargetDataSource() is not supposed to fail\r\n\t\t\t\tthrow new IllegalStateException(e);\r\n\t\t\t}\r\n\t\t\tif (JdbcWrapper.isProxyAlready(targetDataSource)) {\r\n\t\t\t\tLOG.debug(\"Spring delegating datasource excluded: \" + beanName);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate static Class<?> getDelegatingDataSourceClass() {\r\n\t\ttry {\r\n\t\t\treturn Class.forName(\"org.springframework.jdbc.datasource.DelegatingDataSource\");\r\n\t\t} catch (final ClassNotFoundException e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}", "class_name": "SpringDataSourceBeanPostProcessor", "return_type": "Object", "parameters": [{"type": "Object", "name": "bean"}, {"type": "String", "name": "beanName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HtmlSpringContextReport extends HtmlAbstractReport {\r\n\tprivate final SpringContext springContext;\r\n\r\n\tHtmlSpringContextReport(SpringContext springContext, Writer writer) {\r\n\t\tsuper(writer);\r\n\t\tassert springContext != null;\r\n\t\tthis.springContext = springContext;\r\n\t}\r\n\r\n\t@Override\r\n\tvoid toHtml() throws IOException {\r\n\t\twriteBackLink();\r\n\t\twriteln(\"<br/>\");\r\n\r\n\t\tfinal List<String> beanDefinitionNames = springContext.getBeanDefinitionNames();\r\n\t\twriteTitle(\"beans.png\", getString(\"Spring_beans\"));\r\n\t\tfinal HtmlTable table = new HtmlTable();\r\n\t\ttable.beginTable(getString(\"Spring_beans\"));\r\n\t\twrite(\"<th>#Nom#</th><th>#Classe#</th><th>Bean</th>\");\r\n\t\tfor (final String beanName : beanDefinitionNames) {\r\n\t\t\ttable.nextRow();\r\n\t\t\tfinal Object bean = springContext.getBean(beanName);\r\n\t\t\tfinal Class<?> beanClass = bean.getClass();\r\n\t\t\tString beanToString;\r\n\t\t\ttry {\r\n\t\t\t\tbeanToString = bean.toString();\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tbeanToString = e.toString();\r\n\t\t\t}\r\n\t\t\twriteBean(beanName, beanClass, beanToString);\r\n\t\t}\r\n\t\ttable.endTable();\r\n\t\twriteln(\"<div align='right'>\" + getFormattedString(\"nb_beans\", beanDefinitionNames.size())\r\n\t\t\t\t+ \"</div>\");\r\n\t}\r\n\r\n\tprivate void writeBackLink() throws IOException {\r\n\t\twriteln(\"<div class='noPrint'>\");\r\n\t\twriteln(\"<a class='back' href=''><img src='?resource=action_back.png' alt='#Retour#'/> #Retour#</a>\");\r\n\t\twriteln(\"</div>\");\r\n\t}\r\n\r\n\tprivate void writeBean(String beanName, Class<?> beanClass, String beanToString)\r\n\t\t\tthrows IOException {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "javamelody_javamelody/209", "ground_truth": "\r\n\t\twrite(\"<td class='wrappedText'>\");\r\n\t\twriteDirectly(htmlEncodeButNotSpace(beanName));\r\n\t\twrite(\"</td><td class='wrappedText'>\");\r\n\t\twriteDirectly(HtmlSourceReport.addLinkToClassName(beanClass.getName()));\r\n\t\twrite(\"</td><td class='wrappedText'>\");\r\n\t\twriteDirectly(htmlEncodeButNotSpace(beanToString));\r\n\t\twrite(\"</td>\");\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "web", "html", "HtmlSpringContextReport.java"], "context_start_lineno": 0, "function_name": "writeBean", "left_context": "class HtmlSpringContextReport extends HtmlAbstractReport {\r\n\tprivate final SpringContext springContext;\r\n\r\n\tHtmlSpringContextReport(SpringContext springContext, Writer writer) {\r\n\t\tsuper(writer);\r\n\t\tassert springContext != null;\r\n\t\tthis.springContext = springContext;\r\n\t}\r\n\r\n\t@Override\r\n\tvoid toHtml() throws IOException {\r\n\t\twriteBackLink();\r\n\t\twriteln(\"<br/>\");\r\n\r\n\t\tfinal List<String> beanDefinitionNames = springContext.getBeanDefinitionNames();\r\n\t\twriteTitle(\"beans.png\", getString(\"Spring_beans\"));\r\n\t\tfinal HtmlTable table = new HtmlTable();\r\n\t\ttable.beginTable(getString(\"Spring_beans\"));\r\n\t\twrite(\"<th>#Nom#</th><th>#Classe#</th><th>Bean</th>\");\r\n\t\tfor (final String beanName : beanDefinitionNames) {\r\n\t\t\ttable.nextRow();\r\n\t\t\tfinal Object bean = springContext.getBean(beanName);\r\n\t\t\tfinal Class<?> beanClass = bean.getClass();\r\n\t\t\tString beanToString;\r\n\t\t\ttry {\r\n\t\t\t\tbeanToString = bean.toString();\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tbeanToString = e.toString();\r\n\t\t\t}\r\n\t\t\twriteBean(beanName, beanClass, beanToString);\r\n\t\t}\r\n\t\ttable.endTable();\r\n\t\twriteln(\"<div align='right'>\" + getFormattedString(\"nb_beans\", beanDefinitionNames.size())\r\n\t\t\t\t+ \"</div>\");\r\n\t}\r\n\r\n\tprivate void writeBackLink() throws IOException {\r\n\t\twriteln(\"<div class='noPrint'>\");\r\n\t\twriteln(\"<a class='back' href=''><img src='?resource=action_back.png' alt='#Retour#'/> #Retour#</a>\");\r\n\t\twriteln(\"</div>\");\r\n\t}\r\n\r\n\tprivate void writeBean(String beanName, Class<?> beanClass, String beanToString)\r\n\t\t\tthrows IOException {", "right_context": "}\r\n}", "class_name": "HtmlSpringContextReport", "return_type": "void", "parameters": [{"type": "String", "name": "beanName"}, {"type": "Class<?>", "name": "beanClass"}, {"type": "String", "name": "beanToString"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MonitoringEndpoint {\n\tprivate final ReportServlet reportServlet;\n\n\t/**\n\t * Constructor.\n\t * @param servletContext ServletContext\n\t */\n\tpublic MonitoringEndpoint(ServletContext servletContext) {\n\t\treportServlet = new ReportServlet();\n\t\tfinal ServletConfig servletConfig = new ServletConfig() {\n\t\t\t// only getServletContext() will be used by ReportServlet\n\t\t\t@Override\n\t\t\tpublic ServletContext getServletContext() {\n\t\t\t\treturn servletContext;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getServletName() {\n\t\t\t\treturn MonitoringEndpoint.class.getName();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getInitParameter(String name) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Enumeration<String> getInitParameterNames() {\n\t\t\t\treturn Collections.emptyEnumeration();\n\t\t\t}\n\t\t};\n\t\treportServlet.init(servletConfig);\n\t}\n\n\t/**\n\t * Display a report page.\n\t * @return HttpEntity.EMPTY\n\t * @throws ServletException e\n\t * @throws IOException e\n\t */\n\t@ReadOperation\n\tpublic Object report() throws ServletException, IOException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "javamelody_javamelody/218", "ground_truth": "\n\t\tfinal ServletRequestAttributes currentRequestAttributes = (ServletRequestAttributes) RequestContextHolder\n\t\t\t\t.currentRequestAttributes();\n\t\tfinal HttpServletRequest httpServletRequest = currentRequestAttributes.getRequest();\n\t\tfinal HttpServletResponse httpResponse = currentRequestAttributes.getResponse();\n\n\t\treportServlet.service(httpServletRequest, httpResponse);\n\t\t// status, headers and body are managed by the servlet, so return HttpEntity.EMPTY\n\t\treturn HttpEntity.EMPTY;\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-spring-boot-starter", "src", "main", "java", "net", "bull", "javamelody", "MonitoringEndpoint.java"], "context_start_lineno": 0, "function_name": "report", "left_context": "class MonitoringEndpoint {\n\tprivate final ReportServlet reportServlet;\n\n\t/**\n\t * Constructor.\n\t * @param servletContext ServletContext\n\t */\n\tpublic MonitoringEndpoint(ServletContext servletContext) {\n\t\treportServlet = new ReportServlet();\n\t\tfinal ServletConfig servletConfig = new ServletConfig() {\n\t\t\t// only getServletContext() will be used by ReportServlet\n\t\t\t@Override\n\t\t\tpublic ServletContext getServletContext() {\n\t\t\t\treturn servletContext;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getServletName() {\n\t\t\t\treturn MonitoringEndpoint.class.getName();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getInitParameter(String name) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Enumeration<String> getInitParameterNames() {\n\t\t\t\treturn Collections.emptyEnumeration();\n\t\t\t}\n\t\t};\n\t\treportServlet.init(servletConfig);\n\t}\n\n\t/**\n\t * Display a report page.\n\t * @return HttpEntity.EMPTY\n\t * @throws ServletException e\n\t * @throws IOException e\n\t */\n\t@ReadOperation\n\tpublic Object report() throws ServletException, IOException {", "right_context": "}\n}", "class_name": "MonitoringEndpoint", "return_type": "Object", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PID {\r\n\tprivate PID() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @return PID du process java\r\n\t */\r\n\tpublic static String getPID() {\r\n\t\tString pid = System.getProperty(\"pid\");\r\n\t\tif (pid == null) {\r\n\t\t\t// first, reliable with sun jdk (http://golesny.de/wiki/code:javahowtogetpid)\r\n\t\t\tfinal RuntimeMXBean rtb = ManagementFactory.getRuntimeMXBean();\r\n\t\t\tfinal String processName = rtb.getName();\r\n\t\t\t/* tested on: */\r\n\t\t\t/* - windows xp sp 2, java 1.5.0_13 */\r\n\t\t\t/* - mac os x 10.4.10, java 1.5.0 */\r\n\t\t\t/* - debian linux, java 1.5.0_13 */\r\n\t\t\t/* all return pid@host, e.g 2204@antonius */\r\n\r\n\t\t\tif (processName.indexOf('@') != -1) {\r\n\t\t\t\tpid = processName.substring(0, processName.indexOf('@'));\r\n\t\t\t} else {\r\n\t\t\t\tpid = getPIDFromOS();\r\n\t\t\t}\r\n\t\t\tSystem.setProperty(\"pid\", pid);\r\n\t\t}\r\n\t\treturn pid;\r\n\t}\r\n\r\n\tstatic String getPIDFromOS() {<FILL_FUNCTION_BODY>}\r\n\r\n\tprivate static void extractGetPid(File tempFile) throws IOException {\r\n\t\ttry (InputStream input = PID.class\r\n\t\t\t\t.getResourceAsStream(\"/net/bull/javamelody/resource/getpids.exe\")) {\r\n\t\t\tInputOutput.pumpToFile(input, tempFile);\r\n\t\t}\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/239", "ground_truth": "\r\n\t\tString pid;\r\n\t\t// following is not always reliable as is (for example, see issue 3 on solaris 10\r\n\t\t// or http://blog.igorminar.com/2007/03/how-java-application-can-discover-its.html)\r\n\t\t// Author: Santhosh Kumar T, https://github.com/santhosh-tekuri/jlibs, licence LGPL\r\n\t\t// Author getpids.exe: Daniel Scheibli, http://www.scheibli.com/projects/getpids/index.html, licence GPL\r\n\t\tfinal String[] cmd;\r\n\t\tFile tempFile = null;\r\n\t\tProcess process = null;\r\n\t\ttry {\r\n\t\t\ttry {\r\n\t\t\t\tif (!System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH)\r\n\t\t\t\t\t\t.contains(\"windows\")) {\r\n\t\t\t\t\tcmd = new String[] { \"/bin/sh\", \"-c\", \"echo $$ $PPID\" };\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// getpids.exe is taken from http://www.scheibli.com/projects/getpids/index.html (GPL)\r\n\t\t\t\t\ttempFile = File.createTempFile(\"getpids\", \".exe\");\r\n\r\n\t\t\t\t\t// extract the embedded getpids.exe file from the jar and save it to above file\r\n\t\t\t\t\textractGetPid(tempFile);\r\n\t\t\t\t\tcmd = new String[] { tempFile.getAbsolutePath() };\r\n\t\t\t\t}\r\n\t\t\t\tprocess = Runtime.getRuntime().exec(cmd);\r\n\t\t\t\tfinal String processOutput = InputOutput.pumpToString(process.getInputStream(),\r\n\t\t\t\t\t\tCharset.defaultCharset());\r\n\t\t\t\tfinal StringTokenizer stok = new StringTokenizer(processOutput);\r\n\t\t\t\tstok.nextToken(); // this is pid of the process we spanned\r\n\t\t\t\tpid = stok.nextToken();\r\n\r\n\t\t\t\t// waitFor n\u00e9cessaire sous windows server 2003\r\n\t\t\t\t// (sinon le fichier temporaire getpidsxxx.exe n'est pas effac\u00e9)\r\n\t\t\t\tprocess.waitFor();\r\n\t\t\t} finally {\r\n\t\t\t\tif (process != null) {\r\n\t\t\t\t\t// \u00e9vitons http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6462165\r\n\t\t\t\t\tprocess.getInputStream().close();\r\n\t\t\t\t\tprocess.getOutputStream().close();\r\n\t\t\t\t\tprocess.getErrorStream().close();\r\n\t\t\t\t\tprocess.destroy();\r\n\t\t\t\t}\r\n\t\t\t\tif (tempFile != null && !tempFile.delete()) {\r\n\t\t\t\t\ttempFile.deleteOnExit();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (final InterruptedException | IOException e) {\r\n\t\t\tpid = e.toString();\r\n\t\t}\r\n\t\treturn pid;\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "model", "PID.java"], "context_start_lineno": 0, "function_name": "getPIDFromOS", "left_context": "class PID {\r\n\tprivate PID() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @return PID du process java\r\n\t */\r\n\tpublic static String getPID() {\r\n\t\tString pid = System.getProperty(\"pid\");\r\n\t\tif (pid == null) {\r\n\t\t\t// first, reliable with sun jdk (http://golesny.de/wiki/code:javahowtogetpid)\r\n\t\t\tfinal RuntimeMXBean rtb = ManagementFactory.getRuntimeMXBean();\r\n\t\t\tfinal String processName = rtb.getName();\r\n\t\t\t/* tested on: */\r\n\t\t\t/* - windows xp sp 2, java 1.5.0_13 */\r\n\t\t\t/* - mac os x 10.4.10, java 1.5.0 */\r\n\t\t\t/* - debian linux, java 1.5.0_13 */\r\n\t\t\t/* all return pid@host, e.g 2204@antonius */\r\n\r\n\t\t\tif (processName.indexOf('@') != -1) {\r\n\t\t\t\tpid = processName.substring(0, processName.indexOf('@'));\r\n\t\t\t} else {\r\n\t\t\t\tpid = getPIDFromOS();\r\n\t\t\t}\r\n\t\t\tSystem.setProperty(\"pid\", pid);\r\n\t\t}\r\n\t\treturn pid;\r\n\t}\r\n\r\n\tstatic String getPIDFromOS() {", "right_context": "}\r\n\r\n\tprivate static void extractGetPid(File tempFile) throws IOException {\r\n\t\ttry (InputStream input = PID.class\r\n\t\t\t\t.getResourceAsStream(\"/net/bull/javamelody/resource/getpids.exe\")) {\r\n\t\t\tInputOutput.pumpToFile(input, tempFile);\r\n\t\t}\r\n\t}\r\n}", "class_name": "PID", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PdfCounterErrorReport extends PdfAbstractTableReport {\r\n\tprivate final Counter counter;\r\n\tprivate final DateFormat dateTimeFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT,\r\n\t\t\tDateFormat.MEDIUM, I18N.getCurrentLocale());\r\n\tprivate final Font severeFont = PdfFonts.SEVERE_CELL.getFont();\r\n\tprivate final Font normalFont = PdfFonts.NORMAL.getFont();\r\n\r\n\tPdfCounterErrorReport(Counter counter, Document document) {\r\n\t\tsuper(document);\r\n\t\tassert counter != null;\r\n\t\tassert counter.isErrorCounter();\r\n\t\tthis.counter = counter;\r\n\t}\r\n\r\n\t@Override\r\n\tvoid toPdf() throws DocumentException {<FILL_FUNCTION_BODY>}\r\n\r\n\tprivate void writeErrors(List<CounterError> errors) throws DocumentException {\r\n\t\tassert errors != null;\r\n\t\tfinal boolean displayUser = HtmlCounterErrorReport.shouldDisplayUser(errors);\r\n\t\tfinal boolean displayHttpRequest = HtmlCounterErrorReport.shouldDisplayHttpRequest(errors);\r\n\t\tif (errors.size() >= Counter.MAX_ERRORS_COUNT) {\r\n\t\t\taddToDocument(new Phrase(\r\n\t\t\t\t\tgetFormattedString(\"Dernieres_erreurs_seulement\", Counter.MAX_ERRORS_COUNT)\r\n\t\t\t\t\t\t\t+ '\\n',\r\n\t\t\t\t\tsevereFont));\r\n\t\t}\r\n\t\twriteHeader(displayUser, displayHttpRequest);\r\n\r\n\t\tfor (final CounterError error : errors) {\r\n\t\t\tnextRow();\r\n\t\t\twriteError(error, displayUser, displayHttpRequest);\r\n\t\t}\r\n\t\taddTableToDocument();\r\n\t}\r\n\r\n\tprivate void writeHeader(boolean displayUser, boolean displayHttpRequest)\r\n\t\t\tthrows DocumentException {\r\n\t\tfinal List<String> headers = createHeaders(displayUser, displayHttpRequest);\r\n\t\tfinal int[] relativeWidths = new int[headers.size()];\r\n\t\tArrays.fill(relativeWidths, 0, headers.size(), 1);\r\n\t\tif (displayHttpRequest) {\r\n\t\t\trelativeWidths[1] = 4; // requ\u00eate http\r\n\t\t}\r\n\t\trelativeWidths[headers.size() - 1] = 4; // message d'erreur\r\n\r\n\t\tinitTable(headers, relativeWidths);\r\n\t}\r\n\r\n\tprivate List<String> createHeaders(boolean displayUser, boolean displayHttpRequest) {\r\n\t\tfinal List<String> headers = new ArrayList<>();\r\n\t\theaders.add(getString(\"Date\"));\r\n\t\tif (displayHttpRequest) {\r\n\t\t\theaders.add(getString(\"Requete\"));\r\n\t\t}\r\n\t\tif (displayUser) {\r\n\t\t\theaders.add(getString(\"Utilisateur\"));\r\n\t\t}\r\n\t\theaders.add(getString(\"Erreur\"));\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate void writeError(CounterError error, boolean displayUser, boolean displayHttpRequest) {\r\n\t\tgetDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n\t\taddCell(dateTimeFormat.format(error.getDate()));\r\n\t\tgetDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);\r\n\t\tif (displayHttpRequest) {\r\n\t\t\tif (error.getHttpRequest() == null) {\r\n\t\t\t\taddCell(\"\");\r\n\t\t\t} else {\r\n\t\t\t\taddCell(error.getHttpRequest());\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (displayUser) {\r\n\t\t\tif (error.getRemoteUser() == null) {\r\n\t\t\t\taddCell(\"\");\r\n\t\t\t} else {\r\n\t\t\t\taddCell(error.getRemoteUser());\r\n\t\t\t}\r\n\t\t}\r\n\t\taddCell(error.getMessage());\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/242", "ground_truth": "\r\n\t\tfinal List<CounterError> errors = counter.getErrors();\r\n\t\tif (errors.isEmpty()) {\r\n\t\t\taddToDocument(new Phrase(getString(\"Aucune_erreur\"), normalFont));\r\n\t\t} else {\r\n\t\t\twriteErrors(errors);\r\n\t\t}\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "web", "pdf", "PdfCounterErrorReport.java"], "context_start_lineno": 0, "function_name": "toPdf", "left_context": "class PdfCounterErrorReport extends PdfAbstractTableReport {\r\n\tprivate final Counter counter;\r\n\tprivate final DateFormat dateTimeFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT,\r\n\t\t\tDateFormat.MEDIUM, I18N.getCurrentLocale());\r\n\tprivate final Font severeFont = PdfFonts.SEVERE_CELL.getFont();\r\n\tprivate final Font normalFont = PdfFonts.NORMAL.getFont();\r\n\r\n\tPdfCounterErrorReport(Counter counter, Document document) {\r\n\t\tsuper(document);\r\n\t\tassert counter != null;\r\n\t\tassert counter.isErrorCounter();\r\n\t\tthis.counter = counter;\r\n\t}\r\n\r\n\t@Override\r\n\tvoid toPdf() throws DocumentException {", "right_context": "}\r\n\r\n\tprivate void writeErrors(List<CounterError> errors) throws DocumentException {\r\n\t\tassert errors != null;\r\n\t\tfinal boolean displayUser = HtmlCounterErrorReport.shouldDisplayUser(errors);\r\n\t\tfinal boolean displayHttpRequest = HtmlCounterErrorReport.shouldDisplayHttpRequest(errors);\r\n\t\tif (errors.size() >= Counter.MAX_ERRORS_COUNT) {\r\n\t\t\taddToDocument(new Phrase(\r\n\t\t\t\t\tgetFormattedString(\"Dernieres_erreurs_seulement\", Counter.MAX_ERRORS_COUNT)\r\n\t\t\t\t\t\t\t+ '\\n',\r\n\t\t\t\t\tsevereFont));\r\n\t\t}\r\n\t\twriteHeader(displayUser, displayHttpRequest);\r\n\r\n\t\tfor (final CounterError error : errors) {\r\n\t\t\tnextRow();\r\n\t\t\twriteError(error, displayUser, displayHttpRequest);\r\n\t\t}\r\n\t\taddTableToDocument();\r\n\t}\r\n\r\n\tprivate void writeHeader(boolean displayUser, boolean displayHttpRequest)\r\n\t\t\tthrows DocumentException {\r\n\t\tfinal List<String> headers = createHeaders(displayUser, displayHttpRequest);\r\n\t\tfinal int[] relativeWidths = new int[headers.size()];\r\n\t\tArrays.fill(relativeWidths, 0, headers.size(), 1);\r\n\t\tif (displayHttpRequest) {\r\n\t\t\trelativeWidths[1] = 4; // requ\u00eate http\r\n\t\t}\r\n\t\trelativeWidths[headers.size() - 1] = 4; // message d'erreur\r\n\r\n\t\tinitTable(headers, relativeWidths);\r\n\t}\r\n\r\n\tprivate List<String> createHeaders(boolean displayUser, boolean displayHttpRequest) {\r\n\t\tfinal List<String> headers = new ArrayList<>();\r\n\t\theaders.add(getString(\"Date\"));\r\n\t\tif (displayHttpRequest) {\r\n\t\t\theaders.add(getString(\"Requete\"));\r\n\t\t}\r\n\t\tif (displayUser) {\r\n\t\t\theaders.add(getString(\"Utilisateur\"));\r\n\t\t}\r\n\t\theaders.add(getString(\"Erreur\"));\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate void writeError(CounterError error, boolean displayUser, boolean displayHttpRequest) {\r\n\t\tgetDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n\t\taddCell(dateTimeFormat.format(error.getDate()));\r\n\t\tgetDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);\r\n\t\tif (displayHttpRequest) {\r\n\t\t\tif (error.getHttpRequest() == null) {\r\n\t\t\t\taddCell(\"\");\r\n\t\t\t} else {\r\n\t\t\t\taddCell(error.getHttpRequest());\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (displayUser) {\r\n\t\t\tif (error.getRemoteUser() == null) {\r\n\t\t\t\taddCell(\"\");\r\n\t\t\t} else {\r\n\t\t\t\taddCell(error.getRemoteUser());\r\n\t\t\t}\r\n\t\t}\r\n\t\taddCell(error.getMessage());\r\n\t}\r\n}", "class_name": "PdfCounterErrorReport", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JavaMelodyPersistenceProviderResolver\r\n\t\t\timplements PersistenceProviderResolver {\r\n\t\tprivate final PersistenceProviderResolver delegate;\r\n\r\n\t\tJavaMelodyPersistenceProviderResolver(PersistenceProviderResolver delegate) {\r\n\t\t\tsuper();\r\n\t\t\tthis.delegate = delegate;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic List<PersistenceProvider> getPersistenceProviders() {\r\n\t\t\t// avant de retourner la liste des persistence providers\r\n\t\t\t// on met notre JpaPersistence en premier pour qu'il soit toujours choisi\r\n\t\t\t// et qu'il d\u00e9l\u00e8gue au persistence provider final\r\n\t\t\tfinal List<PersistenceProvider> providers = delegate.getPersistenceProviders();\r\n\t\t\tfinal List<PersistenceProvider> result = new ArrayList<>();\r\n\t\t\tfor (final PersistenceProvider provider : providers) {\r\n\t\t\t\tif (provider instanceof JpaPersistence) {\r\n\t\t\t\t\tresult.add(0, provider);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.add(provider);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void clearCachedProviders() {\r\n\t\t\tdelegate.clearCachedProviders();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Active le monitoring JPA par d\u00e9faut,\r\n\t * m\u00eame si <provider>net.bull.javamelody.JpaPersistence</provider> n'est pas dans META-INF/persistence.xml\r\n\t */\r\n\tpublic static void initPersistenceProviderResolver() {\r\n\t\ttry {\r\n\t\t\tPersistenceProviderResolver resolver = PersistenceProviderResolverHolder\r\n\t\t\t\t\t.getPersistenceProviderResolver();\r\n\t\t\tif (!(resolver instanceof JavaMelodyPersistenceProviderResolver)) {\r\n\t\t\t\tresolver = new JavaMelodyPersistenceProviderResolver(resolver);\r\n\t\t\t\tPersistenceProviderResolverHolder.setPersistenceProviderResolver(resolver);\r\n\t\t\t\tLOG.debug(\"JPA persistence provider resolver initialized\");\r\n\t\t\t}\r\n\t\t} catch (final Throwable t) { // NOPMD\r\n\t\t\tLOG.info(\"initialization of jpa persistence provider resolver failed, skipping\");\r\n\t\t}\r\n\t}\r\n\r\n\t// cette classe est instanci\u00e9e d\u00e8s le d\u00e9marrage (WildFly notamment),\r\n\t// il ne faut donc pas appeler initJpaCounter() dans le constructeur\r\n\r\n\tprivate void initJpaCounter() {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "javamelody_javamelody/278", "ground_truth": "\r\n\t\t// quand cette classe est utilis\u00e9e, le compteur est affich\u00e9\r\n\t\t// sauf si le param\u00e8tre displayed-counters dit le contraire\r\n\t\tJPA_COUNTER.setDisplayed(!COUNTER_HIDDEN);\r\n\t\t// setUsed(true) n\u00e9cessaire ici si le contexte jpa est initialis\u00e9 avant FilterContext\r\n\t\t// sinon les statistiques jpa ne sont pas affich\u00e9es\r\n\t\tJPA_COUNTER.setUsed(true);\r\n\t\tLOG.debug(\"jpa persistence initialized\");\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "JpaPersistence.java"], "context_start_lineno": 0, "function_name": "initJpaCounter", "left_context": "class JavaMelodyPersistenceProviderResolver\r\n\t\t\timplements PersistenceProviderResolver {\r\n\t\tprivate final PersistenceProviderResolver delegate;\r\n\r\n\t\tJavaMelodyPersistenceProviderResolver(PersistenceProviderResolver delegate) {\r\n\t\t\tsuper();\r\n\t\t\tthis.delegate = delegate;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic List<PersistenceProvider> getPersistenceProviders() {\r\n\t\t\t// avant de retourner la liste des persistence providers\r\n\t\t\t// on met notre JpaPersistence en premier pour qu'il soit toujours choisi\r\n\t\t\t// et qu'il d\u00e9l\u00e8gue au persistence provider final\r\n\t\t\tfinal List<PersistenceProvider> providers = delegate.getPersistenceProviders();\r\n\t\t\tfinal List<PersistenceProvider> result = new ArrayList<>();\r\n\t\t\tfor (final PersistenceProvider provider : providers) {\r\n\t\t\t\tif (provider instanceof JpaPersistence) {\r\n\t\t\t\t\tresult.add(0, provider);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.add(provider);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void clearCachedProviders() {\r\n\t\t\tdelegate.clearCachedProviders();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Active le monitoring JPA par d\u00e9faut,\r\n\t * m\u00eame si <provider>net.bull.javamelody.JpaPersistence</provider> n'est pas dans META-INF/persistence.xml\r\n\t */\r\n\tpublic static void initPersistenceProviderResolver() {\r\n\t\ttry {\r\n\t\t\tPersistenceProviderResolver resolver = PersistenceProviderResolverHolder\r\n\t\t\t\t\t.getPersistenceProviderResolver();\r\n\t\t\tif (!(resolver instanceof JavaMelodyPersistenceProviderResolver)) {\r\n\t\t\t\tresolver = new JavaMelodyPersistenceProviderResolver(resolver);\r\n\t\t\t\tPersistenceProviderResolverHolder.setPersistenceProviderResolver(resolver);\r\n\t\t\t\tLOG.debug(\"JPA persistence provider resolver initialized\");\r\n\t\t\t}\r\n\t\t} catch (final Throwable t) { // NOPMD\r\n\t\t\tLOG.info(\"initialization of jpa persistence provider resolver failed, skipping\");\r\n\t\t}\r\n\t}\r\n\r\n\t// cette classe est instanci\u00e9e d\u00e8s le d\u00e9marrage (WildFly notamment),\r\n\t// il ne faut donc pas appeler initJpaCounter() dans le constructeur\r\n\r\n\tprivate void initJpaCounter() {", "right_context": "", "class_name": "JavaMelodyPersistenceProviderResolver", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/JdbcWrapper.java\n// --------------------------------------------------\n// /** \n//  * Cr\u00e9e un proxy d'une  {@link DataSource} jdbc.\n//  * @param dataSource DataSource\n//  * @return DataSource\n//  */\n// public DataSource createDataSourceProxy(DataSource dataSource){\n//   return createDataSourceProxy(null,dataSource);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/JdbcWrapper.java\n// --------------------------------------------------\n// /** \n//  * Cr\u00e9e un proxy d'une  {@link DataSource} jdbc.\n//  * @param name String\n//  * @param dataSource DataSource\n//  * @return DataSource\n//  */\n// public DataSource createDataSourceProxy(String name,final DataSource dataSource){\n//   assert dataSource != null;\n//   JdbcWrapperHelper.pullDataSourceProperties(name,dataSource);\n//   final InvocationHandler invocationHandler=new AbstractInvocationHandler<DataSource>(dataSource){\n//     private static final long serialVersionUID=1L;\n//     /** \n//  * {@inheritDoc} \n//  */\n//     @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {\n//       Object result=method.invoke(dataSource,args);\n//       if (result instanceof Connection) {\n//         result=createConnectionProxy((Connection)result);\n//       }\n//       return result;\n//     }\n//   }\n// ;\n//   return createProxy(dataSource,invocationHandler);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SpringDataSourceFactoryBean extends AbstractFactoryBean<DataSource> {\r\n\tprivate String targetName;\r\n\r\n\t// exemple :\r\n\t//\t<bean id=\"wrappedDataSource\" class=\"net.bull.javamelody.SpringDataSourceFactoryBean\">\r\n\t//\t\t<property name=\"targetName\" value=\"targetDataSource\" />\r\n\t//\t</bean>\r\n\t//\r\n\t//\t<bean id=\"targetDataSource\" ...\r\n\t//\t</bean>\r\n\r\n\t/**\r\n\t * Name of target bean to instrument.\r\n\t * This should implement {@linkplain DataSource}.\r\n\t * @param targetName name of bean, not null.\r\n\t */\r\n\tpublic void setTargetName(String targetName) {\r\n\t\tassert targetName != null;\r\n\t\tthis.targetName = targetName;\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tprotected DataSource createInstance() {<FILL_FUNCTION_BODY>}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tpublic Class<?> getObjectType() {\r\n\t\treturn DataSource.class;\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/293", "ground_truth": "\r\n\t\tif (targetName == null) {\r\n\t\t\tthrow new IllegalStateException(\"targetName must not be null\");\r\n\t\t}\r\n\t\tfinal BeanFactory beanFactory = getBeanFactory();\r\n\t\tassert beanFactory != null;\r\n\t\tfinal DataSource dataSource = beanFactory.getBean(targetName, DataSource.class);\r\n\t\tJdbcWrapper.registerSpringDataSource(targetName, dataSource);\r\n\t\tfinal DataSource result = JdbcWrapper.SINGLETON.createDataSourceProxy(targetName,\r\n\t\t\t\tdataSource);\r\n\t\tLOG.debug(\"Spring target datasource wrapped: \" + targetName);\r\n\t\treturn result;\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "SpringDataSourceFactoryBean.java"], "context_start_lineno": 0, "function_name": "createInstance", "left_context": "class SpringDataSourceFactoryBean extends AbstractFactoryBean<DataSource> {\r\n\tprivate String targetName;\r\n\r\n\t// exemple :\r\n\t//\t<bean id=\"wrappedDataSource\" class=\"net.bull.javamelody.SpringDataSourceFactoryBean\">\r\n\t//\t\t<property name=\"targetName\" value=\"targetDataSource\" />\r\n\t//\t</bean>\r\n\t//\r\n\t//\t<bean id=\"targetDataSource\" ...\r\n\t//\t</bean>\r\n\r\n\t/**\r\n\t * Name of target bean to instrument.\r\n\t * This should implement {@linkplain DataSource}.\r\n\t * @param targetName name of bean, not null.\r\n\t */\r\n\tpublic void setTargetName(String targetName) {\r\n\t\tassert targetName != null;\r\n\t\tthis.targetName = targetName;\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tprotected DataSource createInstance() {", "right_context": "}\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t */\r\n\t@Override\r\n\tpublic Class<?> getObjectType() {\r\n\t\treturn DataSource.class;\r\n\t}\r\n}", "class_name": "SpringDataSourceFactoryBean", "return_type": "DataSource", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CounterOutputStream extends OutputStream {\r\n\t\tint dataLength;\r\n\t\tprivate final OutputStream output;\r\n\r\n\t\tCounterOutputStream(OutputStream output) {\r\n\t\t\tsuper();\r\n\t\t\tthis.output = output;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(int b) throws IOException {\r\n\t\t\toutput.write(b);\r\n\t\t\tdataLength++;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(byte[] b) throws IOException {\r\n\t\t\toutput.write(b);\r\n\t\t\tdataLength += b.length;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(byte[] b, int off, int len) throws IOException {\r\n\t\t\toutput.write(b, off, len);\r\n\t\t\tdataLength += len;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void flush() throws IOException {\r\n\t\t\toutput.flush();\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void close() throws IOException {\r\n\t\t\toutput.close();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructeur.\r\n\t * @param counter Counter\r\n\t */\r\n\tCounterStorage(Counter counter) {\r\n\t\tsuper();\r\n\t\tassert counter != null;\r\n\t\tthis.counter = counter;\r\n\t}\r\n\r\n\t/**\r\n\t * Enregistre le counter.\r\n\t * @return Taille s\u00e9rialis\u00e9e non compress\u00e9e du counter (estimation pessimiste de l'occupation m\u00e9moire)\r\n\t * @throws IOException Exception d'entr\u00e9e/sortie\r\n\t */\r\n\tint writeToFile() throws IOException {\r\n\t\tif (storageDisabled) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tfinal File file = getFile();\r\n\t\tif (counter.getRequestsCount() == 0 && counter.getErrorsCount() == 0 && !file.exists()) {\r\n\t\t\t// s'il n'y a pas de requ\u00eate, inutile d'\u00e9crire des fichiers de compteurs vides\r\n\t\t\t// (par exemple pour le compteur ejb s'il n'y a pas d'ejb)\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tfinal File directory = file.getParentFile();\r\n\t\tif (!directory.mkdirs() && !directory.exists()) {\r\n\t\t\tthrow new IOException(\"JavaMelody directory can't be created: \" + directory.getPath());\r\n\t\t}\r\n\t\treturn writeToFile(counter, file);\r\n\t}\r\n\r\n\tstatic int writeToFile(Counter counter, File file) throws IOException {\r\n\t\ttry (FileOutputStream out = new FileOutputStream(file)) {\r\n\t\t\tfinal CounterOutputStream counterOutput = new CounterOutputStream(\r\n\t\t\t\t\tnew GZIPOutputStream(new BufferedOutputStream(out)));\r\n\t\t\ttry (ObjectOutputStream output = new ObjectOutputStream(counterOutput)) {\r\n\t\t\t\toutput.writeObject(counter);\r\n\t\t\t\t// ce close lib\u00e8re les ressources du ObjectOutputStream et du GZIPOutputStream\r\n\t\t\t}\r\n\t\t\t// retourne la taille s\u00e9rialis\u00e9e non compress\u00e9e,\r\n\t\t\t// qui est une estimation pessimiste de l'occupation m\u00e9moire\r\n\t\t\treturn counterOutput.dataLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Lecture du counter depuis son fichier et retour du r\u00e9sultat.\r\n\t * @return Counter\r\n\t * @throws IOException e\r\n\t */\r\n\tCounter readFromFile() throws IOException {\r\n\t\tif (storageDisabled) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal File file = getFile();\r\n\t\tif (file.exists()) {\r\n\t\t\treturn readFromFile(file);\r\n\t\t}\r\n\t\t// ou on retourne null si le fichier n'existe pas\r\n\t\treturn null;\r\n\t}\r\n\r\n\tstatic Counter readFromFile(File file) throws IOException {\r\n\t\ttry (FileInputStream in = new FileInputStream(file)) {\r\n\t\t\ttry (ObjectInputStream input = TransportFormat\r\n\t\t\t\t\t.createObjectInputStream(new GZIPInputStream(new BufferedInputStream(in)))) {\r\n\t\t\t\t// on retourne l'instance du counter lue\r\n\t\t\t\treturn (Counter) input.readObject();\r\n\t\t\t\t// ce close lib\u00e8re les ressources du ObjectInputStream et du GZIPInputStream\r\n\t\t\t}\r\n\t\t} catch (final ClassNotFoundException e) {\r\n\t\t\tthrow new IOException(e.getMessage(), e);\r\n\t\t} catch (final IllegalStateException | ClassCastException e) {\r\n\t\t\tLOG.warn(\"could not deserialize \" + file.getName()\r\n\t\t\t\t\t+ \" , corrupted file will be deleted.\", e);\r\n\t\t\tfile.delete();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate File getFile() {\r\n\t\tfinal File storageDirectory = Parameters.getStorageDirectory(counter.getApplication());\r\n\t\treturn new File(storageDirectory, counter.getStorageName() + \".ser.gz\");\r\n\t}\r\n\r\n\tstatic long deleteObsoleteCounterFiles(String application) {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "javamelody_javamelody/299", "ground_truth": "\r\n\t\tfinal Calendar nowMinusOneYearAndADay = Calendar.getInstance();\r\n\t\tnowMinusOneYearAndADay.add(Calendar.DAY_OF_YEAR, -getObsoleteStatsDays());\r\n\t\tnowMinusOneYearAndADay.add(Calendar.DAY_OF_YEAR, -1);\r\n\t\t// filtre pour ne garder que les fichiers d'extension .ser.gz et pour \u00e9viter d'instancier des File inutiles\r\n\t\tlong diskUsage = 0;\r\n\t\tfor (final File file : listSerGzFiles(application)) {\r\n\t\t\tboolean deleted = false;\r\n\t\t\tif (file.lastModified() < nowMinusOneYearAndADay.getTimeInMillis()) {\r\n\t\t\t\tdeleted = file.delete();\r\n\t\t\t}\r\n\t\t\tif (!deleted) {\r\n\t\t\t\tdiskUsage += file.length();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// on retourne true si tous les fichiers .ser.gz obsol\u00e8tes ont \u00e9t\u00e9 supprim\u00e9s, false sinon\r\n\t\treturn diskUsage;\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "model", "CounterStorage.java"], "context_start_lineno": 0, "function_name": "deleteObsoleteCounterFiles", "left_context": "class CounterOutputStream extends OutputStream {\r\n\t\tint dataLength;\r\n\t\tprivate final OutputStream output;\r\n\r\n\t\tCounterOutputStream(OutputStream output) {\r\n\t\t\tsuper();\r\n\t\t\tthis.output = output;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(int b) throws IOException {\r\n\t\t\toutput.write(b);\r\n\t\t\tdataLength++;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(byte[] b) throws IOException {\r\n\t\t\toutput.write(b);\r\n\t\t\tdataLength += b.length;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(byte[] b, int off, int len) throws IOException {\r\n\t\t\toutput.write(b, off, len);\r\n\t\t\tdataLength += len;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void flush() throws IOException {\r\n\t\t\toutput.flush();\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void close() throws IOException {\r\n\t\t\toutput.close();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructeur.\r\n\t * @param counter Counter\r\n\t */\r\n\tCounterStorage(Counter counter) {\r\n\t\tsuper();\r\n\t\tassert counter != null;\r\n\t\tthis.counter = counter;\r\n\t}\r\n\r\n\t/**\r\n\t * Enregistre le counter.\r\n\t * @return Taille s\u00e9rialis\u00e9e non compress\u00e9e du counter (estimation pessimiste de l'occupation m\u00e9moire)\r\n\t * @throws IOException Exception d'entr\u00e9e/sortie\r\n\t */\r\n\tint writeToFile() throws IOException {\r\n\t\tif (storageDisabled) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tfinal File file = getFile();\r\n\t\tif (counter.getRequestsCount() == 0 && counter.getErrorsCount() == 0 && !file.exists()) {\r\n\t\t\t// s'il n'y a pas de requ\u00eate, inutile d'\u00e9crire des fichiers de compteurs vides\r\n\t\t\t// (par exemple pour le compteur ejb s'il n'y a pas d'ejb)\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tfinal File directory = file.getParentFile();\r\n\t\tif (!directory.mkdirs() && !directory.exists()) {\r\n\t\t\tthrow new IOException(\"JavaMelody directory can't be created: \" + directory.getPath());\r\n\t\t}\r\n\t\treturn writeToFile(counter, file);\r\n\t}\r\n\r\n\tstatic int writeToFile(Counter counter, File file) throws IOException {\r\n\t\ttry (FileOutputStream out = new FileOutputStream(file)) {\r\n\t\t\tfinal CounterOutputStream counterOutput = new CounterOutputStream(\r\n\t\t\t\t\tnew GZIPOutputStream(new BufferedOutputStream(out)));\r\n\t\t\ttry (ObjectOutputStream output = new ObjectOutputStream(counterOutput)) {\r\n\t\t\t\toutput.writeObject(counter);\r\n\t\t\t\t// ce close lib\u00e8re les ressources du ObjectOutputStream et du GZIPOutputStream\r\n\t\t\t}\r\n\t\t\t// retourne la taille s\u00e9rialis\u00e9e non compress\u00e9e,\r\n\t\t\t// qui est une estimation pessimiste de l'occupation m\u00e9moire\r\n\t\t\treturn counterOutput.dataLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Lecture du counter depuis son fichier et retour du r\u00e9sultat.\r\n\t * @return Counter\r\n\t * @throws IOException e\r\n\t */\r\n\tCounter readFromFile() throws IOException {\r\n\t\tif (storageDisabled) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal File file = getFile();\r\n\t\tif (file.exists()) {\r\n\t\t\treturn readFromFile(file);\r\n\t\t}\r\n\t\t// ou on retourne null si le fichier n'existe pas\r\n\t\treturn null;\r\n\t}\r\n\r\n\tstatic Counter readFromFile(File file) throws IOException {\r\n\t\ttry (FileInputStream in = new FileInputStream(file)) {\r\n\t\t\ttry (ObjectInputStream input = TransportFormat\r\n\t\t\t\t\t.createObjectInputStream(new GZIPInputStream(new BufferedInputStream(in)))) {\r\n\t\t\t\t// on retourne l'instance du counter lue\r\n\t\t\t\treturn (Counter) input.readObject();\r\n\t\t\t\t// ce close lib\u00e8re les ressources du ObjectInputStream et du GZIPInputStream\r\n\t\t\t}\r\n\t\t} catch (final ClassNotFoundException e) {\r\n\t\t\tthrow new IOException(e.getMessage(), e);\r\n\t\t} catch (final IllegalStateException | ClassCastException e) {\r\n\t\t\tLOG.warn(\"could not deserialize \" + file.getName()\r\n\t\t\t\t\t+ \" , corrupted file will be deleted.\", e);\r\n\t\t\tfile.delete();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate File getFile() {\r\n\t\tfinal File storageDirectory = Parameters.getStorageDirectory(counter.getApplication());\r\n\t\treturn new File(storageDirectory, counter.getStorageName() + \".ser.gz\");\r\n\t}\r\n\r\n\tstatic long deleteObsoleteCounterFiles(String application) {", "right_context": "", "class_name": "CounterOutputStream", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Viewer {\n\t/**\n\t * main.\n\t * @param args String[]\n\t * @throws Exception e\n\t */\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String storageDirectory = Parameter.STORAGE_DIRECTORY.getValue();\n\t\tif (storageDirectory == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Please give the javamelody storage directory with -Djavamelody.storage-directory=... containing directories with the data of one or more instances of an application\");\n\t\t}\n\t\t// merge and copy the data of one or more instances into a temporary directory\n\t\tfinal String tmpApplication = \"tmpjavamelody\" + new Random().nextInt();\n\t\tfinal String mergedDirectory = System.getProperty(\"java.io.tmpdir\"); //Parameters.getStorageDirectory(tmpApplication).getPath();\n\n\t\tDataMerge.main(new String[] { storageDirectory, mergedDirectory + '/' + tmpApplication });\n\t\taddShutdownHook(new File(mergedDirectory + '/' + tmpApplication));\n\n\t\tfinal Map<Parameter, String> parameters = new HashMap<>();\n\t\t// set the path of the reports:\n\t\tparameters.put(Parameter.MONITORING_PATH, \"/\");\n\n\t\t// set the storage directory and temp application name:\n\t\tParameter.STORAGE_DIRECTORY.setValue(mergedDirectory);\n\t\tparameters.put(Parameter.APPLICATION_NAME, tmpApplication);\n\n\t\t// start the embedded http server with javamelody\n\t\tfinal String port = System.getProperty(\"javamelody.viewer.port\", \"8080\");\n\t\tString url = \"http://localhost:\" + port + '/';\n\t\tSystem.out.println(\"Starting on \" + url);\n\t\tEmbeddedServer.start(Integer.parseInt(port), parameters);\n\n\t\t// open the reports in a browser\n\t\tfinal String lastDay = new SimpleDateFormat(\"yyyy-MM-dd\")\n\t\t\t\t.format(new Date(getLatest(new File(storageDirectory))));\n\t\turl += \"?period=\" + lastDay + \"%7C\" + lastDay + \"&pattern=yyyy-MM-dd\";\n\t\tSystem.out.println(\"Opening the reports in a browser on \" + url);\n\t\tDesktop.getDesktop().browse(URI.create(url));\n\t\tSystem.out.println(\"Done\");\n\t}\n\n\tprivate static long getLatest(File directory) {<FILL_FUNCTION_BODY>}\n\n\tprivate static void addShutdownHook(final File directoryToCleanup) {\n\t\tRuntime.getRuntime().addShutdownHook(new Thread() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"Cleaning up...\");\n\t\t\t\ttry {\n\t\t\t\t\t// stop is needed to remove locks on files such as the javamelody.lock file\n\t\t\t\t\tEmbeddedServer.stop();\n\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\tSystem.out.println(e.toString());\n\t\t\t\t}\n\t\t\t\tif (directoryToCleanup.exists()) {\n\t\t\t\t\tfor (final File file : directoryToCleanup.listFiles()) {\n\t\t\t\t\t\tfile.delete();\n\t\t\t\t\t}\n\t\t\t\t\tdirectoryToCleanup.delete();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Good bye\");\n\t\t\t}\n\t\t});\n\t}\n}", "metadata": {"task_id": "javamelody_javamelody/323", "ground_truth": "\n\t\tlong latest = 0;\n\t\tfor (final File file : directory.listFiles()) {\n\t\t\tif (file.isDirectory()) {\n\t\t\t\tlatest = Math.max(latest, getLatest(file));\n\t\t\t} else {\n\t\t\t\tlatest = Math.max(latest, file.lastModified());\n\t\t\t}\n\t\t}\n\t\treturn latest;\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-offline-viewer", "src", "main", "java", "net", "bull", "javamelody", "Viewer.java"], "context_start_lineno": 0, "function_name": "getLatest", "left_context": "class Viewer {\n\t/**\n\t * main.\n\t * @param args String[]\n\t * @throws Exception e\n\t */\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String storageDirectory = Parameter.STORAGE_DIRECTORY.getValue();\n\t\tif (storageDirectory == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Please give the javamelody storage directory with -Djavamelody.storage-directory=... containing directories with the data of one or more instances of an application\");\n\t\t}\n\t\t// merge and copy the data of one or more instances into a temporary directory\n\t\tfinal String tmpApplication = \"tmpjavamelody\" + new Random().nextInt();\n\t\tfinal String mergedDirectory = System.getProperty(\"java.io.tmpdir\"); //Parameters.getStorageDirectory(tmpApplication).getPath();\n\n\t\tDataMerge.main(new String[] { storageDirectory, mergedDirectory + '/' + tmpApplication });\n\t\taddShutdownHook(new File(mergedDirectory + '/' + tmpApplication));\n\n\t\tfinal Map<Parameter, String> parameters = new HashMap<>();\n\t\t// set the path of the reports:\n\t\tparameters.put(Parameter.MONITORING_PATH, \"/\");\n\n\t\t// set the storage directory and temp application name:\n\t\tParameter.STORAGE_DIRECTORY.setValue(mergedDirectory);\n\t\tparameters.put(Parameter.APPLICATION_NAME, tmpApplication);\n\n\t\t// start the embedded http server with javamelody\n\t\tfinal String port = System.getProperty(\"javamelody.viewer.port\", \"8080\");\n\t\tString url = \"http://localhost:\" + port + '/';\n\t\tSystem.out.println(\"Starting on \" + url);\n\t\tEmbeddedServer.start(Integer.parseInt(port), parameters);\n\n\t\t// open the reports in a browser\n\t\tfinal String lastDay = new SimpleDateFormat(\"yyyy-MM-dd\")\n\t\t\t\t.format(new Date(getLatest(new File(storageDirectory))));\n\t\turl += \"?period=\" + lastDay + \"%7C\" + lastDay + \"&pattern=yyyy-MM-dd\";\n\t\tSystem.out.println(\"Opening the reports in a browser on \" + url);\n\t\tDesktop.getDesktop().browse(URI.create(url));\n\t\tSystem.out.println(\"Done\");\n\t}\n\n\tprivate static long getLatest(File directory) {", "right_context": "}\n\n\tprivate static void addShutdownHook(final File directoryToCleanup) {\n\t\tRuntime.getRuntime().addShutdownHook(new Thread() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"Cleaning up...\");\n\t\t\t\ttry {\n\t\t\t\t\t// stop is needed to remove locks on files such as the javamelody.lock file\n\t\t\t\t\tEmbeddedServer.stop();\n\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\tSystem.out.println(e.toString());\n\t\t\t\t}\n\t\t\t\tif (directoryToCleanup.exists()) {\n\t\t\t\t\tfor (final File file : directoryToCleanup.listFiles()) {\n\t\t\t\t\t\tfile.delete();\n\t\t\t\t\t}\n\t\t\t\t\tdirectoryToCleanup.delete();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Good bye\");\n\t\t\t}\n\t\t});\n\t}\n}", "class_name": "Viewer", "return_type": "long", "parameters": [{"type": "File", "name": "directory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MonitoringInitialContextFactory implements InitialContextFactory {\r\n\t// on sauvegarde la factory initiale\r\n\t// (org.apache.naming.java.javaURLContextFactory dans Tomcat6\r\n\t// avec un scheme \"java\" tel que d\u00e9fini dans NamingManager.getURLContext)\r\n\tprivate static String initialContextFactory;\r\n\r\n\t// et on la remplace par la n\u00f4tre\r\n\tstatic void init() {\r\n\t\tinitialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);\r\n\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY,\r\n\t\t\t\tMonitoringInitialContextFactory.class.getName());\r\n\t}\r\n\r\n\tstatic void stop() {<FILL_FUNCTION_BODY>}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Context getInitialContext(Hashtable<?, ?> environment) throws NamingException { // NOPMD\r\n\t\ttry {\r\n\t\t\tfinal Class<?> clazz = Class.forName(initialContextFactory);\r\n\t\t\tfinal InitialContextFactory icf = (InitialContextFactory) clazz.newInstance();\r\n\t\t\tfinal Context context = icf.getInitialContext(environment);\r\n\t\t\tfinal JdbcWrapper jdbcWrapper = JdbcWrapper.SINGLETON;\r\n\t\t\treturn jdbcWrapper.createContextProxy(context);\r\n\t\t} catch (final ClassNotFoundException | IllegalAccessException | InstantiationException e) {\r\n\t\t\tthrow createNamingException(e);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static NoInitialContextException createNamingException(Exception e) {\r\n\t\tfinal NoInitialContextException ex = new NoInitialContextException(e.toString());\r\n\t\tex.initCause(e);\r\n\t\treturn ex;\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/327", "ground_truth": "\r\n\t\tif (MonitoringInitialContextFactory.class.getName()\r\n\t\t\t\t.equals(System.getProperty(Context.INITIAL_CONTEXT_FACTORY))) {\r\n\t\t\t// on remet l'ancienne valeur\r\n\t\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);\r\n\t\t}\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "MonitoringInitialContextFactory.java"], "context_start_lineno": 0, "function_name": "stop", "left_context": "class MonitoringInitialContextFactory implements InitialContextFactory {\r\n\t// on sauvegarde la factory initiale\r\n\t// (org.apache.naming.java.javaURLContextFactory dans Tomcat6\r\n\t// avec un scheme \"java\" tel que d\u00e9fini dans NamingManager.getURLContext)\r\n\tprivate static String initialContextFactory;\r\n\r\n\t// et on la remplace par la n\u00f4tre\r\n\tstatic void init() {\r\n\t\tinitialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);\r\n\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY,\r\n\t\t\t\tMonitoringInitialContextFactory.class.getName());\r\n\t}\r\n\r\n\tstatic void stop() {", "right_context": "}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic Context getInitialContext(Hashtable<?, ?> environment) throws NamingException { // NOPMD\r\n\t\ttry {\r\n\t\t\tfinal Class<?> clazz = Class.forName(initialContextFactory);\r\n\t\t\tfinal InitialContextFactory icf = (InitialContextFactory) clazz.newInstance();\r\n\t\t\tfinal Context context = icf.getInitialContext(environment);\r\n\t\t\tfinal JdbcWrapper jdbcWrapper = JdbcWrapper.SINGLETON;\r\n\t\t\treturn jdbcWrapper.createContextProxy(context);\r\n\t\t} catch (final ClassNotFoundException | IllegalAccessException | InstantiationException e) {\r\n\t\t\tthrow createNamingException(e);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static NoInitialContextException createNamingException(Exception e) {\r\n\t\tfinal NoInitialContextException ex = new NoInitialContextException(e.toString());\r\n\t\tex.initCause(e);\r\n\t\treturn ex;\r\n\t}\r\n}", "class_name": "MonitoringInitialContextFactory", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PdfThreadInformationsReport extends PdfAbstractTableReport {\r\n\tprivate final List<ThreadInformations> threadInformationsList;\r\n\tprivate final DecimalFormat integerFormat = I18N.createIntegerFormat();\r\n\tprivate final boolean stackTraceEnabled;\r\n\tprivate final boolean cpuTimeEnabled;\r\n\tprivate final Font cellFont = PdfFonts.TABLE_CELL.getFont();\r\n\tprivate final PdfDocumentFactory pdfDocumentFactory;\r\n\r\n\tPdfThreadInformationsReport(List<ThreadInformations> threadInformationsList,\r\n\t\t\tboolean stackTraceEnabled, PdfDocumentFactory pdfDocumentFactory, Document document) {\r\n\t\tsuper(document);\r\n\t\tassert threadInformationsList != null;\r\n\t\tassert pdfDocumentFactory != null;\r\n\r\n\t\tthis.threadInformationsList = threadInformationsList;\r\n\t\tthis.pdfDocumentFactory = pdfDocumentFactory;\r\n\t\tthis.stackTraceEnabled = stackTraceEnabled;\r\n\t\tthis.cpuTimeEnabled = !threadInformationsList.isEmpty()\r\n\t\t\t\t&& threadInformationsList.get(0).getCpuTimeMillis() != -1;\r\n\t}\r\n\r\n\t@Override\r\n\tvoid toPdf() throws DocumentException, IOException {<FILL_FUNCTION_BODY>}\r\n\r\n\tvoid writeIntro(JavaInformations javaInformations) throws DocumentException {\r\n\t\tfinal Font boldFont = PdfFonts.BOLD.getFont();\r\n\t\tfinal Font normalFont = PdfFonts.NORMAL.getFont();\r\n\t\taddToDocument(new Phrase(\r\n\t\t\t\tgetFormattedString(\"Threads_sur\", javaInformations.getHost()) + \": \", boldFont));\r\n\t\taddToDocument(new Phrase(getFormattedString(\"thread_count\",\r\n\t\t\t\tjavaInformations.getThreadCount(), javaInformations.getPeakThreadCount(),\r\n\t\t\t\tjavaInformations.getTotalStartedThreadCount()), normalFont));\r\n\t}\r\n\r\n\tvoid writeDeadlocks() throws DocumentException {\r\n\t\tfinal List<ThreadInformations> deadlockedThreads = new ArrayList<>();\r\n\t\tfor (final ThreadInformations thread : threadInformationsList) {\r\n\t\t\tif (thread.isDeadlocked()) {\r\n\t\t\t\tdeadlockedThreads.add(thread);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!deadlockedThreads.isEmpty()) {\r\n\t\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append('\\n');\r\n\t\t\tsb.append(getString(\"Threads_deadlocks\"));\r\n\t\t\tString separator = \" \";\r\n\t\t\tfor (final ThreadInformations thread : deadlockedThreads) {\r\n\t\t\t\tsb.append(separator);\r\n\t\t\t\tsb.append(thread.getName());\r\n\t\t\t\tseparator = \", \";\r\n\t\t\t}\r\n\t\t\tsb.append('\\n');\r\n\t\t\taddToDocument(new Phrase(sb.toString(), PdfFonts.SEVERE_CELL.getFont()));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void writeHeader() throws DocumentException {\r\n\t\tfinal List<String> headers = createHeaders();\r\n\t\tfinal int[] relativeWidths = new int[headers.size()];\r\n\t\tArrays.fill(relativeWidths, 0, headers.size(), 1);\r\n\t\trelativeWidths[0] = 3; // thread\r\n\t\trelativeWidths[3] = 2; // \u00e9tat\r\n\t\tif (stackTraceEnabled) {\r\n\t\t\trelativeWidths[4] = 6; // m\u00e9thode ex\u00e9cut\u00e9e\r\n\t\t}\r\n\r\n\t\tinitTable(headers, relativeWidths);\r\n\t}\r\n\r\n\tprivate List<String> createHeaders() {\r\n\t\tfinal List<String> headers = new ArrayList<>();\r\n\t\theaders.add(getString(\"Thread\"));\r\n\t\theaders.add(getString(\"Demon\"));\r\n\t\theaders.add(getString(\"Priorite\"));\r\n\t\theaders.add(getString(\"Etat\"));\r\n\t\tif (stackTraceEnabled) {\r\n\t\t\theaders.add(getString(\"Methode_executee\"));\r\n\t\t}\r\n\t\tif (cpuTimeEnabled) {\r\n\t\t\theaders.add(getString(\"Temps_cpu\"));\r\n\t\t\theaders.add(getString(\"Temps_user\"));\r\n\t\t}\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate void writeThreadInformations(ThreadInformations threadInformations)\r\n\t\t\tthrows DocumentException, IOException {\r\n\t\tfinal PdfPCell defaultCell = getDefaultCell();\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_LEFT);\r\n\t\taddCell(threadInformations.getName());\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_CENTER);\r\n\t\tif (threadInformations.isDaemon()) {\r\n\t\t\taddCell(getString(\"oui\"));\r\n\t\t} else {\r\n\t\t\taddCell(getString(\"non\"));\r\n\t\t}\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n\t\taddCell(integerFormat.format(threadInformations.getPriority()));\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_LEFT);\r\n\t\tfinal PdfPCell cell = new PdfPCell();\r\n\t\tfinal Paragraph paragraph = new Paragraph(\r\n\t\t\t\tgetDefaultCell().getLeading() + cellFont.getSize());\r\n\t\tparagraph.add(new Chunk(\r\n\t\t\t\tgetImage(\r\n\t\t\t\t\t\t\"bullets/\" + HtmlThreadInformationsReport.getStateIcon(threadInformations)),\r\n\t\t\t\t0, -1));\r\n\t\tparagraph.add(new Phrase(String.valueOf(threadInformations.getState()), cellFont));\r\n\t\tcell.addElement(paragraph);\r\n\t\taddCell(cell);\r\n\t\tif (stackTraceEnabled) {\r\n\t\t\taddCell(threadInformations.getExecutedMethod());\r\n\t\t}\r\n\t\tif (cpuTimeEnabled) {\r\n\t\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n\t\t\taddCell(integerFormat.format(threadInformations.getCpuTimeMillis()));\r\n\t\t\taddCell(integerFormat.format(threadInformations.getUserTimeMillis()));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate Image getImage(String resourceFileName) throws DocumentException, IOException {\r\n\t\treturn pdfDocumentFactory.getSmallImage(resourceFileName);\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/368", "ground_truth": "\r\n\t\twriteHeader();\r\n\r\n\t\tfor (final ThreadInformations threadInformations : threadInformationsList) {\r\n\t\t\tnextRow();\r\n\t\t\twriteThreadInformations(threadInformations);\r\n\t\t}\r\n\t\taddTableToDocument();\r\n\r\n\t\tfinal Paragraph tempsThreads = new Paragraph(getString(\"Temps_threads\") + '\\n', cellFont);\r\n\t\ttempsThreads.setAlignment(Element.ALIGN_RIGHT);\r\n\t\taddToDocument(tempsThreads);\r\n\r\n\t\t// rq stack-trace: on n'inclue pas dans le pdf les stack-traces des threads\r\n\t\t// car c'est tr\u00e8s verbeux et cela remplirait des pages pour pas grand chose\r\n\t\t// d'autant que si le pdf est g\u00e9n\u00e9r\u00e9 de nuit pour \u00eatre envoy\u00e9 par mail\r\n\t\t// alors ces stack-traces n'ont pas beaucoup d'int\u00e9r\u00eat\r\n\t\t//\t\tif (stackTrace != null && !stackTrace.isEmpty()) {\r\n\t\t//\t\t\t// m\u00eame si stackTraceEnabled, ce thread n'a pas forc\u00e9ment de stack-trace\r\n\t\t//\t\t\twriteln(threadInformations.getName());\r\n\t\t//\t\t\tfor (final StackTraceElement stackTraceElement : stackTrace) {\r\n\t\t//\t\t\t\twriteln(stackTraceElement.toString());\r\n\t\t//\t\t\t}\r\n\t\t//\t\t}\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "web", "pdf", "PdfThreadInformationsReport.java"], "context_start_lineno": 0, "function_name": "toPdf", "left_context": "class PdfThreadInformationsReport extends PdfAbstractTableReport {\r\n\tprivate final List<ThreadInformations> threadInformationsList;\r\n\tprivate final DecimalFormat integerFormat = I18N.createIntegerFormat();\r\n\tprivate final boolean stackTraceEnabled;\r\n\tprivate final boolean cpuTimeEnabled;\r\n\tprivate final Font cellFont = PdfFonts.TABLE_CELL.getFont();\r\n\tprivate final PdfDocumentFactory pdfDocumentFactory;\r\n\r\n\tPdfThreadInformationsReport(List<ThreadInformations> threadInformationsList,\r\n\t\t\tboolean stackTraceEnabled, PdfDocumentFactory pdfDocumentFactory, Document document) {\r\n\t\tsuper(document);\r\n\t\tassert threadInformationsList != null;\r\n\t\tassert pdfDocumentFactory != null;\r\n\r\n\t\tthis.threadInformationsList = threadInformationsList;\r\n\t\tthis.pdfDocumentFactory = pdfDocumentFactory;\r\n\t\tthis.stackTraceEnabled = stackTraceEnabled;\r\n\t\tthis.cpuTimeEnabled = !threadInformationsList.isEmpty()\r\n\t\t\t\t&& threadInformationsList.get(0).getCpuTimeMillis() != -1;\r\n\t}\r\n\r\n\t@Override\r\n\tvoid toPdf() throws DocumentException, IOException {", "right_context": "}\r\n\r\n\tvoid writeIntro(JavaInformations javaInformations) throws DocumentException {\r\n\t\tfinal Font boldFont = PdfFonts.BOLD.getFont();\r\n\t\tfinal Font normalFont = PdfFonts.NORMAL.getFont();\r\n\t\taddToDocument(new Phrase(\r\n\t\t\t\tgetFormattedString(\"Threads_sur\", javaInformations.getHost()) + \": \", boldFont));\r\n\t\taddToDocument(new Phrase(getFormattedString(\"thread_count\",\r\n\t\t\t\tjavaInformations.getThreadCount(), javaInformations.getPeakThreadCount(),\r\n\t\t\t\tjavaInformations.getTotalStartedThreadCount()), normalFont));\r\n\t}\r\n\r\n\tvoid writeDeadlocks() throws DocumentException {\r\n\t\tfinal List<ThreadInformations> deadlockedThreads = new ArrayList<>();\r\n\t\tfor (final ThreadInformations thread : threadInformationsList) {\r\n\t\t\tif (thread.isDeadlocked()) {\r\n\t\t\t\tdeadlockedThreads.add(thread);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!deadlockedThreads.isEmpty()) {\r\n\t\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append('\\n');\r\n\t\t\tsb.append(getString(\"Threads_deadlocks\"));\r\n\t\t\tString separator = \" \";\r\n\t\t\tfor (final ThreadInformations thread : deadlockedThreads) {\r\n\t\t\t\tsb.append(separator);\r\n\t\t\t\tsb.append(thread.getName());\r\n\t\t\t\tseparator = \", \";\r\n\t\t\t}\r\n\t\t\tsb.append('\\n');\r\n\t\t\taddToDocument(new Phrase(sb.toString(), PdfFonts.SEVERE_CELL.getFont()));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void writeHeader() throws DocumentException {\r\n\t\tfinal List<String> headers = createHeaders();\r\n\t\tfinal int[] relativeWidths = new int[headers.size()];\r\n\t\tArrays.fill(relativeWidths, 0, headers.size(), 1);\r\n\t\trelativeWidths[0] = 3; // thread\r\n\t\trelativeWidths[3] = 2; // \u00e9tat\r\n\t\tif (stackTraceEnabled) {\r\n\t\t\trelativeWidths[4] = 6; // m\u00e9thode ex\u00e9cut\u00e9e\r\n\t\t}\r\n\r\n\t\tinitTable(headers, relativeWidths);\r\n\t}\r\n\r\n\tprivate List<String> createHeaders() {\r\n\t\tfinal List<String> headers = new ArrayList<>();\r\n\t\theaders.add(getString(\"Thread\"));\r\n\t\theaders.add(getString(\"Demon\"));\r\n\t\theaders.add(getString(\"Priorite\"));\r\n\t\theaders.add(getString(\"Etat\"));\r\n\t\tif (stackTraceEnabled) {\r\n\t\t\theaders.add(getString(\"Methode_executee\"));\r\n\t\t}\r\n\t\tif (cpuTimeEnabled) {\r\n\t\t\theaders.add(getString(\"Temps_cpu\"));\r\n\t\t\theaders.add(getString(\"Temps_user\"));\r\n\t\t}\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate void writeThreadInformations(ThreadInformations threadInformations)\r\n\t\t\tthrows DocumentException, IOException {\r\n\t\tfinal PdfPCell defaultCell = getDefaultCell();\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_LEFT);\r\n\t\taddCell(threadInformations.getName());\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_CENTER);\r\n\t\tif (threadInformations.isDaemon()) {\r\n\t\t\taddCell(getString(\"oui\"));\r\n\t\t} else {\r\n\t\t\taddCell(getString(\"non\"));\r\n\t\t}\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n\t\taddCell(integerFormat.format(threadInformations.getPriority()));\r\n\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_LEFT);\r\n\t\tfinal PdfPCell cell = new PdfPCell();\r\n\t\tfinal Paragraph paragraph = new Paragraph(\r\n\t\t\t\tgetDefaultCell().getLeading() + cellFont.getSize());\r\n\t\tparagraph.add(new Chunk(\r\n\t\t\t\tgetImage(\r\n\t\t\t\t\t\t\"bullets/\" + HtmlThreadInformationsReport.getStateIcon(threadInformations)),\r\n\t\t\t\t0, -1));\r\n\t\tparagraph.add(new Phrase(String.valueOf(threadInformations.getState()), cellFont));\r\n\t\tcell.addElement(paragraph);\r\n\t\taddCell(cell);\r\n\t\tif (stackTraceEnabled) {\r\n\t\t\taddCell(threadInformations.getExecutedMethod());\r\n\t\t}\r\n\t\tif (cpuTimeEnabled) {\r\n\t\t\tdefaultCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n\t\t\taddCell(integerFormat.format(threadInformations.getCpuTimeMillis()));\r\n\t\t\taddCell(integerFormat.format(threadInformations.getUserTimeMillis()));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate Image getImage(String resourceFileName) throws DocumentException, IOException {\r\n\t\treturn pdfDocumentFactory.getSmallImage(resourceFileName);\r\n\t}\r\n}", "class_name": "PdfThreadInformationsReport", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SpringElasticsearchOperationsBeanPostProcessor\n\t\timplements BeanPostProcessor, PriorityOrdered {\n\tprivate static final boolean ELASTICSEARCH_OPERATIONS_AVAILABLE = isElasticsearchOperationsAvailable();\n\tprivate static final Counter SERVICES_COUNTER = MonitoringProxy.getServicesCounter();\n\tprivate static final boolean COUNTER_HIDDEN = Parameters\n\t\t\t.isCounterHidden(SERVICES_COUNTER.getName());\n\tprivate static final boolean DISABLED = Parameter.DISABLED.getValueAsBoolean();\n\n\t// l'interface PriorityOrdered place la priorit\u00e9 assez haute dans le contexte Spring\n\t// quelle que soit la valeur de order\n\tprivate int order = LOWEST_PRECEDENCE;\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic int getOrder() {\n\t\treturn order;\n\t}\n\n\t/**\n\t * D\u00e9finit la priorit\u00e9 dans le contexte Spring.\n\t * @param order int\n\t */\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) {\n\t\treturn bean;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {<FILL_FUNCTION_BODY>}\n\n\tstatic Object doInvoke(final Object object, final Method method, final Object[] args,\n\t\t\tfinal String requestName) throws Throwable {\n\t\tboolean systemError = false;\n\t\ttry {\n\t\t\tSERVICES_COUNTER.bindContextIncludingCpu(requestName);\n\t\t\treturn method.invoke(object, args);\n\t\t} catch (final Error e) {\n\t\t\t// on catche Error pour avoir les erreurs syst\u00e8mes\n\t\t\t// mais pas Exception qui sont fonctionnelles en g\u00e9n\u00e9ral\n\t\t\tsystemError = true;\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\t// on enregistre la requ\u00eate dans les statistiques\n\t\t\tSERVICES_COUNTER.addRequestForCurrentContext(systemError);\n\t\t}\n\t}\n\n\tprivate static boolean isElasticsearchOperationsAvailable() {\n\t\ttry {\n\t\t\tClass.forName(\"org.springframework.data.elasticsearch.core.ElasticsearchOperations\");\n\t\t\treturn true;\n\t\t} catch (final ClassNotFoundException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n}", "metadata": {"task_id": "javamelody_javamelody/379", "ground_truth": "\n\t\tif (ELASTICSEARCH_OPERATIONS_AVAILABLE && bean instanceof ElasticsearchOperations) {\n\t\t\tfinal ElasticsearchOperations elasticsearchOperations = (ElasticsearchOperations) bean;\n\t\t\tif (DISABLED) {\n\t\t\t\treturn elasticsearchOperations;\n\t\t\t}\n\t\t\tSERVICES_COUNTER.setDisplayed(!COUNTER_HIDDEN);\n\t\t\tSERVICES_COUNTER.setUsed(true);\n\n\t\t\tfinal InvocationHandler invocationHandler = new InvocationHandler() {\n\t\t\t\t/** {@inheritDoc} */\n\t\t\t\t@Override\n\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\tfinal StringBuilder requestName = new StringBuilder();\n\t\t\t\t\trequestName.append(\"elasticsearch.\").append(method.getName()).append('(');\n\t\t\t\t\tif (args != null) {\n\t\t\t\t\t\tboolean first = true;\n\t\t\t\t\t\tfor (final Object arg : args) {\n\t\t\t\t\t\t\tif (first) {\n\t\t\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\trequestName.append(\", \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (arg == null) {\n\t\t\t\t\t\t\t\trequestName.append(\"null\");\n\t\t\t\t\t\t\t} else if (arg instanceof Class) {\n\t\t\t\t\t\t\t\trequestName.append(((Class<?>) arg).getSimpleName());\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\trequestName.append(arg.getClass().getSimpleName());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trequestName.append(')');\n\t\t\t\t\treturn doInvoke(elasticsearchOperations, method, args, requestName.toString());\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal ElasticsearchOperations ops = JdbcWrapper.createProxy(elasticsearchOperations,\n\t\t\t\t\tinvocationHandler);\n\t\t\tLOG.debug(\"elasticsearch operations monitoring initialized\");\n\t\t\treturn ops;\n\t\t}\n\n\t\treturn bean;\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "SpringElasticsearchOperationsBeanPostProcessor.java"], "context_start_lineno": 0, "function_name": "postProcessAfterInitialization", "left_context": "class SpringElasticsearchOperationsBeanPostProcessor\n\t\timplements BeanPostProcessor, PriorityOrdered {\n\tprivate static final boolean ELASTICSEARCH_OPERATIONS_AVAILABLE = isElasticsearchOperationsAvailable();\n\tprivate static final Counter SERVICES_COUNTER = MonitoringProxy.getServicesCounter();\n\tprivate static final boolean COUNTER_HIDDEN = Parameters\n\t\t\t.isCounterHidden(SERVICES_COUNTER.getName());\n\tprivate static final boolean DISABLED = Parameter.DISABLED.getValueAsBoolean();\n\n\t// l'interface PriorityOrdered place la priorit\u00e9 assez haute dans le contexte Spring\n\t// quelle que soit la valeur de order\n\tprivate int order = LOWEST_PRECEDENCE;\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic int getOrder() {\n\t\treturn order;\n\t}\n\n\t/**\n\t * D\u00e9finit la priorit\u00e9 dans le contexte Spring.\n\t * @param order int\n\t */\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) {\n\t\treturn bean;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {", "right_context": "}\n\n\tstatic Object doInvoke(final Object object, final Method method, final Object[] args,\n\t\t\tfinal String requestName) throws Throwable {\n\t\tboolean systemError = false;\n\t\ttry {\n\t\t\tSERVICES_COUNTER.bindContextIncludingCpu(requestName);\n\t\t\treturn method.invoke(object, args);\n\t\t} catch (final Error e) {\n\t\t\t// on catche Error pour avoir les erreurs syst\u00e8mes\n\t\t\t// mais pas Exception qui sont fonctionnelles en g\u00e9n\u00e9ral\n\t\t\tsystemError = true;\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\t// on enregistre la requ\u00eate dans les statistiques\n\t\t\tSERVICES_COUNTER.addRequestForCurrentContext(systemError);\n\t\t}\n\t}\n\n\tprivate static boolean isElasticsearchOperationsAvailable() {\n\t\ttry {\n\t\t\tClass.forName(\"org.springframework.data.elasticsearch.core.ElasticsearchOperations\");\n\t\t\treturn true;\n\t\t} catch (final ClassNotFoundException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n}", "class_name": "SpringElasticsearchOperationsBeanPostProcessor", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SampledMethod implements Comparable<SampledMethod>, Serializable {\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate long count;\r\n\r\n\t\tprivate final String className;\r\n\r\n\t\tprivate final String methodName;\r\n\r\n\t\tprivate transient int hash;\r\n\r\n\t\tSampledMethod(String className, String methodName) {\r\n\t\t\tsuper();\r\n\t\t\tassert className != null;\r\n\t\t\tassert methodName != null;\r\n\t\t\tthis.className = className;\r\n\t\t\tthis.methodName = methodName;\r\n\t\t\tthis.hash = className.hashCode() * 31 + methodName.hashCode();\r\n\t\t}\r\n\r\n\t\t// hash is transient\r\n\t\tprivate Object readResolve() {\r\n\t\t\tthis.hash = className.hashCode() * 31 + methodName.hashCode();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tvoid incrementCount() {\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tpublic long getCount() {\r\n\t\t\treturn count;\r\n\t\t}\r\n\r\n\t\tvoid setCount(long count) {\r\n\t\t\tthis.count = count;\r\n\t\t}\r\n\r\n\t\tpublic String getClassName() {\r\n\t\t\treturn this.className;\r\n\t\t}\r\n\r\n\t\tpublic String getMethodName() {\r\n\t\t\treturn this.methodName;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(SampledMethod method) {\r\n\t\t\treturn Long.compare(method.count, count);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int hashCode() {\r\n\t\t\treturn hash;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic boolean equals(Object obj) {\r\n\t\t\tif (this == obj) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (obj == null || getClass() != obj.getClass()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfinal SampledMethod other = (SampledMethod) obj;\r\n\t\t\treturn methodName.equals(other.methodName) && className.equals(other.className);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\treturn className + '.' + methodName;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * Excluded packages by default \"java,sun,com.sun,javax,org.apache,org.hibernate,oracle,org.postgresql,org.eclipse\"\r\n\t */\r\n\tpublic SamplingProfiler() {\r\n\t\tsuper();\r\n\t\tthis.excludedPackages = DEFAULT_EXCLUDED_PACKAGES;\r\n\t\tthis.includedPackages = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * @param excludedPackages List of excluded packages (can be null)\r\n\t * @param includedPackages List of included packages (can be null)\r\n\t */\r\n\tpublic SamplingProfiler(List<String> excludedPackages, List<String> includedPackages) {\r\n\t\tsuper();\r\n\t\tassert excludedPackages != null || includedPackages != null;\r\n\t\t// In general, there are either excluded packages or included packages.\r\n\t\t// (If both, excluded result has priority over included result: it excludes some included.)\r\n\t\tthis.excludedPackages = verifyPackageNames(excludedPackages);\r\n\t\tthis.includedPackages = verifyPackageNames(includedPackages);\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * @param excludedPackages List of excluded packages separated by comma (can be null)\r\n\t * @param includedPackages List of included packages separated by comma (can be null)\r\n\t */\r\n\tpublic SamplingProfiler(String excludedPackages, String includedPackages) {\r\n\t\tthis(splitPackageNames(excludedPackages), splitPackageNames(includedPackages));\r\n\t\t// In general, there are either excluded packages or included packages.\r\n\t\t// (If both, excluded result has priority over included result: it excludes some included.)\r\n\t}\r\n\r\n\tprivate static List<String> splitPackageNames(String packageNames) {\r\n\t\tif (packageNames == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn Arrays.asList(packageNames.split(\",\"));\r\n\t}\r\n\r\n\tprivate String[] verifyPackageNames(List<String> packageNames) {\r\n\t\tif (packageNames == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal String[] packages = packageNames.toArray(new String[0]);\r\n\t\tfor (int i = 0; i < packages.length; i++) {\r\n\t\t\tpackages[i] = packages[i].trim(); // NOPMD\r\n\t\t\tif (packages[i].isEmpty()) {\r\n\t\t\t\tthrow new IllegalArgumentException(\r\n\t\t\t\t\t\t\"A package can not be empty, item \" + i + \" in \" + packageNames);\r\n\t\t\t}\r\n\t\t\tif (!packages[i].endsWith(\".\")) {\r\n\t\t\t\tpackages[i] = packages[i] + '.'; // NOPMD\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn packages;\r\n\t}\r\n\r\n\tpublic synchronized void update() {\r\n\t\tfinal Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();\r\n\t\ttry {\r\n\t\t\tfinal Thread currentThread = Thread.currentThread();\r\n\t\t\tfor (final Map.Entry<Thread, StackTraceElement[]> entry : stackTraces.entrySet()) {\r\n\t\t\t\tfinal Thread thread = entry.getKey();\r\n\t\t\t\tfinal StackTraceElement[] stackTrace = entry.getValue();\r\n\t\t\t\tif (stackTrace.length > 0 && thread.getState() == Thread.State.RUNNABLE\r\n\t\t\t\t\t\t&& thread != currentThread) {\r\n\t\t\t\t\tfor (final StackTraceElement element : stackTrace) {\r\n\t\t\t\t\t\tif (!isPackageExcluded(element)) {\r\n\t\t\t\t\t\t\taddSample(element);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tlimitDataSize();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void addSample(StackTraceElement element) {\r\n\t\tfinal SampledMethod key = new SampledMethod(element.getClassName(),\r\n\t\t\t\telement.getMethodName());\r\n\t\t// or final String key = element.getClassName() + '.' + element.getMethodName();\r\n\t\tSampledMethod method = this.data.get(key);\r\n\t\tif (method == null) {\r\n\t\t\tmethod = key;\r\n\t\t\t// or method = new SampledMethod(element.getClassName(), element.getMethodName());\r\n\t\t\tthis.data.put(key, method);\r\n\t\t}\r\n\t\t// on pourrait incr\u00e9menter la valeur selon l'augmentation de cpuTime pour ce thread,\r\n\t\t// mais l'intervalle entre deux samples est probablement trop grand\r\n\t\t// pour que le cpu du thread entre les deux intervalles ait un rapport avec cette m\u00e9thode\r\n\t\tmethod.incrementCount();\r\n\t}\r\n\r\n\tprivate void limitDataSize() {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "javamelody_javamelody/402", "ground_truth": "\r\n\t\tlong minCount = 1;\r\n\t\tint size = data.size();\r\n\t\twhile (size > MAX_DATA_SIZE) {\r\n\t\t\tfinal Iterator<SampledMethod> iterator = data.keySet().iterator();\r\n\t\t\twhile (iterator.hasNext() && size > MAX_DATA_SIZE) {\r\n\t\t\t\tfinal SampledMethod method = iterator.next();\r\n\t\t\t\tif (method.getCount() <= minCount) {\r\n\t\t\t\t\titerator.remove();\r\n\t\t\t\t\tsize--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminCount++;\r\n\t\t}\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "model", "SamplingProfiler.java"], "context_start_lineno": 0, "function_name": "limitDataSize", "left_context": "class SampledMethod implements Comparable<SampledMethod>, Serializable {\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate long count;\r\n\r\n\t\tprivate final String className;\r\n\r\n\t\tprivate final String methodName;\r\n\r\n\t\tprivate transient int hash;\r\n\r\n\t\tSampledMethod(String className, String methodName) {\r\n\t\t\tsuper();\r\n\t\t\tassert className != null;\r\n\t\t\tassert methodName != null;\r\n\t\t\tthis.className = className;\r\n\t\t\tthis.methodName = methodName;\r\n\t\t\tthis.hash = className.hashCode() * 31 + methodName.hashCode();\r\n\t\t}\r\n\r\n\t\t// hash is transient\r\n\t\tprivate Object readResolve() {\r\n\t\t\tthis.hash = className.hashCode() * 31 + methodName.hashCode();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tvoid incrementCount() {\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tpublic long getCount() {\r\n\t\t\treturn count;\r\n\t\t}\r\n\r\n\t\tvoid setCount(long count) {\r\n\t\t\tthis.count = count;\r\n\t\t}\r\n\r\n\t\tpublic String getClassName() {\r\n\t\t\treturn this.className;\r\n\t\t}\r\n\r\n\t\tpublic String getMethodName() {\r\n\t\t\treturn this.methodName;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(SampledMethod method) {\r\n\t\t\treturn Long.compare(method.count, count);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int hashCode() {\r\n\t\t\treturn hash;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic boolean equals(Object obj) {\r\n\t\t\tif (this == obj) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (obj == null || getClass() != obj.getClass()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfinal SampledMethod other = (SampledMethod) obj;\r\n\t\t\treturn methodName.equals(other.methodName) && className.equals(other.className);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\treturn className + '.' + methodName;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * Excluded packages by default \"java,sun,com.sun,javax,org.apache,org.hibernate,oracle,org.postgresql,org.eclipse\"\r\n\t */\r\n\tpublic SamplingProfiler() {\r\n\t\tsuper();\r\n\t\tthis.excludedPackages = DEFAULT_EXCLUDED_PACKAGES;\r\n\t\tthis.includedPackages = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * @param excludedPackages List of excluded packages (can be null)\r\n\t * @param includedPackages List of included packages (can be null)\r\n\t */\r\n\tpublic SamplingProfiler(List<String> excludedPackages, List<String> includedPackages) {\r\n\t\tsuper();\r\n\t\tassert excludedPackages != null || includedPackages != null;\r\n\t\t// In general, there are either excluded packages or included packages.\r\n\t\t// (If both, excluded result has priority over included result: it excludes some included.)\r\n\t\tthis.excludedPackages = verifyPackageNames(excludedPackages);\r\n\t\tthis.includedPackages = verifyPackageNames(includedPackages);\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * @param excludedPackages List of excluded packages separated by comma (can be null)\r\n\t * @param includedPackages List of included packages separated by comma (can be null)\r\n\t */\r\n\tpublic SamplingProfiler(String excludedPackages, String includedPackages) {\r\n\t\tthis(splitPackageNames(excludedPackages), splitPackageNames(includedPackages));\r\n\t\t// In general, there are either excluded packages or included packages.\r\n\t\t// (If both, excluded result has priority over included result: it excludes some included.)\r\n\t}\r\n\r\n\tprivate static List<String> splitPackageNames(String packageNames) {\r\n\t\tif (packageNames == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn Arrays.asList(packageNames.split(\",\"));\r\n\t}\r\n\r\n\tprivate String[] verifyPackageNames(List<String> packageNames) {\r\n\t\tif (packageNames == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal String[] packages = packageNames.toArray(new String[0]);\r\n\t\tfor (int i = 0; i < packages.length; i++) {\r\n\t\t\tpackages[i] = packages[i].trim(); // NOPMD\r\n\t\t\tif (packages[i].isEmpty()) {\r\n\t\t\t\tthrow new IllegalArgumentException(\r\n\t\t\t\t\t\t\"A package can not be empty, item \" + i + \" in \" + packageNames);\r\n\t\t\t}\r\n\t\t\tif (!packages[i].endsWith(\".\")) {\r\n\t\t\t\tpackages[i] = packages[i] + '.'; // NOPMD\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn packages;\r\n\t}\r\n\r\n\tpublic synchronized void update() {\r\n\t\tfinal Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();\r\n\t\ttry {\r\n\t\t\tfinal Thread currentThread = Thread.currentThread();\r\n\t\t\tfor (final Map.Entry<Thread, StackTraceElement[]> entry : stackTraces.entrySet()) {\r\n\t\t\t\tfinal Thread thread = entry.getKey();\r\n\t\t\t\tfinal StackTraceElement[] stackTrace = entry.getValue();\r\n\t\t\t\tif (stackTrace.length > 0 && thread.getState() == Thread.State.RUNNABLE\r\n\t\t\t\t\t\t&& thread != currentThread) {\r\n\t\t\t\t\tfor (final StackTraceElement element : stackTrace) {\r\n\t\t\t\t\t\tif (!isPackageExcluded(element)) {\r\n\t\t\t\t\t\t\taddSample(element);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tlimitDataSize();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void addSample(StackTraceElement element) {\r\n\t\tfinal SampledMethod key = new SampledMethod(element.getClassName(),\r\n\t\t\t\telement.getMethodName());\r\n\t\t// or final String key = element.getClassName() + '.' + element.getMethodName();\r\n\t\tSampledMethod method = this.data.get(key);\r\n\t\tif (method == null) {\r\n\t\t\tmethod = key;\r\n\t\t\t// or method = new SampledMethod(element.getClassName(), element.getMethodName());\r\n\t\t\tthis.data.put(key, method);\r\n\t\t}\r\n\t\t// on pourrait incr\u00e9menter la valeur selon l'augmentation de cpuTime pour ce thread,\r\n\t\t// mais l'intervalle entre deux samples est probablement trop grand\r\n\t\t// pour que le cpu du thread entre les deux intervalles ait un rapport avec cette m\u00e9thode\r\n\t\tmethod.incrementCount();\r\n\t}\r\n\r\n\tprivate void limitDataSize() {", "right_context": "", "class_name": "SampledMethod", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CounterRequestRumData implements Serializable, Cloneable {\r\n\tprivate static final long serialVersionUID = 745110095604593659L;\r\n\r\n\t// au-del\u00e0 de 5 minutes, on consid\u00e8re une valeur RUM comme aberrante et \u00e0 ignorer\r\n\tprivate static final long ABERRANT_VALUE = 5 * 60 * 1000;\r\n\r\n\tprivate long hits;\r\n\tprivate long networkTimeSum;\r\n\tprivate long domProcessingSum;\r\n\tprivate long pageRenderingSum;\r\n\r\n\tpublic long getHits() {\r\n\t\treturn hits;\r\n\t}\r\n\r\n\tpublic int getNetworkTimeMean() {\r\n\t\tif (hits > 0) {\r\n\t\t\treturn (int) (networkTimeSum / hits);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tpublic int getDomProcessingMean() {\r\n\t\tif (hits > 0) {\r\n\t\t\treturn (int) (domProcessingSum / hits);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tpublic int getPageRenderingMean() {\r\n\t\tif (hits > 0) {\r\n\t\t\treturn (int) (pageRenderingSum / hits);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tvoid addHit(long networkTime, long domProcessing, long pageRendering) {\r\n\t\tif (networkTime < 0 || networkTime > ABERRANT_VALUE || domProcessing < 0\r\n\t\t\t\t|| domProcessing > ABERRANT_VALUE || pageRendering < 0\r\n\t\t\t\t|| pageRendering > ABERRANT_VALUE) {\r\n\t\t\t// aberrant value, we ignore it\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnetworkTimeSum += networkTime;\r\n\t\tdomProcessingSum += domProcessing;\r\n\t\tpageRenderingSum += pageRendering;\r\n\t\thits++;\r\n\t}\r\n\r\n\tvoid addHits(CounterRequestRumData rumData) {\r\n\t\tif (rumData.hits != 0) {\r\n\t\t\thits += rumData.hits;\r\n\t\t\tnetworkTimeSum += rumData.networkTimeSum;\r\n\t\t\tdomProcessingSum += rumData.domProcessingSum;\r\n\t\t\tpageRenderingSum += rumData.pageRenderingSum;\r\n\t\t}\r\n\t}\r\n\r\n\tvoid removeHits(CounterRequestRumData rumData) {<FILL_FUNCTION_BODY>}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic CounterRequestRumData clone() { // NOPMD\r\n\t\ttry {\r\n\t\t\treturn (CounterRequestRumData) super.clone();\r\n\t\t} catch (final CloneNotSupportedException e) {\r\n\t\t\t// ne peut arriver puisque CounterRequest impl\u00e9mente Cloneable\r\n\t\t\tthrow new IllegalStateException(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn getClass().getSimpleName() + \"[hits=\" + hits + ']';\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/420", "ground_truth": "\r\n\t\tif (rumData.hits != 0) {\r\n\t\t\thits -= rumData.hits;\r\n\t\t\tnetworkTimeSum -= rumData.networkTimeSum;\r\n\t\t\tdomProcessingSum -= rumData.domProcessingSum;\r\n\t\t\tpageRenderingSum -= rumData.pageRenderingSum;\r\n\t\t}\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "model", "CounterRequestRumData.java"], "context_start_lineno": 0, "function_name": "removeHits", "left_context": "class CounterRequestRumData implements Serializable, Cloneable {\r\n\tprivate static final long serialVersionUID = 745110095604593659L;\r\n\r\n\t// au-del\u00e0 de 5 minutes, on consid\u00e8re une valeur RUM comme aberrante et \u00e0 ignorer\r\n\tprivate static final long ABERRANT_VALUE = 5 * 60 * 1000;\r\n\r\n\tprivate long hits;\r\n\tprivate long networkTimeSum;\r\n\tprivate long domProcessingSum;\r\n\tprivate long pageRenderingSum;\r\n\r\n\tpublic long getHits() {\r\n\t\treturn hits;\r\n\t}\r\n\r\n\tpublic int getNetworkTimeMean() {\r\n\t\tif (hits > 0) {\r\n\t\t\treturn (int) (networkTimeSum / hits);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tpublic int getDomProcessingMean() {\r\n\t\tif (hits > 0) {\r\n\t\t\treturn (int) (domProcessingSum / hits);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tpublic int getPageRenderingMean() {\r\n\t\tif (hits > 0) {\r\n\t\t\treturn (int) (pageRenderingSum / hits);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tvoid addHit(long networkTime, long domProcessing, long pageRendering) {\r\n\t\tif (networkTime < 0 || networkTime > ABERRANT_VALUE || domProcessing < 0\r\n\t\t\t\t|| domProcessing > ABERRANT_VALUE || pageRendering < 0\r\n\t\t\t\t|| pageRendering > ABERRANT_VALUE) {\r\n\t\t\t// aberrant value, we ignore it\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnetworkTimeSum += networkTime;\r\n\t\tdomProcessingSum += domProcessing;\r\n\t\tpageRenderingSum += pageRendering;\r\n\t\thits++;\r\n\t}\r\n\r\n\tvoid addHits(CounterRequestRumData rumData) {\r\n\t\tif (rumData.hits != 0) {\r\n\t\t\thits += rumData.hits;\r\n\t\t\tnetworkTimeSum += rumData.networkTimeSum;\r\n\t\t\tdomProcessingSum += rumData.domProcessingSum;\r\n\t\t\tpageRenderingSum += rumData.pageRenderingSum;\r\n\t\t}\r\n\t}\r\n\r\n\tvoid removeHits(CounterRequestRumData rumData) {", "right_context": "}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic CounterRequestRumData clone() { // NOPMD\r\n\t\ttry {\r\n\t\t\treturn (CounterRequestRumData) super.clone();\r\n\t\t} catch (final CloneNotSupportedException e) {\r\n\t\t\t// ne peut arriver puisque CounterRequest impl\u00e9mente Cloneable\r\n\t\t\tthrow new IllegalStateException(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn getClass().getSimpleName() + \"[hits=\" + hits + ']';\r\n\t}\r\n}", "class_name": "CounterRequestRumData", "return_type": "void", "parameters": [{"type": "CounterRequestRumData", "name": "rumData"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// javamelody/javamelody-core/src/main/java/net/bull/javamelody/internal/model/JavaInformations.java\n// --------------------------------------------------\n// public List<TomcatInformations> getTomcatInformationsList(){\n//   return tomcatInformationsList;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TomcatInformations implements Serializable {\r\n\t// cette classe utilise la m\u00eame technique avec les MBeans Tomcat que la webapp manager de Tomcat\r\n\t// http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/catalina/manager/StatusManagerServlet.java\r\n\t// http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/catalina/manager/StatusTransformer.java\r\n\t// http://svn.apache.org/repos/asf/tomcat/trunk/webapps/manager/xform.xsl\r\n\r\n\tprivate static final boolean TOMCAT_USED = System.getProperty(\"catalina.home\") != null;\r\n\r\n\tprivate static final long serialVersionUID = -6145865427461051370L;\r\n\r\n\t@SuppressWarnings(\"all\")\r\n\tprivate static final List<ObjectName> THREAD_POOLS = new ArrayList<>();\r\n\t@SuppressWarnings(\"all\")\r\n\tprivate static final List<ObjectName> GLOBAL_REQUEST_PROCESSORS = new ArrayList<>();\r\n\r\n\tprivate static int mbeansInitAttemps;\r\n\r\n\tprivate final String name;\r\n\tprivate final int maxThreads;\r\n\tprivate final int currentThreadCount;\r\n\tprivate final int currentThreadsBusy;\r\n\tprivate final long bytesReceived;\r\n\tprivate final long bytesSent;\r\n\tprivate final int requestCount;\r\n\tprivate final int errorCount;\r\n\tprivate final long processingTime;\r\n\tprivate final long maxTime;\r\n\r\n\tprivate TomcatInformations(ObjectName threadPool) throws JMException {\r\n\t\tsuper();\r\n\t\tname = threadPool.getKeyProperty(\"name\");\r\n\t\tmaxThreads = MBeansAccessor.getAttribute(threadPool, \"maxThreads\");\r\n\t\tcurrentThreadCount = MBeansAccessor.getAttribute(threadPool, \"currentThreadCount\");\r\n\t\tcurrentThreadsBusy = MBeansAccessor.getAttribute(threadPool, \"currentThreadsBusy\");\r\n\t\tObjectName grp = null;\r\n\t\tfor (final ObjectName globalRequestProcessor : GLOBAL_REQUEST_PROCESSORS) {\r\n\t\t\tif (name.equals(globalRequestProcessor.getKeyProperty(\"name\"))) {\r\n\t\t\t\tgrp = globalRequestProcessor;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (grp != null) {\r\n\t\t\tbytesReceived = MBeansAccessor.getAttribute(grp, \"bytesReceived\");\r\n\t\t\tbytesSent = MBeansAccessor.getAttribute(grp, \"bytesSent\");\r\n\t\t\trequestCount = MBeansAccessor.getAttribute(grp, \"requestCount\");\r\n\t\t\terrorCount = MBeansAccessor.getAttribute(grp, \"errorCount\");\r\n\t\t\tprocessingTime = MBeansAccessor.getAttribute(grp, \"processingTime\");\r\n\t\t\tmaxTime = MBeansAccessor.getAttribute(grp, \"maxTime\");\r\n\t\t} else {\r\n\t\t\tbytesReceived = 0;\r\n\t\t\tbytesSent = 0;\r\n\t\t\trequestCount = 0;\r\n\t\t\terrorCount = 0;\r\n\t\t\tprocessingTime = 0;\r\n\t\t\tmaxTime = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic List<TomcatInformations> buildTomcatInformationsList() {<FILL_FUNCTION_BODY>}\r\n\r\n\t// visibilit\u00e9 package pour r\u00e9initialisation en test unitaire\r\n\tpublic static void initMBeans() {\r\n\t\t// rq: en g\u00e9n\u00e9ral, il y a 2 connecteurs (http et ajp 1.3) d\u00e9finis dans server.xml et donc\r\n\t\t// 2 threadPools et 2 globalRequestProcessors de m\u00eame nom : http-8080 et jk-8009 (ajp13)\r\n\t\tTHREAD_POOLS.clear();\r\n\t\tGLOBAL_REQUEST_PROCESSORS.clear();\r\n\t\tTHREAD_POOLS.addAll(MBeansAccessor.getTomcatThreadPools());\r\n\t\tGLOBAL_REQUEST_PROCESSORS.addAll(MBeansAccessor.getTomcatGlobalRequestProcessors());\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic int getMaxThreads() {\r\n\t\treturn maxThreads;\r\n\t}\r\n\r\n\tint getCurrentThreadCount() {\r\n\t\treturn currentThreadCount;\r\n\t}\r\n\r\n\tpublic int getCurrentThreadsBusy() {\r\n\t\treturn currentThreadsBusy;\r\n\t}\r\n\r\n\tpublic long getBytesReceived() {\r\n\t\treturn bytesReceived;\r\n\t}\r\n\r\n\tpublic long getBytesSent() {\r\n\t\treturn bytesSent;\r\n\t}\r\n\r\n\tpublic int getRequestCount() {\r\n\t\treturn requestCount;\r\n\t}\r\n\r\n\tpublic int getErrorCount() {\r\n\t\treturn errorCount;\r\n\t}\r\n\r\n\tpublic long getProcessingTime() {\r\n\t\treturn processingTime;\r\n\t}\r\n\r\n\tpublic long getMaxTime() {\r\n\t\treturn maxTime;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn getClass().getSimpleName() + \"[name=\" + getName() + \", maxThreads=\" + getMaxThreads()\r\n\t\t\t\t+ \", currentThreadCount=\" + getCurrentThreadCount() + \", currentThreadsBusy=\"\r\n\t\t\t\t+ getCurrentThreadsBusy() + \", bytesReceived=\" + getBytesReceived() + \", bytesSent=\"\r\n\t\t\t\t+ getBytesSent() + \", requestCount=\" + getRequestCount() + \", errorCount=\"\r\n\t\t\t\t+ getErrorCount() + \", processingTime=\" + getProcessingTime() + \", maxTime=\"\r\n\t\t\t\t+ getMaxTime() + ']';\r\n\t}\r\n}", "metadata": {"task_id": "javamelody_javamelody/464", "ground_truth": "\r\n\t\tif (!TOMCAT_USED) {\r\n\t\t\treturn Collections.emptyList();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tsynchronized (THREAD_POOLS) {\r\n\t\t\t\tif ((THREAD_POOLS.isEmpty() || GLOBAL_REQUEST_PROCESSORS.isEmpty())\r\n\t\t\t\t\t\t&& mbeansInitAttemps < 10) {\r\n\t\t\t\t\t// lors du premier appel dans Tomcat lors du d\u00e9ploiement de la webapp,\r\n\t\t\t\t\t// ce initMBeans ne fonctionne pas car les MBeans n'existent pas encore,\r\n\t\t\t\t\t// donc il faut r\u00e9essayer plus tard\r\n\t\t\t\t\tinitMBeans();\r\n\r\n\t\t\t\t\t// issue 406, Tomcat mbeans never found in jboss eap 6.2,\r\n\t\t\t\t\t// we must stop initMBeans at some point\r\n\t\t\t\t\tmbeansInitAttemps++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfinal List<TomcatInformations> tomcatInformationsList = new ArrayList<>(\r\n\t\t\t\t\tTHREAD_POOLS.size());\r\n\t\t\t// rq: le processor correspondant au threadPool peut se retrouver selon\r\n\t\t\t// threadPool.getKeyProperty(\"name\").equals(globalRequestProcessor.getKeyProperty(\"name\"))\r\n\t\t\tfor (final ObjectName threadPool : THREAD_POOLS) {\r\n\t\t\t\ttomcatInformationsList.add(new TomcatInformations(threadPool));\r\n\t\t\t}\r\n\t\t\treturn tomcatInformationsList;\r\n\t\t} catch (final InstanceNotFoundException | AttributeNotFoundException e) {\r\n\t\t\t// catch InstanceNotFoundException n\u00e9cessaire pour JBoss 6.0 quand appel\u00e9 depuis MonitoringFilter.destroy via\r\n\t\t\t// writeHtmlToLastShutdownFile\r\n\t\t\t// issue 220 and end of issue 133:\r\n\t\t\t// AttributeNotFoundException: No attribute called maxThreads (in some JBossAS or JBossWeb)\r\n\t\t\treturn Collections.emptyList();\r\n\t\t} catch (final JMException e) {\r\n\t\t\t// n'est pas cens\u00e9 arriver\r\n\t\t\tthrow new IllegalStateException(e);\r\n\t\t}\r\n\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "internal", "model", "TomcatInformations.java"], "context_start_lineno": 0, "function_name": "buildTomcatInformationsList", "left_context": "class TomcatInformations implements Serializable {\r\n\t// cette classe utilise la m\u00eame technique avec les MBeans Tomcat que la webapp manager de Tomcat\r\n\t// http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/catalina/manager/StatusManagerServlet.java\r\n\t// http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/catalina/manager/StatusTransformer.java\r\n\t// http://svn.apache.org/repos/asf/tomcat/trunk/webapps/manager/xform.xsl\r\n\r\n\tprivate static final boolean TOMCAT_USED = System.getProperty(\"catalina.home\") != null;\r\n\r\n\tprivate static final long serialVersionUID = -6145865427461051370L;\r\n\r\n\t@SuppressWarnings(\"all\")\r\n\tprivate static final List<ObjectName> THREAD_POOLS = new ArrayList<>();\r\n\t@SuppressWarnings(\"all\")\r\n\tprivate static final List<ObjectName> GLOBAL_REQUEST_PROCESSORS = new ArrayList<>();\r\n\r\n\tprivate static int mbeansInitAttemps;\r\n\r\n\tprivate final String name;\r\n\tprivate final int maxThreads;\r\n\tprivate final int currentThreadCount;\r\n\tprivate final int currentThreadsBusy;\r\n\tprivate final long bytesReceived;\r\n\tprivate final long bytesSent;\r\n\tprivate final int requestCount;\r\n\tprivate final int errorCount;\r\n\tprivate final long processingTime;\r\n\tprivate final long maxTime;\r\n\r\n\tprivate TomcatInformations(ObjectName threadPool) throws JMException {\r\n\t\tsuper();\r\n\t\tname = threadPool.getKeyProperty(\"name\");\r\n\t\tmaxThreads = MBeansAccessor.getAttribute(threadPool, \"maxThreads\");\r\n\t\tcurrentThreadCount = MBeansAccessor.getAttribute(threadPool, \"currentThreadCount\");\r\n\t\tcurrentThreadsBusy = MBeansAccessor.getAttribute(threadPool, \"currentThreadsBusy\");\r\n\t\tObjectName grp = null;\r\n\t\tfor (final ObjectName globalRequestProcessor : GLOBAL_REQUEST_PROCESSORS) {\r\n\t\t\tif (name.equals(globalRequestProcessor.getKeyProperty(\"name\"))) {\r\n\t\t\t\tgrp = globalRequestProcessor;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (grp != null) {\r\n\t\t\tbytesReceived = MBeansAccessor.getAttribute(grp, \"bytesReceived\");\r\n\t\t\tbytesSent = MBeansAccessor.getAttribute(grp, \"bytesSent\");\r\n\t\t\trequestCount = MBeansAccessor.getAttribute(grp, \"requestCount\");\r\n\t\t\terrorCount = MBeansAccessor.getAttribute(grp, \"errorCount\");\r\n\t\t\tprocessingTime = MBeansAccessor.getAttribute(grp, \"processingTime\");\r\n\t\t\tmaxTime = MBeansAccessor.getAttribute(grp, \"maxTime\");\r\n\t\t} else {\r\n\t\t\tbytesReceived = 0;\r\n\t\t\tbytesSent = 0;\r\n\t\t\trequestCount = 0;\r\n\t\t\terrorCount = 0;\r\n\t\t\tprocessingTime = 0;\r\n\t\t\tmaxTime = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic List<TomcatInformations> buildTomcatInformationsList() {", "right_context": "}\r\n\r\n\t// visibilit\u00e9 package pour r\u00e9initialisation en test unitaire\r\n\tpublic static void initMBeans() {\r\n\t\t// rq: en g\u00e9n\u00e9ral, il y a 2 connecteurs (http et ajp 1.3) d\u00e9finis dans server.xml et donc\r\n\t\t// 2 threadPools et 2 globalRequestProcessors de m\u00eame nom : http-8080 et jk-8009 (ajp13)\r\n\t\tTHREAD_POOLS.clear();\r\n\t\tGLOBAL_REQUEST_PROCESSORS.clear();\r\n\t\tTHREAD_POOLS.addAll(MBeansAccessor.getTomcatThreadPools());\r\n\t\tGLOBAL_REQUEST_PROCESSORS.addAll(MBeansAccessor.getTomcatGlobalRequestProcessors());\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic int getMaxThreads() {\r\n\t\treturn maxThreads;\r\n\t}\r\n\r\n\tint getCurrentThreadCount() {\r\n\t\treturn currentThreadCount;\r\n\t}\r\n\r\n\tpublic int getCurrentThreadsBusy() {\r\n\t\treturn currentThreadsBusy;\r\n\t}\r\n\r\n\tpublic long getBytesReceived() {\r\n\t\treturn bytesReceived;\r\n\t}\r\n\r\n\tpublic long getBytesSent() {\r\n\t\treturn bytesSent;\r\n\t}\r\n\r\n\tpublic int getRequestCount() {\r\n\t\treturn requestCount;\r\n\t}\r\n\r\n\tpublic int getErrorCount() {\r\n\t\treturn errorCount;\r\n\t}\r\n\r\n\tpublic long getProcessingTime() {\r\n\t\treturn processingTime;\r\n\t}\r\n\r\n\tpublic long getMaxTime() {\r\n\t\treturn maxTime;\r\n\t}\r\n\r\n\t/** {@inheritDoc} */\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn getClass().getSimpleName() + \"[name=\" + getName() + \", maxThreads=\" + getMaxThreads()\r\n\t\t\t\t+ \", currentThreadCount=\" + getCurrentThreadCount() + \", currentThreadsBusy=\"\r\n\t\t\t\t+ getCurrentThreadsBusy() + \", bytesReceived=\" + getBytesReceived() + \", bytesSent=\"\r\n\t\t\t\t+ getBytesSent() + \", requestCount=\" + getRequestCount() + \", errorCount=\"\r\n\t\t\t\t+ getErrorCount() + \", processingTime=\" + getProcessingTime() + \", maxTime=\"\r\n\t\t\t\t+ getMaxTime() + ']';\r\n\t}\r\n}", "class_name": "TomcatInformations", "return_type": "List<TomcatInformations>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HttpRequestWrapper extends HttpServletRequestWrapper {\r\n\t\tprivate final HttpServletResponse response;\r\n\r\n\t\t/**\r\n\t\t * Constructs a request object wrapping the given request.\r\n\t\t * @param request HttpServletRequest\r\n\t\t * @param response HttpServletResponse\r\n\t\t */\r\n\t\tHttpRequestWrapper(HttpServletRequest request, HttpServletResponse response) {\r\n\t\t\tsuper(request);\r\n\t\t\tthis.response = response;\r\n\t\t}\r\n\r\n\t\t/** {@inheritDoc} */\r\n\t\t@Override\r\n\t\tpublic RequestDispatcher getRequestDispatcher(String path) {\r\n\t\t\tfinal RequestDispatcher requestDispatcher = super.getRequestDispatcher(path);\r\n\t\t\tif (requestDispatcher == null) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// il n'est pas dit que path soit non null\r\n\t\t\tfinal InvocationHandler invocationHandler = new JspWrapper(String.valueOf(path),\r\n\t\t\t\t\trequestDispatcher);\r\n\t\t\treturn JdbcWrapper.createProxy(requestDispatcher, invocationHandler);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic AsyncContext startAsync() {<FILL_FUNCTION_BODY>}\r\n\t}", "metadata": {"task_id": "javamelody_javamelody/477", "ground_truth": "\r\n\t\t\t// issue 217: after MonitoringFilter.doFilter, response is instance of CounterServletResponseWrapper,\r\n\t\t\t// and if response.getWriter() has been called before calling request.startAsync(),\r\n\t\t\t// then asyncContext.getResponse() should return the instance of CounterServletResponseWrapper\r\n\t\t\t// and not the initial response without the wrapper,\r\n\t\t\t// otherwise asyncContext.getResponse().getWriter() will throw something like\r\n\t\t\t// \"IllegalStateException: getOutputStream() has already been called for this response\"\r\n\t\t\treturn super.startAsync(this, response);\r\n\t\t", "fpath_tuple": ["javamelody_javamelody", "javamelody", "javamelody-core", "src", "main", "java", "net", "bull", "javamelody", "JspWrapper.java"], "context_start_lineno": 0, "function_name": "startAsync", "left_context": "class HttpRequestWrapper extends HttpServletRequestWrapper {\r\n\t\tprivate final HttpServletResponse response;\r\n\r\n\t\t/**\r\n\t\t * Constructs a request object wrapping the given request.\r\n\t\t * @param request HttpServletRequest\r\n\t\t * @param response HttpServletResponse\r\n\t\t */\r\n\t\tHttpRequestWrapper(HttpServletRequest request, HttpServletResponse response) {\r\n\t\t\tsuper(request);\r\n\t\t\tthis.response = response;\r\n\t\t}\r\n\r\n\t\t/** {@inheritDoc} */\r\n\t\t@Override\r\n\t\tpublic RequestDispatcher getRequestDispatcher(String path) {\r\n\t\t\tfinal RequestDispatcher requestDispatcher = super.getRequestDispatcher(path);\r\n\t\t\tif (requestDispatcher == null) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// il n'est pas dit que path soit non null\r\n\t\t\tfinal InvocationHandler invocationHandler = new JspWrapper(String.valueOf(path),\r\n\t\t\t\t\trequestDispatcher);\r\n\t\t\treturn JdbcWrapper.createProxy(requestDispatcher, invocationHandler);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic AsyncContext startAsync() {", "right_context": "}\r\n\t}", "class_name": "HttpRequestWrapper", "return_type": "AsyncContext", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WebpackMojo extends AbstractFrontendMojo {\n\n    /**\n     * Webpack arguments. Default is empty (runs just the \"webpack\" command).\n     */\n    @Parameter(property = \"frontend.webpack.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * Defaults to webpack.config.js in the {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by webpack.\n     * If this is set then files in the directory will be checked for\n     * modifications before running webpack.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by webpack. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.webpack\", defaultValue = \"${skip.webpack}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {<FILL_FUNCTION_BODY>}\n\n    private boolean shouldExecute() {\n        if (triggerfiles == null || triggerfiles.isEmpty()) {\n            triggerfiles = Arrays.asList(new File(workingDirectory, \"webpack.config.js\"));\n        }\n\n        return MojoUtils.shouldExecute(buildContext, triggerfiles, srcdir);\n    }\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/35", "ground_truth": "\n        if (shouldExecute()) {\n            factory.getWebpackRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after webpack: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping webpack as no modified files in \" + srcdir);\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "WebpackMojo.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class WebpackMojo extends AbstractFrontendMojo {\n\n    /**\n     * Webpack arguments. Default is empty (runs just the \"webpack\" command).\n     */\n    @Parameter(property = \"frontend.webpack.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * Defaults to webpack.config.js in the {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by webpack.\n     * If this is set then files in the directory will be checked for\n     * modifications before running webpack.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by webpack. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.webpack\", defaultValue = \"${skip.webpack}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {", "right_context": "}\n\n    private boolean shouldExecute() {\n        if (triggerfiles == null || triggerfiles.isEmpty()) {\n            triggerfiles = Arrays.asList(new File(workingDirectory, \"webpack.config.js\"));\n        }\n\n        return MojoUtils.shouldExecute(buildContext, triggerfiles, srcdir);\n    }\n\n}", "class_name": "WebpackMojo", "return_type": "void", "parameters": [{"type": "FrontendPluginFactory", "name": "factory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InstallNodeAndPnpmMojo extends AbstractFrontendMojo {\n\n    /**\n     * Where to download Node.js binary from. Defaults to https://nodejs.org/dist/\n     */\n    @Parameter(property = \"nodeDownloadRoot\", required = false)\n    private String nodeDownloadRoot;\n\n    /**\n     * Where to download pnpm binary from. Defaults to https://registry.npmjs.org/pnpm/-/\n     */\n    @Parameter(property = \"pnpmDownloadRoot\", required = false, defaultValue = PnpmInstaller.DEFAULT_PNPM_DOWNLOAD_ROOT)\n    private String pnpmDownloadRoot;\n\n    /**\n     * Where to download Node.js and pnpm binaries from.\n     *\n     * @deprecated use {@link #nodeDownloadRoot} and {@link #pnpmDownloadRoot} instead, this configuration will be used only when no {@link #nodeDownloadRoot} or {@link #pnpmDownloadRoot} is specified.\n     */\n    @Parameter(property = \"downloadRoot\", required = false, defaultValue = \"\")\n    @Deprecated\n    private String downloadRoot;\n\n    /**\n     * The version of Node.js to install. IMPORTANT! Most Node.js version names start with 'v', for example 'v0.10.18'\n     */\n    @Parameter(property=\"nodeVersion\", required = true)\n    private String nodeVersion;\n\n    /**\n     * The version of pnpm to install. Note that the version string can optionally be prefixed with\n     * 'v' (i.e., both 'v1.2.3' and '1.2.3' are valid).\n     */\n    @Parameter(property = \"pnpmVersion\", required = true)\n    private String pnpmVersion;\n\n    /**\n     * Server Id for download username and password\n     */\n    @Parameter(property = \"serverId\", defaultValue = \"\")\n    private String serverId;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.installnodepnpm\", defaultValue = \"${skip.installnodepnpm}\")\n    private boolean skip;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public void execute(FrontendPluginFactory factory) throws InstallationException {<FILL_FUNCTION_BODY>}\n\n    private String getNodeDownloadRoot() {\n        if (downloadRoot != null && !\"\".equals(downloadRoot) && nodeDownloadRoot == null) {\n            return downloadRoot;\n        }\n        return nodeDownloadRoot;\n    }\n\n    private String getPnpmDownloadRoot() {\n        if (downloadRoot != null && !\"\".equals(downloadRoot) && PnpmInstaller.DEFAULT_PNPM_DOWNLOAD_ROOT.equals(pnpmDownloadRoot)) {\n            return downloadRoot;\n        }\n        return pnpmDownloadRoot;\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/54", "ground_truth": "\n        ProxyConfig proxyConfig = MojoUtils.getProxyConfig(session, decrypter);\n        // Use different names to avoid confusion with fields `nodeDownloadRoot` and\n        // `pnpmDownloadRoot`.\n        //\n        // TODO: Remove the `downloadRoot` config (with breaking change) to simplify download root\n        // resolution.\n        String resolvedNodeDownloadRoot = getNodeDownloadRoot();\n        String resolvedPnpmDownloadRoot = getPnpmDownloadRoot();\n        Server server = MojoUtils.decryptServer(serverId, session, decrypter);\n        if (null != server) {\n            factory.getNodeInstaller(proxyConfig)\n                .setNodeVersion(nodeVersion)\n                .setNodeDownloadRoot(resolvedNodeDownloadRoot)\n                .setUserName(server.getUsername())\n                .setPassword(server.getPassword())\n                .install();\n            factory.getPnpmInstaller(proxyConfig)\n                .setPnpmVersion(pnpmVersion)\n                .setPnpmDownloadRoot(resolvedPnpmDownloadRoot)\n                .setUserName(server.getUsername())\n                .setPassword(server.getPassword())\n                .install();\n        } else {\n            factory.getNodeInstaller(proxyConfig)\n                .setNodeVersion(nodeVersion)\n                .setNodeDownloadRoot(resolvedNodeDownloadRoot)\n                .install();\n            factory.getPnpmInstaller(proxyConfig)\n                .setPnpmVersion(this.pnpmVersion)\n                .setPnpmDownloadRoot(resolvedPnpmDownloadRoot)\n                .install();\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "InstallNodeAndPnpmMojo.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class InstallNodeAndPnpmMojo extends AbstractFrontendMojo {\n\n    /**\n     * Where to download Node.js binary from. Defaults to https://nodejs.org/dist/\n     */\n    @Parameter(property = \"nodeDownloadRoot\", required = false)\n    private String nodeDownloadRoot;\n\n    /**\n     * Where to download pnpm binary from. Defaults to https://registry.npmjs.org/pnpm/-/\n     */\n    @Parameter(property = \"pnpmDownloadRoot\", required = false, defaultValue = PnpmInstaller.DEFAULT_PNPM_DOWNLOAD_ROOT)\n    private String pnpmDownloadRoot;\n\n    /**\n     * Where to download Node.js and pnpm binaries from.\n     *\n     * @deprecated use {@link #nodeDownloadRoot} and {@link #pnpmDownloadRoot} instead, this configuration will be used only when no {@link #nodeDownloadRoot} or {@link #pnpmDownloadRoot} is specified.\n     */\n    @Parameter(property = \"downloadRoot\", required = false, defaultValue = \"\")\n    @Deprecated\n    private String downloadRoot;\n\n    /**\n     * The version of Node.js to install. IMPORTANT! Most Node.js version names start with 'v', for example 'v0.10.18'\n     */\n    @Parameter(property=\"nodeVersion\", required = true)\n    private String nodeVersion;\n\n    /**\n     * The version of pnpm to install. Note that the version string can optionally be prefixed with\n     * 'v' (i.e., both 'v1.2.3' and '1.2.3' are valid).\n     */\n    @Parameter(property = \"pnpmVersion\", required = true)\n    private String pnpmVersion;\n\n    /**\n     * Server Id for download username and password\n     */\n    @Parameter(property = \"serverId\", defaultValue = \"\")\n    private String serverId;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.installnodepnpm\", defaultValue = \"${skip.installnodepnpm}\")\n    private boolean skip;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public void execute(FrontendPluginFactory factory) throws InstallationException {", "right_context": "}\n\n    private String getNodeDownloadRoot() {\n        if (downloadRoot != null && !\"\".equals(downloadRoot) && nodeDownloadRoot == null) {\n            return downloadRoot;\n        }\n        return nodeDownloadRoot;\n    }\n\n    private String getPnpmDownloadRoot() {\n        if (downloadRoot != null && !\"\".equals(downloadRoot) && PnpmInstaller.DEFAULT_PNPM_DOWNLOAD_ROOT.equals(pnpmDownloadRoot)) {\n            return downloadRoot;\n        }\n        return pnpmDownloadRoot;\n    }\n}", "class_name": "InstallNodeAndPnpmMojo", "return_type": "void", "parameters": [{"type": "FrontendPluginFactory", "name": "factory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NodeTaskExecutor {\n    private static final String DS = \"//\";\n    private static final String AT = \"@\";\n\n    private final Logger logger;\n    private final String taskName;\n    private String taskLocation;\n    private final ArgumentsParser argumentsParser;\n    private final NodeExecutorConfig config;\n    private final Map<String, String> proxy;\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskLocation) {\n        this(config, taskLocation, Collections.<String>emptyList());\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskName, String taskLocation) {\n        this(config, taskName, taskLocation, Collections.<String>emptyList());\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskLocation, List<String> additionalArguments) {\n        this(config, getTaskNameFromLocation(taskLocation), taskLocation, additionalArguments);\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskName, String taskLocation, List<String> additionalArguments) {\n        this(config, taskName, taskLocation, additionalArguments, Collections.<String, String>emptyMap());\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskName, String taskLocation, List<String> additionalArguments, Map<String, String> proxy) {\n        this.logger = LoggerFactory.getLogger(getClass());\n        this.config = config;\n        this.taskName = taskName;\n        this.taskLocation = taskLocation;\n        this.argumentsParser = new ArgumentsParser(additionalArguments);\n        this.proxy = proxy;\n    }\n\n    private static String getTaskNameFromLocation(String taskLocation) {\n        return taskLocation.replaceAll(\"^.*/([^/]+)(?:\\\\.js)?$\",\"$1\");\n    }\n\n\n    public final void execute(String args, Map<String, String> environment) throws TaskRunnerException {\n        final String absoluteTaskLocation = getAbsoluteTaskLocation();\n        final List<String> arguments = getArguments(args);\n        logger.info(\"Running \" + taskToString(taskName, arguments) + \" in \" + config.getWorkingDirectory());\n\n        try {\n            Map<String, String> internalEnvironment = new HashMap<>();\n            if (environment != null && !environment.isEmpty()) {\n                internalEnvironment.putAll(environment);\n            }\n            if (!proxy.isEmpty()) {\n                internalEnvironment.putAll(proxy);\n            }\n            final int result = new NodeExecutor(config, prepend(absoluteTaskLocation, arguments), internalEnvironment ).executeAndRedirectOutput(logger);\n            if (result != 0) {\n                throw new TaskRunnerException(taskToString(taskName, arguments) + \" failed. (error code \" + result + \")\");\n            }\n        } catch (ProcessExecutionException e) {\n            throw new TaskRunnerException(taskToString(taskName, arguments) + \" failed.\", e);\n        }\n    }\n\n    private String getAbsoluteTaskLocation() {\n        String location = normalize(taskLocation);\n        if (Utils.isRelative(taskLocation)) {\n            File taskFile = new File(config.getWorkingDirectory(), location);\n            if (!taskFile.exists()) {\n                taskFile = new File(config.getInstallDirectory(), location);\n            }\n            location = taskFile.getAbsolutePath();\n        }\n        return location;\n    }\n\n\n\n    private List<String> getArguments(String args) {\n        return argumentsParser.parse(args);\n    }\n\n    private static String taskToString(String taskName, List<String> arguments) {\n        List<String> clonedArguments = new ArrayList<String>(arguments);\n        for (int i = 0; i < clonedArguments.size(); i++) {\n            final String s = clonedArguments.get(i);\n            final boolean maskMavenProxyPassword = s.contains(\"proxy=\");\n            if (maskMavenProxyPassword) {\n                final String bestEffortMaskedPassword = maskPassword(s);\n                clonedArguments.set(i, bestEffortMaskedPassword);\n            }\n        }\n        return \"'\" + taskName + \" \" + implode(\" \", clonedArguments) + \"'\";\n    }\n\n    private static String maskPassword(String proxyString) {<FILL_FUNCTION_BODY>}\n\n    public void setTaskLocation(String taskLocation) {\n        this.taskLocation = taskLocation;\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/96", "ground_truth": "\n        String retVal = proxyString;\n        if (proxyString != null && !\"\".equals(proxyString.trim())) {\n            boolean hasSchemeDefined = proxyString.contains(\"http:\") || proxyString.contains(\"https:\");\n            boolean hasProtocolDefined = proxyString.contains(DS);\n            boolean hasAtCharacterDefined = proxyString.contains(AT);\n            if (hasSchemeDefined && hasProtocolDefined && hasAtCharacterDefined) {\n                final int firstDoubleSlashIndex = proxyString.indexOf(DS);\n                final int lastAtCharIndex = proxyString.lastIndexOf(AT);\n                boolean hasPossibleURIUserInfo = firstDoubleSlashIndex < lastAtCharIndex;\n                if (hasPossibleURIUserInfo) {\n                    final String userInfo = proxyString.substring(firstDoubleSlashIndex + DS.length(), lastAtCharIndex);\n                    final String[] userParts = userInfo.split(\":\");\n                    if (userParts.length > 0) {\n                        final int startOfUserNameIndex = firstDoubleSlashIndex + DS.length();\n                        final int firstColonInUsernameOrEndOfUserNameIndex = startOfUserNameIndex + userParts[0].length();\n                        final String leftPart = proxyString.substring(0, firstColonInUsernameOrEndOfUserNameIndex);\n                        final String rightPart = proxyString.substring(lastAtCharIndex);\n                        retVal = leftPart + \":***\" + rightPart;\n                    }\n                }\n            }\n        }\n        return retVal;\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "NodeTaskExecutor.java"], "context_start_lineno": 0, "function_name": "maskPassword", "left_context": "class NodeTaskExecutor {\n    private static final String DS = \"//\";\n    private static final String AT = \"@\";\n\n    private final Logger logger;\n    private final String taskName;\n    private String taskLocation;\n    private final ArgumentsParser argumentsParser;\n    private final NodeExecutorConfig config;\n    private final Map<String, String> proxy;\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskLocation) {\n        this(config, taskLocation, Collections.<String>emptyList());\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskName, String taskLocation) {\n        this(config, taskName, taskLocation, Collections.<String>emptyList());\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskLocation, List<String> additionalArguments) {\n        this(config, getTaskNameFromLocation(taskLocation), taskLocation, additionalArguments);\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskName, String taskLocation, List<String> additionalArguments) {\n        this(config, taskName, taskLocation, additionalArguments, Collections.<String, String>emptyMap());\n    }\n\n    public NodeTaskExecutor(NodeExecutorConfig config, String taskName, String taskLocation, List<String> additionalArguments, Map<String, String> proxy) {\n        this.logger = LoggerFactory.getLogger(getClass());\n        this.config = config;\n        this.taskName = taskName;\n        this.taskLocation = taskLocation;\n        this.argumentsParser = new ArgumentsParser(additionalArguments);\n        this.proxy = proxy;\n    }\n\n    private static String getTaskNameFromLocation(String taskLocation) {\n        return taskLocation.replaceAll(\"^.*/([^/]+)(?:\\\\.js)?$\",\"$1\");\n    }\n\n\n    public final void execute(String args, Map<String, String> environment) throws TaskRunnerException {\n        final String absoluteTaskLocation = getAbsoluteTaskLocation();\n        final List<String> arguments = getArguments(args);\n        logger.info(\"Running \" + taskToString(taskName, arguments) + \" in \" + config.getWorkingDirectory());\n\n        try {\n            Map<String, String> internalEnvironment = new HashMap<>();\n            if (environment != null && !environment.isEmpty()) {\n                internalEnvironment.putAll(environment);\n            }\n            if (!proxy.isEmpty()) {\n                internalEnvironment.putAll(proxy);\n            }\n            final int result = new NodeExecutor(config, prepend(absoluteTaskLocation, arguments), internalEnvironment ).executeAndRedirectOutput(logger);\n            if (result != 0) {\n                throw new TaskRunnerException(taskToString(taskName, arguments) + \" failed. (error code \" + result + \")\");\n            }\n        } catch (ProcessExecutionException e) {\n            throw new TaskRunnerException(taskToString(taskName, arguments) + \" failed.\", e);\n        }\n    }\n\n    private String getAbsoluteTaskLocation() {\n        String location = normalize(taskLocation);\n        if (Utils.isRelative(taskLocation)) {\n            File taskFile = new File(config.getWorkingDirectory(), location);\n            if (!taskFile.exists()) {\n                taskFile = new File(config.getInstallDirectory(), location);\n            }\n            location = taskFile.getAbsolutePath();\n        }\n        return location;\n    }\n\n\n\n    private List<String> getArguments(String args) {\n        return argumentsParser.parse(args);\n    }\n\n    private static String taskToString(String taskName, List<String> arguments) {\n        List<String> clonedArguments = new ArrayList<String>(arguments);\n        for (int i = 0; i < clonedArguments.size(); i++) {\n            final String s = clonedArguments.get(i);\n            final boolean maskMavenProxyPassword = s.contains(\"proxy=\");\n            if (maskMavenProxyPassword) {\n                final String bestEffortMaskedPassword = maskPassword(s);\n                clonedArguments.set(i, bestEffortMaskedPassword);\n            }\n        }\n        return \"'\" + taskName + \" \" + implode(\" \", clonedArguments) + \"'\";\n    }\n\n    private static String maskPassword(String proxyString) {", "right_context": "}\n\n    public void setTaskLocation(String taskLocation) {\n        this.taskLocation = taskLocation;\n    }\n}", "class_name": "NodeTaskExecutor", "return_type": "String", "parameters": [{"type": "String", "name": "proxyString"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractFrontendMojo extends AbstractMojo {\n\n    @Component\n    protected MojoExecution execution;\n\n    /**\n     * Whether you should skip while running in the test phase (default is false)\n     */\n    @Parameter(property = \"skipTests\", required = false, defaultValue = \"false\")\n    protected Boolean skipTests;\n\n    /**\n     * Set this to true to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on\n     * occasion.\n     *\n     * @since 1.4\n     */\n    @Parameter(property = \"maven.test.failure.ignore\", defaultValue = \"false\")\n    protected boolean testFailureIgnore;\n\n    /**\n     * The base directory for running all Node commands. (Usually the directory that contains package.json)\n     */\n    @Parameter(defaultValue = \"${basedir}\", property = \"workingDirectory\", required = false)\n    protected File workingDirectory;\n\n    /**\n     * The base directory for installing node and npm.\n     */\n    @Parameter(property = \"installDirectory\", required = false)\n    protected File installDirectory;\n\n    /**\n     * Additional environment variables to pass to the build.\n     */\n    @Parameter\n    protected Map<String, String> environmentVariables;\n\n    @Parameter(defaultValue = \"${project}\", readonly = true)\n    private MavenProject project;\n\n    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n    private RepositorySystemSession repositorySystemSession;\n\n    /**\n     * Determines if this execution should be skipped.\n     */\n    private boolean skipTestPhase() {\n        return skipTests && isTestingPhase();\n    }\n\n    /**\n     * Determines if the current execution is during a testing phase (e.g., \"test\" or \"integration-test\").\n     */\n    private boolean isTestingPhase() {\n        String phase = execution.getLifecyclePhase();\n        return \"test\".equals(phase) || \"integration-test\".equals(phase);\n    }\n\n    protected abstract void execute(FrontendPluginFactory factory) throws FrontendException;\n\n    /**\n     * Implemented by children to determine if this execution should be skipped.\n     */\n    protected abstract boolean skipExecution();\n\n    @Override\n    public void execute() throws MojoFailureException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/106", "ground_truth": "\n        if (testFailureIgnore && !isTestingPhase()) {\n            getLog().info(\"testFailureIgnore property is ignored in non test phases\");\n        }\n        if (!(skipTestPhase() || skipExecution())) {\n            if (installDirectory == null) {\n                installDirectory = workingDirectory;\n            }\n            try {\n                execute(new FrontendPluginFactory(workingDirectory, installDirectory,\n                        new RepositoryCacheResolver(repositorySystemSession)));\n            } catch (TaskRunnerException e) {\n                if (testFailureIgnore && isTestingPhase()) {\n                    getLog().error(\"There are test failures.\\nFailed to run task: \" + e.getMessage(), e);\n                } else {\n                    throw new MojoFailureException(\"Failed to run task\", e);\n                }\n            } catch (FrontendException e) {\n                throw MojoUtils.toMojoFailureException(e);\n            }\n        } else {\n            getLog().info(\"Skipping execution.\");\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "AbstractFrontendMojo.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class AbstractFrontendMojo extends AbstractMojo {\n\n    @Component\n    protected MojoExecution execution;\n\n    /**\n     * Whether you should skip while running in the test phase (default is false)\n     */\n    @Parameter(property = \"skipTests\", required = false, defaultValue = \"false\")\n    protected Boolean skipTests;\n\n    /**\n     * Set this to true to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on\n     * occasion.\n     *\n     * @since 1.4\n     */\n    @Parameter(property = \"maven.test.failure.ignore\", defaultValue = \"false\")\n    protected boolean testFailureIgnore;\n\n    /**\n     * The base directory for running all Node commands. (Usually the directory that contains package.json)\n     */\n    @Parameter(defaultValue = \"${basedir}\", property = \"workingDirectory\", required = false)\n    protected File workingDirectory;\n\n    /**\n     * The base directory for installing node and npm.\n     */\n    @Parameter(property = \"installDirectory\", required = false)\n    protected File installDirectory;\n\n    /**\n     * Additional environment variables to pass to the build.\n     */\n    @Parameter\n    protected Map<String, String> environmentVariables;\n\n    @Parameter(defaultValue = \"${project}\", readonly = true)\n    private MavenProject project;\n\n    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n    private RepositorySystemSession repositorySystemSession;\n\n    /**\n     * Determines if this execution should be skipped.\n     */\n    private boolean skipTestPhase() {\n        return skipTests && isTestingPhase();\n    }\n\n    /**\n     * Determines if the current execution is during a testing phase (e.g., \"test\" or \"integration-test\").\n     */\n    private boolean isTestingPhase() {\n        String phase = execution.getLifecyclePhase();\n        return \"test\".equals(phase) || \"integration-test\".equals(phase);\n    }\n\n    protected abstract void execute(FrontendPluginFactory factory) throws FrontendException;\n\n    /**\n     * Implemented by children to determine if this execution should be skipped.\n     */\n    protected abstract boolean skipExecution();\n\n    @Override\n    public void execute() throws MojoFailureException {", "right_context": "}\n\n}", "class_name": "AbstractFrontendMojo", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ProcessExecutor {\n    private final static String PATH_ENV_VAR = \"PATH\";\n\n    private final Map<String, String> environment;\n    private CommandLine commandLine;\n    private final Executor executor;\n\n    public ProcessExecutor(File workingDirectory, List<String> paths, List<String> command, Platform platform, Map<String, String> additionalEnvironment){\n        this(workingDirectory, paths, command, platform, additionalEnvironment, 0);\n    }\n\n    public ProcessExecutor(File workingDirectory, List<String> paths, List<String> command, Platform platform, Map<String, String> additionalEnvironment, long timeoutInSeconds) {\n        this.environment = createEnvironment(paths, platform, additionalEnvironment);\n        this.commandLine = createCommandLine(command);\n        this.executor = createExecutor(workingDirectory, timeoutInSeconds);\n    }\n\n    public String executeAndGetResult(final Logger logger) throws ProcessExecutionException {\n        ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n        ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n\n        int exitValue = execute(logger, stdout, stderr);\n        if (exitValue == 0) {\n            return stdout.toString().trim();\n        } else {\n            throw new ProcessExecutionException(stdout + \" \" + stderr);\n        }\n    }\n\n    public int executeAndRedirectOutput(final Logger logger) throws ProcessExecutionException {<FILL_FUNCTION_BODY>}\n\n    private int execute(final Logger logger, final OutputStream stdout, final OutputStream stderr)\n            throws ProcessExecutionException {\n        logger.debug(\"Executing command line {}\", commandLine);\n        try {\n            ExecuteStreamHandler streamHandler = new PumpStreamHandler(stdout, stderr);\n            executor.setStreamHandler(streamHandler);\n\n            int exitValue = executor.execute(commandLine, environment);\n            logger.debug(\"Exit value {}\", exitValue);\n\n            return exitValue;\n        } catch (ExecuteException e) {\n            if (executor.getWatchdog() != null && executor.getWatchdog().killedProcess()) {\n                throw new ProcessExecutionException(\"Process killed after timeout\");\n            }\n            throw new ProcessExecutionException(e);\n        } catch (IOException e) {\n            throw new ProcessExecutionException(e);\n        }\n    }\n\n    private CommandLine createCommandLine(List<String> command) {\n        CommandLine commmandLine = new CommandLine(command.get(0));\n\n        for (int i = 1;i < command.size();i++) {\n            String argument = command.get(i);\n            commmandLine.addArgument(argument, false);\n        }\n\n        return commmandLine;\n    }\n\n    private Map<String, String> createEnvironment(final List<String> paths, final Platform platform, final Map<String, String> additionalEnvironment) {\n        final Map<String, String> environment = new HashMap<>(System.getenv());\n\n        if (additionalEnvironment != null) {\n            environment.putAll(additionalEnvironment);\n        }\n\n        if (platform.isWindows()) {\n            for (final Map.Entry<String, String> entry : environment.entrySet()) {\n                final String pathName = entry.getKey();\n                if (PATH_ENV_VAR.equalsIgnoreCase(pathName)) {\n                    final String pathValue = entry.getValue();\n                    environment.put(pathName, extendPathVariable(pathValue, paths));\n                }\n            }\n        } else {\n            final String pathValue = environment.get(PATH_ENV_VAR);\n            environment.put(PATH_ENV_VAR, extendPathVariable(pathValue, paths));\n        }\n\n        return environment;\n    }\n\n    private String extendPathVariable(final String existingValue, final List<String> paths) {\n        final StringBuilder pathBuilder = new StringBuilder();\n        for (final String path : paths) {\n            pathBuilder.append(path).append(File.pathSeparator);\n        }\n        if (existingValue != null) {\n            pathBuilder.append(existingValue).append(File.pathSeparator);\n        }\n        return pathBuilder.toString();\n    }\n\n    private Executor createExecutor(File workingDirectory, long timeoutInSeconds) {\n        DefaultExecutor executor = new DefaultExecutor();\n        executor.setWorkingDirectory(workingDirectory);\n        executor.setProcessDestroyer(new ShutdownHookProcessDestroyer());   // Fixes #41\n\n        if (timeoutInSeconds > 0) {\n            executor.setWatchdog(new ExecuteWatchdog(timeoutInSeconds * 1000));\n        }\n\n        return executor;\n    }\n\n    private static class LoggerOutputStream extends LogOutputStream {\n        private final Logger logger;\n\n        LoggerOutputStream(Logger logger, int logLevel) {\n            super(logLevel);\n            this.logger = logger;\n        }\n\n        @Override\n        public final void flush() {\n            // buffer processing on close() only\n        }\n\n        @Override\n        protected void processLine(final String line, final int logLevel) {\n            logger.info(line);\n        }\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/120", "ground_truth": "\n        OutputStream stdout = new LoggerOutputStream(logger, 0);\n        return execute(logger, stdout, stdout);\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "ProcessExecutor.java"], "context_start_lineno": 0, "function_name": "executeAndRedirectOutput", "left_context": "class ProcessExecutor {\n    private final static String PATH_ENV_VAR = \"PATH\";\n\n    private final Map<String, String> environment;\n    private CommandLine commandLine;\n    private final Executor executor;\n\n    public ProcessExecutor(File workingDirectory, List<String> paths, List<String> command, Platform platform, Map<String, String> additionalEnvironment){\n        this(workingDirectory, paths, command, platform, additionalEnvironment, 0);\n    }\n\n    public ProcessExecutor(File workingDirectory, List<String> paths, List<String> command, Platform platform, Map<String, String> additionalEnvironment, long timeoutInSeconds) {\n        this.environment = createEnvironment(paths, platform, additionalEnvironment);\n        this.commandLine = createCommandLine(command);\n        this.executor = createExecutor(workingDirectory, timeoutInSeconds);\n    }\n\n    public String executeAndGetResult(final Logger logger) throws ProcessExecutionException {\n        ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n        ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n\n        int exitValue = execute(logger, stdout, stderr);\n        if (exitValue == 0) {\n            return stdout.toString().trim();\n        } else {\n            throw new ProcessExecutionException(stdout + \" \" + stderr);\n        }\n    }\n\n    public int executeAndRedirectOutput(final Logger logger) throws ProcessExecutionException {", "right_context": "}\n\n    private int execute(final Logger logger, final OutputStream stdout, final OutputStream stderr)\n            throws ProcessExecutionException {\n        logger.debug(\"Executing command line {}\", commandLine);\n        try {\n            ExecuteStreamHandler streamHandler = new PumpStreamHandler(stdout, stderr);\n            executor.setStreamHandler(streamHandler);\n\n            int exitValue = executor.execute(commandLine, environment);\n            logger.debug(\"Exit value {}\", exitValue);\n\n            return exitValue;\n        } catch (ExecuteException e) {\n            if (executor.getWatchdog() != null && executor.getWatchdog().killedProcess()) {\n                throw new ProcessExecutionException(\"Process killed after timeout\");\n            }\n            throw new ProcessExecutionException(e);\n        } catch (IOException e) {\n            throw new ProcessExecutionException(e);\n        }\n    }\n\n    private CommandLine createCommandLine(List<String> command) {\n        CommandLine commmandLine = new CommandLine(command.get(0));\n\n        for (int i = 1;i < command.size();i++) {\n            String argument = command.get(i);\n            commmandLine.addArgument(argument, false);\n        }\n\n        return commmandLine;\n    }\n\n    private Map<String, String> createEnvironment(final List<String> paths, final Platform platform, final Map<String, String> additionalEnvironment) {\n        final Map<String, String> environment = new HashMap<>(System.getenv());\n\n        if (additionalEnvironment != null) {\n            environment.putAll(additionalEnvironment);\n        }\n\n        if (platform.isWindows()) {\n            for (final Map.Entry<String, String> entry : environment.entrySet()) {\n                final String pathName = entry.getKey();\n                if (PATH_ENV_VAR.equalsIgnoreCase(pathName)) {\n                    final String pathValue = entry.getValue();\n                    environment.put(pathName, extendPathVariable(pathValue, paths));\n                }\n            }\n        } else {\n            final String pathValue = environment.get(PATH_ENV_VAR);\n            environment.put(PATH_ENV_VAR, extendPathVariable(pathValue, paths));\n        }\n\n        return environment;\n    }\n\n    private String extendPathVariable(final String existingValue, final List<String> paths) {\n        final StringBuilder pathBuilder = new StringBuilder();\n        for (final String path : paths) {\n            pathBuilder.append(path).append(File.pathSeparator);\n        }\n        if (existingValue != null) {\n            pathBuilder.append(existingValue).append(File.pathSeparator);\n        }\n        return pathBuilder.toString();\n    }\n\n    private Executor createExecutor(File workingDirectory, long timeoutInSeconds) {\n        DefaultExecutor executor = new DefaultExecutor();\n        executor.setWorkingDirectory(workingDirectory);\n        executor.setProcessDestroyer(new ShutdownHookProcessDestroyer());   // Fixes #41\n\n        if (timeoutInSeconds > 0) {\n            executor.setWatchdog(new ExecuteWatchdog(timeoutInSeconds * 1000));\n        }\n\n        return executor;\n    }\n\n    private static class LoggerOutputStream extends LogOutputStream {\n        private final Logger logger;\n\n        LoggerOutputStream(Logger logger, int logLevel) {\n            super(logLevel);\n            this.logger = logger;\n        }\n\n        @Override\n        public final void flush() {\n            // buffer processing on close() only\n        }\n\n        @Override\n        protected void processLine(final String line, final int logLevel) {\n            logger.info(line);\n        }\n    }\n}", "class_name": "ProcessExecutor", "return_type": "int", "parameters": [{"type": "Logger", "name": "logger"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MojoUtils {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MojoUtils.class);\n\n    static <E extends Throwable> MojoFailureException toMojoFailureException(E e) {\n        String causeMessage = e.getCause() != null ? \": \" + e.getCause().getMessage() : \"\";\n        return new MojoFailureException(e.getMessage() + causeMessage, e);\n    }\n\n    static ProxyConfig getProxyConfig(MavenSession mavenSession, SettingsDecrypter decrypter) {\n        if (mavenSession == null ||\n                mavenSession.getSettings() == null ||\n                mavenSession.getSettings().getProxies() == null ||\n                mavenSession.getSettings().getProxies().isEmpty()) {\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        } else {\n            final List<Proxy> mavenProxies = mavenSession.getSettings().getProxies();\n\n            final List<ProxyConfig.Proxy> proxies = new ArrayList<ProxyConfig.Proxy>(mavenProxies.size());\n\n            for (Proxy mavenProxy : mavenProxies) {\n                if (mavenProxy.isActive()) {\n                    mavenProxy = decryptProxy(mavenProxy, decrypter);\n                    proxies.add(new ProxyConfig.Proxy(mavenProxy.getId(), mavenProxy.getProtocol(), mavenProxy.getHost(),\n                            mavenProxy.getPort(), mavenProxy.getUsername(), mavenProxy.getPassword(), mavenProxy.getNonProxyHosts()));\n                }\n            }\n\n            LOGGER.info(\"Found proxies: {}\", proxies);\n            return new ProxyConfig(proxies);\n        }\n    }\n\n    private static Proxy decryptProxy(Proxy proxy, SettingsDecrypter decrypter) {\n      synchronized (proxy) {\n        final DefaultSettingsDecryptionRequest decryptionRequest = new DefaultSettingsDecryptionRequest(proxy);\n        SettingsDecryptionResult decryptedResult = decrypter.decrypt(decryptionRequest);\n        return decryptedResult.getProxy();\n      }\n    }\n\n    static Server decryptServer(String serverId, MavenSession mavenSession, SettingsDecrypter decrypter) {\n        if (StringUtils.isEmpty(serverId)) {\n            return null;\n        }\n        Server server = mavenSession.getSettings().getServer(serverId);\n        if (server != null) {\n          synchronized (server) {\n            final DefaultSettingsDecryptionRequest decryptionRequest = new DefaultSettingsDecryptionRequest(server);\n            SettingsDecryptionResult decryptedResult = decrypter.decrypt(decryptionRequest);\n            return decryptedResult.getServer();\n          }\n        } else {\n            LOGGER.warn(\"Could not find server '\" + serverId + \"' in settings.xml\");\n            return null;\n        }\n    }\n\n    static boolean shouldExecute(BuildContext buildContext, List<File> triggerfiles, File srcdir) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/158", "ground_truth": "\n\n    // If there is no buildContext, or this is not an incremental build, always execute.\n    if (buildContext == null || !buildContext.isIncremental()) {\n      return true;\n    }\n\n    if (triggerfiles != null) {\n      for (File triggerfile : triggerfiles) {\n        if (buildContext.hasDelta(triggerfile)) {\n          return true;\n        }\n      }\n    }\n\n    if (srcdir == null) {\n      return true;\n    }\n\n    // Check for changes in the srcdir\n    Scanner scanner = buildContext.newScanner(srcdir);\n    scanner.scan();\n    String[] includedFiles = scanner.getIncludedFiles();\n    return (includedFiles != null && includedFiles.length > 0);\n  ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "MojoUtils.java"], "context_start_lineno": 0, "function_name": "shouldExecute", "left_context": "class MojoUtils {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MojoUtils.class);\n\n    static <E extends Throwable> MojoFailureException toMojoFailureException(E e) {\n        String causeMessage = e.getCause() != null ? \": \" + e.getCause().getMessage() : \"\";\n        return new MojoFailureException(e.getMessage() + causeMessage, e);\n    }\n\n    static ProxyConfig getProxyConfig(MavenSession mavenSession, SettingsDecrypter decrypter) {\n        if (mavenSession == null ||\n                mavenSession.getSettings() == null ||\n                mavenSession.getSettings().getProxies() == null ||\n                mavenSession.getSettings().getProxies().isEmpty()) {\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        } else {\n            final List<Proxy> mavenProxies = mavenSession.getSettings().getProxies();\n\n            final List<ProxyConfig.Proxy> proxies = new ArrayList<ProxyConfig.Proxy>(mavenProxies.size());\n\n            for (Proxy mavenProxy : mavenProxies) {\n                if (mavenProxy.isActive()) {\n                    mavenProxy = decryptProxy(mavenProxy, decrypter);\n                    proxies.add(new ProxyConfig.Proxy(mavenProxy.getId(), mavenProxy.getProtocol(), mavenProxy.getHost(),\n                            mavenProxy.getPort(), mavenProxy.getUsername(), mavenProxy.getPassword(), mavenProxy.getNonProxyHosts()));\n                }\n            }\n\n            LOGGER.info(\"Found proxies: {}\", proxies);\n            return new ProxyConfig(proxies);\n        }\n    }\n\n    private static Proxy decryptProxy(Proxy proxy, SettingsDecrypter decrypter) {\n      synchronized (proxy) {\n        final DefaultSettingsDecryptionRequest decryptionRequest = new DefaultSettingsDecryptionRequest(proxy);\n        SettingsDecryptionResult decryptedResult = decrypter.decrypt(decryptionRequest);\n        return decryptedResult.getProxy();\n      }\n    }\n\n    static Server decryptServer(String serverId, MavenSession mavenSession, SettingsDecrypter decrypter) {\n        if (StringUtils.isEmpty(serverId)) {\n            return null;\n        }\n        Server server = mavenSession.getSettings().getServer(serverId);\n        if (server != null) {\n          synchronized (server) {\n            final DefaultSettingsDecryptionRequest decryptionRequest = new DefaultSettingsDecryptionRequest(server);\n            SettingsDecryptionResult decryptedResult = decrypter.decrypt(decryptionRequest);\n            return decryptedResult.getServer();\n          }\n        } else {\n            LOGGER.warn(\"Could not find server '\" + serverId + \"' in settings.xml\");\n            return null;\n        }\n    }\n\n    static boolean shouldExecute(BuildContext buildContext, List<File> triggerfiles, File srcdir) {", "right_context": "}\n}", "class_name": "MojoUtils", "return_type": "boolean", "parameters": [{"type": "BuildContext", "name": "buildContext"}, {"type": "List<File>", "name": "triggerfiles"}, {"type": "File", "name": "srcdir"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass YarnInstaller {\n\n    public static final String INSTALL_PATH = \"/node/yarn\";\n\n    public static final String DEFAULT_YARN_DOWNLOAD_ROOT =\n        \"https://github.com/yarnpkg/yarn/releases/download/\";\n\n    private static final Object LOCK = new Object();\n\n    private static final String YARN_ROOT_DIRECTORY = \"dist\";\n\n    private String yarnVersion, yarnDownloadRoot, userName, password;\n\n    private boolean isYarnBerry;\n\n    private final Logger logger;\n\n    private final InstallConfig config;\n\n    private final ArchiveExtractor archiveExtractor;\n\n    private final FileDownloader fileDownloader;\n\n    YarnInstaller(InstallConfig config, ArchiveExtractor archiveExtractor, FileDownloader fileDownloader) {\n        logger = LoggerFactory.getLogger(getClass());\n        this.config = config;\n        this.archiveExtractor = archiveExtractor;\n        this.fileDownloader = fileDownloader;\n    }\n\n    public YarnInstaller setYarnVersion(String yarnVersion) {\n        this.yarnVersion = yarnVersion;\n        return this;\n    }\n\n    public YarnInstaller setIsYarnBerry(boolean isYarnBerry) {\n        this.isYarnBerry = isYarnBerry;\n        return this;\n    }\n\n    public YarnInstaller setYarnDownloadRoot(String yarnDownloadRoot) {\n        this.yarnDownloadRoot = yarnDownloadRoot;\n        return this;\n    }\n\n    public YarnInstaller setUserName(String userName) {\n        this.userName = userName;\n        return this;\n    }\n\n    public YarnInstaller setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n\n    public void install() throws InstallationException {\n        // use static lock object for a synchronized block\n        synchronized (LOCK) {\n            if (yarnDownloadRoot == null || yarnDownloadRoot.isEmpty()) {\n                yarnDownloadRoot = DEFAULT_YARN_DOWNLOAD_ROOT;\n            }\n            if (!yarnIsAlreadyInstalled()) {\n                if (!yarnVersion.startsWith(\"v\")) {\n                    throw new InstallationException(\"Yarn version has to start with prefix 'v'.\");\n                }\n                installYarn();\n            }\n        }\n    }\n\n    private boolean yarnIsAlreadyInstalled() {\n        try {\n            YarnExecutorConfig executorConfig = new InstallYarnExecutorConfig(config);\n            File nodeFile = executorConfig.getYarnPath();\n            if (nodeFile.exists()) {\n                final String version =\n                    new YarnExecutor(executorConfig, Arrays.asList(\"--version\"), null).executeAndGetResult(logger).trim();\n\n                if (version.equals(yarnVersion.replaceFirst(\"^v\", \"\"))) {\n                    logger.info(\"Yarn {} is already installed.\", version);\n                    return true;\n                } else {\n                    if (isYarnBerry && Integer.parseInt(version.split(\"\\\\.\")[0]) > 1) {\n                        logger.info(\"Yarn Berry {} is installed.\", version);\n                        return true;\n                    } else{\n                        logger.info(\"Yarn {} was installed, but we need version {}\", version, yarnVersion);\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        } catch (ProcessExecutionException e) {\n            return false;\n        }\n    }\n\n    private void installYarn() throws InstallationException {<FILL_FUNCTION_BODY>}\n\n    private File getInstallDirectory() {\n        File installDirectory = new File(config.getInstallDirectory(), INSTALL_PATH);\n        if (!installDirectory.exists()) {\n            logger.debug(\"Creating install directory {}\", installDirectory);\n            installDirectory.mkdirs();\n        }\n        return installDirectory;\n    }\n\n    private void extractFile(File archive, File destinationDirectory) throws ArchiveExtractionException {\n        logger.info(\"Unpacking {} into {}\", archive, destinationDirectory);\n        archiveExtractor.extract(archive.getPath(), destinationDirectory.getPath());\n    }\n\n    private void ensureCorrectYarnRootDirectory(File installDirectory, String yarnVersion) throws IOException {\n        File yarnRootDirectory = new File(installDirectory, YARN_ROOT_DIRECTORY);\n        if (!yarnRootDirectory.exists()) {\n            logger.debug(\"Yarn root directory not found, checking for yarn-{}\", yarnVersion);\n            // Handle renaming Yarn 1.X root to YARN_ROOT_DIRECTORY\n            File yarnOneXDirectory = new File(installDirectory, \"yarn-\" + yarnVersion);\n            if (yarnOneXDirectory.isDirectory()) {\n                if (!yarnOneXDirectory.renameTo(yarnRootDirectory)) {\n                    throw new IOException(\"Could not rename versioned yarn root directory to \" + YARN_ROOT_DIRECTORY);\n                }\n            } else {\n                throw new FileNotFoundException(\"Could not find yarn distribution directory during extract\");\n            }\n        }\n    }\n\n    private void downloadFileIfMissing(String downloadUrl, File destination, String userName, String password)\n        throws DownloadException {\n        if (!destination.exists()) {\n            downloadFile(downloadUrl, destination, userName, password);\n        }\n    }\n\n    private void downloadFile(String downloadUrl, File destination, String userName, String password)\n        throws DownloadException {\n        logger.info(\"Downloading {} to {}\", downloadUrl, destination);\n        fileDownloader.download(downloadUrl, destination.getPath(), userName, password);\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/174", "ground_truth": "\n        try {\n            logger.info(\"Installing Yarn version {}\", yarnVersion);\n            String downloadUrl = yarnDownloadRoot + yarnVersion;\n            String extension = \"tar.gz\";\n            String fileending = \"/yarn-\" + yarnVersion + \".\" + extension;\n\n            downloadUrl += fileending;\n\n            CacheDescriptor cacheDescriptor = new CacheDescriptor(\"yarn\", yarnVersion, extension);\n\n            File archive = config.getCacheResolver().resolve(cacheDescriptor);\n\n            downloadFileIfMissing(downloadUrl, archive, userName, password);\n\n            File installDirectory = getInstallDirectory();\n\n            // We need to delete the existing yarn directory first so we clean out any old files, and\n            // so we can rename the package directory below.\n            try {\n                if (installDirectory.isDirectory()) {\n                    FileUtils.deleteDirectory(installDirectory);\n                }\n            } catch (IOException e) {\n                logger.warn(\"Failed to delete existing Yarn installation.\");\n            }\n\n            try {\n                extractFile(archive, installDirectory);\n            } catch (ArchiveExtractionException e) {\n                if (e.getCause() instanceof EOFException) {\n                    // https://github.com/eirslett/frontend-maven-plugin/issues/794\n                    // The downloading was probably interrupted and archive file is incomplete:\n                    // delete it to retry from scratch\n                    this.logger.error(\"The archive file {} is corrupted and will be deleted. \"\n                            + \"Please try the build again.\", archive.getPath());\n                    archive.delete();\n                    if (installDirectory.exists()) {\n                        FileUtils.deleteDirectory(installDirectory);\n                    }\n                }\n\n                throw e;\n            }\n\n            ensureCorrectYarnRootDirectory(installDirectory, yarnVersion);\n\n            logger.info(\"Installed Yarn locally.\");\n        } catch (DownloadException e) {\n            throw new InstallationException(\"Could not download Yarn\", e);\n        } catch (ArchiveExtractionException | IOException e) {\n            throw new InstallationException(\"Could not extract the Yarn archive\", e);\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "YarnInstaller.java"], "context_start_lineno": 0, "function_name": "installYarn", "left_context": "class YarnInstaller {\n\n    public static final String INSTALL_PATH = \"/node/yarn\";\n\n    public static final String DEFAULT_YARN_DOWNLOAD_ROOT =\n        \"https://github.com/yarnpkg/yarn/releases/download/\";\n\n    private static final Object LOCK = new Object();\n\n    private static final String YARN_ROOT_DIRECTORY = \"dist\";\n\n    private String yarnVersion, yarnDownloadRoot, userName, password;\n\n    private boolean isYarnBerry;\n\n    private final Logger logger;\n\n    private final InstallConfig config;\n\n    private final ArchiveExtractor archiveExtractor;\n\n    private final FileDownloader fileDownloader;\n\n    YarnInstaller(InstallConfig config, ArchiveExtractor archiveExtractor, FileDownloader fileDownloader) {\n        logger = LoggerFactory.getLogger(getClass());\n        this.config = config;\n        this.archiveExtractor = archiveExtractor;\n        this.fileDownloader = fileDownloader;\n    }\n\n    public YarnInstaller setYarnVersion(String yarnVersion) {\n        this.yarnVersion = yarnVersion;\n        return this;\n    }\n\n    public YarnInstaller setIsYarnBerry(boolean isYarnBerry) {\n        this.isYarnBerry = isYarnBerry;\n        return this;\n    }\n\n    public YarnInstaller setYarnDownloadRoot(String yarnDownloadRoot) {\n        this.yarnDownloadRoot = yarnDownloadRoot;\n        return this;\n    }\n\n    public YarnInstaller setUserName(String userName) {\n        this.userName = userName;\n        return this;\n    }\n\n    public YarnInstaller setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n\n    public void install() throws InstallationException {\n        // use static lock object for a synchronized block\n        synchronized (LOCK) {\n            if (yarnDownloadRoot == null || yarnDownloadRoot.isEmpty()) {\n                yarnDownloadRoot = DEFAULT_YARN_DOWNLOAD_ROOT;\n            }\n            if (!yarnIsAlreadyInstalled()) {\n                if (!yarnVersion.startsWith(\"v\")) {\n                    throw new InstallationException(\"Yarn version has to start with prefix 'v'.\");\n                }\n                installYarn();\n            }\n        }\n    }\n\n    private boolean yarnIsAlreadyInstalled() {\n        try {\n            YarnExecutorConfig executorConfig = new InstallYarnExecutorConfig(config);\n            File nodeFile = executorConfig.getYarnPath();\n            if (nodeFile.exists()) {\n                final String version =\n                    new YarnExecutor(executorConfig, Arrays.asList(\"--version\"), null).executeAndGetResult(logger).trim();\n\n                if (version.equals(yarnVersion.replaceFirst(\"^v\", \"\"))) {\n                    logger.info(\"Yarn {} is already installed.\", version);\n                    return true;\n                } else {\n                    if (isYarnBerry && Integer.parseInt(version.split(\"\\\\.\")[0]) > 1) {\n                        logger.info(\"Yarn Berry {} is installed.\", version);\n                        return true;\n                    } else{\n                        logger.info(\"Yarn {} was installed, but we need version {}\", version, yarnVersion);\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        } catch (ProcessExecutionException e) {\n            return false;\n        }\n    }\n\n    private void installYarn() throws InstallationException {", "right_context": "}\n\n    private File getInstallDirectory() {\n        File installDirectory = new File(config.getInstallDirectory(), INSTALL_PATH);\n        if (!installDirectory.exists()) {\n            logger.debug(\"Creating install directory {}\", installDirectory);\n            installDirectory.mkdirs();\n        }\n        return installDirectory;\n    }\n\n    private void extractFile(File archive, File destinationDirectory) throws ArchiveExtractionException {\n        logger.info(\"Unpacking {} into {}\", archive, destinationDirectory);\n        archiveExtractor.extract(archive.getPath(), destinationDirectory.getPath());\n    }\n\n    private void ensureCorrectYarnRootDirectory(File installDirectory, String yarnVersion) throws IOException {\n        File yarnRootDirectory = new File(installDirectory, YARN_ROOT_DIRECTORY);\n        if (!yarnRootDirectory.exists()) {\n            logger.debug(\"Yarn root directory not found, checking for yarn-{}\", yarnVersion);\n            // Handle renaming Yarn 1.X root to YARN_ROOT_DIRECTORY\n            File yarnOneXDirectory = new File(installDirectory, \"yarn-\" + yarnVersion);\n            if (yarnOneXDirectory.isDirectory()) {\n                if (!yarnOneXDirectory.renameTo(yarnRootDirectory)) {\n                    throw new IOException(\"Could not rename versioned yarn root directory to \" + YARN_ROOT_DIRECTORY);\n                }\n            } else {\n                throw new FileNotFoundException(\"Could not find yarn distribution directory during extract\");\n            }\n        }\n    }\n\n    private void downloadFileIfMissing(String downloadUrl, File destination, String userName, String password)\n        throws DownloadException {\n        if (!destination.exists()) {\n            downloadFile(downloadUrl, destination, userName, password);\n        }\n    }\n\n    private void downloadFile(String downloadUrl, File destination, String userName, String password)\n        throws DownloadException {\n        logger.info(\"Downloading {} to {}\", downloadUrl, destination);\n        fileDownloader.download(downloadUrl, destination.getPath(), userName, password);\n    }\n}", "class_name": "YarnInstaller", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/BowerMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (bowerInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"bower not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/BunMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (this.bunInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(this.session,this.decrypter);\n//   }\n//  else {\n//     getLog().info(\"bun not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/MojoUtils.java\n// --------------------------------------------------\n// static ProxyConfig getProxyConfig(MavenSession mavenSession,SettingsDecrypter decrypter){\n//   if (mavenSession == null || mavenSession.getSettings() == null || mavenSession.getSettings().getProxies() == null || mavenSession.getSettings().getProxies().isEmpty()) {\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n//  else {\n//     final List<Proxy> mavenProxies=mavenSession.getSettings().getProxies();\n//     final List<ProxyConfig.Proxy> proxies=new ArrayList<ProxyConfig.Proxy>(mavenProxies.size());\n//     for (    Proxy mavenProxy : mavenProxies) {\n//       if (mavenProxy.isActive()) {\n//         mavenProxy=decryptProxy(mavenProxy,decrypter);\n//         proxies.add(new ProxyConfig.Proxy(mavenProxy.getId(),mavenProxy.getProtocol(),mavenProxy.getHost(),mavenProxy.getPort(),mavenProxy.getUsername(),mavenProxy.getPassword(),mavenProxy.getNonProxyHosts()));\n//       }\n//     }\n//     LOGGER.info(\"Found proxies: {}\",proxies);\n//     return new ProxyConfig(proxies);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/NpmMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (npmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"npm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/PnpmMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (pnpmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"pnpm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/YarnMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (this.yarnInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(this.session,this.decrypter);\n//   }\n//  else {\n//     getLog().info(\"yarn not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NpxMojo extends AbstractFrontendMojo {\n\n    private static final String NPM_REGISTRY_URL = \"npmRegistryURL\";\n    \n    /**\n     * npm arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"install\", property = \"frontend.npx.arguments\", required = false)\n    private String arguments;\n\n    @Parameter(property = \"frontend.npx.npmInheritsProxyConfigFromMaven\", required = false, defaultValue = \"true\")\n    private boolean npmInheritsProxyConfigFromMaven;\n\n    /**\n     * Registry override, passed as the registry option during npm install if set.\n     */\n    @Parameter(property = NPM_REGISTRY_URL, required = false, defaultValue = \"\")\n    private String npmRegistryURL;\n    \n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.npx\", defaultValue = \"${skip.npx}\")\n    private boolean skip;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        File packageJson = new File(workingDirectory, \"package.json\");\n        if (buildContext == null || buildContext.hasDelta(packageJson) || !buildContext.isIncremental()) {\n            ProxyConfig proxyConfig = getProxyConfig();\n            factory.getNpxRunner(proxyConfig, getRegistryUrl()).execute(arguments, environmentVariables);\n        } else {\n            getLog().info(\"Skipping npm install as package.json unchanged\");\n        }\n    }\n\n    private ProxyConfig getProxyConfig() {<FILL_FUNCTION_BODY>}\n\n    private String getRegistryUrl() {\n        // check to see if overridden via `-D`, otherwise fallback to pom value\n        return System.getProperty(NPM_REGISTRY_URL, npmRegistryURL);\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/182", "ground_truth": "\n        if (npmInheritsProxyConfigFromMaven) {\n            return MojoUtils.getProxyConfig(session, decrypter);\n        } else {\n            getLog().info(\"npm not inheriting proxy config from Maven\");\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "NpxMojo.java"], "context_start_lineno": 0, "function_name": "getProxyConfig", "left_context": "class NpxMojo extends AbstractFrontendMojo {\n\n    private static final String NPM_REGISTRY_URL = \"npmRegistryURL\";\n    \n    /**\n     * npm arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"install\", property = \"frontend.npx.arguments\", required = false)\n    private String arguments;\n\n    @Parameter(property = \"frontend.npx.npmInheritsProxyConfigFromMaven\", required = false, defaultValue = \"true\")\n    private boolean npmInheritsProxyConfigFromMaven;\n\n    /**\n     * Registry override, passed as the registry option during npm install if set.\n     */\n    @Parameter(property = NPM_REGISTRY_URL, required = false, defaultValue = \"\")\n    private String npmRegistryURL;\n    \n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.npx\", defaultValue = \"${skip.npx}\")\n    private boolean skip;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        File packageJson = new File(workingDirectory, \"package.json\");\n        if (buildContext == null || buildContext.hasDelta(packageJson) || !buildContext.isIncremental()) {\n            ProxyConfig proxyConfig = getProxyConfig();\n            factory.getNpxRunner(proxyConfig, getRegistryUrl()).execute(arguments, environmentVariables);\n        } else {\n            getLog().info(\"Skipping npm install as package.json unchanged\");\n        }\n    }\n\n    private ProxyConfig getProxyConfig() {", "right_context": "}\n\n    private String getRegistryUrl() {\n        // check to see if overridden via `-D`, otherwise fallback to pom value\n        return System.getProperty(NPM_REGISTRY_URL, npmRegistryURL);\n    }\n}", "class_name": "NpxMojo", "return_type": "ProxyConfig", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GulpMojo extends AbstractFrontendMojo {\n\n    /**\n     * Gulp arguments. Default is empty (runs just the \"gulp\" command).\n     */\n    @Parameter(property = \"frontend.gulp.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * Defaults to gulpfile.js in the {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by gulp.\n     * If this is set then files in the directory will be checked for\n     * modifications before running gulp.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by gulp. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.gulp\", defaultValue = \"${skip.gulp}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        if (shouldExecute()) {\n            factory.getGulpRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after gulp: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping gulp as no modified files in \" + srcdir);\n        }\n    }\n\n    private boolean shouldExecute() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/193", "ground_truth": "\n        if (triggerfiles == null || triggerfiles.isEmpty()) {\n            triggerfiles = Arrays.asList(new File(workingDirectory, \"gulpfile.js\"));\n        }\n\n        return MojoUtils.shouldExecute(buildContext, triggerfiles, srcdir);\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "GulpMojo.java"], "context_start_lineno": 0, "function_name": "shouldExecute", "left_context": "class GulpMojo extends AbstractFrontendMojo {\n\n    /**\n     * Gulp arguments. Default is empty (runs just the \"gulp\" command).\n     */\n    @Parameter(property = \"frontend.gulp.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * Defaults to gulpfile.js in the {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by gulp.\n     * If this is set then files in the directory will be checked for\n     * modifications before running gulp.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by gulp. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.gulp\", defaultValue = \"${skip.gulp}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        if (shouldExecute()) {\n            factory.getGulpRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after gulp: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping gulp as no modified files in \" + srcdir);\n        }\n    }\n\n    private boolean shouldExecute() {", "right_context": "}\n\n}", "class_name": "GulpMojo", "return_type": "boolean", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/BowerRunner.java\n// --------------------------------------------------\n// private static List<String> buildArguments(ProxyConfig proxyConfig){\n//   List<String> arguments=new ArrayList<String>();\n//   if (!proxyConfig.isEmpty()) {\n//     ProxyConfig.Proxy secureProxy=proxyConfig.getSecureProxy();\n//     if (secureProxy != null) {\n//       arguments.add(\"--config.https-proxy=\" + secureProxy.getUri().toString());\n//     }\n//     ProxyConfig.Proxy insecureProxy=proxyConfig.getInsecureProxy();\n//     if (insecureProxy != null) {\n//       arguments.add(\"--config.proxy=\" + insecureProxy.getUri().toString());\n//     }\n//   }\n//   return arguments;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/BunRunner.java\n// --------------------------------------------------\n// private static List<String> buildArguments(ProxyConfig proxyConfig,String npmRegistryURL){\n//   List<String> arguments=new ArrayList<>();\n//   if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//     arguments.add(\"--registry=\" + npmRegistryURL);\n//   }\n//   if (!proxyConfig.isEmpty()) {\n//     Proxy proxy=null;\n//     if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//       proxy=proxyConfig.getProxyForUrl(npmRegistryURL);\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getSecureProxy();\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getInsecureProxy();\n//     }\n//     arguments.add(\"--https-proxy=\" + proxy.getUri().toString());\n//     arguments.add(\"--proxy=\" + proxy.getUri().toString());\n//   }\n//   return arguments;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/BunTaskExecutor.java\n// --------------------------------------------------\n// private List<String> getArguments(String args){\n//   return argumentsParser.parse(args);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/NodeTaskExecutor.java\n// --------------------------------------------------\n// private List<String> getArguments(String args){\n//   return argumentsParser.parse(args);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/NpmRunner.java\n// --------------------------------------------------\n// static List<String> buildArguments(ProxyConfig proxyConfig,String npmRegistryURL){\n//   List<String> arguments=new ArrayList<String>();\n//   if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//     arguments.add(\"--registry=\" + npmRegistryURL);\n//   }\n//   if (!proxyConfig.isEmpty()) {\n//     Proxy proxy=getProxyConfig(proxyConfig,npmRegistryURL);\n//     arguments.add(\"--https-proxy=\" + proxy.getUri().toString());\n//     arguments.add(\"--proxy=\" + proxy.getUri().toString());\n//     final String nonProxyHosts=proxy.getNonProxyHosts();\n//     if (nonProxyHosts != null && !nonProxyHosts.isEmpty()) {\n//       final String[] nonProxyHostList=nonProxyHosts.split(\"\\\\|\");\n//       for (      String nonProxyHost : nonProxyHostList) {\n//         arguments.add(\"--noproxy=\" + nonProxyHost.replace(\"*\",\"\"));\n//       }\n//     }\n//   }\n//   return arguments;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/NpxRunner.java\n// --------------------------------------------------\n// /** \n//  * These are, in fact, npm arguments, that need to be split from the npx arguments by '--'. See an example: npx some-package -- --registry=http://myspecialregisty.com\n//  */\n// static List<String> buildNpmArguments(ProxyConfig proxyConfig,String npmRegistryURL){\n//   List<String> arguments=new ArrayList<>();\n//   if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//     arguments.add(\"--registry=\" + npmRegistryURL);\n//   }\n//   if (!proxyConfig.isEmpty()) {\n//     Proxy proxy=null;\n//     if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//       proxy=proxyConfig.getProxyForUrl(npmRegistryURL);\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getSecureProxy();\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getInsecureProxy();\n//     }\n//     arguments.add(\"--https-proxy=\" + proxy.getUri().toString());\n//     arguments.add(\"--proxy=\" + proxy.getUri().toString());\n//   }\n//   List<String> npmArguments;\n//   if (arguments.isEmpty()) {\n//     npmArguments=arguments;\n//   }\n//  else {\n//     npmArguments=new ArrayList<>();\n//     npmArguments.add(\"--\");\n//     npmArguments.addAll(arguments);\n//   }\n//   return npmArguments;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/PnpmRunner.java\n// --------------------------------------------------\n// static List<String> buildArguments(ProxyConfig proxyConfig,String npmRegistryURL){\n//   List<String> arguments=new ArrayList<String>();\n//   if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//     arguments.add(\"--registry=\" + npmRegistryURL);\n//   }\n//   if (!proxyConfig.isEmpty()) {\n//     Proxy proxy=null;\n//     if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//       proxy=proxyConfig.getProxyForUrl(npmRegistryURL);\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getSecureProxy();\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getInsecureProxy();\n//     }\n//     arguments.add(\"--https-proxy=\" + proxy.getUri().toString());\n//     arguments.add(\"--proxy=\" + proxy.getUri().toString());\n//     final String nonProxyHosts=proxy.getNonProxyHosts();\n//     if (nonProxyHosts != null && !nonProxyHosts.isEmpty()) {\n//       arguments.add(\"--noproxy=\" + nonProxyHosts.replace('|',','));\n//     }\n//   }\n//   return arguments;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/Utils.java\n// --------------------------------------------------\n// public static List<String> merge(List<String> first,List<String> second){\n//   ArrayList<String> result=new ArrayList<String>(first);\n//   result.addAll(second);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/Utils.java\n// --------------------------------------------------\n// public static List<String> prepend(String first,List<String> list){\n//   return merge(Arrays.asList(first),list);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/YarnRunner.java\n// --------------------------------------------------\n// private static List<String> buildArguments(ProxyConfig proxyConfig,String npmRegistryURL){\n//   List<String> arguments=new ArrayList<>();\n//   if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//     arguments.add(\"--registry=\" + npmRegistryURL);\n//   }\n//   if (!proxyConfig.isEmpty()) {\n//     Proxy proxy=null;\n//     if (npmRegistryURL != null && !npmRegistryURL.isEmpty()) {\n//       proxy=proxyConfig.getProxyForUrl(npmRegistryURL);\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getSecureProxy();\n//     }\n//     if (proxy == null) {\n//       proxy=proxyConfig.getInsecureProxy();\n//     }\n//     arguments.add(\"--https-proxy=\" + proxy.getUri().toString());\n//     arguments.add(\"--proxy=\" + proxy.getUri().toString());\n//   }\n//   return arguments;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/YarnTaskExecutor.java\n// --------------------------------------------------\n// private List<String> getArguments(String args){\n//   return argumentsParser.parse(args);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-plugin-core/src/test/java/com/github/eirslett/maven/plugins/frontend/lib/DefaultNpmRunnerTest.java\n// --------------------------------------------------\n// private List<String> runBuildArguments(String nonProxyHost,String registryUrl){\n//   List<ProxyConfig.Proxy> proxyList=Stream.of(new ProxyConfig.Proxy(id,protocol,host,port,username,password,nonProxyHost)).collect(Collectors.toList());\n//   return DefaultNpmRunner.buildArguments(new ProxyConfig(proxyList),registryUrl);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ArgumentsParser {\n\n    private final List<String> additionalArguments;\n\n    ArgumentsParser() {\n        this(Collections.<String>emptyList());\n    }\n\n    ArgumentsParser(List<String> additionalArguments) {\n        this.additionalArguments = additionalArguments;\n    }\n\n    /**\n     * Parses a given string of arguments, splitting it by characters that are whitespaces according to {@link Character#isWhitespace(char)}.\n     * <p>\n     * This method respects quoted arguments. Meaning that whitespaces appearing phrases that are enclosed by an opening\n     * single or double quote and a closing single or double quote or the end of the string will not be considered.\n     * <p>\n     * All characters excluding whitespaces considered for splitting stay in place.\n     * <p>\n     * Examples:\n     * \"foo bar\" will be split to [\"foo\", \"bar\"]\n     * \"foo \\\"bar foobar\\\"\" will be split to [\"foo\", \"\\\"bar foobar\\\"\"]\n     * \"foo 'bar\" will be split to [\"foo\", \"'bar\"]\n     *\n     * @param args a string of arguments\n     * @return an mutable copy of the list of all arguments\n     */\n    List<String> parse(String args) {<FILL_FUNCTION_BODY>}\n\n    private static void addArgument(StringBuilder argumentBuilder, List<String> arguments) {\n        if (argumentBuilder.length() > 0) {\n            String argument = argumentBuilder.toString();\n            arguments.add(argument);\n            argumentBuilder.setLength(0);\n        }\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/197", "ground_truth": "\n        if (args == null || \"null\".equals(args) || args.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        final List<String> arguments = new LinkedList<>();\n        final StringBuilder argumentBuilder = new StringBuilder();\n        Character quote = null;\n\n        for (int i = 0, l = args.length(); i < l; i++) {\n            char c = args.charAt(i);\n\n            if (Character.isWhitespace(c) && quote == null) {\n                addArgument(argumentBuilder, arguments);\n                continue;\n            } else if (c == '\"' || c == '\\'') {\n                // explicit boxing allows us to use object caching of the Character class\n                Character currentQuote = Character.valueOf(c);\n                if (quote == null) {\n                    quote = currentQuote;\n                } else if (quote.equals(currentQuote)){\n                    quote = null;\n                } // else\n                // we ignore the case when a quoted argument contains the other kind of quote\n            }\n\n            argumentBuilder.append(c);\n        }\n\n        addArgument(argumentBuilder, arguments);\n\n        for (String argument : this.additionalArguments) {\n            if (!arguments.contains(argument)) {\n                arguments.add(argument);\n            }\n        }\n\n        return new ArrayList<>(arguments);\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "ArgumentsParser.java"], "context_start_lineno": 0, "function_name": "parse", "left_context": "class ArgumentsParser {\n\n    private final List<String> additionalArguments;\n\n    ArgumentsParser() {\n        this(Collections.<String>emptyList());\n    }\n\n    ArgumentsParser(List<String> additionalArguments) {\n        this.additionalArguments = additionalArguments;\n    }\n\n    /**\n     * Parses a given string of arguments, splitting it by characters that are whitespaces according to {@link Character#isWhitespace(char)}.\n     * <p>\n     * This method respects quoted arguments. Meaning that whitespaces appearing phrases that are enclosed by an opening\n     * single or double quote and a closing single or double quote or the end of the string will not be considered.\n     * <p>\n     * All characters excluding whitespaces considered for splitting stay in place.\n     * <p>\n     * Examples:\n     * \"foo bar\" will be split to [\"foo\", \"bar\"]\n     * \"foo \\\"bar foobar\\\"\" will be split to [\"foo\", \"\\\"bar foobar\\\"\"]\n     * \"foo 'bar\" will be split to [\"foo\", \"'bar\"]\n     *\n     * @param args a string of arguments\n     * @return an mutable copy of the list of all arguments\n     */\n    List<String> parse(String args) {", "right_context": "}\n\n    private static void addArgument(StringBuilder argumentBuilder, List<String> arguments) {\n        if (argumentBuilder.length() > 0) {\n            String argument = argumentBuilder.toString();\n            arguments.add(argument);\n            argumentBuilder.setLength(0);\n        }\n    }\n}", "class_name": "ArgumentsParser", "return_type": "List<String>", "parameters": [{"type": "String", "name": "args"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InstallBunMojo extends AbstractFrontendMojo {\n\n    /**\n     * The version of Bun to install. IMPORTANT! Most Bun version names start with 'v', for example\n     * 'v1.0.0'\n     */\n    @Parameter(property = \"bunVersion\", required = true)\n    private String bunVersion;\n\n    /**\n     * Server Id for download username and password\n     */\n    @Parameter(property = \"serverId\", defaultValue = \"\")\n    private String serverId;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.installbun\", alias = \"skip.installbun\", defaultValue = \"${skip.installbun}\")\n    private boolean skip;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public void execute(FrontendPluginFactory factory) throws InstallationException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/276", "ground_truth": "\n        ProxyConfig proxyConfig = MojoUtils.getProxyConfig(this.session, this.decrypter);\n        Server server = MojoUtils.decryptServer(this.serverId, this.session, this.decrypter);\n        if (null != server) {\n            factory.getBunInstaller(proxyConfig).setBunVersion(this.bunVersion).setUserName(server.getUsername())\n                    .setPassword(server.getPassword()).install();\n        } else {\n            factory.getBunInstaller(proxyConfig).setBunVersion(this.bunVersion).install();\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "InstallBunMojo.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class InstallBunMojo extends AbstractFrontendMojo {\n\n    /**\n     * The version of Bun to install. IMPORTANT! Most Bun version names start with 'v', for example\n     * 'v1.0.0'\n     */\n    @Parameter(property = \"bunVersion\", required = true)\n    private String bunVersion;\n\n    /**\n     * Server Id for download username and password\n     */\n    @Parameter(property = \"serverId\", defaultValue = \"\")\n    private String serverId;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.installbun\", alias = \"skip.installbun\", defaultValue = \"${skip.installbun}\")\n    private boolean skip;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public void execute(FrontendPluginFactory factory) throws InstallationException {", "right_context": "}\n\n}", "class_name": "InstallBunMojo", "return_type": "void", "parameters": [{"type": "FrontendPluginFactory", "name": "factory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/BunMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (this.bunInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(this.session,this.decrypter);\n//   }\n//  else {\n//     getLog().info(\"bun not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/MojoUtils.java\n// --------------------------------------------------\n// static ProxyConfig getProxyConfig(MavenSession mavenSession,SettingsDecrypter decrypter){\n//   if (mavenSession == null || mavenSession.getSettings() == null || mavenSession.getSettings().getProxies() == null || mavenSession.getSettings().getProxies().isEmpty()) {\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n//  else {\n//     final List<Proxy> mavenProxies=mavenSession.getSettings().getProxies();\n//     final List<ProxyConfig.Proxy> proxies=new ArrayList<ProxyConfig.Proxy>(mavenProxies.size());\n//     for (    Proxy mavenProxy : mavenProxies) {\n//       if (mavenProxy.isActive()) {\n//         mavenProxy=decryptProxy(mavenProxy,decrypter);\n//         proxies.add(new ProxyConfig.Proxy(mavenProxy.getId(),mavenProxy.getProtocol(),mavenProxy.getHost(),mavenProxy.getPort(),mavenProxy.getUsername(),mavenProxy.getPassword(),mavenProxy.getNonProxyHosts()));\n//       }\n//     }\n//     LOGGER.info(\"Found proxies: {}\",proxies);\n//     return new ProxyConfig(proxies);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/NpmMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (npmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"npm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/NpxMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (npmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"npm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/PnpmMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (pnpmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"pnpm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/YarnMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (this.yarnInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(this.session,this.decrypter);\n//   }\n//  else {\n//     getLog().info(\"yarn not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BowerMojo extends AbstractFrontendMojo {\n\n    /**\n     * Bower arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"install\", property = \"frontend.bower.arguments\", required = false)\n    private String arguments;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.bower\", defaultValue = \"${skip.bower}\")\n    private boolean skip;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Parameter(property = \"frontend.bower.bowerInheritsProxyConfigFromMaven\", required = false, defaultValue = \"true\")\n    private boolean bowerInheritsProxyConfigFromMaven;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    protected synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        ProxyConfig proxyConfig = getProxyConfig();\n        factory.getBowerRunner(proxyConfig).execute(arguments, environmentVariables);\n    }\n\n    private ProxyConfig getProxyConfig() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/285", "ground_truth": "\n        if (bowerInheritsProxyConfigFromMaven) {\n            return MojoUtils.getProxyConfig(session, decrypter);\n        } else {\n            getLog().info(\"bower not inheriting proxy config from Maven\");\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "BowerMojo.java"], "context_start_lineno": 0, "function_name": "getProxyConfig", "left_context": "class BowerMojo extends AbstractFrontendMojo {\n\n    /**\n     * Bower arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"install\", property = \"frontend.bower.arguments\", required = false)\n    private String arguments;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.bower\", defaultValue = \"${skip.bower}\")\n    private boolean skip;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Parameter(property = \"frontend.bower.bowerInheritsProxyConfigFromMaven\", required = false, defaultValue = \"true\")\n    private boolean bowerInheritsProxyConfigFromMaven;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    protected synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        ProxyConfig proxyConfig = getProxyConfig();\n        factory.getBowerRunner(proxyConfig).execute(arguments, environmentVariables);\n    }\n\n    private ProxyConfig getProxyConfig() {", "right_context": "}\n\n}", "class_name": "BowerMojo", "return_type": "ProxyConfig", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DefaultArchiveExtractor implements ArchiveExtractor {\n\n    private static final Logger LOG = LoggerFactory.getLogger(DefaultArchiveExtractor.class);\n\n    private void prepDestination(File path, boolean directory) throws IOException {\n        if (directory) {\n            path.mkdirs();\n        } else {\n            if (!path.getParentFile().exists()) {\n                path.getParentFile().mkdirs();\n            }\n            if (!path.getParentFile().canWrite()) {\n                throw new AccessDeniedException(\n                        String.format(\"Could not get write permissions for '%s'\", path.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    @Override\n    public void extract(String archive, String destinationDirectory) throws ArchiveExtractionException {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Do multiple file system checks that should enable the plugin to work on any file system\n     * whether or not it's case sensitive or not.\n     *\n     * @param destPath\n     * @param destDir\n     * @return\n     */\n    private boolean startsWithPath(String destPath, String destDir) {\n        if (destPath.startsWith(destDir)) {\n            return true;\n        } else if (destDir.length() > destPath.length()) {\n            return false;\n        } else {\n            if (new File(destPath).exists() && !(new File(destPath.toLowerCase()).exists())) {\n                return false;\n            }\n\n            return destPath.toLowerCase().startsWith(destDir.toLowerCase());\n        }\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/333", "ground_truth": "\n        final File archiveFile = new File(archive);\n\n        try (FileInputStream fis = new FileInputStream(archiveFile)) {\n            if (\"msi\".equals(FileUtils.getExtension(archiveFile.getAbsolutePath()))) {\n                String command = \"msiexec /a \" + archiveFile.getAbsolutePath() + \" /qn TARGETDIR=\\\"\"\n                        + destinationDirectory + \"\\\"\";\n                Process child = Runtime.getRuntime().exec(command);\n                try {\n                    int result = child.waitFor();\n                    if (result != 0) {\n                        throw new ArchiveExtractionException(\n                                \"Could not extract \" + archiveFile.getAbsolutePath() + \"; return code \" + result);\n                    }\n                } catch (InterruptedException e) {\n                    throw new ArchiveExtractionException(\n                            \"Unexpected interruption of while waiting for extraction process\", e);\n                }\n            } else if (\"zip\".equals(FileUtils.getExtension(archiveFile.getAbsolutePath()))) {\n                Path destinationPath = Paths.get(destinationDirectory).normalize();\n                try (ZipFile zipFile = new ZipFile(archiveFile)) {\n                    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n                    while (entries.hasMoreElements()) {\n                        ZipEntry entry = entries.nextElement();\n                        final Path destPath = destinationPath.resolve(entry.getName()).normalize();\n                        if (!destPath.startsWith(destinationPath)) {\n                            throw new RuntimeException(\"Bad zip entry\");\n                        }\n                        prepDestination(destPath.toFile(), entry.isDirectory());\n                        if (!entry.isDirectory()) {\n                            InputStream in = null;\n                            OutputStream out = null;\n                            try {\n                                in = zipFile.getInputStream(entry);\n                                out = new BufferedOutputStream(Files.newOutputStream(destPath));\n                                IOUtils.copy(in, out);\n                            } finally {\n                                IOUtils.closeQuietly(in);\n                                IOUtils.closeQuietly(out);\n                            }\n                        }\n                    }\n                }\n            } else {\n                // TarArchiveInputStream can be constructed with a normal FileInputStream if\n                // we ever need to extract regular '.tar' files.\n                TarArchiveInputStream tarIn = null;\n                try {\n                    tarIn = new TarArchiveInputStream(new GzipCompressorInputStream(fis));\n\n                    TarArchiveEntry tarEntry = tarIn.getNextTarEntry();\n                    String canonicalDestinationDirectory = new File(destinationDirectory).getCanonicalPath();\n                    while (tarEntry != null) {\n                        // Create a file for this tarEntry\n                        final File destPath = new File(destinationDirectory, tarEntry.getName());\n                        prepDestination(destPath, tarEntry.isDirectory());\n\n                        if (!startsWithPath(destPath.getCanonicalPath(), canonicalDestinationDirectory)) {\n                            throw new IOException(\n                                    \"Expanding \" + tarEntry.getName() + \" would create file outside of \" + canonicalDestinationDirectory\n                            );\n                        }\n\n                        if (!tarEntry.isDirectory()) {\n                            destPath.createNewFile();\n                            boolean isExecutable = (tarEntry.getMode() & 0100) > 0;\n                            destPath.setExecutable(isExecutable);\n\n                            OutputStream out = null;\n                            try {\n                                out = new FileOutputStream(destPath);\n                                IOUtils.copy(tarIn, out);\n                            } finally {\n                                IOUtils.closeQuietly(out);\n                            }\n                        }\n                        tarEntry = tarIn.getNextTarEntry();\n                    }\n                } finally {\n                    IOUtils.closeQuietly(tarIn);\n                }\n            }\n        } catch (IOException e) {\n            throw new ArchiveExtractionException(\"Could not extract archive: '\"\n                    + archive\n                    + \"'\", e);\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "ArchiveExtractor.java"], "context_start_lineno": 0, "function_name": "extract", "left_context": "class DefaultArchiveExtractor implements ArchiveExtractor {\n\n    private static final Logger LOG = LoggerFactory.getLogger(DefaultArchiveExtractor.class);\n\n    private void prepDestination(File path, boolean directory) throws IOException {\n        if (directory) {\n            path.mkdirs();\n        } else {\n            if (!path.getParentFile().exists()) {\n                path.getParentFile().mkdirs();\n            }\n            if (!path.getParentFile().canWrite()) {\n                throw new AccessDeniedException(\n                        String.format(\"Could not get write permissions for '%s'\", path.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    @Override\n    public void extract(String archive, String destinationDirectory) throws ArchiveExtractionException {", "right_context": "}\n\n    /**\n     * Do multiple file system checks that should enable the plugin to work on any file system\n     * whether or not it's case sensitive or not.\n     *\n     * @param destPath\n     * @param destDir\n     * @return\n     */\n    private boolean startsWithPath(String destPath, String destDir) {\n        if (destPath.startsWith(destDir)) {\n            return true;\n        } else if (destDir.length() > destPath.length()) {\n            return false;\n        } else {\n            if (new File(destPath).exists() && !(new File(destPath.toLowerCase()).exists())) {\n                return false;\n            }\n\n            return destPath.toLowerCase().startsWith(destDir.toLowerCase());\n        }\n    }\n}", "class_name": "DefaultArchiveExtractor", "return_type": "void", "parameters": [{"type": "String", "name": "archive"}, {"type": "String", "name": "destinationDirectory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PnpmMojo extends AbstractFrontendMojo {\n\n    private static final String PNPM_REGISTRY_URL = \"npmRegistryURL\";\n\n    /**\n     * pnpm arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"install\", property = \"frontend.pnpm.arguments\", required = false)\n    private String arguments;\n\n    @Parameter(property = \"frontend.pnpm.pnpmInheritsProxyConfigFromMaven\", required = false, defaultValue = \"true\")\n    private boolean pnpmInheritsProxyConfigFromMaven;\n\n    /**\n     * Registry override, passed as the registry option during pnpm install if set.\n     */\n    @Parameter(property = PNPM_REGISTRY_URL, required = false, defaultValue = \"\")\n    private String pnpmRegistryURL;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.pnpm\", defaultValue = \"${skip.pnpm}\")\n    private boolean skip;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {<FILL_FUNCTION_BODY>}\n\n    private ProxyConfig getProxyConfig() {\n        if (pnpmInheritsProxyConfigFromMaven) {\n            return MojoUtils.getProxyConfig(session, decrypter);\n        } else {\n            getLog().info(\"pnpm not inheriting proxy config from Maven\");\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        }\n    }\n\n    private String getRegistryUrl() {\n        // check to see if overridden via `-D`, otherwise fallback to pom value\n        return System.getProperty(PNPM_REGISTRY_URL, pnpmRegistryURL);\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/334", "ground_truth": "\n        File packageJson = new File(workingDirectory, \"package.json\");\n        if (buildContext == null || buildContext.hasDelta(packageJson) || !buildContext.isIncremental()) {\n            ProxyConfig proxyConfig = getProxyConfig();\n            factory.getPnpmRunner(proxyConfig, getRegistryUrl()).execute(arguments, environmentVariables);\n        } else {\n            getLog().info(\"Skipping pnpm install as package.json unchanged\");\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "PnpmMojo.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class PnpmMojo extends AbstractFrontendMojo {\n\n    private static final String PNPM_REGISTRY_URL = \"npmRegistryURL\";\n\n    /**\n     * pnpm arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"install\", property = \"frontend.pnpm.arguments\", required = false)\n    private String arguments;\n\n    @Parameter(property = \"frontend.pnpm.pnpmInheritsProxyConfigFromMaven\", required = false, defaultValue = \"true\")\n    private boolean pnpmInheritsProxyConfigFromMaven;\n\n    /**\n     * Registry override, passed as the registry option during pnpm install if set.\n     */\n    @Parameter(property = PNPM_REGISTRY_URL, required = false, defaultValue = \"\")\n    private String pnpmRegistryURL;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.pnpm\", defaultValue = \"${skip.pnpm}\")\n    private boolean skip;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {", "right_context": "}\n\n    private ProxyConfig getProxyConfig() {\n        if (pnpmInheritsProxyConfigFromMaven) {\n            return MojoUtils.getProxyConfig(session, decrypter);\n        } else {\n            getLog().info(\"pnpm not inheriting proxy config from Maven\");\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        }\n    }\n\n    private String getRegistryUrl() {\n        // check to see if overridden via `-D`, otherwise fallback to pom value\n        return System.getProperty(PNPM_REGISTRY_URL, pnpmRegistryURL);\n    }\n}", "class_name": "PnpmMojo", "return_type": "void", "parameters": [{"type": "FrontendPluginFactory", "name": "factory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BunInstaller {\n\n    public static final String INSTALL_PATH = \"/bun\";\n\n    public static final String DEFAULT_BUN_DOWNLOAD_ROOT =\n            \"https://github.com/oven-sh/bun/releases/download/\";\n    private static final Object LOCK = new Object();\n\n    private String bunVersion, userName, password;\n\n    private final Logger logger;\n\n    private final InstallConfig config;\n\n    private final ArchiveExtractor archiveExtractor;\n\n    private final FileDownloader fileDownloader;\n\n    BunInstaller(InstallConfig config, ArchiveExtractor archiveExtractor, FileDownloader fileDownloader) {\n        this.logger = LoggerFactory.getLogger(getClass());\n        this.config = config;\n        this.archiveExtractor = archiveExtractor;\n        this.fileDownloader = fileDownloader;\n    }\n\n    public BunInstaller setBunVersion(String bunVersion) {\n        this.bunVersion = bunVersion;\n        return this;\n    }\n\n    public BunInstaller setUserName(String userName) {\n        this.userName = userName;\n        return this;\n    }\n\n    public BunInstaller setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n\n    public void install() throws InstallationException {\n        // use static lock object for a synchronized block\n        synchronized (LOCK) {\n            if (!bunIsAlreadyInstalled()) {\n                if (!this.bunVersion.startsWith(\"v\")) {\n                    this.logger.warn(\"Bun version does not start with naming convention 'v'.\");\n                }\n                if (this.config.getPlatform().isWindows()) {\n                    throw new InstallationException(\"Unable to install bun on windows!\");\n                } else {\n                    installBunDefault();\n                }\n            }\n        }\n    }\n\n    private boolean bunIsAlreadyInstalled() {<FILL_FUNCTION_BODY>}\n\n    private void installBunDefault() throws InstallationException {\n        try {\n\n            logger.info(\"Installing Bun version {}\", bunVersion);\n\n            String downloadUrl = createDownloadUrl();\n\n            CacheDescriptor cacheDescriptor = new CacheDescriptor(\"bun\", this.bunVersion,\n                    \"zip\");\n\n            File archive = this.config.getCacheResolver().resolve(cacheDescriptor);\n\n            downloadFileIfMissing(downloadUrl, archive, this.userName, this.password);\n\n            File installDirectory = getInstallDirectory();\n\n            // We need to delete the existing bun directory first so we clean out any old files, and\n            // so we can rename the package directory below.\n            try {\n                if (installDirectory.isDirectory()) {\n                    FileUtils.deleteDirectory(installDirectory);\n                }\n            } catch (IOException e) {\n                logger.warn(\"Failed to delete existing Bun installation.\");\n            }\n\n            try {\n                extractFile(archive, installDirectory);\n            } catch (ArchiveExtractionException e) {\n                if (e.getCause() instanceof EOFException) {\n                    this.logger.error(\"The archive file {} is corrupted and will be deleted. \"\n                            + \"Please try the build again.\", archive.getPath());\n                    archive.delete();\n                }\n\n                throw e;\n            }\n\n            // Search for the bun binary\n            File bunBinary =\n                    new File(getInstallDirectory(), File.separator + createBunTargetArchitecturePath() + File.separator + \"bun\");\n            if (!bunBinary.exists()) {\n                throw new FileNotFoundException(\n                        \"Could not find the downloaded bun binary in \" + bunBinary);\n            } else {\n                File destinationDirectory = getInstallDirectory();\n\n                File destination = new File(destinationDirectory, \"bun\");\n                this.logger.info(\"Copying bun binary from {} to {}\", bunBinary, destination);\n                if (destination.exists() && !destination.delete()) {\n                    throw new InstallationException(\"Could not install Bun: Was not allowed to delete \" + destination);\n                }\n                try {\n                    Files.move(bunBinary.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);\n                } catch (IOException e) {\n                    throw new InstallationException(\"Could not install Bun: Was not allowed to rename \"\n                            + bunBinary + \" to \" + destination);\n                }\n\n                if (!destination.setExecutable(true, false)) {\n                    throw new InstallationException(\n                            \"Could not install Bun: Was not allowed to make \" + destination + \" executable.\");\n                }\n\n                this.logger.info(\"Installed bun locally.\");\n            }\n        } catch (IOException e) {\n            throw new InstallationException(\"Could not install bun\", e);\n        } catch (DownloadException e) {\n            throw new InstallationException(\"Could not download bun\", e);\n        } catch (ArchiveExtractionException e) {\n            throw new InstallationException(\"Could not extract the bun archive\", e);\n        }\n    }\n\n    private String createDownloadUrl() {\n        String downloadUrl = String.format(\"%sbun-%s\", DEFAULT_BUN_DOWNLOAD_ROOT, bunVersion);\n        String extension = \"zip\";\n        String fileending = String.format(\"%s.%s\", createBunTargetArchitecturePath(), extension);\n\n        downloadUrl += fileending;\n        return downloadUrl;\n    }\n\n    private String createBunTargetArchitecturePath() {\n        OS os = OS.guess();\n        Architecture architecture = Architecture.guess();\n        String destOs = os.equals(OS.Linux) ? \"linux\" : os.equals(OS.Mac) ? \"darwin\" : null;\n        String destArc = architecture.equals(Architecture.x64) ? \"x64\" : architecture.equals(\n                Architecture.arm64) ? \"aarch64\" : null;\n        return String.format(\"%s-%s-%s\", INSTALL_PATH, destOs, destArc);\n    }\n\n    private File getInstallDirectory() {\n        File installDirectory = new File(this.config.getInstallDirectory(), \"/\");\n        if (!installDirectory.exists()) {\n            this.logger.info(\"Creating install directory {}\", installDirectory);\n            installDirectory.mkdirs();\n        }\n        return installDirectory;\n    }\n\n    private void extractFile(File archive, File destinationDirectory) throws ArchiveExtractionException {\n        this.logger.info(\"Unpacking {} into {}\", archive, destinationDirectory);\n        this.archiveExtractor.extract(archive.getPath(), destinationDirectory.getPath());\n    }\n\n    private void downloadFileIfMissing(String downloadUrl, File destination, String userName, String password)\n            throws DownloadException {\n        if (!destination.exists()) {\n            downloadFile(downloadUrl, destination, userName, password);\n        }\n    }\n\n    private void downloadFile(String downloadUrl, File destination, String userName, String password)\n            throws DownloadException {\n        this.logger.info(\"Downloading {} to {}\", downloadUrl, destination);\n        this.fileDownloader.download(downloadUrl, destination.getPath(), userName, password);\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/358", "ground_truth": "\n        try {\n            BunExecutorConfig executorConfig = new InstallBunExecutorConfig(config);\n            File bunFile = executorConfig.getBunPath();\n            if (bunFile.exists()) {\n                final String version =\n                        new BunExecutor(executorConfig, Arrays.asList(\"--version\"), null).executeAndGetResult(logger);\n\n                if (version.equals(this.bunVersion.replaceFirst(\"^v\", \"\"))) {\n                    this.logger.info(\"Bun {} is already installed.\", version);\n                    return true;\n                } else {\n                    this.logger.info(\"Bun {} was installed, but we need version {}\", version,\n                            this.bunVersion);\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } catch (ProcessExecutionException e) {\n            this.logger.warn(\"Unable to determine current bun version: {}\", e.getMessage());\n            return false;\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "BunInstaller.java"], "context_start_lineno": 0, "function_name": "bunIsAlreadyInstalled", "left_context": "class BunInstaller {\n\n    public static final String INSTALL_PATH = \"/bun\";\n\n    public static final String DEFAULT_BUN_DOWNLOAD_ROOT =\n            \"https://github.com/oven-sh/bun/releases/download/\";\n    private static final Object LOCK = new Object();\n\n    private String bunVersion, userName, password;\n\n    private final Logger logger;\n\n    private final InstallConfig config;\n\n    private final ArchiveExtractor archiveExtractor;\n\n    private final FileDownloader fileDownloader;\n\n    BunInstaller(InstallConfig config, ArchiveExtractor archiveExtractor, FileDownloader fileDownloader) {\n        this.logger = LoggerFactory.getLogger(getClass());\n        this.config = config;\n        this.archiveExtractor = archiveExtractor;\n        this.fileDownloader = fileDownloader;\n    }\n\n    public BunInstaller setBunVersion(String bunVersion) {\n        this.bunVersion = bunVersion;\n        return this;\n    }\n\n    public BunInstaller setUserName(String userName) {\n        this.userName = userName;\n        return this;\n    }\n\n    public BunInstaller setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n\n    public void install() throws InstallationException {\n        // use static lock object for a synchronized block\n        synchronized (LOCK) {\n            if (!bunIsAlreadyInstalled()) {\n                if (!this.bunVersion.startsWith(\"v\")) {\n                    this.logger.warn(\"Bun version does not start with naming convention 'v'.\");\n                }\n                if (this.config.getPlatform().isWindows()) {\n                    throw new InstallationException(\"Unable to install bun on windows!\");\n                } else {\n                    installBunDefault();\n                }\n            }\n        }\n    }\n\n    private boolean bunIsAlreadyInstalled() {", "right_context": "}\n\n    private void installBunDefault() throws InstallationException {\n        try {\n\n            logger.info(\"Installing Bun version {}\", bunVersion);\n\n            String downloadUrl = createDownloadUrl();\n\n            CacheDescriptor cacheDescriptor = new CacheDescriptor(\"bun\", this.bunVersion,\n                    \"zip\");\n\n            File archive = this.config.getCacheResolver().resolve(cacheDescriptor);\n\n            downloadFileIfMissing(downloadUrl, archive, this.userName, this.password);\n\n            File installDirectory = getInstallDirectory();\n\n            // We need to delete the existing bun directory first so we clean out any old files, and\n            // so we can rename the package directory below.\n            try {\n                if (installDirectory.isDirectory()) {\n                    FileUtils.deleteDirectory(installDirectory);\n                }\n            } catch (IOException e) {\n                logger.warn(\"Failed to delete existing Bun installation.\");\n            }\n\n            try {\n                extractFile(archive, installDirectory);\n            } catch (ArchiveExtractionException e) {\n                if (e.getCause() instanceof EOFException) {\n                    this.logger.error(\"The archive file {} is corrupted and will be deleted. \"\n                            + \"Please try the build again.\", archive.getPath());\n                    archive.delete();\n                }\n\n                throw e;\n            }\n\n            // Search for the bun binary\n            File bunBinary =\n                    new File(getInstallDirectory(), File.separator + createBunTargetArchitecturePath() + File.separator + \"bun\");\n            if (!bunBinary.exists()) {\n                throw new FileNotFoundException(\n                        \"Could not find the downloaded bun binary in \" + bunBinary);\n            } else {\n                File destinationDirectory = getInstallDirectory();\n\n                File destination = new File(destinationDirectory, \"bun\");\n                this.logger.info(\"Copying bun binary from {} to {}\", bunBinary, destination);\n                if (destination.exists() && !destination.delete()) {\n                    throw new InstallationException(\"Could not install Bun: Was not allowed to delete \" + destination);\n                }\n                try {\n                    Files.move(bunBinary.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);\n                } catch (IOException e) {\n                    throw new InstallationException(\"Could not install Bun: Was not allowed to rename \"\n                            + bunBinary + \" to \" + destination);\n                }\n\n                if (!destination.setExecutable(true, false)) {\n                    throw new InstallationException(\n                            \"Could not install Bun: Was not allowed to make \" + destination + \" executable.\");\n                }\n\n                this.logger.info(\"Installed bun locally.\");\n            }\n        } catch (IOException e) {\n            throw new InstallationException(\"Could not install bun\", e);\n        } catch (DownloadException e) {\n            throw new InstallationException(\"Could not download bun\", e);\n        } catch (ArchiveExtractionException e) {\n            throw new InstallationException(\"Could not extract the bun archive\", e);\n        }\n    }\n\n    private String createDownloadUrl() {\n        String downloadUrl = String.format(\"%sbun-%s\", DEFAULT_BUN_DOWNLOAD_ROOT, bunVersion);\n        String extension = \"zip\";\n        String fileending = String.format(\"%s.%s\", createBunTargetArchitecturePath(), extension);\n\n        downloadUrl += fileending;\n        return downloadUrl;\n    }\n\n    private String createBunTargetArchitecturePath() {\n        OS os = OS.guess();\n        Architecture architecture = Architecture.guess();\n        String destOs = os.equals(OS.Linux) ? \"linux\" : os.equals(OS.Mac) ? \"darwin\" : null;\n        String destArc = architecture.equals(Architecture.x64) ? \"x64\" : architecture.equals(\n                Architecture.arm64) ? \"aarch64\" : null;\n        return String.format(\"%s-%s-%s\", INSTALL_PATH, destOs, destArc);\n    }\n\n    private File getInstallDirectory() {\n        File installDirectory = new File(this.config.getInstallDirectory(), \"/\");\n        if (!installDirectory.exists()) {\n            this.logger.info(\"Creating install directory {}\", installDirectory);\n            installDirectory.mkdirs();\n        }\n        return installDirectory;\n    }\n\n    private void extractFile(File archive, File destinationDirectory) throws ArchiveExtractionException {\n        this.logger.info(\"Unpacking {} into {}\", archive, destinationDirectory);\n        this.archiveExtractor.extract(archive.getPath(), destinationDirectory.getPath());\n    }\n\n    private void downloadFileIfMissing(String downloadUrl, File destination, String userName, String password)\n            throws DownloadException {\n        if (!destination.exists()) {\n            downloadFile(downloadUrl, destination, userName, password);\n        }\n    }\n\n    private void downloadFile(String downloadUrl, File destination, String userName, String password)\n            throws DownloadException {\n        this.logger.info(\"Downloading {} to {}\", downloadUrl, destination);\n        this.fileDownloader.download(downloadUrl, destination.getPath(), userName, password);\n    }\n}", "class_name": "BunInstaller", "return_type": "boolean", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EmberMojo extends AbstractFrontendMojo {\n\n    /**\n     * Grunt arguments. Default is empty (runs just the \"grunt\" command).\n     */\n    @Parameter(property = \"frontend.ember.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by grunt.\n     * If this is set then files in the directory will be checked for\n     * modifications before running grunt.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by grunt. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.ember\", defaultValue = \"${skip.ember}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        if (shouldExecute()) {\n            factory.getEmberRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after ember: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping ember as no modified files in \" + srcdir);\n        }\n    }\n\n    private boolean shouldExecute() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/391", "ground_truth": "\n\n        if (triggerfiles == null || triggerfiles.isEmpty()) {\n            triggerfiles = Arrays.asList(new File(workingDirectory, \"Gruntfile.js\"));\n        }\n\n        return MojoUtils.shouldExecute(buildContext, triggerfiles, srcdir);\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "EmberMojo.java"], "context_start_lineno": 0, "function_name": "shouldExecute", "left_context": "class EmberMojo extends AbstractFrontendMojo {\n\n    /**\n     * Grunt arguments. Default is empty (runs just the \"grunt\" command).\n     */\n    @Parameter(property = \"frontend.ember.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by grunt.\n     * If this is set then files in the directory will be checked for\n     * modifications before running grunt.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by grunt. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.ember\", defaultValue = \"${skip.ember}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        if (shouldExecute()) {\n            factory.getEmberRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after ember: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping ember as no modified files in \" + srcdir);\n        }\n    }\n\n    private boolean shouldExecute() {", "right_context": "}\n\n}", "class_name": "EmberMojo", "return_type": "boolean", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GruntMojo extends AbstractFrontendMojo {\n\n    /**\n     * Grunt arguments. Default is empty (runs just the \"grunt\" command).\n     */\n    @Parameter(property = \"frontend.grunt.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * Defaults to Gruntfile.js in the {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by grunt.\n     * If this is set then files in the directory will be checked for\n     * modifications before running grunt.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by grunt. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.grunt\", defaultValue = \"${skip.grunt}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        if (shouldExecute()) {\n            factory.getGruntRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after grunt: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping grunt as no modified files in \" + srcdir);\n        }\n    }\n\n    private boolean shouldExecute() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/400", "ground_truth": "\n        if (triggerfiles == null || triggerfiles.isEmpty()) {\n            triggerfiles = Arrays.asList(new File(workingDirectory, \"Gruntfile.js\"));\n        }\n\n        return MojoUtils.shouldExecute(buildContext, triggerfiles, srcdir);\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "GruntMojo.java"], "context_start_lineno": 0, "function_name": "shouldExecute", "left_context": "class GruntMojo extends AbstractFrontendMojo {\n\n    /**\n     * Grunt arguments. Default is empty (runs just the \"grunt\" command).\n     */\n    @Parameter(property = \"frontend.grunt.arguments\")\n    private String arguments;\n\n    /**\n     * Files that should be checked for changes, in addition to the srcdir files.\n     * Defaults to Gruntfile.js in the {@link #workingDirectory}.\n     */\n    @Parameter(property = \"triggerfiles\")\n    private List<File> triggerfiles;\n\n    /**\n     * The directory containing front end files that will be processed by grunt.\n     * If this is set then files in the directory will be checked for\n     * modifications before running grunt.\n     */\n    @Parameter(property = \"srcdir\")\n    private File srcdir;\n\n    /**\n     * The directory where front end files will be output by grunt. If this is\n     * set then they will be refreshed so they correctly show as modified in\n     * Eclipse.\n     */\n    @Parameter(property = \"outputdir\")\n    private File outputdir;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.grunt\", defaultValue = \"${skip.grunt}\")\n    private boolean skip;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        if (shouldExecute()) {\n            factory.getGruntRunner().execute(arguments, environmentVariables);\n\n            if (outputdir != null) {\n                getLog().info(\"Refreshing files after grunt: \" + outputdir);\n                buildContext.refresh(outputdir);\n            }\n        } else {\n            getLog().info(\"Skipping grunt as no modified files in \" + srcdir);\n        }\n    }\n\n    private boolean shouldExecute() {", "right_context": "}\n\n}", "class_name": "GruntMojo", "return_type": "boolean", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Proxy {\n        public final String id;\n        public final String protocol;\n        public final String host;\n        public final int port;\n        public final String username;\n        public final String password;\n\n        public final String nonProxyHosts;\n\n        public Proxy(String id, String protocol, String host, int port, String username, String password, String nonProxyHosts) {\n            this.host = host;\n            this.id = id;\n            this.protocol = protocol;\n            this.port = port;\n            this.username = username;\n            this.password = password;\n            this.nonProxyHosts = nonProxyHosts;\n        }\n\n        public boolean useAuthentication(){\n            return username != null && !username.isEmpty();\n        }\n\n        public URI getUri() {<FILL_FUNCTION_BODY>}\n\n        public boolean isSecure(){\n            return \"https\".equals(protocol);\n        }\n\n        public boolean isNonProxyHost(String host) {\n            if (host != null && nonProxyHosts != null && nonProxyHosts.length() > 0) {\n                for (StringTokenizer tokenizer = new StringTokenizer(nonProxyHosts, \"|\"); tokenizer.hasMoreTokens(); ) {\n                    String pattern = tokenizer.nextToken();\n                    pattern = pattern.replace(\".\", \"\\\\.\").replace(\"*\", \".*\");\n                    if (host.matches(pattern)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * As per https://docs.npmjs.com/misc/config#noproxy , npm expects a comma (`,`) separated list but\n         * maven settings.xml usually specifies the no proxy hosts as a bar (`|`) separated list (see\n         * http://maven.apache.org/guides/mini/guide-proxies.html) .\n         *\n         * We could do the conversion here but npm seems to accept the bar separated list regardless\n         * of what the documentation says so we do no conversion for now.\n         * @return\n         */\n        public String getNonProxyHosts() {\n            return nonProxyHosts;\n        }\n\n        @Override\n        public String toString() {\n            return id + \"{\" +\n                    \"protocol='\" + protocol + '\\'' +\n                    \", host='\" + host + '\\'' +\n                    \", port=\" + port +\n                    \", nonProxyHosts='\" + nonProxyHosts + '\\'' +\n                    (useAuthentication()? \", with username/passport authentication\" : \"\") +\n                    '}';\n        }\n    }", "metadata": {"task_id": "eirslett_frontend-maven-plugin/405", "ground_truth": "\n            String authentication = useAuthentication() ? username + \":\" + password : null;\n            try {\n                // Proxies should be schemed with http, even if the protocol is https\n                return new URI(\"http\", authentication, host, port, null, null, null);\n            } catch (URISyntaxException e) {\n                throw new ProxyConfigException(\"Invalid proxy settings\", e);\n            }\n        ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-plugin-core", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "lib", "ProxyConfig.java"], "context_start_lineno": 0, "function_name": "getUri", "left_context": "class Proxy {\n        public final String id;\n        public final String protocol;\n        public final String host;\n        public final int port;\n        public final String username;\n        public final String password;\n\n        public final String nonProxyHosts;\n\n        public Proxy(String id, String protocol, String host, int port, String username, String password, String nonProxyHosts) {\n            this.host = host;\n            this.id = id;\n            this.protocol = protocol;\n            this.port = port;\n            this.username = username;\n            this.password = password;\n            this.nonProxyHosts = nonProxyHosts;\n        }\n\n        public boolean useAuthentication(){\n            return username != null && !username.isEmpty();\n        }\n\n        public URI getUri() {", "right_context": "}\n\n        public boolean isSecure(){\n            return \"https\".equals(protocol);\n        }\n\n        public boolean isNonProxyHost(String host) {\n            if (host != null && nonProxyHosts != null && nonProxyHosts.length() > 0) {\n                for (StringTokenizer tokenizer = new StringTokenizer(nonProxyHosts, \"|\"); tokenizer.hasMoreTokens(); ) {\n                    String pattern = tokenizer.nextToken();\n                    pattern = pattern.replace(\".\", \"\\\\.\").replace(\"*\", \".*\");\n                    if (host.matches(pattern)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * As per https://docs.npmjs.com/misc/config#noproxy , npm expects a comma (`,`) separated list but\n         * maven settings.xml usually specifies the no proxy hosts as a bar (`|`) separated list (see\n         * http://maven.apache.org/guides/mini/guide-proxies.html) .\n         *\n         * We could do the conversion here but npm seems to accept the bar separated list regardless\n         * of what the documentation says so we do no conversion for now.\n         * @return\n         */\n        public String getNonProxyHosts() {\n            return nonProxyHosts;\n        }\n\n        @Override\n        public String toString() {\n            return id + \"{\" +\n                    \"protocol='\" + protocol + '\\'' +\n                    \", host='\" + host + '\\'' +\n                    \", port=\" + port +\n                    \", nonProxyHosts='\" + nonProxyHosts + '\\'' +\n                    (useAuthentication()? \", with username/passport authentication\" : \"\") +\n                    '}';\n        }\n    }", "class_name": "Proxy", "return_type": "URI", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/BowerMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (bowerInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"bower not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/MojoUtils.java\n// --------------------------------------------------\n// static ProxyConfig getProxyConfig(MavenSession mavenSession,SettingsDecrypter decrypter){\n//   if (mavenSession == null || mavenSession.getSettings() == null || mavenSession.getSettings().getProxies() == null || mavenSession.getSettings().getProxies().isEmpty()) {\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n//  else {\n//     final List<Proxy> mavenProxies=mavenSession.getSettings().getProxies();\n//     final List<ProxyConfig.Proxy> proxies=new ArrayList<ProxyConfig.Proxy>(mavenProxies.size());\n//     for (    Proxy mavenProxy : mavenProxies) {\n//       if (mavenProxy.isActive()) {\n//         mavenProxy=decryptProxy(mavenProxy,decrypter);\n//         proxies.add(new ProxyConfig.Proxy(mavenProxy.getId(),mavenProxy.getProtocol(),mavenProxy.getHost(),mavenProxy.getPort(),mavenProxy.getUsername(),mavenProxy.getPassword(),mavenProxy.getNonProxyHosts()));\n//       }\n//     }\n//     LOGGER.info(\"Found proxies: {}\",proxies);\n//     return new ProxyConfig(proxies);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/NpmMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (npmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"npm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/NpxMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (npmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"npm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/PnpmMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (pnpmInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(session,decrypter);\n//   }\n//  else {\n//     getLog().info(\"pnpm not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// frontend-maven-plugin/frontend-maven-plugin/src/main/java/com/github/eirslett/maven/plugins/frontend/mojo/YarnMojo.java\n// --------------------------------------------------\n// private ProxyConfig getProxyConfig(){\n//   if (this.yarnInheritsProxyConfigFromMaven) {\n//     return MojoUtils.getProxyConfig(this.session,this.decrypter);\n//   }\n//  else {\n//     getLog().info(\"yarn not inheriting proxy config from Maven\");\n//     return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BunMojo extends AbstractFrontendMojo {\n\n    private static final String NPM_REGISTRY_URL = \"npmRegistryURL\";\n\n    /**\n     * bun arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"\", property = \"frontend.bun.arguments\", required = false)\n    private String arguments;\n\n    @Parameter(property = \"frontend.bun.bunInheritsProxyConfigFromMaven\", required = false,\n            defaultValue = \"true\")\n    private boolean bunInheritsProxyConfigFromMaven;\n\n    /**\n     * Registry override, passed as the registry option during npm install if set.\n     */\n    @Parameter(property = NPM_REGISTRY_URL, required = false, defaultValue = \"\")\n    private String npmRegistryURL;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.bun\", defaultValue = \"${skip.bun}\")\n    private boolean skip;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        File packageJson = new File(this.workingDirectory, \"package.json\");\n        if (this.buildContext == null || this.buildContext.hasDelta(packageJson)\n                || !this.buildContext.isIncremental()) {\n            ProxyConfig proxyConfig = getProxyConfig();\n            factory.getBunRunner(proxyConfig, getRegistryUrl()).execute(this.arguments,\n                    this.environmentVariables);\n        } else {\n            getLog().info(\"Skipping bun install as package.json unchanged\");\n        }\n    }\n\n    private ProxyConfig getProxyConfig() {<FILL_FUNCTION_BODY>}\n\n    private String getRegistryUrl() {\n        // check to see if overridden via `-D`, otherwise fallback to pom value\n        return System.getProperty(NPM_REGISTRY_URL, this.npmRegistryURL);\n    }\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/454", "ground_truth": "\n        if (this.bunInheritsProxyConfigFromMaven) {\n            return MojoUtils.getProxyConfig(this.session, this.decrypter);\n        } else {\n            getLog().info(\"bun not inheriting proxy config from Maven\");\n            return new ProxyConfig(Collections.<ProxyConfig.Proxy>emptyList());\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "BunMojo.java"], "context_start_lineno": 0, "function_name": "getProxyConfig", "left_context": "class BunMojo extends AbstractFrontendMojo {\n\n    private static final String NPM_REGISTRY_URL = \"npmRegistryURL\";\n\n    /**\n     * bun arguments. Default is \"install\".\n     */\n    @Parameter(defaultValue = \"\", property = \"frontend.bun.arguments\", required = false)\n    private String arguments;\n\n    @Parameter(property = \"frontend.bun.bunInheritsProxyConfigFromMaven\", required = false,\n            defaultValue = \"true\")\n    private boolean bunInheritsProxyConfigFromMaven;\n\n    /**\n     * Registry override, passed as the registry option during npm install if set.\n     */\n    @Parameter(property = NPM_REGISTRY_URL, required = false, defaultValue = \"\")\n    private String npmRegistryURL;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    @Component\n    private BuildContext buildContext;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.bun\", defaultValue = \"${skip.bun}\")\n    private boolean skip;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    @Override\n    public synchronized void execute(FrontendPluginFactory factory) throws TaskRunnerException {\n        File packageJson = new File(this.workingDirectory, \"package.json\");\n        if (this.buildContext == null || this.buildContext.hasDelta(packageJson)\n                || !this.buildContext.isIncremental()) {\n            ProxyConfig proxyConfig = getProxyConfig();\n            factory.getBunRunner(proxyConfig, getRegistryUrl()).execute(this.arguments,\n                    this.environmentVariables);\n        } else {\n            getLog().info(\"Skipping bun install as package.json unchanged\");\n        }\n    }\n\n    private ProxyConfig getProxyConfig() {", "right_context": "}\n\n    private String getRegistryUrl() {\n        // check to see if overridden via `-D`, otherwise fallback to pom value\n        return System.getProperty(NPM_REGISTRY_URL, this.npmRegistryURL);\n    }\n}", "class_name": "BunMojo", "return_type": "ProxyConfig", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InstallNodeAndYarnMojo extends AbstractFrontendMojo {\n\n    private static final String YARNRC_YAML_FILE_NAME = \".yarnrc.yml\";\n\n    /**\n     * Where to download Node.js binary from. Defaults to https://nodejs.org/dist/\n     */\n    @Parameter(property = \"nodeDownloadRoot\", required = false)\n    private String nodeDownloadRoot;\n\n    /**\n     * Where to download Yarn binary from. Defaults to https://github.com/yarnpkg/yarn/releases/download/...\n     */\n    @Parameter(property = \"yarnDownloadRoot\", required = false,\n        defaultValue = YarnInstaller.DEFAULT_YARN_DOWNLOAD_ROOT)\n    private String yarnDownloadRoot;\n\n    /**\n     * The version of Node.js to install. IMPORTANT! Most Node.js version names start with 'v', for example\n     * 'v0.10.18'\n     */\n    @Parameter(property = \"nodeVersion\", required = true)\n    private String nodeVersion;\n\n    /**\n     * The version of Yarn to install. IMPORTANT! Most Yarn names start with 'v', for example 'v0.15.0'.\n     */\n    @Parameter(property = \"yarnVersion\", required = true)\n    private String yarnVersion;\n\n    /**\n     * Server Id for download username and password\n     */\n    @Parameter(property = \"serverId\", defaultValue = \"\")\n    private String serverId;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.installyarn\", alias = \"skip.installyarn\", defaultValue = \"${skip.installyarn}\")\n    private boolean skip;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    /**\n     * Checks whether a .yarnrc.yml file exists at the project root (in multi-module builds, it will be the Reactor project)\n     *\n     * @return true if the .yarnrc.yml file exists, false otherwise\n     */\n    private boolean isYarnrcYamlFilePresent() {\n        Stream<File> filesToCheck = Stream.of(\n                new File(session.getCurrentProject().getBasedir(), YARNRC_YAML_FILE_NAME),\n                new File(session.getRequest().getMultiModuleProjectDirectory(), YARNRC_YAML_FILE_NAME),\n                new File(session.getExecutionRootDirectory(), YARNRC_YAML_FILE_NAME)\n        );\n\n        return filesToCheck\n                .anyMatch(File::exists);\n    }\n\n    @Override\n    public void execute(FrontendPluginFactory factory) throws InstallationException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "eirslett_frontend-maven-plugin/496", "ground_truth": "\n        ProxyConfig proxyConfig = MojoUtils.getProxyConfig(this.session, this.decrypter);\n        Server server = MojoUtils.decryptServer(this.serverId, this.session, this.decrypter);\n        if (null != server) {\n            factory.getNodeInstaller(proxyConfig).setNodeDownloadRoot(this.nodeDownloadRoot)\n                .setNodeVersion(this.nodeVersion).setPassword(server.getPassword())\n                .setUserName(server.getUsername()).install();\n            factory.getYarnInstaller(proxyConfig).setYarnDownloadRoot(this.yarnDownloadRoot)\n                .setYarnVersion(this.yarnVersion).setUserName(server.getUsername())\n                .setPassword(server.getPassword()).setIsYarnBerry(isYarnrcYamlFilePresent()).install();\n        } else {\n            factory.getNodeInstaller(proxyConfig).setNodeDownloadRoot(this.nodeDownloadRoot)\n                .setNodeVersion(this.nodeVersion).install();\n            factory.getYarnInstaller(proxyConfig).setYarnDownloadRoot(this.yarnDownloadRoot)\n                .setYarnVersion(this.yarnVersion).setIsYarnBerry(isYarnrcYamlFilePresent()).install();\n        }\n    ", "fpath_tuple": ["eirslett_frontend-maven-plugin", "frontend-maven-plugin", "frontend-maven-plugin", "src", "main", "java", "com", "github", "eirslett", "maven", "plugins", "frontend", "mojo", "InstallNodeAndYarnMojo.java"], "context_start_lineno": 0, "function_name": "execute", "left_context": "class InstallNodeAndYarnMojo extends AbstractFrontendMojo {\n\n    private static final String YARNRC_YAML_FILE_NAME = \".yarnrc.yml\";\n\n    /**\n     * Where to download Node.js binary from. Defaults to https://nodejs.org/dist/\n     */\n    @Parameter(property = \"nodeDownloadRoot\", required = false)\n    private String nodeDownloadRoot;\n\n    /**\n     * Where to download Yarn binary from. Defaults to https://github.com/yarnpkg/yarn/releases/download/...\n     */\n    @Parameter(property = \"yarnDownloadRoot\", required = false,\n        defaultValue = YarnInstaller.DEFAULT_YARN_DOWNLOAD_ROOT)\n    private String yarnDownloadRoot;\n\n    /**\n     * The version of Node.js to install. IMPORTANT! Most Node.js version names start with 'v', for example\n     * 'v0.10.18'\n     */\n    @Parameter(property = \"nodeVersion\", required = true)\n    private String nodeVersion;\n\n    /**\n     * The version of Yarn to install. IMPORTANT! Most Yarn names start with 'v', for example 'v0.15.0'.\n     */\n    @Parameter(property = \"yarnVersion\", required = true)\n    private String yarnVersion;\n\n    /**\n     * Server Id for download username and password\n     */\n    @Parameter(property = \"serverId\", defaultValue = \"\")\n    private String serverId;\n\n    @Parameter(property = \"session\", defaultValue = \"${session}\", readonly = true)\n    private MavenSession session;\n\n    /**\n     * Skips execution of this mojo.\n     */\n    @Parameter(property = \"skip.installyarn\", alias = \"skip.installyarn\", defaultValue = \"${skip.installyarn}\")\n    private boolean skip;\n\n    @Component(role = SettingsDecrypter.class)\n    private SettingsDecrypter decrypter;\n\n    @Override\n    protected boolean skipExecution() {\n        return this.skip;\n    }\n\n    /**\n     * Checks whether a .yarnrc.yml file exists at the project root (in multi-module builds, it will be the Reactor project)\n     *\n     * @return true if the .yarnrc.yml file exists, false otherwise\n     */\n    private boolean isYarnrcYamlFilePresent() {\n        Stream<File> filesToCheck = Stream.of(\n                new File(session.getCurrentProject().getBasedir(), YARNRC_YAML_FILE_NAME),\n                new File(session.getRequest().getMultiModuleProjectDirectory(), YARNRC_YAML_FILE_NAME),\n                new File(session.getExecutionRootDirectory(), YARNRC_YAML_FILE_NAME)\n        );\n\n        return filesToCheck\n                .anyMatch(File::exists);\n    }\n\n    @Override\n    public void execute(FrontendPluginFactory factory) throws InstallationException {", "right_context": "}\n\n}", "class_name": "InstallNodeAndYarnMojo", "return_type": "void", "parameters": [{"type": "FrontendPluginFactory", "name": "factory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JacksonElement<T extends JsonNode> implements JsonEngine.Element {\n    protected T element;\n\n    JacksonElement(T element){\n        this.element = element;\n    }\n\n    static JsonEngine.Element wrap(JsonNode node) {\n        if(node == null || node.isNull()){\n            return new JacksonPrimitive(NullNode.getInstance());\n        } else if(node.isArray()){\n            return new JacksonArray((ArrayNode) node);\n        } else if(node.isObject()){\n            return new JacksonObject((ObjectNode)node);\n        } else if (node.isValueNode()){\n            return new JacksonPrimitive((ValueNode)node);\n        }\n        return new JacksonPrimitive(NullNode.getInstance());\n    }\n\n    @Override\n    public JsonEngine.Object getAsJsonObject() {\n        if(element.isObject()) {\n            return new JacksonObject((ObjectNode) element);\n        }\n        throw new IllegalStateException(\"Not an object\");\n    }\n\n    @Override\n    public boolean isJsonNull() {\n        return element instanceof NullNode;\n    }\n\n    @Override\n    public JsonEngine.Primitive getAsJsonPrimitive() {\n        return new JacksonPrimitive((ValueNode) element);\n    }\n\n    @Override\n    public JsonEngine.Array getAsJsonArray() {\n        if(!element.isArray()){\n            throw new IllegalStateException(\"Not an Array\");\n        }\n        return new JacksonArray((ArrayNode)element);\n    }\n\n    @Override\n    public float getAsFloat() {\n        if(!element.isFloat()){\n            throw new NumberFormatException(\"not a float\");\n        }\n        return element.floatValue();\n    }\n\n    @Override\n    public double getAsDouble() {\n        if(!element.isNumber()){\n            throw new NumberFormatException(\"not a double\");\n        }\n        return element.asDouble();\n    }\n\n    @Override\n    public String getAsString() {\n        return element.asText();\n    }\n\n    @Override\n    public long getAsLong() {\n        if(!element.isLong() && !element.isIntegralNumber()){\n            throw new NumberFormatException(\"not a long\");\n        }\n        return element.asLong();\n    }\n\n    @Override\n    public int getAsInt() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public boolean getAsBoolean() {\n        return element.asBoolean();\n    }\n\n    @Override\n    public BigInteger getAsBigInteger() {\n        if(!element.isIntegralNumber()) {\n            throw new NumberFormatException(\"Not a integer\");\n        }\n        return element.bigIntegerValue();\n    }\n\n    @Override\n    public BigDecimal getAsBigDecimal() {\n        if(!element.isNumber()){\n            throw new NumberFormatException(\"Not a decimal\");\n        }\n        return element.decimalValue();\n    }\n\n    @Override\n    public JsonEngine.Primitive getAsPrimitive() {\n        if(element.isValueNode()){\n            return new JacksonPrimitive((ValueNode) element);\n        }\n        throw new JSONException(\"Not a value type\");\n    }\n\n    @Override\n    public boolean isJsonArray() {\n        return element.isArray();\n    }\n\n    @Override\n    public boolean isJsonPrimitive() {\n        return element.isValueNode();\n    }\n\n    @Override\n    public boolean isJsonObject() {\n        return element.isObject();\n    }\n\n    @Override\n    public <T> T getEngineElement() {\n        return (T)element;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {return true;}\n        if (o == null || getClass() != o.getClass()) {return false;}\n        JacksonElement<?> that = (JacksonElement<?>) o;\n        return Objects.equals(element, that.element);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(element);\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/44", "ground_truth": "\n        if(!element.isIntegralNumber()) {\n            throw new NumberFormatException(\"Not a number\");\n        }\n        return element.asInt();\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest-modules-jackson", "src", "main", "java", "kong", "unirest", "modules", "jackson", "JacksonElement.java"], "context_start_lineno": 0, "function_name": "getAsInt", "left_context": "class JacksonElement<T extends JsonNode> implements JsonEngine.Element {\n    protected T element;\n\n    JacksonElement(T element){\n        this.element = element;\n    }\n\n    static JsonEngine.Element wrap(JsonNode node) {\n        if(node == null || node.isNull()){\n            return new JacksonPrimitive(NullNode.getInstance());\n        } else if(node.isArray()){\n            return new JacksonArray((ArrayNode) node);\n        } else if(node.isObject()){\n            return new JacksonObject((ObjectNode)node);\n        } else if (node.isValueNode()){\n            return new JacksonPrimitive((ValueNode)node);\n        }\n        return new JacksonPrimitive(NullNode.getInstance());\n    }\n\n    @Override\n    public JsonEngine.Object getAsJsonObject() {\n        if(element.isObject()) {\n            return new JacksonObject((ObjectNode) element);\n        }\n        throw new IllegalStateException(\"Not an object\");\n    }\n\n    @Override\n    public boolean isJsonNull() {\n        return element instanceof NullNode;\n    }\n\n    @Override\n    public JsonEngine.Primitive getAsJsonPrimitive() {\n        return new JacksonPrimitive((ValueNode) element);\n    }\n\n    @Override\n    public JsonEngine.Array getAsJsonArray() {\n        if(!element.isArray()){\n            throw new IllegalStateException(\"Not an Array\");\n        }\n        return new JacksonArray((ArrayNode)element);\n    }\n\n    @Override\n    public float getAsFloat() {\n        if(!element.isFloat()){\n            throw new NumberFormatException(\"not a float\");\n        }\n        return element.floatValue();\n    }\n\n    @Override\n    public double getAsDouble() {\n        if(!element.isNumber()){\n            throw new NumberFormatException(\"not a double\");\n        }\n        return element.asDouble();\n    }\n\n    @Override\n    public String getAsString() {\n        return element.asText();\n    }\n\n    @Override\n    public long getAsLong() {\n        if(!element.isLong() && !element.isIntegralNumber()){\n            throw new NumberFormatException(\"not a long\");\n        }\n        return element.asLong();\n    }\n\n    @Override\n    public int getAsInt() {", "right_context": "}\n\n    @Override\n    public boolean getAsBoolean() {\n        return element.asBoolean();\n    }\n\n    @Override\n    public BigInteger getAsBigInteger() {\n        if(!element.isIntegralNumber()) {\n            throw new NumberFormatException(\"Not a integer\");\n        }\n        return element.bigIntegerValue();\n    }\n\n    @Override\n    public BigDecimal getAsBigDecimal() {\n        if(!element.isNumber()){\n            throw new NumberFormatException(\"Not a decimal\");\n        }\n        return element.decimalValue();\n    }\n\n    @Override\n    public JsonEngine.Primitive getAsPrimitive() {\n        if(element.isValueNode()){\n            return new JacksonPrimitive((ValueNode) element);\n        }\n        throw new JSONException(\"Not a value type\");\n    }\n\n    @Override\n    public boolean isJsonArray() {\n        return element.isArray();\n    }\n\n    @Override\n    public boolean isJsonPrimitive() {\n        return element.isValueNode();\n    }\n\n    @Override\n    public boolean isJsonObject() {\n        return element.isObject();\n    }\n\n    @Override\n    public <T> T getEngineElement() {\n        return (T)element;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {return true;}\n        if (o == null || getClass() != o.getClass()) {return false;}\n        JacksonElement<?> that = (JacksonElement<?>) o;\n        return Objects.equals(element, that.element);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(element);\n    }\n}", "class_name": "JacksonElement", "return_type": "int", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Headers {\n\n    private static final long serialVersionUID = 71310341388734766L;\n    private List<Header> headers = new ArrayList<>();\n\n    public Headers() {\n    }\n\n    public Headers(Collection<Entry> entries) {\n        entries.forEach(e -> add(e.name, e.value));\n    }\n\n    /**\n     * Add a header element\n     * @param name the name of the header\n     * @param value the value for the header\n     */\n    public void add(String name, String value) {\n        add(name, () -> value);\n    }\n\n    /**\n     * Add a header element with a supplier which will be evaluated on request\n     * @param name the name of the header\n     * @param value the value for the header\n     */\n    public void add(String name, Supplier<String> value) {\n        if (Objects.nonNull(name)) {\n            headers.add(new Entry(name, value));\n        }\n    }\n\n    /**\n     * Replace a header value. If there are multiple instances it will overwrite all of them\n     * @param name the name of the header\n     * @param value the value for the header\n     */\n    public void replace(String name, String value) {\n        remove(name);\n        add(name, value);\n    }\n\n    private void remove(String name) {\n        headers.removeIf(h -> isName(h, name));\n    }\n\n    /**\n     * Get the number of header keys.\n     * @return the size of the header keys\n     */\n    public int size() {\n        return headers.stream().map(Header::getName).collect(toSet()).size();\n    }\n\n    /**\n     * Get all the values for a header name\n     * @param name name of the header element\n     * @return a list of values\n     */\n    public List<String> get(String name) {\n        return headers.stream()\n                .filter(h -> isName(h, name))\n                .map(Header::getValue)\n                .collect(toList());\n    }\n\n    /**\n     * Add a bunch of headers at once\n     * @param header a header\n     */\n    public void putAll(Headers header) {\n        this.headers.addAll(header.headers);\n    }\n\n    /**\n     * Check if a header is present\n     * @param name a header\n     * @return if the headers contain this name.\n     */\n    public boolean containsKey(String name) {\n        return this.headers.stream().anyMatch(h -> isName(h, name));\n    }\n\n    /**\n     * Clear the headers!\n     */\n    public void clear() {\n        this.headers.clear();\n    }\n\n    /**\n     * Get the first header value for a name\n     * @param key the name of the header\n     * @return the first value\n     */\n    public String getFirst(String key) {\n        return headers\n                .stream()\n                .filter(h -> isName(h, key))\n                .findFirst()\n                .map(Header::getValue)\n                .orElse(\"\");\n    }\n\n    /**\n     * Get all of the headers\n     * @return all the headers, in order\n     */\n    public List<Header> all() {\n        return new ArrayList<>(this.headers);\n    }\n\n    private boolean isName(Header h, String name) {\n        return Util.nullToEmpty(name).equalsIgnoreCase(h.getName());\n    }\n\n    void remove(String key, String value) {\n        List<Header> header = headers.stream().\n                filter(h -> key.equalsIgnoreCase(h.getName()) && value.equalsIgnoreCase(h.getValue()))\n                .collect(toList());\n        headers.removeAll(header);\n    }\n\n    /**\n     * @return list all headers like this: <pre>Content-Length: 42\n     * Cache-Control: no-cache\n     * ...</pre>\n     */\n    @Override\n    public String toString() {\n       final StringJoiner sb = new StringJoiner(System.lineSeparator());\n        headers.forEach(header -> sb.add(header.toString()));\n        return sb.toString();\n    }\n\n    public void cookie(Cookie cookie) {\n        headers.add(new Entry(\"cookie\", cookie.toString()));\n    }\n\n    public void cookie(Collection<Cookie> cookies) {\n        cookies.forEach(this::cookie);\n    }\n\n    @Override\n    public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(headers);\n    }\n\n    public void setBasicAuth(String username, String password) {\n        this.replace(\"Authorization\", Util.toBasicAuthValue(username, password));\n    }\n\n    public void accepts(String value) {\n        add(HeaderNames.ACCEPT, value);\n    }\n\n    public void add(Map<String, String> headerMap) {\n        if (headerMap != null) {\n            for (Map.Entry<String, String> entry : headerMap.entrySet()) {\n                add(entry.getKey(), entry.getValue());\n            }\n        }\n    }\n\n    /**\n     * Replace all headers from a given map.\n     * @param headerMap the map of headers\n     */\n    public void replace(Map<String, String> headerMap) {\n        if (headerMap != null) {\n            headerMap.forEach(this::replace);\n        }\n    }\n\n    static class Entry implements Header {\n\n        private final String name;\n        private final Supplier<String> value;\n\n        public Entry(String name, String value) {\n            this.name = name;\n            this.value = () -> value;\n        }\n\n        public Entry(String name, Supplier<String> value) {\n            this.name = name;\n            this.value = value == null ? () -> null : value;\n        }\n\n        @Override\n        public String getName() {\n            return name;\n        }\n\n        @Override\n        public String getValue() {\n            String s = value.get();\n            if(s == null){\n                return \"\";\n            }\n            return s;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o)  { return true; }\n            if (o == null || getClass() != o.getClass()) { return false; }\n            Entry entry = (Entry) o;\n            return Objects.equals(name, entry.name) &&\n                    Objects.equals(value.get(), entry.value.get());\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(name, value.get());\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"%s: %s\",getName(), getValue());\n        }\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/57", "ground_truth": "\n        if (this == o) { return true;}\n        if (o == null || getClass() != o.getClass()) { return false; }\n        Headers headers1 = (Headers) o;\n        return Objects.equals(headers, headers1.headers);\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "Headers.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class Headers {\n\n    private static final long serialVersionUID = 71310341388734766L;\n    private List<Header> headers = new ArrayList<>();\n\n    public Headers() {\n    }\n\n    public Headers(Collection<Entry> entries) {\n        entries.forEach(e -> add(e.name, e.value));\n    }\n\n    /**\n     * Add a header element\n     * @param name the name of the header\n     * @param value the value for the header\n     */\n    public void add(String name, String value) {\n        add(name, () -> value);\n    }\n\n    /**\n     * Add a header element with a supplier which will be evaluated on request\n     * @param name the name of the header\n     * @param value the value for the header\n     */\n    public void add(String name, Supplier<String> value) {\n        if (Objects.nonNull(name)) {\n            headers.add(new Entry(name, value));\n        }\n    }\n\n    /**\n     * Replace a header value. If there are multiple instances it will overwrite all of them\n     * @param name the name of the header\n     * @param value the value for the header\n     */\n    public void replace(String name, String value) {\n        remove(name);\n        add(name, value);\n    }\n\n    private void remove(String name) {\n        headers.removeIf(h -> isName(h, name));\n    }\n\n    /**\n     * Get the number of header keys.\n     * @return the size of the header keys\n     */\n    public int size() {\n        return headers.stream().map(Header::getName).collect(toSet()).size();\n    }\n\n    /**\n     * Get all the values for a header name\n     * @param name name of the header element\n     * @return a list of values\n     */\n    public List<String> get(String name) {\n        return headers.stream()\n                .filter(h -> isName(h, name))\n                .map(Header::getValue)\n                .collect(toList());\n    }\n\n    /**\n     * Add a bunch of headers at once\n     * @param header a header\n     */\n    public void putAll(Headers header) {\n        this.headers.addAll(header.headers);\n    }\n\n    /**\n     * Check if a header is present\n     * @param name a header\n     * @return if the headers contain this name.\n     */\n    public boolean containsKey(String name) {\n        return this.headers.stream().anyMatch(h -> isName(h, name));\n    }\n\n    /**\n     * Clear the headers!\n     */\n    public void clear() {\n        this.headers.clear();\n    }\n\n    /**\n     * Get the first header value for a name\n     * @param key the name of the header\n     * @return the first value\n     */\n    public String getFirst(String key) {\n        return headers\n                .stream()\n                .filter(h -> isName(h, key))\n                .findFirst()\n                .map(Header::getValue)\n                .orElse(\"\");\n    }\n\n    /**\n     * Get all of the headers\n     * @return all the headers, in order\n     */\n    public List<Header> all() {\n        return new ArrayList<>(this.headers);\n    }\n\n    private boolean isName(Header h, String name) {\n        return Util.nullToEmpty(name).equalsIgnoreCase(h.getName());\n    }\n\n    void remove(String key, String value) {\n        List<Header> header = headers.stream().\n                filter(h -> key.equalsIgnoreCase(h.getName()) && value.equalsIgnoreCase(h.getValue()))\n                .collect(toList());\n        headers.removeAll(header);\n    }\n\n    /**\n     * @return list all headers like this: <pre>Content-Length: 42\n     * Cache-Control: no-cache\n     * ...</pre>\n     */\n    @Override\n    public String toString() {\n       final StringJoiner sb = new StringJoiner(System.lineSeparator());\n        headers.forEach(header -> sb.add(header.toString()));\n        return sb.toString();\n    }\n\n    public void cookie(Cookie cookie) {\n        headers.add(new Entry(\"cookie\", cookie.toString()));\n    }\n\n    public void cookie(Collection<Cookie> cookies) {\n        cookies.forEach(this::cookie);\n    }\n\n    @Override\n    public boolean equals(Object o) {", "right_context": "}\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(headers);\n    }\n\n    public void setBasicAuth(String username, String password) {\n        this.replace(\"Authorization\", Util.toBasicAuthValue(username, password));\n    }\n\n    public void accepts(String value) {\n        add(HeaderNames.ACCEPT, value);\n    }\n\n    public void add(Map<String, String> headerMap) {\n        if (headerMap != null) {\n            for (Map.Entry<String, String> entry : headerMap.entrySet()) {\n                add(entry.getKey(), entry.getValue());\n            }\n        }\n    }\n\n    /**\n     * Replace all headers from a given map.\n     * @param headerMap the map of headers\n     */\n    public void replace(Map<String, String> headerMap) {\n        if (headerMap != null) {\n            headerMap.forEach(this::replace);\n        }\n    }\n\n    static class Entry implements Header {\n\n        private final String name;\n        private final Supplier<String> value;\n\n        public Entry(String name, String value) {\n            this.name = name;\n            this.value = () -> value;\n        }\n\n        public Entry(String name, Supplier<String> value) {\n            this.name = name;\n            this.value = value == null ? () -> null : value;\n        }\n\n        @Override\n        public String getName() {\n            return name;\n        }\n\n        @Override\n        public String getValue() {\n            String s = value.get();\n            if(s == null){\n                return \"\";\n            }\n            return s;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o)  { return true; }\n            if (o == null || getClass() != o.getClass()) { return false; }\n            Entry entry = (Entry) o;\n            return Objects.equals(name, entry.name) &&\n                    Objects.equals(value.get(), entry.value.get());\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(name, value.get());\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"%s: %s\",getName(), getValue());\n        }\n    }\n}", "class_name": "Headers", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONObject.java\n// --------------------------------------------------\n// /** \n//  * get element as a enum value or null if the value cannot be mapped\n//  * @param < T > the type of enum you want\n//  * @param enumClass a enum class\n//  * @param key the key element to operate on\n//  * @return the value as a enum of T\n//  */\n// public <T extends Enum<T>>T optEnum(Class<T> enumClass,String key){\n//   return optEnum(enumClass,key,null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONObject.java\n// --------------------------------------------------\n// /** \n//  * get element as a enum value or a default value if the value cannot be mapped\n//  * @param < T > the type of enum you want\n//  * @param enumClass a enum class\n//  * @param key the key element to operate on\n//  * @param defaultValue the default value to return if the index or value type are not valid\n//  * @return the value as a enum of T\n//  */\n// public <T extends Enum<T>>T optEnum(Class<T> enumClass,String key,T defaultValue){\n//   return getOrDefault(() -> getEnum(enumClass,key),defaultValue);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONObject.java\n// --------------------------------------------------\n// private <T extends Number>T tryNumber(Supplier<T> supplier,String key){\n//   try {\n//     return supplier.get();\n//   }\n//  catch (  NumberFormatException e) {\n//     throw new JSONException(\"JSONObject[\\\"%s\\\"] is not a number.\",key);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JsonEngine.java\n// --------------------------------------------------\n// <T>T fromJson(Element obj,Class<T> mapClass);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-bdd-tests/src/test/java/BehaviorTests/AsGenericTypeTest.java\n// --------------------------------------------------\n// public T getSomeTees(){\n//   return someTees;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-gson/src/main/java/kong/unirest/modules/gson/GsonElement.java\n// --------------------------------------------------\n// @Override public <T>T getEngineElement(){\n//   return (T)element;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-jackson/src/main/java/kong/unirest/modules/jackson/JacksonElement.java\n// --------------------------------------------------\n// @Override public <T>T getEngineElement(){\n//   return (T)element;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONArray.java\n// --------------------------------------------------\n// /** \n//  * get a enum value based on name from a specific index\n//  * @param enumClass the enum type\n//  * @param index the index\n//  * @param < T > the type of enum\n//  * @return a enum value\n//  * @throws JSONException if the index is out of bounds or the value cannot be converted to the enum type\n//  */\n// public <T extends Enum<T>>T getEnum(Class<T> enumClass,int index) throws JSONException {\n//   String raw=getElement(index).getAsString();\n//   try {\n//     return Enum.valueOf(enumClass,raw);\n//   }\n//  catch (  IllegalArgumentException e) {\n//     throw new JSONException(\"JSONArray[%s] is not an enum of type \\\"%s\\\".\",index,enumClass.getSimpleName());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONArray.java\n// --------------------------------------------------\n// private <T>T getOrDefault(Supplier<T> supplier,T defaultValue){\n//   try {\n//     return supplier.get();\n//   }\n//  catch (  Exception e) {\n//     return defaultValue;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONObject.java\n// --------------------------------------------------\n// /** \n//  * get element as a enum value\n//  * @param < T > the type of enum you want\n//  * @param enumClass a enum class\n//  * @param key the key element to operate on\n//  * @return the value as a enum of T\n//  * @throws JSONException  if it does not map to a enum of T or the key does not exist\n//  */\n// public <T extends Enum<T>>T getEnum(Class<T> enumClass,String key) throws JSONException {\n//   try {\n//     String v=getProperty(key).getAsString();\n//     return Enum.valueOf(enumClass,v);\n//   }\n//  catch (  IllegalArgumentException e) {\n//     throw new JSONException(\"JSONObject[\\\"%s\\\"] is not an enum of type \\\"%s\\\".\",key,enumClass.getSimpleName());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JSONObject.java\n// --------------------------------------------------\n// private <T>T getOrDefault(Supplier<T> supplier,T defaultValue){\n//   try {\n//     return supplier.get();\n//   }\n//  catch (  Exception e) {\n//     return defaultValue;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/json/JsonEngine.java\n// --------------------------------------------------\n// <T>T getEngineElement();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/BodyPart.java\n// --------------------------------------------------\n// public T getValue(){\n//   return value;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/Client.java\n// --------------------------------------------------\n// /** \n//  * @param < T > the underlying client\n//  * @return the underlying client if this instance is wrapping another library.\n//  */\n// <T>T getClient();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/MockResponse.java\n// --------------------------------------------------\n// @Override public T getBody(){\n//   return body;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/BaseResponse.java\n// --------------------------------------------------\n// @Override public abstract T getBody();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/BasicResponse.java\n// --------------------------------------------------\n// @Override public T getBody(){\n//   return body;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/FailedResponse.java\n// --------------------------------------------------\n// /** \n//  * @return null, because there was no response\n//  */\n// @Override public T getBody(){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/HttpResponse.java\n// --------------------------------------------------\n// /** \n//  * @return the body\n//  */\n// T getBody();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/test/java/kong/unirest/core/MockResponse.java\n// --------------------------------------------------\n// @Override public T getBody(){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ObjectResponse<T> extends BaseResponse<T> {\n    private final T body;\n    private final ObjectMapper om;\n    private String rawBody;\n\n    ObjectResponse(ObjectMapper om, RawResponse response, Class<? extends T> to) {\n        super(response);\n        this.om = om;\n        this.body = readBody(response)\n                .map(s -> getBody(s, e -> om.readValue(e, to)))\n                .orElse(null);\n    }\n\n    ObjectResponse(ObjectMapper om, RawResponse response, GenericType<? extends T> to){\n        super(response);\n        this.om = om;\n        this.body = readBody(response)\n                .map(s -> getBody(s, e -> om.readValue(e, to)))\n                .orElse(null);\n    }\n\n    private Optional<String> readBody(RawResponse response) {\n        if(!response.hasContent()){\n            return Optional.empty();\n        }\n        String s = response.getContentAsString();\n        if(response.getStatus() >= 400){\n            rawBody = s;\n        }\n        return Optional.of(s);\n    }\n\n    private T getBody(String b, Function<String, T> func){<FILL_FUNCTION_BODY>}\n\n    @Override\n    public T getBody() {\n        return body;\n    }\n\n    @Override\n    protected String getRawBody() {\n        return rawBody;\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/79", "ground_truth": "\n        try {\n            return func.apply(b);\n        } catch (RuntimeException e) {\n            setParsingException(b, e);\n            return null;\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "ObjectResponse.java"], "context_start_lineno": 0, "function_name": "getBody", "left_context": "class ObjectResponse<T> extends BaseResponse<T> {\n    private final T body;\n    private final ObjectMapper om;\n    private String rawBody;\n\n    ObjectResponse(ObjectMapper om, RawResponse response, Class<? extends T> to) {\n        super(response);\n        this.om = om;\n        this.body = readBody(response)\n                .map(s -> getBody(s, e -> om.readValue(e, to)))\n                .orElse(null);\n    }\n\n    ObjectResponse(ObjectMapper om, RawResponse response, GenericType<? extends T> to){\n        super(response);\n        this.om = om;\n        this.body = readBody(response)\n                .map(s -> getBody(s, e -> om.readValue(e, to)))\n                .orElse(null);\n    }\n\n    private Optional<String> readBody(RawResponse response) {\n        if(!response.hasContent()){\n            return Optional.empty();\n        }\n        String s = response.getContentAsString();\n        if(response.getStatus() >= 400){\n            rawBody = s;\n        }\n        return Optional.of(s);\n    }\n\n    private T getBody(String b, Function<String, T> func){", "right_context": "}\n\n    @Override\n    public T getBody() {\n        return body;\n    }\n\n    @Override\n    protected String getRawBody() {\n        return rawBody;\n    }\n}", "class_name": "ObjectResponse", "return_type": "T", "parameters": [{"type": "String", "name": "b"}, {"type": "Function<String,T>", "name": "func"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JacksonArray extends JacksonElement<ArrayNode> implements JsonEngine.Array {\n    JacksonArray(ArrayNode element) {\n        super(element);\n    }\n\n    @Override\n    public int size() {\n        return element.size();\n    }\n\n    @Override\n    public JsonEngine.Element get(int index) {\n        validateIndex(index);\n        return wrap(element.get(index));\n    }\n\n    private void validateIndex(int index) {\n        if(element.size() < index +1){\n            throw new IndexOutOfBoundsException();\n        }\n    }\n\n\n    @Override\n    public JsonEngine.Element remove(int index) {\n        return wrap(element.remove(index));\n    }\n\n    @Override\n    public JsonEngine.Element put(int index, Number number) {\n        if(number instanceof Integer){\n            element.insert(index, (Integer) number);\n        } else if (number instanceof Double){\n            element.insert(index, (Double)number);\n        } else if (number instanceof BigInteger) {\n            element.insert(index, (BigInteger) number);\n        } else if (number instanceof Float){\n            element.insert(index, (Float)number);\n        } else if(number instanceof BigDecimal) {\n            element.insert(index, (BigDecimal) number);\n        }\n        return this;\n    }\n\n    @Override\n    public JsonEngine.Element put(int index, String value) {\n        element.insert(index, value);\n        return this;\n    }\n\n    @Override\n    public JsonEngine.Element put(int index, Boolean value) {\n        element.insert(index, value);\n        return this;\n    }\n\n    @Override\n    public void add(JsonEngine.Element obj) {\n        if(obj == null){\n            element.add(NullNode.getInstance());\n            return;\n        }\n        element.add((JsonNode) obj.getEngineElement());\n    }\n\n    @Override\n    public void set(int index, JsonEngine.Element o) {\n        if(o == null){\n            element.set(index, NullNode.getInstance());\n        } else {\n            element.set(index, (JsonNode)o.getEngineElement());\n        }\n    }\n\n    @Override\n    public void add(Number number) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void add(String str) {\n        element.add(str);\n    }\n\n    @Override\n    public void add(Boolean bool) {\n        element.add(bool);\n    }\n\n    @Override\n    public String join(String token) {\n        return StreamSupport.stream(element.spliterator(), false)\n                .map(String::valueOf)\n                .collect(Collectors.joining(token));\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/81", "ground_truth": "\n        if(number instanceof Integer){\n            element.add((Integer) number);\n        } else if (number instanceof Double){\n            element.add((Double)number);\n        } else if (number instanceof Long){\n            element.add((Long)number);\n        } else if (number instanceof BigInteger) {\n            element.add((BigInteger) number);\n        } else if (number instanceof Float){\n            element.add((Float)number);\n        } else if(number instanceof BigDecimal) {\n            element.add((BigDecimal) number);\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest-modules-jackson", "src", "main", "java", "kong", "unirest", "modules", "jackson", "JacksonArray.java"], "context_start_lineno": 0, "function_name": "add", "left_context": "class JacksonArray extends JacksonElement<ArrayNode> implements JsonEngine.Array {\n    JacksonArray(ArrayNode element) {\n        super(element);\n    }\n\n    @Override\n    public int size() {\n        return element.size();\n    }\n\n    @Override\n    public JsonEngine.Element get(int index) {\n        validateIndex(index);\n        return wrap(element.get(index));\n    }\n\n    private void validateIndex(int index) {\n        if(element.size() < index +1){\n            throw new IndexOutOfBoundsException();\n        }\n    }\n\n\n    @Override\n    public JsonEngine.Element remove(int index) {\n        return wrap(element.remove(index));\n    }\n\n    @Override\n    public JsonEngine.Element put(int index, Number number) {\n        if(number instanceof Integer){\n            element.insert(index, (Integer) number);\n        } else if (number instanceof Double){\n            element.insert(index, (Double)number);\n        } else if (number instanceof BigInteger) {\n            element.insert(index, (BigInteger) number);\n        } else if (number instanceof Float){\n            element.insert(index, (Float)number);\n        } else if(number instanceof BigDecimal) {\n            element.insert(index, (BigDecimal) number);\n        }\n        return this;\n    }\n\n    @Override\n    public JsonEngine.Element put(int index, String value) {\n        element.insert(index, value);\n        return this;\n    }\n\n    @Override\n    public JsonEngine.Element put(int index, Boolean value) {\n        element.insert(index, value);\n        return this;\n    }\n\n    @Override\n    public void add(JsonEngine.Element obj) {\n        if(obj == null){\n            element.add(NullNode.getInstance());\n            return;\n        }\n        element.add((JsonNode) obj.getEngineElement());\n    }\n\n    @Override\n    public void set(int index, JsonEngine.Element o) {\n        if(o == null){\n            element.set(index, NullNode.getInstance());\n        } else {\n            element.set(index, (JsonNode)o.getEngineElement());\n        }\n    }\n\n    @Override\n    public void add(Number number) {", "right_context": "}\n\n    @Override\n    public void add(String str) {\n        element.add(str);\n    }\n\n    @Override\n    public void add(Boolean bool) {\n        element.add(bool);\n    }\n\n    @Override\n    public String join(String token) {\n        return StreamSupport.stream(element.spliterator(), false)\n                .map(String::valueOf)\n                .collect(Collectors.joining(token));\n    }\n}", "class_name": "JacksonArray", "return_type": "void", "parameters": [{"type": "Number", "name": "number"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-bdd-tests/src/test/java/BehaviorTests/TestUtil.java\n// --------------------------------------------------\n// public static InputStream rezInput(String name){\n//   try {\n//     return MockServer.class.getResourceAsStream(name);\n//   }\n//  catch (  Exception e) {\n//     throw new RuntimeException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/MonitoringInputStream.java\n// --------------------------------------------------\n// private InputStream wrap(InputStream is,RawResponse rawResponse){\n//   try {\n//     if (is.available() > 0 && \"gzip\".equalsIgnoreCase(rawResponse.getContentType())) {\n//       return new GZIPInputStream(is);\n//     }\n//  else {\n//       return is;\n//     }\n//   }\n//  catch (  Exception e) {\n//     throw new UnirestException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/MockRawResponse.java\n// --------------------------------------------------\n// @Override public InputStream getContent(){\n//   return new ByteArrayInputStream(response.getBytes());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/RawResponse.java\n// --------------------------------------------------\n// /** \n//  * Returns the body content of the response as a InputStream. Like most InputStreams it can only be read once. If you read the response though some other method like getContentAsBytes() or getBodyAsString() it will read this method and consume the InputStream\n//  * @return the content\n//  */\n// InputStream getContent();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/java/JavaResponse.java\n// --------------------------------------------------\n// @Override public InputStream getContent(){\n//   try {\n//     InputStream body=response.body();\n//     if (isGzipped(getEncoding()) && !(body instanceof GZIPInputStream)) {\n//       body=new GZIPInputStream(body);\n//     }\n//     return body;\n//   }\n//  catch (  EOFException e) {\n//     return new ByteArrayInputStream(new byte[]{});\n//   }\n// catch (  Exception e) {\n//     throw new UnirestException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/test/java/kong/unirest/core/TestRawResponse.java\n// --------------------------------------------------\n// @Override public InputStream getContent(){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FileResponse extends BaseResponse<File> {\n    private File body;\n\n    public FileResponse(RawResponse r, String path, ProgressMonitor downloadMonitor, CopyOption... copyOptions) {\n        super(r);\n        try {\n            Path target = Paths.get(path);\n            InputStream content = getContent(r, downloadMonitor, target);\n            Files.copy(content, target, copyOptions);\n            body = target.toFile();\n        } catch (Exception e) {\n            throw new UnrecoverableException(e);\n        }\n    }\n\n    private InputStream getContent(RawResponse r, ProgressMonitor downloadMonitor, Path target) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public File getBody() {\n        return body;\n    }\n\n    @Override\n    protected String getRawBody() {\n        return null;\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/82", "ground_truth": "\n        if(downloadMonitor == null){\n            return r.getContent();\n        }\n        return new MonitoringInputStream(r.getContent(), downloadMonitor, target, r);\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "FileResponse.java"], "context_start_lineno": 0, "function_name": "getContent", "left_context": "class FileResponse extends BaseResponse<File> {\n    private File body;\n\n    public FileResponse(RawResponse r, String path, ProgressMonitor downloadMonitor, CopyOption... copyOptions) {\n        super(r);\n        try {\n            Path target = Paths.get(path);\n            InputStream content = getContent(r, downloadMonitor, target);\n            Files.copy(content, target, copyOptions);\n            body = target.toFile();\n        } catch (Exception e) {\n            throw new UnrecoverableException(e);\n        }\n    }\n\n    private InputStream getContent(RawResponse r, ProgressMonitor downloadMonitor, Path target) {", "right_context": "}\n\n    @Override\n    public File getBody() {\n        return body;\n    }\n\n    @Override\n    protected String getRawBody() {\n        return null;\n    }\n}", "class_name": "FileResponse", "return_type": "InputStream", "parameters": [{"type": "RawResponse", "name": "r"}, {"type": "ProgressMonitor", "name": "downloadMonitor"}, {"type": "Path", "name": "target"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/BodyMatcher.java\n// --------------------------------------------------\n// /** \n//  * indicates if the Matcher succeeded in matching the body\n//  * @param body the list of body parts\n//  * @return MatchStatus indicating if the Matcher succeeded in matching the body\n//  */\n// MatchStatus matches(List<String> body);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/FieldMatcher.java\n// --------------------------------------------------\n// @Override public MatchStatus matches(List<String> body) throws AssertionError {\n//   List<String> missing=new ArrayList<>();\n//   boolean pass=true;\n//   for (  Map.Entry<String,String> r : formParams.entrySet()) {\n//     String expectedParam=r.getKey() + \"=\" + URLEncoder.encode(r.getValue());\n//     if (body.stream().noneMatch(p -> Objects.equals(expectedParam,p))) {\n//       missing.add(expectedParam);\n//       pass=false;\n//     }\n//   }\n//   return new MatchStatus(pass,description(pass,missing));\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EqualsBodyMatcher implements BodyMatcher {\n    private final String expected;\n\n    public EqualsBodyMatcher(String body) {\n        this.expected = body;\n    }\n\n    @Override\n    public MatchStatus matches(List<String> body) throws AssertionError {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "Kong_unirest-java/99", "ground_truth": "\n        return new MatchStatus(body.size() == 1 && Objects.equals(expected, body.get(0)), expected);\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest-modules-mocks", "src", "main", "java", "kong", "unirest", "core", "EqualsBodyMatcher.java"], "context_start_lineno": 0, "function_name": "matches", "left_context": "class EqualsBodyMatcher implements BodyMatcher {\n    private final String expected;\n\n    public EqualsBodyMatcher(String body) {\n        this.expected = body;\n    }\n\n    @Override\n    public MatchStatus matches(List<String> body) throws AssertionError {", "right_context": "}\n\n}", "class_name": "EqualsBodyMatcher", "return_type": "MatchStatus", "parameters": [{"type": "List<String>", "name": "body"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/WebSocketResponse.java\n// --------------------------------------------------\n// /** \n//  * @return the ws future\n//  */\n// public CompletableFuture<WebSocket> socket(){\n//   return webSocketFuture;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MockWebSocket implements WebSocket {\n    private SocketSet remoteSocketSet;\n\n    private CompletableFuture<WebSocket> sendToOtherSide(BiConsumer<WebSocket, Listener> consumer){<FILL_FUNCTION_BODY>}\n\n    @Override\n    public CompletableFuture<WebSocket> sendText(CharSequence data, boolean last) {\n        return sendToOtherSide((s,l) -> l.onText(s, data, last));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendBinary(ByteBuffer data, boolean last) {\n        return sendToOtherSide((s,l) -> l.onBinary(s, data, last));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendPing(ByteBuffer message) {\n        return sendToOtherSide((s,l) -> l.onPing(s, message));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendPong(ByteBuffer message) {\n        return sendToOtherSide((s,l) -> l.onPong(s, message));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendClose(int statusCode, String reason) {\n        return sendToOtherSide((s,l) -> l.onClose(s, statusCode, reason));\n    }\n\n    @Override\n    public void request(long n) {\n\n    }\n\n    @Override\n    public String getSubprotocol() {\n        return null;\n    }\n\n    @Override\n    public boolean isOutputClosed() {\n        return false;\n    }\n\n    @Override\n    public boolean isInputClosed() {\n        return false;\n    }\n\n    @Override\n    public void abort() {\n\n    }\n\n    public void init(SocketSet otherSide) {\n        this.remoteSocketSet = otherSide;\n        otherSide.open();\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/119", "ground_truth": "\n        if(remoteSocketSet == null){\n            throw new UnirestAssertion(\"Socket is not initialized. Make sure to call init(SocketSet) with the remote set.\");\n        }\n        consumer.accept(remoteSocketSet.getSocket(), remoteSocketSet.getListener());\n        return CompletableFuture.completedFuture(this);\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest-modules-mocks", "src", "main", "java", "kong", "unirest", "core", "MockWebSocket.java"], "context_start_lineno": 0, "function_name": "sendToOtherSide", "left_context": "class MockWebSocket implements WebSocket {\n    private SocketSet remoteSocketSet;\n\n    private CompletableFuture<WebSocket> sendToOtherSide(BiConsumer<WebSocket, Listener> consumer){", "right_context": "}\n\n    @Override\n    public CompletableFuture<WebSocket> sendText(CharSequence data, boolean last) {\n        return sendToOtherSide((s,l) -> l.onText(s, data, last));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendBinary(ByteBuffer data, boolean last) {\n        return sendToOtherSide((s,l) -> l.onBinary(s, data, last));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendPing(ByteBuffer message) {\n        return sendToOtherSide((s,l) -> l.onPing(s, message));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendPong(ByteBuffer message) {\n        return sendToOtherSide((s,l) -> l.onPong(s, message));\n    }\n\n    @Override\n    public CompletableFuture<WebSocket> sendClose(int statusCode, String reason) {\n        return sendToOtherSide((s,l) -> l.onClose(s, statusCode, reason));\n    }\n\n    @Override\n    public void request(long n) {\n\n    }\n\n    @Override\n    public String getSubprotocol() {\n        return null;\n    }\n\n    @Override\n    public boolean isOutputClosed() {\n        return false;\n    }\n\n    @Override\n    public boolean isInputClosed() {\n        return false;\n    }\n\n    @Override\n    public void abort() {\n\n    }\n\n    public void init(SocketSet otherSide) {\n        this.remoteSocketSet = otherSide;\n        otherSide.open();\n    }\n}", "class_name": "MockWebSocket", "return_type": "CompletableFuture<WebSocket>", "parameters": [{"type": "BiConsumer<WebSocket,Listener>", "name": "consumer"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JavaResponse extends RawResponseBase {\n    private final HttpResponse<InputStream> response;\n\n    public JavaResponse(HttpResponse<InputStream> response, Config config, HttpRequestSummary summary) {\n        super(config, summary);\n        this.response = response;\n    }\n\n    @Override\n    public int getStatus() {\n        return response.statusCode();\n    }\n\n    @Override\n    public String getStatusText() {\n        return \"\";\n    }\n\n    @Override\n    public Headers getHeaders() {\n        Headers h = new Headers();\n        response.headers().map()\n                .entrySet()\n                .forEach(e -> {\n                    e.getValue().forEach(v -> h.add(e.getKey(), v));\n                });\n        return h;\n    }\n\n    @Override\n    public InputStream getContent() {\n        try {\n            InputStream body = response.body();\n            if (isGzipped(getEncoding()) && !(body instanceof GZIPInputStream)) {\n                body = new GZIPInputStream(body);\n            }\n            return body;\n        } catch (EOFException e){\n            return new ByteArrayInputStream(new byte[]{});\n        } catch (Exception e){\n            throw new UnirestException(e);\n        }\n    }\n\n    @Override\n    public byte[] getContentAsBytes() {\n        if (!hasContent()) {\n            return new byte[0];\n        }\n        try {\n            InputStream is = getContent();\n            return getBytes(is);\n        } catch (IOException e2) {\n            throw new UnirestException(e2);\n        }\n    }\n\n    private static byte[] getBytes(InputStream is) throws IOException {\n        try {\n            int len;\n            int size = 1024;\n            byte[] buf;\n\n            if (is instanceof ByteArrayInputStream) {\n                size = is.available();\n                buf = new byte[size];\n                len = is.read(buf, 0, size);\n            } else {\n                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                buf = new byte[size];\n                while ((len = is.read(buf, 0, size)) != -1) {\n                    bos.write(buf, 0, len);\n                }\n                buf = bos.toByteArray();\n            }\n            return buf;\n        } finally {\n            is.close();\n        }\n    }\n\n    private static boolean isGzipped(String value) {\n        return \"gzip\".equalsIgnoreCase(value.toLowerCase().trim());\n    }\n\n    @Override\n    public String getContentAsString() {\n        return getContentAsString(null);\n    }\n\n    @Override\n    public String getContentAsString(String charset) {\n        if (!hasContent()) {\n            return \"\";\n        }\n        try {\n            String charSet = getCharset(charset);\n            return new String(getContentAsBytes(), charSet);\n        } catch (IOException e) {\n            throw new UnirestException(e);\n        }\n    }\n\n    private String getCharset(String charset) {\n        if (charset == null || charset.trim().isEmpty()) {\n            return getCharSet();\n        }\n        return charset;\n    }\n\n    @Override\n    public InputStreamReader getContentReader() {\n        return new InputStreamReader(getContent());\n    }\n\n    @Override\n    public boolean hasContent() {\n        return response.body() != null;\n    }\n\n    @Override\n    public String getContentType() {\n        return response.headers()\n                .firstValue(CONTENT_TYPE)\n                .orElse(\"\");\n    }\n\n    @Override\n    public String getEncoding() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Kong_unirest-java/128", "ground_truth": "\n        if (hasContent()) {\n            String s = response.headers().firstValue(HeaderNames.CONTENT_ENCODING)\n                    .orElse(\"\");\n            return s;\n        }\n        return \"\";\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "java", "JavaResponse.java"], "context_start_lineno": 0, "function_name": "getEncoding", "left_context": "class JavaResponse extends RawResponseBase {\n    private final HttpResponse<InputStream> response;\n\n    public JavaResponse(HttpResponse<InputStream> response, Config config, HttpRequestSummary summary) {\n        super(config, summary);\n        this.response = response;\n    }\n\n    @Override\n    public int getStatus() {\n        return response.statusCode();\n    }\n\n    @Override\n    public String getStatusText() {\n        return \"\";\n    }\n\n    @Override\n    public Headers getHeaders() {\n        Headers h = new Headers();\n        response.headers().map()\n                .entrySet()\n                .forEach(e -> {\n                    e.getValue().forEach(v -> h.add(e.getKey(), v));\n                });\n        return h;\n    }\n\n    @Override\n    public InputStream getContent() {\n        try {\n            InputStream body = response.body();\n            if (isGzipped(getEncoding()) && !(body instanceof GZIPInputStream)) {\n                body = new GZIPInputStream(body);\n            }\n            return body;\n        } catch (EOFException e){\n            return new ByteArrayInputStream(new byte[]{});\n        } catch (Exception e){\n            throw new UnirestException(e);\n        }\n    }\n\n    @Override\n    public byte[] getContentAsBytes() {\n        if (!hasContent()) {\n            return new byte[0];\n        }\n        try {\n            InputStream is = getContent();\n            return getBytes(is);\n        } catch (IOException e2) {\n            throw new UnirestException(e2);\n        }\n    }\n\n    private static byte[] getBytes(InputStream is) throws IOException {\n        try {\n            int len;\n            int size = 1024;\n            byte[] buf;\n\n            if (is instanceof ByteArrayInputStream) {\n                size = is.available();\n                buf = new byte[size];\n                len = is.read(buf, 0, size);\n            } else {\n                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                buf = new byte[size];\n                while ((len = is.read(buf, 0, size)) != -1) {\n                    bos.write(buf, 0, len);\n                }\n                buf = bos.toByteArray();\n            }\n            return buf;\n        } finally {\n            is.close();\n        }\n    }\n\n    private static boolean isGzipped(String value) {\n        return \"gzip\".equalsIgnoreCase(value.toLowerCase().trim());\n    }\n\n    @Override\n    public String getContentAsString() {\n        return getContentAsString(null);\n    }\n\n    @Override\n    public String getContentAsString(String charset) {\n        if (!hasContent()) {\n            return \"\";\n        }\n        try {\n            String charSet = getCharset(charset);\n            return new String(getContentAsBytes(), charSet);\n        } catch (IOException e) {\n            throw new UnirestException(e);\n        }\n    }\n\n    private String getCharset(String charset) {\n        if (charset == null || charset.trim().isEmpty()) {\n            return getCharSet();\n        }\n        return charset;\n    }\n\n    @Override\n    public InputStreamReader getContentReader() {\n        return new InputStreamReader(getContent());\n    }\n\n    @Override\n    public boolean hasContent() {\n        return response.body() != null;\n    }\n\n    @Override\n    public String getContentType() {\n        return response.headers()\n                .firstValue(CONTENT_TYPE)\n                .orElse(\"\");\n    }\n\n    @Override\n    public String getEncoding() {", "right_context": "}\n}", "class_name": "JavaResponse", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CompoundInterceptor implements Interceptor {\n    private List<Interceptor> interceptors;\n\n    CompoundInterceptor() {\n        this(Collections.singletonList(new DefaultInterceptor()));\n    }\n\n    CompoundInterceptor(List<Interceptor> interceptors) {\n        this.interceptors = interceptors;\n    }\n\n    @Override\n    public void onRequest(HttpRequest<?> request, Config config) {\n        interceptors.forEach(i -> i.onRequest(request, config));\n    }\n\n    @Override\n    public void onResponse(HttpResponse<?> response, HttpRequestSummary request, Config config) {\n        interceptors.forEach(i -> i.onResponse(response, request, config));\n    }\n\n    @Override\n    public HttpResponse<?> onFail(Exception e, HttpRequestSummary request, Config config) throws UnirestException {\n        return  interceptors.stream()\n                .map(i -> Optional.ofNullable(i.onFail(e, request, config)))\n                .flatMap(Util::stream)\n                .findFirst()\n                .orElseThrow(() -> new UnirestException(e));\n    }\n\n    int size() {\n        return interceptors.size();\n    }\n\n    List<Interceptor> getInterceptors() {\n        return new ArrayList<>(interceptors);\n    }\n\n    void register(Interceptor t1) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Kong_unirest-java/130", "ground_truth": "\n        if(interceptors.stream().anyMatch(i -> i instanceof DefaultInterceptor)){\n            interceptors = new ArrayList<>();\n        }\n        if(!interceptors.contains(t1)){\n            interceptors.add(t1);\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "CompoundInterceptor.java"], "context_start_lineno": 0, "function_name": "register", "left_context": "class CompoundInterceptor implements Interceptor {\n    private List<Interceptor> interceptors;\n\n    CompoundInterceptor() {\n        this(Collections.singletonList(new DefaultInterceptor()));\n    }\n\n    CompoundInterceptor(List<Interceptor> interceptors) {\n        this.interceptors = interceptors;\n    }\n\n    @Override\n    public void onRequest(HttpRequest<?> request, Config config) {\n        interceptors.forEach(i -> i.onRequest(request, config));\n    }\n\n    @Override\n    public void onResponse(HttpResponse<?> response, HttpRequestSummary request, Config config) {\n        interceptors.forEach(i -> i.onResponse(response, request, config));\n    }\n\n    @Override\n    public HttpResponse<?> onFail(Exception e, HttpRequestSummary request, Config config) throws UnirestException {\n        return  interceptors.stream()\n                .map(i -> Optional.ofNullable(i.onFail(e, request, config)))\n                .flatMap(Util::stream)\n                .findFirst()\n                .orElseThrow(() -> new UnirestException(e));\n    }\n\n    int size() {\n        return interceptors.size();\n    }\n\n    List<Interceptor> getInterceptors() {\n        return new ArrayList<>(interceptors);\n    }\n\n    void register(Interceptor t1) {", "right_context": "}\n}", "class_name": "CompoundInterceptor", "return_type": "void", "parameters": [{"type": "Interceptor", "name": "t1"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-bdd-tests/src/test/java/BehaviorTests/MockServer.java\n// --------------------------------------------------\n// private static byte[] zip(String content){\n//   try {\n//     ByteArrayOutputStream obj=new ByteArrayOutputStream();\n//     GZIPOutputStream gzip=new GZIPOutputStream(obj);\n//     gzip.write(content.getBytes(\"UTF-8\"));\n//     gzip.close();\n//     return obj.toByteArray();\n//   }\n//  catch (  Exception e) {\n//     throw new RuntimeException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/MockRawResponse.java\n// --------------------------------------------------\n// @Override public byte[] getContentAsBytes(){\n//   return response.getBytes();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/RawResponse.java\n// --------------------------------------------------\n// /** \n//  * Returns the body as bytes. This consumes the entire InputStream. Warning: Calling this on very large responses will place all data in memory and could create OutOfMemory errors\n//  * @return the content as bytes\n//  */\n// byte[] getContentAsBytes();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/java/JavaResponse.java\n// --------------------------------------------------\n// @Override public byte[] getContentAsBytes(){\n//   if (!hasContent()) {\n//     return new byte[0];\n//   }\n//   try {\n//     InputStream is=getContent();\n//     return getBytes(is);\n//   }\n//  catch (  IOException e2) {\n//     throw new UnirestException(e2);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/test/java/kong/unirest/core/TestRawResponse.java\n// --------------------------------------------------\n// @Override public byte[] getContentAsBytes(){\n//   return new byte[0];\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-bdd-tests/src/test/java/BehaviorTests/TestUtil.java\n// --------------------------------------------------\n// public static byte[] getFileBytes(String s){\n//   try {\n//     final InputStream stream=new FileInputStream(rezFile(s));\n//     final byte[] bytes=new byte[stream.available()];\n//     stream.read(bytes);\n//     stream.close();\n//     return bytes;\n//   }\n//  catch (  IOException e) {\n//     throw new RuntimeException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/java/JavaResponse.java\n// --------------------------------------------------\n// private static byte[] getBytes(InputStream is) throws IOException {\n//   try {\n//     int len;\n//     int size=1024;\n//     byte[] buf;\n//     if (is instanceof ByteArrayInputStream) {\n//       size=is.available();\n//       buf=new byte[size];\n//       len=is.read(buf,0,size);\n//     }\n//  else {\n//       ByteArrayOutputStream bos=new ByteArrayOutputStream();\n//       buf=new byte[size];\n//       while ((len=is.read(buf,0,size)) != -1) {\n//         bos.write(buf,0,len);\n//       }\n//       buf=bos.toByteArray();\n//     }\n//     return buf;\n//   }\n//   finally {\n//     is.close();\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ByteResponse extends BaseResponse<byte[]> {\n    private final byte[] body;\n\n    public ByteResponse(RawResponse r, ProgressMonitor downloadMonitor) {\n        super(r);\n        if(downloadMonitor == null) {\n            this.body = r.getContentAsBytes();\n        } else {\n            MonitoringInputStream ip = new MonitoringInputStream(r.getContent(), downloadMonitor, (String)null, r);\n            try {\n                body = getBytes(ip);\n            } catch (IOException e){\n                throw new UnirestException(e);\n            }\n        }\n    }\n\n    public static byte[] getBytes(InputStream is) throws IOException {<FILL_FUNCTION_BODY>}\n\n    public static boolean isGzipped(String value) {\n        return \"gzip\".equalsIgnoreCase(value.toLowerCase().trim());\n    }\n\n    @Override\n    public byte[] getBody() {\n        return body;\n    }\n\n    @Override\n    protected String getRawBody() {\n        return null;\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/160", "ground_truth": "\n        try {\n            int len;\n            int size = 1024;\n            byte[] buf;\n\n            if (is instanceof ByteArrayInputStream) {\n                size = is.available();\n                buf = new byte[size];\n                len = is.read(buf, 0, size);\n            } else {\n                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                buf = new byte[size];\n                while ((len = is.read(buf, 0, size)) != -1) {\n                    bos.write(buf, 0, len);\n                }\n                buf = bos.toByteArray();\n            }\n            return buf;\n        } finally {\n            is.close();\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "ByteResponse.java"], "context_start_lineno": 0, "function_name": "getBytes", "left_context": "class ByteResponse extends BaseResponse<byte[]> {\n    private final byte[] body;\n\n    public ByteResponse(RawResponse r, ProgressMonitor downloadMonitor) {\n        super(r);\n        if(downloadMonitor == null) {\n            this.body = r.getContentAsBytes();\n        } else {\n            MonitoringInputStream ip = new MonitoringInputStream(r.getContent(), downloadMonitor, (String)null, r);\n            try {\n                body = getBytes(ip);\n            } catch (IOException e){\n                throw new UnirestException(e);\n            }\n        }\n    }\n\n    public static byte[] getBytes(InputStream is) throws IOException {", "right_context": "}\n\n    public static boolean isGzipped(String value) {\n        return \"gzip\".equalsIgnoreCase(value.toLowerCase().trim());\n    }\n\n    @Override\n    public byte[] getBody() {\n        return body;\n    }\n\n    @Override\n    protected String getRawBody() {\n        return null;\n    }\n}", "class_name": "ByteResponse", "return_type": "byte[]", "parameters": [{"type": "InputStream", "name": "is"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Prefetcher {\n\n    public static final int PREFETCH = 16;\n    public static final int PREFETCH_THRESHOLD = (int) (PREFETCH * (50 / 100f));\n    private final int prefetch;\n    private final int prefetchThreshold;\n    private volatile int upstreamWindow;\n\n    public Prefetcher() {\n        prefetch = PREFETCH;\n        prefetchThreshold = PREFETCH_THRESHOLD;\n    }\n\n    public void initialize(Upstream upstream) {\n        upstreamWindow = prefetch;\n        upstream.request(prefetch);\n    }\n\n    public void update(Upstream upstream) {<FILL_FUNCTION_BODY>}\n\n    // for testing\n    int currentWindow() {\n        return upstreamWindow;\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/173", "ground_truth": "\n        // Decrement current window and bring it back to\n        // prefetch if became <= prefetchThreshold\n        int update = upstreamWindow - 1;\n        if (update <= prefetchThreshold) {\n            upstreamWindow = prefetch;\n            upstream.request(prefetch - update);\n        } else {\n            upstreamWindow = update;\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "java", "Prefetcher.java"], "context_start_lineno": 0, "function_name": "update", "left_context": "class Prefetcher {\n\n    public static final int PREFETCH = 16;\n    public static final int PREFETCH_THRESHOLD = (int) (PREFETCH * (50 / 100f));\n    private final int prefetch;\n    private final int prefetchThreshold;\n    private volatile int upstreamWindow;\n\n    public Prefetcher() {\n        prefetch = PREFETCH;\n        prefetchThreshold = PREFETCH_THRESHOLD;\n    }\n\n    public void initialize(Upstream upstream) {\n        upstreamWindow = prefetch;\n        upstream.request(prefetch);\n    }\n\n    public void update(Upstream upstream) {", "right_context": "}\n\n    // for testing\n    int currentWindow() {\n        return upstreamWindow;\n    }\n}", "class_name": "Prefetcher", "return_type": "void", "parameters": [{"type": "Upstream", "name": "upstream"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/Config.java\n// --------------------------------------------------\n// /** \n//  * @return the SSL connection configuration\n//  */\n// public SSLContext getSslContext(){\n//   return sslContext;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/java/JavaClientBuilder.java\n// --------------------------------------------------\n// private SSLContext getSslContext(Config config){\n//   try {\n//     TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n//     tmf.init(config.getKeystore());\n//     char[] pass=Optional.ofNullable(config.getKeyStorePassword()).map(String::toCharArray).orElse(null);\n//     return SSLContextBuilder.create().loadKeyMaterial(config.getKeystore(),pass).build();\n//   }\n//  catch (  Exception e) {\n//     throw new UnirestConfigException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest/src/main/java/kong/unirest/core/java/SSLContextBuilder.java\n// --------------------------------------------------\n// public SSLContext build() throws NoSuchAlgorithmException, KeyManagementException {\n//   final SSLContext sslContext=SSLContext.getInstance(\"TLS\");\n//   KeyManager[] km=!((Collection<KeyManager>)keyManagers).isEmpty() ? ((Collection<KeyManager>)keyManagers).toArray(new KeyManager[((Collection<KeyManager>)keyManagers).size()]) : null;\n//   sslContext.init(km,null,null);\n//   return sslContext;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NeverUseInProdTrustManager extends X509ExtendedTrustManager {\n    public static SSLContext create() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return new X509Certificate[0];\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/186", "ground_truth": "\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null,\n                    new TrustManager[]{new NeverUseInProdTrustManager()},\n                    new SecureRandom());\n            return sslContext;\n        }catch (Exception e){\n            throw new UnirestConfigException(e);\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "java", "NeverUseInProdTrustManager.java"], "context_start_lineno": 0, "function_name": "create", "left_context": "class NeverUseInProdTrustManager extends X509ExtendedTrustManager {\n    public static SSLContext create() {", "right_context": "}\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return new X509Certificate[0];\n    }\n}", "class_name": "NeverUseInProdTrustManager", "return_type": "SSLContext", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MockListener implements WebSocket.Listener {\n    private List<Message> messagesReceived = new ArrayList<>();\n    private ByteBuffer ping;\n    private ByteBuffer pong;\n    private boolean open = false;\n    private int closedStatus;\n    private String closedMessage;\n\n    @Override\n    public void onOpen(WebSocket webSocket) {\n        open = true;\n        WebSocket.Listener.super.onOpen(webSocket);\n    }\n\n    @Override\n    public CompletionStage<?> onText(WebSocket webSocket, CharSequence data, boolean last) {\n        messagesReceived.add(new Message(String.valueOf(data), last));\n        return WebSocket.Listener.super.onText(webSocket, data, last);\n    }\n\n    @Override\n    public CompletionStage<?> onBinary(WebSocket webSocket, ByteBuffer data, boolean last) {\n        messagesReceived.add(new Message(data, last));\n        return WebSocket.Listener.super.onBinary(webSocket, data, last);\n    }\n\n    @Override\n    public CompletionStage<?> onPing(WebSocket webSocket, ByteBuffer message) {\n        ping = message;\n        webSocket.sendPong(message);\n        return WebSocket.Listener.super.onPing(webSocket, message);\n    }\n\n    @Override\n    public CompletionStage<?> onPong(WebSocket webSocket, ByteBuffer message) {\n        this.pong = message;\n        return WebSocket.Listener.super.onPong(webSocket, message);\n    }\n\n    @Override\n    public CompletionStage<?> onClose(WebSocket webSocket, int statusCode, String reason) {\n        open = false;\n        closedStatus = statusCode;\n        closedMessage = reason;\n        return WebSocket.Listener.super.onClose(webSocket, statusCode, reason);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Throwable error) {\n        WebSocket.Listener.super.onError(webSocket, error);\n    }\n\n    public void assertReceivedMessage(Object message, boolean last) {\n        if(!messagesReceived.stream().anyMatch(e -> Objects.equals(e.data, message) && Objects.equals(e.last, last))){\n            throw new UnirestAssertion(\"Did not receive any message: [%s : %s] \", message, last);\n        }\n    }\n\n    public void assertIsClosed(int status, String message) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * assert that a ping message was received.\n     * Note that the onPing method will automatically send a pong to the WebSocket\n     * @param message the message\n     */\n    public void assertPing(ByteBuffer message) {\n        if(!Objects.equals(ping, message)){\n            throw new UnirestAssertion(\"Expected Ping Call with buffer %s but got %s\", message, ping);\n        }\n    }\n\n    /**\n     * assert that a pong message was received.\n     * Note that the onPing method will automatically send a pong to the WebSocket\n     * @param message the message\n     */\n    public void assertPong(ByteBuffer message) {\n        if(!message.equals(pong)){\n            throw new UnirestAssertion(\"Expected Pong Message %s but got %s\", message, pong);\n        }\n    }\n\n    public void assertIsOpen() {\n        if(!open){\n            throw new UnirestAssertion(\"Expected socket to be open but was closed.\");\n        }\n    }\n\n    private class Message {\n        private final Object data;\n        private final boolean last;\n\n        public Message(Object data, boolean last) {\n            this.data = data;\n            this.last = last;\n        }\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/237", "ground_truth": "\n        if(open){\n            throw new UnirestAssertion(\"Expected to be closed but was not\");\n        } else if (closedStatus != status || !Objects.equals(closedMessage, message)){\n            throw new UnirestAssertion(\"Incorrect Closed Status/Message. Expected [%s : %s] but got [%s : %s]\",\n                    status, message, closedStatus, closedMessage);\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest-modules-mocks", "src", "main", "java", "kong", "unirest", "core", "MockListener.java"], "context_start_lineno": 0, "function_name": "assertIsClosed", "left_context": "class MockListener implements WebSocket.Listener {\n    private List<Message> messagesReceived = new ArrayList<>();\n    private ByteBuffer ping;\n    private ByteBuffer pong;\n    private boolean open = false;\n    private int closedStatus;\n    private String closedMessage;\n\n    @Override\n    public void onOpen(WebSocket webSocket) {\n        open = true;\n        WebSocket.Listener.super.onOpen(webSocket);\n    }\n\n    @Override\n    public CompletionStage<?> onText(WebSocket webSocket, CharSequence data, boolean last) {\n        messagesReceived.add(new Message(String.valueOf(data), last));\n        return WebSocket.Listener.super.onText(webSocket, data, last);\n    }\n\n    @Override\n    public CompletionStage<?> onBinary(WebSocket webSocket, ByteBuffer data, boolean last) {\n        messagesReceived.add(new Message(data, last));\n        return WebSocket.Listener.super.onBinary(webSocket, data, last);\n    }\n\n    @Override\n    public CompletionStage<?> onPing(WebSocket webSocket, ByteBuffer message) {\n        ping = message;\n        webSocket.sendPong(message);\n        return WebSocket.Listener.super.onPing(webSocket, message);\n    }\n\n    @Override\n    public CompletionStage<?> onPong(WebSocket webSocket, ByteBuffer message) {\n        this.pong = message;\n        return WebSocket.Listener.super.onPong(webSocket, message);\n    }\n\n    @Override\n    public CompletionStage<?> onClose(WebSocket webSocket, int statusCode, String reason) {\n        open = false;\n        closedStatus = statusCode;\n        closedMessage = reason;\n        return WebSocket.Listener.super.onClose(webSocket, statusCode, reason);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Throwable error) {\n        WebSocket.Listener.super.onError(webSocket, error);\n    }\n\n    public void assertReceivedMessage(Object message, boolean last) {\n        if(!messagesReceived.stream().anyMatch(e -> Objects.equals(e.data, message) && Objects.equals(e.last, last))){\n            throw new UnirestAssertion(\"Did not receive any message: [%s : %s] \", message, last);\n        }\n    }\n\n    public void assertIsClosed(int status, String message) {", "right_context": "}\n\n    /**\n     * assert that a ping message was received.\n     * Note that the onPing method will automatically send a pong to the WebSocket\n     * @param message the message\n     */\n    public void assertPing(ByteBuffer message) {\n        if(!Objects.equals(ping, message)){\n            throw new UnirestAssertion(\"Expected Ping Call with buffer %s but got %s\", message, ping);\n        }\n    }\n\n    /**\n     * assert that a pong message was received.\n     * Note that the onPing method will automatically send a pong to the WebSocket\n     * @param message the message\n     */\n    public void assertPong(ByteBuffer message) {\n        if(!message.equals(pong)){\n            throw new UnirestAssertion(\"Expected Pong Message %s but got %s\", message, pong);\n        }\n    }\n\n    public void assertIsOpen() {\n        if(!open){\n            throw new UnirestAssertion(\"Expected socket to be open but was closed.\");\n        }\n    }\n\n    private class Message {\n        private final Object data;\n        private final boolean last;\n\n        public Message(Object data, boolean last) {\n            this.data = data;\n            this.last = last;\n        }\n    }\n}", "class_name": "MockListener", "return_type": "void", "parameters": [{"type": "int", "name": "status"}, {"type": "String", "name": "message"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MonitoringInputStream extends InputStream {\n    private final InputStream in;\n    private volatile long totalNumBytesRead = 0;\n\n    private ProgressMonitor monitor;\n\n    public MonitoringInputStream(InputStream value, ProgressMonitor monitor) {\n        this.in = value;\n        this.monitor = monitor;\n    }\n\n    @Override\n    public int read() throws IOException {\n        return (int)updateProgress(in.read());\n    }\n\n    @Override\n    public int read(byte[] b) throws IOException {\n        return (int)updateProgress(in.read(b));\n    }\n\n    @Override\n    public int read(byte[] b, int off, int len) throws IOException {\n        return (int)updateProgress(in.read(b, off, len));\n    }\n\n    @Override\n    public long skip(long n) throws IOException {\n        return updateProgress(in.skip(n));\n    }\n\n    @Override\n    public int available() throws IOException {\n        return in.available();\n    }\n\n    @Override\n    public void close() throws IOException {\n        in.close();\n    }\n\n    @Override\n    public synchronized void mark(int readlimit) {\n        in.mark(readlimit);\n    }\n\n    @Override\n    public synchronized void reset() throws IOException {\n        in.reset();\n    }\n\n    @Override\n    public boolean markSupported() {\n        return in.markSupported();\n    }\n\n    private long updateProgress(long numBytesRead) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Kong_unirest-java/263", "ground_truth": "\n        if (numBytesRead > 0) {\n            this.totalNumBytesRead += numBytesRead;\n            monitor.accept(\"body\", null, numBytesRead, totalNumBytesRead);\n        }\n\n        return numBytesRead;\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "java", "MonitoringInputStream.java"], "context_start_lineno": 0, "function_name": "updateProgress", "left_context": "class MonitoringInputStream extends InputStream {\n    private final InputStream in;\n    private volatile long totalNumBytesRead = 0;\n\n    private ProgressMonitor monitor;\n\n    public MonitoringInputStream(InputStream value, ProgressMonitor monitor) {\n        this.in = value;\n        this.monitor = monitor;\n    }\n\n    @Override\n    public int read() throws IOException {\n        return (int)updateProgress(in.read());\n    }\n\n    @Override\n    public int read(byte[] b) throws IOException {\n        return (int)updateProgress(in.read(b));\n    }\n\n    @Override\n    public int read(byte[] b, int off, int len) throws IOException {\n        return (int)updateProgress(in.read(b, off, len));\n    }\n\n    @Override\n    public long skip(long n) throws IOException {\n        return updateProgress(in.skip(n));\n    }\n\n    @Override\n    public int available() throws IOException {\n        return in.available();\n    }\n\n    @Override\n    public void close() throws IOException {\n        in.close();\n    }\n\n    @Override\n    public synchronized void mark(int readlimit) {\n        in.mark(readlimit);\n    }\n\n    @Override\n    public synchronized void reset() throws IOException {\n        in.reset();\n    }\n\n    @Override\n    public boolean markSupported() {\n        return in.markSupported();\n    }\n\n    private long updateProgress(long numBytesRead) {", "right_context": "}\n}", "class_name": "MonitoringInputStream", "return_type": "long", "parameters": [{"type": "long", "name": "numBytesRead"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/Times.java\n// --------------------------------------------------\n// public static EvaluationResult success(){\n//   return SUCCESS;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/Times.java\n// --------------------------------------------------\n// public static EvaluationResult fail(String message,Object... values){\n//   return new EvaluationResult(false,String.format(message,values));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/Times.java\n// --------------------------------------------------\n// public abstract EvaluationResult matches(int number);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/Times.java\n// --------------------------------------------------\n// @Override public EvaluationResult matches(int number){\n//   if (Objects.equals(number,times)) {\n//     return EvaluationResult.success();\n//   }\n//  else {\n//     return EvaluationResult.fail(\"Expected exactly %s invocations but got %s\",times,number);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unirest-java/unirest-modules-mocks/src/main/java/kong/unirest/core/Times.java\n// --------------------------------------------------\n// @Override public EvaluationResult matches(int number){\n//   if (number <= times) {\n//     return EvaluationResult.success();\n//   }\n//  else {\n//     return EvaluationResult.fail(\"Expected no more than %s invocations but got %s\",times,number);\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AtLeast extends Times {\n        private final int times;\n        AtLeast(int times) {\n            this.times = times;\n        }\n\n        @Override\n        public EvaluationResult matches(int number) {<FILL_FUNCTION_BODY>}\n    }", "metadata": {"task_id": "Kong_unirest-java/336", "ground_truth": "\n            if(number >= times) {\n                return EvaluationResult.success();\n            } else {\n                return EvaluationResult.fail(\"Expected at least %s invocations but got %s\", times, number);\n            }\n        ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest-modules-mocks", "src", "main", "java", "kong", "unirest", "core", "Times.java"], "context_start_lineno": 0, "function_name": "matches", "left_context": "class AtLeast extends Times {\n        private final int times;\n        AtLeast(int times) {\n            this.times = times;\n        }\n\n        @Override\n        public EvaluationResult matches(int number) {", "right_context": "}\n    }", "class_name": "AtLeast", "return_type": "EvaluationResult", "parameters": [{"type": "int", "name": "number"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PartSubscriber implements Flow.Subscriber<ByteBuffer> {\n\n    static final ByteBuffer END_OF_PART = ByteBuffer.allocate(0);\n\n    private final MultipartSubscription downstream; // for signalling\n    private final Part part;\n    private final ProgressMonitor monitor;\n    private final ConcurrentLinkedQueue<ByteBuffer> buffers;\n    private final Upstream upstream;\n    private final Prefetcher prefetcher;\n    private long total;\n\n    PartSubscriber(MultipartSubscription downstream, Part part, ProgressMonitor monitor) {\n        this.downstream = downstream;\n        this.part = part;\n        this.monitor = monitor;\n        buffers = new ConcurrentLinkedQueue<>();\n        upstream = new Upstream();\n        prefetcher = new Prefetcher();\n    }\n\n    @Override\n    public void onSubscribe(Flow.Subscription subscription) {\n        requireNonNull(subscription);\n        if (upstream.setOrCancel(subscription)) {\n            // The only possible concurrent access to prefetcher applies here.\n            // But the operation need not be atomic as other reads/writes\n            // are done serially when ByteBuffers are polled, which is only\n            // possible after this volatile write.\n            prefetcher.initialize(upstream);\n        }\n    }\n\n    @Override\n    public void onNext(ByteBuffer item) {\n        requireNonNull(item);\n        buffers.offer(item);\n        if(monitor != null) {\n            this.total = total + item.remaining();\n            monitor.accept(part.getFieldName(), part.getFilename(), Long.valueOf(item.remaining()), total);\n        }\n        downstream.signal(false);\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        requireNonNull(throwable);\n        abortUpstream(false);\n        downstream.signalError(throwable);\n    }\n\n    @Override\n    public void onComplete() {\n        abortUpstream(false);\n        buffers.offer(END_OF_PART);\n        downstream.signal(true); // force completion signal\n    }\n\n    void abortUpstream(boolean cancel) {<FILL_FUNCTION_BODY>}\n\n\n    ByteBuffer pollNext() {\n        ByteBuffer next = buffers.peek();\n        if (next != null && next != END_OF_PART) {\n            buffers.poll(); // remove\n            prefetcher.update(upstream);\n        }\n        return next;\n    }\n\n    public Part getPart() {\n        return part;\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/352", "ground_truth": "\n        if (cancel) {\n            upstream.cancel();\n        } else {\n            upstream.clear();\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "java", "PartSubscriber.java"], "context_start_lineno": 0, "function_name": "abortUpstream", "left_context": "class PartSubscriber implements Flow.Subscriber<ByteBuffer> {\n\n    static final ByteBuffer END_OF_PART = ByteBuffer.allocate(0);\n\n    private final MultipartSubscription downstream; // for signalling\n    private final Part part;\n    private final ProgressMonitor monitor;\n    private final ConcurrentLinkedQueue<ByteBuffer> buffers;\n    private final Upstream upstream;\n    private final Prefetcher prefetcher;\n    private long total;\n\n    PartSubscriber(MultipartSubscription downstream, Part part, ProgressMonitor monitor) {\n        this.downstream = downstream;\n        this.part = part;\n        this.monitor = monitor;\n        buffers = new ConcurrentLinkedQueue<>();\n        upstream = new Upstream();\n        prefetcher = new Prefetcher();\n    }\n\n    @Override\n    public void onSubscribe(Flow.Subscription subscription) {\n        requireNonNull(subscription);\n        if (upstream.setOrCancel(subscription)) {\n            // The only possible concurrent access to prefetcher applies here.\n            // But the operation need not be atomic as other reads/writes\n            // are done serially when ByteBuffers are polled, which is only\n            // possible after this volatile write.\n            prefetcher.initialize(upstream);\n        }\n    }\n\n    @Override\n    public void onNext(ByteBuffer item) {\n        requireNonNull(item);\n        buffers.offer(item);\n        if(monitor != null) {\n            this.total = total + item.remaining();\n            monitor.accept(part.getFieldName(), part.getFilename(), Long.valueOf(item.remaining()), total);\n        }\n        downstream.signal(false);\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        requireNonNull(throwable);\n        abortUpstream(false);\n        downstream.signalError(throwable);\n    }\n\n    @Override\n    public void onComplete() {\n        abortUpstream(false);\n        buffers.offer(END_OF_PART);\n        downstream.signal(true); // force completion signal\n    }\n\n    void abortUpstream(boolean cancel) {", "right_context": "}\n\n\n    ByteBuffer pollNext() {\n        ByteBuffer next = buffers.peek();\n        if (next != null && next != END_OF_PART) {\n            buffers.poll(); // remove\n            prefetcher.update(upstream);\n        }\n        return next;\n    }\n\n    public Part getPart() {\n        return part;\n    }\n}", "class_name": "PartSubscriber", "return_type": "void", "parameters": [{"type": "boolean", "name": "cancel"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BaseResponse<T> implements HttpResponse<T> {\n\n    private final Headers headers;\n    private final String statusText;\n    private final int statusCode;\n    private final HttpRequestSummary reqSummary;\n    private Optional<UnirestParsingException> parsingerror = Optional.empty();\n    private final Config config;\n    private Cookies cookies;\n\n\n    protected BaseResponse(RawResponse response) {\n        this.headers = response.getHeaders();\n        // Unirest decompresses the content, so this should be removed as it is\n        // no longer encoded\n        this.headers.remove(\"Content-Encoding\", \"gzip\");\n        this.statusCode = response.getStatus();\n        this.statusText = response.getStatusText();\n        this.config = response.getConfig();\n        this.reqSummary = response.getRequestSummary();\n    }\n\n    protected BaseResponse(BaseResponse other) {\n        this.headers = other.headers;\n        this.statusCode = other.statusCode;\n        this.statusText = other.statusText;\n        this.config = other.config;\n        this.reqSummary = other.reqSummary;\n    }\n\n    @Override\n    public int getStatus() {\n        return statusCode;\n    }\n\n    @Override\n    public String getStatusText() {\n        return statusText;\n    }\n\n    @Override\n    public Headers getHeaders() {\n        return headers;\n    }\n\n    @Override\n    public abstract T getBody();\n\n    @Override\n    public Optional<UnirestParsingException> getParsingError() {\n        return parsingerror;\n    }\n\n    @Override\n    public <V> V mapBody(Function<T, V> func) {\n        return func.apply(getBody());\n    }\n\n    @Override\n    public <V> HttpResponse<V> map(Function<T, V> func) {\n        return new BasicResponse(this, mapBody(func));\n    }\n\n    protected void setParsingException(String originalBody, RuntimeException e) {\n        parsingerror = Optional.of(new UnirestParsingException(originalBody, e));\n    }\n\n    @Override\n    public boolean isSuccess() {\n        return getStatus() >= 200 && getStatus() < 300 && !getParsingError().isPresent();\n    }\n\n    @Override\n    public HttpResponse<T> ifSuccess(Consumer<HttpResponse<T>> consumer) {\n        if (isSuccess()) {\n            consumer.accept(this);\n        }\n        return this;\n    }\n\n    @Override\n    public HttpResponse<T> ifFailure(Consumer<HttpResponse<T>> consumer) {\n        if (!isSuccess()) {\n            consumer.accept(this);\n        }\n        return this;\n    }\n\n    @Override\n    public <E> E mapError(Class<? extends E> errorClass) {\n        if (!isSuccess()) {\n            String errorBody = getErrorBody();\n            if(String.class.equals(errorClass)){\n                return (E) errorBody;\n            }\n            try {\n                return config.getObjectMapper().readValue(errorBody, errorClass);\n            } catch (RuntimeException e) {\n                setParsingException(errorBody, e);\n            }\n        }\n        return null;\n    }\n\n    private String getErrorBody() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public <E> HttpResponse<T> ifFailure(Class<? extends E> errorClass, Consumer<HttpResponse<E>> consumer) {\n        if (!isSuccess()) {\n            E error = mapError(errorClass);\n            BasicResponse br = new BasicResponse(this, error);\n            getParsingError().ifPresent(p -> br.setParsingException(p.getOriginalBody(), p));\n            consumer.accept(br);\n        }\n        return this;\n    }\n\n    @Override\n    public Cookies getCookies() {\n        if (cookies == null) {\n            cookies = new Cookies(headers.get(\"set-cookie\"));\n        }\n        return cookies;\n    }\n\n    @Override\n    public HttpRequestSummary getRequestSummary() {\n        return reqSummary;\n    }\n\n    protected abstract String getRawBody();\n}", "metadata": {"task_id": "Kong_unirest-java/362", "ground_truth": "\n        if (getParsingError().isPresent()) {\n            return getParsingError().get().getOriginalBody();\n        } else if (getRawBody() != null) {\n            return getRawBody();\n        }\n        T body = getBody();\n        if (body == null) {\n            return null;\n        }\n        try {\n            if(body instanceof byte[]){\n                return new String((byte[])body, StandardCharsets.UTF_8);\n            }\n            return config.getObjectMapper().writeValue(body);\n        } catch (Exception e) {\n            return String.valueOf(body);\n        }\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "BaseResponse.java"], "context_start_lineno": 0, "function_name": "getErrorBody", "left_context": "class BaseResponse<T> implements HttpResponse<T> {\n\n    private final Headers headers;\n    private final String statusText;\n    private final int statusCode;\n    private final HttpRequestSummary reqSummary;\n    private Optional<UnirestParsingException> parsingerror = Optional.empty();\n    private final Config config;\n    private Cookies cookies;\n\n\n    protected BaseResponse(RawResponse response) {\n        this.headers = response.getHeaders();\n        // Unirest decompresses the content, so this should be removed as it is\n        // no longer encoded\n        this.headers.remove(\"Content-Encoding\", \"gzip\");\n        this.statusCode = response.getStatus();\n        this.statusText = response.getStatusText();\n        this.config = response.getConfig();\n        this.reqSummary = response.getRequestSummary();\n    }\n\n    protected BaseResponse(BaseResponse other) {\n        this.headers = other.headers;\n        this.statusCode = other.statusCode;\n        this.statusText = other.statusText;\n        this.config = other.config;\n        this.reqSummary = other.reqSummary;\n    }\n\n    @Override\n    public int getStatus() {\n        return statusCode;\n    }\n\n    @Override\n    public String getStatusText() {\n        return statusText;\n    }\n\n    @Override\n    public Headers getHeaders() {\n        return headers;\n    }\n\n    @Override\n    public abstract T getBody();\n\n    @Override\n    public Optional<UnirestParsingException> getParsingError() {\n        return parsingerror;\n    }\n\n    @Override\n    public <V> V mapBody(Function<T, V> func) {\n        return func.apply(getBody());\n    }\n\n    @Override\n    public <V> HttpResponse<V> map(Function<T, V> func) {\n        return new BasicResponse(this, mapBody(func));\n    }\n\n    protected void setParsingException(String originalBody, RuntimeException e) {\n        parsingerror = Optional.of(new UnirestParsingException(originalBody, e));\n    }\n\n    @Override\n    public boolean isSuccess() {\n        return getStatus() >= 200 && getStatus() < 300 && !getParsingError().isPresent();\n    }\n\n    @Override\n    public HttpResponse<T> ifSuccess(Consumer<HttpResponse<T>> consumer) {\n        if (isSuccess()) {\n            consumer.accept(this);\n        }\n        return this;\n    }\n\n    @Override\n    public HttpResponse<T> ifFailure(Consumer<HttpResponse<T>> consumer) {\n        if (!isSuccess()) {\n            consumer.accept(this);\n        }\n        return this;\n    }\n\n    @Override\n    public <E> E mapError(Class<? extends E> errorClass) {\n        if (!isSuccess()) {\n            String errorBody = getErrorBody();\n            if(String.class.equals(errorClass)){\n                return (E) errorBody;\n            }\n            try {\n                return config.getObjectMapper().readValue(errorBody, errorClass);\n            } catch (RuntimeException e) {\n                setParsingException(errorBody, e);\n            }\n        }\n        return null;\n    }\n\n    private String getErrorBody() {", "right_context": "}\n\n    @Override\n    public <E> HttpResponse<T> ifFailure(Class<? extends E> errorClass, Consumer<HttpResponse<E>> consumer) {\n        if (!isSuccess()) {\n            E error = mapError(errorClass);\n            BasicResponse br = new BasicResponse(this, error);\n            getParsingError().ifPresent(p -> br.setParsingException(p.getOriginalBody(), p));\n            consumer.accept(br);\n        }\n        return this;\n    }\n\n    @Override\n    public Cookies getCookies() {\n        if (cookies == null) {\n            cookies = new Cookies(headers.get(\"set-cookie\"));\n        }\n        return cookies;\n    }\n\n    @Override\n    public HttpRequestSummary getRequestSummary() {\n        return reqSummary;\n    }\n\n    protected abstract String getRawBody();\n}", "class_name": "BaseResponse", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JsonPatchItem {\n    private final JsonPatchOperation op;\n    private final String path;\n    private final Object value;\n\n    public JsonPatchItem(JsonPatchOperation op, String path, Object value){\n        this.op = op;\n        this.path = path;\n        this.value = value;\n    }\n\n    public JsonPatchItem(JsonPatchOperation op, String path) {\n        this(op, path, null);\n    }\n\n    public JsonPatchItem(JSONObject row) {\n        this.op = JsonPatchOperation.valueOf(row.getString(\"op\"));\n        this.path = row.getString(\"path\");\n        if(row.has(op.getOperationtype())) {\n            this.value = row.get(op.getOperationtype());\n        } else {\n            this.value = null;\n        }\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {return true;}\n        if (o == null || getClass() != o.getClass()) {return false;}\n        JsonPatchItem that = (JsonPatchItem) o;\n        return op == that.op &&\n                Objects.equals(path, that.path) &&\n                Objects.equals(toString(), that.toString());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(op, path, value);\n    }\n\n    @Override\n    public String toString() {<FILL_FUNCTION_BODY>}\n\n    public JsonPatchOperation getOp() {\n        return op;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public Object getValue() {\n        return value;\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/372", "ground_truth": "\n        JSONObject json = new JSONObject()\n                .put(\"op\", op)\n                .put(\"path\", path);\n\n        if(Objects.nonNull(value)){\n            json.put(op.getOperationtype(), value);\n        }\n\n        return json.toString();\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "JsonPatchItem.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class JsonPatchItem {\n    private final JsonPatchOperation op;\n    private final String path;\n    private final Object value;\n\n    public JsonPatchItem(JsonPatchOperation op, String path, Object value){\n        this.op = op;\n        this.path = path;\n        this.value = value;\n    }\n\n    public JsonPatchItem(JsonPatchOperation op, String path) {\n        this(op, path, null);\n    }\n\n    public JsonPatchItem(JSONObject row) {\n        this.op = JsonPatchOperation.valueOf(row.getString(\"op\"));\n        this.path = row.getString(\"path\");\n        if(row.has(op.getOperationtype())) {\n            this.value = row.get(op.getOperationtype());\n        } else {\n            this.value = null;\n        }\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {return true;}\n        if (o == null || getClass() != o.getClass()) {return false;}\n        JsonPatchItem that = (JsonPatchItem) o;\n        return op == that.op &&\n                Objects.equals(path, that.path) &&\n                Objects.equals(toString(), that.toString());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(op, path, value);\n    }\n\n    @Override\n    public String toString() {", "right_context": "}\n\n    public JsonPatchOperation getOp() {\n        return op;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public Object getValue() {\n        return value;\n    }\n}", "class_name": "JsonPatchItem", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Path {\n    private String url;\n    private String rawPath;\n\n    Path(String url, String defaultBasePath) {\n        if(defaultBasePath != null && url != null && !url.toLowerCase().startsWith(\"http\")){\n            String full = defaultBasePath + url;\n            this.url = full;\n            this.rawPath = full;\n        } else {\n            this.url = url;\n            this.rawPath = url;\n        }\n    }\n\n    public Path(String url) {\n        this(url, null);\n    }\n\n    public void param(Map<String, Object> params) {\n        params.forEach((key, value) -> param(key, String.valueOf(value)));\n    }\n\n    public void param(String name, String value) {\n        Matcher matcher = Pattern.compile(\"\\\\{\" + name + \"\\\\}\").matcher(url);\n        if (!matcher.find()) {\n            throw new UnirestException(\"Can't find route parameter name \\\"\" + name + \"\\\"\");\n        }\n        this.url = matcher.replaceAll(encodePath(value));\n    }\n\n    private String encodePath(String value) {\n        if(value == null){\n            return \"\";\n        }\n        return Util.encode(value).replaceAll(\"\\\\+\", \"%20\");\n    }\n\n    public void queryString(String name, Collection<?> value){\n        for (Object cur : value) {\n            queryString(name, cur);\n        }\n    }\n\n    public void queryString(String name, Object value) {\n        StringBuilder queryString = new StringBuilder();\n        if (url.contains(\"?\")) {\n            queryString.append(\"&\");\n        } else {\n            queryString.append(\"?\");\n        }\n        try {\n            queryString.append(URLEncoder.encode(name, \"UTF-8\"));\n            if(value != null) {\n                queryString.append(\"=\").append(URLEncoder.encode(String.valueOf(value), \"UTF-8\"));\n            }\n        } catch (UnsupportedEncodingException e) {\n            throw new UnirestException(e);\n        }\n        url += queryString.toString();\n    }\n\n    public void queryString(Map<String, Object> parameters) {\n        if (parameters != null) {\n            for (Map.Entry<String, Object> param : parameters.entrySet()) {\n                queryString(param.getKey(), param.getValue());\n            }\n        }\n    }\n\n    @Override\n    public String toString() {\n        return escape(url);\n    }\n\n    private String escape(String string) {\n        return string.replaceAll(\" \", \"%20\").replaceAll(\"\\t\", \"%09\");\n    }\n\n    public String rawPath() {\n        return rawPath;\n    }\n\n    public String baseUrl() {<FILL_FUNCTION_BODY>}\n\n    public String getQueryString(){\n        return url.substring(url.indexOf(\"?\")+1);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) { return true; }\n        if (o == null || getClass() != o.getClass()) { return false; }\n        Path path = (Path) o;\n        return Objects.equals(url, path.url);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(url);\n    }\n}", "metadata": {"task_id": "Kong_unirest-java/481", "ground_truth": "\n        if(url != null && url.contains(\"?\")){\n            return url.substring(0, url.indexOf(\"?\"));\n        }\n        return url;\n    ", "fpath_tuple": ["Kong_unirest-java", "unirest-java", "unirest", "src", "main", "java", "kong", "unirest", "core", "Path.java"], "context_start_lineno": 0, "function_name": "baseUrl", "left_context": "class Path {\n    private String url;\n    private String rawPath;\n\n    Path(String url, String defaultBasePath) {\n        if(defaultBasePath != null && url != null && !url.toLowerCase().startsWith(\"http\")){\n            String full = defaultBasePath + url;\n            this.url = full;\n            this.rawPath = full;\n        } else {\n            this.url = url;\n            this.rawPath = url;\n        }\n    }\n\n    public Path(String url) {\n        this(url, null);\n    }\n\n    public void param(Map<String, Object> params) {\n        params.forEach((key, value) -> param(key, String.valueOf(value)));\n    }\n\n    public void param(String name, String value) {\n        Matcher matcher = Pattern.compile(\"\\\\{\" + name + \"\\\\}\").matcher(url);\n        if (!matcher.find()) {\n            throw new UnirestException(\"Can't find route parameter name \\\"\" + name + \"\\\"\");\n        }\n        this.url = matcher.replaceAll(encodePath(value));\n    }\n\n    private String encodePath(String value) {\n        if(value == null){\n            return \"\";\n        }\n        return Util.encode(value).replaceAll(\"\\\\+\", \"%20\");\n    }\n\n    public void queryString(String name, Collection<?> value){\n        for (Object cur : value) {\n            queryString(name, cur);\n        }\n    }\n\n    public void queryString(String name, Object value) {\n        StringBuilder queryString = new StringBuilder();\n        if (url.contains(\"?\")) {\n            queryString.append(\"&\");\n        } else {\n            queryString.append(\"?\");\n        }\n        try {\n            queryString.append(URLEncoder.encode(name, \"UTF-8\"));\n            if(value != null) {\n                queryString.append(\"=\").append(URLEncoder.encode(String.valueOf(value), \"UTF-8\"));\n            }\n        } catch (UnsupportedEncodingException e) {\n            throw new UnirestException(e);\n        }\n        url += queryString.toString();\n    }\n\n    public void queryString(Map<String, Object> parameters) {\n        if (parameters != null) {\n            for (Map.Entry<String, Object> param : parameters.entrySet()) {\n                queryString(param.getKey(), param.getValue());\n            }\n        }\n    }\n\n    @Override\n    public String toString() {\n        return escape(url);\n    }\n\n    private String escape(String string) {\n        return string.replaceAll(\" \", \"%20\").replaceAll(\"\\t\", \"%09\");\n    }\n\n    public String rawPath() {\n        return rawPath;\n    }\n\n    public String baseUrl() {", "right_context": "}\n\n    public String getQueryString(){\n        return url.substring(url.indexOf(\"?\")+1);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) { return true; }\n        if (o == null || getClass() != o.getClass()) { return false; }\n        Path path = (Path) o;\n        return Objects.equals(url, path.url);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(url);\n    }\n}", "class_name": "Path", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HookLoader extends BaseHook {\n\n    private static final Log log = LogFactory.getLog(HookLoader.class);\n\n    public static HookLoader load(Emulator<?> emulator) {<FILL_FUNCTION_BODY>}\n\n    private final Symbol _hook_objc_msgSend;\n    private final Symbol _hook_dispatch_async;\n\n    private HookLoader(Emulator<?> emulator) {\n        super(emulator, \"libhook\");\n\n        _hook_objc_msgSend = module.findSymbolByName(\"_hook_objc_msgSend\", false);\n        if (_hook_objc_msgSend == null) {\n            throw new IllegalStateException(\"find _hook_objc_msgSend failed\");\n        }\n\n        _hook_dispatch_async = module.findSymbolByName(\"_hook_dispatch_async\", false);\n        if (_hook_dispatch_async == null) {\n            throw new IllegalStateException(\"find _hook_dispatch_async failed\");\n        }\n    }\n\n    private boolean objcMsgSendHooked;\n\n    public synchronized void hookObjcMsgSend(final MsgSendCallback callback) {\n        if (objcMsgSendHooked) {\n            throw new IllegalStateException(\"objc_msgSend already hooked.\");\n        }\n\n        SvcMemory svcMemory = emulator.getSvcMemory();\n        Pointer pointer = callback == null ? null : svcMemory.registerSvc(emulator.is64Bit() ? new Arm64Svc() {\n            @Override\n            public long handle(Emulator<?> emulator) {\n                return objc_msgSend_callback(emulator, callback);\n            }\n        } : new ArmSvc() {\n            @Override\n            public long handle(Emulator<?> emulator) {\n                return objc_msgSend_callback(emulator, callback);\n            }\n        });\n        _hook_objc_msgSend.call(emulator, pointer);\n        objcMsgSendHooked = true;\n    }\n\n    private boolean dispatchAsyncHooked;\n\n    public synchronized void hookDispatchAsync(final DispatchAsyncCallback callback) {\n        if (dispatchAsyncHooked) {\n            throw new IllegalStateException(\"dispatch_async already hooked.\");\n        }\n        if (emulator.is32Bit()) {\n            throw new UnsupportedOperationException();\n        }\n\n        SvcMemory svcMemory = emulator.getSvcMemory();\n        Pointer pointer = callback == null ? null : svcMemory.registerSvc(new Arm64Svc() {\n            @Override\n            public long handle(Emulator<?> emulator) {\n                return dispatch_callback(emulator, callback);\n            }\n        });\n        _hook_dispatch_async.call(emulator, pointer);\n\n        dispatchAsyncHooked = true;\n    }\n\n    private long dispatch_callback(Emulator<?> emulator, DispatchAsyncCallback callback) {\n        RegisterContext context = emulator.getContext();\n        Pointer dq = context.getPointerArg(0);\n        Pointer block = context.getPointerArg(1);\n        Pointer fun = block.getPointer(0x10);\n        boolean is_barrier_async = context.getIntArg(2) != 0;\n        boolean dispatch = callback.canDispatch(emulator, dq, fun, is_barrier_async);\n        if (!dispatch && (log.isDebugEnabled() || LogFactory.getLog(AbstractEmulator.class).isDebugEnabled())) {\n            System.err.println(\"Skip dispatch_async dq=\" + dq + \", fun=\" + fun);\n        }\n        return dispatch ? 1 : 0;\n    }\n\n    private long objc_msgSend_callback(Emulator<?> emulator, MsgSendCallback callback) {\n        RegisterContext context = emulator.getContext();\n        boolean systemClass = context.getIntArg(0) != 0;\n        Pointer classNamePointer = context.getPointerArg(1);\n        String cmd = context.getPointerArg(2).getString(0);\n        Pointer lr = context.getPointerArg(3);\n        callback.onMsgSend(emulator, systemClass, classNamePointer == null ? null : classNamePointer.getString(0), cmd, lr);\n        return 0;\n    }\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/11", "ground_truth": "\n        Substrate.getInstance(emulator); // load substrate first\n        FishHook.getInstance(emulator); // load fishhook\n\n        HookLoader loader = emulator.get(HookLoader.class.getName());\n        if (loader == null) {\n            loader = new HookLoader(emulator);\n            emulator.set(HookLoader.class.getName(), loader);\n        }\n        return loader;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-ios", "src", "main", "java", "com", "github", "unidbg", "hook", "HookLoader.java"], "context_start_lineno": 0, "function_name": "load", "left_context": "class HookLoader extends BaseHook {\n\n    private static final Log log = LogFactory.getLog(HookLoader.class);\n\n    public static HookLoader load(Emulator<?> emulator) {", "right_context": "}\n\n    private final Symbol _hook_objc_msgSend;\n    private final Symbol _hook_dispatch_async;\n\n    private HookLoader(Emulator<?> emulator) {\n        super(emulator, \"libhook\");\n\n        _hook_objc_msgSend = module.findSymbolByName(\"_hook_objc_msgSend\", false);\n        if (_hook_objc_msgSend == null) {\n            throw new IllegalStateException(\"find _hook_objc_msgSend failed\");\n        }\n\n        _hook_dispatch_async = module.findSymbolByName(\"_hook_dispatch_async\", false);\n        if (_hook_dispatch_async == null) {\n            throw new IllegalStateException(\"find _hook_dispatch_async failed\");\n        }\n    }\n\n    private boolean objcMsgSendHooked;\n\n    public synchronized void hookObjcMsgSend(final MsgSendCallback callback) {\n        if (objcMsgSendHooked) {\n            throw new IllegalStateException(\"objc_msgSend already hooked.\");\n        }\n\n        SvcMemory svcMemory = emulator.getSvcMemory();\n        Pointer pointer = callback == null ? null : svcMemory.registerSvc(emulator.is64Bit() ? new Arm64Svc() {\n            @Override\n            public long handle(Emulator<?> emulator) {\n                return objc_msgSend_callback(emulator, callback);\n            }\n        } : new ArmSvc() {\n            @Override\n            public long handle(Emulator<?> emulator) {\n                return objc_msgSend_callback(emulator, callback);\n            }\n        });\n        _hook_objc_msgSend.call(emulator, pointer);\n        objcMsgSendHooked = true;\n    }\n\n    private boolean dispatchAsyncHooked;\n\n    public synchronized void hookDispatchAsync(final DispatchAsyncCallback callback) {\n        if (dispatchAsyncHooked) {\n            throw new IllegalStateException(\"dispatch_async already hooked.\");\n        }\n        if (emulator.is32Bit()) {\n            throw new UnsupportedOperationException();\n        }\n\n        SvcMemory svcMemory = emulator.getSvcMemory();\n        Pointer pointer = callback == null ? null : svcMemory.registerSvc(new Arm64Svc() {\n            @Override\n            public long handle(Emulator<?> emulator) {\n                return dispatch_callback(emulator, callback);\n            }\n        });\n        _hook_dispatch_async.call(emulator, pointer);\n\n        dispatchAsyncHooked = true;\n    }\n\n    private long dispatch_callback(Emulator<?> emulator, DispatchAsyncCallback callback) {\n        RegisterContext context = emulator.getContext();\n        Pointer dq = context.getPointerArg(0);\n        Pointer block = context.getPointerArg(1);\n        Pointer fun = block.getPointer(0x10);\n        boolean is_barrier_async = context.getIntArg(2) != 0;\n        boolean dispatch = callback.canDispatch(emulator, dq, fun, is_barrier_async);\n        if (!dispatch && (log.isDebugEnabled() || LogFactory.getLog(AbstractEmulator.class).isDebugEnabled())) {\n            System.err.println(\"Skip dispatch_async dq=\" + dq + \", fun=\" + fun);\n        }\n        return dispatch ? 1 : 0;\n    }\n\n    private long objc_msgSend_callback(Emulator<?> emulator, MsgSendCallback callback) {\n        RegisterContext context = emulator.getContext();\n        boolean systemClass = context.getIntArg(0) != 0;\n        Pointer classNamePointer = context.getPointerArg(1);\n        String cmd = context.getPointerArg(2).getString(0);\n        Pointer lr = context.getPointerArg(3);\n        callback.onMsgSend(emulator, systemClass, classNamePointer == null ? null : classNamePointer.getString(0), cmd, lr);\n        return 0;\n    }\n\n}", "class_name": "HookLoader", "return_type": "HookLoader", "parameters": [{"type": "Emulator<?>", "name": "emulator"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ExceptionVisitor {\n\n    public abstract boolean onException(Hypervisor hypervisor, int ec, long address);\n\n    static ExceptionVisitor breakRestorerVisitor(final BreakRestorer breakRestorer) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/34", "ground_truth": "\n        return new ExceptionVisitor() {\n            @Override\n            public boolean onException(Hypervisor hypervisor, int ec, long address) {\n                breakRestorer.install(hypervisor);\n                return false;\n            }\n        };\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "backend", "hypervisor", "src", "main", "java", "com", "github", "unidbg", "arm", "backend", "hypervisor", "ExceptionVisitor.java"], "context_start_lineno": 0, "function_name": "breakRestorerVisitor", "left_context": "class ExceptionVisitor {\n\n    public abstract boolean onException(Hypervisor hypervisor, int ec, long address);\n\n    static ExceptionVisitor breakRestorerVisitor(final BreakRestorer breakRestorer) {", "right_context": "}\n\n}", "class_name": "ExceptionVisitor", "return_type": "ExceptionVisitor", "parameters": [{"type": "BreakRestorer", "name": "breakRestorer"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/AndroidElfLoader.java\n// --------------------------------------------------\n// @Override public MemoryBlock malloc(int length,boolean runtime){\n//   if (runtime) {\n//     return MemoryBlockImpl.alloc(this,length);\n//   }\n//  else {\n//     return MemoryAllocBlock.malloc(emulator,malloc,free,length);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/memory/Memory.java\n// --------------------------------------------------\n// /** \n//  * \u5206\u914d\u5185\u5b58\n//  * @param length \u5927\u5c0f\n//  * @param runtime <code>true</code>\u8868\u793a\u4f7f\u7528mmap\u6309\u9875\u5927\u5c0f\u5206\u914d\uff0c\u76f8\u5e94\u7684\u8c03\u7528MemoryBlock.free\u65b9\u6cd5\u5219\u4f7f\u7528munmap\u91ca\u653e\uff0c<code>false</code>\u8868\u793a\u4f7f\u7528libc.malloc\u5206\u914d\uff0c\u76f8\u5e94\u7684\u8c03\u7528MemoryBlock.free\u65b9\u6cd5\u5219\u4f7f\u7528libc.free\u91ca\u653e\n//  */\n// MemoryBlock malloc(int length,boolean runtime);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/memory/MemoryAllocBlock.java\n// --------------------------------------------------\n// public static MemoryBlock malloc(Emulator<?> emulator,Symbol malloc,Symbol free,int length){\n//   Number number=malloc.call(emulator,length);\n//   long address=emulator.is64Bit() ? number.longValue() : number.intValue() & 0xffffffffL;\n//   final UnidbgPointer pointer=UnidbgPointer.pointer(emulator,address);\n//   return new MemoryAllocBlock(pointer,emulator,free);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/MachOLoader.java\n// --------------------------------------------------\n// @Override public MemoryBlock malloc(int length,boolean runtime){\n//   if (runtime) {\n//     return MemoryBlockImpl.alloc(this,length);\n//   }\n//  else {\n//     return MemoryAllocBlock.malloc(emulator,malloc,free,length);\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MemoryBlockImpl implements MemoryBlock {\n\n    public static MemoryBlock alloc(Memory memory, int length) {<FILL_FUNCTION_BODY>}\n\n    public static MemoryBlock allocExecutable(Memory memory, int length) {\n        UnidbgPointer pointer = memory.mmap(length, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_EXEC);\n        return new MemoryBlockImpl(memory, pointer);\n    }\n\n    private final Memory memory;\n    private final UnidbgPointer pointer;\n\n    private MemoryBlockImpl(Memory memory, UnidbgPointer pointer) {\n        this.memory = memory;\n        this.pointer = pointer;\n    }\n\n    @Override\n    public UnidbgPointer getPointer() {\n        return pointer;\n    }\n\n    @Override\n    public boolean isSame(Pointer pointer) {\n        return this.pointer.equals(pointer);\n    }\n\n    @Override\n    public void free() {\n        memory.munmap(pointer.peer, (int) pointer.getSize());\n    }\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/60", "ground_truth": "\n        UnidbgPointer pointer = memory.mmap(length, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_WRITE);\n        return new MemoryBlockImpl(memory, pointer);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-api", "src", "main", "java", "com", "github", "unidbg", "memory", "MemoryBlockImpl.java"], "context_start_lineno": 0, "function_name": "alloc", "left_context": "class MemoryBlockImpl implements MemoryBlock {\n\n    public static MemoryBlock alloc(Memory memory, int length) {", "right_context": "}\n\n    public static MemoryBlock allocExecutable(Memory memory, int length) {\n        UnidbgPointer pointer = memory.mmap(length, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_EXEC);\n        return new MemoryBlockImpl(memory, pointer);\n    }\n\n    private final Memory memory;\n    private final UnidbgPointer pointer;\n\n    private MemoryBlockImpl(Memory memory, UnidbgPointer pointer) {\n        this.memory = memory;\n        this.pointer = pointer;\n    }\n\n    @Override\n    public UnidbgPointer getPointer() {\n        return pointer;\n    }\n\n    @Override\n    public boolean isSame(Pointer pointer) {\n        return this.pointer.equals(pointer);\n    }\n\n    @Override\n    public void free() {\n        memory.munmap(pointer.peer, (int) pointer.getSize());\n    }\n\n}", "class_name": "MemoryBlockImpl", "return_type": "MemoryBlock", "parameters": [{"type": "Memory", "name": "memory"}, {"type": "int", "name": "length"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/io/kaitai/MachO.java\n// --------------------------------------------------\n// public byte[] _raw_exports(){\n//   return _raw_exports;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/io/kaitai/MachO.java\n// --------------------------------------------------\n// public byte[] _raw_body(){\n//   return _raw_body;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/io/kaitai/MachO.java\n// --------------------------------------------------\n// public byte[] uuid(){\n//   return uuid;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/io/kaitai/MachO.java\n// --------------------------------------------------\n// public byte[] _raw_strs(){\n//   return _raw_strs;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/Ashmem.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length){\n//   return new byte[0];\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/ByteArrayFileIO.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length){\n//   if (offset == 0 && length == bytes.length) {\n//     return bytes;\n//   }\n//  else {\n//     byte[] data=new byte[length];\n//     System.arraycopy(bytes,offset,data,0,data.length);\n//     return data;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/SimpleFileIO.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length) throws IOException {\n//   RandomAccessFile randomAccessFile=checkOpenFile();\n//   randomAccessFile.seek(offset);\n//   int remaining=(int)(randomAccessFile.length() - randomAccessFile.getFilePointer());\n//   ByteArrayOutputStream baos=remaining <= 0 ? new ByteArrayOutputStream() : new ByteArrayOutputStream(Math.min(length,remaining));\n//   byte[] buf=new byte[1024];\n//   do {\n//     int count=length - baos.size();\n//     if (count == 0) {\n//       break;\n//     }\n//     if (count > buf.length) {\n//       count=buf.length;\n//     }\n//     int read=randomAccessFile.read(buf,0,count);\n//     if (read == -1) {\n//       break;\n//     }\n//     baos.write(buf,0,read);\n//   }\n//  while (true);\n//   return baos.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/ZeroFileIO.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length){\n//   return new byte[length];\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/file/AbstractFileIO.java\n// --------------------------------------------------\n// protected byte[] getMmapData(long addr,int offset,int length) throws IOException {\n//   throw new AbstractMethodError(getClass().getName() + \", addr=0x\" + Long.toHexString(addr)+ \", offset=\"+ offset+ \", length=\"+ length);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/ByteArrayFileIO.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length){\n//   if (offset == 0 && length == bytes.length) {\n//     return bytes;\n//   }\n//  else {\n//     byte[] data=new byte[length];\n//     System.arraycopy(bytes,offset,data,0,data.length);\n//     return data;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/JarEntryFileIO.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length){\n//   try (JarFile jarFile=new JarFile(this.jarFile);InputStream inputStream=jarFile.getInputStream(entry)){\n//     if (offset == 0 && length == entry.getSize()) {\n//       return IOUtils.toByteArray(inputStream);\n//     }\n//  else {\n//       if (inputStream.skip(offset) != offset) {\n//         throw new IllegalStateException();\n//       }\n//       return IOUtils.toByteArray(inputStream,length);\n//     }\n//   }\n//  catch (  IOException e) {\n//     throw new IllegalStateException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/SimpleFileIO.java\n// --------------------------------------------------\n// @Override protected byte[] getMmapData(long addr,int offset,int length) throws IOException {\n//   RandomAccessFile randomAccessFile=checkOpenFile();\n//   randomAccessFile.seek(offset);\n//   int remaining=(int)(randomAccessFile.length() - randomAccessFile.getFilePointer());\n//   ByteArrayOutputStream baos=remaining <= 0 ? new ByteArrayOutputStream() : new ByteArrayOutputStream(Math.min(length,remaining));\n//   byte[] buf=new byte[1024];\n//   do {\n//     int count=length - baos.size();\n//     if (count == 0) {\n//       break;\n//     }\n//     if (count > buf.length) {\n//       count=buf.length;\n//     }\n//     int read=randomAccessFile.read(buf,0,count);\n//     if (read == -1) {\n//       break;\n//     }\n//     baos.write(buf,0,read);\n//   }\n//  while (true);\n//   return baos.toByteArray();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/apk/Apk.java\n// --------------------------------------------------\n// byte[] getFileData(String path);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/apk/ApkDir.java\n// --------------------------------------------------\n// @Override public byte[] getFileData(String path){\n//   File file=new File(dir,path);\n//   if (file.canRead()) {\n//     try {\n//       return FileUtils.readFileToByteArray(file);\n//     }\n//  catch (    IOException e) {\n//       throw new IllegalStateException(e);\n//     }\n//   }\n//  else {\n//     return null;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/apk/ApkFile.java\n// --------------------------------------------------\n// @Override public byte[] getFileData(String path){\n//   try (net.dongliu.apk.parser.ApkFile apkFile=new net.dongliu.apk.parser.ApkFile(this.apkFile)){\n//     return apkFile.getFileData(path);\n//   }\n//  catch (  IOException e) {\n//     throw new IllegalStateException(e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/MapsFileIO.java\n// --------------------------------------------------\n// protected static byte[] getMapsData(Emulator<?> emulator,Collection<Module> modules,String additionContent){\n//   List<MemRegion> list=new ArrayList<>(modules.size());\n//   for (  Module module : modules) {\n//     list.addAll(module.getRegions());\n//   }\n//   Collections.sort(list);\n//   List<MapItem> items=new ArrayList<>();\n//   for (  MemRegion memRegion : list) {\n//     items.add(new MapItem(memRegion.virtualAddress,memRegion.end,memRegion.perms,0,\"b3:19\",memRegion.getName()));\n//   }\n//   long stackSize=(long)Memory.STACK_SIZE_OF_PAGE * emulator.getPageAlign();\n//   items.add(new MapItem(Memory.STACK_BASE - stackSize,Memory.STACK_BASE,UnicornConst.UC_PROT_WRITE | UnicornConst.UC_PROT_READ,0,\"00:00\",\"[stack]\"));\n//   List<MapItem> mapItems=new ArrayList<>();\n//   for (  MemoryMap memoryMap : emulator.getMemory().getMemoryMap()) {\n//     boolean contains=false;\n//     for (    MapItem item : items) {\n//       if (Math.max(memoryMap.base,item.start) <= Math.min(memoryMap.base + memoryMap.size,item.end)) {\n//         contains=true;\n//         break;\n//       }\n//     }\n//     if (!contains) {\n//       mapItems.add(new MapItem(memoryMap.base,memoryMap.base + memoryMap.size,memoryMap.prot,0,\"00:00\",\"anonymous\"));\n//     }\n//   }\n//   items.addAll(mapItems);\n//   StringBuilder builder=new StringBuilder();\n//   for (  MapItem item : items) {\n//     builder.append(item);\n//   }\n//   if (additionContent != null) {\n//     builder.append(additionContent).append('\\n');\n//   }\n//   if (log.isDebugEnabled()) {\n//     log.debug(\"\\n\" + builder);\n//   }\n//   return builder.toString().getBytes();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/pointer/UnidbgPointer.java\n// --------------------------------------------------\n// @Override public byte[] getByteArray(long offset,int arraySize){\n//   if (size > 0 && offset + arraySize > size) {\n//     throw new InvalidMemoryAccessException();\n//   }\n//   if (arraySize < 0 || arraySize >= 0x7ffffff) {\n//     throw new InvalidMemoryAccessException(\"Invalid array size: \" + arraySize);\n//   }\n//   return backend.mem_read(peer + offset,arraySize);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/apk/ApkDir.java\n// --------------------------------------------------\n// public byte[] getData(){\n//   return data;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unix/struct/StdString.java\n// --------------------------------------------------\n// public final byte[] getData(Emulator<?> emulator){\n//   return getDataPointer(emulator).getByteArray(0,(int)getDataSize());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/NSData.java\n// --------------------------------------------------\n// public byte[] getBytes(){\n//   int length=object.callObjcInt(\"length\");\n//   Pointer bytes=getBytesPointer();\n//   return bytes.getByteArray(0,length);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DnsProxyDaemon implements LocalSocketIO.SocketHandler {\n\n    private static final Log log = LogFactory.getLog(DnsProxyDaemon.class);\n\n    private static final int DnsProxyQueryResult = 222;\n    private static final int DnsProxyOperationFailed = 401;\n    private final ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n\n    private final int sdk;\n\n    DnsProxyDaemon(int sdk) {\n        this.sdk = sdk;\n    }\n\n    @Override\n    public int fstat(StatStructure stat) {\n        stat.st_size = 0;\n        stat.st_blksize = 0;\n        stat.pack();\n        return 0;\n    }\n\n    @Override\n    public byte[] handle(byte[] request) throws IOException {\n        baos.write(request);\n        byte[] data = baos.toByteArray();\n        int endIndex = -1;\n        for (int i = 0; i < data.length; i++) {\n            if (data[i] == 0) {\n                endIndex = i;\n                break;\n            }\n        }\n        if (endIndex == -1) {\n            return null;\n        }\n        baos.reset();\n        String command = new String(data, 0, endIndex);\n        if (command.startsWith(\"getaddrinfo\")) {\n            return getaddrinfo(command);\n        } else if (command.startsWith(\"gethostbyaddr\")) {\n            return gethostbyaddr(command);\n        }\n        throw new AbstractMethodError(command);\n    }\n\n    private byte[] gethostbyaddr(String command) {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n        String[] tokens = command.split(\"\\\\s\");\n        String addr = tokens[1];\n\n        try {\n            InetAddress address = InetAddress.getByName(addr);\n            String host = address.getCanonicalHostName();\n            if (host != null && host.equals(addr)) {\n                host = null;\n            }\n\n            if (host == null) {\n                throw new UnknownHostException();\n            } else {\n                buffer.put((DnsProxyQueryResult + \"\\0\").getBytes());\n                byte[] bytes = host.getBytes(StandardCharsets.UTF_8);\n                buffer.putInt(bytes.length + 1);\n                buffer.put(bytes);\n                buffer.put((byte) 0); // NULL-terminated string\n\n                buffer.putInt(0); // null to indicate we're done aliases\n\n                buffer.putInt(SocketIO.AF_INET); // addrtype\n                buffer.putInt(4); // unknown length\n\n                buffer.putInt(0); // null to indicate we're done addr_list\n            }\n        } catch (UnknownHostException e) {\n            buffer.put((DnsProxyOperationFailed + \"\\0\").getBytes());\n            buffer.putInt(0);\n        }\n\n        buffer.flip();\n        byte[] response = new byte[buffer.remaining()];\n        buffer.get(response);\n        if (log.isDebugEnabled()) {\n            Inspector.inspect(response, \"gethostbyaddr\");\n        }\n        return response;\n    }\n\n    private byte[] getaddrinfo(String command) {<FILL_FUNCTION_BODY>}\n\n    private void putAddress(ByteBuffer buffer, InetAddress address, int ai_flags, int ai_socktype, short port) {\n        if (sdk == 19) {\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(32); // sizeof(struct addrinfo)\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putInt(ai_flags);\n            buffer.putInt(SocketIO.AF_INET);\n            buffer.putInt(ai_socktype);\n            buffer.putInt(SocketIO.IPPROTO_TCP);\n            buffer.putInt(16); // ai_addrlen\n            buffer.putInt(0); // ai_canonname\n            buffer.putInt(0); // ai_addr\n            buffer.putInt(0); // ai_next\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(16); // ai_addrlen\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putShort((short) SocketIO.AF_INET); // sin_family\n            buffer.putShort(Short.reverseBytes(port)); // sin_port\n            buffer.put(Arrays.copyOf(address.getAddress(), 4));\n            buffer.put(new byte[8]); // __pad\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(0); // ai_canonname\n        } else if (sdk == 23) {\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(1); // sizeof(struct addrinfo)\n            buffer.putInt(ai_flags);\n            buffer.putInt(SocketIO.AF_INET);\n            buffer.putInt(ai_socktype);\n            buffer.putInt(SocketIO.IPPROTO_TCP);\n            buffer.putInt(16); // ai_addrlen\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putShort((short) SocketIO.AF_INET); // sin_family\n            buffer.putShort(Short.reverseBytes(port)); // sin_port\n            buffer.put(Arrays.copyOf(address.getAddress(), 4));\n            buffer.put(new byte[8]); // __pad\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(0); // ai_canonname\n        } else {\n            throw new IllegalStateException(\"sdk=\" + sdk);\n        }\n    }\n}", "metadata": {"task_id": "zhkl0228_unidbg/71", "ground_truth": "\n        String[] tokens = command.split(\"\\\\s\");\n        String hostname = tokens[1];\n        String servername = tokens[2];\n        short port = 0;\n        if (!\"^\".equals(servername)) {\n            try {\n                port = Short.parseShort(servername);\n            } catch (NumberFormatException ignored) {\n            }\n        }\n        int ai_flags = Integer.parseInt(tokens[3]);\n        int ai_family = Integer.parseInt(tokens[4]);\n        int ai_socktype = Integer.parseInt(tokens[5]);\n        int ai_protocol = Integer.parseInt(tokens[6]);\n\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        try {\n            InetAddress[] addresses = InetAddress.getAllByName(hostname);\n            if (log.isDebugEnabled()) {\n                log.debug(\"getaddrinfo hostname=\" + hostname + \", servername=\" + servername + \", addresses=\" + Arrays.toString(addresses) + \", ai_flags=\" + ai_flags + \", ai_family=\" + ai_family + \", ai_socktype=\" + ai_socktype + \", ai_protocol=\" + ai_protocol);\n            }\n            buffer.put((DnsProxyQueryResult + \"\\0\").getBytes());\n\n            for (InetAddress address : addresses) {\n                putAddress(buffer, address, ai_flags, ai_socktype, port);\n            }\n\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(0); // NULL-terminated\n        } catch (UnknownHostException e) {\n            final int EAI_NODATA = 7;\n            buffer.put((DnsProxyOperationFailed + \"\\0\").getBytes());\n            buffer.putInt(4);\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putInt(EAI_NODATA);\n        }\n\n        buffer.flip();\n        byte[] response = new byte[buffer.remaining()];\n        buffer.get(response);\n        if (log.isDebugEnabled()) {\n            Inspector.inspect(response, \"getaddrinfo\");\n        }\n        return response;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "file", "DnsProxyDaemon.java"], "context_start_lineno": 0, "function_name": "getaddrinfo", "left_context": "class DnsProxyDaemon implements LocalSocketIO.SocketHandler {\n\n    private static final Log log = LogFactory.getLog(DnsProxyDaemon.class);\n\n    private static final int DnsProxyQueryResult = 222;\n    private static final int DnsProxyOperationFailed = 401;\n    private final ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n\n    private final int sdk;\n\n    DnsProxyDaemon(int sdk) {\n        this.sdk = sdk;\n    }\n\n    @Override\n    public int fstat(StatStructure stat) {\n        stat.st_size = 0;\n        stat.st_blksize = 0;\n        stat.pack();\n        return 0;\n    }\n\n    @Override\n    public byte[] handle(byte[] request) throws IOException {\n        baos.write(request);\n        byte[] data = baos.toByteArray();\n        int endIndex = -1;\n        for (int i = 0; i < data.length; i++) {\n            if (data[i] == 0) {\n                endIndex = i;\n                break;\n            }\n        }\n        if (endIndex == -1) {\n            return null;\n        }\n        baos.reset();\n        String command = new String(data, 0, endIndex);\n        if (command.startsWith(\"getaddrinfo\")) {\n            return getaddrinfo(command);\n        } else if (command.startsWith(\"gethostbyaddr\")) {\n            return gethostbyaddr(command);\n        }\n        throw new AbstractMethodError(command);\n    }\n\n    private byte[] gethostbyaddr(String command) {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n        String[] tokens = command.split(\"\\\\s\");\n        String addr = tokens[1];\n\n        try {\n            InetAddress address = InetAddress.getByName(addr);\n            String host = address.getCanonicalHostName();\n            if (host != null && host.equals(addr)) {\n                host = null;\n            }\n\n            if (host == null) {\n                throw new UnknownHostException();\n            } else {\n                buffer.put((DnsProxyQueryResult + \"\\0\").getBytes());\n                byte[] bytes = host.getBytes(StandardCharsets.UTF_8);\n                buffer.putInt(bytes.length + 1);\n                buffer.put(bytes);\n                buffer.put((byte) 0); // NULL-terminated string\n\n                buffer.putInt(0); // null to indicate we're done aliases\n\n                buffer.putInt(SocketIO.AF_INET); // addrtype\n                buffer.putInt(4); // unknown length\n\n                buffer.putInt(0); // null to indicate we're done addr_list\n            }\n        } catch (UnknownHostException e) {\n            buffer.put((DnsProxyOperationFailed + \"\\0\").getBytes());\n            buffer.putInt(0);\n        }\n\n        buffer.flip();\n        byte[] response = new byte[buffer.remaining()];\n        buffer.get(response);\n        if (log.isDebugEnabled()) {\n            Inspector.inspect(response, \"gethostbyaddr\");\n        }\n        return response;\n    }\n\n    private byte[] getaddrinfo(String command) {", "right_context": "}\n\n    private void putAddress(ByteBuffer buffer, InetAddress address, int ai_flags, int ai_socktype, short port) {\n        if (sdk == 19) {\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(32); // sizeof(struct addrinfo)\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putInt(ai_flags);\n            buffer.putInt(SocketIO.AF_INET);\n            buffer.putInt(ai_socktype);\n            buffer.putInt(SocketIO.IPPROTO_TCP);\n            buffer.putInt(16); // ai_addrlen\n            buffer.putInt(0); // ai_canonname\n            buffer.putInt(0); // ai_addr\n            buffer.putInt(0); // ai_next\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(16); // ai_addrlen\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putShort((short) SocketIO.AF_INET); // sin_family\n            buffer.putShort(Short.reverseBytes(port)); // sin_port\n            buffer.put(Arrays.copyOf(address.getAddress(), 4));\n            buffer.put(new byte[8]); // __pad\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(0); // ai_canonname\n        } else if (sdk == 23) {\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(1); // sizeof(struct addrinfo)\n            buffer.putInt(ai_flags);\n            buffer.putInt(SocketIO.AF_INET);\n            buffer.putInt(ai_socktype);\n            buffer.putInt(SocketIO.IPPROTO_TCP);\n            buffer.putInt(16); // ai_addrlen\n            buffer.order(ByteOrder.LITTLE_ENDIAN);\n            buffer.putShort((short) SocketIO.AF_INET); // sin_family\n            buffer.putShort(Short.reverseBytes(port)); // sin_port\n            buffer.put(Arrays.copyOf(address.getAddress(), 4));\n            buffer.put(new byte[8]); // __pad\n            buffer.order(ByteOrder.BIG_ENDIAN);\n            buffer.putInt(0); // ai_canonname\n        } else {\n            throw new IllegalStateException(\"sdk=\" + sdk);\n        }\n    }\n}", "class_name": "DnsProxyDaemon", "return_type": "byte[]", "parameters": [{"type": "String", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EventMemHookNotifier {\n\n    private final EventMemHook callback;\n    private final int type;\n    private final Object user_data;\n\n    public EventMemHookNotifier(EventMemHook callback, int type, Object user_data) {\n        this.callback = callback;\n        this.type = type;\n        this.user_data = user_data;\n    }\n\n    public void handleMemoryReadFailed(Backend backend, long vaddr, int size) {<FILL_FUNCTION_BODY>}\n\n    public void handleMemoryWriteFailed(Backend backend, long vaddr, int size) {\n        if ((type & UnicornConst.UC_HOOK_MEM_WRITE_UNMAPPED) != 0) {\n            callback.hook(backend, vaddr, size, 0, user_data, EventMemHook.UnmappedType.Write);\n        }\n    }\n}", "metadata": {"task_id": "zhkl0228_unidbg/110", "ground_truth": "\n        if ((type & UnicornConst.UC_HOOK_MEM_READ_UNMAPPED) != 0) {\n            callback.hook(backend, vaddr, size, 0, user_data, EventMemHook.UnmappedType.Read);\n        }\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "backend", "dynarmic", "src", "main", "java", "com", "github", "unidbg", "arm", "backend", "dynarmic", "EventMemHookNotifier.java"], "context_start_lineno": 0, "function_name": "handleMemoryReadFailed", "left_context": "class EventMemHookNotifier {\n\n    private final EventMemHook callback;\n    private final int type;\n    private final Object user_data;\n\n    public EventMemHookNotifier(EventMemHook callback, int type, Object user_data) {\n        this.callback = callback;\n        this.type = type;\n        this.user_data = user_data;\n    }\n\n    public void handleMemoryReadFailed(Backend backend, long vaddr, int size) {", "right_context": "}\n\n    public void handleMemoryWriteFailed(Backend backend, long vaddr, int size) {\n        if ((type & UnicornConst.UC_HOOK_MEM_WRITE_UNMAPPED) != 0) {\n            callback.hook(backend, vaddr, size, 0, user_data, EventMemHook.UnmappedType.Write);\n        }\n    }\n}", "class_name": "EventMemHookNotifier", "return_type": "void", "parameters": [{"type": "Backend", "name": "backend"}, {"type": "long", "name": "vaddr"}, {"type": "int", "name": "size"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/spi/SyscallHandler.java\n// --------------------------------------------------\n// FileIO getFileIO(int fd);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java\n// --------------------------------------------------\n// @Override public FileIO getFileIO(int fd){\n//   return fdMap.get(fd);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/DumpFileIO.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/SimpleFileIO.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   SimpleFileIO dup=new SimpleFileIO(oflags,file,path);\n//   dup.debugStream=debugStream;\n//   dup.op=op;\n//   dup.oflags=oflags;\n//   return dup;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/Stdin.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/file/UdpSocket.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   return new UdpSocket(emulator);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/file/AbstractFileIO.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   throw new AbstractMethodError(getClass().getName());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/file/FileIO.java\n// --------------------------------------------------\n// FileIO dup2();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/DumpFileIO.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/SimpleFileIO.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   SimpleFileIO dup=new SimpleFileIO(oflags,file,path);\n//   dup.debugStream=debugStream;\n//   dup.op=op;\n//   dup.oflags=oflags;\n//   return dup;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/Stdin.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/Stdout.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   Stdout dup=new Stdout(0,file,path,err,callback);\n//   dup.debugStream=debugStream;\n//   dup.op=op;\n//   dup.oflags=oflags;\n//   return dup;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/file/UdpSocket.java\n// --------------------------------------------------\n// @Override public FileIO dup2(){\n//   return new UdpSocket(emulator);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Stdout extends SimpleFileIO {\n\n    private static final Log log = LogFactory.getLog(Stdout.class);\n\n    private final boolean err;\n    private final PrintStream out;\n    private final StdoutCallback callback;\n\n    public Stdout(int oflags, File file, String path, boolean err, StdoutCallback callback) {\n        super(oflags, file, path);\n        this.callback = callback;\n\n        this.err = err;\n        out = err ? System.err : System.out;\n\n        if (log.isDebugEnabled()) {\n            setDebugStream(err ? System.err : System.out);\n        }\n\n        stdio = true;\n    }\n\n    @Override\n    public void close() {\n        super.close();\n\n        IOUtils.close(output);\n    }\n\n    private RandomAccessFile output;\n\n    @Override\n    public int write(byte[] data) {\n        try {\n            if (output == null) {\n                output = new RandomAccessFile(file, \"rw\");\n                output.getChannel().truncate(0);\n            }\n\n            if (debugStream != null) {\n                debugStream.write(data);\n            }\n            if (log.isWarnEnabled()) {\n                out.write(data);\n                out.flush();\n            }\n            if (callback != null) {\n                callback.notifyOut(data, err);\n            }\n\n            output.write(data);\n            return data.length;\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Override\n    public int lseek(int offset, int whence) {\n        try {\n            switch (whence) {\n                case FileIO.SEEK_SET:\n                    output.seek(offset);\n                    return (int) output.getFilePointer();\n                case FileIO.SEEK_CUR:\n                    output.seek(output.getFilePointer() + offset);\n                    return (int) output.getFilePointer();\n            }\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n\n        return super.lseek(offset, whence);\n    }\n\n    @Override\n    public int ftruncate(int length) {\n        try {\n            output.getChannel().truncate(length);\n            return 0;\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Override\n    public FileIO dup2() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "zhkl0228_unidbg/123", "ground_truth": "\n        Stdout dup = new Stdout(0, file, path, err, callback);\n        dup.debugStream = debugStream;\n        dup.op = op;\n        dup.oflags = oflags;\n        return dup;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "file", "Stdout.java"], "context_start_lineno": 0, "function_name": "dup2", "left_context": "class Stdout extends SimpleFileIO {\n\n    private static final Log log = LogFactory.getLog(Stdout.class);\n\n    private final boolean err;\n    private final PrintStream out;\n    private final StdoutCallback callback;\n\n    public Stdout(int oflags, File file, String path, boolean err, StdoutCallback callback) {\n        super(oflags, file, path);\n        this.callback = callback;\n\n        this.err = err;\n        out = err ? System.err : System.out;\n\n        if (log.isDebugEnabled()) {\n            setDebugStream(err ? System.err : System.out);\n        }\n\n        stdio = true;\n    }\n\n    @Override\n    public void close() {\n        super.close();\n\n        IOUtils.close(output);\n    }\n\n    private RandomAccessFile output;\n\n    @Override\n    public int write(byte[] data) {\n        try {\n            if (output == null) {\n                output = new RandomAccessFile(file, \"rw\");\n                output.getChannel().truncate(0);\n            }\n\n            if (debugStream != null) {\n                debugStream.write(data);\n            }\n            if (log.isWarnEnabled()) {\n                out.write(data);\n                out.flush();\n            }\n            if (callback != null) {\n                callback.notifyOut(data, err);\n            }\n\n            output.write(data);\n            return data.length;\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Override\n    public int lseek(int offset, int whence) {\n        try {\n            switch (whence) {\n                case FileIO.SEEK_SET:\n                    output.seek(offset);\n                    return (int) output.getFilePointer();\n                case FileIO.SEEK_CUR:\n                    output.seek(output.getFilePointer() + offset);\n                    return (int) output.getFilePointer();\n            }\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n\n        return super.lseek(offset, whence);\n    }\n\n    @Override\n    public int ftruncate(int length) {\n        try {\n            output.getChannel().truncate(length);\n            return 0;\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Override\n    public FileIO dup2() {", "right_context": "}\n}", "class_name": "Stdout", "return_type": "FileIO", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ByteArrayFileIO extends BaseDarwinFileIO {\n\n    protected final byte[] bytes;\n    protected final String path;\n\n    public ByteArrayFileIO(int oflags, String path, byte[] bytes) {\n        super(oflags);\n        this.path = path;\n        this.bytes = bytes;\n    }\n\n    private int pos;\n\n    @Override\n    public void close() {\n        pos = 0;\n    }\n\n    @Override\n    public int write(byte[] data) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public int read(Backend backend, Pointer buffer, int count) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int lseek(int offset, int whence) {\n        switch (whence) {\n            case SEEK_SET:\n                pos = offset;\n                return pos;\n            case SEEK_CUR:\n                pos += offset;\n                return pos;\n            case SEEK_END:\n                pos = bytes.length + offset;\n                return pos;\n        }\n        return super.lseek(offset, whence);\n    }\n\n    @Override\n    protected byte[] getMmapData(long addr, int offset, int length) {\n        if (offset == 0 && length == bytes.length) {\n            return bytes;\n        } else {\n            byte[] data = new byte[length];\n            System.arraycopy(bytes, offset, data, 0, data.length);\n            return data;\n        }\n    }\n\n    @Override\n    public int ioctl(Emulator<?> emulator, long request, long argp) {\n        return 0;\n    }\n\n    @Override\n    public int fstat(Emulator<?> emulator, StatStructure stat) {\n        int blockSize = emulator.getPageAlign();\n        stat.st_dev = 1;\n        stat.st_mode = (short) (IO.S_IFREG | 0x777);\n        stat.setSize(bytes.length);\n        stat.setBlockCount(bytes.length / blockSize);\n        stat.st_blksize = blockSize;\n        stat.st_ino = 7;\n        stat.st_uid = 0;\n        stat.st_gid = 0;\n        stat.setLastModification(System.currentTimeMillis());\n        stat.pack();\n        return 0;\n    }\n\n    @Override\n    public String toString() {\n        return path;\n    }\n\n    @Override\n    public String getPath() {\n        return path;\n    }\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/159", "ground_truth": "\n        if (pos >= bytes.length) {\n            return 0;\n        }\n\n        int remain = bytes.length - pos;\n        if (count > remain) {\n            count = remain;\n        }\n        buffer.write(0, bytes, pos, count);\n        pos += count;\n        return count;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-ios", "src", "main", "java", "com", "github", "unidbg", "ios", "file", "ByteArrayFileIO.java"], "context_start_lineno": 0, "function_name": "read", "left_context": "class ByteArrayFileIO extends BaseDarwinFileIO {\n\n    protected final byte[] bytes;\n    protected final String path;\n\n    public ByteArrayFileIO(int oflags, String path, byte[] bytes) {\n        super(oflags);\n        this.path = path;\n        this.bytes = bytes;\n    }\n\n    private int pos;\n\n    @Override\n    public void close() {\n        pos = 0;\n    }\n\n    @Override\n    public int write(byte[] data) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public int read(Backend backend, Pointer buffer, int count) {", "right_context": "}\n\n    @Override\n    public int lseek(int offset, int whence) {\n        switch (whence) {\n            case SEEK_SET:\n                pos = offset;\n                return pos;\n            case SEEK_CUR:\n                pos += offset;\n                return pos;\n            case SEEK_END:\n                pos = bytes.length + offset;\n                return pos;\n        }\n        return super.lseek(offset, whence);\n    }\n\n    @Override\n    protected byte[] getMmapData(long addr, int offset, int length) {\n        if (offset == 0 && length == bytes.length) {\n            return bytes;\n        } else {\n            byte[] data = new byte[length];\n            System.arraycopy(bytes, offset, data, 0, data.length);\n            return data;\n        }\n    }\n\n    @Override\n    public int ioctl(Emulator<?> emulator, long request, long argp) {\n        return 0;\n    }\n\n    @Override\n    public int fstat(Emulator<?> emulator, StatStructure stat) {\n        int blockSize = emulator.getPageAlign();\n        stat.st_dev = 1;\n        stat.st_mode = (short) (IO.S_IFREG | 0x777);\n        stat.setSize(bytes.length);\n        stat.setBlockCount(bytes.length / blockSize);\n        stat.st_blksize = blockSize;\n        stat.st_ino = 7;\n        stat.st_uid = 0;\n        stat.st_gid = 0;\n        stat.setLastModification(System.currentTimeMillis());\n        stat.pack();\n        return 0;\n    }\n\n    @Override\n    public String toString() {\n        return path;\n    }\n\n    @Override\n    public String getPath() {\n        return path;\n    }\n\n}", "class_name": "ByteArrayFileIO", "return_type": "int", "parameters": [{"type": "Backend", "name": "backend"}, {"type": "Pointer", "name": "buffer"}, {"type": "int", "name": "count"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PipedSocketIO extends TcpSocket implements FileIO {\n\n    private final PipedInputStream pipedInputStream = new PipedInputStream();\n\n    public PipedSocketIO(Emulator<?> emulator) {\n        super(emulator);\n        this.inputStream = new BufferedInputStream(pipedInputStream);\n        this.outputStream = new PipedOutputStream();\n    }\n\n    public void connectPeer(PipedSocketIO io) {\n        try {\n            ((PipedOutputStream) this.outputStream).connect(io.pipedInputStream);\n            ((PipedOutputStream) io.outputStream).connect(this.pipedInputStream);\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Override\n    public int sendto(byte[] data, int flags, Pointer dest_addr, int addrlen) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/179", "ground_truth": "\n        flags &= ~MSG_NOSIGNAL;\n        final int MSG_EOR = 0x80;\n        if (flags == MSG_EOR && dest_addr == null && addrlen == 0) {\n            return write(data);\n        }\n\n        return super.sendto(data, flags, dest_addr, addrlen);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "file", "PipedSocketIO.java"], "context_start_lineno": 0, "function_name": "sendto", "left_context": "class PipedSocketIO extends TcpSocket implements FileIO {\n\n    private final PipedInputStream pipedInputStream = new PipedInputStream();\n\n    public PipedSocketIO(Emulator<?> emulator) {\n        super(emulator);\n        this.inputStream = new BufferedInputStream(pipedInputStream);\n        this.outputStream = new PipedOutputStream();\n    }\n\n    public void connectPeer(PipedSocketIO io) {\n        try {\n            ((PipedOutputStream) this.outputStream).connect(io.pipedInputStream);\n            ((PipedOutputStream) io.outputStream).connect(this.pipedInputStream);\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Override\n    public int sendto(byte[] data, int flags, Pointer dest_addr, int addrlen) {", "right_context": "}\n\n}", "class_name": "PipedSocketIO", "return_type": "int", "parameters": [{"type": "byte[]", "name": "data"}, {"type": "int", "name": "flags"}, {"type": "Pointer", "name": "dest_addr"}, {"type": "int", "name": "addrlen"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/AndroidSyscallHandler.java\n// --------------------------------------------------\n// @Override protected FileResult<AndroidFileIO> createFdDir(int oflags,String pathname){\n//   List<DirectoryFileIO.DirectoryEntry> list=new ArrayList<>();\n//   for (  Map.Entry<Integer,AndroidFileIO> entry : fdMap.entrySet()) {\n//     list.add(new DirectoryFileIO.DirectoryEntry(DirectoryFileIO.DirentType.DT_LNK,entry.getKey().toString()));\n//   }\n//   return FileResult.<AndroidFileIO>success(new DirectoryFileIO(oflags,pathname,list.toArray(new DirectoryFileIO.DirectoryEntry[0])));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/AndroidSyscallHandler.java\n// --------------------------------------------------\n// @Override protected FileResult<AndroidFileIO> createTaskDir(Emulator<AndroidFileIO> emulator,int oflags,String pathname){\n//   return FileResult.<AndroidFileIO>success(new DirectoryFileIO(oflags,pathname,new DirectoryFileIO.DirectoryEntry(false,Integer.toString(emulator.getPid()))));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/AndroidResolver.java\n// --------------------------------------------------\n// @Override public FileResult<AndroidFileIO> resolve(Emulator<AndroidFileIO> emulator,String path,int oflags){\n//   FileSystem<AndroidFileIO> fileSystem=emulator.getFileSystem();\n//   File rootDir=fileSystem.getRootDir();\n//   if (path.startsWith(LogCatFileIO.LOG_PATH_PREFIX)) {\n//     try {\n//       File log=new File(rootDir,path);\n//       File logDir=log.getParentFile();\n//       if (!logDir.exists() && !logDir.mkdirs()) {\n//         throw new IOException(\"mkdirs failed: \" + logDir);\n//       }\n//       if (!log.exists() && !log.createNewFile()) {\n//         throw new IOException(\"create new file failed: \" + log);\n//       }\n//       return FileResult.<AndroidFileIO>success(new LogCatFileIO(emulator,oflags,log,path));\n//     }\n//  catch (    IOException e) {\n//       throw new IllegalStateException(e);\n//     }\n//   }\n//   if (\".\".equals(path)) {\n//     return FileResult.success(createFileIO(fileSystem.createWorkDir(),path,oflags));\n//   }\n//   String androidResource=FilenameUtils.normalize(\"/android/sdk\" + sdk + \"/\"+ path,true);\n//   URL url=getClass().getResource(androidResource);\n//   if (url != null) {\n//     return FileResult.fallback(createFileIO(url,path,oflags));\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/test/java/com/github/unidbg/android/ida/AndroidServer64Test.java\n// --------------------------------------------------\n// @Override public FileResult<AndroidFileIO> resolve(Emulator<AndroidFileIO> emulator,String pathname,int oflags){\n//   final int attachPid=emulator.getPid() - 1;\n//   if ((\"/proc/\" + attachPid + \"/maps\").equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new MapsFileIO(emulator,oflags,pathname,emulator.getMemory().getLoadedModules()));\n//   }\n//   if ((\"/proc/\" + attachPid + \"/cmdline\").equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new ByteArrayFileIO(oflags,pathname,(\"/system/bin/\" + executable.getName()).getBytes()));\n//   }\n//   if ((\"/proc/\" + attachPid + \"/task/\"+ attachPid+ \"/comm\").equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new ByteArrayFileIO(oflags,pathname,(executable.getName() + \"\\n\").getBytes()));\n//   }\n//   if ((\"/proc/\" + attachPid + \"/exe\").equals(pathname) || \"/system/bin/android_server64_7.4\".equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new SimpleFileIO(oflags,executable,pathname));\n//   }\n//   if (\"/proc\".equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new DirectoryFileIO(oflags,pathname,new DirectoryFileIO.DirectoryEntry(false,Integer.toString(attachPid))));\n//   }\n//   if ((\"/proc/\" + attachPid).equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new DirectoryFileIO(oflags,pathname,new DirectoryFileIO.DirectoryEntry(true,\"maps\"),new DirectoryFileIO.DirectoryEntry(true,\"cmdline\"),new DirectoryFileIO.DirectoryEntry(true,\"exe\"),new DirectoryFileIO.DirectoryEntry(false,\"task\")));\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/test/java/com/github/unidbg/android/ida/AndroidServerTest.java\n// --------------------------------------------------\n// @Override public FileResult<AndroidFileIO> resolve(Emulator<AndroidFileIO> emulator,String pathname,int oflags){\n//   final int attachPid=emulator.getPid() - 1;\n//   if ((\"/proc/\" + attachPid + \"/maps\").equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new MapsFileIO(emulator,oflags,pathname,emulator.getMemory().getLoadedModules()));\n//   }\n//   if ((\"/proc/\" + attachPid + \"/cmdline\").equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new ByteArrayFileIO(oflags,pathname,(\"/system/bin/\" + executable.getName()).getBytes()));\n//   }\n//   if ((\"/proc/\" + attachPid + \"/task/\"+ attachPid+ \"/comm\").equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new ByteArrayFileIO(oflags,pathname,(executable.getName() + \"\\n\").getBytes()));\n//   }\n//   if ((\"/proc/\" + attachPid + \"/exe\").equals(pathname) || \"/system/bin/android_server_7.4\".equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new SimpleFileIO(oflags,executable,pathname));\n//   }\n//   if (\"/proc\".equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new DirectoryFileIO(oflags,pathname,new DirectoryFileIO.DirectoryEntry(false,Integer.toString(attachPid))));\n//   }\n//   if ((\"/proc/\" + attachPid).equals(pathname)) {\n//     return FileResult.<AndroidFileIO>success(new DirectoryFileIO(oflags,pathname,new DirectoryFileIO.DirectoryEntry(true,\"maps\"),new DirectoryFileIO.DirectoryEntry(true,\"cmdline\"),new DirectoryFileIO.DirectoryEntry(true,\"exe\"),new DirectoryFileIO.DirectoryEntry(false,\"task\")));\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LinuxFileSystem extends BaseFileSystem<AndroidFileIO> implements FileSystem<AndroidFileIO>, IOConstants {\n\n    public LinuxFileSystem(Emulator<AndroidFileIO> emulator, File rootDir) {\n        super(emulator, rootDir);\n    }\n\n    @Override\n    public FileResult<AndroidFileIO> open(String pathname, int oflags) {<FILL_FUNCTION_BODY>}\n\n    public LogCatHandler getLogCatHandler() {\n        return null;\n    }\n\n    @Override\n    protected void initialize(File rootDir) throws IOException {\n        super.initialize(rootDir);\n\n        FileUtils.forceMkdir(new File(rootDir, \"system\"));\n        FileUtils.forceMkdir(new File(rootDir, \"data\"));\n    }\n\n    @Override\n    public AndroidFileIO createSimpleFileIO(File file, int oflags, String path) {\n        return new SimpleFileIO(oflags, file, path);\n    }\n\n    @Override\n    public AndroidFileIO createDirectoryFileIO(File file, int oflags, String path) {\n        return new DirectoryFileIO(oflags, path, file);\n    }\n\n    @Override\n    protected AndroidFileIO createStdin(int oflags) {\n        return new Stdin(oflags);\n    }\n\n    @Override\n    protected AndroidFileIO createStdout(int oflags, File stdio, String pathname) {\n        return new Stdout(oflags, stdio, pathname, IO.STDERR.equals(pathname), null);\n    }\n\n    @Override\n    protected boolean hasCreat(int oflags) {\n        return (oflags & O_CREAT) != 0;\n    }\n\n    @Override\n    protected boolean hasDirectory(int oflags) {\n        return (oflags & O_DIRECTORY) != 0;\n    }\n\n    @Override\n    protected boolean hasAppend(int oflags) {\n        return (oflags & O_APPEND) != 0;\n    }\n\n    @Override\n    protected boolean hasExcl(int oflags) {\n        return (oflags & O_EXCL) != 0;\n    }\n}", "metadata": {"task_id": "zhkl0228_unidbg/252", "ground_truth": "\n        if (\"/dev/tty\".equals(pathname)) {\n            return FileResult.<AndroidFileIO>success(new NullFileIO(pathname));\n        }\n        if (\"/proc/self/maps\".equals(pathname) || (\"/proc/\" + emulator.getPid() + \"/maps\").equals(pathname) ||\n                (\"/proc/self/task/\" + emulator.getPid() + \"/maps\").equals(pathname)) {\n            return FileResult.<AndroidFileIO>success(new MapsFileIO(emulator, oflags, pathname, emulator.getMemory().getLoadedModules()));\n        }\n\n        return super.open(pathname, oflags);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "file", "linux", "LinuxFileSystem.java"], "context_start_lineno": 0, "function_name": "open", "left_context": "class LinuxFileSystem extends BaseFileSystem<AndroidFileIO> implements FileSystem<AndroidFileIO>, IOConstants {\n\n    public LinuxFileSystem(Emulator<AndroidFileIO> emulator, File rootDir) {\n        super(emulator, rootDir);\n    }\n\n    @Override\n    public FileResult<AndroidFileIO> open(String pathname, int oflags) {", "right_context": "}\n\n    public LogCatHandler getLogCatHandler() {\n        return null;\n    }\n\n    @Override\n    protected void initialize(File rootDir) throws IOException {\n        super.initialize(rootDir);\n\n        FileUtils.forceMkdir(new File(rootDir, \"system\"));\n        FileUtils.forceMkdir(new File(rootDir, \"data\"));\n    }\n\n    @Override\n    public AndroidFileIO createSimpleFileIO(File file, int oflags, String path) {\n        return new SimpleFileIO(oflags, file, path);\n    }\n\n    @Override\n    public AndroidFileIO createDirectoryFileIO(File file, int oflags, String path) {\n        return new DirectoryFileIO(oflags, path, file);\n    }\n\n    @Override\n    protected AndroidFileIO createStdin(int oflags) {\n        return new Stdin(oflags);\n    }\n\n    @Override\n    protected AndroidFileIO createStdout(int oflags, File stdio, String pathname) {\n        return new Stdout(oflags, stdio, pathname, IO.STDERR.equals(pathname), null);\n    }\n\n    @Override\n    protected boolean hasCreat(int oflags) {\n        return (oflags & O_CREAT) != 0;\n    }\n\n    @Override\n    protected boolean hasDirectory(int oflags) {\n        return (oflags & O_DIRECTORY) != 0;\n    }\n\n    @Override\n    protected boolean hasAppend(int oflags) {\n        return (oflags & O_APPEND) != 0;\n    }\n\n    @Override\n    protected boolean hasExcl(int oflags) {\n        return (oflags & O_EXCL) != 0;\n    }\n}", "class_name": "LinuxFileSystem", "return_type": "FileResult<AndroidFileIO>", "parameters": [{"type": "String", "name": "pathname"}, {"type": "int", "name": "oflags"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/SimpleARM64Unwinder.java\n// --------------------------------------------------\n// @Override public Frame createFrame(UnidbgPointer ip,UnidbgPointer fp){\n//   if (ip != null) {\n//     if (ip.peer == emulator.getReturnAddress()) {\n//       return new Frame(ip,null);\n//     }\n//     ip=ip.share(-4,0);\n//     return new Frame(ip,fp);\n//   }\n//  else {\n//     return null;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/SimpleARM64Unwinder.java\n// --------------------------------------------------\n// private Frame initFrame(Emulator<?> emulator){\n//   UnidbgPointer ip=UnidbgPointer.register(emulator,Arm64Const.UC_ARM64_REG_LR);\n//   UnidbgPointer fp=UnidbgPointer.register(emulator,Arm64Const.UC_ARM64_REG_FP);\n//   return createFrame(ip,fp);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/SimpleARMUnwinder.java\n// --------------------------------------------------\n// @Override public Frame createFrame(UnidbgPointer ip,UnidbgPointer fp){\n//   if (ip != null) {\n//     if (ip.peer == emulator.getReturnAddress()) {\n//       return new Frame(ip,null);\n//     }\n//     return new Frame(ARM.adjust_ip(ip),fp);\n//   }\n//  else {\n//     return null;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/SimpleARMUnwinder.java\n// --------------------------------------------------\n// private Frame initFrame(Emulator<?> emulator){\n//   UnidbgPointer ip=UnidbgPointer.register(emulator,ArmConst.UC_ARM_REG_LR);\n//   UnidbgPointer fp=UnidbgPointer.register(emulator,ArmConst.UC_ARM_REG_R7);\n//   return createFrame(ip,fp);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/Unwinder.java\n// --------------------------------------------------\n// public abstract Frame createFrame(UnidbgPointer ip,UnidbgPointer fp);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/net/fornwall/jelf/ArmExIdx.java\n// --------------------------------------------------\n// private Frame arm_exidx_decode(Emulator<?> emulator,byte[] instruction,Unwinder unwinder,DwarfCursor context){\n//   context.loc[UNW_ARM_PC]=null;\n//   arm_exbuf_data edata=new arm_exbuf_data();\n//   for (int i=0; i < instruction.length; i++) {\n//     int op=instruction[i] & 0xff;\n//     if ((op & 0xc0) == 0x00) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_DATA_POP;\n//       edata.data=((op & 0x3f) << 2) + 4;\n//     }\n//  else     if ((op & 0xc0) == 0x40) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_DATA_PUSH;\n//       edata.data=((op & 0x3f) << 2) + 4;\n//     }\n//  else     if ((op & 0xf0) == 0x80) {\n//       int op2=instruction[++i] & 0xff;\n//       if (op == 0x80 && op2 == 0x0) {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_REFUSED;\n//       }\n//  else {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_REG_POP;\n//         edata.data=((op & 0xf) << 8) | op2;\n//         edata.data=edata.data << 4;\n//       }\n//     }\n//  else     if ((op & 0xf0) == 0x90) {\n//       if (op == 0x9d || op == 0x9f) {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_RESERVED;\n//       }\n//  else {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_REG_TO_SP;\n//         edata.data=op & 0xf;\n//       }\n//     }\n//  else     if ((op & 0xf0) == 0xa0) {\n//       int end=op & 0x7;\n//       edata.data=(1 << (end + 1)) - 1;\n//       edata.data=edata.data << 4;\n//       if ((op & 0x8) != 0)       edata.data|=1 << 14;\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_REG_POP;\n//     }\n//  else     if (op == ARM_EXTBL_OP_FINISH) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_FINISH;\n//     }\n//  else     if (op == 0xb1) {\n//       int op2=instruction[++i] & 0xff;\n//       if (op2 == 0 || (op2 & 0xf0) != 0) {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_RESERVED;\n//       }\n//  else {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_REG_POP;\n//         edata.data=op2 & 0xf;\n//       }\n//     }\n//  else     if (op == 0xb2) {\n//       int offset=0;\n//       byte b, shift=0;\n//       do {\n//         b=instruction[++i];\n//         offset|=(b & 0x7f) << shift;\n//         shift+=7;\n//       }\n//  while ((b & 0x80) != 0);\n//       edata.data=offset * 4 + 0x204;\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_DATA_POP;\n//     }\n//  else     if (op == 0xb3 || op == 0xc8 || op == 0xc9) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_VFP_POP;\n//       edata.data=instruction[++i] & 0xff;\n//       if (op == 0xc8) {\n//         edata.data|=ARM_EXIDX_VFP_SHIFT_16;\n//       }\n//       if (op != 0xb3) {\n//         edata.data|=ARM_EXIDX_VFP_DOUBLE;\n//       }\n//     }\n//  else     if ((op & 0xf8) == 0xb8 || (op & 0xf8) == 0xd0) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_VFP_POP;\n//       edata.data=0x80 | (op & 0x7);\n//       if ((op & 0xf8) == 0xd0) {\n//         edata.data|=ARM_EXIDX_VFP_DOUBLE;\n//       }\n//     }\n//  else     if (op >= 0xc0 && op <= 0xc5) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_WREG_POP;\n//       edata.data=0xa0 | (op & 0x7);\n//     }\n//  else     if (op == 0xc6) {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_WREG_POP;\n//       edata.data=instruction[++i] & 0xff;\n//     }\n//  else     if (op == 0xc7) {\n//       int op2=instruction[++i] & 0xff;\n//       if (op2 == 0 || (op2 & 0xf0) != 0) {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_RESERVED;\n//       }\n//  else {\n//         edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_WCGR_POP;\n//         edata.data=op2 & 0xf;\n//       }\n//     }\n//  else {\n//       edata.cmd=arm_exbuf_cmd.ARM_EXIDX_CMD_RESERVED;\n//     }\n//     if (!arm_exidx_apply_cmd(emulator,edata,context)) {\n//       return null;\n//     }\n//   }\n//   Long pc=context.loc[UNW_ARM_PC];\n//   if (pc != null) {\n//     return unwinder.createFrame(UnidbgPointer.pointer(emulator,pc),UnidbgPointer.pointer(emulator,context.cfa));\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/net/fornwall/jelf/ArmExIdx.java\n// --------------------------------------------------\n// public Frame arm_exidx_step(Emulator<?> emulator,Unwinder unwinder,Module module,long fun,DwarfCursor context){\n//   int value=ARM_EXIDX_CANT_UNWIND;\n//   buffer.position(0);\n//   long offset=virtualAddress;\n//   int entry=0;\n//   while (buffer.hasRemaining()) {\n//     int key=buffer.getInt() << 1 >> 1;\n//     if (key == 0) {\n//       continue;\n//     }\n//     key+=offset;\n//     if (fun >= key) {\n//       offset+=8;\n//       entry=key;\n//       value=buffer.getInt();\n//     }\n//  else {\n//       break;\n//     }\n//   }\n//   if (value == ARM_EXIDX_CANT_UNWIND) {\n//     return null;\n//   }\n//   if (fun == entry) {\n//     UnidbgPointer ip=UnidbgPointer.register(emulator,ArmConst.UC_ARM_REG_LR);\n//     UnidbgPointer fp=UnidbgPointer.register(emulator,ArmConst.UC_ARM_REG_SP);\n//     Frame frame=unwinder.createFrame(ip,fp);\n//     if (frame != null) {\n//       context.ip=frame.ip.peer;\n//     }\n//     return frame;\n//   }\n//   byte[] instruction;\n//   boolean compact=(value & ARM_EXIDX_COMPACT) != 0;\n//   int index;\n//   ByteBuffer bb;\n//   if (compact) {\n//     index=(value >> 24) & 0xf;\n//     if (index != 0) {\n//       throw new IllegalStateException(\"compact model must be Su16 / __aeabi_unwind_cpp_pr0\");\n//     }\n//     bb=ByteBuffer.allocate(4);\n//     bb.putInt(value);\n//     instruction=Arrays.copyOfRange(bb.array(),1,4);\n//   }\n//  else {\n//     value=value << 1 >> 1;\n//     long addr=value + offset - 4;\n//     UnidbgPointer pointer=UnidbgPointer.pointer(emulator,module.base + addr);\n//     assert pointer != null;\n//     value=pointer.getInt(0);\n//     if ((value & ARM_EXIDX_COMPACT) == 0) {\n//       long personality=((long)value << 1 >> 1) + addr;\n//       int data=pointer.getInt(4);\n//       int n=(data >> 24) & 0xff;\n//       bb=ByteBuffer.allocate((n + 1) * 4);\n//       bb.putInt(data);\n//       for (int i=0; i < n; i++) {\n//         bb.putInt(pointer.getInt((i + 2) * 4));\n//       }\n//       instruction=Arrays.copyOfRange(bb.array(),1,bb.capacity());\n//       if (log.isDebugEnabled()) {\n//         log.debug(\"unwind generic model: \" + module + \", entry=0x\"+ Integer.toHexString(entry)+ \", personality=0x\"+ Long.toHexString(personality));\n//       }\n//     }\n//  else {\n//       index=(value >> 24) & 0xf;\n// switch (index) {\n// case 0:\n//         bb=ByteBuffer.allocate(4);\n//       bb.putInt(value);\n//     instruction=Arrays.copyOfRange(bb.array(),1,bb.capacity());\n//   break;\n// case 1:\n// case 2:\n// int n=(value >> 16) & 0xff;\n// bb=ByteBuffer.allocate((n + 1) * 4);\n// bb.putInt(value);\n// for (int i=0; i < n; i++) {\n// bb.putInt(pointer.getInt((i + 1) * 4));\n// }\n// instruction=Arrays.copyOfRange(bb.array(),2,bb.capacity());\n// break;\n// default :\n// throw new UnsupportedOperationException(\"index=\" + index);\n// }\n// }\n// }\n// if (instruction.length > 0 && (instruction[instruction.length - 1] & 0xff) != ARM_EXTBL_OP_FINISH) {\n// byte[] tmp=new byte[instruction.length + 1];\n// System.arraycopy(instruction,0,tmp,0,instruction.length);\n// tmp[instruction.length]=(byte)ARM_EXTBL_OP_FINISH;\n// instruction=tmp;\n// }\n// if (log.isDebugEnabled()) {\n// log.debug(Inspector.inspectString(instruction,\"unwind entry=0x\" + Integer.toHexString(entry) + \", value=0x\"+ Integer.toHexString(value)+ \", fun=0x\"+ Long.toHexString(fun)+ \", module=\"+ module.name));\n// }\n// return arm_exidx_decode(emulator,instruction,unwinder,context);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/net/fornwall/jelf/GnuEhFrameHeader.java\n// --------------------------------------------------\n// public Frame dwarf_step(Emulator<?> emulator,Unwinder unwinder,Module module,long fun,DwarfCursor context){\n//   TableEntry entry=search(fun);\n//   if (entry == null) {\n//     return null;\n//   }\n//   FDE fde=dwarf_get_fde(entry.address,fun);\n//   if (log.isDebugEnabled()) {\n//     log.debug(\"dwarf_step entry=\" + entry + \", fun=0x\"+ Long.toHexString(fun)+ \", fde=\"+ fde+ \", module=\"+ module);\n//   }\n//   dwarf_loc_t loc=fde == null ? null : dwarf_get_loc(emulator,fde,fun);\n//   if (loc != null) {\n//     UnidbgPointer vsp;\n// switch (loc.cfa_rule.type) {\n// case DW_LOC_REGISTER:\n//       vsp=UnidbgPointer.pointer(emulator,context.loc[(int)loc.cfa_rule.values[0]] + loc.cfa_rule.values[1]);\n//     assert vsp != null;\n//   context.loc[emulator.is32Bit() ? DwarfCursor32.SP : DwarfCursor64.SP]=vsp.peer;\n// if (log.isDebugEnabled()) {\n//   log.debug(\"dwarf_step cfa = \" + (emulator.is32Bit() ? \"r\" : \"x\") + loc.cfa_rule.values[0]+ \" + \"+ loc.cfa_rule.values[1]+ \" => 0x\"+ Long.toHexString(vsp.peer));\n// }\n// break;\n// case DW_LOC_VAL_EXPRESSION:\n// default :\n// throw new UnsupportedOperationException(\"dwarf_step type=\" + loc.cfa_rule.type);\n// }\n// for (int i=0; i < loc.reg_rules.length; i++) {\n// dwarf_loc_rule_t rule=loc.reg_rules[i];\n// if (rule == null) {\n// continue;\n// }\n// switch (rule.type) {\n// case DW_LOC_OFFSET:\n// UnidbgPointer value=vsp.getPointer(rule.values[0]);\n// context.loc[i]=value == null ? 0L : value.peer;\n// if (log.isDebugEnabled()) {\n// log.debug(\"dwarf_step \" + (emulator.is32Bit() ? \"r\" : \"x\") + i+ \" + (\"+ rule.values[0]+ \") => 0x\"+ Long.toHexString(context.loc[i]));\n// }\n// break;\n// case DW_LOC_VAL_OFFSET:\n// case DW_LOC_REGISTER:\n// case DW_LOC_EXPRESSION:\n// case DW_LOC_VAL_EXPRESSION:\n// case DW_LOC_UNDEFINED:\n// default :\n// throw new UnsupportedOperationException(\"dwarf_step type=\" + rule.type);\n// }\n// }\n// long ip=context.loc[fde.cie.return_address_register];\n// if (log.isDebugEnabled()) {\n// log.debug(\"dwarf_step cfa=0x\" + Long.toHexString(vsp.peer) + \", ip=0x\"+ Long.toHexString(ip));\n// }\n// context.ip=ip;\n// context.cfa=vsp.peer;\n// Frame frame=unwinder.createFrame(UnidbgPointer.pointer(emulator,ip),UnidbgPointer.pointer(emulator,context.cfa));\n// if (frame != null) {\n// context.ip=frame.ip.peer;\n// }\n// return frame;\n// }\n// return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/AndroidARMUnwinder.java\n// --------------------------------------------------\n// @Override protected Frame unw_step(Emulator<?> emulator,Frame frame){\n//   try {\n//     LinuxModule module=(LinuxModule)emulator.getMemory().findModuleByAddress(this.context.ip);\n//     MemoizedObject<GnuEhFrameHeader> ehFrameHeader=module == null ? null : module.ehFrameHeader;\n//     if (ehFrameHeader != null) {\n//       long fun=this.context.ip - module.base;\n//       GnuEhFrameHeader frameHeader=ehFrameHeader.getValue();\n//       Frame ret=frameHeader == null ? null : frameHeader.dwarf_step(emulator,this,module,fun,context);\n//       if (ret != null) {\n//         return ret;\n//       }\n//     }\n//     MemoizedObject<ArmExIdx> armExIdx=module == null ? null : module.armExIdx;\n//     if (armExIdx != null) {\n//       long fun=this.context.ip - module.base;\n//       return armExIdx.getValue().arm_exidx_step(emulator,this,module,fun,context);\n//     }\n//   }\n//  catch (  RuntimeException exception) {\n//     log.warn(\"unw_step\",exception);\n//   }\n// catch (  IOException e) {\n//     throw new IllegalStateException(e);\n//   }\n//   return super.unw_step(emulator,frame);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/SimpleARM64Unwinder.java\n// --------------------------------------------------\n// @Override protected Frame unw_step(Emulator<?> emulator,Frame frame){\n//   if (frame == null) {\n//     return initFrame(emulator);\n//   }\n//   if (frame.fp == null) {\n//     System.err.println(\"fp is null\");\n//     return null;\n//   }\n//   UnidbgPointer ip=frame.fp.getPointer(8);\n//   UnidbgPointer fp=frame.fp.getPointer(0);\n//   return createFrame(ip,fp);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/SimpleARMUnwinder.java\n// --------------------------------------------------\n// @Override protected Frame unw_step(Emulator<?> emulator,Frame frame){\n//   if (frame == null) {\n//     return initFrame(emulator);\n//   }\n//   UnidbgPointer sp=UnidbgPointer.register(emulator,ArmConst.UC_ARM_REG_SP);\n//   if (frame.fp == null || frame.fp.peer < sp.peer) {\n//     System.err.println(\"fp=\" + frame.fp + \", sp=\"+ sp);\n//     return null;\n//   }\n//   UnidbgPointer ip=frame.fp.getPointer(4);\n//   UnidbgPointer fp=frame.fp.getPointer(0);\n//   return createFrame(ip,fp);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unwind/Unwinder.java\n// --------------------------------------------------\n// protected abstract Frame unw_step(Emulator<?> emulator,Frame frame);\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AndroidARM64Unwinder extends SimpleARM64Unwinder {\n\n    private static final Log log = LogFactory.getLog(AndroidARM64Unwinder.class);\n\n    private final DwarfCursor context;\n\n    public AndroidARM64Unwinder(Emulator<?> emulator) {\n        super(emulator);\n        this.context = new DwarfCursor64(emulator);\n    }\n\n    @Override\n    protected Frame unw_step(Emulator<?> emulator, Frame frame) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/253", "ground_truth": "\n        try {\n            LinuxModule module = (LinuxModule) emulator.getMemory().findModuleByAddress(this.context.ip);\n            MemoizedObject<GnuEhFrameHeader> ehFrameHeader = module == null ? null : module.ehFrameHeader;\n            if (ehFrameHeader != null) {\n                long fun = this.context.ip - module.base;\n                GnuEhFrameHeader frameHeader = ehFrameHeader.getValue();\n                Frame ret = frameHeader == null ? null : frameHeader.dwarf_step(emulator, this, module, fun, context);\n                if (ret != null) {\n                    return ret;\n                }\n            }\n        } catch (RuntimeException exception) {\n            log.warn(\"unw_step\", exception);\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n\n        return super.unw_step(emulator, frame);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "android", "AndroidARM64Unwinder.java"], "context_start_lineno": 0, "function_name": "unw_step", "left_context": "class AndroidARM64Unwinder extends SimpleARM64Unwinder {\n\n    private static final Log log = LogFactory.getLog(AndroidARM64Unwinder.class);\n\n    private final DwarfCursor context;\n\n    public AndroidARM64Unwinder(Emulator<?> emulator) {\n        super(emulator);\n        this.context = new DwarfCursor64(emulator);\n    }\n\n    @Override\n    protected Frame unw_step(Emulator<?> emulator, Frame frame) {", "right_context": "}\n\n}", "class_name": "AndroidARM64Unwinder", "return_type": "Frame", "parameters": [{"type": "Emulator<?>", "name": "emulator"}, {"type": "Frame", "name": "frame"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TraceMemoryHook implements ReadHook, WriteHook, TraceHook {\n\n    private final boolean read;\n    private final DateFormat dateFormat = new SimpleDateFormat(\"[HH:mm:ss SSS]\");\n\n    public TraceMemoryHook(boolean read) {\n        this.read = read;\n    }\n\n    private PrintStream redirect;\n    TraceReadListener traceReadListener;\n    TraceWriteListener traceWriteListener;\n\n    private UnHook unHook;\n\n    @Override\n    public void onAttach(UnHook unHook) {\n        if (this.unHook != null) {\n            throw new IllegalStateException();\n        }\n        this.unHook = unHook;\n    }\n\n    @Override\n    public void detach() {\n        if (unHook != null) {\n            unHook.unhook();\n            unHook = null;\n        }\n    }\n\n    @Override\n    public void stopTrace() {\n        detach();\n        IOUtils.close(redirect);\n        redirect = null;\n    }\n\n    @Override\n    public void setRedirect(PrintStream redirect) {\n        this.redirect = redirect;\n    }\n\n    @Override\n    public void hook(Backend backend, long address, int size, Object user) {<FILL_FUNCTION_BODY>}\n\n    private void printMsg(String type, Emulator<?> emulator, long address, int size, String value) {\n        RegisterContext context = emulator.getContext();\n        UnidbgPointer pc = context.getPCPointer();\n        UnidbgPointer lr = context.getLRPointer();\n        PrintStream out = System.out;\n        if (redirect != null) {\n            out = redirect;\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(type).append(Long.toHexString(address));\n        if (size > 0) {\n            builder.append(\", data size = \").append(size).append(\", data value = \").append(value);\n        }\n        builder.append(\", PC=\").append(pc).append(\", LR=\").append(lr);\n        out.println(builder);\n    }\n\n    @Override\n    public void hook(Backend backend, long address, int size, long value, Object user) {\n        if (read) {\n            return;\n        }\n\n        try {\n            Emulator<?> emulator = (Emulator<?>) user;\n            if (traceWriteListener == null || traceWriteListener.onWrite(emulator, address, size, value)) {\n                String str;\n                switch (size) {\n                    case 1:\n                        str = String.format(\"0x%02x\", value & 0xff);\n                        break;\n                    case 2:\n                        str = String.format(\"0x%04x\", value & 0xffff);\n                        break;\n                    case 4:\n                        str = String.format(\"0x%08x\", value & 0xffffffffL);\n                        break;\n                    case 8:\n                        str = String.format(\"0x%016x\", value);\n                        break;\n                    default:\n                        str = \"0x\" + Long.toHexString(value);\n                        break;\n                }\n                printMsg(dateFormat.format(new Date()) + \" Memory WRITE at 0x\", emulator, address, size, str);\n            }\n        } catch (BackendException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/269", "ground_truth": "\n        if (!read) {\n            return;\n        }\n\n        try {\n            byte[] data = size == 0 ? new byte[0] : backend.mem_read(address, size);\n            String value;\n            switch (data.length) {\n                case 1:\n                    value = String.format(\"0x%02x\", ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).get() & 0xff);\n                    break;\n                case 2:\n                    value = String.format(\"0x%04x\", ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).getShort() & 0xffff);\n                    break;\n                case 4:\n                    value = String.format(\"0x%08x\", ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).getInt() & 0xffffffffL);\n                    break;\n                case 8:\n                    value = String.format(\"0x%016x\", ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).getLong());\n                    break;\n                default:\n                    value = \"0x\" + Hex.encodeHexString(data);\n                    break;\n            }\n            Emulator<?> emulator = (Emulator<?>) user;\n            if (traceReadListener == null || traceReadListener.onRead(emulator, address, data, value)) {\n                printMsg(dateFormat.format(new Date()) + \" Memory READ at 0x\", emulator, address, size, value);\n            }\n        } catch (BackendException e) {\n            throw new IllegalStateException(e);\n        }\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-api", "src", "main", "java", "com", "github", "unidbg", "TraceMemoryHook.java"], "context_start_lineno": 0, "function_name": "hook", "left_context": "class TraceMemoryHook implements ReadHook, WriteHook, TraceHook {\n\n    private final boolean read;\n    private final DateFormat dateFormat = new SimpleDateFormat(\"[HH:mm:ss SSS]\");\n\n    public TraceMemoryHook(boolean read) {\n        this.read = read;\n    }\n\n    private PrintStream redirect;\n    TraceReadListener traceReadListener;\n    TraceWriteListener traceWriteListener;\n\n    private UnHook unHook;\n\n    @Override\n    public void onAttach(UnHook unHook) {\n        if (this.unHook != null) {\n            throw new IllegalStateException();\n        }\n        this.unHook = unHook;\n    }\n\n    @Override\n    public void detach() {\n        if (unHook != null) {\n            unHook.unhook();\n            unHook = null;\n        }\n    }\n\n    @Override\n    public void stopTrace() {\n        detach();\n        IOUtils.close(redirect);\n        redirect = null;\n    }\n\n    @Override\n    public void setRedirect(PrintStream redirect) {\n        this.redirect = redirect;\n    }\n\n    @Override\n    public void hook(Backend backend, long address, int size, Object user) {", "right_context": "}\n\n    private void printMsg(String type, Emulator<?> emulator, long address, int size, String value) {\n        RegisterContext context = emulator.getContext();\n        UnidbgPointer pc = context.getPCPointer();\n        UnidbgPointer lr = context.getLRPointer();\n        PrintStream out = System.out;\n        if (redirect != null) {\n            out = redirect;\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(type).append(Long.toHexString(address));\n        if (size > 0) {\n            builder.append(\", data size = \").append(size).append(\", data value = \").append(value);\n        }\n        builder.append(\", PC=\").append(pc).append(\", LR=\").append(lr);\n        out.println(builder);\n    }\n\n    @Override\n    public void hook(Backend backend, long address, int size, long value, Object user) {\n        if (read) {\n            return;\n        }\n\n        try {\n            Emulator<?> emulator = (Emulator<?>) user;\n            if (traceWriteListener == null || traceWriteListener.onWrite(emulator, address, size, value)) {\n                String str;\n                switch (size) {\n                    case 1:\n                        str = String.format(\"0x%02x\", value & 0xff);\n                        break;\n                    case 2:\n                        str = String.format(\"0x%04x\", value & 0xffff);\n                        break;\n                    case 4:\n                        str = String.format(\"0x%08x\", value & 0xffffffffL);\n                        break;\n                    case 8:\n                        str = String.format(\"0x%016x\", value);\n                        break;\n                    default:\n                        str = \"0x\" + Long.toHexString(value);\n                        break;\n                }\n                printMsg(dateFormat.format(new Date()) + \" Memory WRITE at 0x\", emulator, address, size, str);\n            }\n        } catch (BackendException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n}", "class_name": "TraceMemoryHook", "return_type": "void", "parameters": [{"type": "Backend", "name": "backend"}, {"type": "long", "name": "address"}, {"type": "int", "name": "size"}, {"type": "Object", "name": "user"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LocalDarwinUdpSocket extends LocalUdpSocket {\n\n    private static final Log log = LogFactory.getLog(LocalDarwinUdpSocket.class);\n\n    public LocalDarwinUdpSocket(Emulator<?> emulator) {\n        super(emulator);\n    }\n\n    @Override\n    public int connect(Pointer addr, int addrlen) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    protected int connect(String path) {\n        emulator.getMemory().setErrno(UnixEmulator.EPERM);\n        return -1;\n    }\n\n    @Override\n    public int getattrlist(AttrList attrList, Pointer attrBuf, int attrBufSize) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public int getdirentries64(Pointer buf, int bufSize) {\n        throw new UnsupportedOperationException();\n    }\n}", "metadata": {"task_id": "zhkl0228_unidbg/287", "ground_truth": "\n        String path = addr.getString(2);\n        log.debug(\"connect path=\" + path);\n\n        return connect(path);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-ios", "src", "main", "java", "com", "github", "unidbg", "ios", "file", "LocalDarwinUdpSocket.java"], "context_start_lineno": 0, "function_name": "connect", "left_context": "class LocalDarwinUdpSocket extends LocalUdpSocket {\n\n    private static final Log log = LogFactory.getLog(LocalDarwinUdpSocket.class);\n\n    public LocalDarwinUdpSocket(Emulator<?> emulator) {\n        super(emulator);\n    }\n\n    @Override\n    public int connect(Pointer addr, int addrlen) {", "right_context": "}\n\n    @Override\n    protected int connect(String path) {\n        emulator.getMemory().setErrno(UnixEmulator.EPERM);\n        return -1;\n    }\n\n    @Override\n    public int getattrlist(AttrList attrList, Pointer attrBuf, int attrBufSize) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public int getdirentries64(Pointer buf, int bufSize) {\n        throw new UnsupportedOperationException();\n    }\n}", "class_name": "LocalDarwinUdpSocket", "return_type": "int", "parameters": [{"type": "Pointer", "name": "addr"}, {"type": "int", "name": "addrlen"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/DyldAllImageInfos32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"version\",\"infoArrayCount\",\"infoArray\",\"notification\",\"processDetachedFromSharedRegion\",\"libSystemInitialized\",\"dyldImageLoadAddress\",\"jitInfo\",\"dyldVersion\",\"errorMessage\",\"terminationFlags\",\"coreSymbolicationShmPage\",\"systemOrderFlag\",\"uuidArrayCount\",\"uuidArray\",\"dyldAllImageInfosAddress\",\"initialImageCount\",\"errorKind\",\"errorClientOfDylibPath\",\"errorTargetDylibPath\",\"errorSymbol\",\"sharedCacheSlide\",\"sharedCacheUUID\",\"reserved\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/DyldAllImageInfos64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"version\",\"infoArrayCount\",\"infoArray\",\"notification\",\"processDetachedFromSharedRegion\",\"libSystemInitialized\",\"dyldImageLoadAddress\",\"jitInfo\",\"dyldVersion\",\"errorMessage\",\"terminationFlags\",\"coreSymbolicationShmPage\",\"systemOrderFlag\",\"uuidArrayCount\",\"uuidArray\",\"dyldAllImageInfosAddress\",\"initialImageCount\",\"errorKind\",\"errorClientOfDylibPath\",\"errorTargetDylibPath\",\"errorSymbol\",\"sharedCacheSlide\",\"sharedCacheUUID\",\"reserved\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/DyldImageInfo32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"imageLoadAddress\",\"imageFilePath\",\"imageFileModDate\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/DyldImageInfo64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"imageLoadAddress\",\"imageFilePath\",\"imageFileModDate\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/EProc32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"e_paddr\",\"e_sess\",\"e_pcred\",\"e_ucred\",\"e_vm\",\"e_ppid\",\"e_pgid\",\"e_jobc\",\"e_tdev\",\"e_tpgid\",\"e_tsess\",\"e_wmesg\",\"e_xsize\",\"e_xrssize\",\"e_xccount\",\"e_xswrss\",\"e_flag\",\"e_login\",\"e_spare\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/EProc64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"e_paddr\",\"e_sess\",\"e_pcred\",\"e_ucred\",\"e_vm\",\"e_ppid\",\"e_pgid\",\"e_jobc\",\"e_tdev\",\"e_tpgid\",\"e_tsess\",\"e_wmesg\",\"e_xsize\",\"e_xrssize\",\"e_xccount\",\"e_xswrss\",\"e_flag\",\"e_login\",\"e_spare\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/ExternProc32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"__p_forw\",\"__p_back\",\"p_vmspace\",\"p_sigacts\",\"p_flag\",\"p_stat\",\"p_pid\",\"p_oppid\",\"p_dupfd\",\"user_stack\",\"exit_thread\",\"p_debugger\",\"sigwait\",\"p_estcpu\",\"p_cpticks\",\"p_pctcpu\",\"p_wchan\",\"p_wmesg\",\"p_swtime\",\"p_slptime\",\"p_realtimer\",\"p_rtime\",\"p_uticks\",\"p_sticks\",\"p_iticks\",\"p_traceflag\",\"p_tracep\",\"p_siglist\",\"p_textvp\",\"p_holdcnt\",\"p_sigmask\",\"p_sigignore\",\"p_sigcatch\",\"p_priority\",\"p_usrpri\",\"p_nice\",\"p_comm\",\"p_pgrp\",\"p_addr\",\"p_xstat\",\"p_acflag\",\"p_ru\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/IfData.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"ifi_type\",\"ifi_typelen\",\"ifi_physical\",\"ifi_addrlen\",\"ifi_hdrlen\",\"ifi_recvquota\",\"ifi_xmitquota\",\"ifi_unused1\",\"ifi_mtu\",\"ifi_metric\",\"ifi_baudrate\",\"ifi_ipackets\",\"ifi_ierrors\",\"ifi_opackets\",\"ifi_oerrors\",\"ifi_collisions\",\"ifi_ibytes\",\"ifi_obytes\",\"ifi_imcasts\",\"ifi_omcasts\",\"ifi_iqdrops\",\"ifi_noproto\",\"ifi_recvtiming\",\"ifi_xmittiming\",\"ifi_lastchange\",\"ifi_unused2\",\"ifi_hwassist\",\"ifi_reserved1\",\"ifi_reserved2\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/IfMsgHeader.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"ifm_msglen\",\"ifm_version\",\"ifm_type\",\"ifm_addrs\",\"ifm_flags\",\"ifm_index\",\"ifm_data\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/KInfoProc32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"kp_proc\",\"kp_eproc\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/KInfoProc64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"kp_proc\",\"kp_eproc\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/Pcred32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"pc_lock\",\"pc_ucred\",\"p_ruid\",\"p_svuid\",\"p_rgid\",\"p_svgid\",\"p_refcnt\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/Pcred64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"pc_lock\",\"pc_ucred\",\"p_ruid\",\"p_svuid\",\"p_rgid\",\"p_svgid\",\"p_refcnt\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/SockAddrDL.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"sdl_len\",\"sdl_family\",\"sdl_index\",\"sdl_type\",\"sdl_nlen\",\"sdl_alen\",\"sdl_slen\",\"sdl_data\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/TaskBasicInfo64V2.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"suspendCount\",\"virtualSize\",\"residentSize\",\"userTime\",\"systemTime\",\"policy\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/TaskDyldInfo.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"all_image_info_addr\",\"all_image_info_size\",\"all_image_info_format\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/TaskVmInfo64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"virtual_size\",\"region_count\",\"page_size\",\"resident_size\",\"resident_size_peak\",\"device\",\"device_peak\",\"internal\",\"internal_peak\",\"external\",\"external_peak\",\"reusable\",\"reusable_peak\",\"purgeable_volatile_pmap\",\"purgeable_volatile_resident\",\"purgeable_volatile_virtual\",\"compressed\",\"compressed_peak\",\"compressed_lifetime\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/Ucred.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"cr_ref\",\"cr_uid\",\"cr_ngroups\",\"cr_groups\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/VmSpace32.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"vm_refcnt\",\"vm_shm\",\"vm_rssize\",\"vm_swrss\",\"vm_tsize\",\"vm_dsize\",\"vm_ssize\",\"vm_taddr\",\"vm_daddr\",\"vm_maxsaddr\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/sysctl/VmSpace64.java\n// --------------------------------------------------\n// @Override protected List<String> getFieldOrder(){\n//   return Arrays.asList(\"vm_refcnt\",\"vm_shm\",\"vm_rssize\",\"vm_swrss\",\"vm_tsize\",\"vm_dsize\",\"vm_ssize\",\"vm_taddr\",\"vm_daddr\",\"vm_maxsaddr\");\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ExternProc64 extends UnidbgStructure implements DarwinSyscall {\n\n    public ExternProc64(Pointer p) {\n        super(p);\n    }\n\n    public long __p_forw;\n    public long __p_back;\n\n    public long p_vmspace; /* Address space. */\n    public long p_sigacts; /* Signal actions, state (PROC ONLY). */\n\n    public int p_flag; /* P_* flags. */\n    public byte p_stat; /* S* process status. */\n\n    public int p_pid; /* Process identifier. */\n    public int p_oppid; /* Save parent pid during ptrace. XXX */\n\n    public int p_dupfd; /* Sideways return value from fdopen. XXX */\n\n    public long user_stack; /* where user stack was allocated */\n    public long exit_thread; /* XXX Which thread is exiting? */\n\n    public int p_debugger; /* allow to debug */\n    public boolean sigwait; /* indication to suspend */\n    public int p_estcpu; /* Time averaged value of p_cpticks. */\n    public int p_cpticks; /* Ticks of cpu time. */\n    public int p_pctcpu; /* %cpu for this process during p_swtime */\n\n    public long p_wchan; /* Sleep address. */\n    public long p_wmesg; /* Reason for sleep. */\n\n    public int p_swtime; /* Time swapped in or out. */\n    public int p_slptime; /* Time since last blocked. */\n\n    public ITimerVal64 p_realtimer; /* Alarm timer. */\n    public TimeVal64 p_rtime; /* Real time. */\n\n    public long p_uticks; /* Statclock hits in user mode. */\n    public long p_sticks; /* Statclock hits in system mode. */\n    public long p_iticks; /* Statclock hits processing intr. */\n\n    public int p_traceflag; /* Kernel trace points. */\n    public long p_tracep; /* Trace to vnode. */\n    public int p_siglist;\n    public long p_textvp; /* Vnode of executable. */\n    public int p_holdcnt; /* If non-zero, don't swap. */\n\n    public int p_sigmask;\n    public int p_sigignore; /* Signals being ignored. */\n    public int p_sigcatch; /* Signals being caught by user. */\n\n    public byte p_priority; /* Process priority. */\n    public byte p_usrpri; /* User-priority based on p_cpu and p_nice. */\n    public byte p_nice; /* Process \"nice\" value. */\n    public byte[] p_comm = new byte[MAXCOMLEN + 1];\n\n    public long p_pgrp; /* Pointer to process group. */\n    public long p_addr; /* Kernel virtual addr of u-area (PROC ONLY). */\n    public short p_xstat; /* Exit status for wait; also stop signal. */\n    public short p_acflag; /* Accounting flags. */\n    public long p_ru; /* Exit information. XXX */\n\n    @Override\n    protected List<String> getFieldOrder() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "zhkl0228_unidbg/337", "ground_truth": "\n        return Arrays.asList(\"__p_forw\", \"__p_back\", \"p_vmspace\", \"p_sigacts\", \"p_flag\", \"p_stat\",\n                \"p_pid\", \"p_oppid\", \"p_dupfd\", \"user_stack\", \"exit_thread\", \"p_debugger\",\n                \"sigwait\", \"p_estcpu\", \"p_cpticks\", \"p_pctcpu\", \"p_wchan\", \"p_wmesg\",\n                \"p_swtime\", \"p_slptime\", \"p_realtimer\", \"p_rtime\", \"p_uticks\", \"p_sticks\", \"p_iticks\",\n                \"p_traceflag\", \"p_tracep\", \"p_siglist\", \"p_textvp\", \"p_holdcnt\", \"p_sigmask\", \"p_sigignore\", \"p_sigcatch\",\n                \"p_priority\", \"p_usrpri\", \"p_nice\", \"p_comm\", \"p_pgrp\", \"p_addr\", \"p_xstat\", \"p_acflag\", \"p_ru\");\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-ios", "src", "main", "java", "com", "github", "unidbg", "ios", "struct", "sysctl", "ExternProc64.java"], "context_start_lineno": 0, "function_name": "getFieldOrder", "left_context": "class ExternProc64 extends UnidbgStructure implements DarwinSyscall {\n\n    public ExternProc64(Pointer p) {\n        super(p);\n    }\n\n    public long __p_forw;\n    public long __p_back;\n\n    public long p_vmspace; /* Address space. */\n    public long p_sigacts; /* Signal actions, state (PROC ONLY). */\n\n    public int p_flag; /* P_* flags. */\n    public byte p_stat; /* S* process status. */\n\n    public int p_pid; /* Process identifier. */\n    public int p_oppid; /* Save parent pid during ptrace. XXX */\n\n    public int p_dupfd; /* Sideways return value from fdopen. XXX */\n\n    public long user_stack; /* where user stack was allocated */\n    public long exit_thread; /* XXX Which thread is exiting? */\n\n    public int p_debugger; /* allow to debug */\n    public boolean sigwait; /* indication to suspend */\n    public int p_estcpu; /* Time averaged value of p_cpticks. */\n    public int p_cpticks; /* Ticks of cpu time. */\n    public int p_pctcpu; /* %cpu for this process during p_swtime */\n\n    public long p_wchan; /* Sleep address. */\n    public long p_wmesg; /* Reason for sleep. */\n\n    public int p_swtime; /* Time swapped in or out. */\n    public int p_slptime; /* Time since last blocked. */\n\n    public ITimerVal64 p_realtimer; /* Alarm timer. */\n    public TimeVal64 p_rtime; /* Real time. */\n\n    public long p_uticks; /* Statclock hits in user mode. */\n    public long p_sticks; /* Statclock hits in system mode. */\n    public long p_iticks; /* Statclock hits processing intr. */\n\n    public int p_traceflag; /* Kernel trace points. */\n    public long p_tracep; /* Trace to vnode. */\n    public int p_siglist;\n    public long p_textvp; /* Vnode of executable. */\n    public int p_holdcnt; /* If non-zero, don't swap. */\n\n    public int p_sigmask;\n    public int p_sigignore; /* Signals being ignored. */\n    public int p_sigcatch; /* Signals being caught by user. */\n\n    public byte p_priority; /* Process priority. */\n    public byte p_usrpri; /* User-priority based on p_cpu and p_nice. */\n    public byte p_nice; /* Process \"nice\" value. */\n    public byte[] p_comm = new byte[MAXCOMLEN + 1];\n\n    public long p_pgrp; /* Pointer to process group. */\n    public long p_addr; /* Kernel virtual addr of u-area (PROC ONLY). */\n    public short p_xstat; /* Exit status for wait; also stop signal. */\n    public short p_acflag; /* Accounting flags. */\n    public long p_ru; /* Exit information. XXX */\n\n    @Override\n    protected List<String> getFieldOrder() {", "right_context": "}\n}", "class_name": "ExternProc64", "return_type": "List<String>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/Shorty.java\n// --------------------------------------------------\n// private static Class<?> getPrimitiveType(char c){\n// switch (c) {\n// case 'B':\n//     return byte.class;\n// case 'C':\n//   return char.class;\n// case 'I':\n// return int.class;\n// case 'S':\n// return short.class;\n// case 'Z':\n// return boolean.class;\n// case 'F':\n// return float.class;\n// case 'D':\n// return double.class;\n// case 'J':\n// return long.class;\n// default :\n// return null;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/Shorty.java\n// --------------------------------------------------\n// public Class<?> decodeType(ClassLoader classLoader){\n//   if (classLoader == null) {\n//     classLoader=Shorty.class.getClassLoader();\n//   }\n//   Class<?> clazz=getPrimitiveType(getType());\n//   if (clazz != null) {\n//     return clazz;\n//   }\n//   int dimensions=this.arrayDimensions;\n//   if (dimensions > 0) {\n//     try {\n//       clazz=binaryName == null ? getPrimitiveType(type) : classLoader.loadClass(binaryName.replace('/','.'));\n//       if (clazz == null) {\n//         throw new IllegalStateException(\"type=\" + type);\n//       }\n//       while (dimensions-- > 0) {\n//         clazz=Array.newInstance(clazz,1).getClass();\n//       }\n//       return clazz;\n//     }\n//  catch (    ClassNotFoundException ignored) {\n//     }\n//     return null;\n//   }\n//  else {\n//     if (binaryName == null) {\n//       throw new IllegalStateException(\"binaryName is null\");\n//     }\n//     try {\n//       clazz=classLoader.loadClass(binaryName.replace('/','.'));\n//     }\n//  catch (    ClassNotFoundException ignored) {\n//     }\n//     return clazz;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/jni/ProxyClassMapper.java\n// --------------------------------------------------\n// /** \n//  * map class name to new class\n//  */\n// Class<?> map(String className);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/jni/ProxyReflectedMethod.java\n// --------------------------------------------------\n// public Class<?> getReturnType(){\n//   return method.getReturnType();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/jni/ProxyReflectedConstructor.java\n// --------------------------------------------------\n// public Class<?> getDeclaringClass(){\n//   return constructor.getDeclaringClass();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/jni/ProxyReflectedMethod.java\n// --------------------------------------------------\n// public Class<?> getDeclaringClass(){\n//   return method.getDeclaringClass();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ProxyClassLoader {\n\n    private final ClassLoader classLoader;\n\n    ProxyClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n    }\n\n    private ProxyClassMapper classNameMapper;\n\n    final void setClassNameMapper(ProxyClassMapper classNameMapper) {\n        this.classNameMapper = classNameMapper;\n    }\n\n    final Class<?> loadClass(String name) throws ClassNotFoundException {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/338", "ground_truth": "\n        Class<?> newClass = classNameMapper == null ? null : classNameMapper.map(name);\n        if (newClass != null) {\n            return newClass;\n        }\n        return classLoader.loadClass(name);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "android", "dvm", "jni", "ProxyClassLoader.java"], "context_start_lineno": 0, "function_name": "loadClass", "left_context": "class ProxyClassLoader {\n\n    private final ClassLoader classLoader;\n\n    ProxyClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n    }\n\n    private ProxyClassMapper classNameMapper;\n\n    final void setClassNameMapper(ProxyClassMapper classNameMapper) {\n        this.classNameMapper = classNameMapper;\n    }\n\n    final Class<?> loadClass(String name) throws ClassNotFoundException {", "right_context": "}\n\n}", "class_name": "ProxyClassLoader", "return_type": "Class<?>", "parameters": [{"type": "String", "name": "name"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SetThreadCommand implements GdbStubCommand {\n\n    private static final Log log = LogFactory.getLog(SetThreadCommand.class);\n\n    @Override\n    public boolean processCommand(Emulator<?> emulator, GdbStub stub, String command) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/361", "ground_truth": "\n        char type = command.charAt(1);\n        int thread = Integer.parseInt(command.substring(2), 16);\n        if (log.isDebugEnabled()) {\n            log.debug(\"Set thread type=\" + type + \", thread=\" + thread);\n        }\n        switch (type) {\n            case 'c':\n            case 'g':\n                stub.makePacketAndSend(\"OK\");\n                break;\n            default:\n                stub.makePacketAndSend(\"E22\");\n                break;\n        }\n        return true;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-api", "src", "main", "java", "com", "github", "unidbg", "debugger", "gdb", "SetThreadCommand.java"], "context_start_lineno": 0, "function_name": "processCommand", "left_context": "class SetThreadCommand implements GdbStubCommand {\n\n    private static final Log log = LogFactory.getLog(SetThreadCommand.class);\n\n    @Override\n    public boolean processCommand(Emulator<?> emulator, GdbStub stub, String command) {", "right_context": "}\n\n}", "class_name": "SetThreadCommand", "return_type": "boolean", "parameters": [{"type": "Emulator<?>", "name": "emulator"}, {"type": "GdbStub", "name": "stub"}, {"type": "String", "name": "command"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PtLoadData {\n\n    private final ByteBuffer buffer;\n    private final long dataSize;\n\n    PtLoadData(ByteBuffer buffer, long dataSize) {\n        this.buffer = buffer;\n        this.dataSize = dataSize;\n    }\n\n    public long getDataSize() {\n        return dataSize;\n    }\n\n    public void writeTo(final Pointer ptr) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/389", "ground_truth": "\n        Pointer pointer = ptr;\n        byte[] buf = new byte[Math.min(0x1000, buffer.remaining())];\n        while (buffer.hasRemaining()) {\n            int write = Math.min(buf.length, buffer.remaining());\n            buffer.get(buf, 0, write);\n            pointer.write(0, buf, 0, write);\n            pointer = pointer.share(write);\n        }\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "net", "fornwall", "jelf", "PtLoadData.java"], "context_start_lineno": 0, "function_name": "writeTo", "left_context": "class PtLoadData {\n\n    private final ByteBuffer buffer;\n    private final long dataSize;\n\n    PtLoadData(ByteBuffer buffer, long dataSize) {\n        this.buffer = buffer;\n        this.dataSize = dataSize;\n    }\n\n    public long getDataSize() {\n        return dataSize;\n    }\n\n    public void writeTo(final Pointer ptr) {", "right_context": "}\n\n}", "class_name": "PtLoadData", "return_type": "void", "parameters": [{"type": "Pointer", "name": "ptr"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/PointerArg.java\n// --------------------------------------------------\n// Pointer getPointer();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/Symbol.java\n// --------------------------------------------------\n// public Pointer createPointer(Emulator<?> emulator){\n//   return UnidbgPointer.pointer(emulator,getAddress());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARM64Emulator.java\n// --------------------------------------------------\n// @Override public Pointer getStackPointer(){\n//   return UnidbgPointer.register(this,Arm64Const.UC_ARM64_REG_SP);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java\n// --------------------------------------------------\n// @Override public Pointer getStackPointer(){\n//   return UnidbgPointer.register(this,ArmConst.UC_ARM_REG_SP);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/hook/BaseHook.java\n// --------------------------------------------------\n// protected Pointer createReplacePointer(final ReplaceCallback callback,final Pointer backup,boolean enablePostCall){\n//   SvcMemory svcMemory=emulator.getSvcMemory();\n//   return svcMemory.registerSvc(emulator.is64Bit() ? new Arm64Hook(enablePostCall){\n//     private final Stack<Object> context=new Stack<>();\n//     @Override protected HookStatus hook(    Emulator<?> emulator){\n//       return callback.onCall(emulator,new Arm64HookContext(context,emulator.<EditableArm64RegisterContext>getContext()),backup.getLong(0));\n//     }\n//     @Override public void handlePostCallback(    Emulator<?> emulator){\n//       super.handlePostCallback(emulator);\n//       EditableArm64RegisterContext registerContext=emulator.getContext();\n//       callback.postCall(emulator,new Arm64HookContext(context,registerContext));\n//     }\n//   }\n//  : new ArmHook(enablePostCall){\n//     private final Stack<Object> context=new Stack<>();\n//     @Override protected HookStatus hook(    Emulator<?> emulator){\n//       return callback.onCall(emulator,new Arm32HookContext(context,emulator.<EditableArm32RegisterContext>getContext()),backup.getInt(0) & 0xffffffffL);\n//     }\n//     @Override public void handlePostCallback(    Emulator<?> emulator){\n//       super.handlePostCallback(emulator);\n//       EditableArm32RegisterContext registerContext=emulator.getContext();\n//       callback.postCall(emulator,new Arm32HookContext(context,registerContext));\n//     }\n//   }\n// );\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/pointer/UnidbgPointer.java\n// --------------------------------------------------\n// @Override public Pointer getPointer(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unix/struct/StdString.java\n// --------------------------------------------------\n// public abstract Pointer getDataPointer(Emulator<?> emulator);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unix/struct/StdString32.java\n// --------------------------------------------------\n// public Pointer getDataPointer(Emulator<?> emulator){\n//   boolean isTiny=(this.isTiny & 1) == 0;\n//   if (isTiny) {\n//     return getPointer().share(1);\n//   }\n//  else {\n//     return UnidbgPointer.pointer(emulator,value);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-api/src/main/java/com/github/unidbg/unix/struct/StdString64.java\n// --------------------------------------------------\n// @Override public Pointer getDataPointer(Emulator<?> emulator){\n//   boolean isTiny=(this.isTiny & 1) == 0;\n//   if (isTiny) {\n//     return getPointer().share(1);\n//   }\n//  else {\n//     return UnidbgPointer.pointer(emulator,value);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/hook/FishHook.java\n// --------------------------------------------------\n// private Pointer createRebinding(String symbol,ReplaceCallback callback,boolean enablePostCall){\n//   Memory memory=emulator.getMemory();\n//   Pointer symbolPointer=memory.malloc(symbol.length() + 1,false).getPointer();\n//   symbolPointer.setString(0,symbol);\n//   final Pointer originCall=memory.malloc(emulator.getPointerSize(),false).getPointer();\n//   Pointer replaceCall=createReplacePointer(callback,originCall,enablePostCall);\n//   Pointer rebinding=memory.malloc(emulator.getPointerSize() * 3,false).getPointer();\n//   rebinding.setPointer(0,symbolPointer);\n//   rebinding.setPointer(emulator.getPointerSize(),replaceCall);\n//   rebinding.setPointer(2L * emulator.getPointerSize(),originCall);\n//   return rebinding;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/NSArray.java\n// --------------------------------------------------\n// @Override public Pointer getPointer(){\n//   return object.getPointer();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/NSData.java\n// --------------------------------------------------\n// @Override public Pointer getPointer(){\n//   return object.getPointer();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/NSData.java\n// --------------------------------------------------\n// public Pointer getBytesPointer(){\n//   return object.call(\"bytes\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/NSString.java\n// --------------------------------------------------\n// @Override public Pointer getPointer(){\n//   return object.getPointer();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/ObjC.java\n// --------------------------------------------------\n// public abstract Pointer registerName(String selectorName);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/objc/ObjcImpl.java\n// --------------------------------------------------\n// @Override public Pointer registerName(String selectorName){\n//   Number number=_sel_registerName.call(emulator,selectorName);\n//   Pointer pointer=UnidbgPointer.pointer(emulator,number);\n//   if (pointer == null) {\n//     throw new IllegalStateException(selectorName);\n//   }\n//   return pointer;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/kernel/Pthread.java\n// --------------------------------------------------\n// public Pointer getErrno(){\n//   return getPointer().share(fieldOffset(\"errno\"));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/kernel/Pthread.java\n// --------------------------------------------------\n// public abstract Pointer getErrnoPointer(Emulator<?> emulator);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/kernel/Pthread32.java\n// --------------------------------------------------\n// @Override public Pointer getErrnoPointer(Emulator<?> emulator){\n//   return UnidbgPointer.pointer(emulator,errno);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// unidbg/unidbg-ios/src/main/java/com/github/unidbg/ios/struct/kernel/Pthread64.java\n// --------------------------------------------------\n// @Override public Pointer getErrnoPointer(Emulator<?> emulator){\n//   return UnidbgPointer.pointer(emulator,errno);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Bitmap extends DvmObject<BufferedImage> {\n\n    public Bitmap(VM vm, BufferedImage image) {\n        super(vm.resolveClass(\"android/graphics/Bitmap\"), image);\n    }\n\n    public Pointer lockPixels(Emulator<?> emulator, BufferedImage image, ByteBuffer buffer) {<FILL_FUNCTION_BODY>}\n\n    public void unlockPixels() {\n        freeMemoryBlock(null);\n    }\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/395", "ground_truth": "\n        Pointer pointer = allocateMemoryBlock(emulator, image.getWidth() * image.getHeight() * 4);\n        pointer.write(0, buffer.array(), 0, buffer.capacity());\n        return pointer;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "android", "dvm", "api", "Bitmap.java"], "context_start_lineno": 0, "function_name": "lockPixels", "left_context": "class Bitmap extends DvmObject<BufferedImage> {\n\n    public Bitmap(VM vm, BufferedImage image) {\n        super(vm.resolveClass(\"android/graphics/Bitmap\"), image);\n    }\n\n    public Pointer lockPixels(Emulator<?> emulator, BufferedImage image, ByteBuffer buffer) {", "right_context": "}\n\n    public void unlockPixels() {\n        freeMemoryBlock(null);\n    }\n\n}", "class_name": "Bitmap", "return_type": "Pointer", "parameters": [{"type": "Emulator<?>", "name": "emulator"}, {"type": "BufferedImage", "name": "image"}, {"type": "ByteBuffer", "name": "buffer"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DumpFileIO extends BaseAndroidFileIO implements AndroidFileIO {\n\n    private final int fd;\n\n    public DumpFileIO(int fd) {\n        super(0);\n\n        this.fd = fd;\n    }\n\n    @Override\n    public int write(byte[] data) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void close() {\n    }\n\n    @Override\n    public FileIO dup2() {\n        return this;\n    }\n\n    @Override\n    public int fstat(Emulator<?> emulator, com.github.unidbg.file.linux.StatStructure stat) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public int getdents64(Pointer dirp, int size) {\n        throw new UnsupportedOperationException();\n    }\n}", "metadata": {"task_id": "zhkl0228_unidbg/473", "ground_truth": "\n        Inspector.inspect(data, \"Dump for fd: \" + fd);\n        return data.length;\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "file", "DumpFileIO.java"], "context_start_lineno": 0, "function_name": "write", "left_context": "class DumpFileIO extends BaseAndroidFileIO implements AndroidFileIO {\n\n    private final int fd;\n\n    public DumpFileIO(int fd) {\n        super(0);\n\n        this.fd = fd;\n    }\n\n    @Override\n    public int write(byte[] data) {", "right_context": "}\n\n    @Override\n    public void close() {\n    }\n\n    @Override\n    public FileIO dup2() {\n        return this;\n    }\n\n    @Override\n    public int fstat(Emulator<?> emulator, com.github.unidbg.file.linux.StatStructure stat) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public int getdents64(Pointer dirp, int size) {\n        throw new UnsupportedOperationException();\n    }\n}", "class_name": "DumpFileIO", "return_type": "int", "parameters": [{"type": "byte[]", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass IFReq extends UnidbgStructure {\n\n    static final int IFNAMSIZ = 16;\n\n    public static IFReq createIFReq(Emulator<?> emulator, Pointer pointer) {\n        return emulator.is64Bit() ? new IFReq64(pointer) : new IFReq32(pointer);\n    }\n\n    IFReq(Pointer p) {\n        super(p);\n    }\n\n    public Pointer getAddrPointer() {\n        return getPointer().share(IFNAMSIZ);\n    }\n\n    public void setName(String name) {<FILL_FUNCTION_BODY>}\n\n    public byte[] ifrn_name = new byte[IFNAMSIZ];\n\n}", "metadata": {"task_id": "zhkl0228_unidbg/488", "ground_truth": "\n        byte[] data = name.getBytes(StandardCharsets.UTF_8);\n        if (data.length >= IFNAMSIZ) {\n            throw new IllegalStateException(\"name=\" + name);\n        }\n        ifrn_name = Arrays.copyOf(data, IFNAMSIZ);\n    ", "fpath_tuple": ["zhkl0228_unidbg", "unidbg", "unidbg-android", "src", "main", "java", "com", "github", "unidbg", "linux", "struct", "IFReq.java"], "context_start_lineno": 0, "function_name": "setName", "left_context": "class IFReq extends UnidbgStructure {\n\n    static final int IFNAMSIZ = 16;\n\n    public static IFReq createIFReq(Emulator<?> emulator, Pointer pointer) {\n        return emulator.is64Bit() ? new IFReq64(pointer) : new IFReq32(pointer);\n    }\n\n    IFReq(Pointer p) {\n        super(p);\n    }\n\n    public Pointer getAddrPointer() {\n        return getPointer().share(IFNAMSIZ);\n    }\n\n    public void setName(String name) {", "right_context": "}\n\n    public byte[] ifrn_name = new byte[IFNAMSIZ];\n\n}", "class_name": "IFReq", "return_type": "void", "parameters": [{"type": "String", "name": "name"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/ssh/PropertiesDialog.java\n// --------------------------------------------------\n// private Component addPropertyField(JTextField txt,String label){\n//   txt.setEditable(false);\n//   txt.setBackground(App.SKIN.getDefaultBackground());\n//   txt.setBorder(null);\n//   JLabel lblFileName=new JLabel(label);\n//   lblFileName.setPreferredSize(new Dimension((150),lblFileName.getPreferredSize().height));\n//   Box b11=Box.createHorizontalBox();\n//   b11.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   b11.add(lblFileName);\n//   b11.add(txt);\n//   return b11;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createRow(Component... components){\n//   Box box=Box.createHorizontalBox();\n//   box.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   for (  Component c : components) {\n//     box.add(c);\n//   }\n//   return box;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createTerminalPanel(){\n//   spTermWidth=new JSpinner(new SpinnerNumberModel(80,16,511,1));\n//   spTermHeight=new JSpinner(new SpinnerNumberModel(24,4,511,1));\n//   resizeNumericSpinner(spTermWidth);\n//   resizeNumericSpinner(spTermHeight);\n//   chkAudibleBell=new JCheckBox(\"Terminal bell\");\n//   cmbFonts=new JComboBox<>(FontUtils.TERMINAL_FONTS.keySet().toArray(new String[0]));\n//   cmbFonts.setRenderer(new FontItemRenderer());\n//   Dimension d=new Dimension(cmbFonts.getPreferredSize().width * 2,cmbFonts.getPreferredSize().height);\n//   cmbFonts.setPreferredSize(d);\n//   cmbFonts.setMaximumSize(d);\n//   cmbFonts.setMinimumSize(d);\n//   spFontSize=new JSpinner(new SpinnerNumberModel(12,1,Short.MAX_VALUE,1));\n//   resizeNumericSpinner(spFontSize);\n//   Component boxTermSize=createRow(new JLabel(\"Columns\"),Box.createRigidArea(new Dimension(10,10)),spTermWidth,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Rows\"),Box.createRigidArea(new Dimension(10,10)),spTermHeight,Box.createHorizontalGlue(),new JButton(\"Reset\"));\n//   Component boxTermBell=createRow(chkAudibleBell);\n//   Component boxFontRow=createRow(new JLabel(\"Font name\"),Box.createRigidArea(new Dimension(10,10)),cmbFonts,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Font size\"),Box.createRigidArea(new Dimension(10,10)),spFontSize);\n//   chkPuttyLikeCopyPaste=new JCheckBox(\"PuTTY like copy paste (Copy on select and paste on right click)\");\n//   cmbTermType=new JComboBox<>(new String[]{\"xterm-256color\",\"xterm\",\"vt100\"});\n//   cmbTermType.setEditable(true);\n//   d=new Dimension(Math.max(100,cmbTermType.getPreferredSize().width * 2),cmbTermType.getPreferredSize().height);\n//   cmbTermType.setMaximumSize(d);\n//   cmbTermType.setMinimumSize(d);\n//   cmbTermType.setPreferredSize(d);\n//   Component boxTermType=createRow(new JLabel(\"Terminal type\"),Box.createRigidArea(new Dimension(10,10)),cmbTermType);\n//   Component boxTermCopy=createRow(chkPuttyLikeCopyPaste);\n//   defaultColorFg=new ColorSelectorButton();\n//   defaultColorBg=new ColorSelectorButton();\n//   defaultSelectionFg=new ColorSelectorButton();\n//   defaultSelectionBg=new ColorSelectorButton();\n//   defaultFoundFg=new ColorSelectorButton();\n//   defaultFoundBg=new ColorSelectorButton();\n//   cmbTermTheme=new JComboBox<>(new TerminalTheme[]{new DarkTerminalTheme(),new CustomTerminalTheme()});\n//   d=new Dimension(Math.max(100,cmbTermTheme.getPreferredSize().width * 2),cmbTermTheme.getPreferredSize().height);\n//   cmbTermTheme.setMaximumSize(d);\n//   cmbTermTheme.setMinimumSize(d);\n//   cmbTermTheme.setPreferredSize(d);\n//   cmbTermTheme.addActionListener(e -> {\n//     int index=cmbTermTheme.getSelectedIndex();\n//     TerminalTheme theme=cmbTermTheme.getItemAt(index);\n//     defaultColorFg.setColor(theme.getDefaultStyle().getForeground().toAwtColor());\n//     defaultColorBg.setColor(theme.getDefaultStyle().getBackground().toAwtColor());\n//     defaultSelectionFg.setColor(theme.getSelectionColor().getForeground().toAwtColor());\n//     defaultSelectionBg.setColor(theme.getSelectionColor().getBackground().toAwtColor());\n//     defaultFoundFg.setColor(theme.getFoundPatternColor().getForeground().toAwtColor());\n//     defaultFoundBg.setColor(theme.getFoundPatternColor().getBackground().toAwtColor());\n//   }\n// );\n//   paletteButtons=new ColorSelectorButton[16];\n//   for (int i=0; i < paletteButtons.length; i++) {\n//     paletteButtons[i]=new ColorSelectorButton();\n//   }\n//   cmbTermPalette=new JComboBox<>(new String[]{\"xterm\",\"windows\",\"custom\"});\n//   Dimension d1=new Dimension(Math.max(100,cmbTermPalette.getPreferredSize().width * 2),cmbTermPalette.getPreferredSize().height);\n//   cmbTermPalette.setMaximumSize(d1);\n//   cmbTermPalette.setMinimumSize(d1);\n//   cmbTermPalette.setPreferredSize(d1);\n//   cmbTermPalette.addActionListener(e -> {\n//     int index=cmbTermPalette.getSelectedIndex();\n//     if (index == 2)     return;\n//     ColorPalette palette=index == 0 ? ColorPalette.XTERM_PALETTE : ColorPalette.WINDOWS_PALETTE;\n//     Color[] colors=palette.getIndexColors();\n//     for (int i=0; i < paletteButtons.length; i++) {\n//       paletteButtons[i].setColor(colors[i]);\n//     }\n//   }\n// );\n//   JPanel paletteGrid=new JPanel(new GridLayout(2,8,10,10));\n//   for (int i=0; i < paletteButtons.length; i++) {\n//     paletteGrid.add(paletteButtons[i]);\n//   }\n//   paletteGrid.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   cmbTermTheme.setSelectedIndex(0);\n//   cmbTermPalette.setSelectedIndex(0);\n//   kcc=new KeyShortcutComponent[4];\n//   for (int i=0; i < kcc.length; i++) {\n//     kcc[i]=new KeyShortcutComponent();\n//   }\n//   JLabel[] labels={new JLabel(Settings.COPY_KEY),new JLabel(Settings.PASTE_KEY),new JLabel(Settings.CLEAR_BUFFER),new JLabel(Settings.FIND_KEY)};\n//   LayoutUtilities.equalizeSize(labels[0],labels[1],labels[2],labels[3]);\n//   Component kcPanels[]={createRow(labels[0],kcc[0]),createRow(labels[1],kcc[1]),createRow(labels[2],kcc[2]),createRow(labels[3],kcc[3])};\n//   Box panel=Box.createVerticalBox();\n//   panel.add(Box.createVerticalStrut(20));\n//   panel.add(createTitleLabel(\"Initial terminal size\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxTermSize);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Sound\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxTermBell);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Terminal font\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxFontRow);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Misc\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxTermCopy);\n//   panel.add(Box.createVerticalStrut(5));\n//   panel.add(boxTermType);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Terminal colors and theme\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Terminal theme\"),Box.createRigidArea(new Dimension(10,10)),cmbTermTheme));\n//   panel.add(Box.createVerticalStrut(20));\n//   panel.add(createRow(new JLabel(\"Default color\")));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Text\"),Box.createRigidArea(new Dimension(10,10)),defaultColorFg,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Background\"),Box.createRigidArea(new Dimension(10,10)),defaultColorBg));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Selection color\")));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Text\"),Box.createRigidArea(new Dimension(10,10)),defaultSelectionFg,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Background\"),Box.createRigidArea(new Dimension(10,10)),defaultSelectionBg));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Search pattern\")));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Text\"),Box.createRigidArea(new Dimension(10,10)),defaultFoundFg,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Background\"),Box.createRigidArea(new Dimension(10,10)),defaultFoundBg));\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createRow(new JLabel(\"Color palette\"),Box.createRigidArea(new Dimension(10,10)),cmbTermPalette));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(paletteGrid);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Terminal shortcuts\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   for (  Component cc : kcPanels) {\n//     panel.add(cc);\n//   }\n//   panel.add(Box.createVerticalGlue());\n//   panel.setBorder(new EmptyBorder(10,10,10,10));\n//   JPanel panelBuffered=new JPanel(new BorderLayout(),true);\n//   panelBuffered.add(panel);\n//   return new SkinnedScrollPane(panelBuffered);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createMiscPanel(){\n//   JPanel panel=new JPanel(new BorderLayout());\n//   chkUseManualScaling=new JCheckBox(\"Zoom (Make application look small or big on screen)\");\n//   spScaleValue=new JSpinner(new SpinnerNumberModel(1.0,0.5,100.0,0.01));\n//   resizeNumericSpinner(spScaleValue);\n//   chkUseGlobalDarkTheme=new JCheckBox(\"Use global dark theme (Needs restart)\");\n//   chkUseGlobalDarkTheme.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   Box vbox=Box.createVerticalBox();\n//   chkUseManualScaling.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   vbox.add(chkUseManualScaling);\n//   vbox.add(Box.createRigidArea(new Dimension(10,10)));\n//   vbox.add(createRow(new JLabel(\"Zoom percentage\"),Box.createHorizontalGlue(),spScaleValue));\n//   vbox.add(Box.createRigidArea(new Dimension(10,10)));\n//   vbox.add(chkUseGlobalDarkTheme);\n//   vbox.setBorder(new EmptyBorder(30,10,10,10));\n//   panel.add(vbox);\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createSecurityPanel(){\n//   JPanel panel=new JPanel(new BorderLayout());\n//   chkUseMasterPassword=new JCheckBox(\"Use master password\");\n//   btnChangeMasterPassword=new JButton(\"Change master password\");\n//   chkUseMasterPassword.addActionListener(e -> {\n//     if (chkUseMasterPassword.isSelected()) {\n//       char[] password=promptPassword();\n//       if (password == null) {\n//         chkUseMasterPassword.setSelected(false);\n//         btnChangeMasterPassword.setEnabled(false);\n//         return;\n//       }\n//       try {\n//         if (!PasswordStore.getSharedInstance().changeStorePassword(password)) {\n//           throw new Exception(\"Password change failed!\");\n//         }\n//       }\n//  catch (      Exception e1) {\n//         e1.printStackTrace();\n//         JOptionPane.showMessageDialog(this,\"Error encountered during operation\");\n//       }\n//       App.getGlobalSettings().setUsingMasterPassword(true);\n//       App.saveSettings();\n//       JOptionPane.showMessageDialog(this,\"Your save passwords are protected by AES encryption\");\n//     }\n//  else {\n//       try {\n//         PasswordStore.getSharedInstance().changeStorePassword(new char[0]);\n//       }\n//  catch (      Exception e1) {\n//         e1.printStackTrace();\n//         JOptionPane.showMessageDialog(this,\"Error encountered during operation\");\n//       }\n//       App.getGlobalSettings().setUsingMasterPassword(false);\n//       App.saveSettings();\n//       JOptionPane.showMessageDialog(this,\"Your save passwords are unprotected now\");\n//     }\n//   }\n// );\n//   chkUseMasterPassword.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   btnChangeMasterPassword.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   Box vbox=Box.createVerticalBox();\n//   vbox.add(chkUseMasterPassword);\n//   vbox.add(Box.createRigidArea(new Dimension(10,10)));\n//   vbox.add(btnChangeMasterPassword);\n//   vbox.setBorder(new EmptyBorder(30,10,10,10));\n//   panel.add(vbox);\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/ClosableTabbedPanel.java\n// --------------------------------------------------\n// public Component getSelectedContent(){\n//   for (int i=0; i < tabHolder.getComponentCount(); i++) {\n//     if (tabHolder.getComponent(i) instanceof TabTitleComponent) {\n//       TabTitleComponent c=(TabTitleComponent)tabHolder.getComponent(i);\n//       if (c.selected) {\n//         return c.component;\n//       }\n//     }\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/AbstractTabbedTerminalWidget.java\n// --------------------------------------------------\n// protected Component createTabComponent(AbstractTabs<T> tabs,T terminal){\n//   return new TabComponent(tabs,terminal);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/AddressBarComboBoxEditor.java\n// --------------------------------------------------\n// @Override public Component getEditorComponent(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/SessionListPanel.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends SessionContentPanel> list,SessionContentPanel value,int index,boolean isSelected,boolean cellHasFocus){\n//   SessionInfo info=value.getInfo();\n//   lblText.setText(info.getName());\n//   lblHost.setText(info.getHost());\n//   lblIcon.setText(FontAwesomeContants.FA_CUBE);\n//   lblClose.setText(FontAwesomeContants.FA_EJECT);\n//   if (isSelected) {\n//     panel.setBackground(App.SKIN.getDefaultSelectionBackground());\n//     lblText.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblHost.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultSelectionForeground());\n//   }\n//  else {\n//     panel.setBackground(App.SKIN.getDefaultBackground());\n//     lblText.setForeground(App.SKIN.getDefaultForeground());\n//     lblHost.setForeground(App.SKIN.getInfoTextForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultForeground());\n//   }\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/remote2remote/RemoteHostRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends RemoteServerEntry> list,RemoteServerEntry value,int index,boolean isSelected,boolean cellHasFocus){\n//   RemoteServerEntry info=value;\n//   lblText.setText(info.getHost());\n//   lblHost.setText(info.getPath());\n//   lblIcon.setText(FontAwesomeContants.FA_CUBE);\n//   if (isSelected) {\n//     panel.setBackground(App.SKIN.getDefaultSelectionBackground());\n//     lblText.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblHost.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultSelectionForeground());\n//   }\n//  else {\n//     panel.setBackground(list.getBackground());\n//     lblText.setForeground(App.SKIN.getDefaultForeground());\n//     lblHost.setForeground(App.SKIN.getInfoTextForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultForeground());\n//   }\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/view/FolderViewListCellRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends FileInfo> list,FileInfo value,int index,boolean isSelected,boolean cellHasFocus){\n//   this.lblIcon.setText(getIconForType(value));\n//   this.lblIcon.setBackground(list.getBackground());\n//   this.lblIcon.setForeground(isSelected ? list.getSelectionBackground() : list.getForeground());\n//   this.lblText.setBackground(list.getBackground());\n//   this.lblText.setForeground(isSelected ? list.getSelectionBackground() : list.getForeground());\n//   this.lblText.setText(value.getName());\n//   this.setBackground(list.getBackground());\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/logviewer/StartPage.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends String> list,String value,int index,boolean isSelected,boolean cellHasFocus){\n//   setBackground(isSelected ? App.SKIN.getDefaultSelectionBackground() : list.getBackground());\n//   setForeground(isSelected ? App.SKIN.getDefaultSelectionForeground() : list.getForeground());\n//   setText(value);\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/terminal/snippets/SnippetListRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends SnippetItem> list,SnippetItem value,int index,boolean isSelected,boolean cellHasFocus){\n//   setBackground(isSelected ? new Color(3,155,229) : list.getBackground());\n//   lblName.setForeground(isSelected ? App.SKIN.getDefaultSelectionForeground() : App.SKIN.getDefaultForeground());\n//   lblCommand.setForeground(App.SKIN.getInfoTextForeground());\n//   lblName.setText(value.getName());\n//   lblCommand.setText(value.getCommand());\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/FontItemRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends String> list,String value,int index,boolean isSelected,boolean cellHasFocus){\n//   System.out.println(\"Creating font in renderer: \" + value);\n//   Font font=FontUtils.loadTerminalFont(value).deriveFont(Font.PLAIN,14);\n//   setFont(font);\n//   setText(FontUtils.TERMINAL_FONTS.get(value));\n//   setBackground(isSelected ? App.SKIN.getAddressBarSelectionBackground() : App.SKIN.getSelectedTabColor());\n//   setForeground(isSelected ? App.SKIN.getDefaultSelectionForeground() : App.SKIN.getDefaultForeground());\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends String> list,String value,int index,boolean isSelected,boolean cellHasFocus){\n//   setText(value);\n//   if (isSelected) {\n//     setBackground(App.SKIN.getDefaultSelectionBackground());\n//     setForeground(App.SKIN.getDefaultSelectionForeground());\n//   }\n//  else {\n//     setBackground(App.SKIN.getDefaultBackground());\n//     setForeground(App.SKIN.getDefaultForeground());\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/diskspace/PartitionRenderer.java\n// --------------------------------------------------\n// @Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){\n//   setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\n//   setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());\n//   if (value instanceof Long) {\n//     setText(FormatUtils.humanReadableByteCount((long)value,true));\n//   }\n//  else {\n//     setText(value.toString());\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/diskspace/UsagePercentageRenderer.java\n// --------------------------------------------------\n// @Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){\n//   setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\n//   setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());\n//   double pct=(Double)value;\n//   if (pct > 100) {\n//     pct=100;\n//   }\n//  else   if (pct < 0) {\n//     pct=0;\n//   }\n//   progressBar.setValue((int)pct);\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/view/TableCellLabelRenderer.java\n// --------------------------------------------------\n// @Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){\n//   FolderViewTableModel folderViewModel=(FolderViewTableModel)table.getModel();\n//   int r=table.convertRowIndexToModel(row);\n//   int c=table.convertColumnIndexToModel(column);\n//   FileInfo ent=folderViewModel.getItemAt(r);\n//   panel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\n//   textLabel.setForeground(isSelected ? table.getSelectionForeground() : foreground);\n//   iconLabel.setForeground(isSelected ? table.getSelectionForeground() : foreground);\n//   iconLabel.setText(getIconForType(ent));\n//   textLabel.setText(ent.getName());\n//   label.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\n//   label.setForeground(isSelected ? table.getSelectionForeground() : foreground);\n// switch (c) {\n// case 0:\n//     label.setText(\"\");\n//   break;\n// case 1:\n// label.setText(FormatUtils.formatDate(ent.getLastModified()));\n// break;\n// case 2:\n// if (ent.getType() == FileType.Directory || ent.getType() == FileType.DirLink) {\n// label.setText(\"\");\n// }\n//  else {\n// label.setText(FormatUtils.humanReadableByteCount(ent.getSize(),true));\n// }\n// break;\n// case 3:\n// label.setText(ent.getType() + \"\");\n// break;\n// case 4:\n// label.setText(ent.getPermissionString());\n// break;\n// case 5:\n// label.setText(ent.getUser());\n// break;\n// default :\n// break;\n// }\n// if (c == 0) {\n// return panel;\n// }\n//  else {\n// return label;\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/processview/ProcessListRenderer.java\n// --------------------------------------------------\n// @Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){\n//   setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\n//   setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());\n//   if (column == 3) {\n//     double mem=((Float)value) * 1024;\n//     setText(FormatUtils.humanReadableByteCount((long)mem,true));\n//   }\n//  else {\n//     setText(value.toString());\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServiceTableCellRenderer extends JLabel implements TableCellRenderer {\r\n    public ServiceTableCellRenderer() {\r\n        setText(\"HHH\");\r\n        setBorder(new EmptyBorder(5, 5, 5, 5));\r\n        setOpaque(true);\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "subhra74_snowflake/3", "ground_truth": "\r\n        setText(value == null ? \"\" : value.toString());\r\n        setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\r\n        setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());\r\n        return this;\r\n    ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "utilpage", "services", "ServiceTableCellRenderer.java"], "context_start_lineno": 0, "function_name": "getTableCellRendererComponent", "left_context": "class ServiceTableCellRenderer extends JLabel implements TableCellRenderer {\r\n    public ServiceTableCellRenderer() {\r\n        setText(\"HHH\");\r\n        setBorder(new EmptyBorder(5, 5, 5, 5));\r\n        setOpaque(true);\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {", "right_context": "}\r\n}", "class_name": "ServiceTableCellRenderer", "return_type": "Component", "parameters": [{"type": "JTable", "name": "table"}, {"type": "Object", "name": "value"}, {"type": "boolean", "name": "isSelected"}, {"type": "boolean", "name": "hasFocus"}, {"type": "int", "name": "row"}, {"type": "int", "name": "column"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AppSkinDark extends AppSkin {\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic AppSkinDark() {\r\n\t\tinitDefaultsDark();\r\n\t}\r\n\r\n\tprivate void initDefaultsDark() {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "subhra74_snowflake/7", "ground_truth": "\r\n\r\n\t\tColor selectionColor = new Color(3, 155, 229);\r\n\t\tColor controlColor = new Color(40, 44, 52);\r\n\t\tColor textColor = new Color(230, 230, 230);\r\n\t\tColor selectedTextColor = new Color(230, 230, 230);\r\n\t\tColor infoTextColor = new Color(180, 180, 180);\r\n\t\tColor borderColor = new Color(24, 26, 31);\r\n\t\tColor treeTextColor = new Color(75 + 20, 83 + 20, 98 + 20);\r\n\t\tColor scrollbarColor = new Color(75, 83, 98);\r\n\t\tColor scrollbarRolloverColor = new Color(75 + 20, 83 + 20, 98 + 20);\r\n\t\tColor textFieldColor = new Color(40 + 10, 44 + 10, 52 + 10);\r\n\r\n\t\tColor buttonGradient1 = new Color(57, 62, 74);\r\n\t\tColor buttonGradient2 = new Color(55 - 10, 61 - 10, 72 - 10);\r\n\t\tColor buttonGradient3 = new Color(57 + 20, 62 + 20, 74 + 20);\r\n\t\tColor buttonGradient4 = new Color(57 + 10, 62 + 10, 74 + 10);\r\n\t\tColor buttonGradient5 = new Color(57 - 20, 62 - 20, 74 - 20);\r\n\t\tColor buttonGradient6 = new Color(57 - 10, 62 - 10, 74 - 10);\r\n\r\n\t\tthis.defaults.put(\"nimbusBase\", controlColor);\r\n\t\tthis.defaults.put(\"nimbusSelection\", selectionColor);\r\n\t\tthis.defaults.put(\"textBackground\", selectionColor);\r\n\t\tthis.defaults.put(\"textHighlight\", selectionColor);\r\n\t\tthis.defaults.put(\"desktop\", selectionColor);\r\n\t\tthis.defaults.put(\"nimbusFocus\", selectionColor);\r\n\r\n\t\tthis.defaults.put(\"ArrowButton.foreground\", textColor);\r\n\r\n\t\tthis.defaults.put(\"nimbusSelectionBackground\", selectionColor);\r\n\t\tthis.defaults.put(\"nimbusSelectedText\", selectedTextColor);\r\n\t\tthis.defaults.put(\"control\", controlColor);\r\n\t\tthis.defaults.put(\"nimbusBorder\", borderColor);\r\n\t\tthis.defaults.put(\"Table.alternateRowColor\", controlColor);\r\n\t\tthis.defaults.put(\"nimbusLightBackground\", textFieldColor);\r\n\r\n\t\tthis.defaults.put(\"tabSelectionBackground\", scrollbarColor);\r\n\t\tthis.defaults.put(\"Table.background\", buttonGradient6);\r\n\t\tthis.defaults.put(\"Table[Enabled+Selected].textForeground\", selectedTextColor);\r\n\r\n//\t\tthis.defaults.put(\"scrollbar\", buttonGradient4);\r\n//\t\tthis.defaults.put(\"scrollbar-hot\", buttonGradient3);\r\n\r\n\t\tthis.defaults.put(\"text\", textColor);\r\n\t\tthis.defaults.put(\"menuText\", textColor);\r\n\t\tthis.defaults.put(\"controlText\", textColor);\r\n\t\tthis.defaults.put(\"textForeground\", textColor);\r\n\t\tthis.defaults.put(\"infoText\", infoTextColor);\r\n\r\n\t\tthis.defaults.put(\"List.foreground\", textColor);\r\n\t\tthis.defaults.put(\"List.background\", controlColor);\r\n\t\tthis.defaults.put(\"List[Disabled].textForeground\", selectedTextColor);\r\n\t\tthis.defaults.put(\"List[Selected].textBackground\", selectionColor);\r\n\t\t\r\n\r\n\t\tthis.defaults.put(\"Label.foreground\", textColor);\r\n\r\n\t\tthis.defaults.put(\"Tree.background\", textFieldColor);\r\n\t\tthis.defaults.put(\"Tree.textForeground\", treeTextColor);\r\n\r\n\t\tthis.defaults.put(\"scrollbar\", scrollbarColor);\r\n\t\tthis.defaults.put(\"scrollbar-hot\", scrollbarRolloverColor);\r\n\r\n\t\tthis.defaults.put(\"button.normalGradient1\", buttonGradient1);\r\n\t\tthis.defaults.put(\"button.normalGradient2\", buttonGradient2);\r\n\t\tthis.defaults.put(\"button.hotGradient1\", buttonGradient3);\r\n\t\tthis.defaults.put(\"button.hotGradient2\", buttonGradient4);\r\n\t\tthis.defaults.put(\"button.pressedGradient1\", buttonGradient5);\r\n\t\tthis.defaults.put(\"button.pressedGradient2\", buttonGradient6);\r\n\r\n\t\tthis.defaults.put(\"TextField.background\", textFieldColor);\r\n\t\tthis.defaults.put(\"FormattedTextField.background\", textFieldColor);\r\n\t\tthis.defaults.put(\"PasswordField.background\", textFieldColor);\r\n\r\n\t\tcreateSkinnedButton(this.defaults);\r\n\t\tcreateTextFieldSkin(this.defaults);\r\n\t\tcreateSpinnerSkin(this.defaults);\r\n\t\tcreateComboBoxSkin(this.defaults);\r\n\t\tcreateTreeSkin(this.defaults);\r\n\t\tcreateTableHeaderSkin(this.defaults);\r\n\t\tcreatePopupMenuSkin(this.defaults);\r\n\t\tcreateCheckboxSkin(this.defaults);\r\n\t\tcreateRadioButtonSkin(this.defaults);\r\n\t\tcreateTooltipSkin(this.defaults);\r\n\t\tcreateSkinnedToggleButton(this.defaults);\r\n\t\tcreateProgressBarSkin(this.defaults);\r\n\r\n\t\tthis.defaults.put(\"ScrollBarUI\", CustomScrollBarUI.class.getName());\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "laf", "AppSkinDark.java"], "context_start_lineno": 0, "function_name": "initDefaultsDark", "left_context": "class AppSkinDark extends AppSkin {\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic AppSkinDark() {\r\n\t\tinitDefaultsDark();\r\n\t}\r\n\r\n\tprivate void initDefaultsDark() {", "right_context": "}\r\n}", "class_name": "AppSkinDark", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TextProcessing {\n\n  private static final Logger LOG = Logger.getLogger(TextProcessing.class);\n\n  private final List<HyperlinkFilter> myHyperlinkFilter;\n  private TextStyle myHyperlinkColor;\n  private HyperlinkStyle.HighlightMode myHighlightMode;\n  private TerminalTextBuffer myTerminalTextBuffer;\n\n  public TextProcessing( TextStyle hyperlinkColor,\n                         HyperlinkStyle.HighlightMode highlightMode) {\n    myHyperlinkColor = hyperlinkColor;\n    myHighlightMode = highlightMode;\n    myHyperlinkFilter = new ArrayList<>();\n  }\n\n  public void setTerminalTextBuffer( TerminalTextBuffer terminalTextBuffer) {\n    myTerminalTextBuffer = terminalTextBuffer;\n  }\n\n  public void processHyperlinks( LinesBuffer buffer,  TerminalLine updatedLine) {\n    if (myHyperlinkFilter.isEmpty()) return;\n    doProcessHyperlinks(buffer, updatedLine);\n  }\n\n  private void doProcessHyperlinks( LinesBuffer buffer,  TerminalLine updatedLine) {<FILL_FUNCTION_BODY>}\n\n  private int findHistoryLineInd( LinesBuffer historyBuffer,  TerminalLine line) {\n    int lastLineInd = Math.max(0, historyBuffer.getLineCount() - 200); // check only last lines in history buffer\n    for (int i = historyBuffer.getLineCount() - 1; i >= lastLineInd; i--) {\n      if (historyBuffer.getLine(i) == line) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private static int findLineInd( LinesBuffer buffer,  TerminalLine line) {\n    for (int i = 0; i < buffer.getLineCount(); i++) {\n      TerminalLine l = buffer.getLine(i);\n      if (l == line) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  \n  private String joinLines( LinesBuffer buffer, int startLineInd, int updatedLineInd) {\n    StringBuilder result = new StringBuilder();\n    for (int i = startLineInd; i <= updatedLineInd; i++) {\n      String text = buffer.getLine(i).getText();\n      if (i < updatedLineInd && text.length() < myTerminalTextBuffer.getWidth()) {\n        text = text + new CharBuffer(CharUtils.NUL_CHAR, myTerminalTextBuffer.getWidth() - text.length());\n      }\n      result.append(text);\n    }\n    return result.toString();\n  }\n\n  public void addHyperlinkFilter( HyperlinkFilter filter) {\n    myHyperlinkFilter.add(filter);\n  }\n}", "metadata": {"task_id": "subhra74_snowflake/19", "ground_truth": "\n    myTerminalTextBuffer.lock();\n    try {\n      int updatedLineInd = findLineInd(buffer, updatedLine);\n      if (updatedLineInd == -1) {\n        // When lines arrive fast enough, the line might be pushed to the history buffer already.\n        updatedLineInd = findHistoryLineInd(myTerminalTextBuffer.getHistoryBuffer(), updatedLine);\n        if (updatedLineInd == -1) {\n          LOG.debug(\"Cannot find line for links processing\");\n          return;\n        }\n        buffer = myTerminalTextBuffer.getHistoryBuffer();\n      }\n      int startLineInd = updatedLineInd;\n      while (startLineInd > 0 && buffer.getLine(startLineInd - 1).isWrapped()) {\n        startLineInd--;\n      }\n      String lineStr = joinLines(buffer, startLineInd, updatedLineInd);\n      for (HyperlinkFilter filter : myHyperlinkFilter) {\n        LinkResult result = filter.apply(lineStr);\n        if (result != null) {\n          for (LinkResultItem item : result.getItems()) {\n            TextStyle style = new HyperlinkStyle(myHyperlinkColor.getForeground(), myHyperlinkColor.getBackground(),\n              item.getLinkInfo(), myHighlightMode, null);\n            if (item.getStartOffset() < 0 || item.getEndOffset() > lineStr.length()) continue;\n\n            int prevLinesLength = 0;\n            for (int lineInd = startLineInd; lineInd <= updatedLineInd; lineInd++) {\n              int startLineOffset = Math.max(prevLinesLength, item.getStartOffset());\n              int endLineOffset = Math.min(prevLinesLength + myTerminalTextBuffer.getWidth(), item.getEndOffset());\n              if (startLineOffset < endLineOffset) {\n                buffer.getLine(lineInd).writeString(startLineOffset - prevLinesLength, new CharBuffer(lineStr.substring(startLineOffset, endLineOffset)), style);\n              }\n              prevLinesLength += myTerminalTextBuffer.getWidth();\n            }\n          }\n        }\n      }\n    }\n    finally {\n      myTerminalTextBuffer.unlock();\n    }\n  ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-jediterm", "src", "main", "java", "com", "jediterm", "terminal", "model", "hyperlinks", "TextProcessing.java"], "context_start_lineno": 0, "function_name": "doProcessHyperlinks", "left_context": "class TextProcessing {\n\n  private static final Logger LOG = Logger.getLogger(TextProcessing.class);\n\n  private final List<HyperlinkFilter> myHyperlinkFilter;\n  private TextStyle myHyperlinkColor;\n  private HyperlinkStyle.HighlightMode myHighlightMode;\n  private TerminalTextBuffer myTerminalTextBuffer;\n\n  public TextProcessing( TextStyle hyperlinkColor,\n                         HyperlinkStyle.HighlightMode highlightMode) {\n    myHyperlinkColor = hyperlinkColor;\n    myHighlightMode = highlightMode;\n    myHyperlinkFilter = new ArrayList<>();\n  }\n\n  public void setTerminalTextBuffer( TerminalTextBuffer terminalTextBuffer) {\n    myTerminalTextBuffer = terminalTextBuffer;\n  }\n\n  public void processHyperlinks( LinesBuffer buffer,  TerminalLine updatedLine) {\n    if (myHyperlinkFilter.isEmpty()) return;\n    doProcessHyperlinks(buffer, updatedLine);\n  }\n\n  private void doProcessHyperlinks( LinesBuffer buffer,  TerminalLine updatedLine) {", "right_context": "}\n\n  private int findHistoryLineInd( LinesBuffer historyBuffer,  TerminalLine line) {\n    int lastLineInd = Math.max(0, historyBuffer.getLineCount() - 200); // check only last lines in history buffer\n    for (int i = historyBuffer.getLineCount() - 1; i >= lastLineInd; i--) {\n      if (historyBuffer.getLine(i) == line) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private static int findLineInd( LinesBuffer buffer,  TerminalLine line) {\n    for (int i = 0; i < buffer.getLineCount(); i++) {\n      TerminalLine l = buffer.getLine(i);\n      if (l == line) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  \n  private String joinLines( LinesBuffer buffer, int startLineInd, int updatedLineInd) {\n    StringBuilder result = new StringBuilder();\n    for (int i = startLineInd; i <= updatedLineInd; i++) {\n      String text = buffer.getLine(i).getText();\n      if (i < updatedLineInd && text.length() < myTerminalTextBuffer.getWidth()) {\n        text = text + new CharBuffer(CharUtils.NUL_CHAR, myTerminalTextBuffer.getWidth() - text.length());\n      }\n      result.append(text);\n    }\n    return result.toString();\n  }\n\n  public void addHyperlinkFilter( HyperlinkFilter filter) {\n    myHyperlinkFilter.add(filter);\n  }\n}", "class_name": "TextProcessing", "return_type": "void", "parameters": [{"type": "LinesBuffer", "name": "buffer"}, {"type": "TerminalLine", "name": "updatedLine"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/ssh/PropertiesDialog.java\n// --------------------------------------------------\n// private Component addPropertyField(JTextField txt,String label){\n//   txt.setEditable(false);\n//   txt.setBackground(App.SKIN.getDefaultBackground());\n//   txt.setBorder(null);\n//   JLabel lblFileName=new JLabel(label);\n//   lblFileName.setPreferredSize(new Dimension((150),lblFileName.getPreferredSize().height));\n//   Box b11=Box.createHorizontalBox();\n//   b11.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   b11.add(lblFileName);\n//   b11.add(txt);\n//   return b11;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createRow(Component... components){\n//   Box box=Box.createHorizontalBox();\n//   box.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   for (  Component c : components) {\n//     box.add(c);\n//   }\n//   return box;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createTerminalPanel(){\n//   spTermWidth=new JSpinner(new SpinnerNumberModel(80,16,511,1));\n//   spTermHeight=new JSpinner(new SpinnerNumberModel(24,4,511,1));\n//   resizeNumericSpinner(spTermWidth);\n//   resizeNumericSpinner(spTermHeight);\n//   chkAudibleBell=new JCheckBox(\"Terminal bell\");\n//   cmbFonts=new JComboBox<>(FontUtils.TERMINAL_FONTS.keySet().toArray(new String[0]));\n//   cmbFonts.setRenderer(new FontItemRenderer());\n//   Dimension d=new Dimension(cmbFonts.getPreferredSize().width * 2,cmbFonts.getPreferredSize().height);\n//   cmbFonts.setPreferredSize(d);\n//   cmbFonts.setMaximumSize(d);\n//   cmbFonts.setMinimumSize(d);\n//   spFontSize=new JSpinner(new SpinnerNumberModel(12,1,Short.MAX_VALUE,1));\n//   resizeNumericSpinner(spFontSize);\n//   Component boxTermSize=createRow(new JLabel(\"Columns\"),Box.createRigidArea(new Dimension(10,10)),spTermWidth,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Rows\"),Box.createRigidArea(new Dimension(10,10)),spTermHeight,Box.createHorizontalGlue(),new JButton(\"Reset\"));\n//   Component boxTermBell=createRow(chkAudibleBell);\n//   Component boxFontRow=createRow(new JLabel(\"Font name\"),Box.createRigidArea(new Dimension(10,10)),cmbFonts,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Font size\"),Box.createRigidArea(new Dimension(10,10)),spFontSize);\n//   chkPuttyLikeCopyPaste=new JCheckBox(\"PuTTY like copy paste (Copy on select and paste on right click)\");\n//   cmbTermType=new JComboBox<>(new String[]{\"xterm-256color\",\"xterm\",\"vt100\"});\n//   cmbTermType.setEditable(true);\n//   d=new Dimension(Math.max(100,cmbTermType.getPreferredSize().width * 2),cmbTermType.getPreferredSize().height);\n//   cmbTermType.setMaximumSize(d);\n//   cmbTermType.setMinimumSize(d);\n//   cmbTermType.setPreferredSize(d);\n//   Component boxTermType=createRow(new JLabel(\"Terminal type\"),Box.createRigidArea(new Dimension(10,10)),cmbTermType);\n//   Component boxTermCopy=createRow(chkPuttyLikeCopyPaste);\n//   defaultColorFg=new ColorSelectorButton();\n//   defaultColorBg=new ColorSelectorButton();\n//   defaultSelectionFg=new ColorSelectorButton();\n//   defaultSelectionBg=new ColorSelectorButton();\n//   defaultFoundFg=new ColorSelectorButton();\n//   defaultFoundBg=new ColorSelectorButton();\n//   cmbTermTheme=new JComboBox<>(new TerminalTheme[]{new DarkTerminalTheme(),new CustomTerminalTheme()});\n//   d=new Dimension(Math.max(100,cmbTermTheme.getPreferredSize().width * 2),cmbTermTheme.getPreferredSize().height);\n//   cmbTermTheme.setMaximumSize(d);\n//   cmbTermTheme.setMinimumSize(d);\n//   cmbTermTheme.setPreferredSize(d);\n//   cmbTermTheme.addActionListener(e -> {\n//     int index=cmbTermTheme.getSelectedIndex();\n//     TerminalTheme theme=cmbTermTheme.getItemAt(index);\n//     defaultColorFg.setColor(theme.getDefaultStyle().getForeground().toAwtColor());\n//     defaultColorBg.setColor(theme.getDefaultStyle().getBackground().toAwtColor());\n//     defaultSelectionFg.setColor(theme.getSelectionColor().getForeground().toAwtColor());\n//     defaultSelectionBg.setColor(theme.getSelectionColor().getBackground().toAwtColor());\n//     defaultFoundFg.setColor(theme.getFoundPatternColor().getForeground().toAwtColor());\n//     defaultFoundBg.setColor(theme.getFoundPatternColor().getBackground().toAwtColor());\n//   }\n// );\n//   paletteButtons=new ColorSelectorButton[16];\n//   for (int i=0; i < paletteButtons.length; i++) {\n//     paletteButtons[i]=new ColorSelectorButton();\n//   }\n//   cmbTermPalette=new JComboBox<>(new String[]{\"xterm\",\"windows\",\"custom\"});\n//   Dimension d1=new Dimension(Math.max(100,cmbTermPalette.getPreferredSize().width * 2),cmbTermPalette.getPreferredSize().height);\n//   cmbTermPalette.setMaximumSize(d1);\n//   cmbTermPalette.setMinimumSize(d1);\n//   cmbTermPalette.setPreferredSize(d1);\n//   cmbTermPalette.addActionListener(e -> {\n//     int index=cmbTermPalette.getSelectedIndex();\n//     if (index == 2)     return;\n//     ColorPalette palette=index == 0 ? ColorPalette.XTERM_PALETTE : ColorPalette.WINDOWS_PALETTE;\n//     Color[] colors=palette.getIndexColors();\n//     for (int i=0; i < paletteButtons.length; i++) {\n//       paletteButtons[i].setColor(colors[i]);\n//     }\n//   }\n// );\n//   JPanel paletteGrid=new JPanel(new GridLayout(2,8,10,10));\n//   for (int i=0; i < paletteButtons.length; i++) {\n//     paletteGrid.add(paletteButtons[i]);\n//   }\n//   paletteGrid.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   cmbTermTheme.setSelectedIndex(0);\n//   cmbTermPalette.setSelectedIndex(0);\n//   kcc=new KeyShortcutComponent[4];\n//   for (int i=0; i < kcc.length; i++) {\n//     kcc[i]=new KeyShortcutComponent();\n//   }\n//   JLabel[] labels={new JLabel(Settings.COPY_KEY),new JLabel(Settings.PASTE_KEY),new JLabel(Settings.CLEAR_BUFFER),new JLabel(Settings.FIND_KEY)};\n//   LayoutUtilities.equalizeSize(labels[0],labels[1],labels[2],labels[3]);\n//   Component kcPanels[]={createRow(labels[0],kcc[0]),createRow(labels[1],kcc[1]),createRow(labels[2],kcc[2]),createRow(labels[3],kcc[3])};\n//   Box panel=Box.createVerticalBox();\n//   panel.add(Box.createVerticalStrut(20));\n//   panel.add(createTitleLabel(\"Initial terminal size\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxTermSize);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Sound\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxTermBell);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Terminal font\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxFontRow);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Misc\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(boxTermCopy);\n//   panel.add(Box.createVerticalStrut(5));\n//   panel.add(boxTermType);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Terminal colors and theme\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Terminal theme\"),Box.createRigidArea(new Dimension(10,10)),cmbTermTheme));\n//   panel.add(Box.createVerticalStrut(20));\n//   panel.add(createRow(new JLabel(\"Default color\")));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Text\"),Box.createRigidArea(new Dimension(10,10)),defaultColorFg,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Background\"),Box.createRigidArea(new Dimension(10,10)),defaultColorBg));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Selection color\")));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Text\"),Box.createRigidArea(new Dimension(10,10)),defaultSelectionFg,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Background\"),Box.createRigidArea(new Dimension(10,10)),defaultSelectionBg));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Search pattern\")));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(createRow(new JLabel(\"Text\"),Box.createRigidArea(new Dimension(10,10)),defaultFoundFg,Box.createRigidArea(new Dimension(20,10)),new JLabel(\"Background\"),Box.createRigidArea(new Dimension(10,10)),defaultFoundBg));\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createRow(new JLabel(\"Color palette\"),Box.createRigidArea(new Dimension(10,10)),cmbTermPalette));\n//   panel.add(Box.createVerticalStrut(10));\n//   panel.add(paletteGrid);\n//   panel.add(Box.createVerticalStrut(30));\n//   panel.add(createTitleLabel(\"Terminal shortcuts\"));\n//   panel.add(Box.createVerticalStrut(10));\n//   for (  Component cc : kcPanels) {\n//     panel.add(cc);\n//   }\n//   panel.add(Box.createVerticalGlue());\n//   panel.setBorder(new EmptyBorder(10,10,10,10));\n//   JPanel panelBuffered=new JPanel(new BorderLayout(),true);\n//   panelBuffered.add(panel);\n//   return new SkinnedScrollPane(panelBuffered);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createMiscPanel(){\n//   JPanel panel=new JPanel(new BorderLayout());\n//   chkUseManualScaling=new JCheckBox(\"Zoom (Make application look small or big on screen)\");\n//   spScaleValue=new JSpinner(new SpinnerNumberModel(1.0,0.5,100.0,0.01));\n//   resizeNumericSpinner(spScaleValue);\n//   chkUseGlobalDarkTheme=new JCheckBox(\"Use global dark theme (Needs restart)\");\n//   chkUseGlobalDarkTheme.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   Box vbox=Box.createVerticalBox();\n//   chkUseManualScaling.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   vbox.add(chkUseManualScaling);\n//   vbox.add(Box.createRigidArea(new Dimension(10,10)));\n//   vbox.add(createRow(new JLabel(\"Zoom percentage\"),Box.createHorizontalGlue(),spScaleValue));\n//   vbox.add(Box.createRigidArea(new Dimension(10,10)));\n//   vbox.add(chkUseGlobalDarkTheme);\n//   vbox.setBorder(new EmptyBorder(30,10,10,10));\n//   panel.add(vbox);\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// private Component createSecurityPanel(){\n//   JPanel panel=new JPanel(new BorderLayout());\n//   chkUseMasterPassword=new JCheckBox(\"Use master password\");\n//   btnChangeMasterPassword=new JButton(\"Change master password\");\n//   chkUseMasterPassword.addActionListener(e -> {\n//     if (chkUseMasterPassword.isSelected()) {\n//       char[] password=promptPassword();\n//       if (password == null) {\n//         chkUseMasterPassword.setSelected(false);\n//         btnChangeMasterPassword.setEnabled(false);\n//         return;\n//       }\n//       try {\n//         if (!PasswordStore.getSharedInstance().changeStorePassword(password)) {\n//           throw new Exception(\"Password change failed!\");\n//         }\n//       }\n//  catch (      Exception e1) {\n//         e1.printStackTrace();\n//         JOptionPane.showMessageDialog(this,\"Error encountered during operation\");\n//       }\n//       App.getGlobalSettings().setUsingMasterPassword(true);\n//       App.saveSettings();\n//       JOptionPane.showMessageDialog(this,\"Your save passwords are protected by AES encryption\");\n//     }\n//  else {\n//       try {\n//         PasswordStore.getSharedInstance().changeStorePassword(new char[0]);\n//       }\n//  catch (      Exception e1) {\n//         e1.printStackTrace();\n//         JOptionPane.showMessageDialog(this,\"Error encountered during operation\");\n//       }\n//       App.getGlobalSettings().setUsingMasterPassword(false);\n//       App.saveSettings();\n//       JOptionPane.showMessageDialog(this,\"Your save passwords are unprotected now\");\n//     }\n//   }\n// );\n//   chkUseMasterPassword.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   btnChangeMasterPassword.setAlignmentX(Box.LEFT_ALIGNMENT);\n//   Box vbox=Box.createVerticalBox();\n//   vbox.add(chkUseMasterPassword);\n//   vbox.add(Box.createRigidArea(new Dimension(10,10)));\n//   vbox.add(btnChangeMasterPassword);\n//   vbox.setBorder(new EmptyBorder(30,10,10,10));\n//   panel.add(vbox);\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/ClosableTabbedPanel.java\n// --------------------------------------------------\n// public Component getSelectedContent(){\n//   for (int i=0; i < tabHolder.getComponentCount(); i++) {\n//     if (tabHolder.getComponent(i) instanceof TabTitleComponent) {\n//       TabTitleComponent c=(TabTitleComponent)tabHolder.getComponent(i);\n//       if (c.selected) {\n//         return c.component;\n//       }\n//     }\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/AbstractTabbedTerminalWidget.java\n// --------------------------------------------------\n// protected Component createTabComponent(AbstractTabs<T> tabs,T terminal){\n//   return new TabComponent(tabs,terminal);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/AddressBarComboBoxEditor.java\n// --------------------------------------------------\n// @Override public Component getEditorComponent(){\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/SessionListPanel.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends SessionContentPanel> list,SessionContentPanel value,int index,boolean isSelected,boolean cellHasFocus){\n//   SessionInfo info=value.getInfo();\n//   lblText.setText(info.getName());\n//   lblHost.setText(info.getHost());\n//   lblIcon.setText(FontAwesomeContants.FA_CUBE);\n//   lblClose.setText(FontAwesomeContants.FA_EJECT);\n//   if (isSelected) {\n//     panel.setBackground(App.SKIN.getDefaultSelectionBackground());\n//     lblText.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblHost.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultSelectionForeground());\n//   }\n//  else {\n//     panel.setBackground(App.SKIN.getDefaultBackground());\n//     lblText.setForeground(App.SKIN.getDefaultForeground());\n//     lblHost.setForeground(App.SKIN.getInfoTextForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultForeground());\n//   }\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/remote2remote/RemoteHostRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends RemoteServerEntry> list,RemoteServerEntry value,int index,boolean isSelected,boolean cellHasFocus){\n//   RemoteServerEntry info=value;\n//   lblText.setText(info.getHost());\n//   lblHost.setText(info.getPath());\n//   lblIcon.setText(FontAwesomeContants.FA_CUBE);\n//   if (isSelected) {\n//     panel.setBackground(App.SKIN.getDefaultSelectionBackground());\n//     lblText.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblHost.setForeground(App.SKIN.getDefaultSelectionForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultSelectionForeground());\n//   }\n//  else {\n//     panel.setBackground(list.getBackground());\n//     lblText.setForeground(App.SKIN.getDefaultForeground());\n//     lblHost.setForeground(App.SKIN.getInfoTextForeground());\n//     lblIcon.setForeground(App.SKIN.getDefaultForeground());\n//   }\n//   return panel;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/files/view/FolderViewListCellRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends FileInfo> list,FileInfo value,int index,boolean isSelected,boolean cellHasFocus){\n//   this.lblIcon.setText(getIconForType(value));\n//   this.lblIcon.setBackground(list.getBackground());\n//   this.lblIcon.setForeground(isSelected ? list.getSelectionBackground() : list.getForeground());\n//   this.lblText.setBackground(list.getBackground());\n//   this.lblText.setForeground(isSelected ? list.getSelectionBackground() : list.getForeground());\n//   this.lblText.setText(value.getName());\n//   this.setBackground(list.getBackground());\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/logviewer/StartPage.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends String> list,String value,int index,boolean isSelected,boolean cellHasFocus){\n//   setBackground(isSelected ? App.SKIN.getDefaultSelectionBackground() : list.getBackground());\n//   setForeground(isSelected ? App.SKIN.getDefaultSelectionForeground() : list.getForeground());\n//   setText(value);\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/terminal/snippets/SnippetListRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends SnippetItem> list,SnippetItem value,int index,boolean isSelected,boolean cellHasFocus){\n//   setBackground(isSelected ? new Color(3,155,229) : list.getBackground());\n//   lblName.setForeground(isSelected ? App.SKIN.getDefaultSelectionForeground() : App.SKIN.getDefaultForeground());\n//   lblCommand.setForeground(App.SKIN.getInfoTextForeground());\n//   lblName.setText(value.getName());\n//   lblCommand.setText(value.getCommand());\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/FontItemRenderer.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends String> list,String value,int index,boolean isSelected,boolean cellHasFocus){\n//   System.out.println(\"Creating font in renderer: \" + value);\n//   Font font=FontUtils.loadTerminalFont(value).deriveFont(Font.PLAIN,14);\n//   setFont(font);\n//   setText(FontUtils.TERMINAL_FONTS.get(value));\n//   setBackground(isSelected ? App.SKIN.getAddressBarSelectionBackground() : App.SKIN.getSelectedTabColor());\n//   setForeground(isSelected ? App.SKIN.getDefaultSelectionForeground() : App.SKIN.getDefaultForeground());\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/settings/SettingsDialog.java\n// --------------------------------------------------\n// @Override public Component getListCellRendererComponent(JList<? extends String> list,String value,int index,boolean isSelected,boolean cellHasFocus){\n//   setText(value);\n//   if (isSelected) {\n//     setBackground(App.SKIN.getDefaultSelectionBackground());\n//     setForeground(App.SKIN.getDefaultSelectionForeground());\n//   }\n//  else {\n//     setBackground(App.SKIN.getDefaultBackground());\n//     setForeground(App.SKIN.getDefaultForeground());\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/diskspace/PartitionRenderer.java\n// --------------------------------------------------\n// @Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){\n//   setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\n//   setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());\n//   if (value instanceof Long) {\n//     setText(FormatUtils.humanReadableByteCount((long)value,true));\n//   }\n//  else {\n//     setText(value.toString());\n//   }\n//   return this;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TableCellLabelRenderer implements TableCellRenderer {\r\n\tprivate JPanel panel;\r\n\tprivate JLabel textLabel;\r\n\tprivate JLabel iconLabel;\r\n\tprivate JLabel label;\r\n\tprivate int height;\r\n\tprivate Color foreground;\r\n\r\n\tpublic TableCellLabelRenderer() {\r\n\t\tforeground = App.SKIN.getInfoTextForeground();\r\n\t\tpanel = new JPanel(new BorderLayout(10, 5));\r\n\t\tpanel.setBorder(new EmptyBorder(5, 10, 5, 5));\r\n\t\ttextLabel = new JLabel();\r\n\t\ttextLabel.setForeground(foreground);\r\n\t\ttextLabel.setText(\"AAA\");\r\n\t\ttextLabel.setFont(new Font(Font.DIALOG, Font.PLAIN, 14));\r\n\r\n\t\ticonLabel = new JLabel();\r\n\t\ticonLabel.setFont(App.SKIN.getIconFont().deriveFont(Font.PLAIN, 20.f));\r\n\t\ticonLabel.setText(\"\\uf016\");\r\n\t\ticonLabel.setForeground(foreground);\r\n\t\t// iconLabel.setForeground(new Color(92, 167, 25));\r\n\r\n\t\tDimension d1 = iconLabel.getPreferredSize();\r\n\t\ticonLabel.setText(\"\\uf07b\");\r\n\t\tDimension d2 = iconLabel.getPreferredSize();\r\n\r\n\t\theight = Math.max(d1.height, d2.height) + 10;\r\n\r\n\t\ticonLabel.setHorizontalAlignment(JLabel.CENTER);\r\n\t\tpanel.add(textLabel);\r\n\t\tpanel.add(iconLabel, BorderLayout.WEST);\r\n\r\n\t\tpanel.doLayout();\r\n\r\n\t\tSystem.out.println(panel.getPreferredSize());\r\n\r\n\t\tlabel = new JLabel();\r\n\t\tlabel.setForeground(foreground);\r\n\t\tlabel.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\t\tlabel.setFont(new Font(Font.DIALOG, Font.PLAIN, 14));\r\n\t\tlabel.setOpaque(true);\r\n\t}\r\n\r\n\tpublic int getHeight() {\r\n\t\treturn height;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,\r\n\t\t\tint row, int column) {<FILL_FUNCTION_BODY>}\r\n\r\n\tpublic String getIconForType(FileInfo ent) {\r\n\t\treturn FileIconUtil.getIconForType(ent);\r\n\t}\r\n}", "metadata": {"task_id": "subhra74_snowflake/27", "ground_truth": "\r\n\t\tFolderViewTableModel folderViewModel = (FolderViewTableModel) table.getModel();\r\n\r\n\t\tint r = table.convertRowIndexToModel(row);\r\n\t\tint c = table.convertColumnIndexToModel(column);\r\n\r\n\t\tFileInfo ent = folderViewModel.getItemAt(r);\r\n\r\n\t\tpanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\r\n\r\n\t\ttextLabel.setForeground(isSelected ? table.getSelectionForeground() : foreground);\r\n\t\ticonLabel.setForeground(isSelected ? table.getSelectionForeground() : foreground);\r\n\t\ticonLabel.setText(getIconForType(ent));\r\n\t\ttextLabel.setText(ent.getName());\r\n\r\n\t\tlabel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());\r\n\t\tlabel.setForeground(isSelected ? table.getSelectionForeground() : foreground);\r\n\r\n\t\tswitch (c) {\r\n\t\tcase 0:\r\n\t\t\tlabel.setText(\"\");\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tlabel.setText(FormatUtils.formatDate(ent.getLastModified()));\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tif (ent.getType() == FileType.Directory || ent.getType() == FileType.DirLink) {\r\n\t\t\t\tlabel.setText(\"\");\r\n\t\t\t} else {\r\n\t\t\t\tlabel.setText(FormatUtils.humanReadableByteCount(ent.getSize(), true));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tlabel.setText(ent.getType() + \"\");\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\tlabel.setText(ent.getPermissionString());\r\n\t\t\tbreak;\r\n\t\tcase 5:\r\n\t\t\tlabel.setText(ent.getUser());\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (c == 0) {\r\n\t\t\treturn panel;\r\n\t\t} else {\r\n\t\t\treturn label;\r\n\t\t}\r\n\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "files", "view", "TableCellLabelRenderer.java"], "context_start_lineno": 0, "function_name": "getTableCellRendererComponent", "left_context": "class TableCellLabelRenderer implements TableCellRenderer {\r\n\tprivate JPanel panel;\r\n\tprivate JLabel textLabel;\r\n\tprivate JLabel iconLabel;\r\n\tprivate JLabel label;\r\n\tprivate int height;\r\n\tprivate Color foreground;\r\n\r\n\tpublic TableCellLabelRenderer() {\r\n\t\tforeground = App.SKIN.getInfoTextForeground();\r\n\t\tpanel = new JPanel(new BorderLayout(10, 5));\r\n\t\tpanel.setBorder(new EmptyBorder(5, 10, 5, 5));\r\n\t\ttextLabel = new JLabel();\r\n\t\ttextLabel.setForeground(foreground);\r\n\t\ttextLabel.setText(\"AAA\");\r\n\t\ttextLabel.setFont(new Font(Font.DIALOG, Font.PLAIN, 14));\r\n\r\n\t\ticonLabel = new JLabel();\r\n\t\ticonLabel.setFont(App.SKIN.getIconFont().deriveFont(Font.PLAIN, 20.f));\r\n\t\ticonLabel.setText(\"\\uf016\");\r\n\t\ticonLabel.setForeground(foreground);\r\n\t\t// iconLabel.setForeground(new Color(92, 167, 25));\r\n\r\n\t\tDimension d1 = iconLabel.getPreferredSize();\r\n\t\ticonLabel.setText(\"\\uf07b\");\r\n\t\tDimension d2 = iconLabel.getPreferredSize();\r\n\r\n\t\theight = Math.max(d1.height, d2.height) + 10;\r\n\r\n\t\ticonLabel.setHorizontalAlignment(JLabel.CENTER);\r\n\t\tpanel.add(textLabel);\r\n\t\tpanel.add(iconLabel, BorderLayout.WEST);\r\n\r\n\t\tpanel.doLayout();\r\n\r\n\t\tSystem.out.println(panel.getPreferredSize());\r\n\r\n\t\tlabel = new JLabel();\r\n\t\tlabel.setForeground(foreground);\r\n\t\tlabel.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\t\tlabel.setFont(new Font(Font.DIALOG, Font.PLAIN, 14));\r\n\t\tlabel.setOpaque(true);\r\n\t}\r\n\r\n\tpublic int getHeight() {\r\n\t\treturn height;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,\r\n\t\t\tint row, int column) {", "right_context": "}\r\n\r\n\tpublic String getIconForType(FileInfo ent) {\r\n\t\treturn FileIconUtil.getIconForType(ent);\r\n\t}\r\n}", "class_name": "TableCellLabelRenderer", "return_type": "Component", "parameters": [{"type": "JTable", "name": "table"}, {"type": "Object", "name": "value"}, {"type": "boolean", "name": "isSelected"}, {"type": "boolean", "name": "hasFocus"}, {"type": "int", "name": "row"}, {"type": "int", "name": "column"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TerminalStarter implements TerminalOutputStream {\n  private static final Logger LOG = Logger.getLogger(TerminalStarter.class);\n\n  private final Emulator myEmulator;\n\n  private final Terminal myTerminal;\n  private final TerminalDataStream myDataStream;\n\n  private final TtyConnector myTtyConnector;\n\n  private final ExecutorService myEmulatorExecutor = Executors.newSingleThreadExecutor();\n\n  public TerminalStarter(final Terminal terminal, final TtyConnector ttyConnector, TerminalDataStream dataStream) {\n    myTtyConnector = ttyConnector;\n    //can be implemented - just recreate channel and that's it\n    myDataStream = dataStream;\n    myTerminal = terminal;\n    myTerminal.setTerminalOutput(this);\n    myEmulator = createEmulator(myDataStream, terminal);\n  }\n\n  protected JediEmulator createEmulator(TerminalDataStream dataStream, Terminal terminal) {\n    return new JediEmulator(dataStream, terminal);\n  }\n\n  private void execute(Runnable runnable) {\n    if (!myEmulatorExecutor.isShutdown()) {\n      myEmulatorExecutor.execute(runnable);\n    }\n  }\n\n  public void start() {\n    try {\n      while (!Thread.currentThread().isInterrupted() && myEmulator.hasNext()) {\n        myEmulator.next();\n      }\n    }\n    catch (final InterruptedIOException e) {\n      LOG.info(\"Terminal exiting\");\n    }\n    catch (final Exception e) {\n      if (!myTtyConnector.isConnected()) {\n        myTerminal.disconnected();\n        return;\n      }\n      LOG.error(\"Caught exception in terminal thread\", e);\n    }\n  }\n\n  public byte[] getCode(final int key, final int modifiers) {\n    return myTerminal.getCodeForKey(key, modifiers);\n  }\n\n  public void postResize(final Dimension dimension, final RequestOrigin origin) {\n    execute(() -> resizeTerminal(myTerminal, myTtyConnector, dimension, origin));\n  }\n\n  /**\n   * Resizes terminal and tty connector, should be called on a pooled thread.\n   */\n  public static void resizeTerminal( Terminal terminal,  TtyConnector ttyConnector,\n                                     Dimension terminalDimension,  RequestOrigin origin) {\n    Dimension pixelSize;\n    //noinspection SynchronizationOnLocalVariableOrMethodParameter\n    synchronized (terminal) {\n      pixelSize = terminal.resize(terminalDimension, origin);\n    }\n    ttyConnector.resize(terminalDimension, pixelSize);\n  }\n\n  @Override\n  public void sendBytes(final byte[] bytes) {\n    execute(() -> {\n      try {\n        myTtyConnector.write(bytes);\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    });\n  }\n\n  @Override\n  public void sendString(final String string) {\n    execute(() -> {\n      try {\n        myTtyConnector.write(string);\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    });\n  }\n\n  public void close() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "subhra74_snowflake/29", "ground_truth": "\n    execute(() -> {\n      try {\n        myTtyConnector.close();\n      }\n      catch (Exception e) {\n        LOG.error(\"Error closing terminal\", e);\n      }\n      finally {\n        myEmulatorExecutor.shutdown();\n      }\n    });\n  ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-jediterm", "src", "main", "java", "com", "jediterm", "terminal", "TerminalStarter.java"], "context_start_lineno": 0, "function_name": "close", "left_context": "class TerminalStarter implements TerminalOutputStream {\n  private static final Logger LOG = Logger.getLogger(TerminalStarter.class);\n\n  private final Emulator myEmulator;\n\n  private final Terminal myTerminal;\n  private final TerminalDataStream myDataStream;\n\n  private final TtyConnector myTtyConnector;\n\n  private final ExecutorService myEmulatorExecutor = Executors.newSingleThreadExecutor();\n\n  public TerminalStarter(final Terminal terminal, final TtyConnector ttyConnector, TerminalDataStream dataStream) {\n    myTtyConnector = ttyConnector;\n    //can be implemented - just recreate channel and that's it\n    myDataStream = dataStream;\n    myTerminal = terminal;\n    myTerminal.setTerminalOutput(this);\n    myEmulator = createEmulator(myDataStream, terminal);\n  }\n\n  protected JediEmulator createEmulator(TerminalDataStream dataStream, Terminal terminal) {\n    return new JediEmulator(dataStream, terminal);\n  }\n\n  private void execute(Runnable runnable) {\n    if (!myEmulatorExecutor.isShutdown()) {\n      myEmulatorExecutor.execute(runnable);\n    }\n  }\n\n  public void start() {\n    try {\n      while (!Thread.currentThread().isInterrupted() && myEmulator.hasNext()) {\n        myEmulator.next();\n      }\n    }\n    catch (final InterruptedIOException e) {\n      LOG.info(\"Terminal exiting\");\n    }\n    catch (final Exception e) {\n      if (!myTtyConnector.isConnected()) {\n        myTerminal.disconnected();\n        return;\n      }\n      LOG.error(\"Caught exception in terminal thread\", e);\n    }\n  }\n\n  public byte[] getCode(final int key, final int modifiers) {\n    return myTerminal.getCodeForKey(key, modifiers);\n  }\n\n  public void postResize(final Dimension dimension, final RequestOrigin origin) {\n    execute(() -> resizeTerminal(myTerminal, myTtyConnector, dimension, origin));\n  }\n\n  /**\n   * Resizes terminal and tty connector, should be called on a pooled thread.\n   */\n  public static void resizeTerminal( Terminal terminal,  TtyConnector ttyConnector,\n                                     Dimension terminalDimension,  RequestOrigin origin) {\n    Dimension pixelSize;\n    //noinspection SynchronizationOnLocalVariableOrMethodParameter\n    synchronized (terminal) {\n      pixelSize = terminal.resize(terminalDimension, origin);\n    }\n    ttyConnector.resize(terminalDimension, pixelSize);\n  }\n\n  @Override\n  public void sendBytes(final byte[] bytes) {\n    execute(() -> {\n      try {\n        myTtyConnector.write(bytes);\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    });\n  }\n\n  @Override\n  public void sendString(final String string) {\n    execute(() -> {\n      try {\n        myTtyConnector.write(string);\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    });\n  }\n\n  public void close() {", "right_context": "}\n}", "class_name": "TerminalStarter", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SocketTableModel extends AbstractTableModel {\r\n    private String columns[] = {\"Process\", \"PID\", \"Host\", \"Port\"};\r\n    private List<SocketEntry> list = new ArrayList<>();\r\n\r\n    public void addEntry(SocketEntry e) {\r\n        list.add(e);\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    public void addEntries(List<SocketEntry> entries) {\r\n        if (entries != null) {\r\n            list.addAll(entries);\r\n            fireTableDataChanged();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Class<?> getColumnClass(int columnIndex) {\r\n        return Object.class;\r\n    }\r\n\r\n    @Override\r\n    public int getRowCount() {\r\n        return list.size();\r\n    }\r\n\r\n    @Override\r\n    public int getColumnCount() {\r\n        return columns.length;\r\n    }\r\n\r\n    @Override\r\n    public String getColumnName(int column) {\r\n        return columns[column];\r\n    }\r\n\r\n    @Override\r\n    public Object getValueAt(int rowIndex, int columnIndex) {<FILL_FUNCTION_BODY>}\r\n\r\n    public void clear() {\r\n        list.clear();\r\n    }\r\n}", "metadata": {"task_id": "subhra74_snowflake/52", "ground_truth": "\r\n        SocketEntry e = list.get(rowIndex);\r\n        switch (columnIndex) {\r\n            case 0:\r\n                return e.getApp();\r\n            case 1:\r\n                return e.getPid();\r\n            case 2:\r\n                return e.getHost();\r\n            case 3:\r\n                return e.getPort();\r\n            default:\r\n                return \"\";\r\n        }\r\n    ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "utilpage", "portview", "SocketTableModel.java"], "context_start_lineno": 0, "function_name": "getValueAt", "left_context": "class SocketTableModel extends AbstractTableModel {\r\n    private String columns[] = {\"Process\", \"PID\", \"Host\", \"Port\"};\r\n    private List<SocketEntry> list = new ArrayList<>();\r\n\r\n    public void addEntry(SocketEntry e) {\r\n        list.add(e);\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    public void addEntries(List<SocketEntry> entries) {\r\n        if (entries != null) {\r\n            list.addAll(entries);\r\n            fireTableDataChanged();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Class<?> getColumnClass(int columnIndex) {\r\n        return Object.class;\r\n    }\r\n\r\n    @Override\r\n    public int getRowCount() {\r\n        return list.size();\r\n    }\r\n\r\n    @Override\r\n    public int getColumnCount() {\r\n        return columns.length;\r\n    }\r\n\r\n    @Override\r\n    public String getColumnName(int column) {\r\n        return columns[column];\r\n    }\r\n\r\n    @Override\r\n    public Object getValueAt(int rowIndex, int columnIndex) {", "right_context": "}\r\n\r\n    public void clear() {\r\n        list.clear();\r\n    }\r\n}", "class_name": "SocketTableModel", "return_type": "Object", "parameters": [{"type": "int", "name": "rowIndex"}, {"type": "int", "name": "columnIndex"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GraphicSet\n{\n  private final int myIndex; // 0..3\n  private CharacterSet myDesignation;\n\n  public GraphicSet( int index )\n  {\n    if ( index < 0 || index > 3 )\n    {\n      throw new IllegalArgumentException( \"Invalid index!\" );\n    }\n    myIndex = index;\n    // The default mapping, based on XTerm...\n    myDesignation = CharacterSet.valueOf( ( index == 1 ) ? '0' : 'B' );\n  }\n\n  /**\n   * @return the designation of this graphic set.\n   */\n  public CharacterSet getDesignation()\n  {\n    return myDesignation;\n  }\n\n  /**\n   * @return the index of this graphics set.\n   */\n  public int getIndex()\n  {\n    return myIndex;\n  }\n\n  /**\n   * Maps a given character index to a concrete character.\n   *\n   * @param original\n   *          the original character to map;\n   * @param index\n   *          the index of the character to map.\n   * @return the mapped character, or the given original if no mapping could\n   *         be made.\n   */\n  public int map( char original, int index )\n  {<FILL_FUNCTION_BODY>}\n\n  /**\n   * Sets the designation of this graphic set.\n   */\n  public void setDesignation( CharacterSet designation )\n  {\n    myDesignation = designation;\n  }\n}", "metadata": {"task_id": "subhra74_snowflake/141", "ground_truth": "\n    int result = myDesignation.map( index );\n    if ( result < 0 )\n    {\n      // No mapping, simply return the given original one...\n      result = original;\n    }\n    return result;\n  ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-jediterm", "src", "main", "java", "com", "jediterm", "terminal", "emulator", "charset", "GraphicSet.java"], "context_start_lineno": 0, "function_name": "map", "left_context": "class GraphicSet\n{\n  private final int myIndex; // 0..3\n  private CharacterSet myDesignation;\n\n  public GraphicSet( int index )\n  {\n    if ( index < 0 || index > 3 )\n    {\n      throw new IllegalArgumentException( \"Invalid index!\" );\n    }\n    myIndex = index;\n    // The default mapping, based on XTerm...\n    myDesignation = CharacterSet.valueOf( ( index == 1 ) ? '0' : 'B' );\n  }\n\n  /**\n   * @return the designation of this graphic set.\n   */\n  public CharacterSet getDesignation()\n  {\n    return myDesignation;\n  }\n\n  /**\n   * @return the index of this graphics set.\n   */\n  public int getIndex()\n  {\n    return myIndex;\n  }\n\n  /**\n   * Maps a given character index to a concrete character.\n   *\n   * @param original\n   *          the original character to map;\n   * @param index\n   *          the index of the character to map.\n   * @return the mapped character, or the given original if no mapping could\n   *         be made.\n   */\n  public int map( char original, int index )\n  {", "right_context": "}\n\n  /**\n   * Sets the designation of this graphic set.\n   */\n  public void setDesignation( CharacterSet designation )\n  {\n    myDesignation = designation;\n  }\n}", "class_name": "GraphicSet", "return_type": "int", "parameters": [{"type": "char", "name": "original"}, {"type": "int", "name": "index"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FolderViewKeyHandler extends KeyAdapter {\r\n\r\n    private JTable table;\r\n    private FolderViewTableModel model;\r\n\r\n    private String prefix = \"\";\r\n    private String typedString = \"\";\r\n    private long lastTime = 0L;\r\n\r\n    private long timeFactor = 1000L;\r\n\r\n    public FolderViewKeyHandler(JTable table, FolderViewTableModel model) {\r\n        super();\r\n        this.table = table;\r\n        this.model = model;\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {<FILL_FUNCTION_BODY>}\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n\r\n        if (table.getRowCount() == 0 || e.isAltDown()\r\n                || isMenuShortcutKeyDown(e) || isNavigationKey(e)) {\r\n            // Nothing to select\r\n            return;\r\n        }\r\n        boolean startingFromSelection = true;\r\n\r\n        char c = e.getKeyChar();\r\n\r\n        long time = e.getWhen();\r\n        int startIndex = adjustIndex(\r\n                table.getSelectedRows().length > 0 ? table.getSelectedRows()[0]\r\n                        : -1,\r\n                table);\r\n        if (time - lastTime < timeFactor) {\r\n            typedString += c;\r\n            if ((prefix.length() == 1) && (c == prefix.charAt(0))) {\r\n                // Subsequent same key presses move the keyboard focus to the\r\n                // next\r\n                // object that starts with the same letter.\r\n                startIndex++;\r\n            } else {\r\n                prefix = typedString;\r\n            }\r\n        } else {\r\n            startIndex++;\r\n            typedString = \"\" + c;\r\n            prefix = typedString;\r\n        }\r\n        lastTime = time;\r\n\r\n        if (startIndex < 0 || startIndex >= table.getRowCount()) {\r\n            startingFromSelection = false;\r\n            startIndex = 0;\r\n        }\r\n        int index = getNextMatch(prefix, startIndex);\r\n        if (index >= 0) {\r\n            System.out.println(\"Selecting column: \" + index);\r\n            table.setRowSelectionInterval(index, index);\r\n            table.scrollRectToVisible(\r\n                    new Rectangle(table.getCellRect(index, 0, true)));\r\n        } else if (startingFromSelection) { // wrap\r\n            index = getNextMatch(prefix, 0);\r\n            if (index >= 0) {\r\n                table.setRowSelectionInterval(index, index);\r\n                table.scrollRectToVisible(\r\n                        new Rectangle(table.getCellRect(index, 0, true)));\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean isNavigationKey(KeyEvent event) {\r\n        InputMap inputMap = table\r\n                .getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\r\n        KeyStroke key = KeyStroke.getKeyStrokeForEvent(event);\r\n        return inputMap != null && inputMap.get(key) != null;\r\n    }\r\n\r\n    public JTable getTable() {\r\n        return table;\r\n    }\r\n\r\n    public void setTable(JTable table) {\r\n        this.table = table;\r\n    }\r\n\r\n    public FolderViewTableModel getModel() {\r\n        return model;\r\n    }\r\n\r\n    public void setModel(FolderViewTableModel model) {\r\n        this.model = model;\r\n    }\r\n\r\n    static boolean isMenuShortcutKeyDown(InputEvent event) {\r\n        return (event.getModifiersEx()\r\n                & Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx()) != 0;\r\n    }\r\n\r\n    private static int adjustIndex(int index, JTable list) {\r\n        return index < list.getRowCount() ? index : -1;\r\n    }\r\n\r\n    private int getNextMatch(String prefix, int startIndex) {\r\n        for (int i = startIndex; i < table.getRowCount(); i++) {\r\n            int index = table.convertRowIndexToModel(i);\r\n            FileInfo info = model.getItemAt(index);\r\n            if (info.getName().toLowerCase().startsWith(prefix.toLowerCase())) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}", "metadata": {"task_id": "subhra74_snowflake/162", "ground_truth": "\r\n        System.out.println(\"Table key press\");\r\n        if (e.getKeyCode() == KeyEvent.VK_ENTER) {\r\n            return;\r\n        }\r\n        if (isNavigationKey(e)) {\r\n            prefix = \"\";\r\n            typedString = \"\";\r\n            lastTime = 0L;\r\n        }\r\n    ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "files", "view", "FolderViewKeyHandler.java"], "context_start_lineno": 0, "function_name": "keyPressed", "left_context": "class FolderViewKeyHandler extends KeyAdapter {\r\n\r\n    private JTable table;\r\n    private FolderViewTableModel model;\r\n\r\n    private String prefix = \"\";\r\n    private String typedString = \"\";\r\n    private long lastTime = 0L;\r\n\r\n    private long timeFactor = 1000L;\r\n\r\n    public FolderViewKeyHandler(JTable table, FolderViewTableModel model) {\r\n        super();\r\n        this.table = table;\r\n        this.model = model;\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {", "right_context": "}\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n\r\n        if (table.getRowCount() == 0 || e.isAltDown()\r\n                || isMenuShortcutKeyDown(e) || isNavigationKey(e)) {\r\n            // Nothing to select\r\n            return;\r\n        }\r\n        boolean startingFromSelection = true;\r\n\r\n        char c = e.getKeyChar();\r\n\r\n        long time = e.getWhen();\r\n        int startIndex = adjustIndex(\r\n                table.getSelectedRows().length > 0 ? table.getSelectedRows()[0]\r\n                        : -1,\r\n                table);\r\n        if (time - lastTime < timeFactor) {\r\n            typedString += c;\r\n            if ((prefix.length() == 1) && (c == prefix.charAt(0))) {\r\n                // Subsequent same key presses move the keyboard focus to the\r\n                // next\r\n                // object that starts with the same letter.\r\n                startIndex++;\r\n            } else {\r\n                prefix = typedString;\r\n            }\r\n        } else {\r\n            startIndex++;\r\n            typedString = \"\" + c;\r\n            prefix = typedString;\r\n        }\r\n        lastTime = time;\r\n\r\n        if (startIndex < 0 || startIndex >= table.getRowCount()) {\r\n            startingFromSelection = false;\r\n            startIndex = 0;\r\n        }\r\n        int index = getNextMatch(prefix, startIndex);\r\n        if (index >= 0) {\r\n            System.out.println(\"Selecting column: \" + index);\r\n            table.setRowSelectionInterval(index, index);\r\n            table.scrollRectToVisible(\r\n                    new Rectangle(table.getCellRect(index, 0, true)));\r\n        } else if (startingFromSelection) { // wrap\r\n            index = getNextMatch(prefix, 0);\r\n            if (index >= 0) {\r\n                table.setRowSelectionInterval(index, index);\r\n                table.scrollRectToVisible(\r\n                        new Rectangle(table.getCellRect(index, 0, true)));\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean isNavigationKey(KeyEvent event) {\r\n        InputMap inputMap = table\r\n                .getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\r\n        KeyStroke key = KeyStroke.getKeyStrokeForEvent(event);\r\n        return inputMap != null && inputMap.get(key) != null;\r\n    }\r\n\r\n    public JTable getTable() {\r\n        return table;\r\n    }\r\n\r\n    public void setTable(JTable table) {\r\n        this.table = table;\r\n    }\r\n\r\n    public FolderViewTableModel getModel() {\r\n        return model;\r\n    }\r\n\r\n    public void setModel(FolderViewTableModel model) {\r\n        this.model = model;\r\n    }\r\n\r\n    static boolean isMenuShortcutKeyDown(InputEvent event) {\r\n        return (event.getModifiersEx()\r\n                & Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx()) != 0;\r\n    }\r\n\r\n    private static int adjustIndex(int index, JTable list) {\r\n        return index < list.getRowCount() ? index : -1;\r\n    }\r\n\r\n    private int getNextMatch(String prefix, int startIndex) {\r\n        for (int i = startIndex; i < table.getRowCount(); i++) {\r\n            int index = table.convertRowIndexToModel(i);\r\n            FileInfo info = model.getItemAt(index);\r\n            if (info.getName().toLowerCase().startsWith(prefix.toLowerCase())) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}", "class_name": "FolderViewKeyHandler", "return_type": "void", "parameters": [{"type": "KeyEvent", "name": "e"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/TerminalPanel.java\n// --------------------------------------------------\n// private HyperlinkStyle findHyperlink(Point p){\n//   p=panelToCharCoords(p);\n//   if (p.x >= 0 && p.x < myTerminalTextBuffer.getWidth() && p.y >= -myTerminalTextBuffer.getHistoryLinesCount() && p.y <= myTerminalTextBuffer.getHeight()) {\n//     TextStyle style=myTerminalTextBuffer.getStyleAt(p.x,p.y);\n//     if (style instanceof HyperlinkStyle) {\n//       return (HyperlinkStyle)style;\n//     }\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Builder extends TextStyle.Builder {\n\n    \n    private LinkInfo myLinkInfo;\n\n    \n    private TextStyle myHighlightStyle;\n\n    \n    private TextStyle myPrevTextStyle;\n\n    \n    private HighlightMode myHighlightMode;\n\n    private Builder( HyperlinkStyle style) {\n      myLinkInfo = style.myLinkInfo;\n      myHighlightStyle = style.myHighlightStyle;\n      myPrevTextStyle = style.myPrevTextStyle;\n      myHighlightMode = style.myHighlightMode;\n    }\n\n    \n    public HyperlinkStyle build() {\n      return build(false);\n    }\n\n    \n    public HyperlinkStyle build(boolean keepColors) {<FILL_FUNCTION_BODY>}\n  }", "metadata": {"task_id": "subhra74_snowflake/195", "ground_truth": "\n      TerminalColor foreground = myHighlightStyle.getForeground();\n      TerminalColor background = myHighlightStyle.getBackground();\n      if (keepColors) {\n        TextStyle style = super.build();\n        foreground = style.getForeground() != null ? style.getForeground() : myHighlightStyle.getForeground();\n        background = style.getBackground() != null ? style.getBackground() : myHighlightStyle.getBackground();\n      }\n      return new HyperlinkStyle(keepColors, foreground, background, myLinkInfo, myHighlightMode, myPrevTextStyle);\n    ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-jediterm", "src", "main", "java", "com", "jediterm", "terminal", "HyperlinkStyle.java"], "context_start_lineno": 0, "function_name": "build", "left_context": "class Builder extends TextStyle.Builder {\n\n    \n    private LinkInfo myLinkInfo;\n\n    \n    private TextStyle myHighlightStyle;\n\n    \n    private TextStyle myPrevTextStyle;\n\n    \n    private HighlightMode myHighlightMode;\n\n    private Builder( HyperlinkStyle style) {\n      myLinkInfo = style.myLinkInfo;\n      myHighlightStyle = style.myHighlightStyle;\n      myPrevTextStyle = style.myPrevTextStyle;\n      myHighlightMode = style.myHighlightMode;\n    }\n\n    \n    public HyperlinkStyle build() {\n      return build(false);\n    }\n\n    \n    public HyperlinkStyle build(boolean keepColors) {", "right_context": "}\n  }", "class_name": "Builder", "return_type": "HyperlinkStyle", "parameters": [{"type": "boolean", "name": "keepColors"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Pair<A, B> {\n  public final A first;\n  public final B second;\n\n  //\n  public static <A, B> Pair<A, B> create(A first, B second) {\n    return new Pair<A, B>(first, second);\n  }\n\n  public static <T> T getFirst(Pair<T, ?> pair) {\n    return pair != null ? pair.first : null;\n  }\n\n  public static <T> T getSecond(Pair<?, T> pair) {\n    return pair != null ? pair.second : null;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private static final Pair EMPTY = create(null, null);\n\n  @SuppressWarnings(\"unchecked\")\n  public static <A, B> Pair<A, B> empty() {\n    return EMPTY;\n  }\n\n  public Pair(A first, B second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  public final A getFirst() {\n    return first;\n  }\n\n  public final B getSecond() {\n    return second;\n  }\n\n  @Override\n  public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n  public int hashCode() {\n    int result = first != null ? first.hashCode() : 0;\n    result = 31 * result + (second != null ? second.hashCode() : 0);\n    return result;\n  }\n\n  public String toString() {\n    return \"<\" + first + \",\" + second + \">\";\n  }\n}", "metadata": {"task_id": "subhra74_snowflake/243", "ground_truth": "\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    Pair pair = (Pair)o;\n\n    if (first != null ? !first.equals(pair.first) : pair.first != null) return false;\n    if (second != null ? !second.equals(pair.second) : pair.second != null) return false;\n\n    return true;\n  ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-jediterm", "src", "main", "java", "com", "jediterm", "terminal", "util", "Pair.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class Pair<A, B> {\n  public final A first;\n  public final B second;\n\n  //\n  public static <A, B> Pair<A, B> create(A first, B second) {\n    return new Pair<A, B>(first, second);\n  }\n\n  public static <T> T getFirst(Pair<T, ?> pair) {\n    return pair != null ? pair.first : null;\n  }\n\n  public static <T> T getSecond(Pair<?, T> pair) {\n    return pair != null ? pair.second : null;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private static final Pair EMPTY = create(null, null);\n\n  @SuppressWarnings(\"unchecked\")\n  public static <A, B> Pair<A, B> empty() {\n    return EMPTY;\n  }\n\n  public Pair(A first, B second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  public final A getFirst() {\n    return first;\n  }\n\n  public final B getSecond() {\n    return second;\n  }\n\n  @Override\n  public boolean equals(Object o) {", "right_context": "}\n\n  public int hashCode() {\n    int result = first != null ? first.hashCode() : 0;\n    result = 31 * result + (second != null ? second.hashCode() : 0);\n    return result;\n  }\n\n  public String toString() {\n    return \"<\" + first + \",\" + second + \">\";\n  }\n}", "class_name": "Pair", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GraphicalHostKeyVerifier extends OpenSSHKnownHosts {\r\n\t/**\r\n\t * @throws IOException\r\n\t * \r\n\t */\r\n\tpublic GraphicalHostKeyVerifier(File knownHostFile) throws IOException {\r\n\t\tsuper(knownHostFile);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected boolean hostKeyUnverifiableAction(String hostname, PublicKey key) {\r\n\t\tfinal KeyType type = KeyType.fromKey(key);\r\n\r\n\t\tint resp = JOptionPane.showConfirmDialog(null,\r\n\t\t\t\tString.format(\r\n\t\t\t\t\t\t\"The authenticity of host '%s' can't be established.\\n\"\r\n\t\t\t\t\t\t\t\t+ \"%s key fingerprint is %s.\\nAre you sure you want to continue connecting (yes/no)?\",\r\n\t\t\t\t\t\thostname, type, SecurityUtils.getFingerprint(key)));\r\n\r\n\t\tif (resp == JOptionPane.YES_OPTION) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.entries.add(new HostEntry(null, hostname, KeyType.fromKey(key), key));\r\n\t\t\t\twrite();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\t//throw new RuntimeException(e);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t@Override\r\n\tprotected boolean hostKeyChangedAction(String hostname, PublicKey key) {<FILL_FUNCTION_BODY>}\r\n\r\n\t@Override\r\n\tpublic boolean verify(String hostname, int port, PublicKey key) {\r\n\t\ttry {\r\n\t\t\tif (!super.verify(hostname, port, key)) {\r\n\t\t\t\treturn this.hostKeyUnverifiableAction(hostname, key);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn this.hostKeyUnverifiableAction(hostname, key);\r\n\t\t}\r\n\t}\r\n}", "metadata": {"task_id": "subhra74_snowflake/265", "ground_truth": "\r\n\t\tfinal KeyType type = KeyType.fromKey(key);\r\n\t\tfinal String fp = SecurityUtils.getFingerprint(key);\r\n\t\tfinal String path = getFile().getAbsolutePath();\r\n\t\tString msg = String.format(\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\"\r\n\t\t\t\t+ \"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\\n\"\r\n\t\t\t\t+ \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\"\r\n\t\t\t\t+ \"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\\n\"\r\n\t\t\t\t+ \"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\\n\"\r\n\t\t\t\t+ \"It is also possible that the host key has just been changed.\\n\"\r\n\t\t\t\t+ \"The fingerprint for the %s key sent by the remote host is\\n\" + \"%s.\\n\"\r\n\t\t\t\t+ \"Do you still want to connect to this server?\", type, fp, path);\r\n\t\treturn JOptionPane.showConfirmDialog(null, msg) == JOptionPane.YES_OPTION;\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ssh", "GraphicalHostKeyVerifier.java"], "context_start_lineno": 0, "function_name": "hostKeyChangedAction", "left_context": "class GraphicalHostKeyVerifier extends OpenSSHKnownHosts {\r\n\t/**\r\n\t * @throws IOException\r\n\t * \r\n\t */\r\n\tpublic GraphicalHostKeyVerifier(File knownHostFile) throws IOException {\r\n\t\tsuper(knownHostFile);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected boolean hostKeyUnverifiableAction(String hostname, PublicKey key) {\r\n\t\tfinal KeyType type = KeyType.fromKey(key);\r\n\r\n\t\tint resp = JOptionPane.showConfirmDialog(null,\r\n\t\t\t\tString.format(\r\n\t\t\t\t\t\t\"The authenticity of host '%s' can't be established.\\n\"\r\n\t\t\t\t\t\t\t\t+ \"%s key fingerprint is %s.\\nAre you sure you want to continue connecting (yes/no)?\",\r\n\t\t\t\t\t\thostname, type, SecurityUtils.getFingerprint(key)));\r\n\r\n\t\tif (resp == JOptionPane.YES_OPTION) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.entries.add(new HostEntry(null, hostname, KeyType.fromKey(key), key));\r\n\t\t\t\twrite();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\t//throw new RuntimeException(e);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t@Override\r\n\tprotected boolean hostKeyChangedAction(String hostname, PublicKey key) {", "right_context": "}\r\n\r\n\t@Override\r\n\tpublic boolean verify(String hostname, int port, PublicKey key) {\r\n\t\ttry {\r\n\t\t\tif (!super.verify(hostname, port, key)) {\r\n\t\t\t\treturn this.hostKeyUnverifiableAction(hostname, key);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn this.hostKeyUnverifiableAction(hostname, key);\r\n\t\t}\r\n\t}\r\n}", "class_name": "GraphicalHostKeyVerifier", "return_type": "boolean", "parameters": [{"type": "String", "name": "hostname"}, {"type": "PublicKey", "name": "key"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DndTransferData implements Serializable {\r\n\r\n\tpublic enum DndSourceType {\r\n\t\tSSH, SFTP, FTP, LOCAL\r\n\t}\r\n\r\n\tpublic enum TransferAction {\r\n\t\tDragDrop, Cut, Copy\r\n\t}\r\n\r\n\tprivate int sessionHashcode;\r\n\tprivate FileInfo[] files;\r\n\tprivate String currentDirectory;\r\n\tprivate int source;\r\n\tprivate TransferAction transferAction = TransferAction.DragDrop;\r\n\r\n\tprivate DndSourceType sourceType;\r\n\r\n\tpublic DndTransferData(int sessionHashcode, FileInfo[] files,\r\n\t\t\tString currentDirectory, int source, DndSourceType sourceType) {\r\n\t\tthis.sessionHashcode = sessionHashcode;\r\n\t\tthis.files = files;\r\n\t\tthis.currentDirectory = currentDirectory;\r\n\t\tthis.source = source;\r\n\t\tthis.sourceType = sourceType;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {<FILL_FUNCTION_BODY>}\r\n\r\n\tpublic int getInfo() {\r\n\t\treturn sessionHashcode;\r\n\t}\r\n\r\n\tpublic void setInfo(int info) {\r\n\t\tthis.sessionHashcode = info;\r\n\t}\r\n\r\n\tpublic FileInfo[] getFiles() {\r\n\t\treturn files;\r\n\t}\r\n\r\n\tpublic void setFiles(FileInfo[] files) {\r\n\t\tthis.files = files;\r\n\t}\r\n\r\n\tpublic String getCurrentDirectory() {\r\n\t\treturn currentDirectory;\r\n\t}\r\n\r\n\tpublic void setCurrentDirectory(String currentDirectory) {\r\n\t\tthis.currentDirectory = currentDirectory;\r\n\t}\r\n\r\n\tpublic int getSource() {\r\n\t\treturn source;\r\n\t}\r\n\r\n\tpublic void setSource(int source) {\r\n\t\tthis.source = source;\r\n\t}\r\n\r\n\tpublic TransferAction getTransferAction() {\r\n\t\treturn transferAction;\r\n\t}\r\n\r\n\tpublic void setTransferAction(TransferAction transferAction) {\r\n\t\tthis.transferAction = transferAction;\r\n\t}\r\n\r\n\tpublic DndSourceType getSourceType() {\r\n\t\treturn sourceType;\r\n\t}\r\n}", "metadata": {"task_id": "subhra74_snowflake/268", "ground_truth": "\r\n\t\treturn \"DndTransferData{\" + \"sessionHashcode=\" + sessionHashcode\r\n\t\t\t\t+ \", files=\" + Arrays.toString(files) + \", currentDirectory='\"\r\n\t\t\t\t+ currentDirectory + '\\'' + '}';\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "files", "view", "DndTransferData.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class DndTransferData implements Serializable {\r\n\r\n\tpublic enum DndSourceType {\r\n\t\tSSH, SFTP, FTP, LOCAL\r\n\t}\r\n\r\n\tpublic enum TransferAction {\r\n\t\tDragDrop, Cut, Copy\r\n\t}\r\n\r\n\tprivate int sessionHashcode;\r\n\tprivate FileInfo[] files;\r\n\tprivate String currentDirectory;\r\n\tprivate int source;\r\n\tprivate TransferAction transferAction = TransferAction.DragDrop;\r\n\r\n\tprivate DndSourceType sourceType;\r\n\r\n\tpublic DndTransferData(int sessionHashcode, FileInfo[] files,\r\n\t\t\tString currentDirectory, int source, DndSourceType sourceType) {\r\n\t\tthis.sessionHashcode = sessionHashcode;\r\n\t\tthis.files = files;\r\n\t\tthis.currentDirectory = currentDirectory;\r\n\t\tthis.source = source;\r\n\t\tthis.sourceType = sourceType;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {", "right_context": "}\r\n\r\n\tpublic int getInfo() {\r\n\t\treturn sessionHashcode;\r\n\t}\r\n\r\n\tpublic void setInfo(int info) {\r\n\t\tthis.sessionHashcode = info;\r\n\t}\r\n\r\n\tpublic FileInfo[] getFiles() {\r\n\t\treturn files;\r\n\t}\r\n\r\n\tpublic void setFiles(FileInfo[] files) {\r\n\t\tthis.files = files;\r\n\t}\r\n\r\n\tpublic String getCurrentDirectory() {\r\n\t\treturn currentDirectory;\r\n\t}\r\n\r\n\tpublic void setCurrentDirectory(String currentDirectory) {\r\n\t\tthis.currentDirectory = currentDirectory;\r\n\t}\r\n\r\n\tpublic int getSource() {\r\n\t\treturn source;\r\n\t}\r\n\r\n\tpublic void setSource(int source) {\r\n\t\tthis.source = source;\r\n\t}\r\n\r\n\tpublic TransferAction getTransferAction() {\r\n\t\treturn transferAction;\r\n\t}\r\n\r\n\tpublic void setTransferAction(TransferAction transferAction) {\r\n\t\tthis.transferAction = transferAction;\r\n\t}\r\n\r\n\tpublic DndSourceType getSourceType() {\r\n\t\treturn sourceType;\r\n\t}\r\n}", "class_name": "DndTransferData", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LinkResult {\n  private final LinkResultItem myItem;\n  private List<LinkResultItem> myItemList;\n\n  public LinkResult( LinkResultItem item) {\n    myItem = item;\n    myItemList = null;\n  }\n\n  public LinkResult( List<LinkResultItem> itemList) {\n    myItemList = itemList;\n    myItem = null;\n  }\n\n  public List<LinkResultItem> getItems() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "subhra74_snowflake/300", "ground_truth": "\n    if (myItemList == null) {\n      myItemList = new ArrayList<>(Arrays.asList(myItem));\n    }\n    return myItemList;\n  ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-jediterm", "src", "main", "java", "com", "jediterm", "terminal", "model", "hyperlinks", "LinkResult.java"], "context_start_lineno": 0, "function_name": "getItems", "left_context": "class LinkResult {\n  private final LinkResultItem myItem;\n  private List<LinkResultItem> myItemList;\n\n  public LinkResult( LinkResultItem item) {\n    myItem = item;\n    myItemList = null;\n  }\n\n  public LinkResult( List<LinkResultItem> itemList) {\n    myItemList = itemList;\n    myItem = null;\n  }\n\n  public List<LinkResultItem> getItems() {", "right_context": "}\n}", "class_name": "LinkResult", "return_type": "List<LinkResultItem>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WinScpImporter {\r\n\tprivate static final String WinSCPRegKey = \"Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions\";\r\n\r\n\tpublic static Map<String, String> getKeyNames() {\r\n\t\tMap<String, String> map = new HashMap<String, String>();\r\n\t\ttry {\r\n\t\t\tString[] keys = Advapi32Util\r\n\t\t\t\t\t.registryGetKeys(WinReg.HKEY_CURRENT_USER, WinSCPRegKey);\r\n\t\t\tfor (String key : keys) {\r\n\t\t\t\tString decodedKey = key.replace(\"%20\", \" \");\r\n\t\t\t\tmap.put(key, decodedKey);\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(map);\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\tpublic static void importSessions(DefaultMutableTreeNode node,\r\n\t\t\tList<String> keys) {<FILL_FUNCTION_BODY>}\r\n\r\n\tprivate static DefaultMutableTreeNode find(DefaultMutableTreeNode node,\r\n\t\t\tString name) {\r\n\t\tNamedItem item = (NamedItem) node.getUserObject();\r\n\t\tif (item.name.equals(name)) {\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tfor (int i = 0; i < node.getChildCount(); i++) {\r\n\t\t\tDefaultMutableTreeNode child = (DefaultMutableTreeNode) node\r\n\t\t\t\t\t.getChildAt(i);\r\n\t\t\tif (child.getAllowsChildren()) {\r\n\t\t\t\tDefaultMutableTreeNode fn = find(child, name);\r\n\t\t\t\tif (fn != null)\r\n\t\t\t\t\treturn fn;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}", "metadata": {"task_id": "subhra74_snowflake/321", "ground_truth": "\r\n\r\n\t\t// String[] keys =\r\n\t\t// Advapi32Util.registryGetKeys(WinReg.HKEY_CURRENT_USER,\r\n\t\t// WinSCPRegKey);\r\n\t\tfor (String key : keys) {\r\n\t\t\tif (RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"FSProtocol\") == 0) {\r\n\t\t\t\tString host = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"HostName\");\r\n\t\t\t\tint port = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"PortNumber\");\r\n\t\t\t\tif (port == 0)\r\n\t\t\t\t\tport = 22;\r\n\t\t\t\tString user = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"UserName\");\r\n\t\t\t\tString keyfile = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"PublicKeyFile\");\r\n\r\n\t\t\t\tString proxyHost = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"ProxyHost\");\r\n\t\t\t\tint proxyPort = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"ProxyPort\");\r\n\t\t\t\tString proxyUser = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"ProxyUsername\");\r\n\r\n\t\t\t\tString proxyPass = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"ProxyPassword\");\r\n\r\n\t\t\t\tint proxyType = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tWinSCPRegKey + \"\\\\\" + key, \"ProxyMethod\");\r\n\t\t\t\tif (proxyType == 1) {\r\n\t\t\t\t\tproxyType = 2;\r\n\t\t\t\t} else if (proxyType == 2) {\r\n\t\t\t\t\tproxyType = 3;\r\n\t\t\t\t} else if (proxyType == 3) {\r\n\t\t\t\t\tproxyType = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tproxyType = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tSessionInfo info = new SessionInfo();\r\n\r\n\t\t\t\tinfo.setHost(host);\r\n\t\t\t\tinfo.setPort(port);\r\n\t\t\t\tinfo.setUser(user);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (keyfile != null && keyfile.length() > 0) {\r\n\t\t\t\t\t\tinfo.setPrivateKeyFile(\r\n\t\t\t\t\t\t\t\tURLDecoder.decode(keyfile, \"utf-8\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\tinfo.setProxyHost(proxyHost);\r\n\t\t\t\tinfo.setProxyPort(proxyPort);\r\n\t\t\t\tinfo.setProxyUser(proxyUser);\r\n\t\t\t\tinfo.setProxyPassword(proxyPass);\r\n\t\t\t\tinfo.setProxyType(proxyType);\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tString[] arr = URLDecoder.decode(key, \"utf-8\").split(\"/\");\r\n\t\t\t\t\tinfo.setName(arr[arr.length - 1]);\r\n\r\n\t\t\t\t\tDefaultMutableTreeNode parent = node;\r\n\r\n\t\t\t\t\tif (arr.length > 1) {\r\n\t\t\t\t\t\tfor (int i = 0; i < arr.length - 1; i++) {\r\n\r\n\t\t\t\t\t\t\tDefaultMutableTreeNode parent2 = find(parent,\r\n\t\t\t\t\t\t\t\t\tarr[i]);\r\n\t\t\t\t\t\t\tif (parent2 == null) {\r\n\t\t\t\t\t\t\t\tSessionFolder folder = new SessionFolder();\r\n\t\t\t\t\t\t\t\tfolder.setName(arr[i]);\r\n\t\t\t\t\t\t\t\tparent2 = new DefaultMutableTreeNode(folder);\r\n\t\t\t\t\t\t\t\tparent2.setAllowsChildren(true);\r\n\t\t\t\t\t\t\t\tparent.add(parent2);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tparent = parent2;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tDefaultMutableTreeNode node1 = new DefaultMutableTreeNode(\r\n\t\t\t\t\t\t\tinfo);\r\n\t\t\t\t\tnode1.setAllowsChildren(false);\r\n\t\t\t\t\tparent.add(node1);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "WinScpImporter.java"], "context_start_lineno": 0, "function_name": "importSessions", "left_context": "class WinScpImporter {\r\n\tprivate static final String WinSCPRegKey = \"Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions\";\r\n\r\n\tpublic static Map<String, String> getKeyNames() {\r\n\t\tMap<String, String> map = new HashMap<String, String>();\r\n\t\ttry {\r\n\t\t\tString[] keys = Advapi32Util\r\n\t\t\t\t\t.registryGetKeys(WinReg.HKEY_CURRENT_USER, WinSCPRegKey);\r\n\t\t\tfor (String key : keys) {\r\n\t\t\t\tString decodedKey = key.replace(\"%20\", \" \");\r\n\t\t\t\tmap.put(key, decodedKey);\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(map);\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\tpublic static void importSessions(DefaultMutableTreeNode node,\r\n\t\t\tList<String> keys) {", "right_context": "}\r\n\r\n\tprivate static DefaultMutableTreeNode find(DefaultMutableTreeNode node,\r\n\t\t\tString name) {\r\n\t\tNamedItem item = (NamedItem) node.getUserObject();\r\n\t\tif (item.name.equals(name)) {\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tfor (int i = 0; i < node.getChildCount(); i++) {\r\n\t\t\tDefaultMutableTreeNode child = (DefaultMutableTreeNode) node\r\n\t\t\t\t\t.getChildAt(i);\r\n\t\t\tif (child.getAllowsChildren()) {\r\n\t\t\t\tDefaultMutableTreeNode fn = find(child, name);\r\n\t\t\t\tif (fn != null)\r\n\t\t\t\t\treturn fn;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}", "class_name": "WinScpImporter", "return_type": "void", "parameters": [{"type": "DefaultMutableTreeNode", "name": "node"}, {"type": "List<String>", "name": "keys"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HopEntry {\r\n\tpublic HopEntry(String id, String host, int port, String user, String password, String keypath) {\r\n\t\tsuper();\r\n\t\tthis.id = id;\r\n\t\tthis.host = host;\r\n\t\tthis.port = port;\r\n\t\tthis.user = user;\r\n\t\tthis.password = password;\r\n\t\tthis.keypath = keypath;\r\n\t}\r\n\r\n\tpublic HopEntry() {\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\tprivate String id, host, user, password, keypath;\r\n\tprivate int port;\r\n\r\n\tpublic String getId() {\r\n\t\treturn id;\r\n\t}\r\n\r\n\tpublic void setId(String id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic String getHost() {\r\n\t\treturn host;\r\n\t}\r\n\r\n\tpublic void setHost(String host) {\r\n\t\tthis.host = host;\r\n\t}\r\n\r\n\tpublic String getUser() {\r\n\t\treturn user;\r\n\t}\r\n\r\n\tpublic void setUser(String user) {\r\n\t\tthis.user = user;\r\n\t}\r\n\r\n\tpublic String getPassword() {\r\n\t\treturn password;\r\n\t}\r\n\r\n\tpublic void setPassword(String password) {\r\n\t\tthis.password = password;\r\n\t}\r\n\r\n\tpublic String getKeypath() {\r\n\t\treturn keypath;\r\n\t}\r\n\r\n\tpublic void setKeypath(String keypath) {\r\n\t\tthis.keypath = keypath;\r\n\t}\r\n\r\n\tpublic int getPort() {\r\n\t\treturn port;\r\n\t}\r\n\r\n\tpublic void setPort(int port) {\r\n\t\tthis.port = port;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "subhra74_snowflake/409", "ground_truth": "\r\n\t\treturn host != null ? (user != null ? user + \"@\" + host : host) : \"\";\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "HopEntry.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class HopEntry {\r\n\tpublic HopEntry(String id, String host, int port, String user, String password, String keypath) {\r\n\t\tsuper();\r\n\t\tthis.id = id;\r\n\t\tthis.host = host;\r\n\t\tthis.port = port;\r\n\t\tthis.user = user;\r\n\t\tthis.password = password;\r\n\t\tthis.keypath = keypath;\r\n\t}\r\n\r\n\tpublic HopEntry() {\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\tprivate String id, host, user, password, keypath;\r\n\tprivate int port;\r\n\r\n\tpublic String getId() {\r\n\t\treturn id;\r\n\t}\r\n\r\n\tpublic void setId(String id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic String getHost() {\r\n\t\treturn host;\r\n\t}\r\n\r\n\tpublic void setHost(String host) {\r\n\t\tthis.host = host;\r\n\t}\r\n\r\n\tpublic String getUser() {\r\n\t\treturn user;\r\n\t}\r\n\r\n\tpublic void setUser(String user) {\r\n\t\tthis.user = user;\r\n\t}\r\n\r\n\tpublic String getPassword() {\r\n\t\treturn password;\r\n\t}\r\n\r\n\tpublic void setPassword(String password) {\r\n\t\tthis.password = password;\r\n\t}\r\n\r\n\tpublic String getKeypath() {\r\n\t\treturn keypath;\r\n\t}\r\n\r\n\tpublic void setKeypath(String keypath) {\r\n\t\tthis.keypath = keypath;\r\n\t}\r\n\r\n\tpublic int getPort() {\r\n\t\treturn port;\r\n\t}\r\n\r\n\tpublic void setPort(int port) {\r\n\t\tthis.port = port;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {", "right_context": "}\r\n}", "class_name": "HopEntry", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/WinScpImporter.java\n// --------------------------------------------------\n// public static Map<String,String> getKeyNames(){\n//   Map<String,String> map=new HashMap<String,String>();\n//   try {\n//     String[] keys=Advapi32Util.registryGetKeys(WinReg.HKEY_CURRENT_USER,WinSCPRegKey);\n//     for (    String key : keys) {\n//       String decodedKey=key.replace(\"%20\",\" \");\n//       map.put(key,decodedKey);\n//     }\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   System.out.println(map);\n//   return map;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PuttyImporter {\r\n\tprivate static final String PuttyREGKey = \"Software\\\\SimonTatham\\\\PuTTY\\\\Sessions\";\r\n\r\n\tpublic static Map<String, String> getKeyNames() {<FILL_FUNCTION_BODY>}\r\n\r\n\tpublic static void importSessions(DefaultMutableTreeNode node,\r\n\t\t\tList<String> keys) {\r\n\r\n\t\t// String[] keys =\r\n\t\t// Advapi32Util.registryGetKeys(WinReg.HKEY_CURRENT_USER,\r\n\t\t// PuttyREGKey);\r\n\t\tfor (String key : keys) {\r\n\t\t\tif (\"ssh\".equals(RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"Protocol\"))) {\r\n\t\t\t\tString host = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"HostName\");\r\n\t\t\t\tint port = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"PortNumber\");\r\n\t\t\t\tString user = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"UserName\");\r\n\t\t\t\tString keyfile = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"PublicKeyFile\");\r\n\r\n\t\t\t\tString proxyHost = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyHost\");\r\n\t\t\t\tint proxyPort = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyPort\");\r\n\t\t\t\tString proxyUser = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyUsername\");\r\n\r\n\t\t\t\tString proxyPass = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyPassword\");\r\n\r\n\t\t\t\tint proxyType = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyMethod\");\r\n\t\t\t\tif (proxyType == 1) {\r\n\t\t\t\t\tproxyType = 2;\r\n\t\t\t\t} else if (proxyType == 2) {\r\n\t\t\t\t\tproxyType = 3;\r\n\t\t\t\t} else if (proxyType == 3) {\r\n\t\t\t\t\tproxyType = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tproxyType = 0;\r\n\t\t\t\t}\r\n\t\t\t\tSessionInfo info = new SessionInfo();\r\n\t\t\t\tinfo.setName(key);\r\n\t\t\t\tinfo.setHost(host);\r\n\t\t\t\tinfo.setPort(port);\r\n\t\t\t\tinfo.setUser(user);\r\n\t\t\t\tinfo.setPrivateKeyFile(keyfile);\r\n\t\t\t\tinfo.setProxyHost(proxyHost);\r\n\t\t\t\tinfo.setProxyPort(proxyPort);\r\n\t\t\t\tinfo.setProxyUser(proxyUser);\r\n\t\t\t\tinfo.setProxyPassword(proxyPass);\r\n\t\t\t\tinfo.setProxyType(proxyType);\r\n\r\n\t\t\t\tDefaultMutableTreeNode node1 = new DefaultMutableTreeNode(info);\r\n\t\t\t\tnode1.setAllowsChildren(false);\r\n\t\t\t\tnode.add(node1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}", "metadata": {"task_id": "subhra74_snowflake/427", "ground_truth": "\r\n\t\tMap<String, String> map = new HashMap<String, String>();\r\n\t\ttry {\r\n\t\t\tString[] keys = Advapi32Util\r\n\t\t\t\t\t.registryGetKeys(WinReg.HKEY_CURRENT_USER, PuttyREGKey);\r\n\t\t\tfor (String key : keys) {\r\n\t\t\t\tString decodedKey = key.replace(\"%20\", \" \");\r\n\t\t\t\tmap.put(key, decodedKey);\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "PuttyImporter.java"], "context_start_lineno": 0, "function_name": "getKeyNames", "left_context": "class PuttyImporter {\r\n\tprivate static final String PuttyREGKey = \"Software\\\\SimonTatham\\\\PuTTY\\\\Sessions\";\r\n\r\n\tpublic static Map<String, String> getKeyNames() {", "right_context": "}\r\n\r\n\tpublic static void importSessions(DefaultMutableTreeNode node,\r\n\t\t\tList<String> keys) {\r\n\r\n\t\t// String[] keys =\r\n\t\t// Advapi32Util.registryGetKeys(WinReg.HKEY_CURRENT_USER,\r\n\t\t// PuttyREGKey);\r\n\t\tfor (String key : keys) {\r\n\t\t\tif (\"ssh\".equals(RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"Protocol\"))) {\r\n\t\t\t\tString host = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"HostName\");\r\n\t\t\t\tint port = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"PortNumber\");\r\n\t\t\t\tString user = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"UserName\");\r\n\t\t\t\tString keyfile = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"PublicKeyFile\");\r\n\r\n\t\t\t\tString proxyHost = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyHost\");\r\n\t\t\t\tint proxyPort = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyPort\");\r\n\t\t\t\tString proxyUser = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyUsername\");\r\n\r\n\t\t\t\tString proxyPass = RegUtil.regGetStr(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyPassword\");\r\n\r\n\t\t\t\tint proxyType = RegUtil.regGetInt(WinReg.HKEY_CURRENT_USER,\r\n\t\t\t\t\t\tPuttyREGKey + \"\\\\\" + key, \"ProxyMethod\");\r\n\t\t\t\tif (proxyType == 1) {\r\n\t\t\t\t\tproxyType = 2;\r\n\t\t\t\t} else if (proxyType == 2) {\r\n\t\t\t\t\tproxyType = 3;\r\n\t\t\t\t} else if (proxyType == 3) {\r\n\t\t\t\t\tproxyType = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tproxyType = 0;\r\n\t\t\t\t}\r\n\t\t\t\tSessionInfo info = new SessionInfo();\r\n\t\t\t\tinfo.setName(key);\r\n\t\t\t\tinfo.setHost(host);\r\n\t\t\t\tinfo.setPort(port);\r\n\t\t\t\tinfo.setUser(user);\r\n\t\t\t\tinfo.setPrivateKeyFile(keyfile);\r\n\t\t\t\tinfo.setProxyHost(proxyHost);\r\n\t\t\t\tinfo.setProxyPort(proxyPort);\r\n\t\t\t\tinfo.setProxyUser(proxyUser);\r\n\t\t\t\tinfo.setProxyPassword(proxyPass);\r\n\t\t\t\tinfo.setProxyType(proxyType);\r\n\r\n\t\t\t\tDefaultMutableTreeNode node1 = new DefaultMutableTreeNode(info);\r\n\t\t\t\tnode1.setAllowsChildren(false);\r\n\t\t\t\tnode.add(node1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}", "class_name": "PuttyImporter", "return_type": "Map<String,String>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ImportDlg extends JDialog {\r\n\t// private JComboBox<String> items;\r\n\tprivate JList<String> sessionList;\r\n\tprivate DefaultListModel<String> model;\r\n\r\n\tpublic ImportDlg(Window w, int index, DefaultMutableTreeNode node) {\r\n\t\tsuper(w);\r\n\t\tsetSize(400, 300);\r\n\t\tsetLocationRelativeTo(w);\r\n\t\tsetModal(true);\r\n\t\tmodel = new DefaultListModel<>();\r\n\t\tsessionList = new JList<>(model);\r\n\t\tsessionList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\r\n\r\n\t\tswitch (index) {\r\n\t\tcase 0:\r\n\t\t\timportFromPutty();\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\timportFromWinScp();\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tJPanel panel = new JPanel(new BorderLayout());\r\n\t\tpanel.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\t\tpanel.add(new JScrollPane(sessionList));\r\n\t\tadd(panel);\r\n\r\n\t\tBox b2 = Box.createHorizontalBox();\r\n\t\tb2.setBorder(new EmptyBorder(0, 5, 5, 5));\r\n\r\n\t\tJButton btnSelect = new JButton(\"Select all\");\r\n\t\tbtnSelect.addActionListener(e -> {\r\n\t\t\tint arr[] = new int[model.size()];\r\n\t\t\tfor (int i = 0; i < model.size(); i++) {\r\n\t\t\t\tarr[i] = i;\r\n\t\t\t}\r\n\t\t\tsessionList.setSelectedIndices(arr);\r\n\t\t});\r\n\r\n\t\tJButton btnUnSelect = new JButton(\"Un-select all\");\r\n\t\tbtnUnSelect.addActionListener(e -> {\r\n\t\t\tint arr[] = new int[0];\r\n\t\t\tsessionList.setSelectedIndices(arr);\r\n\t\t});\r\n\r\n\t\tb2.add(btnSelect);\r\n\t\tb2.add(Box.createRigidArea(new Dimension(5, 5)));\r\n\t\tb2.add(btnUnSelect);\r\n\r\n\t\tb2.add(Box.createHorizontalGlue());\r\n\r\n\t\tJButton btnImport = new JButton(\"Import\");\r\n\t\tbtnImport.addActionListener(e -> {\r\n\r\n\t\t\tswitch (index) {\r\n\t\t\tcase 0:\r\n\t\t\t\timportSessionsFromPutty(node);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\timportSessionsFromWinScp(node);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdispose();\r\n\t\t});\r\n\r\n\t\tb2.add(btnImport);\r\n\r\n\t\tadd(b2, BorderLayout.SOUTH);\r\n\r\n\t\t//importFromPutty();\r\n\t}\r\n\r\n\tprivate void importFromPutty() {\r\n\t\tmodel.clear();\r\n\t\tmodel.addAll(PuttyImporter.getKeyNames().keySet());\r\n\t}\r\n\r\n\tprivate void importFromWinScp() {\r\n\t\tmodel.clear();\r\n\t\tmodel.addAll(WinScpImporter.getKeyNames().keySet());\r\n\t}\r\n\r\n\tprivate void importSessionsFromPutty(DefaultMutableTreeNode node) {\r\n\t\tList<String> list = new ArrayList<String>();\r\n\t\tint arr[] = sessionList.getSelectedIndices();\r\n\t\tif (arr != null) {\r\n\t\t\tfor (int i = 0; i < arr.length; i++) {\r\n\t\t\t\tlist.add(model.get(arr[i]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tPuttyImporter.importSessions(node, list);\r\n//\t\tSessionFolder folder = SessionStore.load().getFolder();\r\n//\t\tfolder.getItems().addAll(sessions);\r\n//\t\tSessionStore.store(folder);\r\n\t}\r\n\r\n\tprivate void importSessionsFromWinScp(DefaultMutableTreeNode node) {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "subhra74_snowflake/436", "ground_truth": "\r\n\t\tList<String> list = new ArrayList<String>();\r\n\r\n\t\tint arr[] = sessionList.getSelectedIndices();\r\n\t\tif (arr != null) {\r\n\t\t\tfor (int i = 0; i < arr.length; i++) {\r\n\t\t\t\tlist.add(model.get(arr[i]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tWinScpImporter.importSessions(node, list);\r\n//\t\tSessionFolder folder = SessionStore.load().getFolder();\r\n//\t\tfolder.getItems().addAll(sessions);\r\n//\t\tSessionStore.store(folder);\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "muon", "app", "ui", "components", "session", "ImportDlg.java"], "context_start_lineno": 0, "function_name": "importSessionsFromWinScp", "left_context": "class ImportDlg extends JDialog {\r\n\t// private JComboBox<String> items;\r\n\tprivate JList<String> sessionList;\r\n\tprivate DefaultListModel<String> model;\r\n\r\n\tpublic ImportDlg(Window w, int index, DefaultMutableTreeNode node) {\r\n\t\tsuper(w);\r\n\t\tsetSize(400, 300);\r\n\t\tsetLocationRelativeTo(w);\r\n\t\tsetModal(true);\r\n\t\tmodel = new DefaultListModel<>();\r\n\t\tsessionList = new JList<>(model);\r\n\t\tsessionList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\r\n\r\n\t\tswitch (index) {\r\n\t\tcase 0:\r\n\t\t\timportFromPutty();\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\timportFromWinScp();\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tJPanel panel = new JPanel(new BorderLayout());\r\n\t\tpanel.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\t\tpanel.add(new JScrollPane(sessionList));\r\n\t\tadd(panel);\r\n\r\n\t\tBox b2 = Box.createHorizontalBox();\r\n\t\tb2.setBorder(new EmptyBorder(0, 5, 5, 5));\r\n\r\n\t\tJButton btnSelect = new JButton(\"Select all\");\r\n\t\tbtnSelect.addActionListener(e -> {\r\n\t\t\tint arr[] = new int[model.size()];\r\n\t\t\tfor (int i = 0; i < model.size(); i++) {\r\n\t\t\t\tarr[i] = i;\r\n\t\t\t}\r\n\t\t\tsessionList.setSelectedIndices(arr);\r\n\t\t});\r\n\r\n\t\tJButton btnUnSelect = new JButton(\"Un-select all\");\r\n\t\tbtnUnSelect.addActionListener(e -> {\r\n\t\t\tint arr[] = new int[0];\r\n\t\t\tsessionList.setSelectedIndices(arr);\r\n\t\t});\r\n\r\n\t\tb2.add(btnSelect);\r\n\t\tb2.add(Box.createRigidArea(new Dimension(5, 5)));\r\n\t\tb2.add(btnUnSelect);\r\n\r\n\t\tb2.add(Box.createHorizontalGlue());\r\n\r\n\t\tJButton btnImport = new JButton(\"Import\");\r\n\t\tbtnImport.addActionListener(e -> {\r\n\r\n\t\t\tswitch (index) {\r\n\t\t\tcase 0:\r\n\t\t\t\timportSessionsFromPutty(node);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\timportSessionsFromWinScp(node);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdispose();\r\n\t\t});\r\n\r\n\t\tb2.add(btnImport);\r\n\r\n\t\tadd(b2, BorderLayout.SOUTH);\r\n\r\n\t\t//importFromPutty();\r\n\t}\r\n\r\n\tprivate void importFromPutty() {\r\n\t\tmodel.clear();\r\n\t\tmodel.addAll(PuttyImporter.getKeyNames().keySet());\r\n\t}\r\n\r\n\tprivate void importFromWinScp() {\r\n\t\tmodel.clear();\r\n\t\tmodel.addAll(WinScpImporter.getKeyNames().keySet());\r\n\t}\r\n\r\n\tprivate void importSessionsFromPutty(DefaultMutableTreeNode node) {\r\n\t\tList<String> list = new ArrayList<String>();\r\n\t\tint arr[] = sessionList.getSelectedIndices();\r\n\t\tif (arr != null) {\r\n\t\t\tfor (int i = 0; i < arr.length; i++) {\r\n\t\t\t\tlist.add(model.get(arr[i]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tPuttyImporter.importSessions(node, list);\r\n//\t\tSessionFolder folder = SessionStore.load().getFolder();\r\n//\t\tfolder.getItems().addAll(sessions);\r\n//\t\tSessionStore.store(folder);\r\n\t}\r\n\r\n\tprivate void importSessionsFromWinScp(DefaultMutableTreeNode node) {", "right_context": "}\r\n}", "class_name": "ImportDlg", "return_type": "void", "parameters": [{"type": "DefaultMutableTreeNode", "name": "node"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FormatUtils {\r\n    public static String humanReadableByteCount(long bytes, boolean si) {<FILL_FUNCTION_BODY>}\r\n\r\n    public static final String formatDate(LocalDateTime dateTime) {\r\n        return dateTime.format(DateTimeFormatter.ofPattern(\"MM/dd/yyyy hh:mm a\"));\r\n    }\r\n}", "metadata": {"task_id": "subhra74_snowflake/487", "ground_truth": "\r\n        int unit = si ? 1000 : 1024;\r\n        if (bytes < unit)\r\n            return bytes + \" B\";\r\n        int exp = (int) (Math.log(bytes) / Math.log(unit));\r\n        String pre = (si ? \"kMGTPE\" : \"KMGTPE\").charAt(exp - 1)\r\n                + (si ? \"\" : \"i\");\r\n        return String.format(\"%.1f %s\", bytes / Math.pow(unit, exp), pre);\r\n    ", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "util", "FormatUtils.java"], "context_start_lineno": 0, "function_name": "humanReadableByteCount", "left_context": "class FormatUtils {\r\n    public static String humanReadableByteCount(long bytes, boolean si) {", "right_context": "}\r\n\r\n    public static final String formatDate(LocalDateTime dateTime) {\r\n        return dateTime.format(DateTimeFormatter.ofPattern(\"MM/dd/yyyy hh:mm a\"));\r\n    }\r\n}", "class_name": "FormatUtils", "return_type": "String", "parameters": [{"type": "long", "name": "bytes"}, {"type": "boolean", "name": "si"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/TerminalPanel.java\n// --------------------------------------------------\n// protected Font getFontToDisplay(char c,TextStyle style){\n//   boolean bold=style.hasOption(TextStyle.Option.BOLD);\n//   boolean italic=style.hasOption(TextStyle.Option.ITALIC);\n//   if (bold && mySettingsProvider.DECCompatibilityMode() && CharacterSets.isDecBoxChar(c)) {\n//     return myNormalFont;\n//   }\n//   return bold ? (italic ? myBoldItalicFont : myBoldFont) : (italic ? myItalicFont : myNormalFont);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/laf/AppSkin.java\n// --------------------------------------------------\n// public Font getIconFont(){\n//   return UIManager.getFont(\"iconFont\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/laf/AppSkin.java\n// --------------------------------------------------\n// public Font getDefaultFont(){\n//   return UIManager.getFont(\"defaultFont\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/TerminalPanel.java\n// --------------------------------------------------\n// protected Font createFont(){\n//   return mySettingsProvider.getTerminalFont();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/laf/AppSkin.java\n// --------------------------------------------------\n// protected Font loadFontAwesomeFonts(){\n//   try (InputStream is=AppSkin.class.getResourceAsStream(\"/fonts/fontawesome-webfont.ttf\")){\n//     Font font=Font.createFont(Font.TRUETYPE_FONT,is);\n//     return font.deriveFont(Font.PLAIN,14f);\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/laf/AppSkin.java\n// --------------------------------------------------\n// protected Font loadFonts(){\n//   try (InputStream is=AppSkin.class.getResourceAsStream(\"/fonts/Helvetica.ttf\")){\n//     Font font=Font.createFont(Font.TRUETYPE_FONT,is);\n//     GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();\n//     ge.registerFont(font);\n//     return font.deriveFont(Font.PLAIN,12.0f);\n//   }\n//  catch (  Exception e) {\n//     e.printStackTrace();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-app/src/main/java/muon/app/ui/components/session/terminal/CustomizedSettingsProvider.java\n// --------------------------------------------------\n// @Override public Font getTerminalFont(){\n//   System.out.println(\"Called terminal font: \" + App.getGlobalSettings().getTerminalFontName());\n//   return FontUtils.loadTerminalFont(App.getGlobalSettings().getTerminalFontName()).deriveFont(Font.PLAIN,App.getGlobalSettings().getTerminalFontSize());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/settings/DefaultSettingsProvider.java\n// --------------------------------------------------\n// @Override public Font getTerminalFont(){\n//   String fontName;\n//   if (UIUtil.isWindows) {\n//     fontName=\"Consolas\";\n//   }\n//  else   if (UIUtil.isMac) {\n//     fontName=\"Menlo\";\n//   }\n//  else {\n//     fontName=\"Monospaced\";\n//   }\n//   return new Font(fontName,Font.PLAIN,(int)getTerminalFontSize());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// snowflake/muon-jediterm/src/main/java/com/jediterm/terminal/ui/settings/UserSettingsProvider.java\n// --------------------------------------------------\n// Font getTerminalFont();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FontUtils {\r\n\tpublic static final Map<String, String> TERMINAL_FONTS = new CollectionHelper.OrderedDict<String, String>()\r\n\t\t\t.putItem(\"DejaVuSansMono\", \"DejaVu Sans Mono\").putItem(\"FiraCode-Regular\", \"Fira Code Regular\")\r\n\t\t\t.putItem(\"Inconsolata-Regular\", \"Inconsolata Regular\").putItem(\"NotoMono-Regular\", \"Noto Mono\");\r\n\r\n\tpublic static Font loadFont(String path) {\r\n\t\ttry (InputStream is = AppSkin.class.getResourceAsStream(path)) {\r\n\t\t\tFont font = Font.createFont(Font.TRUETYPE_FONT, is);\r\n\t\t\tGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n\t\t\tge.registerFont(font);\r\n\t\t\tSystem.out.println(\"Font loaded: \" + font.getFontName() + \" of family: \" + font.getFamily());\r\n\t\t\treturn font.deriveFont(Font.PLAIN, 12.0f);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static Font loadTerminalFont(String name) {<FILL_FUNCTION_BODY>}\r\n}", "metadata": {"task_id": "subhra74_snowflake/489", "ground_truth": "\r\n\t\tSystem.out.println(\"Loading font: \"+name);\r\n\t\ttry (InputStream is = AppSkin.class.getResourceAsStream(String.format(\"/fonts/terminal/%s.ttf\", name))) {\r\n\t\t\tFont font = Font.createFont(Font.TRUETYPE_FONT, is);\r\n\t\t\tGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n\t\t\tge.registerFont(font);\r\n\t\t\tSystem.out.println(\"Font loaded: \" + font.getFontName() + \" of family: \" + font.getFamily());\r\n\t\t\treturn font.deriveFont(Font.PLAIN, 12.0f);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn null;\r\n\t", "fpath_tuple": ["subhra74_snowflake", "snowflake", "muon-app", "src", "main", "java", "util", "FontUtils.java"], "context_start_lineno": 0, "function_name": "loadTerminalFont", "left_context": "class FontUtils {\r\n\tpublic static final Map<String, String> TERMINAL_FONTS = new CollectionHelper.OrderedDict<String, String>()\r\n\t\t\t.putItem(\"DejaVuSansMono\", \"DejaVu Sans Mono\").putItem(\"FiraCode-Regular\", \"Fira Code Regular\")\r\n\t\t\t.putItem(\"Inconsolata-Regular\", \"Inconsolata Regular\").putItem(\"NotoMono-Regular\", \"Noto Mono\");\r\n\r\n\tpublic static Font loadFont(String path) {\r\n\t\ttry (InputStream is = AppSkin.class.getResourceAsStream(path)) {\r\n\t\t\tFont font = Font.createFont(Font.TRUETYPE_FONT, is);\r\n\t\t\tGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n\t\t\tge.registerFont(font);\r\n\t\t\tSystem.out.println(\"Font loaded: \" + font.getFontName() + \" of family: \" + font.getFamily());\r\n\t\t\treturn font.deriveFont(Font.PLAIN, 12.0f);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static Font loadTerminalFont(String name) {", "right_context": "}\r\n}", "class_name": "FontUtils", "return_type": "Font", "parameters": [{"type": "String", "name": "name"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// private <T extends Method>List<SelectedMethod<T>> getBestMatch(List<T> methods,Type source,Type target){\n//   return methodSelectors.getMatchingMethods(methods,SelectionContext.forMappingMethods(mappingMethod,source,target,selectionCriteria,typeFactory));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/CreateOrUpdateSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   if (criteria.isLifecycleCallbackRequired() || criteria.isObjectFactoryRequired() || criteria.isPresenceCheckRequired()) {\n//     return methods;\n//   }\n//   List<SelectedMethod<T>> createCandidates=new ArrayList<>();\n//   List<SelectedMethod<T>> updateCandidates=new ArrayList<>();\n//   for (  SelectedMethod<T> method : methods) {\n//     boolean isCreateCandidate=method.getMethod().getMappingTargetParameter() == null;\n//     if (isCreateCandidate) {\n//       createCandidates.add(method);\n//     }\n//  else {\n//       updateCandidates.add(method);\n//     }\n//   }\n//   if (criteria.isPreferUpdateMapping() && !updateCandidates.isEmpty()) {\n//     return updateCandidates;\n//   }\n//   return createCandidates;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/FactoryParameterSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   if (!criteria.isObjectFactoryRequired() || methods.size() <= 1) {\n//     return methods;\n//   }\n//   List<SelectedMethod<T>> sourceParamFactoryMethods=new ArrayList<>(methods.size());\n//   for (  SelectedMethod<T> candidate : methods) {\n//     if (!candidate.getMethod().getSourceParameters().isEmpty()) {\n//       sourceParamFactoryMethods.add(candidate);\n//     }\n//   }\n//   if (sourceParamFactoryMethods.size() == 1) {\n//     return sourceParamFactoryMethods;\n//   }\n//   return methods;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/InheritanceSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   Type sourceType=context.getSourceType();\n//   if (sourceType == null) {\n//     return methods;\n//   }\n//   List<SelectedMethod<T>> candidatesWithBestMatchingSourceType=new ArrayList<>();\n//   int bestMatchingSourceTypeDistance=Integer.MAX_VALUE;\n//   for (  SelectedMethod<T> method : methods) {\n//     Parameter singleSourceParam=first(method.getMethod().getSourceParameters());\n//     int sourceTypeDistance=sourceType.distanceTo(singleSourceParam.getType());\n//     bestMatchingSourceTypeDistance=addToCandidateListIfMinimal(candidatesWithBestMatchingSourceType,bestMatchingSourceTypeDistance,method,sourceTypeDistance);\n//   }\n//   return candidatesWithBestMatchingSourceType;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MethodFamilySelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   List<SelectedMethod<T>> result=new ArrayList<>(methods.size());\n//   for (  SelectedMethod<T> method : methods) {\n//     if (method.getMethod().isObjectFactory() == criteria.isObjectFactoryRequired() && method.getMethod().isLifecycleCallbackMethod() == criteria.isLifecycleCallbackRequired() && method.getMethod().isPresenceCheck() == criteria.isPresenceCheckRequired()) {\n//       result.add(method);\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MethodSelector.java\n// --------------------------------------------------\n// /** \n//  * Selects those methods which match the given types and other criteria\n//  * @param < T > either SourceMethod or BuiltInMethod\n//  * @param candidates list of available methods\n//  * @param context the context for the matching\n//  * @return list of methods that passes the matching process\n//  */\n// <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> candidates,SelectionContext context);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MethodSelectors.java\n// --------------------------------------------------\n// /** \n//  * Selects those methods which match the given types and other criteria\n//  * @param < T > either SourceMethod or BuiltInMethod\n//  * @param methods list of available methods\n//  * @param context the selection context that should be used in the matching process\n//  * @return list of methods that passes the matching process\n//  */\n// public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<T> methods,SelectionContext context){\n//   List<SelectedMethod<T>> candidates=new ArrayList<>(methods.size());\n//   for (  T method : methods) {\n//     candidates.add(new SelectedMethod<>(method));\n//   }\n//   for (  MethodSelector selector : selectors) {\n//     candidates=selector.getMatchingMethods(candidates,context);\n//   }\n//   return candidates;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MostSpecificResultTypeSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> candidates,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   Type mappingTargetType=context.getMappingTargetType();\n//   if (candidates.size() < 2 || !criteria.isForMapping() || criteria.getQualifyingResultType() != null) {\n//     return candidates;\n//   }\n//   List<SelectedMethod<T>> result=new ArrayList<>();\n//   for (  SelectedMethod<T> candidate : candidates) {\n//     if (candidate.getMethod().getResultType().getBoxedEquivalent().equals(mappingTargetType.getBoxedEquivalent())) {\n//       result.add(candidate);\n//     }\n//   }\n//   return result.isEmpty() ? candidates : result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/QualifierSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   int numberOfQualifiersToMatch=0;\n//   List<TypeMirror> qualifierTypes=new ArrayList<>();\n//   if (criteria.getQualifiers() != null) {\n//     qualifierTypes.addAll(criteria.getQualifiers());\n//     numberOfQualifiersToMatch+=criteria.getQualifiers().size();\n//   }\n//   List<String> qualfiedByNames=new ArrayList<>();\n//   if (criteria.getQualifiedByNames() != null) {\n//     qualfiedByNames.addAll(criteria.getQualifiedByNames());\n//     numberOfQualifiersToMatch+=criteria.getQualifiedByNames().size();\n//   }\n//   if (!qualfiedByNames.isEmpty()) {\n//     qualifierTypes.add(namedAnnotationTypeMirror);\n//   }\n//   if (qualifierTypes.isEmpty()) {\n//     List<SelectedMethod<T>> nonQualiferAnnotatedMethods=new ArrayList<>(methods.size());\n//     for (    SelectedMethod<T> candidate : methods) {\n//       if (candidate.getMethod() instanceof SourceMethod) {\n//         Set<AnnotationMirror> qualifierAnnotations=getQualifierAnnotationMirrors(candidate.getMethod());\n//         if (qualifierAnnotations.isEmpty()) {\n//           nonQualiferAnnotatedMethods.add(candidate);\n//         }\n//       }\n//  else {\n//         nonQualiferAnnotatedMethods.add(candidate);\n//       }\n//     }\n//     return nonQualiferAnnotatedMethods;\n//   }\n//  else {\n//     List<SelectedMethod<T>> matches=new ArrayList<>(methods.size());\n//     for (    SelectedMethod<T> candidate : methods) {\n//       if (!(candidate.getMethod() instanceof SourceMethod)) {\n//         continue;\n//       }\n//       Set<AnnotationMirror> qualifierAnnotationMirrors=getQualifierAnnotationMirrors(candidate.getMethod());\n//       int matchingQualifierCounter=0;\n//       for (      AnnotationMirror qualifierAnnotationMirror : qualifierAnnotationMirrors) {\n//         for (        TypeMirror qualifierType : qualifierTypes) {\n//           DeclaredType qualifierAnnotationType=qualifierAnnotationMirror.getAnnotationType();\n//           if (typeUtils.isSameType(qualifierType,qualifierAnnotationType)) {\n//             if (typeUtils.isSameType(qualifierAnnotationType,namedAnnotationTypeMirror)) {\n//               NamedGem named=NamedGem.instanceOn(qualifierAnnotationMirror);\n//               if (named.value().hasValue() && qualfiedByNames.contains(named.value().get())) {\n//                 matchingQualifierCounter++;\n//               }\n//             }\n//  else {\n//               matchingQualifierCounter++;\n//             }\n//             break;\n//           }\n//         }\n//       }\n//       if (matchingQualifierCounter == numberOfQualifiersToMatch) {\n//         matches.add(candidate);\n//       }\n//     }\n//     return matches;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/SourceRhsSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> candidates,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   if (candidates.size() < 2 || criteria.getSourceRHS() == null) {\n//     return candidates;\n//   }\n//   List<SelectedMethod<T>> sourceRHSFavoringCandidates=new ArrayList<>();\n//   for (  SelectedMethod<T> candidate : candidates) {\n//     for (    ParameterBinding parameterBinding : candidate.getParameterBindings()) {\n//       if (parameterBinding.getSourceRHS() != null) {\n//         sourceRHSFavoringCandidates.add(candidate);\n//         break;\n//       }\n//     }\n//   }\n//   if (!sourceRHSFavoringCandidates.isEmpty()) {\n//     return sourceRHSFavoringCandidates;\n//   }\n//   return candidates;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/TypeSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   if (methods.isEmpty()) {\n//     return methods;\n//   }\n//   Type returnType=context.getReturnType();\n//   List<SelectedMethod<T>> result=new ArrayList<>();\n//   List<ParameterBinding> availableBindings=context.getAvailableParameterBindings();\n//   for (  SelectedMethod<T> method : methods) {\n//     List<List<ParameterBinding>> parameterBindingPermutations=getCandidateParameterBindingPermutations(availableBindings,method.getMethod().getParameters());\n//     if (parameterBindingPermutations != null) {\n//       SelectedMethod<T> matchingMethod=getMatchingParameterBinding(returnType,context,method,parameterBindingPermutations);\n//       if (matchingMethod != null) {\n//         result.add(matchingMethod);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/XmlElementDeclSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   Type resultType=context.getMappingMethod().getResultType();\n//   String targetPropertyName=context.getSelectionCriteria().getTargetPropertyName();\n//   List<SelectedMethod<T>> nameMatches=new ArrayList<>();\n//   List<SelectedMethod<T>> scopeMatches=new ArrayList<>();\n//   List<SelectedMethod<T>> nameAndScopeMatches=new ArrayList<>();\n//   XmlElementRefInfo xmlElementRefInfo=findXmlElementRef(resultType,targetPropertyName);\n//   for (  SelectedMethod<T> candidate : methods) {\n//     if (!(candidate.getMethod() instanceof SourceMethod)) {\n//       continue;\n//     }\n//     SourceMethod candidateMethod=(SourceMethod)candidate.getMethod();\n//     XmlElementDeclInfo xmlElementDeclInfo=getXmlElementDeclInfo(candidateMethod.getExecutable());\n//     if (xmlElementDeclInfo == null) {\n//       continue;\n//     }\n//     String name=xmlElementDeclInfo.nameValue();\n//     TypeMirror scope=xmlElementDeclInfo.scopeType();\n//     boolean nameIsSetAndMatches=name != null && name.equals(xmlElementRefInfo.nameValue());\n//     boolean scopeIsSetAndMatches=scope != null && typeUtils.isSameType(scope,xmlElementRefInfo.sourceType());\n//     if (nameIsSetAndMatches) {\n//       if (scopeIsSetAndMatches) {\n//         nameAndScopeMatches.add(candidate);\n//       }\n//  else {\n//         nameMatches.add(candidate);\n//       }\n//     }\n//  else     if (scopeIsSetAndMatches) {\n//       scopeMatches.add(candidate);\n//     }\n//   }\n//   if (!nameAndScopeMatches.isEmpty()) {\n//     return nameAndScopeMatches;\n//   }\n//  else   if (!scopeMatches.isEmpty()) {\n//     return scopeMatches;\n//   }\n//  else   if (!nameMatches.isEmpty()) {\n//     return nameMatches;\n//   }\n//  else {\n//     return methods;\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TargetTypeSelector implements MethodSelector {\n\n    private final TypeUtils typeUtils;\n\n    public TargetTypeSelector( TypeUtils typeUtils ) {\n        this.typeUtils = typeUtils;\n    }\n\n    @Override\n    public <T extends Method> List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,\n                                                                         SelectionContext context) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "mapstruct_mapstruct/36", "ground_truth": "\n        SelectionCriteria criteria = context.getSelectionCriteria();\n\n        TypeMirror qualifyingTypeMirror = criteria.getQualifyingResultType();\n        if ( qualifyingTypeMirror != null && !criteria.isLifecycleCallbackRequired() ) {\n\n            List<SelectedMethod<T>> candidatesWithQualifyingTargetType =\n                new ArrayList<>( methods.size() );\n\n            for ( SelectedMethod<T> method : methods ) {\n                TypeMirror resultTypeMirror = method.getMethod().getResultType().getTypeElement().asType();\n                if ( typeUtils.isSameType( qualifyingTypeMirror, resultTypeMirror ) ) {\n                    candidatesWithQualifyingTargetType.add( method );\n                }\n            }\n\n            return candidatesWithQualifyingTargetType;\n        }\n        else {\n            return methods;\n        }\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "source", "selector", "TargetTypeSelector.java"], "context_start_lineno": 0, "function_name": "getMatchingMethods", "left_context": "class TargetTypeSelector implements MethodSelector {\n\n    private final TypeUtils typeUtils;\n\n    public TargetTypeSelector( TypeUtils typeUtils ) {\n        this.typeUtils = typeUtils;\n    }\n\n    @Override\n    public <T extends Method> List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,\n                                                                         SelectionContext context) {", "right_context": "}\n}", "class_name": "TargetTypeSelector", "return_type": "List<SelectedMethod<T>>", "parameters": [{"type": "List<SelectedMethod<T>>", "name": "methods"}, {"type": "SelectionContext", "name": "context"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/DateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(this.importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JaxbElemToValue.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.add(parameter.getType());\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalDateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/LocalDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/LocalDateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/StringToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToLocalDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToLocalDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToString.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/ZonedDateTimeToCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importedTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/ZonedDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass IterableCreation extends ModelElement {\n\n    private final Type resultType;\n    private final Parameter sourceParameter;\n    private final MethodReference factoryMethod;\n    private final boolean canUseSize;\n    private final boolean loadFactorAdjustment;\n\n    private IterableCreation(Type resultType, Parameter sourceParameter, MethodReference factoryMethod) {\n        this.resultType = resultType;\n        this.sourceParameter = sourceParameter;\n        this.factoryMethod = factoryMethod;\n        this.canUseSize = ( sourceParameter.getType().isCollectionOrMapType() ||\n            sourceParameter.getType().isArrayType() )\n            && resultType.getImplementation() != null && resultType.getImplementation().hasInitialCapacityConstructor();\n        this.loadFactorAdjustment = this.canUseSize && resultType.getImplementation().isLoadFactorAdjustment();\n\n    }\n\n    public static IterableCreation create(NormalTypeMappingMethod mappingMethod, Parameter sourceParameter) {\n        return new IterableCreation( mappingMethod.getResultType(), sourceParameter, mappingMethod.getFactoryMethod() );\n    }\n\n    public Type getResultType() {\n        return resultType;\n    }\n\n    public Parameter getSourceParameter() {\n        return sourceParameter;\n    }\n\n    public MethodReference getFactoryMethod() {\n        return this.factoryMethod;\n    }\n\n    public boolean isCanUseSize() {\n        return canUseSize;\n    }\n\n    public boolean isLoadFactorAdjustment() {\n        return loadFactorAdjustment;\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {<FILL_FUNCTION_BODY>}\n\n    public Type getEnumSetElementType() {\n        return first( getResultType().determineTypeArguments( Iterable.class ) );\n    }\n\n    public boolean isEnumSet() {\n        return \"java.util.EnumSet\".equals( resultType.getFullyQualifiedName() );\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/43", "ground_truth": "\n        Set<Type> types = new HashSet<>();\n        if ( factoryMethod == null && resultType.getImplementationType() != null ) {\n            types.addAll( resultType.getImplementationType().getImportTypes() );\n        }\n\n        if ( isEnumSet() ) {\n            types.add( getEnumSetElementType() );\n            // The result type itself is an EnumSet\n            types.add( resultType );\n        }\n        return types;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "IterableCreation.java"], "context_start_lineno": 0, "function_name": "getImportTypes", "left_context": "class IterableCreation extends ModelElement {\n\n    private final Type resultType;\n    private final Parameter sourceParameter;\n    private final MethodReference factoryMethod;\n    private final boolean canUseSize;\n    private final boolean loadFactorAdjustment;\n\n    private IterableCreation(Type resultType, Parameter sourceParameter, MethodReference factoryMethod) {\n        this.resultType = resultType;\n        this.sourceParameter = sourceParameter;\n        this.factoryMethod = factoryMethod;\n        this.canUseSize = ( sourceParameter.getType().isCollectionOrMapType() ||\n            sourceParameter.getType().isArrayType() )\n            && resultType.getImplementation() != null && resultType.getImplementation().hasInitialCapacityConstructor();\n        this.loadFactorAdjustment = this.canUseSize && resultType.getImplementation().isLoadFactorAdjustment();\n\n    }\n\n    public static IterableCreation create(NormalTypeMappingMethod mappingMethod, Parameter sourceParameter) {\n        return new IterableCreation( mappingMethod.getResultType(), sourceParameter, mappingMethod.getFactoryMethod() );\n    }\n\n    public Type getResultType() {\n        return resultType;\n    }\n\n    public Parameter getSourceParameter() {\n        return sourceParameter;\n    }\n\n    public MethodReference getFactoryMethod() {\n        return this.factoryMethod;\n    }\n\n    public boolean isCanUseSize() {\n        return canUseSize;\n    }\n\n    public boolean isLoadFactorAdjustment() {\n        return loadFactorAdjustment;\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {", "right_context": "}\n\n    public Type getEnumSetElementType() {\n        return first( getResultType().determineTypeArguments( Iterable.class ) );\n    }\n\n    public boolean isEnumSet() {\n        return \"java.util.EnumSet\".equals( resultType.getFullyQualifiedName() );\n    }\n}", "class_name": "IterableCreation", "return_type": "Set<Type>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Parameter extends ModelElement {\n\n    private final Element element;\n    private final String name;\n    private final String originalName;\n    private final Type type;\n    private final boolean mappingTarget;\n    private final boolean targetType;\n    private final boolean mappingContext;\n    private final boolean sourcePropertyName;\n    private final boolean targetPropertyName;\n\n    private final boolean varArgs;\n\n    private Parameter(Element element, Type type, boolean varArgs) {\n        this.element = element;\n        this.name = element.getSimpleName().toString();\n        this.originalName = name;\n        this.type = type;\n        this.mappingTarget = MappingTargetGem.instanceOn( element ) != null;\n        this.targetType = TargetTypeGem.instanceOn( element ) != null;\n        this.mappingContext = ContextGem.instanceOn( element ) != null;\n        this.sourcePropertyName = SourcePropertyNameGem.instanceOn( element ) != null;\n        this.targetPropertyName = TargetPropertyNameGem.instanceOn( element ) != null;\n        this.varArgs = varArgs;\n    }\n\n    private Parameter(String name, Type type, boolean mappingTarget, boolean targetType, boolean mappingContext,\n                      boolean sourcePropertyName, boolean targetPropertyName,\n                      boolean varArgs) {\n        this.element = null;\n        this.name = name;\n        this.originalName = name;\n        this.type = type;\n        this.mappingTarget = mappingTarget;\n        this.targetType = targetType;\n        this.mappingContext = mappingContext;\n        this.sourcePropertyName = sourcePropertyName;\n        this.targetPropertyName = targetPropertyName;\n        this.varArgs = varArgs;\n    }\n\n    public Parameter(String name, Type type) {\n        this( name, type, false, false, false, false, false, false );\n    }\n\n    public Element getElement() {\n        return element;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getOriginalName() {\n        return originalName;\n    }\n\n    public Type getType() {\n        return type;\n    }\n\n    public boolean isMappingTarget() {\n        return mappingTarget;\n    }\n\n    @Override\n    public String toString() {\n        return String.format( format(), type );\n    }\n\n    public String describe() {\n        return String.format( format(), type.describe() );\n    }\n\n    private String format() {\n        return ( mappingTarget ? \"@MappingTarget \" : \"\" )\n            + ( targetType ? \"@TargetType \" : \"\" )\n            + ( mappingContext ? \"@Context \" : \"\" )\n            + ( sourcePropertyName ? \"@SourcePropertyName \" : \"\" )\n            + ( targetPropertyName ? \"@TargetPropertyName \" : \"\" )\n            +  \"%s \" + name;\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {\n        return Collections.asSet( type );\n    }\n\n    public boolean isTargetType() {\n        return targetType;\n    }\n\n    public boolean isMappingContext() {\n        return mappingContext;\n    }\n\n    public boolean isTargetPropertyName() {\n        return targetPropertyName;\n    }\n\n    public boolean isSourcePropertyName() {\n        return sourcePropertyName;\n    }\n\n    public boolean isVarArgs() {\n        return varArgs;\n    }\n\n    @Override\n    public int hashCode() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public boolean equals(Object o) {\n        if ( this == o ) {\n            return true;\n        }\n        if ( o == null || getClass() != o.getClass() ) {\n            return false;\n        }\n\n        Parameter parameter = (Parameter) o;\n\n        if ( !Objects.equals( name, parameter.name ) ) {\n            return false;\n        }\n        return Objects.equals( type, parameter.type );\n\n    }\n\n    public static Parameter forElementAndType(VariableElement element, Type parameterType, boolean isVarArgs) {\n        return new Parameter(\n            element,\n            parameterType,\n            isVarArgs\n        );\n    }\n\n    public static Parameter forForgedMappingTarget(Type parameterType) {\n        return new Parameter(\n            \"mappingTarget\",\n            parameterType,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false\n        );\n    }\n\n    /**\n     * @param parameters the parameters to filter\n     * @return the parameters from the given list that are considered 'source parameters'\n     */\n    public static List<Parameter> getSourceParameters(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isSourceParameter ).collect( Collectors.toList() );\n    }\n\n    /**\n     * @param parameters the parameters to scan\n     * @param sourceParameterName the source parameter name to match\n     * @return the parameters from the given list that are considered 'source parameters'\n     */\n    public static Parameter getSourceParameter(List<Parameter> parameters, String sourceParameterName) {\n        return parameters.stream()\n                         .filter( Parameter::isSourceParameter )\n                         .filter( parameter -> parameter.getName().equals( sourceParameterName ) )\n                         .findAny()\n                         .orElse( null );\n    }\n\n    /**\n     * @param parameters the parameters to filter\n     * @return the parameters from the given list that are marked as 'mapping context parameters'\n     */\n    public static List<Parameter> getContextParameters(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isMappingContext ).collect( Collectors.toList() );\n    }\n\n    public static Parameter getMappingTargetParameter(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isMappingTarget ).findAny().orElse( null );\n    }\n\n    public static Parameter getTargetTypeParameter(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isTargetType ).findAny().orElse( null );\n    }\n\n    public static Parameter getSourcePropertyNameParameter(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isSourcePropertyName ).findAny().orElse( null );\n    }\n\n    public static Parameter getTargetPropertyNameParameter(List<Parameter> parameters) {\n      return parameters.stream().filter( Parameter::isTargetPropertyName ).findAny().orElse( null );\n    }\n\n    private static boolean isSourceParameter( Parameter parameter ) {\n        return !parameter.isMappingTarget() &&\n               !parameter.isTargetType() &&\n               !parameter.isMappingContext() &&\n               !parameter.isSourcePropertyName() &&\n               !parameter.isTargetPropertyName();\n    }\n\n}", "metadata": {"task_id": "mapstruct_mapstruct/151", "ground_truth": "\n        int result = name != null ? name.hashCode() : 0;\n        result = 31 * result + ( type != null ? type.hashCode() : 0 );\n        return result;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "common", "Parameter.java"], "context_start_lineno": 0, "function_name": "hashCode", "left_context": "class Parameter extends ModelElement {\n\n    private final Element element;\n    private final String name;\n    private final String originalName;\n    private final Type type;\n    private final boolean mappingTarget;\n    private final boolean targetType;\n    private final boolean mappingContext;\n    private final boolean sourcePropertyName;\n    private final boolean targetPropertyName;\n\n    private final boolean varArgs;\n\n    private Parameter(Element element, Type type, boolean varArgs) {\n        this.element = element;\n        this.name = element.getSimpleName().toString();\n        this.originalName = name;\n        this.type = type;\n        this.mappingTarget = MappingTargetGem.instanceOn( element ) != null;\n        this.targetType = TargetTypeGem.instanceOn( element ) != null;\n        this.mappingContext = ContextGem.instanceOn( element ) != null;\n        this.sourcePropertyName = SourcePropertyNameGem.instanceOn( element ) != null;\n        this.targetPropertyName = TargetPropertyNameGem.instanceOn( element ) != null;\n        this.varArgs = varArgs;\n    }\n\n    private Parameter(String name, Type type, boolean mappingTarget, boolean targetType, boolean mappingContext,\n                      boolean sourcePropertyName, boolean targetPropertyName,\n                      boolean varArgs) {\n        this.element = null;\n        this.name = name;\n        this.originalName = name;\n        this.type = type;\n        this.mappingTarget = mappingTarget;\n        this.targetType = targetType;\n        this.mappingContext = mappingContext;\n        this.sourcePropertyName = sourcePropertyName;\n        this.targetPropertyName = targetPropertyName;\n        this.varArgs = varArgs;\n    }\n\n    public Parameter(String name, Type type) {\n        this( name, type, false, false, false, false, false, false );\n    }\n\n    public Element getElement() {\n        return element;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getOriginalName() {\n        return originalName;\n    }\n\n    public Type getType() {\n        return type;\n    }\n\n    public boolean isMappingTarget() {\n        return mappingTarget;\n    }\n\n    @Override\n    public String toString() {\n        return String.format( format(), type );\n    }\n\n    public String describe() {\n        return String.format( format(), type.describe() );\n    }\n\n    private String format() {\n        return ( mappingTarget ? \"@MappingTarget \" : \"\" )\n            + ( targetType ? \"@TargetType \" : \"\" )\n            + ( mappingContext ? \"@Context \" : \"\" )\n            + ( sourcePropertyName ? \"@SourcePropertyName \" : \"\" )\n            + ( targetPropertyName ? \"@TargetPropertyName \" : \"\" )\n            +  \"%s \" + name;\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {\n        return Collections.asSet( type );\n    }\n\n    public boolean isTargetType() {\n        return targetType;\n    }\n\n    public boolean isMappingContext() {\n        return mappingContext;\n    }\n\n    public boolean isTargetPropertyName() {\n        return targetPropertyName;\n    }\n\n    public boolean isSourcePropertyName() {\n        return sourcePropertyName;\n    }\n\n    public boolean isVarArgs() {\n        return varArgs;\n    }\n\n    @Override\n    public int hashCode() {", "right_context": "}\n\n    @Override\n    public boolean equals(Object o) {\n        if ( this == o ) {\n            return true;\n        }\n        if ( o == null || getClass() != o.getClass() ) {\n            return false;\n        }\n\n        Parameter parameter = (Parameter) o;\n\n        if ( !Objects.equals( name, parameter.name ) ) {\n            return false;\n        }\n        return Objects.equals( type, parameter.type );\n\n    }\n\n    public static Parameter forElementAndType(VariableElement element, Type parameterType, boolean isVarArgs) {\n        return new Parameter(\n            element,\n            parameterType,\n            isVarArgs\n        );\n    }\n\n    public static Parameter forForgedMappingTarget(Type parameterType) {\n        return new Parameter(\n            \"mappingTarget\",\n            parameterType,\n            true,\n            false,\n            false,\n            false,\n            false,\n            false\n        );\n    }\n\n    /**\n     * @param parameters the parameters to filter\n     * @return the parameters from the given list that are considered 'source parameters'\n     */\n    public static List<Parameter> getSourceParameters(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isSourceParameter ).collect( Collectors.toList() );\n    }\n\n    /**\n     * @param parameters the parameters to scan\n     * @param sourceParameterName the source parameter name to match\n     * @return the parameters from the given list that are considered 'source parameters'\n     */\n    public static Parameter getSourceParameter(List<Parameter> parameters, String sourceParameterName) {\n        return parameters.stream()\n                         .filter( Parameter::isSourceParameter )\n                         .filter( parameter -> parameter.getName().equals( sourceParameterName ) )\n                         .findAny()\n                         .orElse( null );\n    }\n\n    /**\n     * @param parameters the parameters to filter\n     * @return the parameters from the given list that are marked as 'mapping context parameters'\n     */\n    public static List<Parameter> getContextParameters(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isMappingContext ).collect( Collectors.toList() );\n    }\n\n    public static Parameter getMappingTargetParameter(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isMappingTarget ).findAny().orElse( null );\n    }\n\n    public static Parameter getTargetTypeParameter(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isTargetType ).findAny().orElse( null );\n    }\n\n    public static Parameter getSourcePropertyNameParameter(List<Parameter> parameters) {\n        return parameters.stream().filter( Parameter::isSourcePropertyName ).findAny().orElse( null );\n    }\n\n    public static Parameter getTargetPropertyNameParameter(List<Parameter> parameters) {\n      return parameters.stream().filter( Parameter::isTargetPropertyName ).findAny().orElse( null );\n    }\n\n    private static boolean isSourceParameter( Parameter parameter ) {\n        return !parameter.isMappingTarget() &&\n               !parameter.isTargetType() &&\n               !parameter.isMappingContext() &&\n               !parameter.isSourcePropertyName() &&\n               !parameter.isTargetPropertyName();\n    }\n\n}", "class_name": "Parameter", "return_type": "int", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SubclassMappingOptions extends DelegatingOptions {\n\n    private final TypeMirror source;\n    private final TypeMirror target;\n    private final TypeUtils typeUtils;\n    private final SelectionParameters selectionParameters;\n    private final SubclassMappingGem subclassMapping;\n\n    public SubclassMappingOptions(TypeMirror source, TypeMirror target, TypeUtils typeUtils, DelegatingOptions next,\n                                  SelectionParameters selectionParameters, SubclassMappingGem subclassMapping) {\n        super( next );\n        this.source = source;\n        this.target = target;\n        this.typeUtils = typeUtils;\n        this.selectionParameters = selectionParameters;\n        this.subclassMapping = subclassMapping;\n    }\n\n    @Override\n    public boolean hasAnnotation() {\n        return source != null && target != null;\n    }\n\n    private static boolean isConsistent(SubclassMappingGem gem, ExecutableElement method, FormattingMessager messager,\n                                        TypeUtils typeUtils, List<Parameter> sourceParameters, Type resultType,\n                                        SubclassValidator subclassValidator) {\n\n        if ( resultType == null ) {\n            messager.printMessage( method, gem.mirror(), SUBCLASSMAPPING_UPDATE_METHODS_NOT_SUPPORTED );\n            return false;\n        }\n\n        TypeMirror sourceSubclass = gem.source().getValue();\n        TypeMirror targetSubclass = gem.target().getValue();\n        TypeMirror targetParentType = resultType.getTypeMirror();\n        validateTypeMirrors( sourceSubclass, targetSubclass, targetParentType );\n\n        boolean isConsistent = true;\n\n        boolean isChildOfAParameter = false;\n        for ( Parameter sourceParameter : sourceParameters ) {\n            TypeMirror sourceParentType = sourceParameter.getType().getTypeMirror();\n            validateTypeMirrors( sourceParentType );\n            isChildOfAParameter = isChildOfAParameter || isChildOfParent( typeUtils, sourceSubclass, sourceParentType );\n        }\n        if ( !isChildOfAParameter ) {\n            messager\n                    .printMessage(\n                        method,\n                        gem.mirror(),\n                        SUBCLASSMAPPING_NO_VALID_SUPERCLASS,\n                        sourceSubclass.toString() );\n            isConsistent = false;\n        }\n        if ( !isChildOfParent( typeUtils, targetSubclass, targetParentType ) ) {\n            messager\n                    .printMessage(\n                        method,\n                        gem.mirror(),\n                        SUBCLASSMAPPING_ILLEGAL_SUBCLASS,\n                        targetParentType.toString(),\n                        targetSubclass.toString() );\n            isConsistent = false;\n        }\n        if ( !subclassValidator.isValidUsage( method, gem.mirror(), sourceSubclass ) ) {\n            isConsistent = false;\n        }\n        return isConsistent;\n    }\n\n    private static void validateTypeMirrors(TypeMirror... typeMirrors) {<FILL_FUNCTION_BODY>}\n\n    private static boolean isChildOfParent(TypeUtils typeUtils, TypeMirror childType, TypeMirror parentType) {\n        return typeUtils.isSubtype( childType, parentType );\n    }\n\n    public TypeMirror getSource() {\n        return source;\n    }\n\n    public TypeMirror getTarget() {\n        return target;\n    }\n\n    public SelectionParameters getSelectionParameters() {\n        return selectionParameters;\n    }\n\n    public AnnotationMirror getMirror() {\n        return Optional.ofNullable( subclassMapping ).map( SubclassMappingGem::mirror ).orElse( null );\n    }\n\n    public static void addInstances(SubclassMappingsGem gem, ExecutableElement method,\n                                    BeanMappingOptions beanMappingOptions, FormattingMessager messager,\n                                    TypeUtils typeUtils, Set<SubclassMappingOptions> mappings,\n                                    List<Parameter> sourceParameters, Type resultType,\n                                    SubclassValidator subclassValidator) {\n        for ( SubclassMappingGem subclassMapping : gem.value().get() ) {\n            addInstance(\n                subclassMapping,\n                method,\n                beanMappingOptions,\n                messager,\n                typeUtils,\n                mappings,\n                sourceParameters,\n                resultType,\n                subclassValidator );\n        }\n    }\n\n    public static void addInstance(SubclassMappingGem subclassMapping, ExecutableElement method,\n                                   BeanMappingOptions beanMappingOptions, FormattingMessager messager,\n                                   TypeUtils typeUtils, Set<SubclassMappingOptions> mappings,\n                                   List<Parameter> sourceParameters, Type resultType,\n                                   SubclassValidator subclassValidator) {\n        if ( !isConsistent(\n            subclassMapping,\n            method,\n            messager,\n            typeUtils,\n            sourceParameters,\n            resultType,\n            subclassValidator ) ) {\n            return;\n        }\n\n        TypeMirror sourceSubclass = subclassMapping.source().getValue();\n        TypeMirror targetSubclass = subclassMapping.target().getValue();\n        SelectionParameters selectionParameters = new SelectionParameters(\n            subclassMapping.qualifiedBy().get(),\n            subclassMapping.qualifiedByName().get(),\n            targetSubclass,\n            typeUtils\n        );\n\n        mappings\n                .add(\n                    new SubclassMappingOptions(\n                        sourceSubclass,\n                        targetSubclass,\n                        typeUtils,\n                        beanMappingOptions,\n                        selectionParameters,\n                        subclassMapping\n                    ) );\n    }\n\n    public static List<SubclassMappingOptions> copyForInverseInheritance(Set<SubclassMappingOptions> mappings,\n                                                                         BeanMappingOptions beanMappingOptions) {\n        // we are not interested in keeping it unique at this point.\n        return mappings.stream().map( mapping -> new SubclassMappingOptions(\n            mapping.target,\n            mapping.source,\n            mapping.typeUtils,\n            beanMappingOptions,\n            mapping.selectionParameters,\n            mapping.subclassMapping\n        ) ).collect( Collectors.toCollection( ArrayList::new ) );\n    }\n\n    public static List<SubclassMappingOptions> copyForInheritance(Set<SubclassMappingOptions> subclassMappings,\n                                                                  BeanMappingOptions beanMappingOptions) {\n         // we are not interested in keeping it unique at this point.\n         List<SubclassMappingOptions> mappings = new ArrayList<>();\n         for ( SubclassMappingOptions subclassMapping : subclassMappings ) {\n             mappings.add(\n                         new SubclassMappingOptions(\n                                    subclassMapping.source,\n                                    subclassMapping.target,\n                                    subclassMapping.typeUtils,\n                                    beanMappingOptions,\n                                    subclassMapping.selectionParameters,\n                                    subclassMapping.subclassMapping ) );\n         }\n         return mappings;\n     }\n\n    @Override\n    public boolean equals(Object obj) {\n        if ( obj == null || !( obj instanceof SubclassMappingOptions ) ) {\n            return false;\n        }\n        SubclassMappingOptions other = (SubclassMappingOptions) obj;\n        return typeUtils.isSameType( source, other.source );\n    }\n\n    @Override\n    public int hashCode() {\n        return 1; // use a stable value because TypeMirror is not safe to use for hashCode.\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/163", "ground_truth": "\n        for ( TypeMirror typeMirror : typeMirrors ) {\n            if ( typeMirror == null ) {\n                // When a class used in uses or imports is created by another annotation processor\n                // then javac will not return correct TypeMirror with TypeKind#ERROR, but rather a string \"<error>\"\n                // the gem tools would return a null TypeMirror in that case.\n                // Therefore throw TypeHierarchyErroneousException so we can postpone the generation of the mapper\n                throw new TypeHierarchyErroneousException( typeMirror );\n            }\n        }\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "source", "SubclassMappingOptions.java"], "context_start_lineno": 0, "function_name": "validateTypeMirrors", "left_context": "class SubclassMappingOptions extends DelegatingOptions {\n\n    private final TypeMirror source;\n    private final TypeMirror target;\n    private final TypeUtils typeUtils;\n    private final SelectionParameters selectionParameters;\n    private final SubclassMappingGem subclassMapping;\n\n    public SubclassMappingOptions(TypeMirror source, TypeMirror target, TypeUtils typeUtils, DelegatingOptions next,\n                                  SelectionParameters selectionParameters, SubclassMappingGem subclassMapping) {\n        super( next );\n        this.source = source;\n        this.target = target;\n        this.typeUtils = typeUtils;\n        this.selectionParameters = selectionParameters;\n        this.subclassMapping = subclassMapping;\n    }\n\n    @Override\n    public boolean hasAnnotation() {\n        return source != null && target != null;\n    }\n\n    private static boolean isConsistent(SubclassMappingGem gem, ExecutableElement method, FormattingMessager messager,\n                                        TypeUtils typeUtils, List<Parameter> sourceParameters, Type resultType,\n                                        SubclassValidator subclassValidator) {\n\n        if ( resultType == null ) {\n            messager.printMessage( method, gem.mirror(), SUBCLASSMAPPING_UPDATE_METHODS_NOT_SUPPORTED );\n            return false;\n        }\n\n        TypeMirror sourceSubclass = gem.source().getValue();\n        TypeMirror targetSubclass = gem.target().getValue();\n        TypeMirror targetParentType = resultType.getTypeMirror();\n        validateTypeMirrors( sourceSubclass, targetSubclass, targetParentType );\n\n        boolean isConsistent = true;\n\n        boolean isChildOfAParameter = false;\n        for ( Parameter sourceParameter : sourceParameters ) {\n            TypeMirror sourceParentType = sourceParameter.getType().getTypeMirror();\n            validateTypeMirrors( sourceParentType );\n            isChildOfAParameter = isChildOfAParameter || isChildOfParent( typeUtils, sourceSubclass, sourceParentType );\n        }\n        if ( !isChildOfAParameter ) {\n            messager\n                    .printMessage(\n                        method,\n                        gem.mirror(),\n                        SUBCLASSMAPPING_NO_VALID_SUPERCLASS,\n                        sourceSubclass.toString() );\n            isConsistent = false;\n        }\n        if ( !isChildOfParent( typeUtils, targetSubclass, targetParentType ) ) {\n            messager\n                    .printMessage(\n                        method,\n                        gem.mirror(),\n                        SUBCLASSMAPPING_ILLEGAL_SUBCLASS,\n                        targetParentType.toString(),\n                        targetSubclass.toString() );\n            isConsistent = false;\n        }\n        if ( !subclassValidator.isValidUsage( method, gem.mirror(), sourceSubclass ) ) {\n            isConsistent = false;\n        }\n        return isConsistent;\n    }\n\n    private static void validateTypeMirrors(TypeMirror... typeMirrors) {", "right_context": "}\n\n    private static boolean isChildOfParent(TypeUtils typeUtils, TypeMirror childType, TypeMirror parentType) {\n        return typeUtils.isSubtype( childType, parentType );\n    }\n\n    public TypeMirror getSource() {\n        return source;\n    }\n\n    public TypeMirror getTarget() {\n        return target;\n    }\n\n    public SelectionParameters getSelectionParameters() {\n        return selectionParameters;\n    }\n\n    public AnnotationMirror getMirror() {\n        return Optional.ofNullable( subclassMapping ).map( SubclassMappingGem::mirror ).orElse( null );\n    }\n\n    public static void addInstances(SubclassMappingsGem gem, ExecutableElement method,\n                                    BeanMappingOptions beanMappingOptions, FormattingMessager messager,\n                                    TypeUtils typeUtils, Set<SubclassMappingOptions> mappings,\n                                    List<Parameter> sourceParameters, Type resultType,\n                                    SubclassValidator subclassValidator) {\n        for ( SubclassMappingGem subclassMapping : gem.value().get() ) {\n            addInstance(\n                subclassMapping,\n                method,\n                beanMappingOptions,\n                messager,\n                typeUtils,\n                mappings,\n                sourceParameters,\n                resultType,\n                subclassValidator );\n        }\n    }\n\n    public static void addInstance(SubclassMappingGem subclassMapping, ExecutableElement method,\n                                   BeanMappingOptions beanMappingOptions, FormattingMessager messager,\n                                   TypeUtils typeUtils, Set<SubclassMappingOptions> mappings,\n                                   List<Parameter> sourceParameters, Type resultType,\n                                   SubclassValidator subclassValidator) {\n        if ( !isConsistent(\n            subclassMapping,\n            method,\n            messager,\n            typeUtils,\n            sourceParameters,\n            resultType,\n            subclassValidator ) ) {\n            return;\n        }\n\n        TypeMirror sourceSubclass = subclassMapping.source().getValue();\n        TypeMirror targetSubclass = subclassMapping.target().getValue();\n        SelectionParameters selectionParameters = new SelectionParameters(\n            subclassMapping.qualifiedBy().get(),\n            subclassMapping.qualifiedByName().get(),\n            targetSubclass,\n            typeUtils\n        );\n\n        mappings\n                .add(\n                    new SubclassMappingOptions(\n                        sourceSubclass,\n                        targetSubclass,\n                        typeUtils,\n                        beanMappingOptions,\n                        selectionParameters,\n                        subclassMapping\n                    ) );\n    }\n\n    public static List<SubclassMappingOptions> copyForInverseInheritance(Set<SubclassMappingOptions> mappings,\n                                                                         BeanMappingOptions beanMappingOptions) {\n        // we are not interested in keeping it unique at this point.\n        return mappings.stream().map( mapping -> new SubclassMappingOptions(\n            mapping.target,\n            mapping.source,\n            mapping.typeUtils,\n            beanMappingOptions,\n            mapping.selectionParameters,\n            mapping.subclassMapping\n        ) ).collect( Collectors.toCollection( ArrayList::new ) );\n    }\n\n    public static List<SubclassMappingOptions> copyForInheritance(Set<SubclassMappingOptions> subclassMappings,\n                                                                  BeanMappingOptions beanMappingOptions) {\n         // we are not interested in keeping it unique at this point.\n         List<SubclassMappingOptions> mappings = new ArrayList<>();\n         for ( SubclassMappingOptions subclassMapping : subclassMappings ) {\n             mappings.add(\n                         new SubclassMappingOptions(\n                                    subclassMapping.source,\n                                    subclassMapping.target,\n                                    subclassMapping.typeUtils,\n                                    beanMappingOptions,\n                                    subclassMapping.selectionParameters,\n                                    subclassMapping.subclassMapping ) );\n         }\n         return mappings;\n     }\n\n    @Override\n    public boolean equals(Object obj) {\n        if ( obj == null || !( obj instanceof SubclassMappingOptions ) ) {\n            return false;\n        }\n        SubclassMappingOptions other = (SubclassMappingOptions) obj;\n        return typeUtils.isSameType( source, other.source );\n    }\n\n    @Override\n    public int hashCode() {\n        return 1; // use a stable value because TypeMirror is not safe to use for hashCode.\n    }\n}", "class_name": "SubclassMappingOptions", "return_type": "void", "parameters": [{"type": "TypeMirror", "name": "typeMirrors"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FreeBuilderAccessorNamingStrategy extends DefaultAccessorNamingStrategy {\n\n    @Override\n    protected boolean isFluentSetter(ExecutableElement method) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "mapstruct_mapstruct/169", "ground_truth": "\n        // When using FreeBuilder one needs to use the JavaBean convention, which means that all setters will start\n        // with set\n        return false;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "spi", "FreeBuilderAccessorNamingStrategy.java"], "context_start_lineno": 0, "function_name": "isFluentSetter", "left_context": "class FreeBuilderAccessorNamingStrategy extends DefaultAccessorNamingStrategy {\n\n    @Override\n    protected boolean isFluentSetter(ExecutableElement method) {", "right_context": "}\n\n}", "class_name": "FreeBuilderAccessorNamingStrategy", "return_type": "boolean", "parameters": [{"type": "ExecutableElement", "name": "method"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/DateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(this.importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JaxbElemToValue.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.add(parameter.getType());\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalDateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/LocalDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/LocalDateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/StringToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToLocalDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToLocalDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToString.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/ZonedDateTimeToCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importedTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/ZonedDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AnnotationMapperReference extends MapperReference {\n\n    private final List<Annotation> annotations;\n\n    private final boolean fieldFinal;\n\n    private final boolean includeAnnotationsOnField;\n\n    public AnnotationMapperReference(Type type, String variableName, List<Annotation> annotations, boolean isUsed,\n                                     boolean fieldFinal, boolean includeAnnotationsOnField) {\n        super( type, variableName, isUsed );\n        this.annotations = annotations;\n        this.fieldFinal = fieldFinal;\n        this.includeAnnotationsOnField = includeAnnotationsOnField;\n    }\n\n    public List<Annotation> getAnnotations() {\n        return annotations;\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {<FILL_FUNCTION_BODY>}\n\n    public boolean isFieldFinal() {\n        return fieldFinal;\n    }\n\n    public boolean isIncludeAnnotationsOnField() {\n        return includeAnnotationsOnField;\n    }\n\n    public AnnotationMapperReference withNewAnnotations(List<Annotation> annotations) {\n        return new AnnotationMapperReference(\n            getType(),\n            getVariableName(),\n            annotations,\n            isUsed(),\n            isFieldFinal(),\n            isIncludeAnnotationsOnField() );\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/178", "ground_truth": "\n        Set<Type> types = new HashSet<>();\n        types.add( getType() );\n\n        for ( Annotation annotation : annotations ) {\n            types.addAll( annotation.getImportTypes() );\n        }\n\n        return types;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "AnnotationMapperReference.java"], "context_start_lineno": 0, "function_name": "getImportTypes", "left_context": "class AnnotationMapperReference extends MapperReference {\n\n    private final List<Annotation> annotations;\n\n    private final boolean fieldFinal;\n\n    private final boolean includeAnnotationsOnField;\n\n    public AnnotationMapperReference(Type type, String variableName, List<Annotation> annotations, boolean isUsed,\n                                     boolean fieldFinal, boolean includeAnnotationsOnField) {\n        super( type, variableName, isUsed );\n        this.annotations = annotations;\n        this.fieldFinal = fieldFinal;\n        this.includeAnnotationsOnField = includeAnnotationsOnField;\n    }\n\n    public List<Annotation> getAnnotations() {\n        return annotations;\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {", "right_context": "}\n\n    public boolean isFieldFinal() {\n        return fieldFinal;\n    }\n\n    public boolean isIncludeAnnotationsOnField() {\n        return includeAnnotationsOnField;\n    }\n\n    public AnnotationMapperReference withNewAnnotations(List<Annotation> annotations) {\n        return new AnnotationMapperReference(\n            getType(),\n            getVariableName(),\n            annotations,\n            isUsed(),\n            isFieldFinal(),\n            isIncludeAnnotationsOnField() );\n    }\n}", "class_name": "AnnotationMapperReference", "return_type": "Set<Type>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Builder extends AbstractMappingMethodBuilder<Builder, MapMappingMethod> {\n\n        private FormattingParameters keyFormattingParameters;\n        private FormattingParameters valueFormattingParameters;\n        private SelectionParameters keySelectionParameters;\n        private SelectionParameters valueSelectionParameters;\n\n        public Builder() {\n            super( Builder.class );\n        }\n\n        public Builder keySelectionParameters(SelectionParameters keySelectionParameters) {\n            this.keySelectionParameters = keySelectionParameters;\n            return this;\n        }\n\n        public Builder valueSelectionParameters(SelectionParameters valueSelectionParameters) {\n            this.valueSelectionParameters = valueSelectionParameters;\n            return this;\n        }\n\n        public Builder keyFormattingParameters(FormattingParameters keyFormattingParameters) {\n            this.keyFormattingParameters = keyFormattingParameters;\n            return this;\n        }\n\n        public Builder valueFormattingParameters(FormattingParameters valueFormattingParameters) {\n            this.valueFormattingParameters = valueFormattingParameters;\n            return this;\n        }\n\n        public MapMappingMethod build() {<FILL_FUNCTION_BODY>}\n\n        Assignment forge(SourceRHS sourceRHS, Type sourceType, Type targetType, Message message ) {\n            Assignment  assignment = forgeMapping( sourceRHS, sourceType, targetType );\n            if ( assignment != null ) {\n                ctx.getMessager().note( 2, message, assignment );\n            }\n            return assignment;\n        }\n\n        @Override\n        protected boolean shouldUsePropertyNamesInHistory() {\n            return true;\n        }\n\n    }", "metadata": {"task_id": "mapstruct_mapstruct/198", "ground_truth": "\n\n            List<Type> sourceTypeParams =\n                first( method.getSourceParameters() ).getType().determineTypeArguments( Map.class );\n            List<Type> resultTypeParams = method.getResultType().determineTypeArguments( Map.class );\n\n            // find mapping method or conversion for key\n            Type keySourceType = sourceTypeParams.get( 0 ).getTypeBound();\n            Type keyTargetType = resultTypeParams.get( 0 ).getTypeBound();\n\n            SourceRHS keySourceRHS = new SourceRHS( \"entry.getKey()\", keySourceType, new HashSet<>(), \"map key\" );\n\n            SelectionCriteria keyCriteria = SelectionCriteria.forMappingMethods(\n                keySelectionParameters,\n                method.getOptions().getMapMapping().getKeyMappingControl( ctx.getElementUtils() ),\n                null,\n                false\n            );\n\n            Assignment keyAssignment = ctx.getMappingResolver().getTargetAssignment(\n                method,\n                getDescription(),\n                keyTargetType,\n                keyFormattingParameters,\n                keyCriteria,\n                keySourceRHS,\n                null,\n                 () -> forge( keySourceRHS, keySourceType, keyTargetType, Message.MAPMAPPING_CREATE_KEY_NOTE )\n            );\n\n            if ( keyAssignment == null ) {\n                if ( method instanceof ForgedMethod ) {\n                    // leave messaging to calling property mapping\n                    return null;\n                }\n                else {\n                    reportCannotCreateMapping(\n                        method,\n                        String.format(\n                            \"%s \\\"%s\\\"\",\n                            keySourceRHS.getSourceErrorMessagePart(),\n                            keySourceRHS.getSourceType().describe()\n                        ),\n                        keySourceRHS.getSourceType(),\n                        keyTargetType,\n                        \"\"\n                    );\n                }\n            }\n            else {\n                ctx.getMessager().note( 2, Message.MAPMAPPING_SELECT_KEY_NOTE, keyAssignment );\n            }\n\n            // find mapping method or conversion for value\n            Type valueSourceType = sourceTypeParams.get( 1 ).getTypeBound();\n            Type valueTargetType = resultTypeParams.get( 1 ).getTypeBound();\n\n            SourceRHS valueSourceRHS = new SourceRHS( \"entry.getValue()\", valueSourceType, new HashSet<>(),\n                    \"map value\" );\n\n            SelectionCriteria valueCriteria = SelectionCriteria.forMappingMethods(\n                valueSelectionParameters,\n                method.getOptions().getMapMapping().getValueMappingControl( ctx.getElementUtils() ),\n                null,\n                false );\n\n            Assignment valueAssignment = ctx.getMappingResolver().getTargetAssignment(\n                method,\n                getDescription(),\n                valueTargetType,\n                valueFormattingParameters,\n                valueCriteria,\n                valueSourceRHS,\n                null,\n                () -> forge( valueSourceRHS, valueSourceType, valueTargetType, Message.MAPMAPPING_CREATE_VALUE_NOTE )\n            );\n\n            if ( method instanceof ForgedMethod ) {\n                ForgedMethod forgedMethod = (ForgedMethod) method;\n                if ( keyAssignment != null ) {\n                    forgedMethod.addThrownTypes( keyAssignment.getThrownTypes() );\n                }\n                if ( valueAssignment != null ) {\n                    forgedMethod.addThrownTypes( valueAssignment.getThrownTypes() );\n                }\n            }\n\n            if ( valueAssignment == null ) {\n                if ( method instanceof ForgedMethod ) {\n                    // leave messaging to calling property mapping\n                    return null;\n                }\n                else {\n                    reportCannotCreateMapping(\n                        method,\n                        String.format(\n                            \"%s \\\"%s\\\"\",\n                            valueSourceRHS.getSourceErrorMessagePart(),\n                            valueSourceRHS.getSourceType().describe()\n                        ),\n                        valueSourceRHS.getSourceType(),\n                        valueTargetType,\n                        \"\"\n                    );\n                }\n            }\n            else {\n                ctx.getMessager().note( 2, Message.MAPMAPPING_SELECT_VALUE_NOTE, valueAssignment );\n            }\n\n            // mapNullToDefault\n            boolean mapNullToDefault =\n                method.getOptions().getMapMapping().getNullValueMappingStrategy().isReturnDefault();\n\n            MethodReference factoryMethod = null;\n            if ( !method.isUpdateMethod() ) {\n                factoryMethod = ObjectFactoryMethodResolver\n                    .getFactoryMethod( method, null, ctx );\n            }\n\n            keyAssignment = new LocalVarWrapper( keyAssignment, method.getThrownTypes(), keyTargetType, false );\n            valueAssignment = new LocalVarWrapper( valueAssignment, method.getThrownTypes(), valueTargetType, false );\n\n            Set<String> existingVariables = new HashSet<>( method.getParameterNames() );\n            List<LifecycleCallbackMethodReference> beforeMappingMethods =\n                LifecycleMethodResolver.beforeMappingMethods( method, null, ctx, existingVariables );\n            List<LifecycleCallbackMethodReference> afterMappingMethods =\n                LifecycleMethodResolver.afterMappingMethods( method, null, ctx, existingVariables );\n\n            return new MapMappingMethod(\n                method,\n                getMethodAnnotations(),\n                existingVariables,\n                keyAssignment,\n                valueAssignment,\n                factoryMethod,\n                mapNullToDefault,\n                beforeMappingMethods,\n                afterMappingMethods\n            );\n        ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "MapMappingMethod.java"], "context_start_lineno": 0, "function_name": "build", "left_context": "class Builder extends AbstractMappingMethodBuilder<Builder, MapMappingMethod> {\n\n        private FormattingParameters keyFormattingParameters;\n        private FormattingParameters valueFormattingParameters;\n        private SelectionParameters keySelectionParameters;\n        private SelectionParameters valueSelectionParameters;\n\n        public Builder() {\n            super( Builder.class );\n        }\n\n        public Builder keySelectionParameters(SelectionParameters keySelectionParameters) {\n            this.keySelectionParameters = keySelectionParameters;\n            return this;\n        }\n\n        public Builder valueSelectionParameters(SelectionParameters valueSelectionParameters) {\n            this.valueSelectionParameters = valueSelectionParameters;\n            return this;\n        }\n\n        public Builder keyFormattingParameters(FormattingParameters keyFormattingParameters) {\n            this.keyFormattingParameters = keyFormattingParameters;\n            return this;\n        }\n\n        public Builder valueFormattingParameters(FormattingParameters valueFormattingParameters) {\n            this.valueFormattingParameters = valueFormattingParameters;\n            return this;\n        }\n\n        public MapMappingMethod build() {", "right_context": "}\n\n        Assignment forge(SourceRHS sourceRHS, Type sourceType, Type targetType, Message message ) {\n            Assignment  assignment = forgeMapping( sourceRHS, sourceType, targetType );\n            if ( assignment != null ) {\n                ctx.getMessager().note( 2, message, assignment );\n            }\n            return assignment;\n        }\n\n        @Override\n        protected boolean shouldUsePropertyNamesInHistory() {\n            return true;\n        }\n\n    }", "class_name": "Builder", "return_type": "MapMappingMethod", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StripSuffixEnumTransformationStrategy implements EnumTransformationStrategy {\n\n    @Override\n    public String getStrategyName() {\n        return \"stripSuffix\";\n    }\n\n    @Override\n    public String transform(String value, String configuration) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "mapstruct_mapstruct/201", "ground_truth": "\n        if ( value.endsWith( configuration ) ) {\n            return value.substring( 0, value.length() - configuration.length() );\n        }\n        return value;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "spi", "StripSuffixEnumTransformationStrategy.java"], "context_start_lineno": 0, "function_name": "transform", "left_context": "class StripSuffixEnumTransformationStrategy implements EnumTransformationStrategy {\n\n    @Override\n    public String getStrategyName() {\n        return \"stripSuffix\";\n    }\n\n    @Override\n    public String transform(String value, String configuration) {", "right_context": "}\n}", "class_name": "StripSuffixEnumTransformationStrategy", "return_type": "String", "parameters": [{"type": "String", "name": "value"}, {"type": "String", "name": "configuration"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PrimitiveToStringConversion extends AbstractNumberToStringConversion {\n\n    private final Class<?> sourceType;\n    private final Class<?> wrapperType;\n\n    public PrimitiveToStringConversion(Class<?> sourceType) {\n        super( NativeTypes.isNumber( sourceType ) );\n        if ( !sourceType.isPrimitive() ) {\n            throw new IllegalArgumentException( sourceType + \" is no primitive type.\" );\n        }\n\n        this.sourceType = sourceType;\n        this.wrapperType = NativeTypes.getWrapperType( sourceType );\n    }\n\n    @Override\n    public String getToExpression(ConversionContext conversionContext) {\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            StringBuilder sb = new StringBuilder();\n            appendDecimalFormatter( sb, conversionContext );\n            sb.append( \".format( <SOURCE> )\" );\n            return sb.toString();\n        }\n        else {\n            return \"String.valueOf( <SOURCE> )\";\n        }\n    }\n\n    @Override\n    public Set<Type> getToConversionImportTypes(ConversionContext conversionContext) {\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            return Collections.singleton(\n                conversionContext.getTypeFactory().getType( DecimalFormat.class )\n            );\n        }\n\n        return Collections.emptySet();\n    }\n\n    @Override\n    public String getFromExpression(ConversionContext conversionContext) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    protected Set<Type> getFromConversionImportTypes(ConversionContext conversionContext) {\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            return Collections.singleton(\n                conversionContext.getTypeFactory().getType( DecimalFormat.class )\n            );\n        }\n\n        return Collections.emptySet();\n    }\n\n    private void appendDecimalFormatter(StringBuilder sb, ConversionContext conversionContext) {\n        sb.append( \"new \" );\n        sb.append( decimalFormat( conversionContext ) );\n        sb.append( \"( \" );\n\n        if ( conversionContext.getNumberFormat() != null ) {\n            sb.append( \"\\\"\" );\n            sb.append( conversionContext.getNumberFormat() );\n            sb.append( \"\\\"\" );\n        }\n\n        sb.append( \" )\" );\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/208", "ground_truth": "\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            StringBuilder sb = new StringBuilder();\n            appendDecimalFormatter( sb, conversionContext );\n            sb.append( \".parse( <SOURCE> ).\" );\n            sb.append( sourceType.getSimpleName() );\n            sb.append( \"Value()\" );\n            return sb.toString();\n        }\n        else {\n            return wrapperType.getSimpleName() + \".parse\"\n                + Strings.capitalize( sourceType.getSimpleName() ) + \"( <SOURCE> )\";\n        }\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "conversion", "PrimitiveToStringConversion.java"], "context_start_lineno": 0, "function_name": "getFromExpression", "left_context": "class PrimitiveToStringConversion extends AbstractNumberToStringConversion {\n\n    private final Class<?> sourceType;\n    private final Class<?> wrapperType;\n\n    public PrimitiveToStringConversion(Class<?> sourceType) {\n        super( NativeTypes.isNumber( sourceType ) );\n        if ( !sourceType.isPrimitive() ) {\n            throw new IllegalArgumentException( sourceType + \" is no primitive type.\" );\n        }\n\n        this.sourceType = sourceType;\n        this.wrapperType = NativeTypes.getWrapperType( sourceType );\n    }\n\n    @Override\n    public String getToExpression(ConversionContext conversionContext) {\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            StringBuilder sb = new StringBuilder();\n            appendDecimalFormatter( sb, conversionContext );\n            sb.append( \".format( <SOURCE> )\" );\n            return sb.toString();\n        }\n        else {\n            return \"String.valueOf( <SOURCE> )\";\n        }\n    }\n\n    @Override\n    public Set<Type> getToConversionImportTypes(ConversionContext conversionContext) {\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            return Collections.singleton(\n                conversionContext.getTypeFactory().getType( DecimalFormat.class )\n            );\n        }\n\n        return Collections.emptySet();\n    }\n\n    @Override\n    public String getFromExpression(ConversionContext conversionContext) {", "right_context": "}\n\n    @Override\n    protected Set<Type> getFromConversionImportTypes(ConversionContext conversionContext) {\n        if ( requiresDecimalFormat( conversionContext ) ) {\n            return Collections.singleton(\n                conversionContext.getTypeFactory().getType( DecimalFormat.class )\n            );\n        }\n\n        return Collections.emptySet();\n    }\n\n    private void appendDecimalFormatter(StringBuilder sb, ConversionContext conversionContext) {\n        sb.append( \"new \" );\n        sb.append( decimalFormat( conversionContext ) );\n        sb.append( \"( \" );\n\n        if ( conversionContext.getNumberFormat() != null ) {\n            sb.append( \"\\\"\" );\n            sb.append( conversionContext.getNumberFormat() );\n            sb.append( \"\\\"\" );\n        }\n\n        sb.append( \" )\" );\n    }\n}", "class_name": "PrimitiveToStringConversion", "return_type": "String", "parameters": [{"type": "ConversionContext", "name": "conversionContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forMapperReference(Method method,MapperReference declaringMapper,List<ParameterBinding> parameterBindings){\n//   return new MethodReference(method,declaringMapper,null,parameterBindings);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forConstructorInvocation(Type type,List<ParameterBinding> parameterBindings){\n//   return new MethodReference(type,parameterBindings);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forParameterProvidedMethod(Method method,Parameter providingParameter,List<ParameterBinding> parameterBindings){\n//   return new MethodReference(method,null,providingParameter,parameterBindings);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forBuiltInMethod(BuiltInMethod method,ConversionContext contextParam){\n//   return new MethodReference(method,contextParam);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forForgedMethod(Method method,List<ParameterBinding> parameterBindings){\n//   return new MethodReference(method,null,null,parameterBindings);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forMethodChaining(MethodReference... references){\n//   return new MethodReference(references);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forStaticBuilder(String builderCreationMethod,Type definingType){\n//   return new MethodReference(builderCreationMethod,definingType,true);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public static MethodReference forMethodCall(String methodName){\n//   return new MethodReference(methodName,null,false);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/PresenceCheckMethodResolver.java\n// --------------------------------------------------\n// private static MethodReference getPresenceCheckMethodReference(Method method,SelectedMethod<SourceMethod> matchingMethod,MappingBuilderContext ctx){\n//   Parameter providingParameter=method.getContextProvidedMethods().getParameterForProvidedMethod(matchingMethod.getMethod());\n//   if (providingParameter != null) {\n//     return MethodReference.forParameterProvidedMethod(matchingMethod.getMethod(),providingParameter,matchingMethod.getParameterBindings());\n//   }\n//  else {\n//     MapperReference ref=MapperReference.findMapperReference(ctx.getMapperReferences(),matchingMethod.getMethod());\n//     return MethodReference.forMapperReference(matchingMethod.getMethod(),ref,matchingMethod.getParameterBindings());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/BeanMappingMethod.java\n// --------------------------------------------------\n// private MethodReference getFinalizerMethod(){\n//   return BuilderFinisherMethodResolver.getBuilderFinisherMethod(method,returnTypeBuilder,ctx);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/BeanMappingMethod.java\n// --------------------------------------------------\n// public MethodReference getFinalizerMethod(){\n//   return finalizerMethod;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ObjectFactoryMethodResolver.java\n// --------------------------------------------------\n// public static MethodReference getFactoryMethodReference(Method method,SelectedMethod<SourceMethod> matchingFactoryMethod,MappingBuilderContext ctx){\n//   Parameter providingParameter=method.getContextProvidedMethods().getParameterForProvidedMethod(matchingFactoryMethod.getMethod());\n//   if (providingParameter != null) {\n//     return MethodReference.forParameterProvidedMethod(matchingFactoryMethod.getMethod(),providingParameter,matchingFactoryMethod.getParameterBindings());\n//   }\n//  else {\n//     MapperReference ref=MapperReference.findMapperReference(ctx.getMapperReferences(),matchingFactoryMethod.getMethod());\n//     return MethodReference.forMapperReference(matchingFactoryMethod.getMethod(),ref,matchingFactoryMethod.getParameterBindings());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/IterableCreation.java\n// --------------------------------------------------\n// public MethodReference getFactoryMethod(){\n//   return this.factoryMethod;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReferencePresenceCheck.java\n// --------------------------------------------------\n// public MethodReference getMethodReference(){\n//   return methodReference;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/NormalTypeMappingMethod.java\n// --------------------------------------------------\n// public MethodReference getFactoryMethod(){\n//   return this.factoryMethod;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ObjectFactoryMethodResolver.java\n// --------------------------------------------------\n// /** \n//  * returns a no arg factory method\n//  * @param method target mapping method\n//  * @param selectionParameters parameters used in the selection process\n//  * @param ctx the mapping builder context\n//  * @return a method reference to the factory method, or null if no suitable, or ambiguous method found\n//  */\n// public static MethodReference getFactoryMethod(Method method,SelectionParameters selectionParameters,MappingBuilderContext ctx){\n//   return getFactoryMethod(method,method.getResultType(),selectionParameters,ctx);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ObjectFactoryMethodResolver.java\n// --------------------------------------------------\n// /** \n//  * returns a no arg factory method\n//  * @param method target mapping method\n//  * @param alternativeTarget alternative to {@link Method#getResultType()} e.g. when target is abstract\n//  * @param selectionParameters parameters used in the selection process\n//  * @param ctx the mapping builder context\n//  * @return a method reference to the factory method, or null if no suitable, or ambiguous method found\n//  */\n// public static MethodReference getFactoryMethod(Method method,Type alternativeTarget,SelectionParameters selectionParameters,MappingBuilderContext ctx){\n//   List<SelectedMethod<SourceMethod>> matchingFactoryMethods=getMatchingFactoryMethods(method,alternativeTarget,selectionParameters,ctx);\n//   if (matchingFactoryMethods.isEmpty()) {\n//     return null;\n//   }\n//   if (matchingFactoryMethods.size() > 1) {\n//     ctx.getMessager().printMessage(method.getExecutable(),Message.GENERAL_AMBIGUOUS_FACTORY_METHOD,alternativeTarget.describe(),matchingFactoryMethods.stream().map(SelectedMethod::getMethod).map(Method::describe).collect(Collectors.joining(\", \")));\n//     return null;\n//   }\n//   SelectedMethod<SourceMethod> matchingFactoryMethod=first(matchingFactoryMethods);\n//   return getFactoryMethodReference(method,matchingFactoryMethod,ctx);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ObjectFactoryMethodResolver.java\n// --------------------------------------------------\n// public static MethodReference getBuilderFactoryMethod(Method method,BuilderType builder){\n//   return getBuilderFactoryMethod(method.getReturnType(),builder);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ObjectFactoryMethodResolver.java\n// --------------------------------------------------\n// public static MethodReference getBuilderFactoryMethod(Type typeToBuild,BuilderType builder){\n//   if (builder == null) {\n//     return null;\n//   }\n//   ExecutableElement builderCreationMethod=builder.getBuilderCreationMethod();\n//   if (builderCreationMethod.getKind() == ElementKind.CONSTRUCTOR) {\n//     return null;\n//   }\n//   if (!builder.getBuildingType().isAssignableTo(typeToBuild)) {\n//     return null;\n//   }\n//   return MethodReference.forStaticBuilder(builderCreationMethod.getSimpleName().toString(),builder.getOwningType());\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BuilderFinisherMethodResolver {\n\n    private static final String DEFAULT_BUILD_METHOD_NAME = \"build\";\n\n    private static final Extractor<ExecutableElement, String> EXECUTABLE_ELEMENT_NAME_EXTRACTOR =\n        executableElement -> {\n            StringBuilder sb = new StringBuilder( executableElement.getSimpleName() );\n\n            sb.append( '(' );\n            for ( VariableElement parameter : executableElement.getParameters() ) {\n                sb.append( parameter );\n            }\n\n            sb.append( ')' );\n            return sb.toString();\n        };\n\n    private BuilderFinisherMethodResolver() {\n    }\n\n    public static MethodReference getBuilderFinisherMethod(Method method, BuilderType builderType,\n        MappingBuilderContext ctx) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "mapstruct_mapstruct/295", "ground_truth": "\n        Collection<ExecutableElement> buildMethods = builderType.getBuildMethods();\n        if ( buildMethods.isEmpty() ) {\n            //If we reach this method this should never happen\n            return null;\n        }\n\n        BuilderGem builder = method.getOptions().getBeanMapping().getBuilder();\n        if ( builder == null && buildMethods.size() == 1 ) {\n            return MethodReference.forMethodCall( first( buildMethods ).getSimpleName().toString() );\n        }\n        else {\n            String buildMethodPattern = DEFAULT_BUILD_METHOD_NAME;\n            if ( builder != null ) {\n                buildMethodPattern = builder.buildMethod().get();\n            }\n            for ( ExecutableElement buildMethod : buildMethods ) {\n                String methodName = buildMethod.getSimpleName().toString();\n                if ( methodName.matches( buildMethodPattern ) ) {\n                    return MethodReference.forMethodCall( methodName );\n                }\n            }\n\n            if ( builder == null ) {\n                ctx.getMessager().printMessage(\n                    method.getExecutable(),\n                    Message.BUILDER_NO_BUILD_METHOD_FOUND_DEFAULT,\n                    buildMethodPattern,\n                    builderType.getBuilder(),\n                    builderType.getBuildingType(),\n                    Strings.join( buildMethods, \", \", EXECUTABLE_ELEMENT_NAME_EXTRACTOR )\n                );\n            }\n            else {\n                ctx.getMessager().printMessage(\n                    method.getExecutable(),\n                    builder.mirror(),\n                    Message.BUILDER_NO_BUILD_METHOD_FOUND,\n                    buildMethodPattern,\n                    builderType.getBuilder(),\n                    builderType.getBuildingType(),\n                    Strings.join( buildMethods, \", \", EXECUTABLE_ELEMENT_NAME_EXTRACTOR )\n                );\n            }\n        }\n\n        return null;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "BuilderFinisherMethodResolver.java"], "context_start_lineno": 0, "function_name": "getBuilderFinisherMethod", "left_context": "class BuilderFinisherMethodResolver {\n\n    private static final String DEFAULT_BUILD_METHOD_NAME = \"build\";\n\n    private static final Extractor<ExecutableElement, String> EXECUTABLE_ELEMENT_NAME_EXTRACTOR =\n        executableElement -> {\n            StringBuilder sb = new StringBuilder( executableElement.getSimpleName() );\n\n            sb.append( '(' );\n            for ( VariableElement parameter : executableElement.getParameters() ) {\n                sb.append( parameter );\n            }\n\n            sb.append( ')' );\n            return sb.toString();\n        };\n\n    private BuilderFinisherMethodResolver() {\n    }\n\n    public static MethodReference getBuilderFinisherMethod(Method method, BuilderType builderType,\n        MappingBuilderContext ctx) {", "right_context": "}\n\n}", "class_name": "BuilderFinisherMethodResolver", "return_type": "MethodReference", "parameters": [{"type": "Method", "name": "method"}, {"type": "BuilderType", "name": "builderType"}, {"type": "MappingBuilderContext", "name": "ctx"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/UpdateWrapper.java\n// --------------------------------------------------\n// public Assignment getFactoryMethod(){\n//   return factoryMethod;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// private Assignment toMethodRef(SelectedMethod<Method> selectedMethod){\n//   MapperReference mapperReference=findMapperReference(selectedMethod.getMethod());\n//   return MethodReference.forMapperReference(selectedMethod.getMethod(),mapperReference,selectedMethod.getParameterBindings());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// private Assignment toBuildInRef(SelectedMethod<BuiltInMethod> selectedMethod){\n//   BuiltInMethod method=selectedMethod.getMethod();\n//   Set<Field> allUsedFields=new HashSet<>(mapperReferences);\n//   SupportingField.addAllFieldsIn(supportingMethodCandidates,allUsedFields);\n//   SupportingMappingMethod supportingMappingMethod=new SupportingMappingMethod(method,allUsedFields);\n//   supportingMethodCandidates.add(supportingMappingMethod);\n//   ConversionContext ctx=new DefaultConversionContext(typeFactory,messager,method.getMappingSourceType(),method.getResultType(),formattingParameters);\n//   Assignment methodReference=MethodReference.forBuiltInMethod(method,ctx);\n//   methodReference.setAssignment(sourceRHS);\n//   return methodReference;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// static Assignment getBestMatch(ResolvingAttempt att,Type sourceType,Type targetType){\n//   MethodMethod<Method,Method> mmAttempt=new MethodMethod<>(att,att.methods,att.methods,att::toMethodRef,att::toMethodRef).getBestMatch(sourceType,targetType);\n//   if (mmAttempt.hasResult) {\n//     return mmAttempt.result;\n//   }\n//   if (att.hasQualfiers()) {\n//     mmAttempt=mmAttempt.getBestMatchIgnoringQualifiersBeforeY(sourceType,targetType);\n//     if (mmAttempt.hasResult) {\n//       return mmAttempt.result;\n//     }\n//     mmAttempt=mmAttempt.getBestMatchIgnoringQualifiersAfterY(sourceType,targetType);\n//     if (mmAttempt.hasResult) {\n//       return mmAttempt.result;\n//     }\n//   }\n//   if (att.allowConversion()) {\n//     MethodMethod<Method,BuiltInMethod> mbAttempt=new MethodMethod<>(att,att.methods,att.builtIns,att::toMethodRef,att::toBuildInRef).getBestMatch(sourceType,targetType);\n//     if (mbAttempt.hasResult) {\n//       return mbAttempt.result;\n//     }\n//     MethodMethod<BuiltInMethod,Method> bmAttempt=new MethodMethod<>(att,att.builtIns,att.methods,att::toBuildInRef,att::toMethodRef).getBestMatch(sourceType,targetType);\n//     if (bmAttempt.hasResult) {\n//       return bmAttempt.result;\n//     }\n//     MethodMethod<BuiltInMethod,BuiltInMethod> bbAttempt=new MethodMethod<>(att,att.builtIns,att.builtIns,att::toBuildInRef,att::toBuildInRef).getBestMatch(sourceType,targetType);\n//     return bbAttempt.result;\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// static Assignment getBestMatch(ResolvingAttempt att,Type sourceType,Type targetType){\n//   ConversionMethod<Method> mAttempt=new ConversionMethod<>(att,att.methods,att::toMethodRef).getBestMatch(sourceType,targetType);\n//   if (mAttempt.hasResult) {\n//     return mAttempt.result;\n//   }\n//   ConversionMethod<BuiltInMethod> bAttempt=new ConversionMethod<>(att,att.builtIns,att::toBuildInRef).getBestMatch(sourceType,targetType);\n//   return bAttempt.result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// static Assignment getBestMatch(ResolvingAttempt att,Type sourceType,Type targetType){\n//   MethodConversion<Method> mAttempt=new MethodConversion<>(att,att.methods,att::toMethodRef).getBestMatch(sourceType,targetType);\n//   if (mAttempt.hasResult) {\n//     return mAttempt.result;\n//   }\n//   MethodConversion<BuiltInMethod> bAttempt=new MethodConversion<>(att,att.builtIns,att::toBuildInRef).getBestMatch(sourceType,targetType);\n//   return bAttempt.result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/PropertyMapping.java\n// --------------------------------------------------\n// private Assignment getDefaultValueAssignment(Assignment rhs){\n//   if (defaultValue != null && (!rhs.getSourceType().isPrimitive() || rhs.getSourcePresenceCheckerReference() != null)) {\n//     PropertyMapping build=new ConstantMappingBuilder().constantExpression(defaultValue).formattingParameters(formattingParameters).selectionParameters(selectionParameters).dependsOn(dependsOn).existingVariableNames(existingVariableNames).mappingContext(ctx).sourceMethod(method).target(targetPropertyName,targetReadAccessor,targetWriteAccessor).build();\n//     return build.getAssignment();\n//   }\n//   if (defaultJavaExpression != null && (!rhs.getSourceType().isPrimitive() || rhs.getSourcePresenceCheckerReference() != null)) {\n//     PropertyMapping build=new JavaExpressionMappingBuilder().javaExpression(defaultJavaExpression).dependsOn(dependsOn).existingVariableNames(existingVariableNames).mappingContext(ctx).sourceMethod(method).target(targetPropertyName,targetReadAccessor,targetWriteAccessor).build();\n//     return build.getAssignment();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/PropertyMapping.java\n// --------------------------------------------------\n// private Assignment getEnumAssignment(){\n//   Assignment assignment=null;\n//   String enumExpression=constantExpression.substring(1,constantExpression.length() - 1);\n//   if (targetType.getEnumConstants().contains(enumExpression)) {\n//     String sourceErrorMessagePart=\"constant '\" + constantExpression + \"'\";\n//     assignment=new SourceRHS(enumExpression,targetType,existingVariableNames,sourceErrorMessagePart);\n//     assignment=new EnumConstantWrapper(assignment,targetType);\n//   }\n//  else {\n//     ctx.getMessager().printMessage(method.getExecutable(),positionHint,Message.CONSTANTMAPPING_NON_EXISTING_CONSTANT,constantExpression,targetType.describe(),targetPropertyName);\n//   }\n//   return assignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/PropertyMapping.java\n// --------------------------------------------------\n// public Assignment getDefaultValueAssignment(){\n//   return defaultValueAssignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ContainerMappingMethod.java\n// --------------------------------------------------\n// public Assignment getElementAssignment(){\n//   return elementAssignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MapMappingMethod.java\n// --------------------------------------------------\n// public Assignment getKeyAssignment(){\n//   return keyAssignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MapMappingMethod.java\n// --------------------------------------------------\n// public Assignment getValueAssignment(){\n//   return valueAssignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MappingBuilderContext.java\n// --------------------------------------------------\n// /** \n//  * returns a parameter assignment\n//  * @param mappingMethod target mapping method\n//  * @param description the description source\n//  * @param targetType return type to match\n//  * @param formattingParameters used for formatting dates and numbers\n//  * @param criteria parameters criteria in the selection process\n//  * @param sourceRHS source information\n//  * @param positionHint the mirror for reporting problems\n//  * @param forger the supplier of the callback method to forge a method\n//  * @return an assignment to a method parameter, which can either be:<ol> <li>MethodReference</li> <li>TypeConversion</li> <li>SourceRHS Assignment (empty TargetAssignment)</li> <li>null, no assignment found</li> </ol>\n//  */\n// Assignment getTargetAssignment(Method mappingMethod,ForgedMethodHistory description,Type targetType,FormattingParameters formattingParameters,SelectionCriteria criteria,SourceRHS sourceRHS,AnnotationMirror positionHint,Supplier<Assignment> forger);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// @Override public Assignment getTargetAssignment(Method mappingMethod,ForgedMethodHistory description,Type targetType,FormattingParameters formattingParameters,SelectionCriteria criteria,SourceRHS sourceRHS,AnnotationMirror positionHint,Supplier<Assignment> forger){\n//   ResolvingAttempt attempt=new ResolvingAttempt(sourceModel,mappingMethod,description,formattingParameters,sourceRHS,criteria,positionHint,forger,builtInMethods.getBuiltInMethods(),messager,verboseLogging);\n//   return attempt.getTargetAssignment(sourceRHS.getSourceTypeForMatching(),targetType);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// private Assignment getTargetAssignment(Type sourceType,Type targetType){\n//   Assignment assignment;\n//   if (allowMappingMethod()) {\n//     List<SelectedMethod<Method>> matches=getBestMatch(methods,sourceType,targetType);\n//     reportErrorWhenAmbiguous(matches,targetType);\n//     if (!matches.isEmpty()) {\n//       assignment=toMethodRef(first(matches));\n//       assignment.setAssignment(sourceRHS);\n//       return assignment;\n//     }\n//   }\n//   if (!hasQualfiers()) {\n//     if ((sourceType.isAssignableTo(targetType) || isAssignableThroughCollectionCopyConstructor(sourceType,targetType)) && allowDirect(sourceType,targetType)) {\n//       Assignment simpleAssignment=sourceRHS;\n//       return simpleAssignment;\n//     }\n//   }\n//   if (sourceType.isLiteral() && \"java.lang.String\".equals(sourceType.getFullyQualifiedName()) && targetType.isNative()) {\n//     return null;\n//   }\n//   if (allowConversion()) {\n//     if (!hasQualfiers()) {\n//       ConversionAssignment conversion=resolveViaConversion(sourceType,targetType);\n//       if (conversion != null) {\n//         conversion.reportMessageWhenNarrowing(messager,this);\n//         conversion.getAssignment().setAssignment(sourceRHS);\n//         return conversion.getAssignment();\n//       }\n//     }\n//     if (!hasQualfiers()) {\n//       List<SelectedMethod<BuiltInMethod>> matches=getBestMatch(builtIns,sourceType,targetType);\n//       reportErrorWhenAmbiguous(matches,targetType);\n//       if (!matches.isEmpty()) {\n//         assignment=toBuildInRef(first(matches));\n//         assignment.setAssignment(sourceRHS);\n//         usedSupportedMappings.addAll(supportingMethodCandidates);\n//         return assignment;\n//       }\n//     }\n//   }\n//   if (allow2Steps()) {\n//     assignment=MethodMethod.getBestMatch(this,sourceType,targetType);\n//     if (assignment != null) {\n//       usedSupportedMappings.addAll(supportingMethodCandidates);\n//       return assignment;\n//     }\n//     if (allowConversion()) {\n//       assignment=ConversionMethod.getBestMatch(this,sourceType,targetType);\n//       if (assignment != null) {\n//         usedSupportedMappings.addAll(supportingMethodCandidates);\n//         return assignment;\n//       }\n//     }\n//     selectionCriteria.setPreferUpdateMapping(false);\n//     if (allowConversion()) {\n//       assignment=MethodConversion.getBestMatch(this,sourceType,targetType);\n//       if (assignment != null) {\n//         usedSupportedMappings.addAll(supportingMethodCandidates);\n//         return assignment;\n//       }\n//     }\n//   }\n//   if (hasQualfiers()) {\n//     if ((sourceType.isCollectionType() || sourceType.isArrayType()) && targetType.isIterableType()) {\n//       return forger.get();\n//     }\n//  else {\n//       printQualifierMessage(selectionCriteria);\n//     }\n//   }\n//  else   if (allowMappingMethod()) {\n//     return forger.get();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// public Assignment getAssignment(){\n//   return assignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/PropertyMapping.java\n// --------------------------------------------------\n// public Assignment getAssignment(){\n//   return assignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/TypeConversion.java\n// --------------------------------------------------\n// public Assignment getAssignment(){\n//   return assignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/AssignmentWrapper.java\n// --------------------------------------------------\n// public Assignment getAssignment(){\n//   return decoratedAssignment;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// Assignment getAssignment(){\n//   return assignment;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractBaseBuilder<B extends AbstractBaseBuilder<B>> {\n\n    protected B myself;\n    protected MappingBuilderContext ctx;\n    protected Method method;\n\n    AbstractBaseBuilder(Class<B> selfType) {\n        myself = selfType.cast( this );\n    }\n\n    public B mappingContext(MappingBuilderContext mappingContext) {\n        this.ctx = mappingContext;\n        return myself;\n    }\n\n    public B method(Method sourceMethod) {\n        this.method = sourceMethod;\n        return myself;\n    }\n\n    /**\n     * Checks if MapStruct is allowed to generate an automatic sub-mapping between {@code sourceType} and @{code\n     * targetType}.\n     * This will evaluate to {@code true}, when:\n     * <li>\n     * <ul>Automatic sub-mapping methods generation is not disabled</ul>\n     * <ul>MapStruct is allowed to generate an automatic sub-mapping between the {@code sourceType} and {@code\n     * targetType}</ul>\n     * </li>\n     *\n     * @param sourceType candidate source type to generate a sub-mapping from\n     * @param targetType candidate target type to generate a sub-mapping for\n     *\n     * @return {@code true} if MapStruct can try to generate an automatic sub-mapping between the types.\n     */\n    boolean canGenerateAutoSubMappingBetween(Type sourceType, Type targetType) {\n        return !isDisableSubMappingMethodsGeneration() &&\n            ctx.canGenerateAutoSubMappingBetween( sourceType, targetType );\n    }\n\n    private boolean isDisableSubMappingMethodsGeneration() {\n        return  method.getOptions().getMapper().isDisableSubMappingMethodsGeneration();\n    }\n\n    /**\n     * Creates a forged assignment from the provided {@code sourceRHS} and {@code forgedMethod}. If a mapping method\n     * for the {@code forgedMethod} already exists, then this method used for the assignment.\n     *\n     * @param sourceRHS that needs to be used for the assignment\n     * @param forgedMethod the forged method for which we want to create an {@link Assignment}\n     *\n     * @return See above\n     */\n    Assignment createForgedAssignment(SourceRHS sourceRHS, BuilderType builderType, ForgedMethod forgedMethod) {\n\n        if ( ctx.getForgedMethodsUnderCreation().containsKey( forgedMethod ) ) {\n            return createAssignment( sourceRHS, ctx.getForgedMethodsUnderCreation().get( forgedMethod ) );\n        }\n        else {\n            ctx.getForgedMethodsUnderCreation().put( forgedMethod, forgedMethod );\n        }\n\n        MappingMethod forgedMappingMethod;\n        if ( MappingMethodUtils.isEnumMapping( forgedMethod ) ) {\n            forgedMappingMethod = new ValueMappingMethod.Builder()\n                .method( forgedMethod )\n                .valueMappings( forgedMethod.getOptions().getValueMappings() )\n                .enumMapping( forgedMethod.getOptions().getEnumMappingOptions() )\n                .mappingContext( ctx )\n                .build();\n        }\n        else {\n            forgedMappingMethod = new BeanMappingMethod.Builder()\n                .forgedMethod( forgedMethod )\n                .returnTypeBuilder( builderType )\n                .mappingContext( ctx )\n                .build();\n        }\n\n        Assignment forgedAssignment = createForgedAssignment( sourceRHS, forgedMethod, forgedMappingMethod );\n        ctx.getForgedMethodsUnderCreation().remove( forgedMethod );\n        return forgedAssignment;\n    }\n\n    Assignment createForgedAssignment(SourceRHS source, ForgedMethod methodRef, MappingMethod mappingMethod) {<FILL_FUNCTION_BODY>}\n\n    private Assignment createAssignment(SourceRHS source, ForgedMethod methodRef) {\n        Assignment assignment = MethodReference.forForgedMethod(\n            methodRef,\n            ParameterBinding.fromParameters( methodRef.getParameters() )\n        );\n        assignment.setAssignment( source );\n\n        return assignment;\n    }\n\n    /**\n     * Reports that a mapping could not be created.\n     *\n     * @param method the method that should be mapped\n     * @param sourceErrorMessagePart the error message part for the source\n     * @param sourceType the source type of the mapping\n     * @param targetType the type of the target mapping\n     * @param targetPropertyName the name of the target property\n     */\n    void reportCannotCreateMapping(Method method, String sourceErrorMessagePart, Type sourceType, Type targetType,\n                                   String targetPropertyName) {\n        ctx.getMessager().printMessage(\n            method.getExecutable(),\n            Message.PROPERTYMAPPING_MAPPING_NOT_FOUND,\n            sourceErrorMessagePart,\n            targetType.describe(),\n            targetPropertyName,\n            targetType.describe(),\n            sourceType.describe()\n        );\n    }\n\n    /**\n     * Reports that a mapping could not be created.\n     *\n     * @param method the method that should be mapped\n     * @param posHint hint which @Mapping is the culprit\n     * @param sourceErrorMessagePart the error message part for the source\n     * @param sourceType the source type of the mapping\n     * @param targetType the type of the target mapping\n     * @param targetPropertyName the name of the target property\n     */\n    void reportCannotCreateMapping(Method method, AnnotationMirror posHint, String sourceErrorMessagePart,\n                                   Type sourceType, Type targetType,\n        String targetPropertyName) {\n        ctx.getMessager().printMessage(\n            method.getExecutable(),\n            posHint,\n            Message.PROPERTYMAPPING_MAPPING_NOT_FOUND,\n            sourceErrorMessagePart,\n            targetType.describe(),\n            targetPropertyName,\n            targetType.describe(),\n            sourceType.describe()\n        );\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/317", "ground_truth": "\n        if ( mappingMethod == null ) {\n            return null;\n        }\n        if (methodRef.getMappingReferences().isRestrictToDefinedMappings() ||\n            !ctx.getMappingsToGenerate().contains( mappingMethod )) {\n            // If the mapping options are restricted only to the defined mappings, then use the mapping method.\n            // See https://github.com/mapstruct/mapstruct/issues/1148\n            ctx.getMappingsToGenerate().add( mappingMethod );\n        }\n        else {\n            String existingName = ctx.getExistingMappingMethod( mappingMethod ).getName();\n            methodRef = new ForgedMethod( existingName, methodRef );\n        }\n\n        return createAssignment( source, methodRef );\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "AbstractBaseBuilder.java"], "context_start_lineno": 0, "function_name": "createForgedAssignment", "left_context": "class AbstractBaseBuilder<B extends AbstractBaseBuilder<B>> {\n\n    protected B myself;\n    protected MappingBuilderContext ctx;\n    protected Method method;\n\n    AbstractBaseBuilder(Class<B> selfType) {\n        myself = selfType.cast( this );\n    }\n\n    public B mappingContext(MappingBuilderContext mappingContext) {\n        this.ctx = mappingContext;\n        return myself;\n    }\n\n    public B method(Method sourceMethod) {\n        this.method = sourceMethod;\n        return myself;\n    }\n\n    /**\n     * Checks if MapStruct is allowed to generate an automatic sub-mapping between {@code sourceType} and @{code\n     * targetType}.\n     * This will evaluate to {@code true}, when:\n     * <li>\n     * <ul>Automatic sub-mapping methods generation is not disabled</ul>\n     * <ul>MapStruct is allowed to generate an automatic sub-mapping between the {@code sourceType} and {@code\n     * targetType}</ul>\n     * </li>\n     *\n     * @param sourceType candidate source type to generate a sub-mapping from\n     * @param targetType candidate target type to generate a sub-mapping for\n     *\n     * @return {@code true} if MapStruct can try to generate an automatic sub-mapping between the types.\n     */\n    boolean canGenerateAutoSubMappingBetween(Type sourceType, Type targetType) {\n        return !isDisableSubMappingMethodsGeneration() &&\n            ctx.canGenerateAutoSubMappingBetween( sourceType, targetType );\n    }\n\n    private boolean isDisableSubMappingMethodsGeneration() {\n        return  method.getOptions().getMapper().isDisableSubMappingMethodsGeneration();\n    }\n\n    /**\n     * Creates a forged assignment from the provided {@code sourceRHS} and {@code forgedMethod}. If a mapping method\n     * for the {@code forgedMethod} already exists, then this method used for the assignment.\n     *\n     * @param sourceRHS that needs to be used for the assignment\n     * @param forgedMethod the forged method for which we want to create an {@link Assignment}\n     *\n     * @return See above\n     */\n    Assignment createForgedAssignment(SourceRHS sourceRHS, BuilderType builderType, ForgedMethod forgedMethod) {\n\n        if ( ctx.getForgedMethodsUnderCreation().containsKey( forgedMethod ) ) {\n            return createAssignment( sourceRHS, ctx.getForgedMethodsUnderCreation().get( forgedMethod ) );\n        }\n        else {\n            ctx.getForgedMethodsUnderCreation().put( forgedMethod, forgedMethod );\n        }\n\n        MappingMethod forgedMappingMethod;\n        if ( MappingMethodUtils.isEnumMapping( forgedMethod ) ) {\n            forgedMappingMethod = new ValueMappingMethod.Builder()\n                .method( forgedMethod )\n                .valueMappings( forgedMethod.getOptions().getValueMappings() )\n                .enumMapping( forgedMethod.getOptions().getEnumMappingOptions() )\n                .mappingContext( ctx )\n                .build();\n        }\n        else {\n            forgedMappingMethod = new BeanMappingMethod.Builder()\n                .forgedMethod( forgedMethod )\n                .returnTypeBuilder( builderType )\n                .mappingContext( ctx )\n                .build();\n        }\n\n        Assignment forgedAssignment = createForgedAssignment( sourceRHS, forgedMethod, forgedMappingMethod );\n        ctx.getForgedMethodsUnderCreation().remove( forgedMethod );\n        return forgedAssignment;\n    }\n\n    Assignment createForgedAssignment(SourceRHS source, ForgedMethod methodRef, MappingMethod mappingMethod) {", "right_context": "}\n\n    private Assignment createAssignment(SourceRHS source, ForgedMethod methodRef) {\n        Assignment assignment = MethodReference.forForgedMethod(\n            methodRef,\n            ParameterBinding.fromParameters( methodRef.getParameters() )\n        );\n        assignment.setAssignment( source );\n\n        return assignment;\n    }\n\n    /**\n     * Reports that a mapping could not be created.\n     *\n     * @param method the method that should be mapped\n     * @param sourceErrorMessagePart the error message part for the source\n     * @param sourceType the source type of the mapping\n     * @param targetType the type of the target mapping\n     * @param targetPropertyName the name of the target property\n     */\n    void reportCannotCreateMapping(Method method, String sourceErrorMessagePart, Type sourceType, Type targetType,\n                                   String targetPropertyName) {\n        ctx.getMessager().printMessage(\n            method.getExecutable(),\n            Message.PROPERTYMAPPING_MAPPING_NOT_FOUND,\n            sourceErrorMessagePart,\n            targetType.describe(),\n            targetPropertyName,\n            targetType.describe(),\n            sourceType.describe()\n        );\n    }\n\n    /**\n     * Reports that a mapping could not be created.\n     *\n     * @param method the method that should be mapped\n     * @param posHint hint which @Mapping is the culprit\n     * @param sourceErrorMessagePart the error message part for the source\n     * @param sourceType the source type of the mapping\n     * @param targetType the type of the target mapping\n     * @param targetPropertyName the name of the target property\n     */\n    void reportCannotCreateMapping(Method method, AnnotationMirror posHint, String sourceErrorMessagePart,\n                                   Type sourceType, Type targetType,\n        String targetPropertyName) {\n        ctx.getMessager().printMessage(\n            method.getExecutable(),\n            posHint,\n            Message.PROPERTYMAPPING_MAPPING_NOT_FOUND,\n            sourceErrorMessagePart,\n            targetType.describe(),\n            targetPropertyName,\n            targetType.describe(),\n            sourceType.describe()\n        );\n    }\n}", "class_name": "AbstractBaseBuilder", "return_type": "Assignment", "parameters": [{"type": "SourceRHS", "name": "source"}, {"type": "ForgedMethod", "name": "methodRef"}, {"type": "MappingMethod", "name": "mappingMethod"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/creation/MappingResolverImpl.java\n// --------------------------------------------------\n// private <T extends Method>List<SelectedMethod<T>> getBestMatch(List<T> methods,Type source,Type target){\n//   return methodSelectors.getMatchingMethods(methods,SelectionContext.forMappingMethods(mappingMethod,source,target,selectionCriteria,typeFactory));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/CreateOrUpdateSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   if (criteria.isLifecycleCallbackRequired() || criteria.isObjectFactoryRequired() || criteria.isPresenceCheckRequired()) {\n//     return methods;\n//   }\n//   List<SelectedMethod<T>> createCandidates=new ArrayList<>();\n//   List<SelectedMethod<T>> updateCandidates=new ArrayList<>();\n//   for (  SelectedMethod<T> method : methods) {\n//     boolean isCreateCandidate=method.getMethod().getMappingTargetParameter() == null;\n//     if (isCreateCandidate) {\n//       createCandidates.add(method);\n//     }\n//  else {\n//       updateCandidates.add(method);\n//     }\n//   }\n//   if (criteria.isPreferUpdateMapping() && !updateCandidates.isEmpty()) {\n//     return updateCandidates;\n//   }\n//   return createCandidates;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/FactoryParameterSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   if (!criteria.isObjectFactoryRequired() || methods.size() <= 1) {\n//     return methods;\n//   }\n//   List<SelectedMethod<T>> sourceParamFactoryMethods=new ArrayList<>(methods.size());\n//   for (  SelectedMethod<T> candidate : methods) {\n//     if (!candidate.getMethod().getSourceParameters().isEmpty()) {\n//       sourceParamFactoryMethods.add(candidate);\n//     }\n//   }\n//   if (sourceParamFactoryMethods.size() == 1) {\n//     return sourceParamFactoryMethods;\n//   }\n//   return methods;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/InheritanceSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   Type sourceType=context.getSourceType();\n//   if (sourceType == null) {\n//     return methods;\n//   }\n//   List<SelectedMethod<T>> candidatesWithBestMatchingSourceType=new ArrayList<>();\n//   int bestMatchingSourceTypeDistance=Integer.MAX_VALUE;\n//   for (  SelectedMethod<T> method : methods) {\n//     Parameter singleSourceParam=first(method.getMethod().getSourceParameters());\n//     int sourceTypeDistance=sourceType.distanceTo(singleSourceParam.getType());\n//     bestMatchingSourceTypeDistance=addToCandidateListIfMinimal(candidatesWithBestMatchingSourceType,bestMatchingSourceTypeDistance,method,sourceTypeDistance);\n//   }\n//   return candidatesWithBestMatchingSourceType;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MethodFamilySelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   List<SelectedMethod<T>> result=new ArrayList<>(methods.size());\n//   for (  SelectedMethod<T> method : methods) {\n//     if (method.getMethod().isObjectFactory() == criteria.isObjectFactoryRequired() && method.getMethod().isLifecycleCallbackMethod() == criteria.isLifecycleCallbackRequired() && method.getMethod().isPresenceCheck() == criteria.isPresenceCheckRequired()) {\n//       result.add(method);\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MethodSelector.java\n// --------------------------------------------------\n// /** \n//  * Selects those methods which match the given types and other criteria\n//  * @param < T > either SourceMethod or BuiltInMethod\n//  * @param candidates list of available methods\n//  * @param context the context for the matching\n//  * @return list of methods that passes the matching process\n//  */\n// <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> candidates,SelectionContext context);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MethodSelectors.java\n// --------------------------------------------------\n// /** \n//  * Selects those methods which match the given types and other criteria\n//  * @param < T > either SourceMethod or BuiltInMethod\n//  * @param methods list of available methods\n//  * @param context the selection context that should be used in the matching process\n//  * @return list of methods that passes the matching process\n//  */\n// public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<T> methods,SelectionContext context){\n//   List<SelectedMethod<T>> candidates=new ArrayList<>(methods.size());\n//   for (  T method : methods) {\n//     candidates.add(new SelectedMethod<>(method));\n//   }\n//   for (  MethodSelector selector : selectors) {\n//     candidates=selector.getMatchingMethods(candidates,context);\n//   }\n//   return candidates;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/MostSpecificResultTypeSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> candidates,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   Type mappingTargetType=context.getMappingTargetType();\n//   if (candidates.size() < 2 || !criteria.isForMapping() || criteria.getQualifyingResultType() != null) {\n//     return candidates;\n//   }\n//   List<SelectedMethod<T>> result=new ArrayList<>();\n//   for (  SelectedMethod<T> candidate : candidates) {\n//     if (candidate.getMethod().getResultType().getBoxedEquivalent().equals(mappingTargetType.getBoxedEquivalent())) {\n//       result.add(candidate);\n//     }\n//   }\n//   return result.isEmpty() ? candidates : result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/SourceRhsSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> candidates,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   if (candidates.size() < 2 || criteria.getSourceRHS() == null) {\n//     return candidates;\n//   }\n//   List<SelectedMethod<T>> sourceRHSFavoringCandidates=new ArrayList<>();\n//   for (  SelectedMethod<T> candidate : candidates) {\n//     for (    ParameterBinding parameterBinding : candidate.getParameterBindings()) {\n//       if (parameterBinding.getSourceRHS() != null) {\n//         sourceRHSFavoringCandidates.add(candidate);\n//         break;\n//       }\n//     }\n//   }\n//   if (!sourceRHSFavoringCandidates.isEmpty()) {\n//     return sourceRHSFavoringCandidates;\n//   }\n//   return candidates;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/TargetTypeSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   SelectionCriteria criteria=context.getSelectionCriteria();\n//   TypeMirror qualifyingTypeMirror=criteria.getQualifyingResultType();\n//   if (qualifyingTypeMirror != null && !criteria.isLifecycleCallbackRequired()) {\n//     List<SelectedMethod<T>> candidatesWithQualifyingTargetType=new ArrayList<>(methods.size());\n//     for (    SelectedMethod<T> method : methods) {\n//       TypeMirror resultTypeMirror=method.getMethod().getResultType().getTypeElement().asType();\n//       if (typeUtils.isSameType(qualifyingTypeMirror,resultTypeMirror)) {\n//         candidatesWithQualifyingTargetType.add(method);\n//       }\n//     }\n//     return candidatesWithQualifyingTargetType;\n//   }\n//  else {\n//     return methods;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/TypeSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   if (methods.isEmpty()) {\n//     return methods;\n//   }\n//   Type returnType=context.getReturnType();\n//   List<SelectedMethod<T>> result=new ArrayList<>();\n//   List<ParameterBinding> availableBindings=context.getAvailableParameterBindings();\n//   for (  SelectedMethod<T> method : methods) {\n//     List<List<ParameterBinding>> parameterBindingPermutations=getCandidateParameterBindingPermutations(availableBindings,method.getMethod().getParameters());\n//     if (parameterBindingPermutations != null) {\n//       SelectedMethod<T> matchingMethod=getMatchingParameterBinding(returnType,context,method,parameterBindingPermutations);\n//       if (matchingMethod != null) {\n//         result.add(matchingMethod);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/selector/XmlElementDeclSelector.java\n// --------------------------------------------------\n// @Override public <T extends Method>List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,SelectionContext context){\n//   Type resultType=context.getMappingMethod().getResultType();\n//   String targetPropertyName=context.getSelectionCriteria().getTargetPropertyName();\n//   List<SelectedMethod<T>> nameMatches=new ArrayList<>();\n//   List<SelectedMethod<T>> scopeMatches=new ArrayList<>();\n//   List<SelectedMethod<T>> nameAndScopeMatches=new ArrayList<>();\n//   XmlElementRefInfo xmlElementRefInfo=findXmlElementRef(resultType,targetPropertyName);\n//   for (  SelectedMethod<T> candidate : methods) {\n//     if (!(candidate.getMethod() instanceof SourceMethod)) {\n//       continue;\n//     }\n//     SourceMethod candidateMethod=(SourceMethod)candidate.getMethod();\n//     XmlElementDeclInfo xmlElementDeclInfo=getXmlElementDeclInfo(candidateMethod.getExecutable());\n//     if (xmlElementDeclInfo == null) {\n//       continue;\n//     }\n//     String name=xmlElementDeclInfo.nameValue();\n//     TypeMirror scope=xmlElementDeclInfo.scopeType();\n//     boolean nameIsSetAndMatches=name != null && name.equals(xmlElementRefInfo.nameValue());\n//     boolean scopeIsSetAndMatches=scope != null && typeUtils.isSameType(scope,xmlElementRefInfo.sourceType());\n//     if (nameIsSetAndMatches) {\n//       if (scopeIsSetAndMatches) {\n//         nameAndScopeMatches.add(candidate);\n//       }\n//  else {\n//         nameMatches.add(candidate);\n//       }\n//     }\n//  else     if (scopeIsSetAndMatches) {\n//       scopeMatches.add(candidate);\n//     }\n//   }\n//   if (!nameAndScopeMatches.isEmpty()) {\n//     return nameAndScopeMatches;\n//   }\n//  else   if (!scopeMatches.isEmpty()) {\n//     return scopeMatches;\n//   }\n//  else   if (!nameMatches.isEmpty()) {\n//     return nameMatches;\n//   }\n//  else {\n//     return methods;\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass QualifierSelector implements MethodSelector {\n\n    private final TypeUtils typeUtils;\n    private final TypeMirror namedAnnotationTypeMirror;\n\n    public QualifierSelector(TypeUtils typeUtils, ElementUtils elementUtils ) {\n        this.typeUtils = typeUtils;\n        namedAnnotationTypeMirror = elementUtils.getTypeElement( \"org.mapstruct.Named\" ).asType();\n    }\n\n    @Override\n    public <T extends Method> List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,\n                                                                         SelectionContext context) {<FILL_FUNCTION_BODY>}\n\n    private Set<AnnotationMirror> getQualifierAnnotationMirrors( Method candidate ) {\n\n        // retrieve annotations\n        Set<AnnotationMirror> qualiferAnnotations = new HashSet<>();\n\n        // first from the method itself\n        SourceMethod candidateSM = (SourceMethod) candidate;\n        List<? extends AnnotationMirror> methodAnnotations = candidateSM.getExecutable().getAnnotationMirrors();\n        for ( AnnotationMirror methodAnnotation : methodAnnotations ) {\n            addOnlyWhenQualifier( qualiferAnnotations, methodAnnotation );\n        }\n\n        // then from the mapper (if declared)\n        Type mapper = candidate.getDeclaringMapper();\n        if ( mapper != null ) {\n            List<? extends AnnotationMirror> mapperAnnotations = mapper.getTypeElement().getAnnotationMirrors();\n            for ( AnnotationMirror mapperAnnotation : mapperAnnotations ) {\n                addOnlyWhenQualifier( qualiferAnnotations, mapperAnnotation );\n            }\n        }\n\n        return qualiferAnnotations;\n    }\n\n    private void addOnlyWhenQualifier( Set<AnnotationMirror> annotationSet, AnnotationMirror candidate ) {\n        // only add the candidate annotation when the candidate itself has the annotation 'Qualifier'\n        if ( QualifierGem.instanceOn( candidate.getAnnotationType().asElement() ) != null ) {\n            annotationSet.add( candidate );\n        }\n    }\n\n}", "metadata": {"task_id": "mapstruct_mapstruct/335", "ground_truth": "\n        SelectionCriteria criteria = context.getSelectionCriteria();\n\n        int numberOfQualifiersToMatch = 0;\n\n        // Define some local collections and make sure that they are defined.\n        List<TypeMirror> qualifierTypes = new ArrayList<>();\n        if ( criteria.getQualifiers() != null ) {\n            qualifierTypes.addAll( criteria.getQualifiers() );\n            numberOfQualifiersToMatch += criteria.getQualifiers().size();\n        }\n        List<String> qualfiedByNames = new ArrayList<>();\n        if ( criteria.getQualifiedByNames() != null ) {\n            qualfiedByNames.addAll( criteria.getQualifiedByNames() );\n            numberOfQualifiersToMatch += criteria.getQualifiedByNames().size();\n        }\n\n        // add the mapstruct @Named annotation as annotation to look for\n        if ( !qualfiedByNames.isEmpty() ) {\n            qualifierTypes.add( namedAnnotationTypeMirror );\n        }\n\n        // Check there are qualfiers for this mapping: Mapping#qualifier or Mapping#qualfiedByName\n        if ( qualifierTypes.isEmpty() ) {\n            // When no qualifiers, disqualify all methods marked with a qualifier by removing them from the candidates\n            List<SelectedMethod<T>> nonQualiferAnnotatedMethods = new ArrayList<>( methods.size() );\n            for ( SelectedMethod<T> candidate : methods ) {\n\n                if ( candidate.getMethod() instanceof SourceMethod ) {\n                    Set<AnnotationMirror> qualifierAnnotations = getQualifierAnnotationMirrors( candidate.getMethod() );\n                    if ( qualifierAnnotations.isEmpty() ) {\n                        nonQualiferAnnotatedMethods.add( candidate );\n                    }\n                }\n                else {\n                    nonQualiferAnnotatedMethods.add( candidate );\n                }\n\n            }\n            return nonQualiferAnnotatedMethods;\n        }\n        else {\n            // Check all methods marked with qualfier (or methods in Mappers marked wiht a qualfier) for matches.\n            List<SelectedMethod<T>> matches = new ArrayList<>( methods.size() );\n            for ( SelectedMethod<T> candidate : methods ) {\n\n                if ( !( candidate.getMethod() instanceof SourceMethod ) ) {\n                    continue;\n                }\n\n                // retrieve annotations\n                Set<AnnotationMirror> qualifierAnnotationMirrors =\n                    getQualifierAnnotationMirrors( candidate.getMethod() );\n\n                // now count if all qualifiers are matched\n                int matchingQualifierCounter = 0;\n                    for ( AnnotationMirror qualifierAnnotationMirror : qualifierAnnotationMirrors ) {\n                for ( TypeMirror qualifierType : qualifierTypes ) {\n\n                        // get the type of the annotation positionHint.\n                        DeclaredType qualifierAnnotationType = qualifierAnnotationMirror.getAnnotationType();\n                        if ( typeUtils.isSameType( qualifierType, qualifierAnnotationType ) ) {\n                            // Match! we have an annotation which has the @Qualifer marker ( could be @Named as well )\n                            if ( typeUtils.isSameType( qualifierAnnotationType, namedAnnotationTypeMirror ) ) {\n                                // Match! its an @Named, so do the additional check on name.\n                                NamedGem named = NamedGem.instanceOn( qualifierAnnotationMirror );\n                                if ( named.value().hasValue() && qualfiedByNames.contains( named.value().get() ) ) {\n                                    // Match! its an @Name and the value matches as well. Oh boy.\n                                    matchingQualifierCounter++;\n                                }\n                            }\n                            else {\n                                // Match! its a self declared qualifer annoation (marked with @Qualifier)\n                                matchingQualifierCounter++;\n                            }\n                            break;\n                        }\n\n                    }\n                }\n\n                if ( matchingQualifierCounter == numberOfQualifiersToMatch ) {\n                    // Only if all qualifiers are matched with a qualifying annotation, add candidate\n                    matches.add( candidate );\n                }\n            }\n            return matches;\n        }\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "source", "selector", "QualifierSelector.java"], "context_start_lineno": 0, "function_name": "getMatchingMethods", "left_context": "class QualifierSelector implements MethodSelector {\n\n    private final TypeUtils typeUtils;\n    private final TypeMirror namedAnnotationTypeMirror;\n\n    public QualifierSelector(TypeUtils typeUtils, ElementUtils elementUtils ) {\n        this.typeUtils = typeUtils;\n        namedAnnotationTypeMirror = elementUtils.getTypeElement( \"org.mapstruct.Named\" ).asType();\n    }\n\n    @Override\n    public <T extends Method> List<SelectedMethod<T>> getMatchingMethods(List<SelectedMethod<T>> methods,\n                                                                         SelectionContext context) {", "right_context": "}\n\n    private Set<AnnotationMirror> getQualifierAnnotationMirrors( Method candidate ) {\n\n        // retrieve annotations\n        Set<AnnotationMirror> qualiferAnnotations = new HashSet<>();\n\n        // first from the method itself\n        SourceMethod candidateSM = (SourceMethod) candidate;\n        List<? extends AnnotationMirror> methodAnnotations = candidateSM.getExecutable().getAnnotationMirrors();\n        for ( AnnotationMirror methodAnnotation : methodAnnotations ) {\n            addOnlyWhenQualifier( qualiferAnnotations, methodAnnotation );\n        }\n\n        // then from the mapper (if declared)\n        Type mapper = candidate.getDeclaringMapper();\n        if ( mapper != null ) {\n            List<? extends AnnotationMirror> mapperAnnotations = mapper.getTypeElement().getAnnotationMirrors();\n            for ( AnnotationMirror mapperAnnotation : mapperAnnotations ) {\n                addOnlyWhenQualifier( qualiferAnnotations, mapperAnnotation );\n            }\n        }\n\n        return qualiferAnnotations;\n    }\n\n    private void addOnlyWhenQualifier( Set<AnnotationMirror> annotationSet, AnnotationMirror candidate ) {\n        // only add the candidate annotation when the candidate itself has the annotation 'Qualifier'\n        if ( QualifierGem.instanceOn( candidate.getAnnotationType().asElement() ) != null ) {\n            annotationSet.add( candidate );\n        }\n    }\n\n}", "class_name": "QualifierSelector", "return_type": "List<SelectedMethod<T>>", "parameters": [{"type": "List<SelectedMethod<T>>", "name": "methods"}, {"type": "SelectionContext", "name": "context"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ParameterBinding {\n\n    private final Type type;\n    private final String variableName;\n    private final boolean targetType;\n    private final boolean mappingTarget;\n    private final boolean mappingContext;\n    private final boolean sourcePropertyName;\n    private final boolean targetPropertyName;\n    private final SourceRHS sourceRHS;\n\n    private ParameterBinding(Type parameterType, String variableName, boolean mappingTarget, boolean targetType,\n                             boolean mappingContext, boolean sourcePropertyName, boolean targetPropertyName,\n                             SourceRHS sourceRHS) {\n        this.type = parameterType;\n        this.variableName = variableName;\n        this.targetType = targetType;\n        this.mappingTarget = mappingTarget;\n        this.mappingContext = mappingContext;\n        this.sourcePropertyName = sourcePropertyName;\n        this.targetPropertyName = targetPropertyName;\n        this.sourceRHS = sourceRHS;\n    }\n\n    /**\n     * @return the name of the variable (or parameter) that is being used as argument for the parameter being bound.\n     */\n    public String getVariableName() {\n        return variableName;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @TargetType} parameter.\n     */\n    public boolean isTargetType() {\n        return targetType;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @MappingTarget} parameter.\n     */\n    public boolean isMappingTarget() {\n        return mappingTarget;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @MappingContext} parameter.\n     */\n    public boolean isMappingContext() {\n        return mappingContext;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @SourcePropertyName} parameter.\n     */\n    public boolean isSourcePropertyName() {\n        return sourcePropertyName;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @TargetPropertyName} parameter.\n     */\n    public boolean isTargetPropertyName() {\n        return targetPropertyName;\n    }\n\n    /**\n     * @return the type of the parameter that is bound\n     */\n    public Type getType() {\n        return type;\n    }\n\n    /**\n     * @return the sourceRHS that this parameter is bound to\n     */\n    public SourceRHS getSourceRHS() {\n        return sourceRHS;\n    }\n\n    public Set<Type> getImportTypes() {\n        if ( targetType ) {\n            return type.getImportTypes();\n        }\n\n        if ( sourceRHS != null ) {\n            return sourceRHS.getImportTypes();\n        }\n\n        return Collections.emptySet();\n    }\n\n    /**\n     * @param parameter parameter\n     * @return a parameter binding reflecting the given parameter as being used as argument for a method call\n     */\n    public static ParameterBinding fromParameter(Parameter parameter) {\n        return new ParameterBinding(\n            parameter.getType(),\n            parameter.getName(),\n            parameter.isMappingTarget(),\n            parameter.isTargetType(),\n            parameter.isMappingContext(),\n            parameter.isSourcePropertyName(),\n            parameter.isTargetPropertyName(),\n            null\n        );\n    }\n\n    public static List<ParameterBinding> fromParameters(List<Parameter> parameters) {\n        List<ParameterBinding> result = new ArrayList<>( parameters.size() );\n        for ( Parameter param : parameters ) {\n            result.add( fromParameter( param ) );\n        }\n        return result;\n    }\n\n    public static ParameterBinding fromTypeAndName(Type parameterType, String parameterName) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * @param classTypeOf the type representing {@code Class<X>} for the target type {@code X}\n     * @return a parameter binding representing a target type parameter\n     */\n    public static ParameterBinding forTargetTypeBinding(Type classTypeOf) {\n        return new ParameterBinding( classTypeOf, null, false, true, false, false, false, null );\n    }\n\n    /**\n     * @return a parameter binding representing a target property name parameter\n     */\n    public static ParameterBinding forTargetPropertyNameBinding(Type classTypeOf) {\n        return new ParameterBinding( classTypeOf, null, false, false, false, false, true, null );\n    }\n\n    /**\n     * @return a parameter binding representing a source property name parameter\n     */\n    public static ParameterBinding forSourcePropertyNameBinding(Type classTypeOf) {\n        return new ParameterBinding( classTypeOf, null, false, false, false, true, false, null );\n    }\n\n    /**\n     * @param resultType type of the mapping target\n     * @return a parameter binding representing a mapping target parameter\n     */\n    public static ParameterBinding forMappingTargetBinding(Type resultType) {\n        return new ParameterBinding( resultType, null, true, false, false, false, false, null );\n    }\n\n    /**\n     * @param sourceType type of the parameter\n     * @return a parameter binding representing a mapping source type\n     */\n    public static ParameterBinding forSourceTypeBinding(Type sourceType) {\n        return new ParameterBinding( sourceType, null, false, false, false, false, false, null );\n    }\n\n    public static ParameterBinding fromSourceRHS(SourceRHS sourceRHS) {\n        return new ParameterBinding( sourceRHS.getSourceType(), null, false, false, false, false, false, sourceRHS );\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/373", "ground_truth": "\n        return new ParameterBinding(\n            parameterType,\n            parameterName,\n            false,\n            false,\n            false,\n            false,\n            false,\n            null\n        );\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "common", "ParameterBinding.java"], "context_start_lineno": 0, "function_name": "fromTypeAndName", "left_context": "class ParameterBinding {\n\n    private final Type type;\n    private final String variableName;\n    private final boolean targetType;\n    private final boolean mappingTarget;\n    private final boolean mappingContext;\n    private final boolean sourcePropertyName;\n    private final boolean targetPropertyName;\n    private final SourceRHS sourceRHS;\n\n    private ParameterBinding(Type parameterType, String variableName, boolean mappingTarget, boolean targetType,\n                             boolean mappingContext, boolean sourcePropertyName, boolean targetPropertyName,\n                             SourceRHS sourceRHS) {\n        this.type = parameterType;\n        this.variableName = variableName;\n        this.targetType = targetType;\n        this.mappingTarget = mappingTarget;\n        this.mappingContext = mappingContext;\n        this.sourcePropertyName = sourcePropertyName;\n        this.targetPropertyName = targetPropertyName;\n        this.sourceRHS = sourceRHS;\n    }\n\n    /**\n     * @return the name of the variable (or parameter) that is being used as argument for the parameter being bound.\n     */\n    public String getVariableName() {\n        return variableName;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @TargetType} parameter.\n     */\n    public boolean isTargetType() {\n        return targetType;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @MappingTarget} parameter.\n     */\n    public boolean isMappingTarget() {\n        return mappingTarget;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @MappingContext} parameter.\n     */\n    public boolean isMappingContext() {\n        return mappingContext;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @SourcePropertyName} parameter.\n     */\n    public boolean isSourcePropertyName() {\n        return sourcePropertyName;\n    }\n\n    /**\n     * @return {@code true}, if the parameter being bound is a {@code @TargetPropertyName} parameter.\n     */\n    public boolean isTargetPropertyName() {\n        return targetPropertyName;\n    }\n\n    /**\n     * @return the type of the parameter that is bound\n     */\n    public Type getType() {\n        return type;\n    }\n\n    /**\n     * @return the sourceRHS that this parameter is bound to\n     */\n    public SourceRHS getSourceRHS() {\n        return sourceRHS;\n    }\n\n    public Set<Type> getImportTypes() {\n        if ( targetType ) {\n            return type.getImportTypes();\n        }\n\n        if ( sourceRHS != null ) {\n            return sourceRHS.getImportTypes();\n        }\n\n        return Collections.emptySet();\n    }\n\n    /**\n     * @param parameter parameter\n     * @return a parameter binding reflecting the given parameter as being used as argument for a method call\n     */\n    public static ParameterBinding fromParameter(Parameter parameter) {\n        return new ParameterBinding(\n            parameter.getType(),\n            parameter.getName(),\n            parameter.isMappingTarget(),\n            parameter.isTargetType(),\n            parameter.isMappingContext(),\n            parameter.isSourcePropertyName(),\n            parameter.isTargetPropertyName(),\n            null\n        );\n    }\n\n    public static List<ParameterBinding> fromParameters(List<Parameter> parameters) {\n        List<ParameterBinding> result = new ArrayList<>( parameters.size() );\n        for ( Parameter param : parameters ) {\n            result.add( fromParameter( param ) );\n        }\n        return result;\n    }\n\n    public static ParameterBinding fromTypeAndName(Type parameterType, String parameterName) {", "right_context": "}\n\n    /**\n     * @param classTypeOf the type representing {@code Class<X>} for the target type {@code X}\n     * @return a parameter binding representing a target type parameter\n     */\n    public static ParameterBinding forTargetTypeBinding(Type classTypeOf) {\n        return new ParameterBinding( classTypeOf, null, false, true, false, false, false, null );\n    }\n\n    /**\n     * @return a parameter binding representing a target property name parameter\n     */\n    public static ParameterBinding forTargetPropertyNameBinding(Type classTypeOf) {\n        return new ParameterBinding( classTypeOf, null, false, false, false, false, true, null );\n    }\n\n    /**\n     * @return a parameter binding representing a source property name parameter\n     */\n    public static ParameterBinding forSourcePropertyNameBinding(Type classTypeOf) {\n        return new ParameterBinding( classTypeOf, null, false, false, false, true, false, null );\n    }\n\n    /**\n     * @param resultType type of the mapping target\n     * @return a parameter binding representing a mapping target parameter\n     */\n    public static ParameterBinding forMappingTargetBinding(Type resultType) {\n        return new ParameterBinding( resultType, null, true, false, false, false, false, null );\n    }\n\n    /**\n     * @param sourceType type of the parameter\n     * @return a parameter binding representing a mapping source type\n     */\n    public static ParameterBinding forSourceTypeBinding(Type sourceType) {\n        return new ParameterBinding( sourceType, null, false, false, false, false, false, null );\n    }\n\n    public static ParameterBinding fromSourceRHS(SourceRHS sourceRHS) {\n        return new ParameterBinding( sourceRHS.getSourceType(), null, false, false, false, false, false, sourceRHS );\n    }\n}", "class_name": "ParameterBinding", "return_type": "ParameterBinding", "parameters": [{"type": "Type", "name": "parameterType"}, {"type": "String", "name": "parameterName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/SpringComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getDelegatorReferenceAnnotations(Mapper mapper){\n//   return Arrays.asList(autowired(),qualifierDelegate());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/AnnotationBasedComponentModelProcessor.java\n// --------------------------------------------------\n// /** \n//  * @return the annotation(s) to be added at the decorator of the mapper\n//  */\n// protected List<Annotation> getDecoratorAnnotations(){\n//   return Collections.emptyList();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/AnnotationBasedComponentModelProcessor.java\n// --------------------------------------------------\n// /** \n//  * @return the annotation of the field for the mapper reference\n//  */\n// protected abstract List<Annotation> getMapperReferenceAnnotations();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/CdiComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getMapperReferenceAnnotations(){\n//   return Arrays.asList(new Annotation(getType(\"Inject\")));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/JakartaCdiComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getMapperReferenceAnnotations(){\n//   return Arrays.asList(new Annotation(getTypeFactory().getType(\"jakarta.inject.Inject\")));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/JakartaComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getDecoratorAnnotations(){\n//   return Arrays.asList(singleton(),named());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/JakartaComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getMapperReferenceAnnotations(){\n//   return Collections.singletonList(inject());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/SpringComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getDecoratorAnnotations(){\n//   return Arrays.asList(component(),primary());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/SpringComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getMapperReferenceAnnotations(){\n//   return Collections.singletonList(autowired());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/AbstractMappingMethodBuilder.java\n// --------------------------------------------------\n// public List<Annotation> getMethodAnnotations(){\n//   if (method instanceof ForgedMethod) {\n//     return Collections.emptyList();\n//   }\n//   AdditionalAnnotationsBuilder additionalAnnotationsBuilder=new AdditionalAnnotationsBuilder(ctx.getElementUtils(),ctx.getTypeFactory(),ctx.getMessager());\n//   return new ArrayList<>(additionalAnnotationsBuilder.getProcessedAnnotations(method.getExecutable()));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/AnnotatedConstructor.java\n// --------------------------------------------------\n// public List<Annotation> getAnnotations(){\n//   return annotations;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/AnnotationMapperReference.java\n// --------------------------------------------------\n// public List<Annotation> getAnnotations(){\n//   return annotations;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/GeneratedType.java\n// --------------------------------------------------\n// public List<Annotation> getAnnotations(){\n//   return annotations;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/NormalTypeMappingMethod.java\n// --------------------------------------------------\n// public List<Annotation> getAnnotations(){\n//   return annotations;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ValueMappingMethod.java\n// --------------------------------------------------\n// public List<Annotation> getAnnotations(){\n//   return annotations;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/AnnotationBasedComponentModelProcessor.java\n// --------------------------------------------------\n// /** \n//  * @param mapper the mapper\n//  * @return the annotation(s) to be added at the mapper type implementation\n//  */\n// protected abstract List<Annotation> getTypeAnnotations(Mapper mapper);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/CdiComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getTypeAnnotations(Mapper mapper){\n//   return Collections.singletonList(new Annotation(getType(\"ApplicationScoped\")));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/JakartaCdiComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getTypeAnnotations(Mapper mapper){\n//   return Collections.singletonList(new Annotation(getTypeFactory().getType(\"jakarta.enterprise.context.ApplicationScoped\")));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/JakartaComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getTypeAnnotations(Mapper mapper){\n//   if (mapper.getDecorator() == null) {\n//     return Arrays.asList(singleton(),named());\n//   }\n//  else {\n//     return Arrays.asList(singleton(),namedDelegate(mapper));\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/processor/SpringComponentProcessor.java\n// --------------------------------------------------\n// @Override protected List<Annotation> getTypeAnnotations(Mapper mapper){\n//   List<Annotation> typeAnnotations=new ArrayList<>();\n//   if (!isAlreadyAnnotatedAsSpringStereotype(mapper)) {\n//     typeAnnotations.add(component());\n//   }\n//   if (mapper.getDecorator() != null) {\n//     typeAnnotations.add(qualifierDelegate());\n//   }\n//   return typeAnnotations;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Jsr330ComponentProcessor extends AnnotationBasedComponentModelProcessor {\n    @Override\n    protected String getComponentModelIdentifier() {\n        return MappingConstantsGem.ComponentModelGem.JSR330;\n    }\n\n    @Override\n    protected List<Annotation> getTypeAnnotations(Mapper mapper) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    protected List<Annotation> getDecoratorAnnotations() {\n        return Arrays.asList( singleton(), named() );\n    }\n\n    @Override\n    protected List<Annotation> getDelegatorReferenceAnnotations(Mapper mapper) {\n        return Arrays.asList( inject(), namedDelegate( mapper ) );\n    }\n\n    @Override\n    protected List<Annotation> getMapperReferenceAnnotations() {\n        return Collections.singletonList( inject() );\n    }\n\n    @Override\n    protected boolean requiresGenerationOfDecoratorClass() {\n        return true;\n    }\n\n    private Annotation singleton() {\n        return new Annotation( getType( \"Singleton\" ) );\n    }\n\n    private Annotation named() {\n        return new Annotation( getType( \"Named\" ) );\n    }\n\n    private Annotation namedDelegate(Mapper mapper) {\n        return new Annotation(\n            getType( \"Named\" ),\n            Collections.singletonList(\n                new AnnotationElement(\n                    AnnotationElementType.STRING,\n                    Collections.singletonList( mapper.getPackageName() + \".\" + mapper.getName() )\n                ) )\n        );\n    }\n\n    private Annotation inject() {\n        return new Annotation( getType( \"Inject\" ) );\n    }\n\n    private Type getType(String simpleName) {\n        if ( getTypeFactory().isTypeAvailable( \"javax.inject.\" + simpleName ) ) {\n            return getTypeFactory().getType( \"javax.inject.\" + simpleName );\n        }\n\n        if ( getTypeFactory().isTypeAvailable( \"jakarta.inject.\" + simpleName ) ) {\n            return getTypeFactory().getType( \"jakarta.inject.\" + simpleName );\n        }\n\n        throw new AnnotationProcessingException(\n            \"Couldn't find any of the JSR330 or Jakarta Dependency Inject types.\" +\n                \" Are you missing a dependency on your classpath?\" );\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/449", "ground_truth": "\n        if ( mapper.getDecorator() == null ) {\n            return Arrays.asList( singleton(), named() );\n        }\n        else {\n            return Arrays.asList( singleton(), namedDelegate( mapper ) );\n        }\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "processor", "Jsr330ComponentProcessor.java"], "context_start_lineno": 0, "function_name": "getTypeAnnotations", "left_context": "class Jsr330ComponentProcessor extends AnnotationBasedComponentModelProcessor {\n    @Override\n    protected String getComponentModelIdentifier() {\n        return MappingConstantsGem.ComponentModelGem.JSR330;\n    }\n\n    @Override\n    protected List<Annotation> getTypeAnnotations(Mapper mapper) {", "right_context": "}\n\n    @Override\n    protected List<Annotation> getDecoratorAnnotations() {\n        return Arrays.asList( singleton(), named() );\n    }\n\n    @Override\n    protected List<Annotation> getDelegatorReferenceAnnotations(Mapper mapper) {\n        return Arrays.asList( inject(), namedDelegate( mapper ) );\n    }\n\n    @Override\n    protected List<Annotation> getMapperReferenceAnnotations() {\n        return Collections.singletonList( inject() );\n    }\n\n    @Override\n    protected boolean requiresGenerationOfDecoratorClass() {\n        return true;\n    }\n\n    private Annotation singleton() {\n        return new Annotation( getType( \"Singleton\" ) );\n    }\n\n    private Annotation named() {\n        return new Annotation( getType( \"Named\" ) );\n    }\n\n    private Annotation namedDelegate(Mapper mapper) {\n        return new Annotation(\n            getType( \"Named\" ),\n            Collections.singletonList(\n                new AnnotationElement(\n                    AnnotationElementType.STRING,\n                    Collections.singletonList( mapper.getPackageName() + \".\" + mapper.getName() )\n                ) )\n        );\n    }\n\n    private Annotation inject() {\n        return new Annotation( getType( \"Inject\" ) );\n    }\n\n    private Type getType(String simpleName) {\n        if ( getTypeFactory().isTypeAvailable( \"javax.inject.\" + simpleName ) ) {\n            return getTypeFactory().getType( \"javax.inject.\" + simpleName );\n        }\n\n        if ( getTypeFactory().isTypeAvailable( \"jakarta.inject.\" + simpleName ) ) {\n            return getTypeFactory().getType( \"jakarta.inject.\" + simpleName );\n        }\n\n        throw new AnnotationProcessingException(\n            \"Couldn't find any of the JSR330 or Jakarta Dependency Inject types.\" +\n                \" Are you missing a dependency on your classpath?\" );\n    }\n}", "class_name": "Jsr330ComponentProcessor", "return_type": "List<Annotation>", "parameters": [{"type": "Mapper", "name": "mapper"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MapMappingMethod.java\n// --------------------------------------------------\n// public List<Type> getResultElementTypes(){\n//   return getResultType().determineTypeArguments(Map.class);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/common/Type.java\n// --------------------------------------------------\n// /** \n//  * Returns the direct supertypes of a type.  The interface types, if any, will appear last in the list.\n//  * @return the direct supertypes, or an empty list if none\n//  */\n// public List<Type> getDirectSuperTypes(){\n//   return typeUtils.directSupertypes(typeMirror).stream().map(typeFactory::getType).collect(Collectors.toList());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/ForgedMethod.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return thrownTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/HelperMethod.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return Collections.emptyList();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MappingMethod.java\n// --------------------------------------------------\n// public List<Type> getThrownTypes(){\n//   return thrownTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/MethodReference.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   List<Type> exceptions=new ArrayList<>(thrownTypes);\n//   if (assignment != null) {\n//     exceptions.addAll(assignment.getThrownTypes());\n//   }\n//   if (isMethodChaining()) {\n//     for (    MethodReference methodToChain : methodsToChain) {\n//       exceptions.addAll(methodToChain.getThrownTypes());\n//     }\n//   }\n//   return exceptions;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/TypeConversion.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return thrownTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/AdderWrapper.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   List<Type> parentThrownTypes=super.getThrownTypes();\n//   List<Type> result=new ArrayList<>(parentThrownTypes);\n//   for (  Type thrownTypeToExclude : thrownTypesToExclude) {\n//     for (    Type parentExceptionType : parentThrownTypes) {\n//       if (parentExceptionType.isAssignableTo(thrownTypeToExclude)) {\n//         result.remove(parentExceptionType);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/AssignmentWrapper.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return decoratedAssignment.getThrownTypes();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/LocalVarWrapper.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   List<Type> parentThrownTypes=super.getThrownTypes();\n//   List<Type> result=new ArrayList<>(parentThrownTypes);\n//   for (  Type thrownTypeToExclude : thrownTypesToExclude) {\n//     for (    Type parentThrownType : parentThrownTypes) {\n//       if (parentThrownType.isAssignableTo(thrownTypeToExclude)) {\n//         result.remove(parentThrownType);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/SetterWrapper.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   List<Type> parentThrownTypes=super.getThrownTypes();\n//   List<Type> result=new ArrayList<>(parentThrownTypes);\n//   for (  Type thrownTypeToExclude : thrownTypesToExclude) {\n//     for (    Type parentThrownType : parentThrownTypes) {\n//       if (parentThrownType.isAssignableTo(thrownTypeToExclude)) {\n//         result.remove(parentThrownType);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/StreamAdderWrapper.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   List<Type> parentThrownTypes=super.getThrownTypes();\n//   List<Type> result=new ArrayList<>(parentThrownTypes);\n//   for (  Type thrownTypeToExclude : thrownTypesToExclude) {\n//     for (    Type parentExceptionType : parentThrownTypes) {\n//       if (parentExceptionType.isAssignableTo(thrownTypeToExclude)) {\n//         result.remove(parentExceptionType);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/assignment/UpdateWrapper.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   List<Type> parentThrownTypes=super.getThrownTypes();\n//   List<Type> result=new ArrayList<>(parentThrownTypes);\n//   for (  Type thrownTypeToExclude : thrownTypesToExclude) {\n//     for (    Type parentThrownType : parentThrownTypes) {\n//       if (parentThrownType.isAssignableTo(thrownTypeToExclude)) {\n//         result.remove(parentThrownType);\n//       }\n//     }\n//   }\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/common/Assignment.java\n// --------------------------------------------------\n// /** \n//  * returns all types exception types thrown by this assignment.\n//  * @return exceptions thrown\n//  */\n// List<Type> getThrownTypes();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/common/SourceRHS.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return Collections.emptyList();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/common/TypeFactory.java\n// --------------------------------------------------\n// public List<Type> getThrownTypes(ExecutableType method){\n//   return extractTypes(method.getThrownTypes());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/common/TypeFactory.java\n// --------------------------------------------------\n// public List<Type> getThrownTypes(Accessor accessor){\n//   if (accessor.getAccessorType().isFieldAssignment()) {\n//     return new ArrayList<>();\n//   }\n//   return extractTypes(((ExecutableElement)accessor.getElement()).getThrownTypes());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/Method.java\n// --------------------------------------------------\n// /** \n//  * Returns all exceptions thrown by this method\n//  * @return exceptions thrown\n//  */\n// List<Type> getThrownTypes();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/SourceMethod.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return exceptionTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/BuiltInMethod.java\n// --------------------------------------------------\n// @Override public List<Type> getThrownTypes(){\n//   return Collections.emptyList();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WrapperForCollectionsAndMaps extends AssignmentWrapper {\n\n    private final List<Type> thrownTypesToExclude;\n    private final String nullCheckLocalVarName;\n    private final Type nullCheckLocalVarType;\n\n    public WrapperForCollectionsAndMaps(Assignment rhs,\n                                        List<Type> thrownTypesToExclude,\n                                        Type targetType,\n                                        boolean fieldAssignment) {\n\n        super( rhs, fieldAssignment );\n\n        this.thrownTypesToExclude = thrownTypesToExclude;\n        if ( rhs.getType() == AssignmentType.DIRECT && rhs.getSourceType() != null ) {\n            this.nullCheckLocalVarType = rhs.getSourceType();\n        }\n        else {\n            this.nullCheckLocalVarType = targetType;\n        }\n        this.nullCheckLocalVarName =  rhs.createUniqueVarName( nullCheckLocalVarType.getName() );\n    }\n\n    @Override\n    public List<Type> getThrownTypes() {<FILL_FUNCTION_BODY>}\n\n    public String getNullCheckLocalVarName() {\n        return nullCheckLocalVarName;\n    }\n\n    public Type getNullCheckLocalVarType() {\n        return nullCheckLocalVarType;\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/459", "ground_truth": "\n        List<Type> parentThrownTypes = super.getThrownTypes();\n        List<Type> result = new ArrayList<>( parentThrownTypes );\n        for ( Type thrownTypeToExclude : thrownTypesToExclude ) {\n            for ( Type parentThrownType : parentThrownTypes ) {\n                if ( parentThrownType.isAssignableTo( thrownTypeToExclude ) ) {\n                    result.remove( parentThrownType );\n                }\n            }\n        }\n        return result;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "assignment", "WrapperForCollectionsAndMaps.java"], "context_start_lineno": 0, "function_name": "getThrownTypes", "left_context": "class WrapperForCollectionsAndMaps extends AssignmentWrapper {\n\n    private final List<Type> thrownTypesToExclude;\n    private final String nullCheckLocalVarName;\n    private final Type nullCheckLocalVarType;\n\n    public WrapperForCollectionsAndMaps(Assignment rhs,\n                                        List<Type> thrownTypesToExclude,\n                                        Type targetType,\n                                        boolean fieldAssignment) {\n\n        super( rhs, fieldAssignment );\n\n        this.thrownTypesToExclude = thrownTypesToExclude;\n        if ( rhs.getType() == AssignmentType.DIRECT && rhs.getSourceType() != null ) {\n            this.nullCheckLocalVarType = rhs.getSourceType();\n        }\n        else {\n            this.nullCheckLocalVarType = targetType;\n        }\n        this.nullCheckLocalVarName =  rhs.createUniqueVarName( nullCheckLocalVarType.getName() );\n    }\n\n    @Override\n    public List<Type> getThrownTypes() {", "right_context": "}\n\n    public String getNullCheckLocalVarName() {\n        return nullCheckLocalVarName;\n    }\n\n    public Type getNullCheckLocalVarType() {\n        return nullCheckLocalVarType;\n    }\n}", "class_name": "WrapperForCollectionsAndMaps", "return_type": "List<Type>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/CalendarToZonedDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importedTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/DateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(this.importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JaxbElemToValue.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.add(parameter.getType());\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/JodaLocalDateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/LocalDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/LocalDateToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/StringToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToJodaLocalTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToLocalDate.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToLocalDateTime.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/XmlGregorianCalendarToString.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/ZonedDateTimeToCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   return importedTypes;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mapstruct/processor/src/main/java/org/mapstruct/ap/internal/model/source/builtin/ZonedDateTimeToXmlGregorianCalendar.java\n// --------------------------------------------------\n// @Override public Set<Type> getImportTypes(){\n//   Set<Type> result=super.getImportTypes();\n//   result.addAll(importTypes);\n//   return result;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JodaLocalTimeToXmlGregorianCalendar extends AbstractToXmlGregorianCalendar {\n\n    private final Parameter parameter;\n    private final Set<Type> importTypes;\n\n    public JodaLocalTimeToXmlGregorianCalendar(TypeFactory typeFactory) {\n        super( typeFactory );\n        this.parameter = new Parameter( \"dt\", typeFactory.getType( JodaTimeConstants.LOCAL_TIME_FQN ) );\n        this.importTypes = asSet(\n            parameter.getType(),\n            typeFactory.getType( XmlConstants.JAVAX_XML_DATATYPE_CONSTANTS )\n        );\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public Parameter getParameter() {\n        return parameter;\n    }\n\n}", "metadata": {"task_id": "mapstruct_mapstruct/480", "ground_truth": "\n        Set<Type> result = super.getImportTypes();\n        result.addAll( importTypes );\n        return result;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "model", "source", "builtin", "JodaLocalTimeToXmlGregorianCalendar.java"], "context_start_lineno": 0, "function_name": "getImportTypes", "left_context": "class JodaLocalTimeToXmlGregorianCalendar extends AbstractToXmlGregorianCalendar {\n\n    private final Parameter parameter;\n    private final Set<Type> importTypes;\n\n    public JodaLocalTimeToXmlGregorianCalendar(TypeFactory typeFactory) {\n        super( typeFactory );\n        this.parameter = new Parameter( \"dt\", typeFactory.getType( JodaTimeConstants.LOCAL_TIME_FQN ) );\n        this.importTypes = asSet(\n            parameter.getType(),\n            typeFactory.getType( XmlConstants.JAVAX_XML_DATATYPE_CONSTANTS )\n        );\n    }\n\n    @Override\n    public Set<Type> getImportTypes() {", "right_context": "}\n\n    @Override\n    public Parameter getParameter() {\n        return parameter;\n    }\n\n}", "class_name": "JodaLocalTimeToXmlGregorianCalendar", "return_type": "Set<Type>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Nouns {\n\n    private Nouns() {\n    }\n\n    private static final List<ReplaceRule> SINGULAR_RULES = Arrays.asList(\n        new ReplaceRule( \"(equipment|information|rice|money|species|series|fish|sheep)$\", \"$1\" ),\n        new ReplaceRule( \"(f)eet$\", \"$1oot\" ),\n        new ReplaceRule( \"(t)eeth$\", \"$1ooth\" ),\n        new ReplaceRule( \"(g)eese$\", \"$1oose\" ),\n        new ReplaceRule( \"(s)tadiums$\", \"$1tadium\" ),\n        new ReplaceRule( \"(m)oves$\", \"$1ove\" ),\n        new ReplaceRule( \"(s)exes$\", \"$1ex\" ),\n        new ReplaceRule( \"(c)hildren$\", \"$1hild\" ),\n        new ReplaceRule( \"(m)en$\", \"$1an\" ),\n        new ReplaceRule( \"(p)eople$\", \"$1erson\" ),\n        new ReplaceRule( \"(quiz)zes$\", \"$1\" ),\n        new ReplaceRule( \"(matr)ices$\", \"$1ix\" ),\n        new ReplaceRule( \"(vert|ind)ices$\", \"$1ex\" ),\n        new ReplaceRule( \"^(ox)en\", \"$1\" ),\n        new ReplaceRule( \"(alias|status)$\", \"$1\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(alias|status)es$\", \"$1\" ),\n        new ReplaceRule( \"(octop|vir)us$\", \"$1us\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(octop|vir)i$\", \"$1us\" ),\n        new ReplaceRule( \"(cris|ax|test)es$\", \"$1is\" ),\n        new ReplaceRule( \"(cris|ax|test)is$\", \"$1is\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(shoe)s$\", \"$1\" ),\n        new ReplaceRule( \"(o)es$\", \"$1\" ),\n        new ReplaceRule( \"(bus)es$\", \"$1\" ),\n        new ReplaceRule( \"([m|l])ice$\", \"$1ouse\" ),\n        new ReplaceRule( \"(x|ch|ss|sh)es$\", \"$1\" ),\n        new ReplaceRule( \"(m)ovies$\", \"$1ovie\" ),\n        new ReplaceRule( \"(s)eries$\", \"$1eries\" ),\n        new ReplaceRule( \"([^aeiouy]|qu)ies$\", \"$1y\" ),\n        new ReplaceRule( \"([lr])ves$\", \"$1f\" ),\n        new ReplaceRule( \"(tive)s$\", \"$1\" ),\n        new ReplaceRule( \"(hive)s$\", \"$1\" ),\n        new ReplaceRule( \"([^f])ves$\", \"$1fe\" ),\n        new ReplaceRule( \"(^analy)sis$\", \"$1sis\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(^analy)ses$\", \"$1sis\" ),\n        new ReplaceRule( \"((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$\", \"$1$2sis\" ),\n        new ReplaceRule( \"([ti])a$\", \"$1um\" ),\n        new ReplaceRule( \"(n)ews$\", \"$1ews\" ),\n        new ReplaceRule( \"(s|si|u)s$\", \"$1s\" ), // '-us' and '-ss' are already singular\n        new ReplaceRule( \"s$\", \"\" )\n    );\n\n    /**\n     * Replacement rules based on the routine applied by the <a href=\"http://www.eclipse.org/webtools/dali/\">Dali</a>\n     * project. Applied as a fallback if the other rules didn't yield a match.\n     */\n    private static final List<ReplaceRule> SINGULAR_DALI_RULES = Arrays.asList(\n        new ReplaceRule( \"(us|ss)$\", \"$1\" ),\n        new ReplaceRule( \"(ch|s)es$\", \"$1\" ),\n        new ReplaceRule( \"([^aeiouy])ies$\", \"$1y\" )\n    );\n\n    /**\n     * Converts given pluralized noun into the singular form. If no singular form could be determined, the given word\n     * itself is returned.\n     *\n     * @param plural plural word\n     * @return singular form, if available\n     */\n    public static String singularize(String plural) {<FILL_FUNCTION_BODY>}\n\n    private static final class ReplaceRule {\n\n        private final String regexp;\n        private final String replacement;\n        private final Pattern pattern;\n\n        private ReplaceRule(String regexp, String replacement) {\n            this.regexp = regexp;\n            this.replacement = replacement;\n            this.pattern = Pattern.compile( this.regexp, Pattern.CASE_INSENSITIVE );\n        }\n\n        private String apply(String input) {\n            String result = null;\n            Matcher matcher = this.pattern.matcher( input );\n            if ( matcher.find() ) {\n                result = matcher.replaceAll( this.replacement );\n            }\n            return result;\n        }\n\n        @Override\n        public String toString() {\n            return \"'\" + regexp + \"' -> '\" + replacement;\n        }\n    }\n}", "metadata": {"task_id": "mapstruct_mapstruct/483", "ground_truth": "\n        for ( ReplaceRule replaceRule : SINGULAR_RULES ) {\n            String match = replaceRule.apply( plural );\n            if ( match != null ) {\n                return match;\n            }\n        }\n\n        for ( ReplaceRule replaceRule : SINGULAR_DALI_RULES ) {\n            String match = replaceRule.apply( plural );\n            if ( match != null ) {\n                return match;\n            }\n        }\n\n        return plural;\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "internal", "util", "Nouns.java"], "context_start_lineno": 0, "function_name": "singularize", "left_context": "class Nouns {\n\n    private Nouns() {\n    }\n\n    private static final List<ReplaceRule> SINGULAR_RULES = Arrays.asList(\n        new ReplaceRule( \"(equipment|information|rice|money|species|series|fish|sheep)$\", \"$1\" ),\n        new ReplaceRule( \"(f)eet$\", \"$1oot\" ),\n        new ReplaceRule( \"(t)eeth$\", \"$1ooth\" ),\n        new ReplaceRule( \"(g)eese$\", \"$1oose\" ),\n        new ReplaceRule( \"(s)tadiums$\", \"$1tadium\" ),\n        new ReplaceRule( \"(m)oves$\", \"$1ove\" ),\n        new ReplaceRule( \"(s)exes$\", \"$1ex\" ),\n        new ReplaceRule( \"(c)hildren$\", \"$1hild\" ),\n        new ReplaceRule( \"(m)en$\", \"$1an\" ),\n        new ReplaceRule( \"(p)eople$\", \"$1erson\" ),\n        new ReplaceRule( \"(quiz)zes$\", \"$1\" ),\n        new ReplaceRule( \"(matr)ices$\", \"$1ix\" ),\n        new ReplaceRule( \"(vert|ind)ices$\", \"$1ex\" ),\n        new ReplaceRule( \"^(ox)en\", \"$1\" ),\n        new ReplaceRule( \"(alias|status)$\", \"$1\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(alias|status)es$\", \"$1\" ),\n        new ReplaceRule( \"(octop|vir)us$\", \"$1us\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(octop|vir)i$\", \"$1us\" ),\n        new ReplaceRule( \"(cris|ax|test)es$\", \"$1is\" ),\n        new ReplaceRule( \"(cris|ax|test)is$\", \"$1is\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(shoe)s$\", \"$1\" ),\n        new ReplaceRule( \"(o)es$\", \"$1\" ),\n        new ReplaceRule( \"(bus)es$\", \"$1\" ),\n        new ReplaceRule( \"([m|l])ice$\", \"$1ouse\" ),\n        new ReplaceRule( \"(x|ch|ss|sh)es$\", \"$1\" ),\n        new ReplaceRule( \"(m)ovies$\", \"$1ovie\" ),\n        new ReplaceRule( \"(s)eries$\", \"$1eries\" ),\n        new ReplaceRule( \"([^aeiouy]|qu)ies$\", \"$1y\" ),\n        new ReplaceRule( \"([lr])ves$\", \"$1f\" ),\n        new ReplaceRule( \"(tive)s$\", \"$1\" ),\n        new ReplaceRule( \"(hive)s$\", \"$1\" ),\n        new ReplaceRule( \"([^f])ves$\", \"$1fe\" ),\n        new ReplaceRule( \"(^analy)sis$\", \"$1sis\" ), // already singular, but ends in 's'\n        new ReplaceRule( \"(^analy)ses$\", \"$1sis\" ),\n        new ReplaceRule( \"((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$\", \"$1$2sis\" ),\n        new ReplaceRule( \"([ti])a$\", \"$1um\" ),\n        new ReplaceRule( \"(n)ews$\", \"$1ews\" ),\n        new ReplaceRule( \"(s|si|u)s$\", \"$1s\" ), // '-us' and '-ss' are already singular\n        new ReplaceRule( \"s$\", \"\" )\n    );\n\n    /**\n     * Replacement rules based on the routine applied by the <a href=\"http://www.eclipse.org/webtools/dali/\">Dali</a>\n     * project. Applied as a fallback if the other rules didn't yield a match.\n     */\n    private static final List<ReplaceRule> SINGULAR_DALI_RULES = Arrays.asList(\n        new ReplaceRule( \"(us|ss)$\", \"$1\" ),\n        new ReplaceRule( \"(ch|s)es$\", \"$1\" ),\n        new ReplaceRule( \"([^aeiouy])ies$\", \"$1y\" )\n    );\n\n    /**\n     * Converts given pluralized noun into the singular form. If no singular form could be determined, the given word\n     * itself is returned.\n     *\n     * @param plural plural word\n     * @return singular form, if available\n     */\n    public static String singularize(String plural) {", "right_context": "}\n\n    private static final class ReplaceRule {\n\n        private final String regexp;\n        private final String replacement;\n        private final Pattern pattern;\n\n        private ReplaceRule(String regexp, String replacement) {\n            this.regexp = regexp;\n            this.replacement = replacement;\n            this.pattern = Pattern.compile( this.regexp, Pattern.CASE_INSENSITIVE );\n        }\n\n        private String apply(String input) {\n            String result = null;\n            Matcher matcher = this.pattern.matcher( input );\n            if ( matcher.find() ) {\n                result = matcher.replaceAll( this.replacement );\n            }\n            return result;\n        }\n\n        @Override\n        public String toString() {\n            return \"'\" + regexp + \"' -> '\" + replacement;\n        }\n    }\n}", "class_name": "Nouns", "return_type": "String", "parameters": [{"type": "String", "name": "plural"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ImmutablesAccessorNamingStrategy extends DefaultAccessorNamingStrategy {\n\n    @Override\n    protected boolean isFluentSetter(ExecutableElement method) {<FILL_FUNCTION_BODY>}\n\n    private boolean isPutterWithUpperCase4thCharacter(ExecutableElement method) {\n        return isPutterMethod( method ) && Character.isUpperCase( method.getSimpleName().toString().charAt( 3 ) );\n    }\n\n    public boolean isPutterMethod(ExecutableElement method) {\n        String methodName = method.getSimpleName().toString();\n        return methodName.startsWith( \"put\" ) && methodName.length() > 3;\n    }\n\n}", "metadata": {"task_id": "mapstruct_mapstruct/498", "ground_truth": "\n        return super.isFluentSetter( method ) &&\n            !method.getSimpleName().toString().equals( \"from\" ) &&\n            !isPutterWithUpperCase4thCharacter( method );\n    ", "fpath_tuple": ["mapstruct_mapstruct", "mapstruct", "processor", "src", "main", "java", "org", "mapstruct", "ap", "spi", "ImmutablesAccessorNamingStrategy.java"], "context_start_lineno": 0, "function_name": "isFluentSetter", "left_context": "class ImmutablesAccessorNamingStrategy extends DefaultAccessorNamingStrategy {\n\n    @Override\n    protected boolean isFluentSetter(ExecutableElement method) {", "right_context": "}\n\n    private boolean isPutterWithUpperCase4thCharacter(ExecutableElement method) {\n        return isPutterMethod( method ) && Character.isUpperCase( method.getSimpleName().toString().charAt( 3 ) );\n    }\n\n    public boolean isPutterMethod(ExecutableElement method) {\n        String methodName = method.getSimpleName().toString();\n        return methodName.startsWith( \"put\" ) && methodName.length() > 3;\n    }\n\n}", "class_name": "ImmutablesAccessorNamingStrategy", "return_type": "boolean", "parameters": [{"type": "ExecutableElement", "name": "method"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ArrayRule.java\n// --------------------------------------------------\n// /** \n//  * <p>Applies this schema rule to take the required code generation steps.</p> <p>When constructs of type \"array\" appear in the schema, these are mapped to Java collections in the generated POJO. If the array is marked as having \"uniqueItems\" then the resulting Java type is  {@link Set}, if not, then the resulting Java type is  {@link List}. The schema given by \"items\" will decide the generic type of the collection.</p> <p>If the \"items\" property requires newly generated types, then the type name will be the singular version of the nodeName (unless overridden by the javaType property) e.g. <pre> \"fooBars\" : {\"type\":\"array\", \"uniqueItems\":\"true\", \"items\":{type:\"object\"}} ==&gt; {@code Set<FooBar> getFooBars(); }</pre>\n//  * @param nodeName the name of the property which has type \"array\"\n//  * @param node the schema \"type\" node\n//  * @param parent the parent node\n//  * @param jpackage the package into which newly generated types should be added\n//  * @return the Java type associated with this array rule, either {@link Set}or  {@link List}, narrowed by the \"items\" type\n//  */\n// @Override public JClass apply(String nodeName,JsonNode node,JsonNode parent,JPackage jpackage,Schema schema){\n//   boolean uniqueItems=node.has(\"uniqueItems\") && node.get(\"uniqueItems\").asBoolean();\n//   boolean rootSchemaIsArray=!schema.isGenerated();\n//   JType itemType;\n//   if (node.has(\"items\")) {\n//     String pathToItems;\n//     if (schema.getId() == null || schema.getId().getFragment() == null) {\n//       pathToItems=\"#/items\";\n//     }\n//  else {\n//       pathToItems=\"#\" + schema.getId().getFragment() + \"/items\";\n//     }\n//     Schema itemsSchema=ruleFactory.getSchemaStore().create(schema,pathToItems,ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());\n//     if (itemsSchema.isGenerated()) {\n//       itemType=itemsSchema.getJavaType();\n//     }\n//  else {\n//       itemType=ruleFactory.getSchemaRule().apply(makeSingular(nodeName),node.get(\"items\"),node,jpackage,itemsSchema);\n//       itemsSchema.setJavaTypeIfEmpty(itemType);\n//     }\n//   }\n//  else {\n//     itemType=jpackage.owner().ref(Object.class);\n//   }\n//   JClass arrayType;\n//   if (uniqueItems) {\n//     arrayType=jpackage.owner().ref(Set.class).narrow(itemType);\n//   }\n//  else {\n//     arrayType=jpackage.owner().ref(List.class).narrow(itemType);\n//   }\n//   if (rootSchemaIsArray) {\n//     schema.setJavaType(arrayType);\n//   }\n//   return arrayType;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TypeUtil {\n\n    public static JClass resolveType(JClassContainer _package, String typeDefinition) {\n\n        try {\n            FieldDeclaration fieldDeclaration = (FieldDeclaration) JavaParser.parseBodyDeclaration(typeDefinition + \" foo;\");\n            ClassOrInterfaceType c = (ClassOrInterfaceType) ((ReferenceType) fieldDeclaration.getType()).getType();\n\n            return buildClass(_package, c, 0);\n        } catch (ParseException e) {\n            throw new GenerationException(\"Couldn't parse type: \" + typeDefinition, e);\n        }\n    }\n\n    private static JClass buildClass(JClassContainer _package, ClassOrInterfaceType c, int arrayCount) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/15", "ground_truth": "\n        final String packagePrefix = (c.getScope() != null) ? c.getScope().toString() + \".\" : \"\";\n\n        JClass _class = _package.owner().ref(packagePrefix + c.getName());\n\n        for (int i = 0; i < arrayCount; i++) {\n            _class = _class.array();\n        }\n\n        List<Type> typeArgs = c.getTypeArgs();\n        if (typeArgs != null && typeArgs.size() > 0) {\n            JClass[] genericArgumentClasses = new JClass[typeArgs.size()];\n\n            for (int i = 0; i < typeArgs.size(); i++) {\n                final Type type = typeArgs.get(i);\n\n                final JClass resolvedClass;\n                if (type instanceof WildcardType) {\n                    final WildcardType wildcardType = (WildcardType) type;\n                    if (wildcardType.getSuper() != null) {\n                        throw new IllegalArgumentException(\"\\\"? super \\\" declaration is not yet supported\");\n                    } else if (wildcardType.getExtends() != null) {\n                        resolvedClass = buildClass(_package, (ClassOrInterfaceType) wildcardType.getExtends().getType(), 0).wildcard();\n                    } else {\n                        resolvedClass = _package.owner().ref(Object.class).wildcard();\n                    }\n                } else {\n                    final ReferenceType referenceType = (ReferenceType) type;\n                    resolvedClass = buildClass(_package, (ClassOrInterfaceType) referenceType.getType(), referenceType.getArrayCount());\n                }\n\n                genericArgumentClasses[i] = resolvedClass;\n            }\n\n            _class = _class.narrow(genericArgumentClasses);\n        }\n\n        return _class;\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "util", "TypeUtil.java"], "context_start_lineno": 0, "function_name": "buildClass", "left_context": "class TypeUtil {\n\n    public static JClass resolveType(JClassContainer _package, String typeDefinition) {\n\n        try {\n            FieldDeclaration fieldDeclaration = (FieldDeclaration) JavaParser.parseBodyDeclaration(typeDefinition + \" foo;\");\n            ClassOrInterfaceType c = (ClassOrInterfaceType) ((ReferenceType) fieldDeclaration.getType()).getType();\n\n            return buildClass(_package, c, 0);\n        } catch (ParseException e) {\n            throw new GenerationException(\"Couldn't parse type: \" + typeDefinition, e);\n        }\n    }\n\n    private static JClass buildClass(JClassContainer _package, ClassOrInterfaceType c, int arrayCount) {", "right_context": "}\n\n}", "class_name": "TypeUtil", "return_type": "JClass", "parameters": [{"type": "JClassContainer", "name": "_package"}, {"type": "ClassOrInterfaceType", "name": "c"}, {"type": "int", "name": "arrayCount"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MinimumMaximumRule implements Rule<JFieldVar, JFieldVar> {\n\n    private final RuleFactory ruleFactory;\n\n    protected MinimumMaximumRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JFieldVar apply(String nodeName, JsonNode node, JsonNode parent, JFieldVar field, Schema currentSchema) {\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations() && isApplicableType(field)) {\n\n            if (node.has(\"minimum\")) {\n                final Class<? extends Annotation> decimalMinClass\n                        = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                        ? DecimalMin.class\n                        : javax.validation.constraints.DecimalMin.class;\n                JAnnotationUse annotation = field.annotate(decimalMinClass);\n                annotation.param(\"value\", node.get(\"minimum\").asText());\n            }\n\n            if (node.has(\"maximum\")) {\n                final Class<? extends Annotation> decimalMaxClass\n                        = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                        ? DecimalMax.class\n                        : javax.validation.constraints.DecimalMax.class;\n                JAnnotationUse annotation = field.annotate(decimalMaxClass);\n                annotation.param(\"value\", node.get(\"maximum\").asText());\n            }\n\n        }\n\n        return field;\n    }\n\n    private boolean isApplicableType(JFieldVar field) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/18", "ground_truth": "\n        try {\n            Class<?> fieldClass = Class.forName(field.type().boxify().fullName());\n            // Support Strings and most number types except Double and Float, per docs on DecimalMax/Min annotations\n            return String.class.isAssignableFrom(fieldClass) ||\n                    (Number.class.isAssignableFrom(fieldClass) &&\n                            !Float.class.isAssignableFrom(fieldClass) && !Double.class.isAssignableFrom(fieldClass));\n        } catch (ClassNotFoundException ignore) {\n            return false;\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "MinimumMaximumRule.java"], "context_start_lineno": 0, "function_name": "isApplicableType", "left_context": "class MinimumMaximumRule implements Rule<JFieldVar, JFieldVar> {\n\n    private final RuleFactory ruleFactory;\n\n    protected MinimumMaximumRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JFieldVar apply(String nodeName, JsonNode node, JsonNode parent, JFieldVar field, Schema currentSchema) {\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations() && isApplicableType(field)) {\n\n            if (node.has(\"minimum\")) {\n                final Class<? extends Annotation> decimalMinClass\n                        = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                        ? DecimalMin.class\n                        : javax.validation.constraints.DecimalMin.class;\n                JAnnotationUse annotation = field.annotate(decimalMinClass);\n                annotation.param(\"value\", node.get(\"minimum\").asText());\n            }\n\n            if (node.has(\"maximum\")) {\n                final Class<? extends Annotation> decimalMaxClass\n                        = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                        ? DecimalMax.class\n                        : javax.validation.constraints.DecimalMax.class;\n                JAnnotationUse annotation = field.annotate(decimalMaxClass);\n                annotation.param(\"value\", node.get(\"maximum\").asText());\n            }\n\n        }\n\n        return field;\n    }\n\n    private boolean isApplicableType(JFieldVar field) {", "right_context": "}\n\n}", "class_name": "MinimumMaximumRule", "return_type": "boolean", "parameters": [{"type": "JFieldVar", "name": "field"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PatternRule implements Rule<JFieldVar, JFieldVar> {\n\n    private RuleFactory ruleFactory;\n\n    public PatternRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JFieldVar apply(String nodeName, JsonNode node, JsonNode parent, JFieldVar field, Schema currentSchema) {\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations() && isApplicableType(field)) {\n            final Class<? extends Annotation> patternClass\n                    = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                    ? Pattern.class\n                    : javax.validation.constraints.Pattern.class;\n            JAnnotationUse annotation = field.annotate(patternClass);\n            annotation.param(\"regexp\", node.asText());\n        }\n\n        return field;\n    }\n\n    private boolean isApplicableType(JFieldVar field) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/21", "ground_truth": "\n        try {\n            Class<?> fieldClass = Class.forName(field.type().boxify().fullName());\n            return String.class.isAssignableFrom(fieldClass);\n        } catch (ClassNotFoundException ignore) {\n            return false;\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "PatternRule.java"], "context_start_lineno": 0, "function_name": "isApplicableType", "left_context": "class PatternRule implements Rule<JFieldVar, JFieldVar> {\n\n    private RuleFactory ruleFactory;\n\n    public PatternRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JFieldVar apply(String nodeName, JsonNode node, JsonNode parent, JFieldVar field, Schema currentSchema) {\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations() && isApplicableType(field)) {\n            final Class<? extends Annotation> patternClass\n                    = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                    ? Pattern.class\n                    : javax.validation.constraints.Pattern.class;\n            JAnnotationUse annotation = field.annotate(patternClass);\n            annotation.param(\"regexp\", node.asText());\n        }\n\n        return field;\n    }\n\n    private boolean isApplicableType(JFieldVar field) {", "right_context": "}\n\n}", "class_name": "PatternRule", "return_type": "boolean", "parameters": [{"type": "JFieldVar", "name": "field"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CommandLineLogger extends AbstractRuleLogger {\n\n  public static final String DEFAULT_LOG_LEVEL = LogLevel.INFO.value();\n\n  private final int logLevel;\n\n  public CommandLineLogger(String logLevel) {\n    this.logLevel = LogLevel.fromValue(logLevel).levelInt();\n  }\n\n  @Override\n  public boolean isDebugEnabled() {\n    return logLevel >= LogLevel.DEBUG.levelInt();\n  }\n\n  @Override\n  public boolean isErrorEnabled() {\n    return logLevel >= LogLevel.ERROR.levelInt();\n  }\n\n  @Override\n  public boolean isInfoEnabled() {\n    return logLevel >= LogLevel.INFO.levelInt();\n  }\n\n  @Override\n  public boolean isTraceEnabled() {\n    return logLevel >= LogLevel.TRACE.levelInt();\n  }\n\n  @Override\n  public boolean isWarnEnabled() {\n    return logLevel >= LogLevel.WARN.levelInt();\n  }\n\n  public void printLogLevels() {<FILL_FUNCTION_BODY>}\n\n  @Override\n  protected void doDebug(String msg) {\n    System.out.println(msg);\n  }\n\n  @Override\n  protected void doError(String msg, Throwable e) {\n    System.err.println(msg);\n    if(e != null) {\n      e.printStackTrace(System.err);\n    }\n  }\n\n  @Override\n  protected void doInfo(String msg) {\n    System.out.print(msg);\n  }\n\n  @Override\n  protected void doTrace(String msg) {\n    System.out.print(msg);\n  }\n\n  @Override\n  protected void doWarn(String msg, Throwable e) {\n    System.err.println(msg);\n    if(e != null) {\n      e.printStackTrace(System.err);\n    }\n  }\n\n  public enum LogLevel {\n    OFF(\"off\", -2),\n    ERROR(\"error\", -1),\n    WARN(\"warn\", 0),\n    INFO(\"info\", 1),\n    DEBUG(\"debug\", 2),\n    TRACE(\"trace\", 3);\n\n    private final static Map<String, LogLevel> LEVEL_NAMES = new LinkedHashMap<>();\n    private final String levelName;\n    private final int levelInt;\n\n    LogLevel(String value, int levelInt) {\n      this.levelName = value;\n      this.levelInt = levelInt;\n    }\n\n    @JsonCreator\n    public static LogLevel fromValue(String value) {\n      LogLevel constant = LEVEL_NAMES.get(value);\n      if (constant == null) {\n        throw new IllegalArgumentException(value);\n      } else {\n        return constant;\n      }\n    }\n\n    public static Set<String> getLevelNames() {\n      return LEVEL_NAMES.keySet();\n    }\n\n    public int levelInt() {\n      return levelInt;\n    }\n\n    @Override\n    public String toString() {\n      return this.levelName;\n    }\n\n    @JsonValue\n    public String value() {\n      return this.levelName;\n    }\n\n    static {\n      for (LogLevel c : values()) {\n        LEVEL_NAMES.put(c.levelName, c);\n      }\n    }\n  }\n\n  public static class LogLevelValidator implements IParameterValidator2 {\n\n    @Override\n    public void validate(String name, String value, ParameterDescription pd) throws ParameterException {\n\n      Collection<String> availableLogLevels = LogLevel.getLevelNames();\n\n      if (!availableLogLevels.contains(value)) {\n        String availableLevelJoined = availableLogLevels.stream().collect(Collectors.joining(\", \", \"[\", \"]\"));\n        throw new ParameterException(\"The parameter \" + name + \" must be one of \" + availableLevelJoined);\n      }\n    }\n\n    @Override\n    public void validate(String name, String value) throws ParameterException {\n      validate(name, value, null);\n    }\n  }\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/59", "ground_truth": "\n    Set<String> levelNames = LogLevel.getLevelNames();\n    String levelNamesJoined = levelNames.stream().collect(Collectors.joining(\", \"));\n    System.out.println(\"Available Log Levels: \" + levelNamesJoined);\n  ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-cli", "src", "main", "java", "org", "jsonschema2pojo", "cli", "CommandLineLogger.java"], "context_start_lineno": 0, "function_name": "printLogLevels", "left_context": "class CommandLineLogger extends AbstractRuleLogger {\n\n  public static final String DEFAULT_LOG_LEVEL = LogLevel.INFO.value();\n\n  private final int logLevel;\n\n  public CommandLineLogger(String logLevel) {\n    this.logLevel = LogLevel.fromValue(logLevel).levelInt();\n  }\n\n  @Override\n  public boolean isDebugEnabled() {\n    return logLevel >= LogLevel.DEBUG.levelInt();\n  }\n\n  @Override\n  public boolean isErrorEnabled() {\n    return logLevel >= LogLevel.ERROR.levelInt();\n  }\n\n  @Override\n  public boolean isInfoEnabled() {\n    return logLevel >= LogLevel.INFO.levelInt();\n  }\n\n  @Override\n  public boolean isTraceEnabled() {\n    return logLevel >= LogLevel.TRACE.levelInt();\n  }\n\n  @Override\n  public boolean isWarnEnabled() {\n    return logLevel >= LogLevel.WARN.levelInt();\n  }\n\n  public void printLogLevels() {", "right_context": "}\n\n  @Override\n  protected void doDebug(String msg) {\n    System.out.println(msg);\n  }\n\n  @Override\n  protected void doError(String msg, Throwable e) {\n    System.err.println(msg);\n    if(e != null) {\n      e.printStackTrace(System.err);\n    }\n  }\n\n  @Override\n  protected void doInfo(String msg) {\n    System.out.print(msg);\n  }\n\n  @Override\n  protected void doTrace(String msg) {\n    System.out.print(msg);\n  }\n\n  @Override\n  protected void doWarn(String msg, Throwable e) {\n    System.err.println(msg);\n    if(e != null) {\n      e.printStackTrace(System.err);\n    }\n  }\n\n  public enum LogLevel {\n    OFF(\"off\", -2),\n    ERROR(\"error\", -1),\n    WARN(\"warn\", 0),\n    INFO(\"info\", 1),\n    DEBUG(\"debug\", 2),\n    TRACE(\"trace\", 3);\n\n    private final static Map<String, LogLevel> LEVEL_NAMES = new LinkedHashMap<>();\n    private final String levelName;\n    private final int levelInt;\n\n    LogLevel(String value, int levelInt) {\n      this.levelName = value;\n      this.levelInt = levelInt;\n    }\n\n    @JsonCreator\n    public static LogLevel fromValue(String value) {\n      LogLevel constant = LEVEL_NAMES.get(value);\n      if (constant == null) {\n        throw new IllegalArgumentException(value);\n      } else {\n        return constant;\n      }\n    }\n\n    public static Set<String> getLevelNames() {\n      return LEVEL_NAMES.keySet();\n    }\n\n    public int levelInt() {\n      return levelInt;\n    }\n\n    @Override\n    public String toString() {\n      return this.levelName;\n    }\n\n    @JsonValue\n    public String value() {\n      return this.levelName;\n    }\n\n    static {\n      for (LogLevel c : values()) {\n        LEVEL_NAMES.put(c.levelName, c);\n      }\n    }\n  }\n\n  public static class LogLevelValidator implements IParameterValidator2 {\n\n    @Override\n    public void validate(String name, String value, ParameterDescription pd) throws ParameterException {\n\n      Collection<String> availableLogLevels = LogLevel.getLevelNames();\n\n      if (!availableLogLevels.contains(value)) {\n        String availableLevelJoined = availableLogLevels.stream().collect(Collectors.joining(\", \", \"[\", \"]\"));\n        throw new ParameterException(\"The parameter \" + name + \" must be one of \" + availableLevelJoined);\n      }\n    }\n\n    @Override\n    public void validate(String name, String value) throws ParameterException {\n      validate(name, value, null);\n    }\n  }\n}", "class_name": "CommandLineLogger", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java\n// --------------------------------------------------\n// /** \n//  * Create or look up a new schema which has the given ID and read the contents of the given ID as a URL. If a schema with the given ID is already known, then a reference to the original schema will be returned.\n//  * @param id the id of the schema being created\n//  * @param refFragmentPathDelimiters A string containing any charactersthat should act as path delimiters when resolving $ref fragments.\n//  * @return a schema object containing the contents of the given path\n//  */\n// public synchronized Schema create(URI id,String refFragmentPathDelimiters){\n//   URI normalizedId=id.normalize();\n//   if (!schemas.containsKey(normalizedId)) {\n//     URI baseId=removeFragment(id).normalize();\n//     if (!schemas.containsKey(baseId)) {\n//       logger.debug(\"Reading schema: \" + baseId);\n//       final JsonNode baseContent=contentResolver.resolve(baseId);\n//       schemas.put(baseId,new Schema(baseId,baseContent,null));\n//     }\n//     final Schema baseSchema=schemas.get(baseId);\n//     if (normalizedId.toString().contains(\"#\")) {\n//       JsonNode childContent=fragmentResolver.resolve(baseSchema.getContent(),'#' + id.getFragment(),refFragmentPathDelimiters);\n//       schemas.put(normalizedId,new Schema(normalizedId,childContent,baseSchema));\n//     }\n//   }\n//   return schemas.get(normalizedId);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java\n// --------------------------------------------------\n// /** \n//  * Create or look up a new schema using the given schema as a parent and the path as a relative reference. If a schema with the given parent and relative path is already known, then a reference to the original schema will be returned.\n//  * @param parent the schema which is the parent of the schema to be created.\n//  * @param path the relative path of this schema (will be used to create a complete URI by resolving this path against the parent schema's id)\n//  * @param refFragmentPathDelimiters A string containing any charactersthat should act as path delimiters when resolving $ref fragments.\n//  * @return a schema object containing the contents of the given path\n//  */\n// @SuppressWarnings(\"PMD.UselessParentheses\") public Schema create(Schema parent,String path,String refFragmentPathDelimiters){\n//   if (!path.equals(\"#\")) {\n//     path=stripEnd(path,\"#?&/\");\n//   }\n//   if (path.contains(\"#\")) {\n//     String pathExcludingFragment=substringBefore(path,\"#\");\n//     String fragment=substringAfter(path,\"#\");\n//     URI fragmentURI;\n//     try {\n//       fragmentURI=new URI(null,null,fragment);\n//     }\n//  catch (    URISyntaxException e) {\n//       throw new IllegalArgumentException(\"Invalid fragment: \" + fragment + \" in path: \"+ path);\n//     }\n//     path=pathExcludingFragment + \"#\" + fragmentURI.getRawFragment();\n//   }\n//   URI id=(parent == null || parent.getId() == null) ? URI.create(path) : parent.getId().resolve(path);\n//   String stringId=id.toString();\n//   if (stringId.endsWith(\"#\")) {\n//     try {\n//       id=new URI(stripEnd(stringId,\"#\"));\n//     }\n//  catch (    URISyntaxException e) {\n//       throw new IllegalArgumentException(\"Bad path: \" + stringId);\n//     }\n//   }\n//   if (selfReferenceWithoutParentFile(parent,path) || substringBefore(stringId,\"#\").isEmpty()) {\n//     JsonNode parentContent=parent.getGrandParent().getContent();\n//     if (schemas.containsKey(id)) {\n//       return schemas.get(id);\n//     }\n//  else {\n//       Schema schema=new Schema(id,fragmentResolver.resolve(parentContent,path,refFragmentPathDelimiters),parent.getGrandParent());\n//       schemas.put(id,schema);\n//       return schema;\n//     }\n//   }\n//   return create(id,refFragmentPathDelimiters);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// private Schema resolveSchemaRefsRecursive(Schema schema){\n//   JsonNode schemaNode=schema.getContent();\n//   if (schemaNode.has(\"$ref\")) {\n//     schema=ruleFactory.getSchemaStore().create(schema,schemaNode.get(\"$ref\").asText(),ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());\n//     return resolveSchemaRefsRecursive(schema);\n//   }\n//   return schema;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// public Schema getSuperSchema(JsonNode node,Schema schema,boolean followRefs){\n//   if (node.has(\"extends\")) {\n//     String path;\n//     if (schema.getId().getFragment() == null) {\n//       path=\"#/extends\";\n//     }\n//  else {\n//       path=\"#\" + schema.getId().getFragment() + \"/extends\";\n//     }\n//     Schema superSchema=ruleFactory.getSchemaStore().create(schema,path,ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());\n//     if (followRefs) {\n//       superSchema=resolveSchemaRefsRecursive(superSchema);\n//     }\n//     return superSchema;\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Schema {\n\n    private final URI id;\n    private final JsonNode content;\n    private final Schema parent;\n    private JType javaType;\n\n    public Schema(URI id, JsonNode content, Schema parent) {\n        this.id = id;\n        this.content = content;\n        this.parent = parent != null ? parent : this;\n    }\n\n    public JType getJavaType() {\n        return javaType;\n    }\n\n    public void setJavaType(JType javaType) {\n        this.javaType = javaType;\n    }\n\n    public void setJavaTypeIfEmpty(JType javaType) {\n        if (this.getJavaType() == null) {\n            this.setJavaType(javaType);\n        }\n    }\n\n    public URI getId() {\n        return id;\n    }\n\n    public JsonNode getContent() {\n        return content;\n    }\n\n    public Schema getParent() {\n        return parent;\n    }\n\n    public Schema getGrandParent() {<FILL_FUNCTION_BODY>}\n\n    public boolean isGenerated() {\n        return javaType != null;\n    }\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/62", "ground_truth": "\n        if (parent == this) {\n            return this;\n        } else {\n            return this.parent.getGrandParent();\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "Schema.java"], "context_start_lineno": 0, "function_name": "getGrandParent", "left_context": "class Schema {\n\n    private final URI id;\n    private final JsonNode content;\n    private final Schema parent;\n    private JType javaType;\n\n    public Schema(URI id, JsonNode content, Schema parent) {\n        this.id = id;\n        this.content = content;\n        this.parent = parent != null ? parent : this;\n    }\n\n    public JType getJavaType() {\n        return javaType;\n    }\n\n    public void setJavaType(JType javaType) {\n        this.javaType = javaType;\n    }\n\n    public void setJavaTypeIfEmpty(JType javaType) {\n        if (this.getJavaType() == null) {\n            this.setJavaType(javaType);\n        }\n    }\n\n    public URI getId() {\n        return id;\n    }\n\n    public JsonNode getContent() {\n        return content;\n    }\n\n    public Schema getParent() {\n        return parent;\n    }\n\n    public Schema getGrandParent() {", "right_context": "}\n\n    public boolean isGenerated() {\n        return javaType != null;\n    }\n\n}", "class_name": "Schema", "return_type": "Schema", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MinItemsMaxItemsRule implements Rule<JFieldVar, JFieldVar> {\n\n    private final RuleFactory ruleFactory;\n\n    protected MinItemsMaxItemsRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JFieldVar apply(String nodeName, JsonNode node, JsonNode parent, JFieldVar field, Schema currentSchema) {\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()\n                && (node.has(\"minItems\") || node.has(\"maxItems\"))\n                && isApplicableType(field)) {\n\n            final Class<? extends Annotation> sizeClass\n                    = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                    ? Size.class\n                    : javax.validation.constraints.Size.class;\n            JAnnotationUse annotation = field.annotate(sizeClass);\n\n            if (node.has(\"minItems\")) {\n                annotation.param(\"min\", node.get(\"minItems\").asInt());\n            }\n\n            if (node.has(\"maxItems\")) {\n                annotation.param(\"max\", node.get(\"maxItems\").asInt());\n            }\n        }\n\n        return field;\n    }\n\n    private boolean isApplicableType(JFieldVar field) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/107", "ground_truth": "\n        try {\n            String typeName = field.type().boxify().fullName();\n            // For collections, the full name will be something like 'java.util.List<String>' and we\n            // need just 'java.util.List'.\n            int genericsPos = typeName.indexOf('<');\n            if (genericsPos > -1) {\n                typeName = typeName.substring(0, genericsPos);\n            }\n\n            Class<?> fieldClass = Class.forName(typeName);\n            return String.class.isAssignableFrom(fieldClass)\n                    || Collection.class.isAssignableFrom(fieldClass)\n                    || Map.class.isAssignableFrom(fieldClass)\n                    || Array.class.isAssignableFrom(fieldClass)\n                    || field.type().isArray();\n        } catch (ClassNotFoundException ignore) {\n            return false;\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "MinItemsMaxItemsRule.java"], "context_start_lineno": 0, "function_name": "isApplicableType", "left_context": "class MinItemsMaxItemsRule implements Rule<JFieldVar, JFieldVar> {\n\n    private final RuleFactory ruleFactory;\n\n    protected MinItemsMaxItemsRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JFieldVar apply(String nodeName, JsonNode node, JsonNode parent, JFieldVar field, Schema currentSchema) {\n\n        if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()\n                && (node.has(\"minItems\") || node.has(\"maxItems\"))\n                && isApplicableType(field)) {\n\n            final Class<? extends Annotation> sizeClass\n                    = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                    ? Size.class\n                    : javax.validation.constraints.Size.class;\n            JAnnotationUse annotation = field.annotate(sizeClass);\n\n            if (node.has(\"minItems\")) {\n                annotation.param(\"min\", node.get(\"minItems\").asInt());\n            }\n\n            if (node.has(\"maxItems\")) {\n                annotation.param(\"max\", node.get(\"maxItems\").asInt());\n            }\n        }\n\n        return field;\n    }\n\n    private boolean isApplicableType(JFieldVar field) {", "right_context": "}\n\n}", "class_name": "MinItemsMaxItemsRule", "return_type": "boolean", "parameters": [{"type": "JFieldVar", "name": "field"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MakeUniqueClassName {\n\n    private static final Pattern UNIQUE_NAMING_PATTERN = Pattern.compile(\"(^.+__)(\\\\d+)$\");\n    \n    /**\n     * When the class name is not unique we will use two underscore '__' and a digit representing the number of time\n     * this class was found\n     */\n    public static String makeUnique(String className) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/138", "ground_truth": "\n        \n        final Matcher m = UNIQUE_NAMING_PATTERN.matcher(className);\n        \n        if (m.matches()) {\n            // get the current number\n            final Integer number = Integer.parseInt(m.group(2));\n            // replace the current number in the string with the number +1\n            return m.group(1) + (number + 1);\n        } else {\n            return className + \"__1\";\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "util", "MakeUniqueClassName.java"], "context_start_lineno": 0, "function_name": "makeUnique", "left_context": "class MakeUniqueClassName {\n\n    private static final Pattern UNIQUE_NAMING_PATTERN = Pattern.compile(\"(^.+__)(\\\\d+)$\");\n    \n    /**\n     * When the class name is not unique we will use two underscore '__' and a digit representing the number of time\n     * this class was found\n     */\n    public static String makeUnique(String className) {", "right_context": "}\n}", "class_name": "MakeUniqueClassName", "return_type": "String", "parameters": [{"type": "String", "name": "className"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/TypeUtil.java\n// --------------------------------------------------\n// public static JClass resolveType(JClassContainer _package,String typeDefinition){\n//   try {\n//     FieldDeclaration fieldDeclaration=(FieldDeclaration)JavaParser.parseBodyDeclaration(typeDefinition + \" foo;\");\n//     ClassOrInterfaceType c=(ClassOrInterfaceType)((ReferenceType)fieldDeclaration.getType()).getType();\n//     return buildClass(_package,c,0);\n//   }\n//  catch (  ParseException e) {\n//     throw new GenerationException(\"Couldn't parse type: \" + typeDefinition,e);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/TypeUtil.java\n// --------------------------------------------------\n// private static JClass buildClass(JClassContainer _package,ClassOrInterfaceType c,int arrayCount){\n//   final String packagePrefix=(c.getScope() != null) ? c.getScope().toString() + \".\" : \"\";\n//   JClass _class=_package.owner().ref(packagePrefix + c.getName());\n//   for (int i=0; i < arrayCount; i++) {\n//     _class=_class.array();\n//   }\n//   List<Type> typeArgs=c.getTypeArgs();\n//   if (typeArgs != null && typeArgs.size() > 0) {\n//     JClass[] genericArgumentClasses=new JClass[typeArgs.size()];\n//     for (int i=0; i < typeArgs.size(); i++) {\n//       final Type type=typeArgs.get(i);\n//       final JClass resolvedClass;\n//       if (type instanceof WildcardType) {\n//         final WildcardType wildcardType=(WildcardType)type;\n//         if (wildcardType.getSuper() != null) {\n//           throw new IllegalArgumentException(\"\\\"? super \\\" declaration is not yet supported\");\n//         }\n//  else         if (wildcardType.getExtends() != null) {\n//           resolvedClass=buildClass(_package,(ClassOrInterfaceType)wildcardType.getExtends().getType(),0).wildcard();\n//         }\n//  else {\n//           resolvedClass=_package.owner().ref(Object.class).wildcard();\n//         }\n//       }\n//  else {\n//         final ReferenceType referenceType=(ReferenceType)type;\n//         resolvedClass=buildClass(_package,(ClassOrInterfaceType)referenceType.getType(),referenceType.getArrayCount());\n//       }\n//       genericArgumentClasses[i]=resolvedClass;\n//     }\n//     _class=_class.narrow(genericArgumentClasses);\n//   }\n//   return _class;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ArrayRule implements Rule<JPackage, JClass> {\n\n    private final RuleFactory ruleFactory;\n\n    protected ArrayRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    /**\n     * <p>Applies this schema rule to take the required code generation steps.</p>\n     *\n     * <p>When constructs of type \"array\" appear in the schema, these are mapped to\n     * Java collections in the generated POJO. If the array is marked as having\n     * \"uniqueItems\" then the resulting Java type is {@link Set}, if not, then\n     * the resulting Java type is {@link List}. The schema given by \"items\" will\n     * decide the generic type of the collection.</p>\n     *\n     * <p>If the \"items\" property requires newly generated types, then the type\n     * name will be the singular version of the nodeName (unless overridden by\n     * the javaType property) e.g.\n     * <pre>\n     *  \"fooBars\" : {\"type\":\"array\", \"uniqueItems\":\"true\", \"items\":{type:\"object\"}}\n     *  ==&gt;\n     *  {@code Set<FooBar> getFooBars(); }\n     * </pre>\n     *\n     * @param nodeName\n     *            the name of the property which has type \"array\"\n     * @param node\n     *            the schema \"type\" node\n     * @param parent\n     *            the parent node\n     * @param jpackage\n     *            the package into which newly generated types should be added\n     * @return the Java type associated with this array rule, either {@link Set}\n     *         or {@link List}, narrowed by the \"items\" type\n     */\n    @Override\n    public JClass apply(String nodeName, JsonNode node, JsonNode parent, JPackage jpackage, Schema schema) {<FILL_FUNCTION_BODY>}\n\n    private String makeSingular(String nodeName) {\n        return Inflector.getInstance().singularize(nodeName);\n    }\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/139", "ground_truth": "\n\n        boolean uniqueItems = node.has(\"uniqueItems\") && node.get(\"uniqueItems\").asBoolean();\n        boolean rootSchemaIsArray = !schema.isGenerated();\n\n        JType itemType;\n        if (node.has(\"items\")) {\n            String pathToItems;\n            if (schema.getId() == null || schema.getId().getFragment() == null) {\n                pathToItems = \"#/items\";\n            } else {\n                pathToItems = \"#\" + schema.getId().getFragment() + \"/items\";\n            }\n            Schema itemsSchema = ruleFactory.getSchemaStore().create(schema, pathToItems, ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());\n            if (itemsSchema.isGenerated()) {\n                itemType = itemsSchema.getJavaType();\n            } else {\n                itemType = ruleFactory.getSchemaRule().apply(makeSingular(nodeName), node.get(\"items\"), node, jpackage, itemsSchema);\n                itemsSchema.setJavaTypeIfEmpty(itemType);\n            }\n        } else {\n            itemType = jpackage.owner().ref(Object.class);\n        }\n\n        JClass arrayType;\n        if (uniqueItems) {\n            arrayType = jpackage.owner().ref(Set.class).narrow(itemType);\n        } else {\n            arrayType = jpackage.owner().ref(List.class).narrow(itemType);\n        }\n\n        if (rootSchemaIsArray) {\n            schema.setJavaType(arrayType);\n        }\n\n        return arrayType;\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "ArrayRule.java"], "context_start_lineno": 0, "function_name": "apply", "left_context": "class ArrayRule implements Rule<JPackage, JClass> {\n\n    private final RuleFactory ruleFactory;\n\n    protected ArrayRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    /**\n     * <p>Applies this schema rule to take the required code generation steps.</p>\n     *\n     * <p>When constructs of type \"array\" appear in the schema, these are mapped to\n     * Java collections in the generated POJO. If the array is marked as having\n     * \"uniqueItems\" then the resulting Java type is {@link Set}, if not, then\n     * the resulting Java type is {@link List}. The schema given by \"items\" will\n     * decide the generic type of the collection.</p>\n     *\n     * <p>If the \"items\" property requires newly generated types, then the type\n     * name will be the singular version of the nodeName (unless overridden by\n     * the javaType property) e.g.\n     * <pre>\n     *  \"fooBars\" : {\"type\":\"array\", \"uniqueItems\":\"true\", \"items\":{type:\"object\"}}\n     *  ==&gt;\n     *  {@code Set<FooBar> getFooBars(); }\n     * </pre>\n     *\n     * @param nodeName\n     *            the name of the property which has type \"array\"\n     * @param node\n     *            the schema \"type\" node\n     * @param parent\n     *            the parent node\n     * @param jpackage\n     *            the package into which newly generated types should be added\n     * @return the Java type associated with this array rule, either {@link Set}\n     *         or {@link List}, narrowed by the \"items\" type\n     */\n    @Override\n    public JClass apply(String nodeName, JsonNode node, JsonNode parent, JPackage jpackage, Schema schema) {", "right_context": "}\n\n    private String makeSingular(String nodeName) {\n        return Inflector.getInstance().singularize(nodeName);\n    }\n\n}", "class_name": "ArrayRule", "return_type": "JClass", "parameters": [{"type": "String", "name": "nodeName"}, {"type": "JsonNode", "name": "node"}, {"type": "JsonNode", "name": "parent"}, {"type": "JPackage", "name": "jpackage"}, {"type": "Schema", "name": "schema"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Jsonb1Annotator extends AbstractAnnotator {\n\n    public Jsonb1Annotator(GenerationConfig generationConfig) {\n        super(generationConfig);\n    }\n\n    @Override\n    public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {\n        JAnnotationArrayMember annotationValue = clazz.annotate(JsonbPropertyOrder.class).paramArray(\"value\");\n\n        for (Iterator<String> properties = propertiesNode.fieldNames(); properties.hasNext();) {\n            annotationValue.param(properties.next());\n        }\n    }\n\n    @Override\n    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {\n        field.annotate(JsonbProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void propertyGetter(JMethod getter, JDefinedClass clazz, String propertyName) {\n        getter.annotate(JsonbProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void propertySetter(JMethod setter, JDefinedClass clazz, String propertyName) {\n        setter.annotate(JsonbProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public boolean isAdditionalPropertiesSupported() {\n        return true;\n    }\n\n    @Override\n    public void additionalPropertiesField(JFieldVar field, JDefinedClass clazz, String propertyName) {\n        field.annotate(JsonbTransient.class);\n    }\n\n    @Override\n    public void dateField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n        String pattern = null;\n        if (node.has(\"customDatePattern\")) {\n            pattern = node.get(\"customDatePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomDatePattern())) {\n            pattern = getGenerationConfig().getCustomDatePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_DATE_FORMAT;\n        }\n\n        if (!field.type().fullName().equals(\"java.lang.String\")) {\n            pattern = pattern != null? pattern : FormatRule.ISO_8601_DATE_FORMAT;\n            field.annotate(JsonbDateFormat.class).param(\"value\", pattern);\n        }\n    }\n\n    @Override\n    public void timeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n        String pattern = null;\n        if (node.has(\"customTimePattern\")) {\n            pattern = node.get(\"customTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomTimePattern())) {\n            pattern = getGenerationConfig().getCustomTimePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_TIME_FORMAT;\n        }\n\n        if (!field.type().fullName().equals(\"java.lang.String\")) {\n            pattern = pattern != null? pattern : FormatRule.ISO_8601_TIME_FORMAT;\n            field.annotate(JsonbDateFormat.class).param(\"value\", pattern);\n        }\n    }\n\n    @Override\n    public void dateTimeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/144", "ground_truth": "\n        String pattern = null;\n        if (node.has(\"customDateTimePattern\")) {\n            pattern = node.get(\"customDateTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomDateTimePattern())) {\n            pattern = getGenerationConfig().getCustomDateTimePattern();\n        } else if (getGenerationConfig().isFormatDateTimes()) {\n            pattern = FormatRule.ISO_8601_DATETIME_FORMAT;\n        }\n\n        if (!field.type().fullName().equals(\"java.lang.String\")) {\n            pattern = pattern != null? pattern : FormatRule.ISO_8601_DATETIME_FORMAT;\n            field.annotate(JsonbDateFormat.class).param(\"value\", pattern);\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "Jsonb1Annotator.java"], "context_start_lineno": 0, "function_name": "dateTimeField", "left_context": "class Jsonb1Annotator extends AbstractAnnotator {\n\n    public Jsonb1Annotator(GenerationConfig generationConfig) {\n        super(generationConfig);\n    }\n\n    @Override\n    public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {\n        JAnnotationArrayMember annotationValue = clazz.annotate(JsonbPropertyOrder.class).paramArray(\"value\");\n\n        for (Iterator<String> properties = propertiesNode.fieldNames(); properties.hasNext();) {\n            annotationValue.param(properties.next());\n        }\n    }\n\n    @Override\n    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {\n        field.annotate(JsonbProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void propertyGetter(JMethod getter, JDefinedClass clazz, String propertyName) {\n        getter.annotate(JsonbProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void propertySetter(JMethod setter, JDefinedClass clazz, String propertyName) {\n        setter.annotate(JsonbProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public boolean isAdditionalPropertiesSupported() {\n        return true;\n    }\n\n    @Override\n    public void additionalPropertiesField(JFieldVar field, JDefinedClass clazz, String propertyName) {\n        field.annotate(JsonbTransient.class);\n    }\n\n    @Override\n    public void dateField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n        String pattern = null;\n        if (node.has(\"customDatePattern\")) {\n            pattern = node.get(\"customDatePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomDatePattern())) {\n            pattern = getGenerationConfig().getCustomDatePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_DATE_FORMAT;\n        }\n\n        if (!field.type().fullName().equals(\"java.lang.String\")) {\n            pattern = pattern != null? pattern : FormatRule.ISO_8601_DATE_FORMAT;\n            field.annotate(JsonbDateFormat.class).param(\"value\", pattern);\n        }\n    }\n\n    @Override\n    public void timeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n        String pattern = null;\n        if (node.has(\"customTimePattern\")) {\n            pattern = node.get(\"customTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomTimePattern())) {\n            pattern = getGenerationConfig().getCustomTimePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_TIME_FORMAT;\n        }\n\n        if (!field.type().fullName().equals(\"java.lang.String\")) {\n            pattern = pattern != null? pattern : FormatRule.ISO_8601_TIME_FORMAT;\n            field.annotate(JsonbDateFormat.class).param(\"value\", pattern);\n        }\n    }\n\n    @Override\n    public void dateTimeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {", "right_context": "}\n}", "class_name": "Jsonb1Annotator", "return_type": "void", "parameters": [{"type": "JFieldVar", "name": "field"}, {"type": "JDefinedClass", "name": "clazz"}, {"type": "JsonNode", "name": "node"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RequiredArrayRule implements Rule<JDefinedClass, JDefinedClass> {\n\n    private final RuleFactory ruleFactory;\n\n    public static final String REQUIRED_COMMENT_TEXT = \"\\n(Required)\";\n\n    protected RequiredArrayRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDefinedClass jclass, Schema schema) {\n        List<String> requiredFieldMethods = new ArrayList<>();\n\n        JsonNode properties = schema.getContent().get(\"properties\");\n\n        for (Iterator<JsonNode> iterator = node.elements(); iterator.hasNext(); ) {\n            String requiredArrayItem = iterator.next().asText();\n            if (requiredArrayItem.isEmpty()) {\n                continue;\n            }\n\n            JsonNode propertyNode = null;\n\n            if (properties != null) {\n                propertyNode = properties.findValue(requiredArrayItem);\n            }\n\n            String fieldName = ruleFactory.getNameHelper().getPropertyName(requiredArrayItem, propertyNode);\n            JFieldVar field = jclass.fields().get(fieldName);\n\n            if (field == null) {\n                continue;\n            }\n\n            addJavaDoc(field);\n\n            if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()) {\n                addNotNullAnnotation(field);\n            }\n\n            if (ruleFactory.getGenerationConfig().isIncludeJsr305Annotations()) {\n                addNonnullAnnotation(field);\n            }\n\n            requiredFieldMethods.add(getGetterName(fieldName, field.type(), node));\n            requiredFieldMethods.add(getSetterName(fieldName, node));\n        }\n\n        updateGetterSetterJavaDoc(jclass, requiredFieldMethods);\n\n        return jclass;\n    }\n\n    private void updateGetterSetterJavaDoc(JDefinedClass jclass, List<String> requiredFieldMethods) {<FILL_FUNCTION_BODY>}\n\n    private void addNotNullAnnotation(JFieldVar field) {\n        final Class<? extends Annotation> notNullClass\n                = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                ? NotNull.class\n                : javax.validation.constraints.NotNull.class;\n        field.annotate(notNullClass);\n    }\n\n    private void addNonnullAnnotation(JFieldVar field) {\n        field.annotate(Nonnull.class);\n    }\n\n    private void addJavaDoc(JDocCommentable docCommentable) {\n        JDocComment javadoc = docCommentable.javadoc();\n        javadoc.append(REQUIRED_COMMENT_TEXT);\n    }\n\n    private String getSetterName(String propertyName, JsonNode node) {\n        return ruleFactory.getNameHelper().getSetterName(propertyName, node);\n    }\n\n    private String getGetterName(String propertyName, JType type, JsonNode node) {\n        return ruleFactory.getNameHelper().getGetterName(propertyName, type, node);\n    }\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/234", "ground_truth": "\n        for (Iterator<JMethod> methods = jclass.methods().iterator(); methods.hasNext();) {\n            JMethod method = methods.next();\n            if (requiredFieldMethods.contains(method.name())) {\n                addJavaDoc(method);\n            }\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "RequiredArrayRule.java"], "context_start_lineno": 0, "function_name": "updateGetterSetterJavaDoc", "left_context": "class RequiredArrayRule implements Rule<JDefinedClass, JDefinedClass> {\n\n    private final RuleFactory ruleFactory;\n\n    public static final String REQUIRED_COMMENT_TEXT = \"\\n(Required)\";\n\n    protected RequiredArrayRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    @Override\n    public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDefinedClass jclass, Schema schema) {\n        List<String> requiredFieldMethods = new ArrayList<>();\n\n        JsonNode properties = schema.getContent().get(\"properties\");\n\n        for (Iterator<JsonNode> iterator = node.elements(); iterator.hasNext(); ) {\n            String requiredArrayItem = iterator.next().asText();\n            if (requiredArrayItem.isEmpty()) {\n                continue;\n            }\n\n            JsonNode propertyNode = null;\n\n            if (properties != null) {\n                propertyNode = properties.findValue(requiredArrayItem);\n            }\n\n            String fieldName = ruleFactory.getNameHelper().getPropertyName(requiredArrayItem, propertyNode);\n            JFieldVar field = jclass.fields().get(fieldName);\n\n            if (field == null) {\n                continue;\n            }\n\n            addJavaDoc(field);\n\n            if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()) {\n                addNotNullAnnotation(field);\n            }\n\n            if (ruleFactory.getGenerationConfig().isIncludeJsr305Annotations()) {\n                addNonnullAnnotation(field);\n            }\n\n            requiredFieldMethods.add(getGetterName(fieldName, field.type(), node));\n            requiredFieldMethods.add(getSetterName(fieldName, node));\n        }\n\n        updateGetterSetterJavaDoc(jclass, requiredFieldMethods);\n\n        return jclass;\n    }\n\n    private void updateGetterSetterJavaDoc(JDefinedClass jclass, List<String> requiredFieldMethods) {", "right_context": "}\n\n    private void addNotNullAnnotation(JFieldVar field) {\n        final Class<? extends Annotation> notNullClass\n                = ruleFactory.getGenerationConfig().isUseJakartaValidation()\n                ? NotNull.class\n                : javax.validation.constraints.NotNull.class;\n        field.annotate(notNullClass);\n    }\n\n    private void addNonnullAnnotation(JFieldVar field) {\n        field.annotate(Nonnull.class);\n    }\n\n    private void addJavaDoc(JDocCommentable docCommentable) {\n        JDocComment javadoc = docCommentable.javadoc();\n        javadoc.append(REQUIRED_COMMENT_TEXT);\n    }\n\n    private String getSetterName(String propertyName, JsonNode node) {\n        return ruleFactory.getNameHelper().getSetterName(propertyName, node);\n    }\n\n    private String getGetterName(String propertyName, JType type, JsonNode node) {\n        return ruleFactory.getNameHelper().getGetterName(propertyName, type, node);\n    }\n\n}", "class_name": "RequiredArrayRule", "return_type": "void", "parameters": [{"type": "JDefinedClass", "name": "jclass"}, {"type": "List<String>", "name": "requiredFieldMethods"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java\n// --------------------------------------------------\n// protected JDefinedClass createEnum(JsonNode node,String nodeName,JClassContainer container) throws ClassAlreadyExistsException {\n//   try {\n//     if (node.has(\"javaType\")) {\n//       String fqn=node.get(\"javaType\").asText();\n//       if (isPrimitive(fqn,container.owner())) {\n//         throw new GenerationException(\"Primitive type '\" + fqn + \"' cannot be used as an enum.\");\n//       }\n//       if (fqn.lastIndexOf(\".\") == -1) {\n//         fqn=container.getPackage().name() + \".\" + fqn;\n//       }\n//       try {\n//         Class<?> existingClass=Thread.currentThread().getContextClassLoader().loadClass(fqn);\n//         throw new ClassAlreadyExistsException(container.owner().ref(existingClass));\n//       }\n//  catch (      ClassNotFoundException e) {\n//         JDefinedClass enumClass=container.owner()._class(fqn,ClassType.ENUM);\n//         ruleFactory.getLogger().debug(\"Adding \" + enumClass.fullName());\n//         return enumClass;\n//       }\n//     }\n//  else {\n//       try {\n//         JDefinedClass enumClass=container._class(JMod.PUBLIC,getEnumName(nodeName,node,container),ClassType.ENUM);\n//         ruleFactory.getLogger().debug(\"Adding \" + enumClass.fullName());\n//         return enumClass;\n//       }\n//  catch (      JClassAlreadyExistsException e) {\n//         throw new GenerationException(e);\n//       }\n//     }\n//   }\n//  catch (  JClassAlreadyExistsException e) {\n//     throw new ClassAlreadyExistsException(e.getExistingClass());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java\n// --------------------------------------------------\n// /** \n//  * Creates a new Java class that will be generated.\n//  * @param nodeName the node name which may be used to dictate the new class name\n//  * @param node the node representing the schema that caused the need for a new class. This node may include a 'javaType' property which if present will override the fully qualified name of the newly generated class.\n//  * @param _package the package which may contain a new class after this method call\n//  * @return a reference to a newly created class\n//  * @throws ClassAlreadyExistsException if the given arguments cause an attempt to create a class that already exists, either on the classpath or in the current map of classes to be generated.\n//  */\n// private JDefinedClass createClass(String nodeName,JsonNode node,JPackage _package) throws ClassAlreadyExistsException {\n//   JDefinedClass newType;\n//   Annotator annotator=ruleFactory.getAnnotator();\n//   try {\n//     if (node.has(\"existingJavaType\")) {\n//       String fqn=substringBefore(node.get(\"existingJavaType\").asText(),\"<\");\n//       if (isPrimitive(fqn,_package.owner())) {\n//         throw new ClassAlreadyExistsException(primitiveType(fqn,_package.owner()));\n//       }\n//       JClass existingClass=resolveType(_package,fqn + (node.get(\"existingJavaType\").asText().contains(\"<\") ? \"<\" + substringAfter(node.get(\"existingJavaType\").asText(),\"<\") : \"\"));\n//       throw new ClassAlreadyExistsException(existingClass);\n//     }\n//     boolean usePolymorphicDeserialization=annotator.isPolymorphicDeserializationSupported(node);\n//     if (node.has(\"javaType\")) {\n//       String fqn=node.path(\"javaType\").asText();\n//       if (isPrimitive(fqn,_package.owner())) {\n//         throw new GenerationException(\"javaType cannot refer to a primitive type (\" + fqn + \"), did you mean to use existingJavaType?\");\n//       }\n//       if (fqn.contains(\"<\")) {\n//         throw new GenerationException(\"javaType does not support generic args (\" + fqn + \"), did you mean to use existingJavaType?\");\n//       }\n//       int index=fqn.lastIndexOf(\".\") + 1;\n//       if (index == 0) {\n//         fqn=_package.name() + \".\" + fqn;\n//         index=fqn.lastIndexOf(\".\") + 1;\n//       }\n//       if (index >= 0 && index < fqn.length()) {\n//         fqn=fqn.substring(0,index) + ruleFactory.getGenerationConfig().getClassNamePrefix() + fqn.substring(index)+ ruleFactory.getGenerationConfig().getClassNameSuffix();\n//       }\n//       if (usePolymorphicDeserialization) {\n//         newType=_package.owner()._class(JMod.PUBLIC,fqn,ClassType.CLASS);\n//       }\n//  else {\n//         newType=_package.owner()._class(fqn);\n//       }\n//       ruleFactory.getLogger().debug(\"Adding \" + newType.fullName());\n//     }\n//  else {\n//       final String className=ruleFactory.getNameHelper().getUniqueClassName(nodeName,node,_package);\n//       if (usePolymorphicDeserialization) {\n//         newType=_package._class(JMod.PUBLIC,className,ClassType.CLASS);\n//       }\n//  else {\n//         newType=_package._class(className);\n//       }\n//       ruleFactory.getLogger().debug(\"Adding \" + newType.fullName());\n//     }\n//   }\n//  catch (  JClassAlreadyExistsException e) {\n//     throw new ClassAlreadyExistsException(e.getExistingClass());\n//   }\n//   annotator.typeInfo(newType,node);\n//   annotator.propertyInclusion(newType,node);\n//   return newType;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// public JDefinedClass getConcreteBuilderClass(JDefinedClass instanceClass){\n//   String builderClassname=ruleFactory.getNameHelper().getBuilderClassName(instanceClass);\n//   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(instanceClass.classes(),Spliterator.ORDERED),false).filter(definedClass -> definedClass.name().equals(builderClassname)).findFirst().orElse(null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// public JDefinedClass getConcreteBuilderClass(JClass target){\n//   String builderClassname=ruleFactory.getNameHelper().getBuilderClassName(target);\n//   return getAllPackageClasses(target._package()).stream().filter(definedClass -> definedClass.name().equals(builderClassname)).findFirst().orElse(null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// public JDefinedClass getBaseBuilderClass(JDefinedClass target){\n//   String builderClassname=ruleFactory.getNameHelper().getBaseBuilderClassName(target);\n//   return StreamSupport.stream(Spliterators.spliteratorUnknownSize(target.classes(),Spliterator.ORDERED),false).filter(definedClass -> definedClass.name().equals(builderClassname)).findFirst().orElse(null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// public JDefinedClass getBaseBuilderClass(JClass target){\n//   String builderClassname=ruleFactory.getNameHelper().getBaseBuilderClassName(target);\n//   return getAllPackageClasses(target._package()).stream().filter(definedClass -> definedClass.name().equals(builderClassname)).findFirst().orElse(null);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// private JDefinedClass definedClassOrNullFromType(JType type){\n//   if (type == null || type.isPrimitive()) {\n//     return null;\n//   }\n//   JClass fieldClass=type.boxify();\n//   JPackage jPackage=fieldClass._package();\n//   try {\n//     return this._getClass(fieldClass.name(),jPackage);\n//   }\n//  catch (  NoClassDefFoundError error) {\n//     String name=fieldClass.name();\n//     String erasureName=fieldClass.erasure().name();\n//     if (!Objects.equals(name,erasureName)) {\n//       ruleFactory.getLogger().debug(\"Could not get class for type with name: \" + name + \" trying \"+ erasureName+ \" instead.\");\n//       return this._getClass(erasureName,jPackage);\n//     }\n//  else {\n//       throw error;\n//     }\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/ReflectionHelper.java\n// --------------------------------------------------\n// private JDefinedClass _getClass(String name,JPackage _package){\n//   return getAllPackageClasses(_package).stream().filter(definedClass -> definedClass.name().equals(name)).findFirst().orElseThrow(() -> new NoClassDefFoundError(name));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/AdditionalPropertiesRule.java\n// --------------------------------------------------\n// /** \n//  * Applies this schema rule to take the required code generation steps. <p> If additionalProperties is specified and set to the boolean value <code>false</code>, this rule does not make any change to the generated Java type (the type does not allow additional properties). <p> If the additionalProperties node is <code>null</code> (not specified in the schema) or empty, then a new bean property named \"additionalProperties\", of type  {@link Map}{@literal <String,Object>} isadded to the generated type (with appropriate accessors). The accessors are annotated to allow unrecognised (additional) properties found in JSON data to be marshalled/unmarshalled from/to this map. <p> If the additionalProperties node is present and specifies a schema, then an \"additionalProperties\" map is added to the generated type. This time the map values will be restricted and must be instances of a newly generated Java type that will be created based on the additionalProperties schema provided. If the schema does not specify the javaType property, the name of the newly generated type will be derived from the nodeName and the suffix 'Property'.\n//  * @param nodeName the name of the schema node for which the additionalProperties node applies\n//  * @param node the additionalProperties node itself, found in the schema (may be null if not specified in the schema)\n//  * @param jclass the Java type that is being generated to represent this schema\n//  * @return the given Java type jclass\n//  */\n// @Override public JDefinedClass apply(String nodeName,JsonNode node,JsonNode parent,JDefinedClass jclass,Schema schema){\n//   if (node != null && node.isBoolean() && node.asBoolean() == false) {\n//     return jclass;\n//   }\n//   if (!this.ruleFactory.getGenerationConfig().isIncludeAdditionalProperties()) {\n//     return jclass;\n//   }\n//   if (!ruleFactory.getAnnotator().isAdditionalPropertiesSupported()) {\n//     return jclass;\n//   }\n//   JType propertyType;\n//   if (node != null && node.size() != 0) {\n//     String pathToAdditionalProperties;\n//     if (schema.getId() == null || schema.getId().getFragment() == null) {\n//       pathToAdditionalProperties=\"#/additionalProperties\";\n//     }\n//  else {\n//       pathToAdditionalProperties=\"#\" + schema.getId().getFragment() + \"/additionalProperties\";\n//     }\n//     Schema additionalPropertiesSchema=ruleFactory.getSchemaStore().create(schema,pathToAdditionalProperties,ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());\n//     propertyType=ruleFactory.getSchemaRule().apply(nodeName + \"Property\",node,parent,jclass,additionalPropertiesSchema);\n//     additionalPropertiesSchema.setJavaTypeIfEmpty(propertyType);\n//   }\n//  else {\n//     propertyType=jclass.owner().ref(Object.class);\n//   }\n//   JFieldVar field=addAdditionalPropertiesField(jclass,propertyType);\n//   addGetter(jclass,field);\n//   addSetter(jclass,propertyType,field);\n//   if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()) {\n//     ruleFactory.getValidRule().apply(nodeName,node,parent,field,schema);\n//   }\n//   if (ruleFactory.getGenerationConfig().isGenerateBuilders()) {\n//     addBuilder(jclass,propertyType,field);\n//   }\n//   return jclass;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/BuilderRule.java\n// --------------------------------------------------\n// @Override public JDefinedClass apply(String nodeName,JsonNode node,JsonNode parent,JDefinedClass instanceClass,Schema currentSchema){\n//   JDefinedClass concreteBuilderClass;\n//   JDefinedClass builderClass;\n//   try {\n//     String concreteBuilderClassName=ruleFactory.getNameHelper().getBuilderClassName(instanceClass);\n//     String builderClassName=ruleFactory.getNameHelper().getBaseBuilderClassName(instanceClass);\n//     builderClass=instanceClass._class(JMod.ABSTRACT + JMod.PUBLIC + JMod.STATIC,builderClassName);\n//     concreteBuilderClass=instanceClass._class(JMod.PUBLIC + JMod.STATIC,concreteBuilderClassName);\n//     concreteBuilderClass._extends(builderClass.narrow(instanceClass));\n//   }\n//  catch (  JClassAlreadyExistsException e) {\n//     return e.getExistingClass();\n//   }\n//   JClass parentBuilderClass=null;\n//   JClass parentClass=instanceClass._extends();\n//   if (!(parentClass.isPrimitive() || reflectionHelper.isFinal(parentClass) || Objects.equals(parentClass.fullName(),\"java.lang.Object\"))) {\n//     parentBuilderClass=reflectionHelper.getBaseBuilderClass(parentClass);\n//   }\n//   String builderTypeParameterName=ruleFactory.getNameHelper().getBuilderTypeParameterName(instanceClass);\n//   JTypeVar instanceType=builderClass.generify(builderTypeParameterName,instanceClass);\n//   if (parentBuilderClass == null) {\n//     JFieldVar instanceField=builderClass.field(JMod.PROTECTED,instanceType,\"instance\");\n//     JMethod buildMethod=builderClass.method(JMod.PUBLIC,instanceType,\"build\");\n//     JBlock body=buildMethod.body();\n//     JVar result=body.decl(instanceType,\"result\");\n//     body.assign(result,JExpr._this().ref(instanceField));\n//     body.assign(JExpr._this().ref(instanceField),JExpr._null());\n//     body._return(result);\n//     generateNoArgsBuilderConstructors(instanceClass,builderClass,concreteBuilderClass);\n//   }\n//  else {\n//     builderClass._extends(parentBuilderClass.narrow(parentBuilderClass.owner().ref(builderTypeParameterName)));\n//     JMethod buildMethod=builderClass.method(JMod.PUBLIC,instanceType,\"build\");\n//     buildMethod.annotate(Override.class);\n//     JBlock body=buildMethod.body();\n//     body._return(JExpr._super().invoke(\"build\"));\n//     generateNoArgsBuilderConstructors(instanceClass,builderClass,concreteBuilderClass);\n//   }\n//   JMethod builderMethod=instanceClass.method(JMod.PUBLIC + JMod.STATIC,builderClass,\"builder\");\n//   JBlock builderBody=builderMethod.body();\n//   builderBody._return(JExpr._new(concreteBuilderClass));\n//   return builderClass;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ConstructorRule.java\n// --------------------------------------------------\n// @Override public JDefinedClass apply(String nodeName,JsonNode node,JsonNode parent,JDefinedClass instanceClass,Schema currentSchema){\n//   GenerationConfig generationConfig=ruleFactory.getGenerationConfig();\n//   if (generationConfig.isConstructorsRequiredPropertiesOnly()) {\n//     handleLegacyConfiguration(node,instanceClass,currentSchema);\n//   }\n//  else {\n//     handleMultiChoiceConstructorConfiguration(node,instanceClass,currentSchema);\n//   }\n//   return instanceClass;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DynamicPropertiesRule.java\n// --------------------------------------------------\n// /** \n//  * This rule adds dynamic getter, setter and builder methods based on the properties and additional properties defined in a schema. <p> If accessors are being generated, then methods for getting and setting properties by name will be added.  These methods first attempt to call the appropriate getter or setter for the property.  If the named property is not defined, then the additional properties map is used. <p> If builders are being generated, then a method for building properties by name will be added.  This method first attempts to call the builder for the property.  If no property with the supplied name is defined, then the additional properties map is used. <p> The methods generated by this class throw an IllegalArgumentException, if the name specified for the property is unknown and additional properties are not enabled.  A ClassCastException will be thrown, when the value being set is incompatible with the type of the named property.\n//  * @param nodeName the name of the node for which dynamic getters, setters, and builders are being added.\n//  * @param node the properties node, containing property names and their definition\n//  * @param parent the parent node\n//  * @param jclass the Java type which will have the given properties added\n//  * @param currentSchema the schema being implemented\n//  * @return the given jclass\n//  */\n// @Override public JDefinedClass apply(String nodeName,JsonNode node,JsonNode parent,JDefinedClass jclass,Schema currentSchema){\n//   if (!ruleFactory.getGenerationConfig().isIncludeDynamicAccessors() || (!ruleFactory.getGenerationConfig().isIncludeDynamicSetters() && !ruleFactory.getGenerationConfig().isIncludeDynamicGetters() && !ruleFactory.getGenerationConfig().isIncludeDynamicBuilders())) {\n//     return jclass;\n//   }\n//   boolean isIncludeGetters=ruleFactory.getGenerationConfig().isIncludeGetters();\n//   boolean isIncludeSetters=ruleFactory.getGenerationConfig().isIncludeSetters();\n//   boolean isGenerateBuilders=ruleFactory.getGenerationConfig().isGenerateBuilders();\n//   if (isIncludeGetters || isIncludeSetters || isGenerateBuilders) {\n//     if (isIncludeSetters) {\n//       addInternalSetMethodJava6(jclass,node);\n//     }\n//     if (isIncludeGetters) {\n//       addInternalGetMethodJava6(jclass,node);\n//     }\n//   }\n//   if (isIncludeGetters) {\n//     addGetMethods(jclass);\n//   }\n//   if (isIncludeSetters) {\n//     addSetMethods(jclass);\n//   }\n//   if (isGenerateBuilders) {\n//     addWithMethods(jclass);\n//   }\n//   return jclass;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java\n// --------------------------------------------------\n// /** \n//  * Applies this schema rule to take the required code generation steps. <p> This rule adds a property to a given Java class according to the Java Bean spec. A private field is added to the class, along with accompanying accessor methods. <p> If this rule's schema mapper is configured to include builder methods (see  {@link GenerationConfig#isGenerateBuilders()} ),then a builder method of the form <code>withFoo(Foo foo);</code> is also added.\n//  * @param nodeName the name of the property to be applied\n//  * @param node     the node describing the characteristics of this property\n//  * @param parent   the parent node\n//  * @param jclass   the Java class which should have this property added\n//  * @return the given jclass\n//  */\n// @Override public JDefinedClass apply(String nodeName,JsonNode node,JsonNode parent,JDefinedClass jclass,Schema schema){\n//   String propertyName;\n//   if (StringUtils.isEmpty(nodeName)) {\n//     propertyName=\"__EMPTY__\";\n//   }\n//  else {\n//     propertyName=ruleFactory.getNameHelper().getPropertyName(nodeName,node);\n//   }\n//   String pathToProperty;\n//   if (schema.getId() == null || schema.getId().getFragment() == null) {\n//     pathToProperty=\"#/properties/\" + JsonPointerUtils.encodeReferenceToken(nodeName);\n//   }\n//  else {\n//     pathToProperty=\"#\" + schema.getId().getFragment() + \"/properties/\"+ JsonPointerUtils.encodeReferenceToken(nodeName);\n//   }\n//   Schema propertySchema=ruleFactory.getSchemaStore().create(schema,pathToProperty,ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());\n//   JType propertyType=ruleFactory.getSchemaRule().apply(nodeName,node,parent,jclass,propertySchema);\n//   propertySchema.setJavaTypeIfEmpty(propertyType);\n//   boolean isIncludeGetters=ruleFactory.getGenerationConfig().isIncludeGetters();\n//   boolean isIncludeSetters=ruleFactory.getGenerationConfig().isIncludeSetters();\n//   node=resolveRefs(node,schema);\n//   int accessModifier=isIncludeGetters || isIncludeSetters ? JMod.PRIVATE : JMod.PUBLIC;\n//   JFieldVar field=jclass.field(accessModifier,propertyType,propertyName);\n//   propertyAnnotations(nodeName,node,schema,field);\n//   formatAnnotation(field,jclass,node);\n//   ruleFactory.getAnnotator().propertyField(field,jclass,nodeName,node);\n//   if (isIncludeGetters) {\n//     JMethod getter=addGetter(jclass,field,nodeName,node,isRequired(nodeName,node,schema),useOptional(nodeName,node,schema));\n//     ruleFactory.getAnnotator().propertyGetter(getter,jclass,nodeName);\n//     propertyAnnotations(nodeName,node,schema,getter);\n//   }\n//   if (isIncludeSetters) {\n//     JMethod setter=addSetter(jclass,field,nodeName,node);\n//     ruleFactory.getAnnotator().propertySetter(setter,jclass,nodeName);\n//     propertyAnnotations(nodeName,node,schema,setter);\n//   }\n//   if (ruleFactory.getGenerationConfig().isGenerateBuilders()) {\n//     addBuilderMethod(jclass,field,nodeName,node);\n//   }\n//   if (node.has(\"pattern\")) {\n//     ruleFactory.getPatternRule().apply(nodeName,node.get(\"pattern\"),node,field,schema);\n//   }\n//   ruleFactory.getDefaultRule().apply(nodeName,node.get(\"default\"),node,field,schema);\n//   ruleFactory.getMinimumMaximumRule().apply(nodeName,node,parent,field,schema);\n//   ruleFactory.getMinItemsMaxItemsRule().apply(nodeName,node,parent,field,schema);\n//   ruleFactory.getMinLengthMaxLengthRule().apply(nodeName,node,parent,field,schema);\n//   ruleFactory.getDigitsRule().apply(nodeName,node,parent,field,schema);\n//   if (isObject(node) || isArray(node)) {\n//     ruleFactory.getValidRule().apply(nodeName,node,parent,field,schema);\n//   }\n//   return jclass;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/RequiredArrayRule.java\n// --------------------------------------------------\n// @Override public JDefinedClass apply(String nodeName,JsonNode node,JsonNode parent,JDefinedClass jclass,Schema schema){\n//   List<String> requiredFieldMethods=new ArrayList<>();\n//   JsonNode properties=schema.getContent().get(\"properties\");\n//   for (Iterator<JsonNode> iterator=node.elements(); iterator.hasNext(); ) {\n//     String requiredArrayItem=iterator.next().asText();\n//     if (requiredArrayItem.isEmpty()) {\n//       continue;\n//     }\n//     JsonNode propertyNode=null;\n//     if (properties != null) {\n//       propertyNode=properties.findValue(requiredArrayItem);\n//     }\n//     String fieldName=ruleFactory.getNameHelper().getPropertyName(requiredArrayItem,propertyNode);\n//     JFieldVar field=jclass.fields().get(fieldName);\n//     if (field == null) {\n//       continue;\n//     }\n//     addJavaDoc(field);\n//     if (ruleFactory.getGenerationConfig().isIncludeJsr303Annotations()) {\n//       addNotNullAnnotation(field);\n//     }\n//     if (ruleFactory.getGenerationConfig().isIncludeJsr305Annotations()) {\n//       addNonnullAnnotation(field);\n//     }\n//     requiredFieldMethods.add(getGetterName(fieldName,field.type(),node));\n//     requiredFieldMethods.add(getSetterName(fieldName,node));\n//   }\n//   updateGetterSetterJavaDoc(jclass,requiredFieldMethods);\n//   return jclass;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PropertiesRule implements Rule<JDefinedClass, JDefinedClass> {\n\n    private final RuleFactory ruleFactory;\n\n    protected PropertiesRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    /**\n     * Applies this schema rule to take the required code generation steps.\n     * <p>\n     * For each property present within the properties node, this rule will\n     * invoke the 'property' rule provided by the given schema mapper.\n     *\n     * @param nodeName\n     *            the name of the node for which properties are being added\n     * @param node\n     *            the properties node, containing property names and their\n     *            definition\n     * @param jclass\n     *            the Java type which will have the given properties added\n     * @return the given jclass\n     */\n    @Override\n    public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDefinedClass jclass, Schema schema) {<FILL_FUNCTION_BODY>}\n\n    private void addOverrideBuilders(JDefinedClass jclass, JDefinedClass parentJclass) {\n        if (parentJclass == null) {\n            return;\n        }\n\n        for (JMethod parentJMethod : parentJclass.methods()) {\n            if (parentJMethod.name().startsWith(\"with\") && parentJMethod.params().size() == 1) {\n                addOverrideBuilder(jclass, parentJMethod, parentJMethod.params().get(0));\n            }\n        }\n    }\n\n    private void addOverrideBuilder(JDefinedClass thisJDefinedClass, JMethod parentBuilder, JVar parentParam) {\n\n        // Confirm that this class doesn't already have a builder method matching the same name as the parentBuilder\n        if (thisJDefinedClass.getMethod(parentBuilder.name(), new JType[] {parentParam.type()}) == null) {\n\n            JMethod builder = thisJDefinedClass.method(parentBuilder.mods().getValue(), thisJDefinedClass, parentBuilder.name());\n            builder.annotate(Override.class);\n\n            JVar param = builder.param(parentParam.type(), parentParam.name());\n            JBlock body = builder.body();\n            body.invoke(JExpr._super(), parentBuilder).arg(param);\n            body._return(JExpr._this());\n\n        }\n    }\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/251", "ground_truth": "\n        if (node == null) {\n            node = JsonNodeFactory.instance.objectNode();\n        }\n\n        for (Iterator<String> properties = node.fieldNames(); properties.hasNext(); ) {\n            String property = properties.next();\n\n            ruleFactory.getPropertyRule().apply(property, node.get(property), node, jclass, schema);\n        }\n\n        if (ruleFactory.getGenerationConfig().isGenerateBuilders() && !jclass._extends().name().equals(\"Object\")) {\n            addOverrideBuilders(jclass, jclass.owner()._getClass(jclass._extends().fullName()));\n        }\n\n        ruleFactory.getAnnotator().propertyOrder(jclass, node);\n\n        return jclass;\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "PropertiesRule.java"], "context_start_lineno": 0, "function_name": "apply", "left_context": "class PropertiesRule implements Rule<JDefinedClass, JDefinedClass> {\n\n    private final RuleFactory ruleFactory;\n\n    protected PropertiesRule(RuleFactory ruleFactory) {\n        this.ruleFactory = ruleFactory;\n    }\n\n    /**\n     * Applies this schema rule to take the required code generation steps.\n     * <p>\n     * For each property present within the properties node, this rule will\n     * invoke the 'property' rule provided by the given schema mapper.\n     *\n     * @param nodeName\n     *            the name of the node for which properties are being added\n     * @param node\n     *            the properties node, containing property names and their\n     *            definition\n     * @param jclass\n     *            the Java type which will have the given properties added\n     * @return the given jclass\n     */\n    @Override\n    public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDefinedClass jclass, Schema schema) {", "right_context": "}\n\n    private void addOverrideBuilders(JDefinedClass jclass, JDefinedClass parentJclass) {\n        if (parentJclass == null) {\n            return;\n        }\n\n        for (JMethod parentJMethod : parentJclass.methods()) {\n            if (parentJMethod.name().startsWith(\"with\") && parentJMethod.params().size() == 1) {\n                addOverrideBuilder(jclass, parentJMethod, parentJMethod.params().get(0));\n            }\n        }\n    }\n\n    private void addOverrideBuilder(JDefinedClass thisJDefinedClass, JMethod parentBuilder, JVar parentParam) {\n\n        // Confirm that this class doesn't already have a builder method matching the same name as the parentBuilder\n        if (thisJDefinedClass.getMethod(parentBuilder.name(), new JType[] {parentParam.type()}) == null) {\n\n            JMethod builder = thisJDefinedClass.method(parentBuilder.mods().getValue(), thisJDefinedClass, parentBuilder.name());\n            builder.annotate(Override.class);\n\n            JVar param = builder.param(parentParam.type(), parentParam.name());\n            JBlock body = builder.body();\n            body.invoke(JExpr._super(), parentBuilder).arg(param);\n            body._return(JExpr._this());\n\n        }\n    }\n}", "class_name": "PropertiesRule", "return_type": "JDefinedClass", "parameters": [{"type": "String", "name": "nodeName"}, {"type": "JsonNode", "name": "node"}, {"type": "JsonNode", "name": "parent"}, {"type": "JDefinedClass", "name": "jclass"}, {"type": "Schema", "name": "schema"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/CommentRule.java\n// --------------------------------------------------\n// /** \n//  * Applies this schema rule to take the required code generation steps. <p> When a $comment node is found and applied with this rule, the value of the $comment is added as a method and field level JavaDoc comment.\n//  * @param nodeName the name of the object to which this description applies\n//  * @param node the \"$comment\" schema node\n//  * @param parent the parent node\n//  * @param generatableType comment-able code generation construct, usually a java class, which should have this description applied\n//  * @return the JavaDoc comment created to contain the description\n//  */\n// @Override public JDocComment apply(String nodeName,JsonNode node,JsonNode parent,JDocCommentable generatableType,Schema schema){\n//   JDocComment javadoc=generatableType.javadoc();\n//   String descriptionText=node.asText();\n//   if (StringUtils.isNotBlank(descriptionText)) {\n//     String[] lines=node.asText().split(\"/\\r?\\n/\");\n//     for (    String line : lines) {\n//       javadoc.append(line);\n//     }\n//   }\n//   return javadoc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/JavaNameRule.java\n// --------------------------------------------------\n// @Override public JDocComment apply(String nodeName,JsonNode node,JsonNode parent,JDocCommentable generatableType,Schema currentSchema){\n//   JDocComment javaDoc=generatableType.javadoc();\n//   javaDoc.append(String.format(\"%nCorresponds to the \\\"%s\\\" property.\",nodeName));\n//   return javaDoc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TitleRule.java\n// --------------------------------------------------\n// /** \n//  * Applies this schema rule to take the required code generation steps. <p> When a title node is found and applied with this rule, the value of the title is added as a JavaDoc comment. This rule is typically applied to the generated field, generated getter and generated setter for the property. <p> Note that the title is always inserted at the top of the JavaDoc comment.\n//  * @param nodeName the name of the property to which this title applies\n//  * @param node the \"title\" schema node\n//  * @param parent the parent node\n//  * @param generatableType comment-able code generation construct, usually a field or method, which should have this title applied\n//  * @return the JavaDoc comment created to contain the title\n//  */\n// @Override public JDocComment apply(String nodeName,JsonNode node,JsonNode parent,JDocCommentable generatableType,Schema schema){\n//   JDocComment javadoc=generatableType.javadoc();\n//   javadoc.add(0,node.asText() + \"\\n<p>\\n\");\n//   return javadoc;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DescriptionRule implements Rule<JDocCommentable, JDocComment> {\n\n    protected DescriptionRule() {\n    }\n\n    /**\n     * Applies this schema rule to take the required code generation steps.\n     * <p>\n     * When a description node is found and applied with this rule, the value of\n     * the description is added as a class level JavaDoc comment.\n     *\n     * @param nodeName\n     *            the name of the object to which this description applies\n     * @param node\n     *            the \"description\" schema node\n     * @param parent\n     *            the parent node\n     * @param generatableType\n     *            comment-able code generation construct, usually a java class,\n     *            which should have this description applied\n     * @return the JavaDoc comment created to contain the description\n     */\n    @Override\n    public JDocComment apply(String nodeName, JsonNode node, JsonNode parent, JDocCommentable generatableType, Schema schema) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/267", "ground_truth": "\n        JDocComment javadoc = generatableType.javadoc();\n\n        String descriptionText = node.asText();\n\n        if(StringUtils.isNotBlank(descriptionText)) {\n\n            String[] lines = node.asText().split(\"/\\r?\\n/\");\n\n            for(String line : lines) {\n                javadoc.append(line);\n            }\n        }\n\n        return javadoc;\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "DescriptionRule.java"], "context_start_lineno": 0, "function_name": "apply", "left_context": "class DescriptionRule implements Rule<JDocCommentable, JDocComment> {\n\n    protected DescriptionRule() {\n    }\n\n    /**\n     * Applies this schema rule to take the required code generation steps.\n     * <p>\n     * When a description node is found and applied with this rule, the value of\n     * the description is added as a class level JavaDoc comment.\n     *\n     * @param nodeName\n     *            the name of the object to which this description applies\n     * @param node\n     *            the \"description\" schema node\n     * @param parent\n     *            the parent node\n     * @param generatableType\n     *            comment-able code generation construct, usually a java class,\n     *            which should have this description applied\n     * @return the JavaDoc comment created to contain the description\n     */\n    @Override\n    public JDocComment apply(String nodeName, JsonNode node, JsonNode parent, JDocCommentable generatableType, Schema schema) {", "right_context": "}\n\n}", "class_name": "DescriptionRule", "return_type": "JDocComment", "parameters": [{"type": "String", "name": "nodeName"}, {"type": "JsonNode", "name": "node"}, {"type": "JsonNode", "name": "parent"}, {"type": "JDocCommentable", "name": "generatableType"}, {"type": "Schema", "name": "schema"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Jsonschema2Pojo {\n    /**\n     * Reads the contents of the given source and initiates schema generation.\n     *\n     * @param config\n     *            the configuration options (including source and target paths,\n     *            and other behavioural options) that will control code\n     *            generation\n     * @param logger\n     *            a logger appropriate to the current context, usually a wrapper around the build platform logger\n     * @throws FileNotFoundException\n     *             if the source path is not found\n     * @throws IOException\n     *             if the application is unable to read data from the source\n     */\n    public static void generate(GenerationConfig config, RuleLogger logger) throws IOException {<FILL_FUNCTION_BODY>}\n    \n    private static ContentResolver createContentResolver(GenerationConfig config) {\n        if (config.getSourceType() == SourceType.YAMLSCHEMA || config.getSourceType() == SourceType.YAML) {\n            return new ContentResolver(new YAMLFactory());\n        } else {\n            return new ContentResolver();\n        }\n    }\n\n    private static SchemaGenerator createSchemaGenerator(GenerationConfig config) {\n        if (config.getSourceType() == SourceType.YAMLSCHEMA || config.getSourceType() == SourceType.YAML) {\n            return new SchemaGenerator(new YAMLFactory());\n        } else {\n            return new SchemaGenerator();\n        }\n    }\n\n    private static RuleFactory createRuleFactory(GenerationConfig config) {\n        Class<? extends RuleFactory> clazz = config.getCustomRuleFactory();\n\n        if (!RuleFactory.class.isAssignableFrom(clazz)) {\n            throw new IllegalArgumentException(\"The class name given as a rule factory  (\" + clazz.getName() + \") does not refer to a class that implements \" + RuleFactory.class.getName());\n        }\n\n        try {\n            return clazz.newInstance();\n        } catch (InstantiationException e) {\n            throw new IllegalArgumentException(\"Failed to create a rule factory from the given class. An exception was thrown on trying to create a new instance.\", e.getCause());\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Failed to create a rule factory from the given class. It appears that we do not have access to this class - is both the class and its no-arg constructor marked public?\", e);\n        }\n    }\n\n    private static void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) throws IOException {\n\n        Collections.sort(schemaFiles, config.getSourceSortOrder().getComparator());\n\n        for (File child : schemaFiles) {\n            if (child.isFile()) {\n                if (config.getSourceType() == SourceType.JSON || config.getSourceType() == SourceType.YAML) {\n                    // any cached schemas will have ids that are fragments, relative to the previous document (and shouldn't be reused)\n                    mapper.getRuleFactory().getSchemaStore().clearCache();\n                }\n                mapper.generate(codeModel, getNodeName(child.toURI().toURL(), config), defaultString(packageName), child.toURI().toURL());\n            } else {\n                generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())));\n            }\n        }\n    }\n\n    private static String childQualifiedName(String parentQualifiedName, String childSimpleName) {\n        String safeChildName = childSimpleName.replaceAll(NameHelper.ILLEGAL_CHARACTER_REGEX, \"_\");\n        return isEmpty(parentQualifiedName) ? safeChildName : parentQualifiedName + \".\" + safeChildName;\n    }\n\n    private static void removeOldOutput(File targetDirectory) {\n        if (targetDirectory.exists()) {\n            for (File f : targetDirectory.listFiles()) {\n                delete(f);\n            }\n        }\n    }\n\n    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n    private static void delete(File f) {\n        if (f.isDirectory()) {\n            for (File child : f.listFiles()) {\n                delete(child);\n            }\n        }\n        f.delete();\n    }\n\n    private static Annotator getAnnotator(GenerationConfig config) {\n        AnnotatorFactory factory = new AnnotatorFactory(config);\n        return factory.getAnnotator(factory.getAnnotator(config.getAnnotationStyle()), factory.getAnnotator(config.getCustomAnnotator()));\n    }\n\n    public static String getNodeName(URL file, GenerationConfig config) {\n        return getNodeName(file.toString(), config);\n    }\n\n    public static String getNodeName(String filePath, GenerationConfig config) {\n        try {\n            String fileName = FilenameUtils.getName(URLDecoder.decode(filePath, StandardCharsets.UTF_8.toString()));\n            String[] extensions = config.getFileExtensions() == null ? new String[] {} : config.getFileExtensions();\n            \n            boolean extensionRemoved = false;\n            for (int i = 0; i < extensions.length; i++) {\n                String extension = extensions[i];\n                if (extension.length() == 0) {\n                    continue;\n                }\n                if (!extension.startsWith(\".\")) {\n                    extension = \".\" + extension;\n                }\n                if (fileName.endsWith(extension)) {\n                    fileName = removeEnd(fileName, extension);\n                    extensionRemoved = true;\n                    break;\n                }\n            }\n            if (!extensionRemoved) {\n                fileName = FilenameUtils.getBaseName(fileName);\n            }\n            return fileName;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalArgumentException(String.format(\"Unable to generate node name from URL: %s\", filePath), e);\n        }\n    }\n    \n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/296", "ground_truth": "\n        Annotator annotator = getAnnotator(config);\n        RuleFactory ruleFactory = createRuleFactory(config);\n\n        ruleFactory.setAnnotator(annotator);\n        ruleFactory.setGenerationConfig(config);\n        ruleFactory.setLogger(logger);\n        ruleFactory.setSchemaStore(new SchemaStore(createContentResolver(config), logger));\n\n        SchemaMapper mapper = new SchemaMapper(ruleFactory, createSchemaGenerator(config));\n\n        JCodeModel codeModel = new JCodeModel();\n\n        if (config.isRemoveOldOutput()) {\n            removeOldOutput(config.getTargetDirectory());\n        }\n\n        for (Iterator<URL> sources = config.getSource(); sources.hasNext();) {\n            URL source = sources.next();\n\n            if (URLUtil.parseProtocol(source.toString()) == URLProtocol.FILE && URLUtil.getFileFromURL(source).isDirectory()) {\n                generateRecursive(config, mapper, codeModel, defaultString(config.getTargetPackage()), Arrays.asList(URLUtil.getFileFromURL(source).listFiles(config.getFileFilter())));\n            } else {\n                mapper.generate(codeModel, getNodeName(source, config), defaultString(config.getTargetPackage()), source);\n            }\n        }\n\n        if (config.getTargetDirectory().exists() || config.getTargetDirectory().mkdirs()) {\n            CodeWriter sourcesWriter = new FileCodeWriterWithEncoding(config.getTargetDirectory(), config.getOutputEncoding());\n            CodeWriter resourcesWriter = new FileCodeWriterWithEncoding(config.getTargetDirectory(), config.getOutputEncoding());\n            codeModel.build(sourcesWriter, resourcesWriter);\n        } else {\n            throw new GenerationException(\"Could not create or access target directory \" + config.getTargetDirectory().getAbsolutePath());\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "Jsonschema2Pojo.java"], "context_start_lineno": 0, "function_name": "generate", "left_context": "class Jsonschema2Pojo {\n    /**\n     * Reads the contents of the given source and initiates schema generation.\n     *\n     * @param config\n     *            the configuration options (including source and target paths,\n     *            and other behavioural options) that will control code\n     *            generation\n     * @param logger\n     *            a logger appropriate to the current context, usually a wrapper around the build platform logger\n     * @throws FileNotFoundException\n     *             if the source path is not found\n     * @throws IOException\n     *             if the application is unable to read data from the source\n     */\n    public static void generate(GenerationConfig config, RuleLogger logger) throws IOException {", "right_context": "}\n    \n    private static ContentResolver createContentResolver(GenerationConfig config) {\n        if (config.getSourceType() == SourceType.YAMLSCHEMA || config.getSourceType() == SourceType.YAML) {\n            return new ContentResolver(new YAMLFactory());\n        } else {\n            return new ContentResolver();\n        }\n    }\n\n    private static SchemaGenerator createSchemaGenerator(GenerationConfig config) {\n        if (config.getSourceType() == SourceType.YAMLSCHEMA || config.getSourceType() == SourceType.YAML) {\n            return new SchemaGenerator(new YAMLFactory());\n        } else {\n            return new SchemaGenerator();\n        }\n    }\n\n    private static RuleFactory createRuleFactory(GenerationConfig config) {\n        Class<? extends RuleFactory> clazz = config.getCustomRuleFactory();\n\n        if (!RuleFactory.class.isAssignableFrom(clazz)) {\n            throw new IllegalArgumentException(\"The class name given as a rule factory  (\" + clazz.getName() + \") does not refer to a class that implements \" + RuleFactory.class.getName());\n        }\n\n        try {\n            return clazz.newInstance();\n        } catch (InstantiationException e) {\n            throw new IllegalArgumentException(\"Failed to create a rule factory from the given class. An exception was thrown on trying to create a new instance.\", e.getCause());\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Failed to create a rule factory from the given class. It appears that we do not have access to this class - is both the class and its no-arg constructor marked public?\", e);\n        }\n    }\n\n    private static void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) throws IOException {\n\n        Collections.sort(schemaFiles, config.getSourceSortOrder().getComparator());\n\n        for (File child : schemaFiles) {\n            if (child.isFile()) {\n                if (config.getSourceType() == SourceType.JSON || config.getSourceType() == SourceType.YAML) {\n                    // any cached schemas will have ids that are fragments, relative to the previous document (and shouldn't be reused)\n                    mapper.getRuleFactory().getSchemaStore().clearCache();\n                }\n                mapper.generate(codeModel, getNodeName(child.toURI().toURL(), config), defaultString(packageName), child.toURI().toURL());\n            } else {\n                generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())));\n            }\n        }\n    }\n\n    private static String childQualifiedName(String parentQualifiedName, String childSimpleName) {\n        String safeChildName = childSimpleName.replaceAll(NameHelper.ILLEGAL_CHARACTER_REGEX, \"_\");\n        return isEmpty(parentQualifiedName) ? safeChildName : parentQualifiedName + \".\" + safeChildName;\n    }\n\n    private static void removeOldOutput(File targetDirectory) {\n        if (targetDirectory.exists()) {\n            for (File f : targetDirectory.listFiles()) {\n                delete(f);\n            }\n        }\n    }\n\n    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n    private static void delete(File f) {\n        if (f.isDirectory()) {\n            for (File child : f.listFiles()) {\n                delete(child);\n            }\n        }\n        f.delete();\n    }\n\n    private static Annotator getAnnotator(GenerationConfig config) {\n        AnnotatorFactory factory = new AnnotatorFactory(config);\n        return factory.getAnnotator(factory.getAnnotator(config.getAnnotationStyle()), factory.getAnnotator(config.getCustomAnnotator()));\n    }\n\n    public static String getNodeName(URL file, GenerationConfig config) {\n        return getNodeName(file.toString(), config);\n    }\n\n    public static String getNodeName(String filePath, GenerationConfig config) {\n        try {\n            String fileName = FilenameUtils.getName(URLDecoder.decode(filePath, StandardCharsets.UTF_8.toString()));\n            String[] extensions = config.getFileExtensions() == null ? new String[] {} : config.getFileExtensions();\n            \n            boolean extensionRemoved = false;\n            for (int i = 0; i < extensions.length; i++) {\n                String extension = extensions[i];\n                if (extension.length() == 0) {\n                    continue;\n                }\n                if (!extension.startsWith(\".\")) {\n                    extension = \".\" + extension;\n                }\n                if (fileName.endsWith(extension)) {\n                    fileName = removeEnd(fileName, extension);\n                    extensionRemoved = true;\n                    break;\n                }\n            }\n            if (!extensionRemoved) {\n                fileName = FilenameUtils.getBaseName(fileName);\n            }\n            return fileName;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalArgumentException(String.format(\"Unable to generate node name from URL: %s\", filePath), e);\n        }\n    }\n    \n}", "class_name": "Jsonschema2Pojo", "return_type": "void", "parameters": [{"type": "GenerationConfig", "name": "config"}, {"type": "RuleLogger", "name": "logger"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java\n// --------------------------------------------------\n// private ObjectNode readSchema(URL schemaUrl){\n// switch (ruleFactory.getGenerationConfig().getSourceType()) {\n// case JSONSCHEMA:\n// case YAMLSCHEMA:\n//     ObjectNode schemaNode=NODE_FACTORY.objectNode();\n//   schemaNode.put(\"$ref\",schemaUrl.toString());\n// return schemaNode;\n// case JSON:\n// case YAML:\n// return schemaGenerator.schemaFromExample(schemaUrl);\n// default :\n// throw new IllegalArgumentException(\"Unrecognised source type: \" + ruleFactory.getGenerationConfig().getSourceType());\n// }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/util/NameHelperTest.java\n// --------------------------------------------------\n// private ObjectNode node(String key,String value){\n//   return JsonNodeFactory.instance.objectNode().put(key,value);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SchemaGenerator {\n\n    private final ObjectMapper objectMapper;\n\n    public SchemaGenerator() {\n        this(null);\n    }\n\n    public SchemaGenerator(JsonFactory jsonFactory) {\n        this.objectMapper = new ObjectMapper(jsonFactory)\n                .enable(JsonParser.Feature.ALLOW_COMMENTS)\n                .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n    }\n\n    public ObjectNode schemaFromExample(URL example) {\n\n        try {\n            JsonNode content = this.objectMapper.readTree(example);\n            return schemaFromExample(content);\n        } catch (IOException e) {\n            throw new GenerationException(\"Could not process JSON in source file\", e);\n        }\n\n    }\n\n    public ObjectNode schemaFromExample(JsonNode example) {\n\n        if (example.isObject()) {\n            return objectSchema(example);\n        } else if (example.isArray()) {\n            return arraySchema(example);\n        } else {\n            return simpleTypeSchema(example);\n        }\n\n    }\n\n    private ObjectNode objectSchema(JsonNode exampleObject) {\n\n        ObjectNode schema = this.objectMapper.createObjectNode();\n        schema.put(\"type\", \"object\");\n\n        ObjectNode properties = this.objectMapper.createObjectNode();\n        for (Iterator<String> iter = exampleObject.fieldNames(); iter.hasNext();) {\n            String property = iter.next();\n            properties.set(property, schemaFromExample(exampleObject.get(property)));\n        }\n        schema.set(\"properties\", properties);\n\n        return schema;\n    }\n\n    private ObjectNode arraySchema(JsonNode exampleArray) {\n        ObjectNode schema = this.objectMapper.createObjectNode();\n\n        schema.put(\"type\", \"array\");\n\n        if (exampleArray.size() > 0) {\n\n            JsonNode exampleItem = exampleArray.get(0).isObject() ? mergeArrayItems(exampleArray) : exampleArray.get(0);\n\n            schema.set(\"items\", schemaFromExample(exampleItem));\n        }\n\n        return schema;\n    }\n\n    private JsonNode mergeArrayItems(JsonNode exampleArray) {\n\n        ObjectNode mergedItems = this.objectMapper.createObjectNode();\n\n        for (JsonNode item : exampleArray) {\n            if (item.isObject()) {\n                mergeObjectNodes(mergedItems, (ObjectNode) item);\n            }\n        }\n\n        return mergedItems;\n    }\n\n    private ObjectNode mergeObjectNodes(ObjectNode targetNode, ObjectNode updateNode) {<FILL_FUNCTION_BODY>}\n\n    private ObjectNode simpleTypeSchema(JsonNode exampleValue) {\n\n        try {\n\n            Object valueAsJavaType = this.objectMapper.treeToValue(exampleValue, Object.class);\n\n            SerializerProvider serializerProvider = new DefaultSerializerProvider.Impl().createInstance(this.objectMapper.getSerializationConfig(), BeanSerializerFactory.instance);\n\n            if (valueAsJavaType == null) {\n                SchemaAware valueSerializer = NullSerializer.instance;\n                return (ObjectNode) valueSerializer.getSchema(serializerProvider, null);\n            } else if (valueAsJavaType instanceof Long) {\n                // longs are 'integers' in schema terms\n                SchemaAware valueSerializer = (SchemaAware) serializerProvider.findValueSerializer(Integer.class, null);\n                ObjectNode schema = (ObjectNode) valueSerializer.getSchema(serializerProvider, null);\n                schema.put(\"minimum\", Long.MAX_VALUE);\n                return schema;\n            } else {\n                Class<? extends Object> javaTypeForValue = valueAsJavaType.getClass();\n                SchemaAware valueSerializer = (SchemaAware) serializerProvider.findValueSerializer(javaTypeForValue, null);\n                return (ObjectNode) valueSerializer.getSchema(serializerProvider, null);\n            }\n        } catch (JsonProcessingException e) {\n            throw new GenerationException(\"Unable to generate a schema for this json example: \" + exampleValue, e);\n        }\n\n    }\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/339", "ground_truth": "\n        Iterator<String> fieldNames = updateNode.fieldNames();\n        while (fieldNames.hasNext()) {\n\n            String fieldName = fieldNames.next();\n            JsonNode targetValue = targetNode.get(fieldName);\n            JsonNode updateValue = updateNode.get(fieldName);\n\n            if (targetValue == null) {\n                // Target node doesn't have this field from update node: just add it\n                targetNode.set(fieldName, updateValue);\n\n            } else {\n                // Both nodes have the same field: merge the values\n                if (targetValue.isObject() && updateValue.isObject()) {\n                    // Both values are objects: recurse\n                    targetNode.set(fieldName, mergeObjectNodes((ObjectNode) targetValue, (ObjectNode) updateValue));\n                } else if (targetValue.isArray() && updateValue.isArray()) {\n                    // Both values are arrays: concatenate them to be merged later\n                    ((ArrayNode) targetValue).addAll((ArrayNode) updateValue);\n                } else {\n                    // Values have different types: use the one from the update node\n                    targetNode.set(fieldName, updateValue);\n                }\n            }\n        }\n\n        return targetNode;\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "SchemaGenerator.java"], "context_start_lineno": 0, "function_name": "mergeObjectNodes", "left_context": "class SchemaGenerator {\n\n    private final ObjectMapper objectMapper;\n\n    public SchemaGenerator() {\n        this(null);\n    }\n\n    public SchemaGenerator(JsonFactory jsonFactory) {\n        this.objectMapper = new ObjectMapper(jsonFactory)\n                .enable(JsonParser.Feature.ALLOW_COMMENTS)\n                .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n    }\n\n    public ObjectNode schemaFromExample(URL example) {\n\n        try {\n            JsonNode content = this.objectMapper.readTree(example);\n            return schemaFromExample(content);\n        } catch (IOException e) {\n            throw new GenerationException(\"Could not process JSON in source file\", e);\n        }\n\n    }\n\n    public ObjectNode schemaFromExample(JsonNode example) {\n\n        if (example.isObject()) {\n            return objectSchema(example);\n        } else if (example.isArray()) {\n            return arraySchema(example);\n        } else {\n            return simpleTypeSchema(example);\n        }\n\n    }\n\n    private ObjectNode objectSchema(JsonNode exampleObject) {\n\n        ObjectNode schema = this.objectMapper.createObjectNode();\n        schema.put(\"type\", \"object\");\n\n        ObjectNode properties = this.objectMapper.createObjectNode();\n        for (Iterator<String> iter = exampleObject.fieldNames(); iter.hasNext();) {\n            String property = iter.next();\n            properties.set(property, schemaFromExample(exampleObject.get(property)));\n        }\n        schema.set(\"properties\", properties);\n\n        return schema;\n    }\n\n    private ObjectNode arraySchema(JsonNode exampleArray) {\n        ObjectNode schema = this.objectMapper.createObjectNode();\n\n        schema.put(\"type\", \"array\");\n\n        if (exampleArray.size() > 0) {\n\n            JsonNode exampleItem = exampleArray.get(0).isObject() ? mergeArrayItems(exampleArray) : exampleArray.get(0);\n\n            schema.set(\"items\", schemaFromExample(exampleItem));\n        }\n\n        return schema;\n    }\n\n    private JsonNode mergeArrayItems(JsonNode exampleArray) {\n\n        ObjectNode mergedItems = this.objectMapper.createObjectNode();\n\n        for (JsonNode item : exampleArray) {\n            if (item.isObject()) {\n                mergeObjectNodes(mergedItems, (ObjectNode) item);\n            }\n        }\n\n        return mergedItems;\n    }\n\n    private ObjectNode mergeObjectNodes(ObjectNode targetNode, ObjectNode updateNode) {", "right_context": "}\n\n    private ObjectNode simpleTypeSchema(JsonNode exampleValue) {\n\n        try {\n\n            Object valueAsJavaType = this.objectMapper.treeToValue(exampleValue, Object.class);\n\n            SerializerProvider serializerProvider = new DefaultSerializerProvider.Impl().createInstance(this.objectMapper.getSerializationConfig(), BeanSerializerFactory.instance);\n\n            if (valueAsJavaType == null) {\n                SchemaAware valueSerializer = NullSerializer.instance;\n                return (ObjectNode) valueSerializer.getSchema(serializerProvider, null);\n            } else if (valueAsJavaType instanceof Long) {\n                // longs are 'integers' in schema terms\n                SchemaAware valueSerializer = (SchemaAware) serializerProvider.findValueSerializer(Integer.class, null);\n                ObjectNode schema = (ObjectNode) valueSerializer.getSchema(serializerProvider, null);\n                schema.put(\"minimum\", Long.MAX_VALUE);\n                return schema;\n            } else {\n                Class<? extends Object> javaTypeForValue = valueAsJavaType.getClass();\n                SchemaAware valueSerializer = (SchemaAware) serializerProvider.findValueSerializer(javaTypeForValue, null);\n                return (ObjectNode) valueSerializer.getSchema(serializerProvider, null);\n            }\n        } catch (JsonProcessingException e) {\n            throw new GenerationException(\"Unable to generate a schema for this json example: \" + exampleValue, e);\n        }\n\n    }\n\n}", "class_name": "SchemaGenerator", "return_type": "ObjectNode", "parameters": [{"type": "ObjectNode", "name": "targetNode"}, {"type": "ObjectNode", "name": "updateNode"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PrimitiveTypes {\n\n    private PrimitiveTypes() {\n    }\n\n    /**\n     * Check if a name string refers to a given type.\n     * \n     * @param name\n     *            the name of a Java type\n     * @param owner\n     *            the current code model for type generation\n     * @return <code>true</code> when the given name refers to a primitive Java\n     *         type (e.g. \"int\"), otherwise <code>false</code>\n     */\n    public static boolean isPrimitive(String name, JCodeModel owner) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * Create a primitive type reference (for code generation) using the given\n     * primitive type name.\n     * \n     * @param name\n     *            the name of a primitive Java type\n     * @param owner\n     *            the current code model for type generation\n     * @return a type reference created by the given owner\n     */\n    public static JPrimitiveType primitiveType(String name, JCodeModel owner) {\n        try {\n            return (JPrimitiveType) owner.parseType(name);\n        } catch (ClassNotFoundException e) {\n            throw new GenerationException(\n                    \"Given name does not refer to a primitive type, this type can't be found: \"\n                            + name, e);\n        }\n    }\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/371", "ground_truth": "\n        try {\n            return JType.parse(owner, name) != owner.VOID;\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "PrimitiveTypes.java"], "context_start_lineno": 0, "function_name": "isPrimitive", "left_context": "class PrimitiveTypes {\n\n    private PrimitiveTypes() {\n    }\n\n    /**\n     * Check if a name string refers to a given type.\n     * \n     * @param name\n     *            the name of a Java type\n     * @param owner\n     *            the current code model for type generation\n     * @return <code>true</code> when the given name refers to a primitive Java\n     *         type (e.g. \"int\"), otherwise <code>false</code>\n     */\n    public static boolean isPrimitive(String name, JCodeModel owner) {", "right_context": "}\n\n    /**\n     * Create a primitive type reference (for code generation) using the given\n     * primitive type name.\n     * \n     * @param name\n     *            the name of a primitive Java type\n     * @param owner\n     *            the current code model for type generation\n     * @return a type reference created by the given owner\n     */\n    public static JPrimitiveType primitiveType(String name, JCodeModel owner) {\n        try {\n            return (JPrimitiveType) owner.parseType(name);\n        } catch (ClassNotFoundException e) {\n            throw new GenerationException(\n                    \"Given name does not refer to a primitive type, this type can't be found: \"\n                            + name, e);\n        }\n    }\n\n}", "class_name": "PrimitiveTypes", "return_type": "boolean", "parameters": [{"type": "String", "name": "name"}, {"type": "JCodeModel", "name": "owner"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DescriptionRule.java\n// --------------------------------------------------\n// /** \n//  * Applies this schema rule to take the required code generation steps. <p> When a description node is found and applied with this rule, the value of the description is added as a class level JavaDoc comment.\n//  * @param nodeName the name of the object to which this description applies\n//  * @param node the \"description\" schema node\n//  * @param parent the parent node\n//  * @param generatableType comment-able code generation construct, usually a java class, which should have this description applied\n//  * @return the JavaDoc comment created to contain the description\n//  */\n// @Override public JDocComment apply(String nodeName,JsonNode node,JsonNode parent,JDocCommentable generatableType,Schema schema){\n//   JDocComment javadoc=generatableType.javadoc();\n//   String descriptionText=node.asText();\n//   if (StringUtils.isNotBlank(descriptionText)) {\n//     String[] lines=node.asText().split(\"/\\r?\\n/\");\n//     for (    String line : lines) {\n//       javadoc.append(line);\n//     }\n//   }\n//   return javadoc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/JavaNameRule.java\n// --------------------------------------------------\n// @Override public JDocComment apply(String nodeName,JsonNode node,JsonNode parent,JDocCommentable generatableType,Schema currentSchema){\n//   JDocComment javaDoc=generatableType.javadoc();\n//   javaDoc.append(String.format(\"%nCorresponds to the \\\"%s\\\" property.\",nodeName));\n//   return javaDoc;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// jsonschema2pojo/jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TitleRule.java\n// --------------------------------------------------\n// /** \n//  * Applies this schema rule to take the required code generation steps. <p> When a title node is found and applied with this rule, the value of the title is added as a JavaDoc comment. This rule is typically applied to the generated field, generated getter and generated setter for the property. <p> Note that the title is always inserted at the top of the JavaDoc comment.\n//  * @param nodeName the name of the property to which this title applies\n//  * @param node the \"title\" schema node\n//  * @param parent the parent node\n//  * @param generatableType comment-able code generation construct, usually a field or method, which should have this title applied\n//  * @return the JavaDoc comment created to contain the title\n//  */\n// @Override public JDocComment apply(String nodeName,JsonNode node,JsonNode parent,JDocCommentable generatableType,Schema schema){\n//   JDocComment javadoc=generatableType.javadoc();\n//   javadoc.add(0,node.asText() + \"\\n<p>\\n\");\n//   return javadoc;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CommentRule implements Rule<JDocCommentable, JDocComment> {\n\n    protected CommentRule() {\n    }\n\n    /**\n     * Applies this schema rule to take the required code generation steps.\n     * <p>\n     * When a $comment node is found and applied with this rule, the value of\n     * the $comment is added as a method and field level JavaDoc comment.\n     *\n     * @param nodeName\n     *            the name of the object to which this description applies\n     * @param node\n     *            the \"$comment\" schema node\n     * @param parent\n     *            the parent node\n     * @param generatableType\n     *            comment-able code generation construct, usually a java class,\n     *            which should have this description applied\n     * @return the JavaDoc comment created to contain the description\n     */\n    @Override\n    public JDocComment apply(String nodeName, JsonNode node, JsonNode parent, JDocCommentable generatableType, Schema schema) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/412", "ground_truth": "\n        JDocComment javadoc = generatableType.javadoc();\n\n        String descriptionText = node.asText();\n\n        if(StringUtils.isNotBlank(descriptionText)) {\n\n            String[] lines = node.asText().split(\"/\\r?\\n/\");\n\n            for(String line : lines) {\n                javadoc.append(line);\n            }\n        }\n\n        return javadoc;\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "rules", "CommentRule.java"], "context_start_lineno": 0, "function_name": "apply", "left_context": "class CommentRule implements Rule<JDocCommentable, JDocComment> {\n\n    protected CommentRule() {\n    }\n\n    /**\n     * Applies this schema rule to take the required code generation steps.\n     * <p>\n     * When a $comment node is found and applied with this rule, the value of\n     * the $comment is added as a method and field level JavaDoc comment.\n     *\n     * @param nodeName\n     *            the name of the object to which this description applies\n     * @param node\n     *            the \"$comment\" schema node\n     * @param parent\n     *            the parent node\n     * @param generatableType\n     *            comment-able code generation construct, usually a java class,\n     *            which should have this description applied\n     * @return the JavaDoc comment created to contain the description\n     */\n    @Override\n    public JDocComment apply(String nodeName, JsonNode node, JsonNode parent, JDocCommentable generatableType, Schema schema) {", "right_context": "}\n\n}", "class_name": "CommentRule", "return_type": "JDocComment", "parameters": [{"type": "String", "name": "nodeName"}, {"type": "JsonNode", "name": "node"}, {"type": "JsonNode", "name": "parent"}, {"type": "JDocCommentable", "name": "generatableType"}, {"type": "Schema", "name": "schema"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Jackson2Annotator extends AbstractTypeInfoAwareAnnotator {\n\n    private final JsonInclude.Include inclusionLevel;\n\n    public Jackson2Annotator(GenerationConfig generationConfig) {\n        super(generationConfig);\n        switch (generationConfig.getInclusionLevel()) {\n            case ALWAYS:\n                inclusionLevel = JsonInclude.Include.ALWAYS;\n                break;\n            case NON_ABSENT:\n                inclusionLevel = JsonInclude.Include.NON_ABSENT;\n                break;\n            case NON_DEFAULT:\n                inclusionLevel = JsonInclude.Include.NON_DEFAULT;\n                break;\n            case NON_EMPTY:\n                inclusionLevel = JsonInclude.Include.NON_EMPTY;\n                break;\n            case NON_NULL:\n                inclusionLevel = JsonInclude.Include.NON_NULL;\n                break;\n            case USE_DEFAULTS:\n                inclusionLevel = JsonInclude.Include.USE_DEFAULTS;\n                break;\n            default:\n                inclusionLevel = JsonInclude.Include.NON_NULL;\n                break;\n        }\n\n    }\n\n    @Override\n    public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {\n        JAnnotationArrayMember annotationValue = clazz.annotate(JsonPropertyOrder.class).paramArray(\"value\");\n\n        for (Iterator<String> properties = propertiesNode.fieldNames(); properties.hasNext();) {\n            annotationValue.param(properties.next());\n        }\n    }\n\n    @Override\n    public void propertyInclusion(JDefinedClass clazz, JsonNode schema) {\n        clazz.annotate(JsonInclude.class).param(\"value\", inclusionLevel);\n    }\n\n    @Override\n    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {\n        field.annotate(JsonProperty.class).param(\"value\", propertyName);\n        if (field.type().erasure().equals(field.type().owner().ref(Set.class))) {\n            field.annotate(JsonDeserialize.class).param(\"as\", LinkedHashSet.class);\n        }\n\n        if (propertyNode.has(\"javaJsonView\")) {\n            field.annotate(JsonView.class).param(\n                    \"value\", field.type().owner().ref(propertyNode.get(\"javaJsonView\").asText()));\n        }\n\n        if (propertyNode.has(\"description\")) {\n            field.annotate(JsonPropertyDescription.class).param(\"value\", propertyNode.get(\"description\").asText());\n        }\n    }\n\n    @Override\n    public void propertyGetter(JMethod getter, JDefinedClass clazz, String propertyName) {\n        getter.annotate(JsonProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void propertySetter(JMethod setter, JDefinedClass clazz, String propertyName) {\n        setter.annotate(JsonProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void anyGetter(JMethod getter, JDefinedClass clazz) {\n        getter.annotate(JsonAnyGetter.class);\n    }\n\n    @Override\n    public void anySetter(JMethod setter, JDefinedClass clazz) {\n        setter.annotate(JsonAnySetter.class);\n    }\n\n    @Override\n    public void enumCreatorMethod(JDefinedClass _enum, JMethod creatorMethod) {\n        creatorMethod.annotate(JsonCreator.class);\n    }\n\n    @Override\n    public void enumValueMethod(JDefinedClass _enum, JMethod valueMethod) {\n        valueMethod.annotate(JsonValue.class);\n    }\n\n    @Override\n    public void enumConstant(JDefinedClass _enum, JEnumConstant constant, String value) {\n    }\n\n    @Override\n    public boolean isAdditionalPropertiesSupported() {\n        return true;\n    }\n\n    @Override\n    public void additionalPropertiesField(JFieldVar field, JDefinedClass clazz, String propertyName) {\n        field.annotate(JsonIgnore.class);\n    }\n\n    @Override\n    public void dateField(JFieldVar field, JDefinedClass clazz, JsonNode node) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void timeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n\n        String pattern = null;\n        if (node.has(\"customTimePattern\")) {\n            pattern = node.get(\"customTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomTimePattern())) {\n            pattern = getGenerationConfig().getCustomTimePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_TIME_FORMAT;\n        }\n\n        if (pattern != null && !field.type().fullName().equals(\"java.lang.String\")) {\n            field.annotate(JsonFormat.class).param(\"shape\", JsonFormat.Shape.STRING).param(\"pattern\", pattern);\n        }\n    }\n\n    @Override\n    public void dateTimeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n        String timezone = node.has(\"customTimezone\") ? node.get(\"customTimezone\").asText() : \"UTC\";\n\n        String pattern = null;\n        if (node.has(\"customDateTimePattern\")) {\n            pattern = node.get(\"customDateTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomDateTimePattern())) {\n            pattern = getGenerationConfig().getCustomDateTimePattern();\n        } else if (getGenerationConfig().isFormatDateTimes()) {\n            pattern = FormatRule.ISO_8601_DATETIME_FORMAT;\n        }\n\n        if (pattern != null && !field.type().fullName().equals(\"java.lang.String\")) {\n            field.annotate(JsonFormat.class).param(\"shape\", JsonFormat.Shape.STRING).param(\"pattern\", pattern).param(\"timezone\", timezone);\n        }\n    }\n\n    protected void addJsonTypeInfoAnnotation(JDefinedClass jclass, String propertyName) {\n        JAnnotationUse jsonTypeInfo = jclass.annotate(JsonTypeInfo.class);\n        jsonTypeInfo.param(\"use\", JsonTypeInfo.Id.CLASS);\n        jsonTypeInfo.param(\"include\", JsonTypeInfo.As.PROPERTY);\n\n        // When not provided it will use default provided by \"use\" attribute\n        if (StringUtils.isNotBlank(propertyName)) {\n            jsonTypeInfo.param(\"property\", propertyName);\n        }\n    }\n}", "metadata": {"task_id": "joelittlejohn_jsonschema2pojo/432", "ground_truth": "\n\n        String pattern = null;\n        if (node.has(\"customDatePattern\")) {\n            pattern = node.get(\"customDatePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomDatePattern())) {\n            pattern = getGenerationConfig().getCustomDatePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_DATE_FORMAT;\n        }\n\n        if (pattern != null && !field.type().fullName().equals(\"java.lang.String\")) {\n            field.annotate(JsonFormat.class).param(\"shape\", JsonFormat.Shape.STRING).param(\"pattern\", pattern);\n        }\n    ", "fpath_tuple": ["joelittlejohn_jsonschema2pojo", "jsonschema2pojo", "jsonschema2pojo-core", "src", "main", "java", "org", "jsonschema2pojo", "Jackson2Annotator.java"], "context_start_lineno": 0, "function_name": "dateField", "left_context": "class Jackson2Annotator extends AbstractTypeInfoAwareAnnotator {\n\n    private final JsonInclude.Include inclusionLevel;\n\n    public Jackson2Annotator(GenerationConfig generationConfig) {\n        super(generationConfig);\n        switch (generationConfig.getInclusionLevel()) {\n            case ALWAYS:\n                inclusionLevel = JsonInclude.Include.ALWAYS;\n                break;\n            case NON_ABSENT:\n                inclusionLevel = JsonInclude.Include.NON_ABSENT;\n                break;\n            case NON_DEFAULT:\n                inclusionLevel = JsonInclude.Include.NON_DEFAULT;\n                break;\n            case NON_EMPTY:\n                inclusionLevel = JsonInclude.Include.NON_EMPTY;\n                break;\n            case NON_NULL:\n                inclusionLevel = JsonInclude.Include.NON_NULL;\n                break;\n            case USE_DEFAULTS:\n                inclusionLevel = JsonInclude.Include.USE_DEFAULTS;\n                break;\n            default:\n                inclusionLevel = JsonInclude.Include.NON_NULL;\n                break;\n        }\n\n    }\n\n    @Override\n    public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {\n        JAnnotationArrayMember annotationValue = clazz.annotate(JsonPropertyOrder.class).paramArray(\"value\");\n\n        for (Iterator<String> properties = propertiesNode.fieldNames(); properties.hasNext();) {\n            annotationValue.param(properties.next());\n        }\n    }\n\n    @Override\n    public void propertyInclusion(JDefinedClass clazz, JsonNode schema) {\n        clazz.annotate(JsonInclude.class).param(\"value\", inclusionLevel);\n    }\n\n    @Override\n    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {\n        field.annotate(JsonProperty.class).param(\"value\", propertyName);\n        if (field.type().erasure().equals(field.type().owner().ref(Set.class))) {\n            field.annotate(JsonDeserialize.class).param(\"as\", LinkedHashSet.class);\n        }\n\n        if (propertyNode.has(\"javaJsonView\")) {\n            field.annotate(JsonView.class).param(\n                    \"value\", field.type().owner().ref(propertyNode.get(\"javaJsonView\").asText()));\n        }\n\n        if (propertyNode.has(\"description\")) {\n            field.annotate(JsonPropertyDescription.class).param(\"value\", propertyNode.get(\"description\").asText());\n        }\n    }\n\n    @Override\n    public void propertyGetter(JMethod getter, JDefinedClass clazz, String propertyName) {\n        getter.annotate(JsonProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void propertySetter(JMethod setter, JDefinedClass clazz, String propertyName) {\n        setter.annotate(JsonProperty.class).param(\"value\", propertyName);\n    }\n\n    @Override\n    public void anyGetter(JMethod getter, JDefinedClass clazz) {\n        getter.annotate(JsonAnyGetter.class);\n    }\n\n    @Override\n    public void anySetter(JMethod setter, JDefinedClass clazz) {\n        setter.annotate(JsonAnySetter.class);\n    }\n\n    @Override\n    public void enumCreatorMethod(JDefinedClass _enum, JMethod creatorMethod) {\n        creatorMethod.annotate(JsonCreator.class);\n    }\n\n    @Override\n    public void enumValueMethod(JDefinedClass _enum, JMethod valueMethod) {\n        valueMethod.annotate(JsonValue.class);\n    }\n\n    @Override\n    public void enumConstant(JDefinedClass _enum, JEnumConstant constant, String value) {\n    }\n\n    @Override\n    public boolean isAdditionalPropertiesSupported() {\n        return true;\n    }\n\n    @Override\n    public void additionalPropertiesField(JFieldVar field, JDefinedClass clazz, String propertyName) {\n        field.annotate(JsonIgnore.class);\n    }\n\n    @Override\n    public void dateField(JFieldVar field, JDefinedClass clazz, JsonNode node) {", "right_context": "}\n\n    @Override\n    public void timeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n\n        String pattern = null;\n        if (node.has(\"customTimePattern\")) {\n            pattern = node.get(\"customTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomTimePattern())) {\n            pattern = getGenerationConfig().getCustomTimePattern();\n        } else if (getGenerationConfig().isFormatDates()) {\n            pattern = FormatRule.ISO_8601_TIME_FORMAT;\n        }\n\n        if (pattern != null && !field.type().fullName().equals(\"java.lang.String\")) {\n            field.annotate(JsonFormat.class).param(\"shape\", JsonFormat.Shape.STRING).param(\"pattern\", pattern);\n        }\n    }\n\n    @Override\n    public void dateTimeField(JFieldVar field, JDefinedClass clazz, JsonNode node) {\n        String timezone = node.has(\"customTimezone\") ? node.get(\"customTimezone\").asText() : \"UTC\";\n\n        String pattern = null;\n        if (node.has(\"customDateTimePattern\")) {\n            pattern = node.get(\"customDateTimePattern\").asText();\n        } else if (node.has(\"customPattern\")) {\n            pattern = node.get(\"customPattern\").asText();\n        } else if (isNotEmpty(getGenerationConfig().getCustomDateTimePattern())) {\n            pattern = getGenerationConfig().getCustomDateTimePattern();\n        } else if (getGenerationConfig().isFormatDateTimes()) {\n            pattern = FormatRule.ISO_8601_DATETIME_FORMAT;\n        }\n\n        if (pattern != null && !field.type().fullName().equals(\"java.lang.String\")) {\n            field.annotate(JsonFormat.class).param(\"shape\", JsonFormat.Shape.STRING).param(\"pattern\", pattern).param(\"timezone\", timezone);\n        }\n    }\n\n    protected void addJsonTypeInfoAnnotation(JDefinedClass jclass, String propertyName) {\n        JAnnotationUse jsonTypeInfo = jclass.annotate(JsonTypeInfo.class);\n        jsonTypeInfo.param(\"use\", JsonTypeInfo.Id.CLASS);\n        jsonTypeInfo.param(\"include\", JsonTypeInfo.As.PROPERTY);\n\n        // When not provided it will use default provided by \"use\" attribute\n        if (StringUtils.isNotBlank(propertyName)) {\n            jsonTypeInfo.param(\"property\", propertyName);\n        }\n    }\n}", "class_name": "Jackson2Annotator", "return_type": "void", "parameters": [{"type": "JFieldVar", "name": "field"}, {"type": "JDefinedClass", "name": "clazz"}, {"type": "JsonNode", "name": "node"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/aop/PointcutAdvisor.java\n// --------------------------------------------------\n// Pointcut getPointcut();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AspectJExpressionPointcutAdvisor implements PointcutAdvisor {\n\n\tprivate AspectJExpressionPointcut pointcut;\n\n\tprivate Advice advice;\n\n\tprivate String expression;\n\n\tpublic void setExpression(String expression) {\n\t\tthis.expression = expression;\n\t}\n\n\t@Override\n\tpublic Pointcut getPointcut() {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic Advice getAdvice() {\n\t\treturn advice;\n\t}\n\n\tpublic void setAdvice(Advice advice) {\n\t\tthis.advice = advice;\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/4", "ground_truth": "\n\t\tif (pointcut == null) {\n\t\t\tpointcut = new AspectJExpressionPointcut(expression);\n\t\t}\n\t\treturn pointcut;\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "aop", "aspectj", "AspectJExpressionPointcutAdvisor.java"], "context_start_lineno": 0, "function_name": "getPointcut", "left_context": "class AspectJExpressionPointcutAdvisor implements PointcutAdvisor {\n\n\tprivate AspectJExpressionPointcut pointcut;\n\n\tprivate Advice advice;\n\n\tprivate String expression;\n\n\tpublic void setExpression(String expression) {\n\t\tthis.expression = expression;\n\t}\n\n\t@Override\n\tpublic Pointcut getPointcut() {", "right_context": "}\n\n\t@Override\n\tpublic Advice getAdvice() {\n\t\treturn advice;\n\t}\n\n\tpublic void setAdvice(Advice advice) {\n\t\tthis.advice = advice;\n\t}\n}", "class_name": "AspectJExpressionPointcutAdvisor", "return_type": "Pointcut", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractXmlApplicationContext extends AbstractRefreshableApplicationContext {\n\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {<FILL_FUNCTION_BODY>}\n\n\tprotected abstract String[] getConfigLocations();\n}", "metadata": {"task_id": "DerekYRC_mini-spring/13", "ground_truth": "\n\t\tXmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory, this);\n\t\tString[] configLocations = getConfigLocations();\n\t\tif (configLocations != null) {\n\t\t\tbeanDefinitionReader.loadBeanDefinitions(configLocations);\n\t\t}\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "context", "support", "AbstractXmlApplicationContext.java"], "context_start_lineno": 0, "function_name": "loadBeanDefinitions", "left_context": "class AbstractXmlApplicationContext extends AbstractRefreshableApplicationContext {\n\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {", "right_context": "}\n\n\tprotected abstract String[] getConfigLocations();\n}", "class_name": "AbstractXmlApplicationContext", "return_type": "void", "parameters": [{"type": "DefaultListableBeanFactory", "name": "beanFactory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ApplicationContextAwareProcessor implements BeanPostProcessor {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic ApplicationContextAwareProcessor(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\t\treturn bean;\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/14", "ground_truth": "\n\t\tif (bean instanceof ApplicationContextAware) {\n\t\t\t((ApplicationContextAware) bean).setApplicationContext(applicationContext);\n\t\t}\n\t\treturn bean;\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "context", "support", "ApplicationContextAwareProcessor.java"], "context_start_lineno": 0, "function_name": "postProcessBeforeInitialization", "left_context": "class ApplicationContextAwareProcessor implements BeanPostProcessor {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic ApplicationContextAwareProcessor(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {", "right_context": "}\n\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\t\treturn bean;\n\t}\n}", "class_name": "ApplicationContextAwareProcessor", "return_type": "Object", "parameters": [{"type": "Object", "name": "bean"}, {"type": "String", "name": "beanName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CglibSubclassingInstantiationStrategy implements InstantiationStrategy {\n\n\t/**\n\t * \u4f7f\u7528CGLIB\u52a8\u6001\u751f\u6210\u5b50\u7c7b\n\t *\n\t * @param beanDefinition\n\t * @return\n\t * @throws BeansException\n\t */\n\t@Override\n\tpublic Object instantiate(BeanDefinition beanDefinition) throws BeansException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/30", "ground_truth": "\n\t\tEnhancer enhancer = new Enhancer();\n\t\tenhancer.setSuperclass(beanDefinition.getBeanClass());\n\t\tenhancer.setCallback((MethodInterceptor) (obj, method, argsTemp, proxy) -> proxy.invokeSuper(obj,argsTemp));\n\t\treturn enhancer.create();\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "beans", "factory", "support", "CglibSubclassingInstantiationStrategy.java"], "context_start_lineno": 0, "function_name": "instantiate", "left_context": "class CglibSubclassingInstantiationStrategy implements InstantiationStrategy {\n\n\t/**\n\t * \u4f7f\u7528CGLIB\u52a8\u6001\u751f\u6210\u5b50\u7c7b\n\t *\n\t * @param beanDefinition\n\t * @return\n\t * @throws BeansException\n\t */\n\t@Override\n\tpublic Object instantiate(BeanDefinition beanDefinition) throws BeansException {", "right_context": "}\n}", "class_name": "CglibSubclassingInstantiationStrategy", "return_type": "Object", "parameters": [{"type": "BeanDefinition", "name": "beanDefinition"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConversionServiceFactoryBean implements FactoryBean<ConversionService>, InitializingBean {\n\n\tprivate Set<?> converters;\n\n\tprivate GenericConversionService conversionService;\n\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tconversionService = new DefaultConversionService();\n\t\tregisterConverters(converters, conversionService);\n\t}\n\n\tprivate void registerConverters(Set<?> converters, ConverterRegistry registry) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic ConversionService getObject() throws Exception {\n\t\treturn conversionService;\n\t}\n\n\t@Override\n\tpublic boolean isSingleton() {\n\t\treturn true;\n\t}\n\n\tpublic void setConverters(Set<?> converters) {\n\t\tthis.converters = converters;\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/47", "ground_truth": "\n\t\tif (converters != null) {\n\t\t\tfor (Object converter : converters) {\n\t\t\t\tif (converter instanceof GenericConverter) {\n\t\t\t\t\tregistry.addConverter((GenericConverter) converter);\n\t\t\t\t} else if (converter instanceof Converter<?, ?>) {\n\t\t\t\t\tregistry.addConverter((Converter<?, ?>) converter);\n\t\t\t\t} else if (converter instanceof ConverterFactory<?, ?>) {\n\t\t\t\t\tregistry.addConverterFactory((ConverterFactory<?, ?>) converter);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Each converter object must implement one of the \" +\n\t\t\t\t\t\t\t\"Converter, ConverterFactory, or GenericConverter interfaces\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "context", "support", "ConversionServiceFactoryBean.java"], "context_start_lineno": 0, "function_name": "registerConverters", "left_context": "class ConversionServiceFactoryBean implements FactoryBean<ConversionService>, InitializingBean {\n\n\tprivate Set<?> converters;\n\n\tprivate GenericConversionService conversionService;\n\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tconversionService = new DefaultConversionService();\n\t\tregisterConverters(converters, conversionService);\n\t}\n\n\tprivate void registerConverters(Set<?> converters, ConverterRegistry registry) {", "right_context": "}\n\n\t@Override\n\tpublic ConversionService getObject() throws Exception {\n\t\treturn conversionService;\n\t}\n\n\t@Override\n\tpublic boolean isSingleton() {\n\t\treturn true;\n\t}\n\n\tpublic void setConverters(Set<?> converters) {\n\t\tthis.converters = converters;\n\t}\n}", "class_name": "ConversionServiceFactoryBean", "return_type": "void", "parameters": [{"type": "Set<?>", "name": "converters"}, {"type": "ConverterRegistry", "name": "registry"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ReflectiveMethodInvocation implements MethodInvocation {\n\n\tprotected final Object proxy;\n\n\tprotected final Object target;\n\n\tprotected final Method method;\n\n\tprotected final Object[] arguments;\n\n\tprotected final Class<?> targetClass;\n\n\tprotected final List<Object> interceptorsAndDynamicMethodMatchers;\n\n\tprivate int currentInterceptorIndex = -1;\n\n\tpublic ReflectiveMethodInvocation(Object proxy,Object target, Method method, Object[] arguments,Class<?> targetClass,List<Object> chain) {\n\t\tthis.proxy=proxy;\n\t\tthis.target = target;\n\t\tthis.method = method;\n\t\tthis.arguments = arguments;\n\t\tthis.targetClass=targetClass;\n\t\tthis.interceptorsAndDynamicMethodMatchers=chain;\n\t}\n\n\t@Override\n\tpublic Object proceed() throws Throwable {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic Method getMethod() {\n\t\treturn method;\n\t}\n\n\t@Override\n\tpublic Object[] getArguments() {\n\t\treturn arguments;\n\t}\n\n\t@Override\n\tpublic Object getThis() {\n\t\treturn target;\n\t}\n\n\t@Override\n\tpublic AccessibleObject getStaticPart() {\n\t\treturn method;\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/108", "ground_truth": "\n\t\t// \u521d\u59cbcurrentInterceptorIndex\u4e3a-1\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21proceed\u5c31\u628acurrentInterceptorIndex+1\n\t\tif (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) {\n\t\t\t// \u5f53\u8c03\u7528\u6b21\u6570 = \u62e6\u622a\u5668\u4e2a\u6570\u65f6\n\t\t\t// \u89e6\u53d1\u5f53\u524dmethod\u65b9\u6cd5\n\t\t\treturn method.invoke(this.target, this.arguments);\n\t\t}\n\n\t\tObject interceptorOrInterceptionAdvice =\n\t\t\t\tthis.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);\n\t\t// \u666e\u901a\u62e6\u622a\u5668\uff0c\u76f4\u63a5\u89e6\u53d1\u62e6\u622a\u5668invoke\u65b9\u6cd5\n\t\treturn ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "aop", "framework", "ReflectiveMethodInvocation.java"], "context_start_lineno": 0, "function_name": "proceed", "left_context": "class ReflectiveMethodInvocation implements MethodInvocation {\n\n\tprotected final Object proxy;\n\n\tprotected final Object target;\n\n\tprotected final Method method;\n\n\tprotected final Object[] arguments;\n\n\tprotected final Class<?> targetClass;\n\n\tprotected final List<Object> interceptorsAndDynamicMethodMatchers;\n\n\tprivate int currentInterceptorIndex = -1;\n\n\tpublic ReflectiveMethodInvocation(Object proxy,Object target, Method method, Object[] arguments,Class<?> targetClass,List<Object> chain) {\n\t\tthis.proxy=proxy;\n\t\tthis.target = target;\n\t\tthis.method = method;\n\t\tthis.arguments = arguments;\n\t\tthis.targetClass=targetClass;\n\t\tthis.interceptorsAndDynamicMethodMatchers=chain;\n\t}\n\n\t@Override\n\tpublic Object proceed() throws Throwable {", "right_context": "}\n\n\t@Override\n\tpublic Method getMethod() {\n\t\treturn method;\n\t}\n\n\t@Override\n\tpublic Object[] getArguments() {\n\t\treturn arguments;\n\t}\n\n\t@Override\n\tpublic Object getThis() {\n\t\treturn target;\n\t}\n\n\t@Override\n\tpublic AccessibleObject getStaticPart() {\n\t\treturn method;\n\t}\n}", "class_name": "ReflectiveMethodInvocation", "return_type": "Object", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/beans/factory/BeanFactory.java\n// --------------------------------------------------\n// /** \n//  * \u6839\u636e\u540d\u79f0\u548c\u7c7b\u578b\u67e5\u627ebean\n//  * @param name\n//  * @param requiredType\n//  * @param < T >\n//  * @return\n//  * @throws BeansException\n//  */\n// <T>T getBean(String name,Class<T> requiredType) throws BeansException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/beans/factory/BeanFactory.java\n// --------------------------------------------------\n// <T>T getBean(Class<T> requiredType) throws BeansException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/beans/factory/FactoryBean.java\n// --------------------------------------------------\n// T getObject() throws Exception ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/beans/factory/ObjectFactory.java\n// --------------------------------------------------\n// T getObject() throws BeansException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n// --------------------------------------------------\n// @Override public <T>T getBean(String name,Class<T> requiredType) throws BeansException {\n//   return ((T)getBean(name));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n// --------------------------------------------------\n// public <T>T getBean(Class<T> requiredType) throws BeansException {\n//   List<String> beanNames=new ArrayList<>();\n//   for (  Map.Entry<String,BeanDefinition> entry : beanDefinitionMap.entrySet()) {\n//     Class beanClass=entry.getValue().getBeanClass();\n//     if (requiredType.isAssignableFrom(beanClass)) {\n//       beanNames.add(entry.getKey());\n//     }\n//   }\n//   if (beanNames.size() == 1) {\n//     return getBean(beanNames.get(0),requiredType);\n//   }\n//   throw new BeansException(requiredType + \"expected single bean but found \" + beanNames.size()+ \": \"+ beanNames);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n// --------------------------------------------------\n// @Override public <T>T getBean(String name,Class<T> requiredType) throws BeansException {\n//   return getBeanFactory().getBean(name,requiredType);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n// --------------------------------------------------\n// public <T>T getBean(Class<T> requiredType) throws BeansException {\n//   return getBeanFactory().getBean(requiredType);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/core/convert/ConversionService.java\n// --------------------------------------------------\n// <T>T convert(Object source,Class<T> targetType);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/core/convert/converter/Converter.java\n// --------------------------------------------------\n// /** \n//  * \u7c7b\u578b\u8f6c\u6362\n//  */\n// T convert(S source);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n// --------------------------------------------------\n// @Override public <T>T convert(Object source,Class<T> targetType){\n//   Class<?> sourceType=source.getClass();\n//   targetType=(Class<T>)BasicType.wrap(targetType);\n//   GenericConverter converter=getConverter(sourceType,targetType);\n//   return (T)converter.convert(source,sourceType,targetType);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StringToNumber<T extends Number> implements Converter<String, T> {\n\n\t\tprivate final Class<T> targetType;\n\n\t\tpublic StringToNumber(Class<T> targetType) {\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic T convert(String source) {<FILL_FUNCTION_BODY>}\n\t}", "metadata": {"task_id": "DerekYRC_mini-spring/114", "ground_truth": "\n\t\t\tif (source.length() == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (targetType.equals(Integer.class)) {\n\t\t\t\treturn (T) Integer.valueOf(source);\n\t\t\t} else if (targetType.equals(Long.class)) {\n\t\t\t\treturn (T) Long.valueOf(source);\n\t\t\t}\n\t\t\t//TODO \u5176\u4ed6\u6570\u5b57\u7c7b\u578b\n\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"Cannot convert String [\" + source + \"] to target class [\" + targetType.getName() + \"]\");\n\t\t\t}\n\t\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "core", "convert", "support", "StringToNumberConverterFactory.java"], "context_start_lineno": 0, "function_name": "convert", "left_context": "class StringToNumber<T extends Number> implements Converter<String, T> {\n\n\t\tprivate final Class<T> targetType;\n\n\t\tpublic StringToNumber(Class<T> targetType) {\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic T convert(String source) {", "right_context": "}\n\t}", "class_name": "StringToNumber", "return_type": "T", "parameters": [{"type": "String", "name": "source"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DisposableBeanAdapter implements DisposableBean {\n\n\tprivate final Object bean;\n\n\tprivate final String beanName;\n\n\tprivate final String destroyMethodName;\n\n\tpublic DisposableBeanAdapter(Object bean, String beanName, BeanDefinition beanDefinition) {\n\t\tthis.bean = bean;\n\t\tthis.beanName = beanName;\n\t\tthis.destroyMethodName = beanDefinition.getDestroyMethodName();\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/168", "ground_truth": "\n\t\tif (bean instanceof DisposableBean) {\n\t\t\t((DisposableBean) bean).destroy();\n\t\t}\n\n\t\t//\u907f\u514d\u540c\u65f6\u7ee7\u627f\u81eaDisposableBean\uff0c\u4e14\u81ea\u5b9a\u4e49\u65b9\u6cd5\u4e0eDisposableBean\u65b9\u6cd5\u540c\u540d\uff0c\u9500\u6bc1\u65b9\u6cd5\u6267\u884c\u4e24\u6b21\u7684\u60c5\u51b5\n\t\tif (StrUtil.isNotEmpty(destroyMethodName) && !(bean instanceof DisposableBean && \"destroy\".equals(this.destroyMethodName))) {\n\t\t\t//\u6267\u884c\u81ea\u5b9a\u4e49\u65b9\u6cd5\n\t\t\tMethod destroyMethod = ClassUtil.getPublicMethod(bean.getClass(), destroyMethodName);\n\t\t\tif (destroyMethod == null) {\n\t\t\t\tthrow new BeansException(\"Couldn't find a destroy method named '\" + destroyMethodName + \"' on bean with name '\" + beanName + \"'\");\n\t\t\t}\n\t\t\tdestroyMethod.invoke(bean);\n\t\t}\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "beans", "factory", "support", "DisposableBeanAdapter.java"], "context_start_lineno": 0, "function_name": "destroy", "left_context": "class DisposableBeanAdapter implements DisposableBean {\n\n\tprivate final Object bean;\n\n\tprivate final String beanName;\n\n\tprivate final String destroyMethodName;\n\n\tpublic DisposableBeanAdapter(Object bean, String beanName, BeanDefinition beanDefinition) {\n\t\tthis.bean = bean;\n\t\tthis.beanName = beanName;\n\t\tthis.destroyMethodName = beanDefinition.getDestroyMethodName();\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {", "right_context": "}\n}", "class_name": "DisposableBeanAdapter", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ProxyFactory extends AdvisedSupport {\n\n\n\tpublic ProxyFactory() {\n\t}\n\n\tpublic Object getProxy() {\n\t\treturn createAopProxy().getProxy();\n\t}\n\n\tprivate AopProxy createAopProxy() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/199", "ground_truth": "\n\t\tif (this.isProxyTargetClass() || this.getTargetSource().getTargetClass().length == 0) {\n\t\t\treturn new CglibAopProxy(this);\n\t\t}\n\n\t\treturn new JdkDynamicAopProxy(this);\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "aop", "framework", "ProxyFactory.java"], "context_start_lineno": 0, "function_name": "createAopProxy", "left_context": "class ProxyFactory extends AdvisedSupport {\n\n\n\tpublic ProxyFactory() {\n\t}\n\n\tpublic Object getProxy() {\n\t\treturn createAopProxy().getProxy();\n\t}\n\n\tprivate AopProxy createAopProxy() {", "right_context": "}\n}", "class_name": "ProxyFactory", "return_type": "AopProxy", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass XmlBeanDefinitionReader extends AbstractBeanDefinitionReader {\n\n\tpublic static final String BEAN_ELEMENT = \"bean\";\n\tpublic static final String PROPERTY_ELEMENT = \"property\";\n\tpublic static final String ID_ATTRIBUTE = \"id\";\n\tpublic static final String NAME_ATTRIBUTE = \"name\";\n\tpublic static final String CLASS_ATTRIBUTE = \"class\";\n\tpublic static final String VALUE_ATTRIBUTE = \"value\";\n\tpublic static final String REF_ATTRIBUTE = \"ref\";\n\tpublic static final String INIT_METHOD_ATTRIBUTE = \"init-method\";\n\tpublic static final String DESTROY_METHOD_ATTRIBUTE = \"destroy-method\";\n\tpublic static final String SCOPE_ATTRIBUTE = \"scope\";\n\tpublic static final String LAZYINIT_ATTRIBUTE = \"lazyInit\";\n\tpublic static final String BASE_PACKAGE_ATTRIBUTE = \"base-package\";\n\tpublic static final String COMPONENT_SCAN_ELEMENT = \"component-scan\";\n\n\tpublic XmlBeanDefinitionReader(BeanDefinitionRegistry registry) {\n\t\tsuper(registry);\n\t}\n\n\tpublic XmlBeanDefinitionReader(BeanDefinitionRegistry registry, ResourceLoader resourceLoader) {\n\t\tsuper(registry, resourceLoader);\n\t}\n\n\t@Override\n\tpublic void loadBeanDefinitions(String location) throws BeansException {\n\t\tResourceLoader resourceLoader = getResourceLoader();\n\t\tResource resource = resourceLoader.getResource(location);\n\t\tloadBeanDefinitions(resource);\n\t}\n\n\t@Override\n\tpublic void loadBeanDefinitions(Resource resource) throws BeansException {\n\t\ttry {\n\t\t\tInputStream inputStream = resource.getInputStream();\n\t\t\ttry {\n\t\t\t\tdoLoadBeanDefinitions(inputStream);\n\t\t\t} finally {\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t} catch (IOException | DocumentException ex) {\n\t\t\tthrow new BeansException(\"IOException parsing XML document from \" + resource, ex);\n\t\t}\n\t}\n\n\tprotected void doLoadBeanDefinitions(InputStream inputStream) throws DocumentException {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * \u626b\u63cf\u6ce8\u89e3Component\u7684\u7c7b\uff0c\u63d0\u53d6\u4fe1\u606f\uff0c\u7ec4\u88c5\u6210BeanDefinition\n\t *\n\t * @param scanPath\n\t */\n\tprivate void scanPackage(String scanPath) {\n\t\tString[] basePackages = StrUtil.splitToArray(scanPath, ',');\n\t\tClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(getRegistry());\n\t\tscanner.doScan(basePackages);\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/224", "ground_truth": "\n\t\tSAXReader reader = new SAXReader();\n\t\tDocument document = reader.read(inputStream);\n\n\t\tElement root = document.getRootElement();\n\n\t\t//\u89e3\u6790context:component-scan\u6807\u7b7e\u5e76\u626b\u63cf\u6307\u5b9a\u5305\u4e2d\u7684\u7c7b\uff0c\u63d0\u53d6\u7c7b\u4fe1\u606f\uff0c\u7ec4\u88c5\u6210BeanDefinition\n\t\tElement componentScan = root.element(COMPONENT_SCAN_ELEMENT);\n\t\tif (componentScan != null) {\n\t\t\tString scanPath = componentScan.attributeValue(BASE_PACKAGE_ATTRIBUTE);\n\t\t\tif (StrUtil.isEmpty(scanPath)) {\n\t\t\t\tthrow new BeansException(\"The value of base-package attribute can not be empty or null\");\n\t\t\t}\n\t\t\tscanPackage(scanPath);\n\t\t}\n\n\t\tList<Element> beanList = root.elements(BEAN_ELEMENT);\n\t\tfor (Element bean : beanList) {\n\t\t\tString beanId = bean.attributeValue(ID_ATTRIBUTE);\n\t\t\tString beanName = bean.attributeValue(NAME_ATTRIBUTE);\n\t\t\tString className = bean.attributeValue(CLASS_ATTRIBUTE);\n\t\t\tString initMethodName = bean.attributeValue(INIT_METHOD_ATTRIBUTE);\n\t\t\tString destroyMethodName = bean.attributeValue(DESTROY_METHOD_ATTRIBUTE);\n\t\t\tString beanScope = bean.attributeValue(SCOPE_ATTRIBUTE);\n\t\t\tString lazyInit = bean.attributeValue(LAZYINIT_ATTRIBUTE);\n\t\t\tClass<?> clazz;\n\t\t\ttry {\n\t\t\t\tclazz = Class.forName(className);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new BeansException(\"Cannot find class [\" + className + \"]\");\n\t\t\t}\n\t\t\t//id\u4f18\u5148\u4e8ename\n\t\t\tbeanName = StrUtil.isNotEmpty(beanId) ? beanId : beanName;\n\t\t\tif (StrUtil.isEmpty(beanName)) {\n\t\t\t\t//\u5982\u679cid\u548cname\u90fd\u4e3a\u7a7a\uff0c\u5c06\u7c7b\u540d\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8f6c\u4e3a\u5c0f\u5199\u540e\u4f5c\u4e3abean\u7684\u540d\u79f0\n\t\t\t\tbeanName = StrUtil.lowerFirst(clazz.getSimpleName());\n\t\t\t}\n\n\t\t\tBeanDefinition beanDefinition = new BeanDefinition(clazz);\n\t\t\tbeanDefinition.setInitMethodName(initMethodName);\n\t\t\tbeanDefinition.setDestroyMethodName(destroyMethodName);\n\t\t\tbeanDefinition.setLazyInit(Boolean.parseBoolean(lazyInit));\n\t\t\tif (StrUtil.isNotEmpty(beanScope)) {\n\t\t\t\tbeanDefinition.setScope(beanScope);\n\t\t\t}\n\n\t\t\tList<Element> propertyList = bean.elements(PROPERTY_ELEMENT);\n\t\t\tfor (Element property : propertyList) {\n\t\t\t\tString propertyNameAttribute = property.attributeValue(NAME_ATTRIBUTE);\n\t\t\t\tString propertyValueAttribute = property.attributeValue(VALUE_ATTRIBUTE);\n\t\t\t\tString propertyRefAttribute = property.attributeValue(REF_ATTRIBUTE);\n\n\t\t\t\tif (StrUtil.isEmpty(propertyNameAttribute)) {\n\t\t\t\t\tthrow new BeansException(\"The name attribute cannot be null or empty\");\n\t\t\t\t}\n\n\t\t\t\tObject value = propertyValueAttribute;\n\t\t\t\tif (StrUtil.isNotEmpty(propertyRefAttribute)) {\n\t\t\t\t\tvalue = new BeanReference(propertyRefAttribute);\n\t\t\t\t}\n\t\t\t\tPropertyValue propertyValue = new PropertyValue(propertyNameAttribute, value);\n\t\t\t\tbeanDefinition.getPropertyValues().addPropertyValue(propertyValue);\n\t\t\t}\n\t\t\tif (getRegistry().containsBeanDefinition(beanName)) {\n\t\t\t\t//beanName\u4e0d\u80fd\u91cd\u540d\n\t\t\t\tthrow new BeansException(\"Duplicate beanName[\" + beanName + \"] is not allowed\");\n\t\t\t}\n\t\t\t//\u6ce8\u518cBeanDefinition\n\t\t\tgetRegistry().registerBeanDefinition(beanName, beanDefinition);\n\t\t}\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "beans", "factory", "xml", "XmlBeanDefinitionReader.java"], "context_start_lineno": 0, "function_name": "doLoadBeanDefinitions", "left_context": "class XmlBeanDefinitionReader extends AbstractBeanDefinitionReader {\n\n\tpublic static final String BEAN_ELEMENT = \"bean\";\n\tpublic static final String PROPERTY_ELEMENT = \"property\";\n\tpublic static final String ID_ATTRIBUTE = \"id\";\n\tpublic static final String NAME_ATTRIBUTE = \"name\";\n\tpublic static final String CLASS_ATTRIBUTE = \"class\";\n\tpublic static final String VALUE_ATTRIBUTE = \"value\";\n\tpublic static final String REF_ATTRIBUTE = \"ref\";\n\tpublic static final String INIT_METHOD_ATTRIBUTE = \"init-method\";\n\tpublic static final String DESTROY_METHOD_ATTRIBUTE = \"destroy-method\";\n\tpublic static final String SCOPE_ATTRIBUTE = \"scope\";\n\tpublic static final String LAZYINIT_ATTRIBUTE = \"lazyInit\";\n\tpublic static final String BASE_PACKAGE_ATTRIBUTE = \"base-package\";\n\tpublic static final String COMPONENT_SCAN_ELEMENT = \"component-scan\";\n\n\tpublic XmlBeanDefinitionReader(BeanDefinitionRegistry registry) {\n\t\tsuper(registry);\n\t}\n\n\tpublic XmlBeanDefinitionReader(BeanDefinitionRegistry registry, ResourceLoader resourceLoader) {\n\t\tsuper(registry, resourceLoader);\n\t}\n\n\t@Override\n\tpublic void loadBeanDefinitions(String location) throws BeansException {\n\t\tResourceLoader resourceLoader = getResourceLoader();\n\t\tResource resource = resourceLoader.getResource(location);\n\t\tloadBeanDefinitions(resource);\n\t}\n\n\t@Override\n\tpublic void loadBeanDefinitions(Resource resource) throws BeansException {\n\t\ttry {\n\t\t\tInputStream inputStream = resource.getInputStream();\n\t\t\ttry {\n\t\t\t\tdoLoadBeanDefinitions(inputStream);\n\t\t\t} finally {\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t} catch (IOException | DocumentException ex) {\n\t\t\tthrow new BeansException(\"IOException parsing XML document from \" + resource, ex);\n\t\t}\n\t}\n\n\tprotected void doLoadBeanDefinitions(InputStream inputStream) throws DocumentException {", "right_context": "}\n\n\t/**\n\t * \u626b\u63cf\u6ce8\u89e3Component\u7684\u7c7b\uff0c\u63d0\u53d6\u4fe1\u606f\uff0c\u7ec4\u88c5\u6210BeanDefinition\n\t *\n\t * @param scanPath\n\t */\n\tprivate void scanPackage(String scanPath) {\n\t\tString[] basePackages = StrUtil.splitToArray(scanPath, ',');\n\t\tClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(getRegistry());\n\t\tscanner.doScan(basePackages);\n\t}\n}", "class_name": "XmlBeanDefinitionReader", "return_type": "void", "parameters": [{"type": "InputStream", "name": "inputStream"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractBeanFactory extends DefaultSingletonBeanRegistry implements ConfigurableBeanFactory {\n\n\tprivate final List<BeanPostProcessor> beanPostProcessors = new ArrayList<>();\n\n\tprivate final Map<String, Object> factoryBeanObjectCache = new HashMap<>();\n\n\tprivate final List<StringValueResolver> embeddedValueResolvers = new ArrayList<StringValueResolver>();\n\n\tprivate ConversionService conversionService;\n\n\n\t@Override\n\tpublic Object getBean(String name) throws BeansException {\n\t\tObject sharedInstance = getSingleton(name);\n\t\tif (sharedInstance != null) {\n\t\t\t//\u5982\u679c\u662fFactoryBean\uff0c\u4eceFactoryBean#getObject\u4e2d\u521b\u5efabean\n\t\t\treturn getObjectForBeanInstance(sharedInstance, name);\n\t\t}\n\n\t\tBeanDefinition beanDefinition = getBeanDefinition(name);\n\t\tObject bean = createBean(name, beanDefinition);\n\t\treturn getObjectForBeanInstance(bean, name);\n\t}\n\n\t/**\n\t * \u5982\u679c\u662fFactoryBean\uff0c\u4eceFactoryBean#getObject\u4e2d\u521b\u5efabean\n\t *\n\t * @param beanInstance\n\t * @param beanName\n\t * @return\n\t */\n\tprotected Object getObjectForBeanInstance(Object beanInstance, String beanName) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic <T> T getBean(String name, Class<T> requiredType) throws BeansException {\n\t\treturn ((T) getBean(name));\n\t}\n\n\t@Override\n\tpublic boolean containsBean(String name) {\n\t\treturn containsBeanDefinition(name);\n\t}\n\n\tprotected abstract boolean containsBeanDefinition(String beanName);\n\n\tprotected abstract Object createBean(String beanName, BeanDefinition beanDefinition) throws BeansException;\n\n\tprotected abstract BeanDefinition getBeanDefinition(String beanName) throws BeansException;\n\n\t@Override\n\tpublic void addBeanPostProcessor(BeanPostProcessor beanPostProcessor) {\n\t\t//\u6709\u5219\u8986\u76d6\n\t\tthis.beanPostProcessors.remove(beanPostProcessor);\n\t\tthis.beanPostProcessors.add(beanPostProcessor);\n\t}\n\n\tpublic List<BeanPostProcessor> getBeanPostProcessors() {\n\t\treturn this.beanPostProcessors;\n\t}\n\n\tpublic void addEmbeddedValueResolver(StringValueResolver valueResolver) {\n\t\tthis.embeddedValueResolvers.add(valueResolver);\n\t}\n\n\tpublic String resolveEmbeddedValue(String value) {\n\t\tString result = value;\n\t\tfor (StringValueResolver resolver : this.embeddedValueResolvers) {\n\t\t\tresult = resolver.resolveStringValue(result);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic ConversionService getConversionService() {\n\t\treturn conversionService;\n\t}\n\n\t@Override\n\tpublic void setConversionService(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/238", "ground_truth": "\n\t\tObject object = beanInstance;\n\t\tif (beanInstance instanceof FactoryBean) {\n\t\t\tFactoryBean factoryBean = (FactoryBean) beanInstance;\n\t\t\ttry {\n\t\t\t\tif (factoryBean.isSingleton()) {\n\t\t\t\t\t//singleton\u4f5c\u7528\u57dfbean\uff0c\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\n\t\t\t\t\tobject = this.factoryBeanObjectCache.get(beanName);\n\t\t\t\t\tif (object == null) {\n\t\t\t\t\t\tobject = factoryBean.getObject();\n\t\t\t\t\t\tthis.factoryBeanObjectCache.put(beanName, object);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//prototype\u4f5c\u7528\u57dfbean\uff0c\u65b0\u521b\u5efabean\n\t\t\t\t\tobject = factoryBean.getObject();\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow new BeansException(\"FactoryBean threw exception on object[\" + beanName + \"] creation\", ex);\n\t\t\t}\n\t\t}\n\n\t\treturn object;\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "beans", "factory", "support", "AbstractBeanFactory.java"], "context_start_lineno": 0, "function_name": "getObjectForBeanInstance", "left_context": "class AbstractBeanFactory extends DefaultSingletonBeanRegistry implements ConfigurableBeanFactory {\n\n\tprivate final List<BeanPostProcessor> beanPostProcessors = new ArrayList<>();\n\n\tprivate final Map<String, Object> factoryBeanObjectCache = new HashMap<>();\n\n\tprivate final List<StringValueResolver> embeddedValueResolvers = new ArrayList<StringValueResolver>();\n\n\tprivate ConversionService conversionService;\n\n\n\t@Override\n\tpublic Object getBean(String name) throws BeansException {\n\t\tObject sharedInstance = getSingleton(name);\n\t\tif (sharedInstance != null) {\n\t\t\t//\u5982\u679c\u662fFactoryBean\uff0c\u4eceFactoryBean#getObject\u4e2d\u521b\u5efabean\n\t\t\treturn getObjectForBeanInstance(sharedInstance, name);\n\t\t}\n\n\t\tBeanDefinition beanDefinition = getBeanDefinition(name);\n\t\tObject bean = createBean(name, beanDefinition);\n\t\treturn getObjectForBeanInstance(bean, name);\n\t}\n\n\t/**\n\t * \u5982\u679c\u662fFactoryBean\uff0c\u4eceFactoryBean#getObject\u4e2d\u521b\u5efabean\n\t *\n\t * @param beanInstance\n\t * @param beanName\n\t * @return\n\t */\n\tprotected Object getObjectForBeanInstance(Object beanInstance, String beanName) {", "right_context": "}\n\n\t@Override\n\tpublic <T> T getBean(String name, Class<T> requiredType) throws BeansException {\n\t\treturn ((T) getBean(name));\n\t}\n\n\t@Override\n\tpublic boolean containsBean(String name) {\n\t\treturn containsBeanDefinition(name);\n\t}\n\n\tprotected abstract boolean containsBeanDefinition(String beanName);\n\n\tprotected abstract Object createBean(String beanName, BeanDefinition beanDefinition) throws BeansException;\n\n\tprotected abstract BeanDefinition getBeanDefinition(String beanName) throws BeansException;\n\n\t@Override\n\tpublic void addBeanPostProcessor(BeanPostProcessor beanPostProcessor) {\n\t\t//\u6709\u5219\u8986\u76d6\n\t\tthis.beanPostProcessors.remove(beanPostProcessor);\n\t\tthis.beanPostProcessors.add(beanPostProcessor);\n\t}\n\n\tpublic List<BeanPostProcessor> getBeanPostProcessors() {\n\t\treturn this.beanPostProcessors;\n\t}\n\n\tpublic void addEmbeddedValueResolver(StringValueResolver valueResolver) {\n\t\tthis.embeddedValueResolvers.add(valueResolver);\n\t}\n\n\tpublic String resolveEmbeddedValue(String value) {\n\t\tString result = value;\n\t\tfor (StringValueResolver resolver : this.embeddedValueResolvers) {\n\t\t\tresult = resolver.resolveStringValue(result);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic ConversionService getConversionService() {\n\t\treturn conversionService;\n\t}\n\n\t@Override\n\tpublic void setConversionService(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n}", "class_name": "AbstractBeanFactory", "return_type": "Object", "parameters": [{"type": "Object", "name": "beanInstance"}, {"type": "String", "name": "beanName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DefaultSingletonBeanRegistry implements SingletonBeanRegistry {\n\n\t /**\n\t  * \u4e00\u7ea7\u7f13\u5b58\n\t  */\n\tprivate Map<String, Object> singletonObjects = new HashMap<>();\n\n\t /**\n\t  * \u4e8c\u7ea7\u7f13\u5b58\n\t  */\n\tprivate Map<String, Object> earlySingletonObjects = new HashMap<>();\n\n\t /**\n\t  * \u4e09\u7ea7\u7f13\u5b58\n\t  */\n\tprivate Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>();\n\n\tprivate final Map<String, DisposableBean> disposableBeans = new HashMap<>();\n\n\t@Override\n\tpublic Object getSingleton(String beanName) {<FILL_FUNCTION_BODY>}\n\n\t@Override\n\tpublic void addSingleton(String beanName, Object singletonObject) {\n\t\tsingletonObjects.put(beanName, singletonObject); // 1\n\t\tearlySingletonObjects.remove(beanName); // 2\n\t\tsingletonFactories.remove(beanName); // 3\n\t}\n\n\tprotected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {\n\t\tsingletonFactories.put(beanName, singletonFactory);\n\t}\n\n\tpublic void registerDisposableBean(String beanName, DisposableBean bean) {\n\t\tdisposableBeans.put(beanName, bean);\n\t}\n\n\tpublic void destroySingletons() {\n\t\tArrayList<String> beanNames = new ArrayList<>(disposableBeans.keySet());\n\t\tfor (String beanName : beanNames) {\n\t\t\tDisposableBean disposableBean = disposableBeans.remove(beanName);\n\t\t\ttry {\n\t\t\t\tdisposableBean.destroy();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new BeansException(\"Destroy method on bean with name '\" + beanName + \"' threw an exception\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/290", "ground_truth": "\n\t\tObject singletonObject = singletonObjects.get(beanName);\n\t\tif (singletonObject == null) {\n\t\t\tsingletonObject = earlySingletonObjects.get(beanName);\n\t\t\tif (singletonObject == null) {\n\t\t\t\tObjectFactory<?> singletonFactory = singletonFactories.get(beanName);\n\t\t\t\tif (singletonFactory != null) {\n\t\t\t\t\tsingletonObject = singletonFactory.getObject();\n\t\t\t\t\t//\u4ece\u4e09\u7ea7\u7f13\u5b58\u653e\u8fdb\u4e8c\u7ea7\u7f13\u5b58\n\t\t\t\t\tearlySingletonObjects.put(beanName, singletonObject);\n\t\t\t\t\tsingletonFactories.remove(beanName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn singletonObject;\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "beans", "factory", "support", "DefaultSingletonBeanRegistry.java"], "context_start_lineno": 0, "function_name": "getSingleton", "left_context": "class DefaultSingletonBeanRegistry implements SingletonBeanRegistry {\n\n\t /**\n\t  * \u4e00\u7ea7\u7f13\u5b58\n\t  */\n\tprivate Map<String, Object> singletonObjects = new HashMap<>();\n\n\t /**\n\t  * \u4e8c\u7ea7\u7f13\u5b58\n\t  */\n\tprivate Map<String, Object> earlySingletonObjects = new HashMap<>();\n\n\t /**\n\t  * \u4e09\u7ea7\u7f13\u5b58\n\t  */\n\tprivate Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>();\n\n\tprivate final Map<String, DisposableBean> disposableBeans = new HashMap<>();\n\n\t@Override\n\tpublic Object getSingleton(String beanName) {", "right_context": "}\n\n\t@Override\n\tpublic void addSingleton(String beanName, Object singletonObject) {\n\t\tsingletonObjects.put(beanName, singletonObject); // 1\n\t\tearlySingletonObjects.remove(beanName); // 2\n\t\tsingletonFactories.remove(beanName); // 3\n\t}\n\n\tprotected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {\n\t\tsingletonFactories.put(beanName, singletonFactory);\n\t}\n\n\tpublic void registerDisposableBean(String beanName, DisposableBean bean) {\n\t\tdisposableBeans.put(beanName, bean);\n\t}\n\n\tpublic void destroySingletons() {\n\t\tArrayList<String> beanNames = new ArrayList<>(disposableBeans.keySet());\n\t\tfor (String beanName : beanNames) {\n\t\t\tDisposableBean disposableBean = disposableBeans.remove(beanName);\n\t\t\ttry {\n\t\t\t\tdisposableBean.destroy();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new BeansException(\"Destroy method on bean with name '\" + beanName + \"' threw an exception\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "class_name": "DefaultSingletonBeanRegistry", "return_type": "Object", "parameters": [{"type": "String", "name": "beanName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DynamicAdvisedInterceptor implements MethodInterceptor {\n\n\t\tprivate final AdvisedSupport advised;\n\n\t\tprivate DynamicAdvisedInterceptor(AdvisedSupport advised) {\n\t\t\tthis.advised = advised;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {<FILL_FUNCTION_BODY>}\n\t}", "metadata": {"task_id": "DerekYRC_mini-spring/291", "ground_truth": "\n\t\t\t// \u83b7\u53d6\u76ee\u6807\u5bf9\u8c61\n\t\t\tObject target = advised.getTargetSource().getTarget();\n\t\t\tClass<?> targetClass = target.getClass();\n\t\t\tObject retVal = null;\n\t\t\tList<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\t\t\tCglibMethodInvocation methodInvocation = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy);\n\t\t\tif (chain == null || chain.isEmpty()) {\n\t\t\t\t//\u4ee3\u7406\u65b9\u6cd5\n\t\t\t\tretVal = methodProxy.invoke(target, args);\n\t\t\t} else {\n\t\t\t\tretVal = methodInvocation.proceed();\n\t\t\t}\n\t\t\treturn retVal;\n\t\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "aop", "framework", "CglibAopProxy.java"], "context_start_lineno": 0, "function_name": "intercept", "left_context": "class DynamicAdvisedInterceptor implements MethodInterceptor {\n\n\t\tprivate final AdvisedSupport advised;\n\n\t\tprivate DynamicAdvisedInterceptor(AdvisedSupport advised) {\n\t\t\tthis.advised = advised;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {", "right_context": "}\n\t}", "class_name": "DynamicAdvisedInterceptor", "return_type": "Object", "parameters": [{"type": "Object", "name": "proxy"}, {"type": "Method", "name": "method"}, {"type": "Object[]", "name": "args"}, {"type": "MethodProxy", "name": "methodProxy"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AfterReturningAdviceInterceptor implements MethodInterceptor, AfterAdvice {\n\n\tprivate AfterReturningAdvice advice;\n\n\tpublic AfterReturningAdviceInterceptor() {\n\t}\n\n\tpublic AfterReturningAdviceInterceptor(AfterReturningAdvice advice) {\n\t\tthis.advice = advice;\n\t}\n\n\n\t@Override\n\tpublic Object invoke(MethodInvocation mi) throws Throwable {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/318", "ground_truth": "\n\t\tObject retVal = mi.proceed();\n\t\tthis.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());\n\t\treturn retVal;\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "aop", "framework", "adapter", "AfterReturningAdviceInterceptor.java"], "context_start_lineno": 0, "function_name": "invoke", "left_context": "class AfterReturningAdviceInterceptor implements MethodInterceptor, AfterAdvice {\n\n\tprivate AfterReturningAdvice advice;\n\n\tpublic AfterReturningAdviceInterceptor() {\n\t}\n\n\tpublic AfterReturningAdviceInterceptor(AfterReturningAdvice advice) {\n\t\tthis.advice = advice;\n\t}\n\n\n\t@Override\n\tpublic Object invoke(MethodInvocation mi) throws Throwable {", "right_context": "}\n}", "class_name": "AfterReturningAdviceInterceptor", "return_type": "Object", "parameters": [{"type": "MethodInvocation", "name": "mi"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider {\n\n\tpublic static final String AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME = \"org.springframework.context.annotation.internalAutowiredAnnotationProcessor\";\n\n\tprivate BeanDefinitionRegistry registry;\n\n\tpublic ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tpublic void doScan(String... basePackages) {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * \u83b7\u53d6bean\u7684\u4f5c\u7528\u57df\n\t *\n\t * @param beanDefinition\n\t * @return\n\t */\n\tprivate String resolveBeanScope(BeanDefinition beanDefinition) {\n\t\tClass<?> beanClass = beanDefinition.getBeanClass();\n\t\tScope scope = beanClass.getAnnotation(Scope.class);\n\t\tif (scope != null) {\n\t\t\treturn scope.value();\n\t\t}\n\n\t\treturn StrUtil.EMPTY;\n\t}\n\n\n\t/**\n\t * \u751f\u6210bean\u7684\u540d\u79f0\n\t *\n\t * @param beanDefinition\n\t * @return\n\t */\n\tprivate String determineBeanName(BeanDefinition beanDefinition) {\n\t\tClass<?> beanClass = beanDefinition.getBeanClass();\n\t\tComponent component = beanClass.getAnnotation(Component.class);\n\t\tString value = component.value();\n\t\tif (StrUtil.isEmpty(value)) {\n\t\t\tvalue = StrUtil.lowerFirst(beanClass.getSimpleName());\n\t\t}\n\t\treturn value;\n\t}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/345", "ground_truth": "\n\t\tfor (String basePackage : basePackages) {\n\t\t\tSet<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\t\t\tfor (BeanDefinition candidate : candidates) {\n\t\t\t\t// \u89e3\u6790bean\u7684\u4f5c\u7528\u57df\n\t\t\t\tString beanScope = resolveBeanScope(candidate);\n\t\t\t\tif (StrUtil.isNotEmpty(beanScope)) {\n\t\t\t\t\tcandidate.setScope(beanScope);\n\t\t\t\t}\n\t\t\t\t//\u751f\u6210bean\u7684\u540d\u79f0\n\t\t\t\tString beanName = determineBeanName(candidate);\n\t\t\t\t//\u6ce8\u518cBeanDefinition\n\t\t\t\tregistry.registerBeanDefinition(beanName, candidate);\n\t\t\t}\n\t\t}\n\n\t\t//\u6ce8\u518c\u5904\u7406@Autowired\u548c@Value\u6ce8\u89e3\u7684BeanPostProcessor\n\t\tregistry.registerBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, new BeanDefinition(AutowiredAnnotationBeanPostProcessor.class));\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "context", "annotation", "ClassPathBeanDefinitionScanner.java"], "context_start_lineno": 0, "function_name": "doScan", "left_context": "class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider {\n\n\tpublic static final String AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME = \"org.springframework.context.annotation.internalAutowiredAnnotationProcessor\";\n\n\tprivate BeanDefinitionRegistry registry;\n\n\tpublic ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tpublic void doScan(String... basePackages) {", "right_context": "}\n\n\t/**\n\t * \u83b7\u53d6bean\u7684\u4f5c\u7528\u57df\n\t *\n\t * @param beanDefinition\n\t * @return\n\t */\n\tprivate String resolveBeanScope(BeanDefinition beanDefinition) {\n\t\tClass<?> beanClass = beanDefinition.getBeanClass();\n\t\tScope scope = beanClass.getAnnotation(Scope.class);\n\t\tif (scope != null) {\n\t\t\treturn scope.value();\n\t\t}\n\n\t\treturn StrUtil.EMPTY;\n\t}\n\n\n\t/**\n\t * \u751f\u6210bean\u7684\u540d\u79f0\n\t *\n\t * @param beanDefinition\n\t * @return\n\t */\n\tprivate String determineBeanName(BeanDefinition beanDefinition) {\n\t\tClass<?> beanClass = beanDefinition.getBeanClass();\n\t\tComponent component = beanClass.getAnnotation(Component.class);\n\t\tString value = component.value();\n\t\tif (StrUtil.isEmpty(value)) {\n\t\t\tvalue = StrUtil.lowerFirst(beanClass.getSimpleName());\n\t\t}\n\t\treturn value;\n\t}\n}", "class_name": "ClassPathBeanDefinitionScanner", "return_type": "void", "parameters": [{"type": "String", "name": "basePackages"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/core/io/FileSystemResource.java\n// --------------------------------------------------\n// @Override public InputStream getInputStream() throws IOException {\n//   try {\n//     Path path=new File(this.filePath).toPath();\n//     return Files.newInputStream(path);\n//   }\n//  catch (  NoSuchFileException ex) {\n//     throw new FileNotFoundException(ex.getMessage());\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/core/io/Resource.java\n// --------------------------------------------------\n// InputStream getInputStream() throws IOException ;\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// mini-spring/src/main/java/org/springframework/core/io/UrlResource.java\n// --------------------------------------------------\n// @Override public InputStream getInputStream() throws IOException {\n//   URLConnection con=this.url.openConnection();\n//   try {\n//     return con.getInputStream();\n//   }\n//  catch (  IOException ex) {\n//     throw ex;\n//   }\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClassPathResource implements Resource {\n\n\tprivate final String path;\n\n\tpublic ClassPathResource(String path) {\n\t\tthis.path = path;\n\t}\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "DerekYRC_mini-spring/433", "ground_truth": "\n\t\tInputStream is = this.getClass().getClassLoader().getResourceAsStream(this.path);\n\t\tif (is == null) {\n\t\t\tthrow new FileNotFoundException(this.path + \" cannot be opened because it does not exist\");\n\t\t}\n\t\treturn is;\n\t", "fpath_tuple": ["DerekYRC_mini-spring", "mini-spring", "src", "main", "java", "org", "springframework", "core", "io", "ClassPathResource.java"], "context_start_lineno": 0, "function_name": "getInputStream", "left_context": "class ClassPathResource implements Resource {\n\n\tprivate final String path;\n\n\tpublic ClassPathResource(String path) {\n\t\tthis.path = path;\n\t}\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {", "right_context": "}\n}", "class_name": "ClassPathResource", "return_type": "InputStream", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-generator/src/main/java/me/zhengjie/utils/GenUtil.java\n// --------------------------------------------------\n// private static Map<String,Object> getGenMap(List<ColumnInfo> columnInfos,GenConfig genConfig){\n//   Map<String,Object> genMap=new HashMap<>(16);\n//   genMap.put(\"apiAlias\",genConfig.getApiAlias());\n//   genMap.put(\"package\",genConfig.getPack());\n//   genMap.put(\"moduleName\",genConfig.getModuleName());\n//   genMap.put(\"author\",genConfig.getAuthor());\n//   genMap.put(\"date\",LocalDate.now().toString());\n//   genMap.put(\"tableName\",genConfig.getTableName());\n//   String className=StringUtils.toCapitalizeCamelCase(genConfig.getTableName());\n//   String changeClassName=StringUtils.toCamelCase(genConfig.getTableName());\n//   if (StringUtils.isNotEmpty(genConfig.getPrefix())) {\n//     className=StringUtils.toCapitalizeCamelCase(StrUtil.removePrefix(genConfig.getTableName(),genConfig.getPrefix()));\n//     changeClassName=StringUtils.toCamelCase(StrUtil.removePrefix(genConfig.getTableName(),genConfig.getPrefix()));\n//     changeClassName=StringUtils.uncapitalize(changeClassName);\n//   }\n//   genMap.put(\"className\",className);\n//   genMap.put(\"changeClassName\",changeClassName);\n//   genMap.put(\"hasTimestamp\",false);\n//   genMap.put(\"queryHasTimestamp\",false);\n//   genMap.put(\"hasBigDecimal\",false);\n//   genMap.put(\"queryHasBigDecimal\",false);\n//   genMap.put(\"hasQuery\",false);\n//   genMap.put(\"auto\",false);\n//   genMap.put(\"hasDict\",false);\n//   genMap.put(\"hasDateAnnotation\",false);\n//   List<Map<String,Object>> columns=new ArrayList<>();\n//   List<Map<String,Object>> queryColumns=new ArrayList<>();\n//   List<String> dicts=new ArrayList<>();\n//   List<Map<String,Object>> betweens=new ArrayList<>();\n//   List<Map<String,Object>> isNotNullColumns=new ArrayList<>();\n//   for (  ColumnInfo column : columnInfos) {\n//     Map<String,Object> listMap=new HashMap<>(16);\n//     listMap.put(\"remark\",column.getRemark());\n//     listMap.put(\"columnKey\",column.getKeyType());\n//     String colType=ColUtil.cloToJava(column.getColumnType());\n//     String changeColumnName=StringUtils.toCamelCase(column.getColumnName());\n//     String capitalColumnName=StringUtils.toCapitalizeCamelCase(column.getColumnName());\n//     if (PK.equals(column.getKeyType())) {\n//       genMap.put(\"pkColumnType\",colType);\n//       genMap.put(\"pkChangeColName\",changeColumnName);\n//       genMap.put(\"pkCapitalColName\",capitalColumnName);\n//     }\n//     if (TIMESTAMP.equals(colType)) {\n//       genMap.put(\"hasTimestamp\",true);\n//     }\n//     if (BIGDECIMAL.equals(colType)) {\n//       genMap.put(\"hasBigDecimal\",true);\n//     }\n//     if (EXTRA.equals(column.getExtra())) {\n//       genMap.put(\"auto\",true);\n//     }\n//     if (StringUtils.isNotBlank(column.getDictName())) {\n//       genMap.put(\"hasDict\",true);\n//       if (!dicts.contains(column.getDictName()))       dicts.add(column.getDictName());\n//     }\n//     listMap.put(\"columnType\",colType);\n//     listMap.put(\"columnName\",column.getColumnName());\n//     listMap.put(\"istNotNull\",column.getNotNull());\n//     listMap.put(\"columnShow\",column.getListShow());\n//     listMap.put(\"formShow\",column.getFormShow());\n//     listMap.put(\"formType\",StringUtils.isNotBlank(column.getFormType()) ? column.getFormType() : \"Input\");\n//     listMap.put(\"changeColumnName\",changeColumnName);\n//     listMap.put(\"capitalColumnName\",capitalColumnName);\n//     listMap.put(\"dictName\",column.getDictName());\n//     listMap.put(\"dateAnnotation\",column.getDateAnnotation());\n//     if (StringUtils.isNotBlank(column.getDateAnnotation())) {\n//       genMap.put(\"hasDateAnnotation\",true);\n//     }\n//     if (column.getNotNull()) {\n//       isNotNullColumns.add(listMap);\n//     }\n//     if (!StringUtils.isBlank(column.getQueryType())) {\n//       listMap.put(\"queryType\",column.getQueryType());\n//       genMap.put(\"hasQuery\",true);\n//       if (TIMESTAMP.equals(colType)) {\n//         genMap.put(\"queryHasTimestamp\",true);\n//       }\n//       if (BIGDECIMAL.equals(colType)) {\n//         genMap.put(\"queryHasBigDecimal\",true);\n//       }\n//       if (\"between\".equalsIgnoreCase(column.getQueryType())) {\n//         betweens.add(listMap);\n//       }\n//  else {\n//         queryColumns.add(listMap);\n//       }\n//     }\n//     columns.add(listMap);\n//   }\n//   genMap.put(\"columns\",columns);\n//   genMap.put(\"queryColumns\",queryColumns);\n//   genMap.put(\"dicts\",dicts);\n//   genMap.put(\"betweens\",betweens);\n//   genMap.put(\"isNotNullColumns\",isNotNullColumns);\n//   return genMap;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/service/MonitorService.java\n// --------------------------------------------------\n// /** \n//  * \u67e5\u8be2\u6570\u636e\u5206\u9875\n//  * @return Map<String,Object>\n//  */\n// Map<String,Object> getServers();\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MonitorServiceImpl implements MonitorService {\n\n    private final DecimalFormat df = new DecimalFormat(\"0.00\");\n\n    @Override\n    public Map<String,Object> getServers(){\n        Map<String, Object> resultMap = new LinkedHashMap<>(8);\n        try {\n            SystemInfo si = new SystemInfo();\n            OperatingSystem os = si.getOperatingSystem();\n            HardwareAbstractionLayer hal = si.getHardware();\n            // \u7cfb\u7edf\u4fe1\u606f\n            resultMap.put(\"sys\", getSystemInfo(os));\n            // cpu \u4fe1\u606f\n            resultMap.put(\"cpu\", getCpuInfo(hal.getProcessor()));\n            // \u5185\u5b58\u4fe1\u606f\n            resultMap.put(\"memory\", getMemoryInfo(hal.getMemory()));\n            // \u4ea4\u6362\u533a\u4fe1\u606f\n            resultMap.put(\"swap\", getSwapInfo(hal.getMemory()));\n            // \u78c1\u76d8\n            resultMap.put(\"disk\", getDiskInfo(os));\n            resultMap.put(\"time\", DateUtil.format(new Date(), \"HH:mm:ss\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return resultMap;\n    }\n\n    /**\n     * \u83b7\u53d6\u78c1\u76d8\u4fe1\u606f\n     * @return /\n     */\n    private Map<String,Object> getDiskInfo(OperatingSystem os) {\n        Map<String,Object> diskInfo = new LinkedHashMap<>();\n        FileSystem fileSystem = os.getFileSystem();\n        List<OSFileStore> fsArray = fileSystem.getFileStores();\n        String osName = System.getProperty(\"os.name\");\n        long available = 0, total = 0;\n        for (OSFileStore fs : fsArray){\n            // windows \u9700\u8981\u5c06\u6240\u6709\u78c1\u76d8\u5206\u533a\u7d2f\u52a0\uff0clinux \u548c mac \u76f4\u63a5\u7d2f\u52a0\u4f1a\u51fa\u73b0\u78c1\u76d8\u91cd\u590d\u7684\u95ee\u9898\uff0c\u5f85\u4fee\u590d\n            if(osName.toLowerCase().startsWith(ElConstant.WIN)) {\n                available += fs.getUsableSpace();\n                total += fs.getTotalSpace();\n            } else {\n                available = fs.getUsableSpace();\n                total = fs.getTotalSpace();\n                break;\n            }\n        }\n        long used = total - available;\n        diskInfo.put(\"total\", total > 0 ? FileUtil.getSize(total) : \"?\");\n        diskInfo.put(\"available\", FileUtil.getSize(available));\n        diskInfo.put(\"used\", FileUtil.getSize(used));\n        if(total != 0){\n            diskInfo.put(\"usageRate\", df.format(used/(double)total * 100));\n        } else {\n            diskInfo.put(\"usageRate\", 0);\n        }\n        return diskInfo;\n    }\n\n    /**\n     * \u83b7\u53d6\u4ea4\u6362\u533a\u4fe1\u606f\n     * @param memory /\n     * @return /\n     */\n    private Map<String,Object> getSwapInfo(GlobalMemory memory) {\n        Map<String,Object> swapInfo = new LinkedHashMap<>();\n        VirtualMemory virtualMemory = memory.getVirtualMemory();\n        long total = virtualMemory.getSwapTotal();\n        long used = virtualMemory.getSwapUsed();\n        swapInfo.put(\"total\", FormatUtil.formatBytes(total));\n        swapInfo.put(\"used\", FormatUtil.formatBytes(used));\n        swapInfo.put(\"available\", FormatUtil.formatBytes(total - used));\n        if(used == 0){\n            swapInfo.put(\"usageRate\", 0);\n        } else {\n            swapInfo.put(\"usageRate\", df.format(used/(double)total * 100));\n        }\n        return swapInfo;\n    }\n\n    /**\n     * \u83b7\u53d6\u5185\u5b58\u4fe1\u606f\n     * @param memory /\n     * @return /\n     */\n    private Map<String,Object> getMemoryInfo(GlobalMemory memory) {\n        Map<String,Object> memoryInfo = new LinkedHashMap<>();\n        memoryInfo.put(\"total\", FormatUtil.formatBytes(memory.getTotal()));\n        memoryInfo.put(\"available\", FormatUtil.formatBytes(memory.getAvailable()));\n        memoryInfo.put(\"used\", FormatUtil.formatBytes(memory.getTotal() - memory.getAvailable()));\n        memoryInfo.put(\"usageRate\", df.format((memory.getTotal() - memory.getAvailable())/(double)memory.getTotal() * 100));\n        return memoryInfo;\n    }\n\n    /**\n     * \u83b7\u53d6Cpu\u76f8\u5173\u4fe1\u606f\n     * @param processor /\n     * @return /\n     */\n    private Map<String,Object> getCpuInfo(CentralProcessor processor) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u83b7\u53d6\u7cfb\u7edf\u76f8\u5173\u4fe1\u606f,\u7cfb\u7edf\u3001\u8fd0\u884c\u5929\u6570\u3001\u7cfb\u7edfIP\n     * @param os /\n     * @return /\n     */\n    private Map<String,Object> getSystemInfo(OperatingSystem os){\n        Map<String,Object> systemInfo = new LinkedHashMap<>();\n        // jvm \u8fd0\u884c\u65f6\u95f4\n        long time = ManagementFactory.getRuntimeMXBean().getStartTime();\n        Date date = new Date(time);\n        // \u8ba1\u7b97\u9879\u76ee\u8fd0\u884c\u65f6\u95f4\n        String formatBetween = DateUtil.formatBetween(date, new Date(), Level.HOUR);\n        // \u7cfb\u7edf\u4fe1\u606f\n        systemInfo.put(\"os\", os.toString());\n        systemInfo.put(\"day\", formatBetween);\n        systemInfo.put(\"ip\", StringUtils.getLocalIp());\n        return systemInfo;\n    }\n}", "metadata": {"task_id": "elunez_eladmin/39", "ground_truth": "\n        Map<String,Object> cpuInfo = new LinkedHashMap<>();\n        cpuInfo.put(\"name\", processor.getProcessorIdentifier().getName());\n        cpuInfo.put(\"package\", processor.getPhysicalPackageCount() + \"\u4e2a\u7269\u7406CPU\");\n        cpuInfo.put(\"core\", processor.getPhysicalProcessorCount() + \"\u4e2a\u7269\u7406\u6838\u5fc3\");\n        cpuInfo.put(\"coreNumber\", processor.getPhysicalProcessorCount());\n        cpuInfo.put(\"logic\", processor.getLogicalProcessorCount() + \"\u4e2a\u903b\u8f91CPU\");\n        // CPU\u4fe1\u606f\n        long[] prevTicks = processor.getSystemCpuLoadTicks();\n        // \u9ed8\u8ba4\u7b49\u5f85300\u6beb\u79d2...\n        long time = 300;\n        Util.sleep(time);\n        long[] ticks = processor.getSystemCpuLoadTicks();\n        while (Arrays.toString(prevTicks).equals(Arrays.toString(ticks)) && time < 1000){\n            time += 25;\n            Util.sleep(25);\n            ticks = processor.getSystemCpuLoadTicks();\n        }\n        long user = ticks[CentralProcessor.TickType.USER.getIndex()] - prevTicks[CentralProcessor.TickType.USER.getIndex()];\n        long nice = ticks[CentralProcessor.TickType.NICE.getIndex()] - prevTicks[CentralProcessor.TickType.NICE.getIndex()];\n        long sys = ticks[CentralProcessor.TickType.SYSTEM.getIndex()] - prevTicks[CentralProcessor.TickType.SYSTEM.getIndex()];\n        long idle = ticks[CentralProcessor.TickType.IDLE.getIndex()] - prevTicks[CentralProcessor.TickType.IDLE.getIndex()];\n        long iowait = ticks[CentralProcessor.TickType.IOWAIT.getIndex()] - prevTicks[CentralProcessor.TickType.IOWAIT.getIndex()];\n        long irq = ticks[CentralProcessor.TickType.IRQ.getIndex()] - prevTicks[CentralProcessor.TickType.IRQ.getIndex()];\n        long softirq = ticks[CentralProcessor.TickType.SOFTIRQ.getIndex()] - prevTicks[CentralProcessor.TickType.SOFTIRQ.getIndex()];\n        long steal = ticks[CentralProcessor.TickType.STEAL.getIndex()] - prevTicks[CentralProcessor.TickType.STEAL.getIndex()];\n        long totalCpu = user + nice + sys + idle + iowait + irq + softirq + steal;\n        cpuInfo.put(\"used\", df.format(100d * user / totalCpu + 100d * sys / totalCpu));\n        cpuInfo.put(\"idle\", df.format(100d * idle / totalCpu));\n        return cpuInfo;\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "system", "service", "impl", "MonitorServiceImpl.java"], "context_start_lineno": 0, "function_name": "getCpuInfo", "left_context": "class MonitorServiceImpl implements MonitorService {\n\n    private final DecimalFormat df = new DecimalFormat(\"0.00\");\n\n    @Override\n    public Map<String,Object> getServers(){\n        Map<String, Object> resultMap = new LinkedHashMap<>(8);\n        try {\n            SystemInfo si = new SystemInfo();\n            OperatingSystem os = si.getOperatingSystem();\n            HardwareAbstractionLayer hal = si.getHardware();\n            // \u7cfb\u7edf\u4fe1\u606f\n            resultMap.put(\"sys\", getSystemInfo(os));\n            // cpu \u4fe1\u606f\n            resultMap.put(\"cpu\", getCpuInfo(hal.getProcessor()));\n            // \u5185\u5b58\u4fe1\u606f\n            resultMap.put(\"memory\", getMemoryInfo(hal.getMemory()));\n            // \u4ea4\u6362\u533a\u4fe1\u606f\n            resultMap.put(\"swap\", getSwapInfo(hal.getMemory()));\n            // \u78c1\u76d8\n            resultMap.put(\"disk\", getDiskInfo(os));\n            resultMap.put(\"time\", DateUtil.format(new Date(), \"HH:mm:ss\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return resultMap;\n    }\n\n    /**\n     * \u83b7\u53d6\u78c1\u76d8\u4fe1\u606f\n     * @return /\n     */\n    private Map<String,Object> getDiskInfo(OperatingSystem os) {\n        Map<String,Object> diskInfo = new LinkedHashMap<>();\n        FileSystem fileSystem = os.getFileSystem();\n        List<OSFileStore> fsArray = fileSystem.getFileStores();\n        String osName = System.getProperty(\"os.name\");\n        long available = 0, total = 0;\n        for (OSFileStore fs : fsArray){\n            // windows \u9700\u8981\u5c06\u6240\u6709\u78c1\u76d8\u5206\u533a\u7d2f\u52a0\uff0clinux \u548c mac \u76f4\u63a5\u7d2f\u52a0\u4f1a\u51fa\u73b0\u78c1\u76d8\u91cd\u590d\u7684\u95ee\u9898\uff0c\u5f85\u4fee\u590d\n            if(osName.toLowerCase().startsWith(ElConstant.WIN)) {\n                available += fs.getUsableSpace();\n                total += fs.getTotalSpace();\n            } else {\n                available = fs.getUsableSpace();\n                total = fs.getTotalSpace();\n                break;\n            }\n        }\n        long used = total - available;\n        diskInfo.put(\"total\", total > 0 ? FileUtil.getSize(total) : \"?\");\n        diskInfo.put(\"available\", FileUtil.getSize(available));\n        diskInfo.put(\"used\", FileUtil.getSize(used));\n        if(total != 0){\n            diskInfo.put(\"usageRate\", df.format(used/(double)total * 100));\n        } else {\n            diskInfo.put(\"usageRate\", 0);\n        }\n        return diskInfo;\n    }\n\n    /**\n     * \u83b7\u53d6\u4ea4\u6362\u533a\u4fe1\u606f\n     * @param memory /\n     * @return /\n     */\n    private Map<String,Object> getSwapInfo(GlobalMemory memory) {\n        Map<String,Object> swapInfo = new LinkedHashMap<>();\n        VirtualMemory virtualMemory = memory.getVirtualMemory();\n        long total = virtualMemory.getSwapTotal();\n        long used = virtualMemory.getSwapUsed();\n        swapInfo.put(\"total\", FormatUtil.formatBytes(total));\n        swapInfo.put(\"used\", FormatUtil.formatBytes(used));\n        swapInfo.put(\"available\", FormatUtil.formatBytes(total - used));\n        if(used == 0){\n            swapInfo.put(\"usageRate\", 0);\n        } else {\n            swapInfo.put(\"usageRate\", df.format(used/(double)total * 100));\n        }\n        return swapInfo;\n    }\n\n    /**\n     * \u83b7\u53d6\u5185\u5b58\u4fe1\u606f\n     * @param memory /\n     * @return /\n     */\n    private Map<String,Object> getMemoryInfo(GlobalMemory memory) {\n        Map<String,Object> memoryInfo = new LinkedHashMap<>();\n        memoryInfo.put(\"total\", FormatUtil.formatBytes(memory.getTotal()));\n        memoryInfo.put(\"available\", FormatUtil.formatBytes(memory.getAvailable()));\n        memoryInfo.put(\"used\", FormatUtil.formatBytes(memory.getTotal() - memory.getAvailable()));\n        memoryInfo.put(\"usageRate\", df.format((memory.getTotal() - memory.getAvailable())/(double)memory.getTotal() * 100));\n        return memoryInfo;\n    }\n\n    /**\n     * \u83b7\u53d6Cpu\u76f8\u5173\u4fe1\u606f\n     * @param processor /\n     * @return /\n     */\n    private Map<String,Object> getCpuInfo(CentralProcessor processor) {", "right_context": "}\n\n    /**\n     * \u83b7\u53d6\u7cfb\u7edf\u76f8\u5173\u4fe1\u606f,\u7cfb\u7edf\u3001\u8fd0\u884c\u5929\u6570\u3001\u7cfb\u7edfIP\n     * @param os /\n     * @return /\n     */\n    private Map<String,Object> getSystemInfo(OperatingSystem os){\n        Map<String,Object> systemInfo = new LinkedHashMap<>();\n        // jvm \u8fd0\u884c\u65f6\u95f4\n        long time = ManagementFactory.getRuntimeMXBean().getStartTime();\n        Date date = new Date(time);\n        // \u8ba1\u7b97\u9879\u76ee\u8fd0\u884c\u65f6\u95f4\n        String formatBetween = DateUtil.formatBetween(date, new Date(), Level.HOUR);\n        // \u7cfb\u7edf\u4fe1\u606f\n        systemInfo.put(\"os\", os.toString());\n        systemInfo.put(\"day\", formatBetween);\n        systemInfo.put(\"ip\", StringUtils.getLocalIp());\n        return systemInfo;\n    }\n}", "class_name": "MonitorServiceImpl", "return_type": "Map<String,Object>", "parameters": [{"type": "CentralProcessor", "name": "processor"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LogAspect {\n\n    private final SysLogService sysLogService;\n\n    ThreadLocal<Long> currentTime = new ThreadLocal<>();\n\n    public LogAspect(SysLogService sysLogService) {\n        this.sysLogService = sysLogService;\n    }\n\n    /**\n     * \u914d\u7f6e\u5207\u5165\u70b9\n     */\n    @Pointcut(\"@annotation(me.zhengjie.annotation.Log)\")\n    public void logPointcut() {\n        // \u8be5\u65b9\u6cd5\u65e0\u65b9\u6cd5\u4f53,\u4e3b\u8981\u4e3a\u4e86\u8ba9\u540c\u7c7b\u4e2d\u5176\u4ed6\u65b9\u6cd5\u4f7f\u7528\u6b64\u5207\u5165\u70b9\n    }\n\n    /**\n     * \u914d\u7f6e\u73af\u7ed5\u901a\u77e5,\u4f7f\u7528\u5728\u65b9\u6cd5logPointcut()\u4e0a\u6ce8\u518c\u7684\u5207\u5165\u70b9\n     *\n     * @param joinPoint join point for advice\n     */\n    @Around(\"logPointcut()\")\n    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        Object result;\n        currentTime.set(System.currentTimeMillis());\n        result = joinPoint.proceed();\n        SysLog sysLog = new SysLog(\"INFO\",System.currentTimeMillis() - currentTime.get());\n        currentTime.remove();\n        HttpServletRequest request = RequestHolder.getHttpServletRequest();\n        sysLogService.save(getUsername(), StringUtils.getBrowser(request), StringUtils.getIp(request),joinPoint, sysLog);\n        return result;\n    }\n\n    /**\n     * \u914d\u7f6e\u5f02\u5e38\u901a\u77e5\n     *\n     * @param joinPoint join point for advice\n     * @param e exception\n     */\n    @AfterThrowing(pointcut = \"logPointcut()\", throwing = \"e\")\n    public void logAfterThrowing(JoinPoint joinPoint, Throwable e) {<FILL_FUNCTION_BODY>}\n\n    public String getUsername() {\n        try {\n            return SecurityUtils.getCurrentUsername();\n        }catch (Exception e){\n            return \"\";\n        }\n    }\n}", "metadata": {"task_id": "elunez_eladmin/86", "ground_truth": "\n        SysLog sysLog = new SysLog(\"ERROR\",System.currentTimeMillis() - currentTime.get());\n        currentTime.remove();\n        sysLog.setExceptionDetail(ThrowableUtil.getStackTrace(e).getBytes());\n        HttpServletRequest request = RequestHolder.getHttpServletRequest();\n        sysLogService.save(getUsername(), StringUtils.getBrowser(request), StringUtils.getIp(request), (ProceedingJoinPoint)joinPoint, sysLog);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-logging", "src", "main", "java", "me", "zhengjie", "aspect", "LogAspect.java"], "context_start_lineno": 0, "function_name": "logAfterThrowing", "left_context": "class LogAspect {\n\n    private final SysLogService sysLogService;\n\n    ThreadLocal<Long> currentTime = new ThreadLocal<>();\n\n    public LogAspect(SysLogService sysLogService) {\n        this.sysLogService = sysLogService;\n    }\n\n    /**\n     * \u914d\u7f6e\u5207\u5165\u70b9\n     */\n    @Pointcut(\"@annotation(me.zhengjie.annotation.Log)\")\n    public void logPointcut() {\n        // \u8be5\u65b9\u6cd5\u65e0\u65b9\u6cd5\u4f53,\u4e3b\u8981\u4e3a\u4e86\u8ba9\u540c\u7c7b\u4e2d\u5176\u4ed6\u65b9\u6cd5\u4f7f\u7528\u6b64\u5207\u5165\u70b9\n    }\n\n    /**\n     * \u914d\u7f6e\u73af\u7ed5\u901a\u77e5,\u4f7f\u7528\u5728\u65b9\u6cd5logPointcut()\u4e0a\u6ce8\u518c\u7684\u5207\u5165\u70b9\n     *\n     * @param joinPoint join point for advice\n     */\n    @Around(\"logPointcut()\")\n    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        Object result;\n        currentTime.set(System.currentTimeMillis());\n        result = joinPoint.proceed();\n        SysLog sysLog = new SysLog(\"INFO\",System.currentTimeMillis() - currentTime.get());\n        currentTime.remove();\n        HttpServletRequest request = RequestHolder.getHttpServletRequest();\n        sysLogService.save(getUsername(), StringUtils.getBrowser(request), StringUtils.getIp(request),joinPoint, sysLog);\n        return result;\n    }\n\n    /**\n     * \u914d\u7f6e\u5f02\u5e38\u901a\u77e5\n     *\n     * @param joinPoint join point for advice\n     * @param e exception\n     */\n    @AfterThrowing(pointcut = \"logPointcut()\", throwing = \"e\")\n    public void logAfterThrowing(JoinPoint joinPoint, Throwable e) {", "right_context": "}\n\n    public String getUsername() {\n        try {\n            return SecurityUtils.getCurrentUsername();\n        }catch (Exception e){\n            return \"\";\n        }\n    }\n}", "class_name": "LogAspect", "return_type": "void", "parameters": [{"type": "JoinPoint", "name": "joinPoint"}, {"type": "Throwable", "name": "e"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DictDetailServiceImpl implements DictDetailService {\n\n    private final DictRepository dictRepository;\n    private final DictDetailRepository dictDetailRepository;\n    private final DictDetailMapper dictDetailMapper;\n    private final RedisUtils redisUtils;\n\n    @Override\n    public PageResult<DictDetailDto> queryAll(DictDetailQueryCriteria criteria, Pageable pageable) {\n        Page<DictDetail> page = dictDetailRepository.findAll((root, criteriaQuery, criteriaBuilder) -> QueryHelp.getPredicate(root,criteria,criteriaBuilder),pageable);\n        return PageUtil.toPage(page.map(dictDetailMapper::toDto));\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void create(DictDetail resources) {\n        dictDetailRepository.save(resources);\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(resources);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void update(DictDetail resources) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    @Cacheable(key = \"'name:' + #p0\")\n    public List<DictDetailDto> getDictByName(String name) {\n        return dictDetailMapper.toDto(dictDetailRepository.findByDictName(name));\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Long id) {\n        DictDetail dictDetail = dictDetailRepository.findById(id).orElseGet(DictDetail::new);\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(dictDetail);\n        dictDetailRepository.deleteById(id);\n    }\n\n    public void delCaches(DictDetail dictDetail){\n        Dict dict = dictRepository.findById(dictDetail.getDict().getId()).orElseGet(Dict::new);\n        redisUtils.del(CacheKey.DICT_NAME + dict.getName());\n    }\n}", "metadata": {"task_id": "elunez_eladmin/92", "ground_truth": "\n        DictDetail dictDetail = dictDetailRepository.findById(resources.getId()).orElseGet(DictDetail::new);\n        ValidationUtil.isNull( dictDetail.getId(),\"DictDetail\",\"id\",resources.getId());\n        resources.setId(dictDetail.getId());\n        dictDetailRepository.save(resources);\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(resources);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "system", "service", "impl", "DictDetailServiceImpl.java"], "context_start_lineno": 0, "function_name": "update", "left_context": "class DictDetailServiceImpl implements DictDetailService {\n\n    private final DictRepository dictRepository;\n    private final DictDetailRepository dictDetailRepository;\n    private final DictDetailMapper dictDetailMapper;\n    private final RedisUtils redisUtils;\n\n    @Override\n    public PageResult<DictDetailDto> queryAll(DictDetailQueryCriteria criteria, Pageable pageable) {\n        Page<DictDetail> page = dictDetailRepository.findAll((root, criteriaQuery, criteriaBuilder) -> QueryHelp.getPredicate(root,criteria,criteriaBuilder),pageable);\n        return PageUtil.toPage(page.map(dictDetailMapper::toDto));\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void create(DictDetail resources) {\n        dictDetailRepository.save(resources);\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(resources);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void update(DictDetail resources) {", "right_context": "}\n\n    @Override\n    @Cacheable(key = \"'name:' + #p0\")\n    public List<DictDetailDto> getDictByName(String name) {\n        return dictDetailMapper.toDto(dictDetailRepository.findByDictName(name));\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Long id) {\n        DictDetail dictDetail = dictDetailRepository.findById(id).orElseGet(DictDetail::new);\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(dictDetail);\n        dictDetailRepository.deleteById(id);\n    }\n\n    public void delCaches(DictDetail dictDetail){\n        Dict dict = dictRepository.findById(dictDetail.getDict().getId()).orElseGet(Dict::new);\n        redisUtils.del(CacheKey.DICT_NAME + dict.getName());\n    }\n}", "class_name": "DictDetailServiceImpl", "return_type": "void", "parameters": [{"type": "DictDetail", "name": "resources"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LocalStorageController {\n\n    private final LocalStorageService localStorageService;\n\n    @GetMapping\n    @ApiOperation(\"\u67e5\u8be2\u6587\u4ef6\")\n    @PreAuthorize(\"@el.check('storage:list')\")\n    public ResponseEntity<PageResult<LocalStorageDto>> queryFile(LocalStorageQueryCriteria criteria, Pageable pageable){\n        return new ResponseEntity<>(localStorageService.queryAll(criteria,pageable),HttpStatus.OK);\n    }\n\n    @ApiOperation(\"\u5bfc\u51fa\u6570\u636e\")\n    @GetMapping(value = \"/download\")\n    @PreAuthorize(\"@el.check('storage:list')\")\n    public void exportFile(HttpServletResponse response, LocalStorageQueryCriteria criteria) throws IOException {\n        localStorageService.download(localStorageService.queryAll(criteria), response);\n    }\n\n    @PostMapping\n    @ApiOperation(\"\u4e0a\u4f20\u6587\u4ef6\")\n    @PreAuthorize(\"@el.check('storage:add')\")\n    public ResponseEntity<Object> createFile(@RequestParam String name, @RequestParam(\"file\") MultipartFile file){\n        localStorageService.create(name, file);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    @ApiOperation(\"\u4e0a\u4f20\u56fe\u7247\")\n    @PostMapping(\"/pictures\")\n    public ResponseEntity<LocalStorage> uploadPicture(@RequestParam MultipartFile file){<FILL_FUNCTION_BODY>}\n\n    @PutMapping\n    @Log(\"\u4fee\u6539\u6587\u4ef6\")\n    @ApiOperation(\"\u4fee\u6539\u6587\u4ef6\")\n    @PreAuthorize(\"@el.check('storage:edit')\")\n    public ResponseEntity<Object> updateFile(@Validated @RequestBody LocalStorage resources){\n        localStorageService.update(resources);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @Log(\"\u5220\u9664\u6587\u4ef6\")\n    @DeleteMapping\n    @ApiOperation(\"\u591a\u9009\u5220\u9664\")\n    public ResponseEntity<Object> deleteFile(@RequestBody Long[] ids) {\n        localStorageService.deleteAll(ids);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/137", "ground_truth": "\n        // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3a\u56fe\u7247\n        String suffix = FileUtil.getExtensionName(file.getOriginalFilename());\n        if(!FileUtil.IMAGE.equals(FileUtil.getFileType(suffix))){\n            throw new BadRequestException(\"\u53ea\u80fd\u4e0a\u4f20\u56fe\u7247\");\n        }\n        LocalStorage localStorage = localStorageService.create(null, file);\n        return new ResponseEntity<>(localStorage, HttpStatus.OK);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-tools", "src", "main", "java", "me", "zhengjie", "rest", "LocalStorageController.java"], "context_start_lineno": 0, "function_name": "uploadPicture", "left_context": "class LocalStorageController {\n\n    private final LocalStorageService localStorageService;\n\n    @GetMapping\n    @ApiOperation(\"\u67e5\u8be2\u6587\u4ef6\")\n    @PreAuthorize(\"@el.check('storage:list')\")\n    public ResponseEntity<PageResult<LocalStorageDto>> queryFile(LocalStorageQueryCriteria criteria, Pageable pageable){\n        return new ResponseEntity<>(localStorageService.queryAll(criteria,pageable),HttpStatus.OK);\n    }\n\n    @ApiOperation(\"\u5bfc\u51fa\u6570\u636e\")\n    @GetMapping(value = \"/download\")\n    @PreAuthorize(\"@el.check('storage:list')\")\n    public void exportFile(HttpServletResponse response, LocalStorageQueryCriteria criteria) throws IOException {\n        localStorageService.download(localStorageService.queryAll(criteria), response);\n    }\n\n    @PostMapping\n    @ApiOperation(\"\u4e0a\u4f20\u6587\u4ef6\")\n    @PreAuthorize(\"@el.check('storage:add')\")\n    public ResponseEntity<Object> createFile(@RequestParam String name, @RequestParam(\"file\") MultipartFile file){\n        localStorageService.create(name, file);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    @ApiOperation(\"\u4e0a\u4f20\u56fe\u7247\")\n    @PostMapping(\"/pictures\")\n    public ResponseEntity<LocalStorage> uploadPicture(@RequestParam MultipartFile file){", "right_context": "}\n\n    @PutMapping\n    @Log(\"\u4fee\u6539\u6587\u4ef6\")\n    @ApiOperation(\"\u4fee\u6539\u6587\u4ef6\")\n    @PreAuthorize(\"@el.check('storage:edit')\")\n    public ResponseEntity<Object> updateFile(@Validated @RequestBody LocalStorage resources){\n        localStorageService.update(resources);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @Log(\"\u5220\u9664\u6587\u4ef6\")\n    @DeleteMapping\n    @ApiOperation(\"\u591a\u9009\u5220\u9664\")\n    public ResponseEntity<Object> deleteFile(@RequestBody Long[] ids) {\n        localStorageService.deleteAll(ids);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}", "class_name": "LocalStorageController", "return_type": "ResponseEntity<LocalStorage>", "parameters": [{"type": "MultipartFile", "name": "file"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/AliPayController.java\n// --------------------------------------------------\n// @Log(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\") @ApiOperation(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\") @PutMapping public ResponseEntity<Object> updateAliPayConfig(@Validated @RequestBody AlipayConfig alipayConfig){\n//   alipayService.config(alipayConfig);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/AliPayController.java\n// --------------------------------------------------\n// @ApiIgnore @RequestMapping(\"/notify\") @AnonymousAccess @ApiOperation(\"\u652f\u4ed8\u5f02\u6b65\u901a\u77e5(\u8981\u516c\u7f51\u8bbf\u95ee)\uff0c\u63a5\u6536\u5f02\u6b65\u901a\u77e5\uff0c\u68c0\u67e5\u901a\u77e5\u5185\u5bb9app_id\u3001out_trade_no\u3001total_amount\u662f\u5426\u4e0e\u8bf7\u6c42\u4e2d\u7684\u4e00\u81f4\uff0c\u6839\u636etrade_status\u8fdb\u884c\u540e\u7eed\u4e1a\u52a1\u5904\u7406\") public ResponseEntity<Object> notify(HttpServletRequest request){\n//   AlipayConfig alipay=alipayService.find();\n//   Map<String,String[]> parameterMap=request.getParameterMap();\n//   if (alipayUtils.rsaCheck(request,alipay)) {\n//     String tradeStatus=new String(request.getParameter(\"trade_status\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     String outTradeNo=new String(request.getParameter(\"out_trade_no\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     String tradeNo=new String(request.getParameter(\"trade_no\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     String totalAmount=new String(request.getParameter(\"total_amount\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     if (tradeStatus.equals(AliPayStatusEnum.SUCCESS.getValue()) || tradeStatus.equals(AliPayStatusEnum.FINISHED.getValue())) {\n//     }\n//     return new ResponseEntity<>(HttpStatus.OK);\n//   }\n//   return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/EmailController.java\n// --------------------------------------------------\n// @Log(\"\u914d\u7f6e\u90ae\u4ef6\") @PutMapping @ApiOperation(\"\u914d\u7f6e\u90ae\u4ef6\") public ResponseEntity<Object> updateEmailConfig(@Validated @RequestBody EmailConfig emailConfig) throws Exception {\n//   emailService.config(emailConfig,emailService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/EmailController.java\n// --------------------------------------------------\n// @Log(\"\u53d1\u9001\u90ae\u4ef6\") @PostMapping @ApiOperation(\"\u53d1\u9001\u90ae\u4ef6\") public ResponseEntity<Object> sendEmail(@Validated @RequestBody EmailVo emailVo){\n//   emailService.send(emailVo,emailService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/LocalStorageController.java\n// --------------------------------------------------\n// @PostMapping @ApiOperation(\"\u4e0a\u4f20\u6587\u4ef6\") @PreAuthorize(\"@el.check('storage:add')\") public ResponseEntity<Object> createFile(@RequestParam String name,@RequestParam(\"file\") MultipartFile file){\n//   localStorageService.create(name,file);\n//   return new ResponseEntity<>(HttpStatus.CREATED);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/LocalStorageController.java\n// --------------------------------------------------\n// @PutMapping @Log(\"\u4fee\u6539\u6587\u4ef6\") @ApiOperation(\"\u4fee\u6539\u6587\u4ef6\") @PreAuthorize(\"@el.check('storage:edit')\") public ResponseEntity<Object> updateFile(@Validated @RequestBody LocalStorage resources){\n//   localStorageService.update(resources);\n//   return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/LocalStorageController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u6587\u4ef6\") @DeleteMapping @ApiOperation(\"\u591a\u9009\u5220\u9664\") public ResponseEntity<Object> deleteFile(@RequestBody Long[] ids){\n//   localStorageService.deleteAll(ids);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u914d\u7f6e\u4e03\u725b\u4e91\u5b58\u50a8\") @ApiOperation(\"\u914d\u7f6e\u4e03\u725b\u4e91\u5b58\u50a8\") @PutMapping(value=\"/config\") public ResponseEntity<Object> updateQiNiuConfig(@Validated @RequestBody QiniuConfig qiniuConfig){\n//   qiNiuService.config(qiniuConfig);\n//   qiNiuService.update(qiniuConfig.getType());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u4e0a\u4f20\u6587\u4ef6\") @PostMapping public ResponseEntity<Object> uploadQiNiu(@RequestParam MultipartFile file){\n//   QiniuContent qiniuContent=qiNiuService.upload(file,qiNiuService.find());\n//   Map<String,Object> map=new HashMap<>(3);\n//   map.put(\"id\",qiniuContent.getId());\n//   map.put(\"errno\",0);\n//   map.put(\"data\",new String[]{qiniuContent.getUrl()});\n//   return new ResponseEntity<>(map,HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u540c\u6b65\u4e03\u725b\u4e91\u6570\u636e\") @ApiOperation(\"\u540c\u6b65\u4e03\u725b\u4e91\u6570\u636e\") @PostMapping(value=\"/synchronize\") public ResponseEntity<Object> synchronizeQiNiu(){\n//   qiNiuService.synchronize(qiNiuService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u4e0b\u8f7d\u6587\u4ef6\") @ApiOperation(\"\u4e0b\u8f7d\u6587\u4ef6\") @GetMapping(value=\"/download/{id}\") public ResponseEntity<Object> downloadQiNiu(@PathVariable Long id){\n//   Map<String,Object> map=new HashMap<>(1);\n//   map.put(\"url\",qiNiuService.download(qiNiuService.findByContentId(id),qiNiuService.find()));\n//   return new ResponseEntity<>(map,HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u6587\u4ef6\") @ApiOperation(\"\u5220\u9664\u6587\u4ef6\") @DeleteMapping(value=\"/{id}\") public ResponseEntity<Object> deleteQiNiu(@PathVariable Long id){\n//   qiNiuService.delete(qiNiuService.findByContentId(id),qiNiuService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u591a\u5f20\u56fe\u7247\") @ApiOperation(\"\u5220\u9664\u591a\u5f20\u56fe\u7247\") @DeleteMapping public ResponseEntity<Object> deleteAllQiNiu(@RequestBody Long[] ids){\n//   qiNiuService.deleteAll(ids,qiNiuService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/DeptController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u67e5\u8be2\u90e8\u95e8:\u6839\u636eID\u83b7\u53d6\u540c\u7ea7\u4e0e\u4e0a\u7ea7\u6570\u636e\") @PostMapping(\"/superior\") @PreAuthorize(\"@el.check('user:list','dept:list')\") public ResponseEntity<Object> getDeptSuperior(@RequestBody List<Long> ids,@RequestParam(defaultValue=\"false\") Boolean exclude){\n//   Set<DeptDto> deptSet=new LinkedHashSet<>();\n//   for (  Long id : ids) {\n//     DeptDto deptDto=deptService.findById(id);\n//     List<DeptDto> depts=deptService.getSuperior(deptDto,new ArrayList<>());\n//     if (exclude) {\n//       for (      DeptDto dept : depts) {\n//         if (dept.getId().equals(deptDto.getPid())) {\n//           dept.setSubCount(dept.getSubCount() - 1);\n//         }\n//       }\n//       depts=depts.stream().filter(i -> !ids.contains(i.getId())).collect(Collectors.toList());\n//     }\n//     deptSet.addAll(depts);\n//   }\n//   return new ResponseEntity<>(deptService.buildTree(new ArrayList<>(deptSet)),HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/RoleController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u83b7\u53d6\u7528\u6237\u7ea7\u522b\") @GetMapping(value=\"/level\") public ResponseEntity<Object> getRoleLevel(){\n//   return new ResponseEntity<>(Dict.create().set(\"level\",getLevels(null)),HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/rest/AuthorizationController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u83b7\u53d6\u9a8c\u8bc1\u7801\") @AnonymousGetMapping(value=\"/code\") public ResponseEntity<Object> getCode(){\n//   Captcha captcha=loginProperties.getCaptcha();\n//   String uuid=properties.getCodeKey() + IdUtil.simpleUUID();\n//   String captchaValue=captcha.text();\n//   if (captcha.getCharType() - 1 == LoginCodeEnum.ARITHMETIC.ordinal() && captchaValue.contains(\".\")) {\n//     captchaValue=captchaValue.split(\"\\\\.\")[0];\n//   }\n//   redisUtils.set(uuid,captchaValue,loginProperties.getLoginCode().getExpiration(),TimeUnit.MINUTES);\n//   Map<String,Object> imgResult=new HashMap<String,Object>(2){\n// {\n//       put(\"img\",captcha.toBase64());\n//       put(\"uuid\",uuid);\n//     }\n//   }\n// ;\n//   return ResponseEntity.ok(imgResult);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-logging/src/main/java/me/zhengjie/rest/SysLogController.java\n// --------------------------------------------------\n// @GetMapping(value=\"/error/{id}\") @ApiOperation(\"\u65e5\u5fd7\u5f02\u5e38\u8be6\u60c5\u67e5\u8be2\") @PreAuthorize(\"@el.check()\") public ResponseEntity<Object> queryErrorLogDetail(@PathVariable Long id){\n//   return new ResponseEntity<>(sysLogService.findByErrDetail(id),HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/DictController.java\n// --------------------------------------------------\n// @Log(\"\u65b0\u589e\u5b57\u5178\") @ApiOperation(\"\u65b0\u589e\u5b57\u5178\") @PostMapping @PreAuthorize(\"@el.check('dict:add')\") public ResponseEntity<Object> createDict(@Validated @RequestBody Dict resources){\n//   if (resources.getId() != null) {\n//     throw new BadRequestException(\"A new \" + ENTITY_NAME + \" cannot already have an ID\");\n//   }\n//   dictService.create(resources);\n//   return new ResponseEntity<>(HttpStatus.CREATED);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/DictController.java\n// --------------------------------------------------\n// @Log(\"\u4fee\u6539\u5b57\u5178\") @ApiOperation(\"\u4fee\u6539\u5b57\u5178\") @PutMapping @PreAuthorize(\"@el.check('dict:edit')\") public ResponseEntity<Object> updateDict(@Validated(Dict.Update.class) @RequestBody Dict resources){\n//   dictService.update(resources);\n//   return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/DictController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u5b57\u5178\") @ApiOperation(\"\u5220\u9664\u5b57\u5178\") @DeleteMapping @PreAuthorize(\"@el.check('dict:del')\") public ResponseEntity<Object> deleteDict(@RequestBody Set<Long> ids){\n//   dictService.delete(ids);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DictDetailController {\n\n    private final DictDetailService dictDetailService;\n    private static final String ENTITY_NAME = \"dictDetail\";\n\n    @ApiOperation(\"\u67e5\u8be2\u5b57\u5178\u8be6\u60c5\")\n    @GetMapping\n    public ResponseEntity<PageResult<DictDetailDto>> queryDictDetail(DictDetailQueryCriteria criteria,\n                                                                     @PageableDefault(sort = {\"dictSort\"}, direction = Sort.Direction.ASC) Pageable pageable){\n        return new ResponseEntity<>(dictDetailService.queryAll(criteria,pageable),HttpStatus.OK);\n    }\n\n    @ApiOperation(\"\u67e5\u8be2\u591a\u4e2a\u5b57\u5178\u8be6\u60c5\")\n    @GetMapping(value = \"/map\")\n    public ResponseEntity<Object> getDictDetailMaps(@RequestParam String dictName){<FILL_FUNCTION_BODY>}\n\n    @Log(\"\u65b0\u589e\u5b57\u5178\u8be6\u60c5\")\n    @ApiOperation(\"\u65b0\u589e\u5b57\u5178\u8be6\u60c5\")\n    @PostMapping\n    @PreAuthorize(\"@el.check('dict:add')\")\n    public ResponseEntity<Object> createDictDetail(@Validated @RequestBody DictDetail resources){\n        if (resources.getId() != null) {\n            throw new BadRequestException(\"A new \"+ ENTITY_NAME +\" cannot already have an ID\");\n        }\n        dictDetailService.create(resources);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    @Log(\"\u4fee\u6539\u5b57\u5178\u8be6\u60c5\")\n    @ApiOperation(\"\u4fee\u6539\u5b57\u5178\u8be6\u60c5\")\n    @PutMapping\n    @PreAuthorize(\"@el.check('dict:edit')\")\n    public ResponseEntity<Object> updateDictDetail(@Validated(DictDetail.Update.class) @RequestBody DictDetail resources){\n        dictDetailService.update(resources);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @Log(\"\u5220\u9664\u5b57\u5178\u8be6\u60c5\")\n    @ApiOperation(\"\u5220\u9664\u5b57\u5178\u8be6\u60c5\")\n    @DeleteMapping(value = \"/{id}\")\n    @PreAuthorize(\"@el.check('dict:del')\")\n    public ResponseEntity<Object> deleteDictDetail(@PathVariable Long id){\n        dictDetailService.delete(id);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/148", "ground_truth": "\n        String[] names = dictName.split(\"[,\uff0c]\");\n        Map<String, List<DictDetailDto>> dictMap = new HashMap<>(16);\n        for (String name : names) {\n            dictMap.put(name, dictDetailService.getDictByName(name));\n        }\n        return new ResponseEntity<>(dictMap, HttpStatus.OK);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "system", "rest", "DictDetailController.java"], "context_start_lineno": 0, "function_name": "getDictDetailMaps", "left_context": "class DictDetailController {\n\n    private final DictDetailService dictDetailService;\n    private static final String ENTITY_NAME = \"dictDetail\";\n\n    @ApiOperation(\"\u67e5\u8be2\u5b57\u5178\u8be6\u60c5\")\n    @GetMapping\n    public ResponseEntity<PageResult<DictDetailDto>> queryDictDetail(DictDetailQueryCriteria criteria,\n                                                                     @PageableDefault(sort = {\"dictSort\"}, direction = Sort.Direction.ASC) Pageable pageable){\n        return new ResponseEntity<>(dictDetailService.queryAll(criteria,pageable),HttpStatus.OK);\n    }\n\n    @ApiOperation(\"\u67e5\u8be2\u591a\u4e2a\u5b57\u5178\u8be6\u60c5\")\n    @GetMapping(value = \"/map\")\n    public ResponseEntity<Object> getDictDetailMaps(@RequestParam String dictName){", "right_context": "}\n\n    @Log(\"\u65b0\u589e\u5b57\u5178\u8be6\u60c5\")\n    @ApiOperation(\"\u65b0\u589e\u5b57\u5178\u8be6\u60c5\")\n    @PostMapping\n    @PreAuthorize(\"@el.check('dict:add')\")\n    public ResponseEntity<Object> createDictDetail(@Validated @RequestBody DictDetail resources){\n        if (resources.getId() != null) {\n            throw new BadRequestException(\"A new \"+ ENTITY_NAME +\" cannot already have an ID\");\n        }\n        dictDetailService.create(resources);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    @Log(\"\u4fee\u6539\u5b57\u5178\u8be6\u60c5\")\n    @ApiOperation(\"\u4fee\u6539\u5b57\u5178\u8be6\u60c5\")\n    @PutMapping\n    @PreAuthorize(\"@el.check('dict:edit')\")\n    public ResponseEntity<Object> updateDictDetail(@Validated(DictDetail.Update.class) @RequestBody DictDetail resources){\n        dictDetailService.update(resources);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @Log(\"\u5220\u9664\u5b57\u5178\u8be6\u60c5\")\n    @ApiOperation(\"\u5220\u9664\u5b57\u5178\u8be6\u60c5\")\n    @DeleteMapping(value = \"/{id}\")\n    @PreAuthorize(\"@el.check('dict:del')\")\n    public ResponseEntity<Object> deleteDictDetail(@PathVariable Long id){\n        dictDetailService.delete(id);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}", "class_name": "DictDetailController", "return_type": "ResponseEntity<Object>", "parameters": [{"type": "String", "name": "dictName"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MenuDto extends BaseDTO implements Serializable {\n\n    private Long id;\n\n    private List<MenuDto> children;\n\n    private Integer type;\n\n    private String permission;\n\n    private String title;\n\n    private Integer menuSort;\n\n    private String path;\n\n    private String component;\n\n    private Long pid;\n\n    private Integer subCount;\n\n    private Boolean iFrame;\n\n    private Boolean cache;\n\n    private Boolean hidden;\n\n    private String componentName;\n\n    private String icon;\n\n    public Boolean getHasChildren() {\n        return subCount > 0;\n    }\n\n    public Boolean getLeaf() {\n        return subCount <= 0;\n    }\n\n    public String getLabel() {\n        return title;\n    }\n\n    @Override\n    public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/219", "ground_truth": "\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        MenuDto menuDto = (MenuDto) o;\n        return Objects.equals(id, menuDto.id);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "system", "service", "dto", "MenuDto.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class MenuDto extends BaseDTO implements Serializable {\n\n    private Long id;\n\n    private List<MenuDto> children;\n\n    private Integer type;\n\n    private String permission;\n\n    private String title;\n\n    private Integer menuSort;\n\n    private String path;\n\n    private String component;\n\n    private Long pid;\n\n    private Integer subCount;\n\n    private Boolean iFrame;\n\n    private Boolean cache;\n\n    private Boolean hidden;\n\n    private String componentName;\n\n    private String icon;\n\n    public Boolean getHasChildren() {\n        return subCount > 0;\n    }\n\n    public Boolean getLeaf() {\n        return subCount <= 0;\n    }\n\n    public String getLabel() {\n        return title;\n    }\n\n    @Override\n    public boolean equals(Object o) {", "right_context": "}\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}", "class_name": "MenuDto", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EntityNotFoundException extends RuntimeException {\n\n    public EntityNotFoundException(Class clazz, String field, String val) {\n        super(EntityNotFoundException.generateMessage(clazz.getSimpleName(), field, val));\n    }\n\n    private static String generateMessage(String entity, String field, String val) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "elunez_eladmin/266", "ground_truth": "\n        return StringUtils.capitalize(entity)\n                + \" with \" + field + \" \"+ val + \" does not exist\";\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-common", "src", "main", "java", "me", "zhengjie", "exception", "EntityNotFoundException.java"], "context_start_lineno": 0, "function_name": "generateMessage", "left_context": "class EntityNotFoundException extends RuntimeException {\n\n    public EntityNotFoundException(Class clazz, String field, String val) {\n        super(EntityNotFoundException.generateMessage(clazz.getSimpleName(), field, val));\n    }\n\n    private static String generateMessage(String entity, String field, String val) {", "right_context": "}\n}", "class_name": "EntityNotFoundException", "return_type": "String", "parameters": [{"type": "String", "name": "entity"}, {"type": "String", "name": "field"}, {"type": "String", "name": "val"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServerDeploy extends BaseEntity implements Serializable {\n\n    @Id\n    @Column(name = \"server_id\")\n    @ApiModelProperty(value = \"ID\", hidden = true)\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ApiModelProperty(value = \"\u670d\u52a1\u5668\u540d\u79f0\")\n    private String name;\n\n    @ApiModelProperty(value = \"IP\")\n    private String ip;\n\n    @ApiModelProperty(value = \"\u7aef\u53e3\")\n    private Integer port;\n\n    @ApiModelProperty(value = \"\u8d26\u53f7\")\n    private String account;\n\n    @ApiModelProperty(value = \"\u5bc6\u7801\")\n    private String password;\n\n    public void copy(ServerDeploy source){\n        BeanUtil.copyProperties(source,this, CopyOptions.create().setIgnoreNullValue(true));\n    }\n\n    @Override\n    public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, name);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/307", "ground_truth": "\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        ServerDeploy that = (ServerDeploy) o;\n        return Objects.equals(id, that.id) &&\n                Objects.equals(name, that.name);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "mnt", "domain", "ServerDeploy.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class ServerDeploy extends BaseEntity implements Serializable {\n\n    @Id\n    @Column(name = \"server_id\")\n    @ApiModelProperty(value = \"ID\", hidden = true)\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ApiModelProperty(value = \"\u670d\u52a1\u5668\u540d\u79f0\")\n    private String name;\n\n    @ApiModelProperty(value = \"IP\")\n    private String ip;\n\n    @ApiModelProperty(value = \"\u7aef\u53e3\")\n    private Integer port;\n\n    @ApiModelProperty(value = \"\u8d26\u53f7\")\n    private String account;\n\n    @ApiModelProperty(value = \"\u5bc6\u7801\")\n    private String password;\n\n    public void copy(ServerDeploy source){\n        BeanUtil.copyProperties(source,this, CopyOptions.create().setIgnoreNullValue(true));\n    }\n\n    @Override\n    public boolean equals(Object o) {", "right_context": "}\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, name);\n    }\n}", "class_name": "ServerDeploy", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @Log(\"\u4fee\u6539\u7528\u6237\") @ApiOperation(\"\u4fee\u6539\u7528\u6237\") @PutMapping @PreAuthorize(\"@el.check('user:edit')\") public ResponseEntity<Object> updateUser(@Validated(User.Update.class) @RequestBody User resources) throws Exception {\n//   checkLevel(resources);\n//   userService.update(resources);\n//   return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @Log(\"\u4fee\u6539\u7528\u6237\uff1a\u4e2a\u4eba\u4e2d\u5fc3\") @ApiOperation(\"\u4fee\u6539\u7528\u6237\uff1a\u4e2a\u4eba\u4e2d\u5fc3\") @PutMapping(value=\"center\") public ResponseEntity<Object> centerUser(@Validated(User.Update.class) @RequestBody User resources){\n//   if (!resources.getId().equals(SecurityUtils.getCurrentUserId())) {\n//     throw new BadRequestException(\"\u4e0d\u80fd\u4fee\u6539\u4ed6\u4eba\u8d44\u6599\");\n//   }\n//   userService.updateCenter(resources);\n//   return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u7528\u6237\") @ApiOperation(\"\u5220\u9664\u7528\u6237\") @DeleteMapping @PreAuthorize(\"@el.check('user:del')\") public ResponseEntity<Object> deleteUser(@RequestBody Set<Long> ids){\n//   for (  Long id : ids) {\n//     Integer currentLevel=Collections.min(roleService.findByUsersId(SecurityUtils.getCurrentUserId()).stream().map(RoleSmallDto::getLevel).collect(Collectors.toList()));\n//     Integer optLevel=Collections.min(roleService.findByUsersId(id).stream().map(RoleSmallDto::getLevel).collect(Collectors.toList()));\n//     if (currentLevel > optLevel) {\n//       throw new BadRequestException(\"\u89d2\u8272\u6743\u9650\u4e0d\u8db3\uff0c\u4e0d\u80fd\u5220\u9664\uff1a\" + userService.findById(id).getUsername());\n//     }\n//   }\n//   userService.delete(ids);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u4fee\u6539\u5934\u50cf\") @PostMapping(value=\"/updateAvatar\") public ResponseEntity<Object> updateUserAvatar(@RequestParam MultipartFile avatar){\n//   return new ResponseEntity<>(userService.updateAvatar(avatar),HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @Log(\"\u4fee\u6539\u90ae\u7bb1\") @ApiOperation(\"\u4fee\u6539\u90ae\u7bb1\") @PostMapping(value=\"/updateEmail/{code}\") public ResponseEntity<Object> updateUserEmail(@PathVariable String code,@RequestBody User user) throws Exception {\n//   String password=RsaUtils.decryptByPrivateKey(RsaProperties.privateKey,user.getPassword());\n//   UserDto userDto=userService.findByName(SecurityUtils.getCurrentUsername());\n//   if (!passwordEncoder.matches(password,userDto.getPassword())) {\n//     throw new BadRequestException(\"\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   verificationCodeService.validated(CodeEnum.EMAIL_RESET_EMAIL_CODE.getKey() + user.getEmail(),code);\n//   userService.updateEmail(userDto.getUsername(),user.getEmail());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/AliPayController.java\n// --------------------------------------------------\n// @Log(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\") @ApiOperation(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\") @PutMapping public ResponseEntity<Object> updateAliPayConfig(@Validated @RequestBody AlipayConfig alipayConfig){\n//   alipayService.config(alipayConfig);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/AliPayController.java\n// --------------------------------------------------\n// @ApiIgnore @RequestMapping(\"/notify\") @AnonymousAccess @ApiOperation(\"\u652f\u4ed8\u5f02\u6b65\u901a\u77e5(\u8981\u516c\u7f51\u8bbf\u95ee)\uff0c\u63a5\u6536\u5f02\u6b65\u901a\u77e5\uff0c\u68c0\u67e5\u901a\u77e5\u5185\u5bb9app_id\u3001out_trade_no\u3001total_amount\u662f\u5426\u4e0e\u8bf7\u6c42\u4e2d\u7684\u4e00\u81f4\uff0c\u6839\u636etrade_status\u8fdb\u884c\u540e\u7eed\u4e1a\u52a1\u5904\u7406\") public ResponseEntity<Object> notify(HttpServletRequest request){\n//   AlipayConfig alipay=alipayService.find();\n//   Map<String,String[]> parameterMap=request.getParameterMap();\n//   if (alipayUtils.rsaCheck(request,alipay)) {\n//     String tradeStatus=new String(request.getParameter(\"trade_status\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     String outTradeNo=new String(request.getParameter(\"out_trade_no\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     String tradeNo=new String(request.getParameter(\"trade_no\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     String totalAmount=new String(request.getParameter(\"total_amount\").getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\n//     if (tradeStatus.equals(AliPayStatusEnum.SUCCESS.getValue()) || tradeStatus.equals(AliPayStatusEnum.FINISHED.getValue())) {\n//     }\n//     return new ResponseEntity<>(HttpStatus.OK);\n//   }\n//   return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/EmailController.java\n// --------------------------------------------------\n// @Log(\"\u914d\u7f6e\u90ae\u4ef6\") @PutMapping @ApiOperation(\"\u914d\u7f6e\u90ae\u4ef6\") public ResponseEntity<Object> updateEmailConfig(@Validated @RequestBody EmailConfig emailConfig) throws Exception {\n//   emailService.config(emailConfig,emailService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/EmailController.java\n// --------------------------------------------------\n// @Log(\"\u53d1\u9001\u90ae\u4ef6\") @PostMapping @ApiOperation(\"\u53d1\u9001\u90ae\u4ef6\") public ResponseEntity<Object> sendEmail(@Validated @RequestBody EmailVo emailVo){\n//   emailService.send(emailVo,emailService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/LocalStorageController.java\n// --------------------------------------------------\n// @PostMapping @ApiOperation(\"\u4e0a\u4f20\u6587\u4ef6\") @PreAuthorize(\"@el.check('storage:add')\") public ResponseEntity<Object> createFile(@RequestParam String name,@RequestParam(\"file\") MultipartFile file){\n//   localStorageService.create(name,file);\n//   return new ResponseEntity<>(HttpStatus.CREATED);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/LocalStorageController.java\n// --------------------------------------------------\n// @PutMapping @Log(\"\u4fee\u6539\u6587\u4ef6\") @ApiOperation(\"\u4fee\u6539\u6587\u4ef6\") @PreAuthorize(\"@el.check('storage:edit')\") public ResponseEntity<Object> updateFile(@Validated @RequestBody LocalStorage resources){\n//   localStorageService.update(resources);\n//   return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/LocalStorageController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u6587\u4ef6\") @DeleteMapping @ApiOperation(\"\u591a\u9009\u5220\u9664\") public ResponseEntity<Object> deleteFile(@RequestBody Long[] ids){\n//   localStorageService.deleteAll(ids);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u914d\u7f6e\u4e03\u725b\u4e91\u5b58\u50a8\") @ApiOperation(\"\u914d\u7f6e\u4e03\u725b\u4e91\u5b58\u50a8\") @PutMapping(value=\"/config\") public ResponseEntity<Object> updateQiNiuConfig(@Validated @RequestBody QiniuConfig qiniuConfig){\n//   qiNiuService.config(qiniuConfig);\n//   qiNiuService.update(qiniuConfig.getType());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u4e0a\u4f20\u6587\u4ef6\") @PostMapping public ResponseEntity<Object> uploadQiNiu(@RequestParam MultipartFile file){\n//   QiniuContent qiniuContent=qiNiuService.upload(file,qiNiuService.find());\n//   Map<String,Object> map=new HashMap<>(3);\n//   map.put(\"id\",qiniuContent.getId());\n//   map.put(\"errno\",0);\n//   map.put(\"data\",new String[]{qiniuContent.getUrl()});\n//   return new ResponseEntity<>(map,HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u540c\u6b65\u4e03\u725b\u4e91\u6570\u636e\") @ApiOperation(\"\u540c\u6b65\u4e03\u725b\u4e91\u6570\u636e\") @PostMapping(value=\"/synchronize\") public ResponseEntity<Object> synchronizeQiNiu(){\n//   qiNiuService.synchronize(qiNiuService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u4e0b\u8f7d\u6587\u4ef6\") @ApiOperation(\"\u4e0b\u8f7d\u6587\u4ef6\") @GetMapping(value=\"/download/{id}\") public ResponseEntity<Object> downloadQiNiu(@PathVariable Long id){\n//   Map<String,Object> map=new HashMap<>(1);\n//   map.put(\"url\",qiNiuService.download(qiNiuService.findByContentId(id),qiNiuService.find()));\n//   return new ResponseEntity<>(map,HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u6587\u4ef6\") @ApiOperation(\"\u5220\u9664\u6587\u4ef6\") @DeleteMapping(value=\"/{id}\") public ResponseEntity<Object> deleteQiNiu(@PathVariable Long id){\n//   qiNiuService.delete(qiNiuService.findByContentId(id),qiNiuService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-tools/src/main/java/me/zhengjie/rest/QiniuController.java\n// --------------------------------------------------\n// @Log(\"\u5220\u9664\u591a\u5f20\u56fe\u7247\") @ApiOperation(\"\u5220\u9664\u591a\u5f20\u56fe\u7247\") @DeleteMapping public ResponseEntity<Object> deleteAllQiNiu(@RequestBody Long[] ids){\n//   qiNiuService.deleteAll(ids,qiNiuService.find());\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u4fee\u6539\u5bc6\u7801\") @PostMapping(value=\"/updatePass\") public ResponseEntity<Object> updateUserPass(@RequestBody UserPassVo passVo) throws Exception {\n//   String oldPass=RsaUtils.decryptByPrivateKey(RsaProperties.privateKey,passVo.getOldPass());\n//   String newPass=RsaUtils.decryptByPrivateKey(RsaProperties.privateKey,passVo.getNewPass());\n//   UserDto user=userService.findByName(SecurityUtils.getCurrentUsername());\n//   if (!passwordEncoder.matches(oldPass,user.getPassword())) {\n//     throw new BadRequestException(\"\u4fee\u6539\u5931\u8d25\uff0c\u65e7\u5bc6\u7801\u9519\u8bef\");\n//   }\n//   if (passwordEncoder.matches(newPass,user.getPassword())) {\n//     throw new BadRequestException(\"\u65b0\u5bc6\u7801\u4e0d\u80fd\u4e0e\u65e7\u5bc6\u7801\u76f8\u540c\");\n//   }\n//   userService.updatePass(user.getUsername(),passwordEncoder.encode(newPass));\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/rest/UserController.java\n// --------------------------------------------------\n// @ApiOperation(\"\u91cd\u7f6e\u5bc6\u7801\") @PutMapping(value=\"/resetPwd\") public ResponseEntity<Object> resetPwd(@RequestBody Set<Long> ids){\n//   String pwd=passwordEncoder.encode(\"123456\");\n//   userService.resetPwd(ids,pwd);\n//   return new ResponseEntity<>(HttpStatus.OK);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass VerifyController {\n\n    private final VerifyService verificationCodeService;\n    private final EmailService emailService;\n\n    @PostMapping(value = \"/resetEmail\")\n    @ApiOperation(\"\u91cd\u7f6e\u90ae\u7bb1\uff0c\u53d1\u9001\u9a8c\u8bc1\u7801\")\n    public ResponseEntity<Object> resetEmail(@RequestParam String email){\n        EmailVo emailVo = verificationCodeService.sendEmail(email, CodeEnum.EMAIL_RESET_EMAIL_CODE.getKey());\n        emailService.send(emailVo,emailService.find());\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n\n    @PostMapping(value = \"/email/resetPass\")\n    @ApiOperation(\"\u91cd\u7f6e\u5bc6\u7801\uff0c\u53d1\u9001\u9a8c\u8bc1\u7801\")\n    public ResponseEntity<Object> resetPass(@RequestParam String email){<FILL_FUNCTION_BODY>}\n\n    @GetMapping(value = \"/validated\")\n    @ApiOperation(\"\u9a8c\u8bc1\u7801\u9a8c\u8bc1\")\n    public ResponseEntity<Object> validated(@RequestParam String email, @RequestParam String code, @RequestParam Integer codeBi){\n        CodeBiEnum biEnum = CodeBiEnum.find(codeBi);\n        switch (Objects.requireNonNull(biEnum)){\n            case ONE:\n                verificationCodeService.validated(CodeEnum.EMAIL_RESET_EMAIL_CODE.getKey() + email ,code);\n                break;\n            case TWO:\n                verificationCodeService.validated(CodeEnum.EMAIL_RESET_PWD_CODE.getKey() + email ,code);\n                break;\n            default:\n                break;\n        }\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/308", "ground_truth": "\n        EmailVo emailVo = verificationCodeService.sendEmail(email, CodeEnum.EMAIL_RESET_PWD_CODE.getKey());\n        emailService.send(emailVo,emailService.find());\n        return new ResponseEntity<>(HttpStatus.OK);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "system", "rest", "VerifyController.java"], "context_start_lineno": 0, "function_name": "resetPass", "left_context": "class VerifyController {\n\n    private final VerifyService verificationCodeService;\n    private final EmailService emailService;\n\n    @PostMapping(value = \"/resetEmail\")\n    @ApiOperation(\"\u91cd\u7f6e\u90ae\u7bb1\uff0c\u53d1\u9001\u9a8c\u8bc1\u7801\")\n    public ResponseEntity<Object> resetEmail(@RequestParam String email){\n        EmailVo emailVo = verificationCodeService.sendEmail(email, CodeEnum.EMAIL_RESET_EMAIL_CODE.getKey());\n        emailService.send(emailVo,emailService.find());\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n\n    @PostMapping(value = \"/email/resetPass\")\n    @ApiOperation(\"\u91cd\u7f6e\u5bc6\u7801\uff0c\u53d1\u9001\u9a8c\u8bc1\u7801\")\n    public ResponseEntity<Object> resetPass(@RequestParam String email){", "right_context": "}\n\n    @GetMapping(value = \"/validated\")\n    @ApiOperation(\"\u9a8c\u8bc1\u7801\u9a8c\u8bc1\")\n    public ResponseEntity<Object> validated(@RequestParam String email, @RequestParam String code, @RequestParam Integer codeBi){\n        CodeBiEnum biEnum = CodeBiEnum.find(codeBi);\n        switch (Objects.requireNonNull(biEnum)){\n            case ONE:\n                verificationCodeService.validated(CodeEnum.EMAIL_RESET_EMAIL_CODE.getKey() + email ,code);\n                break;\n            case TWO:\n                verificationCodeService.validated(CodeEnum.EMAIL_RESET_PWD_CODE.getKey() + email ,code);\n                break;\n            default:\n                break;\n        }\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}", "class_name": "VerifyController", "return_type": "ResponseEntity<Object>", "parameters": [{"type": "String", "name": "email"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConfigurerAdapter implements WebMvcConfigurer {\n\n    /** \u6587\u4ef6\u914d\u7f6e */\n    private final FileProperties properties;\n\n    public ConfigurerAdapter(FileProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.addAllowedOriginPattern(\"*\");\n        config.addAllowedHeader(\"*\");\n        config.addAllowedMethod(\"*\");\n        source.registerCorsConfiguration(\"/**\", config);\n        return new CorsFilter(source);\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        // \u4f7f\u7528 fastjson \u5e8f\u5217\u5316\uff0c\u4f1a\u5bfc\u81f4 @JsonIgnore \u5931\u6548\uff0c\u53ef\u4ee5\u4f7f\u7528 @JSONField(serialize = false) \u66ff\u6362\n        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();\n        List<MediaType> supportMediaTypeList = new ArrayList<>();\n        supportMediaTypeList.add(MediaType.APPLICATION_JSON);\n        FastJsonConfig config = new FastJsonConfig();\n        config.setDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        config.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect);\n        converter.setFastJsonConfig(config);\n        converter.setSupportedMediaTypes(supportMediaTypeList);\n        converter.setDefaultCharset(StandardCharsets.UTF_8);\n        converters.add(converter);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/309", "ground_truth": "\n        FileProperties.ElPath path = properties.getPath();\n        String avatarUtl = \"file:\" + path.getAvatar().replace(\"\\\\\",\"/\");\n        String pathUtl = \"file:\" + path.getPath().replace(\"\\\\\",\"/\");\n        registry.addResourceHandler(\"/avatar/**\").addResourceLocations(avatarUtl).setCachePeriod(0);\n        registry.addResourceHandler(\"/file/**\").addResourceLocations(pathUtl).setCachePeriod(0);\n        registry.addResourceHandler(\"/**\").addResourceLocations(\"classpath:/META-INF/resources/\").setCachePeriod(0);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "config", "ConfigurerAdapter.java"], "context_start_lineno": 0, "function_name": "addResourceHandlers", "left_context": "class ConfigurerAdapter implements WebMvcConfigurer {\n\n    /** \u6587\u4ef6\u914d\u7f6e */\n    private final FileProperties properties;\n\n    public ConfigurerAdapter(FileProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.addAllowedOriginPattern(\"*\");\n        config.addAllowedHeader(\"*\");\n        config.addAllowedMethod(\"*\");\n        source.registerCorsConfiguration(\"/**\", config);\n        return new CorsFilter(source);\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {", "right_context": "}\n\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        // \u4f7f\u7528 fastjson \u5e8f\u5217\u5316\uff0c\u4f1a\u5bfc\u81f4 @JsonIgnore \u5931\u6548\uff0c\u53ef\u4ee5\u4f7f\u7528 @JSONField(serialize = false) \u66ff\u6362\n        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();\n        List<MediaType> supportMediaTypeList = new ArrayList<>();\n        supportMediaTypeList.add(MediaType.APPLICATION_JSON);\n        FastJsonConfig config = new FastJsonConfig();\n        config.setDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        config.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect);\n        converter.setFastJsonConfig(config);\n        converter.setSupportedMediaTypes(supportMediaTypeList);\n        converter.setDefaultCharset(StandardCharsets.UTF_8);\n        converters.add(converter);\n    }\n}", "class_name": "ConfigurerAdapter", "return_type": "void", "parameters": [{"type": "ResourceHandlerRegistry", "name": "registry"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DictServiceImpl implements DictService {\n\n    private final DictRepository dictRepository;\n    private final DictMapper dictMapper;\n    private final RedisUtils redisUtils;\n\n    @Override\n    public PageResult<DictDto> queryAll(DictQueryCriteria dict, Pageable pageable){\n        Page<Dict> page = dictRepository.findAll((root, query, cb) -> QueryHelp.getPredicate(root, dict, cb), pageable);\n        return PageUtil.toPage(page.map(dictMapper::toDto));\n    }\n\n    @Override\n    public List<DictDto> queryAll(DictQueryCriteria dict) {\n        List<Dict> list = dictRepository.findAll((root, query, cb) -> QueryHelp.getPredicate(root, dict, cb));\n        return dictMapper.toDto(list);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void create(Dict resources) {\n        dictRepository.save(resources);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void update(Dict resources) {\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(resources);\n        Dict dict = dictRepository.findById(resources.getId()).orElseGet(Dict::new);\n        ValidationUtil.isNull( dict.getId(),\"Dict\",\"id\",resources.getId());\n        dict.setName(resources.getName());\n        dict.setDescription(resources.getDescription());\n        dictRepository.save(dict);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Set<Long> ids) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void download(List<DictDto> dictDtos, HttpServletResponse response) throws IOException {\n        List<Map<String, Object>> list = new ArrayList<>();\n        for (DictDto dictDTO : dictDtos) {\n            if(CollectionUtil.isNotEmpty(dictDTO.getDictDetails())){\n                for (DictDetailDto dictDetail : dictDTO.getDictDetails()) {\n                    Map<String,Object> map = new LinkedHashMap<>();\n                    map.put(\"\u5b57\u5178\u540d\u79f0\", dictDTO.getName());\n                    map.put(\"\u5b57\u5178\u63cf\u8ff0\", dictDTO.getDescription());\n                    map.put(\"\u5b57\u5178\u6807\u7b7e\", dictDetail.getLabel());\n                    map.put(\"\u5b57\u5178\u503c\", dictDetail.getValue());\n                    map.put(\"\u521b\u5efa\u65e5\u671f\", dictDetail.getCreateTime());\n                    list.add(map);\n                }\n            } else {\n                Map<String,Object> map = new LinkedHashMap<>();\n                map.put(\"\u5b57\u5178\u540d\u79f0\", dictDTO.getName());\n                map.put(\"\u5b57\u5178\u63cf\u8ff0\", dictDTO.getDescription());\n                map.put(\"\u5b57\u5178\u6807\u7b7e\", null);\n                map.put(\"\u5b57\u5178\u503c\", null);\n                map.put(\"\u521b\u5efa\u65e5\u671f\", dictDTO.getCreateTime());\n                list.add(map);\n            }\n        }\n        FileUtil.downloadExcel(list, response);\n    }\n\n    public void delCaches(Dict dict){\n        redisUtils.del(CacheKey.DICT_NAME + dict.getName());\n    }\n}", "metadata": {"task_id": "elunez_eladmin/377", "ground_truth": "\n        // \u6e05\u7406\u7f13\u5b58\n        List<Dict> dicts = dictRepository.findByIdIn(ids);\n        for (Dict dict : dicts) {\n            delCaches(dict);\n        }\n        dictRepository.deleteByIdIn(ids);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "system", "service", "impl", "DictServiceImpl.java"], "context_start_lineno": 0, "function_name": "delete", "left_context": "class DictServiceImpl implements DictService {\n\n    private final DictRepository dictRepository;\n    private final DictMapper dictMapper;\n    private final RedisUtils redisUtils;\n\n    @Override\n    public PageResult<DictDto> queryAll(DictQueryCriteria dict, Pageable pageable){\n        Page<Dict> page = dictRepository.findAll((root, query, cb) -> QueryHelp.getPredicate(root, dict, cb), pageable);\n        return PageUtil.toPage(page.map(dictMapper::toDto));\n    }\n\n    @Override\n    public List<DictDto> queryAll(DictQueryCriteria dict) {\n        List<Dict> list = dictRepository.findAll((root, query, cb) -> QueryHelp.getPredicate(root, dict, cb));\n        return dictMapper.toDto(list);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void create(Dict resources) {\n        dictRepository.save(resources);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void update(Dict resources) {\n        // \u6e05\u7406\u7f13\u5b58\n        delCaches(resources);\n        Dict dict = dictRepository.findById(resources.getId()).orElseGet(Dict::new);\n        ValidationUtil.isNull( dict.getId(),\"Dict\",\"id\",resources.getId());\n        dict.setName(resources.getName());\n        dict.setDescription(resources.getDescription());\n        dictRepository.save(dict);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Set<Long> ids) {", "right_context": "}\n\n    @Override\n    public void download(List<DictDto> dictDtos, HttpServletResponse response) throws IOException {\n        List<Map<String, Object>> list = new ArrayList<>();\n        for (DictDto dictDTO : dictDtos) {\n            if(CollectionUtil.isNotEmpty(dictDTO.getDictDetails())){\n                for (DictDetailDto dictDetail : dictDTO.getDictDetails()) {\n                    Map<String,Object> map = new LinkedHashMap<>();\n                    map.put(\"\u5b57\u5178\u540d\u79f0\", dictDTO.getName());\n                    map.put(\"\u5b57\u5178\u63cf\u8ff0\", dictDTO.getDescription());\n                    map.put(\"\u5b57\u5178\u6807\u7b7e\", dictDetail.getLabel());\n                    map.put(\"\u5b57\u5178\u503c\", dictDetail.getValue());\n                    map.put(\"\u521b\u5efa\u65e5\u671f\", dictDetail.getCreateTime());\n                    list.add(map);\n                }\n            } else {\n                Map<String,Object> map = new LinkedHashMap<>();\n                map.put(\"\u5b57\u5178\u540d\u79f0\", dictDTO.getName());\n                map.put(\"\u5b57\u5178\u63cf\u8ff0\", dictDTO.getDescription());\n                map.put(\"\u5b57\u5178\u6807\u7b7e\", null);\n                map.put(\"\u5b57\u5178\u503c\", null);\n                map.put(\"\u521b\u5efa\u65e5\u671f\", dictDTO.getCreateTime());\n                list.add(map);\n            }\n        }\n        FileUtil.downloadExcel(list, response);\n    }\n\n    public void delCaches(Dict dict){\n        redisUtils.del(CacheKey.DICT_NAME + dict.getName());\n    }\n}", "class_name": "DictServiceImpl", "return_type": "void", "parameters": [{"type": "Set<Long>", "name": "ids"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SpringContextHolder implements ApplicationContextAware, DisposableBean {\n\n    private static ApplicationContext applicationContext = null;\n    private static final List<CallBack> CALL_BACKS = new ArrayList<>();\n    private static boolean addCallback = true;\n\n    /**\n     * \u9488\u5bf9 \u67d0\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5728SpringContextHolder \u672a\u521d\u59cb\u5316\u65f6 \u63d0\u4ea4\u56de\u8c03\u65b9\u6cd5\u3002\n     * \u5728SpringContextHolder \u521d\u59cb\u5316\u540e\uff0c\u8fdb\u884c\u56de\u8c03\u4f7f\u7528\n     *\n     * @param callBack \u56de\u8c03\u51fd\u6570\n     */\n    public synchronized static void addCallBacks(CallBack callBack) {\n        if (addCallback) {\n            SpringContextHolder.CALL_BACKS.add(callBack);\n        } else {\n            log.warn(\"CallBack\uff1a{} \u5df2\u65e0\u6cd5\u6dfb\u52a0\uff01\u7acb\u5373\u6267\u884c\", callBack.getCallBackName());\n            callBack.executor();\n        }\n    }\n\n    /**\n     * \u4ece\u9759\u6001\u53d8\u91cfapplicationContext\u4e2d\u53d6\u5f97Bean, \u81ea\u52a8\u8f6c\u578b\u4e3a\u6240\u8d4b\u503c\u5bf9\u8c61\u7684\u7c7b\u578b.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getBean(String name) {\n        assertContextInjected();\n        return (T) applicationContext.getBean(name);\n    }\n\n    /**\n     * \u4ece\u9759\u6001\u53d8\u91cfapplicationContext\u4e2d\u53d6\u5f97Bean, \u81ea\u52a8\u8f6c\u578b\u4e3a\u6240\u8d4b\u503c\u5bf9\u8c61\u7684\u7c7b\u578b.\n     */\n    public static <T> T getBean(Class<T> requiredType) {\n        assertContextInjected();\n        return applicationContext.getBean(requiredType);\n    }\n\n    /**\n     * \u83b7\u53d6SpringBoot \u914d\u7f6e\u4fe1\u606f\n     *\n     * @param property     \u5c5e\u6027key\n     * @param defaultValue \u9ed8\u8ba4\u503c\n     * @param requiredType \u8fd4\u56de\u7c7b\u578b\n     * @return /\n     */\n    public static <T> T getProperties(String property, T defaultValue, Class<T> requiredType) {\n        T result = defaultValue;\n        try {\n            result = getBean(Environment.class).getProperty(property, requiredType);\n        } catch (Exception ignored) {}\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6SpringBoot \u914d\u7f6e\u4fe1\u606f\n     *\n     * @param property \u5c5e\u6027key\n     * @return /\n     */\n    public static String getProperties(String property) {\n        return getProperties(property, null, String.class);\n    }\n\n    /**\n     * \u83b7\u53d6SpringBoot \u914d\u7f6e\u4fe1\u606f\n     *\n     * @param property     \u5c5e\u6027key\n     * @param requiredType \u8fd4\u56de\u7c7b\u578b\n     * @return /\n     */\n    public static <T> T getProperties(String property, Class<T> requiredType) {\n        return getProperties(property, null, requiredType);\n    }\n\n    /**\n     * \u68c0\u67e5ApplicationContext\u4e0d\u4e3a\u7a7a.\n     */\n    private static void assertContextInjected() {\n        if (applicationContext == null) {\n            throw new IllegalStateException(\"applicaitonContext\u5c5e\u6027\u672a\u6ce8\u5165, \u8bf7\u5728applicationContext\" +\n                    \".xml\u4e2d\u5b9a\u4e49SpringContextHolder\u6216\u5728SpringBoot\u542f\u52a8\u7c7b\u4e2d\u6ce8\u518cSpringContextHolder.\");\n        }\n    }\n\n    /**\n     * \u6e05\u9664SpringContextHolder\u4e2d\u7684ApplicationContext\u4e3aNull.\n     */\n    private static void clearHolder() {\n        log.debug(\"\u6e05\u9664SpringContextHolder\u4e2d\u7684ApplicationContext:\"\n                + applicationContext);\n        applicationContext = null;\n    }\n\n    @Override\n    public void destroy() {\n        SpringContextHolder.clearHolder();\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u83b7\u53d6 @Service \u7684\u6240\u6709 bean \u540d\u79f0\n     * @return /\n     */\n    public static List<String> getAllServiceBeanName() {\n        return new ArrayList<>(Arrays.asList(applicationContext\n                .getBeanNamesForAnnotation(Service.class)));\n    }\n}", "metadata": {"task_id": "elunez_eladmin/406", "ground_truth": "\n        if (SpringContextHolder.applicationContext != null) {\n            log.warn(\"SpringContextHolder\u4e2d\u7684ApplicationContext\u88ab\u8986\u76d6, \u539f\u6709ApplicationContext\u4e3a:\" + SpringContextHolder.applicationContext);\n        }\n        SpringContextHolder.applicationContext = applicationContext;\n        if (addCallback) {\n            for (CallBack callBack : SpringContextHolder.CALL_BACKS) {\n                callBack.executor();\n            }\n            CALL_BACKS.clear();\n        }\n        SpringContextHolder.addCallback = false;\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-common", "src", "main", "java", "me", "zhengjie", "utils", "SpringContextHolder.java"], "context_start_lineno": 0, "function_name": "setApplicationContext", "left_context": "class SpringContextHolder implements ApplicationContextAware, DisposableBean {\n\n    private static ApplicationContext applicationContext = null;\n    private static final List<CallBack> CALL_BACKS = new ArrayList<>();\n    private static boolean addCallback = true;\n\n    /**\n     * \u9488\u5bf9 \u67d0\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5728SpringContextHolder \u672a\u521d\u59cb\u5316\u65f6 \u63d0\u4ea4\u56de\u8c03\u65b9\u6cd5\u3002\n     * \u5728SpringContextHolder \u521d\u59cb\u5316\u540e\uff0c\u8fdb\u884c\u56de\u8c03\u4f7f\u7528\n     *\n     * @param callBack \u56de\u8c03\u51fd\u6570\n     */\n    public synchronized static void addCallBacks(CallBack callBack) {\n        if (addCallback) {\n            SpringContextHolder.CALL_BACKS.add(callBack);\n        } else {\n            log.warn(\"CallBack\uff1a{} \u5df2\u65e0\u6cd5\u6dfb\u52a0\uff01\u7acb\u5373\u6267\u884c\", callBack.getCallBackName());\n            callBack.executor();\n        }\n    }\n\n    /**\n     * \u4ece\u9759\u6001\u53d8\u91cfapplicationContext\u4e2d\u53d6\u5f97Bean, \u81ea\u52a8\u8f6c\u578b\u4e3a\u6240\u8d4b\u503c\u5bf9\u8c61\u7684\u7c7b\u578b.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getBean(String name) {\n        assertContextInjected();\n        return (T) applicationContext.getBean(name);\n    }\n\n    /**\n     * \u4ece\u9759\u6001\u53d8\u91cfapplicationContext\u4e2d\u53d6\u5f97Bean, \u81ea\u52a8\u8f6c\u578b\u4e3a\u6240\u8d4b\u503c\u5bf9\u8c61\u7684\u7c7b\u578b.\n     */\n    public static <T> T getBean(Class<T> requiredType) {\n        assertContextInjected();\n        return applicationContext.getBean(requiredType);\n    }\n\n    /**\n     * \u83b7\u53d6SpringBoot \u914d\u7f6e\u4fe1\u606f\n     *\n     * @param property     \u5c5e\u6027key\n     * @param defaultValue \u9ed8\u8ba4\u503c\n     * @param requiredType \u8fd4\u56de\u7c7b\u578b\n     * @return /\n     */\n    public static <T> T getProperties(String property, T defaultValue, Class<T> requiredType) {\n        T result = defaultValue;\n        try {\n            result = getBean(Environment.class).getProperty(property, requiredType);\n        } catch (Exception ignored) {}\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6SpringBoot \u914d\u7f6e\u4fe1\u606f\n     *\n     * @param property \u5c5e\u6027key\n     * @return /\n     */\n    public static String getProperties(String property) {\n        return getProperties(property, null, String.class);\n    }\n\n    /**\n     * \u83b7\u53d6SpringBoot \u914d\u7f6e\u4fe1\u606f\n     *\n     * @param property     \u5c5e\u6027key\n     * @param requiredType \u8fd4\u56de\u7c7b\u578b\n     * @return /\n     */\n    public static <T> T getProperties(String property, Class<T> requiredType) {\n        return getProperties(property, null, requiredType);\n    }\n\n    /**\n     * \u68c0\u67e5ApplicationContext\u4e0d\u4e3a\u7a7a.\n     */\n    private static void assertContextInjected() {\n        if (applicationContext == null) {\n            throw new IllegalStateException(\"applicaitonContext\u5c5e\u6027\u672a\u6ce8\u5165, \u8bf7\u5728applicationContext\" +\n                    \".xml\u4e2d\u5b9a\u4e49SpringContextHolder\u6216\u5728SpringBoot\u542f\u52a8\u7c7b\u4e2d\u6ce8\u518cSpringContextHolder.\");\n        }\n    }\n\n    /**\n     * \u6e05\u9664SpringContextHolder\u4e2d\u7684ApplicationContext\u4e3aNull.\n     */\n    private static void clearHolder() {\n        log.debug(\"\u6e05\u9664SpringContextHolder\u4e2d\u7684ApplicationContext:\"\n                + applicationContext);\n        applicationContext = null;\n    }\n\n    @Override\n    public void destroy() {\n        SpringContextHolder.clearHolder();\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {", "right_context": "}\n\n    /**\n     * \u83b7\u53d6 @Service \u7684\u6240\u6709 bean \u540d\u79f0\n     * @return /\n     */\n    public static List<String> getAllServiceBeanName() {\n        return new ArrayList<>(Arrays.asList(applicationContext\n                .getBeanNamesForAnnotation(Service.class)));\n    }\n}", "class_name": "SpringContextHolder", "return_type": "void", "parameters": [{"type": "ApplicationContext", "name": "applicationContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FileProperties {\n\n    /** \u6587\u4ef6\u5927\u5c0f\u9650\u5236 */\n    private Long maxSize;\n\n    /** \u5934\u50cf\u5927\u5c0f\u9650\u5236 */\n    private Long avatarMaxSize;\n\n    private ElPath mac;\n\n    private ElPath linux;\n\n    private ElPath windows;\n\n    public ElPath getPath(){<FILL_FUNCTION_BODY>}\n\n    @Data\n    public static class ElPath{\n\n        private String path;\n\n        private String avatar;\n    }\n}", "metadata": {"task_id": "elunez_eladmin/434", "ground_truth": "\n        String os = System.getProperty(\"os.name\");\n        if(os.toLowerCase().startsWith(ElConstant.WIN)) {\n            return windows;\n        } else if(os.toLowerCase().startsWith(ElConstant.MAC)){\n            return mac;\n        }\n        return linux;\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-common", "src", "main", "java", "me", "zhengjie", "config", "FileProperties.java"], "context_start_lineno": 0, "function_name": "getPath", "left_context": "class FileProperties {\n\n    /** \u6587\u4ef6\u5927\u5c0f\u9650\u5236 */\n    private Long maxSize;\n\n    /** \u5934\u50cf\u5927\u5c0f\u9650\u5236 */\n    private Long avatarMaxSize;\n\n    private ElPath mac;\n\n    private ElPath linux;\n\n    private ElPath windows;\n\n    public ElPath getPath(){", "right_context": "}\n\n    @Data\n    public static class ElPath{\n\n        private String path;\n\n        private String avatar;\n    }\n}", "class_name": "FileProperties", "return_type": "ElPath", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AppRun {\n\n    public static void main(String[] args) {<FILL_FUNCTION_BODY>}\n\n    @Bean\n    public SpringContextHolder springContextHolder() {\n        return new SpringContextHolder();\n    }\n\n    /**\n     * \u8bbf\u95ee\u9996\u9875\u63d0\u793a\n     *\n     * @return /\n     */\n    @AnonymousGetMapping(\"/\")\n    public String index() {\n        return \"Backend service started successfully\";\n    }\n}", "metadata": {"task_id": "elunez_eladmin/455", "ground_truth": "\n        SpringApplication springApplication = new SpringApplication(AppRun.class);\n        // \u76d1\u63a7\u5e94\u7528\u7684PID\uff0c\u542f\u52a8\u65f6\u53ef\u6307\u5b9aPID\u8def\u5f84\uff1a--spring.pid.file=/home/eladmin/app.pid\n        // \u6216\u8005\u5728 application.yml \u6dfb\u52a0\u6587\u4ef6\u8def\u5f84\uff0c\u65b9\u4fbf kill\uff0ckill `cat /home/eladmin/app.pid`\n        springApplication.addListeners(new ApplicationPidFileWriter());\n        springApplication.run(args);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "AppRun.java"], "context_start_lineno": 0, "function_name": "main", "left_context": "class AppRun {\n\n    public static void main(String[] args) {", "right_context": "}\n\n    @Bean\n    public SpringContextHolder springContextHolder() {\n        return new SpringContextHolder();\n    }\n\n    /**\n     * \u8bbf\u95ee\u9996\u9875\u63d0\u793a\n     *\n     * @return /\n     */\n    @AnonymousGetMapping(\"/\")\n    public String index() {\n        return \"Backend service started successfully\";\n    }\n}", "class_name": "AppRun", "return_type": "void", "parameters": [{"type": "String[]", "name": "args"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DeployHistoryServiceImpl implements DeployHistoryService {\n\n    private final DeployHistoryRepository deployhistoryRepository;\n    private final DeployHistoryMapper deployhistoryMapper;\n\n    @Override\n    public PageResult<DeployHistoryDto> queryAll(DeployHistoryQueryCriteria criteria, Pageable pageable){\n        Page<DeployHistory> page = deployhistoryRepository.findAll((root, criteriaQuery, criteriaBuilder) -> QueryHelp.getPredicate(root,criteria,criteriaBuilder),pageable);\n        return PageUtil.toPage(page.map(deployhistoryMapper::toDto));\n    }\n\n    @Override\n    public List<DeployHistoryDto> queryAll(DeployHistoryQueryCriteria criteria){\n        return deployhistoryMapper.toDto(deployhistoryRepository.findAll((root, criteriaQuery, criteriaBuilder) -> QueryHelp.getPredicate(root,criteria,criteriaBuilder)));\n    }\n\n    @Override\n    public DeployHistoryDto findById(String id) {\n        DeployHistory deployhistory = deployhistoryRepository.findById(id).orElseGet(DeployHistory::new);\n        ValidationUtil.isNull(deployhistory.getId(),\"DeployHistory\",\"id\",id);\n        return deployhistoryMapper.toDto(deployhistory);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void create(DeployHistory resources) {\n        resources.setId(IdUtil.simpleUUID());\n        deployhistoryRepository.save(resources);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Set<String> ids) {\n        for (String id : ids) {\n            deployhistoryRepository.deleteById(id);\n        }\n    }\n\n    @Override\n    public void download(List<DeployHistoryDto> queryAll, HttpServletResponse response) throws IOException {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "elunez_eladmin/460", "ground_truth": "\n        List<Map<String, Object>> list = new ArrayList<>();\n        for (DeployHistoryDto deployHistoryDto : queryAll) {\n            Map<String,Object> map = new LinkedHashMap<>();\n            map.put(\"\u90e8\u7f72\u7f16\u53f7\", deployHistoryDto.getDeployId());\n            map.put(\"\u5e94\u7528\u540d\u79f0\", deployHistoryDto.getAppName());\n            map.put(\"\u90e8\u7f72IP\", deployHistoryDto.getIp());\n            map.put(\"\u90e8\u7f72\u65f6\u95f4\", deployHistoryDto.getDeployDate());\n            map.put(\"\u90e8\u7f72\u4eba\u5458\", deployHistoryDto.getDeployUser());\n            list.add(map);\n        }\n        FileUtil.downloadExcel(list, response);\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-system", "src", "main", "java", "me", "zhengjie", "modules", "mnt", "service", "impl", "DeployHistoryServiceImpl.java"], "context_start_lineno": 0, "function_name": "download", "left_context": "class DeployHistoryServiceImpl implements DeployHistoryService {\n\n    private final DeployHistoryRepository deployhistoryRepository;\n    private final DeployHistoryMapper deployhistoryMapper;\n\n    @Override\n    public PageResult<DeployHistoryDto> queryAll(DeployHistoryQueryCriteria criteria, Pageable pageable){\n        Page<DeployHistory> page = deployhistoryRepository.findAll((root, criteriaQuery, criteriaBuilder) -> QueryHelp.getPredicate(root,criteria,criteriaBuilder),pageable);\n        return PageUtil.toPage(page.map(deployhistoryMapper::toDto));\n    }\n\n    @Override\n    public List<DeployHistoryDto> queryAll(DeployHistoryQueryCriteria criteria){\n        return deployhistoryMapper.toDto(deployhistoryRepository.findAll((root, criteriaQuery, criteriaBuilder) -> QueryHelp.getPredicate(root,criteria,criteriaBuilder)));\n    }\n\n    @Override\n    public DeployHistoryDto findById(String id) {\n        DeployHistory deployhistory = deployhistoryRepository.findById(id).orElseGet(DeployHistory::new);\n        ValidationUtil.isNull(deployhistory.getId(),\"DeployHistory\",\"id\",id);\n        return deployhistoryMapper.toDto(deployhistory);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void create(DeployHistory resources) {\n        resources.setId(IdUtil.simpleUUID());\n        deployhistoryRepository.save(resources);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Set<String> ids) {\n        for (String id : ids) {\n            deployhistoryRepository.deleteById(id);\n        }\n    }\n\n    @Override\n    public void download(List<DeployHistoryDto> queryAll, HttpServletResponse response) throws IOException {", "right_context": "}\n}", "class_name": "DeployHistoryServiceImpl", "return_type": "void", "parameters": [{"type": "List<DeployHistoryDto>", "name": "queryAll"}, {"type": "HttpServletResponse", "name": "response"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AliPayController {\n\n    private final AlipayUtils alipayUtils;\n    private final AliPayService alipayService;\n\n    @GetMapping\n    public ResponseEntity<AlipayConfig> queryAliConfig() {\n        return new ResponseEntity<>(alipayService.find(), HttpStatus.OK);\n    }\n\n    @Log(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\")\n    @ApiOperation(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\")\n    @PutMapping\n    public ResponseEntity<Object> updateAliPayConfig(@Validated @RequestBody AlipayConfig alipayConfig) {\n        alipayService.config(alipayConfig);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n\n    @Log(\"\u652f\u4ed8\u5b9dPC\u7f51\u9875\u652f\u4ed8\")\n    @ApiOperation(\"PC\u7f51\u9875\u652f\u4ed8\")\n    @PostMapping(value = \"/toPayAsPC\")\n    public ResponseEntity<String> toPayAsPc(@Validated @RequestBody TradeVo trade) throws Exception {\n        AlipayConfig aliPay = alipayService.find();\n        trade.setOutTradeNo(alipayUtils.getOrderCode());\n        String payUrl = alipayService.toPayAsPc(aliPay, trade);\n        return ResponseEntity.ok(payUrl);\n    }\n\n    @Log(\"\u652f\u4ed8\u5b9d\u624b\u673a\u7f51\u9875\u652f\u4ed8\")\n    @ApiOperation(\"\u624b\u673a\u7f51\u9875\u652f\u4ed8\")\n    @PostMapping(value = \"/toPayAsWeb\")\n    public ResponseEntity<String> toPayAsWeb(@Validated @RequestBody TradeVo trade) throws Exception {\n        AlipayConfig alipay = alipayService.find();\n        trade.setOutTradeNo(alipayUtils.getOrderCode());\n        String payUrl = alipayService.toPayAsWeb(alipay, trade);\n        return ResponseEntity.ok(payUrl);\n    }\n\n    @ApiIgnore\n    @AnonymousGetMapping(\"/return\")\n    @ApiOperation(\"\u652f\u4ed8\u4e4b\u540e\u8df3\u8f6c\u7684\u94fe\u63a5\")\n    public ResponseEntity<String> returnPage(HttpServletRequest request, HttpServletResponse response) {<FILL_FUNCTION_BODY>}\n\n    @ApiIgnore\n    @RequestMapping(\"/notify\")\n    @AnonymousAccess\n    @ApiOperation(\"\u652f\u4ed8\u5f02\u6b65\u901a\u77e5(\u8981\u516c\u7f51\u8bbf\u95ee)\uff0c\u63a5\u6536\u5f02\u6b65\u901a\u77e5\uff0c\u68c0\u67e5\u901a\u77e5\u5185\u5bb9app_id\u3001out_trade_no\u3001total_amount\u662f\u5426\u4e0e\u8bf7\u6c42\u4e2d\u7684\u4e00\u81f4\uff0c\u6839\u636etrade_status\u8fdb\u884c\u540e\u7eed\u4e1a\u52a1\u5904\u7406\")\n    public ResponseEntity<Object> notify(HttpServletRequest request) {\n        AlipayConfig alipay = alipayService.find();\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        //\u5185\u5bb9\u9a8c\u7b7e\uff0c\u9632\u6b62\u9ed1\u5ba2\u7be1\u6539\u53c2\u6570\n        if (alipayUtils.rsaCheck(request, alipay)) {\n            //\u4ea4\u6613\u72b6\u6001\n            String tradeStatus = new String(request.getParameter(\"trade_status\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            // \u5546\u6237\u8ba2\u5355\u53f7\n            String outTradeNo = new String(request.getParameter(\"out_trade_no\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u652f\u4ed8\u5b9d\u4ea4\u6613\u53f7\n            String tradeNo = new String(request.getParameter(\"trade_no\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u4ed8\u6b3e\u91d1\u989d\n            String totalAmount = new String(request.getParameter(\"total_amount\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u9a8c\u8bc1\n            if (tradeStatus.equals(AliPayStatusEnum.SUCCESS.getValue()) || tradeStatus.equals(AliPayStatusEnum.FINISHED.getValue())) {\n                // \u9a8c\u8bc1\u901a\u8fc7\u540e\u5e94\u8be5\u6839\u636e\u4e1a\u52a1\u9700\u8981\u5904\u7406\u8ba2\u5355\n            }\n            return new ResponseEntity<>(HttpStatus.OK);\n        }\n        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n    }\n}", "metadata": {"task_id": "elunez_eladmin/494", "ground_truth": "\n        AlipayConfig alipay = alipayService.find();\n        response.setContentType(\"text/html;charset=\" + alipay.getCharset());\n        //\u5185\u5bb9\u9a8c\u7b7e\uff0c\u9632\u6b62\u9ed1\u5ba2\u7be1\u6539\u53c2\u6570\n        if (alipayUtils.rsaCheck(request, alipay)) {\n            //\u5546\u6237\u8ba2\u5355\u53f7\n            String outTradeNo = new String(request.getParameter(\"out_trade_no\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u652f\u4ed8\u5b9d\u4ea4\u6613\u53f7\n            String tradeNo = new String(request.getParameter(\"trade_no\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            System.out.println(\"\u5546\u6237\u8ba2\u5355\u53f7\" + outTradeNo + \"  \" + \"\u7b2c\u4e09\u65b9\u4ea4\u6613\u53f7\" + tradeNo);\n\n            // \u6839\u636e\u4e1a\u52a1\u9700\u8981\u8fd4\u56de\u6570\u636e\uff0c\u8fd9\u91cc\u7edf\u4e00\u8fd4\u56deOK\n            return new ResponseEntity<>(\"payment successful\", HttpStatus.OK);\n        } else {\n            // \u6839\u636e\u4e1a\u52a1\u9700\u8981\u8fd4\u56de\u6570\u636e\n            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n        }\n    ", "fpath_tuple": ["elunez_eladmin", "eladmin", "eladmin-tools", "src", "main", "java", "me", "zhengjie", "rest", "AliPayController.java"], "context_start_lineno": 0, "function_name": "returnPage", "left_context": "class AliPayController {\n\n    private final AlipayUtils alipayUtils;\n    private final AliPayService alipayService;\n\n    @GetMapping\n    public ResponseEntity<AlipayConfig> queryAliConfig() {\n        return new ResponseEntity<>(alipayService.find(), HttpStatus.OK);\n    }\n\n    @Log(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\")\n    @ApiOperation(\"\u914d\u7f6e\u652f\u4ed8\u5b9d\")\n    @PutMapping\n    public ResponseEntity<Object> updateAliPayConfig(@Validated @RequestBody AlipayConfig alipayConfig) {\n        alipayService.config(alipayConfig);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n\n    @Log(\"\u652f\u4ed8\u5b9dPC\u7f51\u9875\u652f\u4ed8\")\n    @ApiOperation(\"PC\u7f51\u9875\u652f\u4ed8\")\n    @PostMapping(value = \"/toPayAsPC\")\n    public ResponseEntity<String> toPayAsPc(@Validated @RequestBody TradeVo trade) throws Exception {\n        AlipayConfig aliPay = alipayService.find();\n        trade.setOutTradeNo(alipayUtils.getOrderCode());\n        String payUrl = alipayService.toPayAsPc(aliPay, trade);\n        return ResponseEntity.ok(payUrl);\n    }\n\n    @Log(\"\u652f\u4ed8\u5b9d\u624b\u673a\u7f51\u9875\u652f\u4ed8\")\n    @ApiOperation(\"\u624b\u673a\u7f51\u9875\u652f\u4ed8\")\n    @PostMapping(value = \"/toPayAsWeb\")\n    public ResponseEntity<String> toPayAsWeb(@Validated @RequestBody TradeVo trade) throws Exception {\n        AlipayConfig alipay = alipayService.find();\n        trade.setOutTradeNo(alipayUtils.getOrderCode());\n        String payUrl = alipayService.toPayAsWeb(alipay, trade);\n        return ResponseEntity.ok(payUrl);\n    }\n\n    @ApiIgnore\n    @AnonymousGetMapping(\"/return\")\n    @ApiOperation(\"\u652f\u4ed8\u4e4b\u540e\u8df3\u8f6c\u7684\u94fe\u63a5\")\n    public ResponseEntity<String> returnPage(HttpServletRequest request, HttpServletResponse response) {", "right_context": "}\n\n    @ApiIgnore\n    @RequestMapping(\"/notify\")\n    @AnonymousAccess\n    @ApiOperation(\"\u652f\u4ed8\u5f02\u6b65\u901a\u77e5(\u8981\u516c\u7f51\u8bbf\u95ee)\uff0c\u63a5\u6536\u5f02\u6b65\u901a\u77e5\uff0c\u68c0\u67e5\u901a\u77e5\u5185\u5bb9app_id\u3001out_trade_no\u3001total_amount\u662f\u5426\u4e0e\u8bf7\u6c42\u4e2d\u7684\u4e00\u81f4\uff0c\u6839\u636etrade_status\u8fdb\u884c\u540e\u7eed\u4e1a\u52a1\u5904\u7406\")\n    public ResponseEntity<Object> notify(HttpServletRequest request) {\n        AlipayConfig alipay = alipayService.find();\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        //\u5185\u5bb9\u9a8c\u7b7e\uff0c\u9632\u6b62\u9ed1\u5ba2\u7be1\u6539\u53c2\u6570\n        if (alipayUtils.rsaCheck(request, alipay)) {\n            //\u4ea4\u6613\u72b6\u6001\n            String tradeStatus = new String(request.getParameter(\"trade_status\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            // \u5546\u6237\u8ba2\u5355\u53f7\n            String outTradeNo = new String(request.getParameter(\"out_trade_no\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u652f\u4ed8\u5b9d\u4ea4\u6613\u53f7\n            String tradeNo = new String(request.getParameter(\"trade_no\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u4ed8\u6b3e\u91d1\u989d\n            String totalAmount = new String(request.getParameter(\"total_amount\").getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);\n            //\u9a8c\u8bc1\n            if (tradeStatus.equals(AliPayStatusEnum.SUCCESS.getValue()) || tradeStatus.equals(AliPayStatusEnum.FINISHED.getValue())) {\n                // \u9a8c\u8bc1\u901a\u8fc7\u540e\u5e94\u8be5\u6839\u636e\u4e1a\u52a1\u9700\u8981\u5904\u7406\u8ba2\u5355\n            }\n            return new ResponseEntity<>(HttpStatus.OK);\n        }\n        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n    }\n}", "class_name": "AliPayController", "return_type": "ResponseEntity<String>", "parameters": [{"type": "HttpServletRequest", "name": "request"}, {"type": "HttpServletResponse", "name": "response"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordDataTree implements IWordData {\n\n    /**\n     * \u6839\u8282\u70b9\n     */\n    private WordDataTreeNode root;\n\n    @Override\n    public synchronized void initWordData(Collection<String> collection) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public WordContainsTypeEnum contains(StringBuilder stringBuilder,\n                                         InnerSensitiveWordContext innerContext) {\n        WordDataTreeNode nowNode = root;\n\n        int len = stringBuilder.length();\n\n        for(int i = 0; i < len; i++) {\n            // \u83b7\u53d6\u5f53\u524d\u7684 map \u4fe1\u606f\n            nowNode = getNowMap(nowNode, i, stringBuilder, innerContext);\n\n            // \u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5224\u65ad\u662f\u5426\u4e3a\u7ed3\u5c3e\u3002\n            if (ObjectUtil.isNull(nowNode)) {\n                return WordContainsTypeEnum.NOT_FOUND;\n            }\n        }\n\n        if(nowNode.end()) {\n            return WordContainsTypeEnum.CONTAINS_END;\n        }\n\n        return WordContainsTypeEnum.CONTAINS_PREFIX;\n    }\n\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7684 Map\n     * @param nowNode \u5f53\u524d\u8282\u70b9\n     * @param index \u4e0b\u6807\n     * @param stringBuilder \u6587\u672c\u7f13\u5b58\n     * @param sensitiveContext \u4e0a\u4e0b\u6587\n     * @return \u5b9e\u9645\u7684\u5f53\u524d map\n     * @since 0.0.7\n     */\n    private WordDataTreeNode getNowMap(WordDataTreeNode nowNode,\n                          final int index,\n                          final StringBuilder stringBuilder,\n                          final InnerSensitiveWordContext sensitiveContext) {\n        final IWordContext context = sensitiveContext.wordContext();\n\n        // \u8fd9\u91cc\u7684 char \u5df2\u7ecf\u662f\u7edf\u4e00\u683c\u5f0f\u5316\u4e4b\u540e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u518d\u6b21\u683c\u5f0f\u5316\u3002\n        char mappingChar = stringBuilder.charAt(index);\n\n        // \u8fd9\u91cc\u505a\u4e00\u6b21\u91cd\u590d\u8bcd\u7684\u5904\u7406\n        WordDataTreeNode currentMap = nowNode.getSubNode(mappingChar);\n        // \u542f\u7528\u5ffd\u7565\u91cd\u590d&\u5f53\u524d\u4e0b\u6807\u4e0d\u662f\u7b2c\u4e00\u4e2a\n        if(context.ignoreRepeat()\n                && index > 0) {\n            char preMappingChar = stringBuilder.charAt(index-1);\n\n            // \u76f4\u63a5\u8d4b\u503c\u4e3a\u4e0a\u4e00\u4e2a map\n            if(preMappingChar == mappingChar) {\n                currentMap = nowNode;\n            }\n        }\n\n        return currentMap;\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/12", "ground_truth": "\n        WordDataTreeNode newRoot = new WordDataTreeNode();\n\n        for(String word : collection) {\n            if(StringUtil.isEmpty(word)) {\n                continue;\n            }\n\n            WordDataTreeNode tempNode = newRoot;\n            char[] chars = word.toCharArray();\n            for (char c : chars) {\n                // \u83b7\u53d6\u5b50\u8282\u70b9\n                WordDataTreeNode subNode = tempNode.getSubNode(c);\n                if (subNode == null) {\n                    subNode = new WordDataTreeNode();\n                    // \u52a0\u5165\u65b0\u7684\u5b50\u8282\u70b9\n                    tempNode.addSubNode(c, subNode);\n                }\n\n                // \u4e34\u65f6\u8282\u70b9\u6307\u5411\u5b50\u8282\u70b9\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\n                tempNode = subNode;\n            }\n\n            // \u8bbe\u7f6e\u7ed3\u675f\u6807\u8bc6\uff08\u5faa\u73af\u7ed3\u675f\uff0c\u8bbe\u7f6e\u4e00\u6b21\u5373\u53ef\uff09\n            tempNode.end(true);\n        }\n\n        // \u521d\u59cb\u5316\u5b8c\u6210\u624d\u505a\u66ff\u6362\n        this.root = newRoot;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "data", "WordDataTree.java"], "context_start_lineno": 0, "function_name": "initWordData", "left_context": "class WordDataTree implements IWordData {\n\n    /**\n     * \u6839\u8282\u70b9\n     */\n    private WordDataTreeNode root;\n\n    @Override\n    public synchronized void initWordData(Collection<String> collection) {", "right_context": "}\n\n    @Override\n    public WordContainsTypeEnum contains(StringBuilder stringBuilder,\n                                         InnerSensitiveWordContext innerContext) {\n        WordDataTreeNode nowNode = root;\n\n        int len = stringBuilder.length();\n\n        for(int i = 0; i < len; i++) {\n            // \u83b7\u53d6\u5f53\u524d\u7684 map \u4fe1\u606f\n            nowNode = getNowMap(nowNode, i, stringBuilder, innerContext);\n\n            // \u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5224\u65ad\u662f\u5426\u4e3a\u7ed3\u5c3e\u3002\n            if (ObjectUtil.isNull(nowNode)) {\n                return WordContainsTypeEnum.NOT_FOUND;\n            }\n        }\n\n        if(nowNode.end()) {\n            return WordContainsTypeEnum.CONTAINS_END;\n        }\n\n        return WordContainsTypeEnum.CONTAINS_PREFIX;\n    }\n\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7684 Map\n     * @param nowNode \u5f53\u524d\u8282\u70b9\n     * @param index \u4e0b\u6807\n     * @param stringBuilder \u6587\u672c\u7f13\u5b58\n     * @param sensitiveContext \u4e0a\u4e0b\u6587\n     * @return \u5b9e\u9645\u7684\u5f53\u524d map\n     * @since 0.0.7\n     */\n    private WordDataTreeNode getNowMap(WordDataTreeNode nowNode,\n                          final int index,\n                          final StringBuilder stringBuilder,\n                          final InnerSensitiveWordContext sensitiveContext) {\n        final IWordContext context = sensitiveContext.wordContext();\n\n        // \u8fd9\u91cc\u7684 char \u5df2\u7ecf\u662f\u7edf\u4e00\u683c\u5f0f\u5316\u4e4b\u540e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u518d\u6b21\u683c\u5f0f\u5316\u3002\n        char mappingChar = stringBuilder.charAt(index);\n\n        // \u8fd9\u91cc\u505a\u4e00\u6b21\u91cd\u590d\u8bcd\u7684\u5904\u7406\n        WordDataTreeNode currentMap = nowNode.getSubNode(mappingChar);\n        // \u542f\u7528\u5ffd\u7565\u91cd\u590d&\u5f53\u524d\u4e0b\u6807\u4e0d\u662f\u7b2c\u4e00\u4e2a\n        if(context.ignoreRepeat()\n                && index > 0) {\n            char preMappingChar = stringBuilder.charAt(index-1);\n\n            // \u76f4\u63a5\u8d4b\u503c\u4e3a\u4e0a\u4e00\u4e2a map\n            if(preMappingChar == mappingChar) {\n                currentMap = nowNode;\n            }\n        }\n\n        return currentMap;\n    }\n\n}", "class_name": "WordDataTree", "return_type": "void", "parameters": [{"type": "Collection<String>", "name": "collection"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordCheckEmail extends AbstractConditionWordCheck {\n\n    /**\n     * @since 0.3.0\n     */\n    private static final IWordCheck INSTANCE = new WordCheckEmail();\n\n    public static IWordCheck getInstance() {\n        return INSTANCE;\n    }\n\n    @Override\n    protected Class<? extends IWordCheck> getSensitiveCheckClass() {\n        return WordCheckEmail.class;\n    }\n\n    @Override\n    protected String getType() {\n        return WordTypeEnum.EMAIL.getCode();\n    }\n\n    @Override\n    protected boolean isCharCondition(char mappingChar, int index, InnerSensitiveWordContext checkContext) {\n        return CharUtil.isEmilChar(mappingChar);\n    }\n\n    @Override\n    protected boolean isStringCondition(int index, StringBuilder stringBuilder, InnerSensitiveWordContext checkContext) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/25", "ground_truth": "\n        int bufferLen = stringBuilder.length();\n\n        //x@a.cn\n        if(bufferLen < 6) {\n            return false;\n        }\n        if(bufferLen > WordConst.MAX_EMAIL_LEN) {\n            return false;\n        }\n\n        String string = stringBuilder.toString();\n        return RegexUtil.isEmail(string);\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "check", "WordCheckEmail.java"], "context_start_lineno": 0, "function_name": "isStringCondition", "left_context": "class WordCheckEmail extends AbstractConditionWordCheck {\n\n    /**\n     * @since 0.3.0\n     */\n    private static final IWordCheck INSTANCE = new WordCheckEmail();\n\n    public static IWordCheck getInstance() {\n        return INSTANCE;\n    }\n\n    @Override\n    protected Class<? extends IWordCheck> getSensitiveCheckClass() {\n        return WordCheckEmail.class;\n    }\n\n    @Override\n    protected String getType() {\n        return WordTypeEnum.EMAIL.getCode();\n    }\n\n    @Override\n    protected boolean isCharCondition(char mappingChar, int index, InnerSensitiveWordContext checkContext) {\n        return CharUtil.isEmilChar(mappingChar);\n    }\n\n    @Override\n    protected boolean isStringCondition(int index, StringBuilder stringBuilder, InnerSensitiveWordContext checkContext) {", "right_context": "}\n\n}", "class_name": "WordCheckEmail", "return_type": "boolean", "parameters": [{"type": "int", "name": "index"}, {"type": "StringBuilder", "name": "stringBuilder"}, {"type": "InnerSensitiveWordContext", "name": "checkContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordAllows {\n\n    private WordAllows(){}\n\n    /**\n     * \u8d23\u4efb\u94fe\n     * @param wordAllow \u5141\u8bb8\n     * @param others \u5176\u4ed6\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordAllow chains(final IWordAllow wordAllow,\n                                    final IWordAllow... others) {\n        return new WordAllowInit() {\n            @Override\n            protected void init(Pipeline<IWordAllow> pipeline) {<FILL_FUNCTION_BODY>}\n        };\n    }\n\n    /**\n     * \u7cfb\u7edf\u5b9e\u73b0\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordAllow defaults() {\n        return WordAllowSystem.getInstance();\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/55", "ground_truth": "\n                pipeline.addLast(wordAllow);\n\n                if(ArrayUtil.isNotEmpty(others)) {\n                    for(IWordAllow other : others) {\n                        pipeline.addLast(other);\n                    }\n                }\n            ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "allow", "WordAllows.java"], "context_start_lineno": 0, "function_name": "init", "left_context": "class WordAllows {\n\n    private WordAllows(){}\n\n    /**\n     * \u8d23\u4efb\u94fe\n     * @param wordAllow \u5141\u8bb8\n     * @param others \u5176\u4ed6\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordAllow chains(final IWordAllow wordAllow,\n                                    final IWordAllow... others) {\n        return new WordAllowInit() {\n            @Override\n            protected void init(Pipeline<IWordAllow> pipeline) {", "right_context": "}\n        };\n    }\n\n    /**\n     * \u7cfb\u7edf\u5b9e\u73b0\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordAllow defaults() {\n        return WordAllowSystem.getInstance();\n    }\n\n}", "class_name": "WordAllows", "return_type": "void", "parameters": [{"type": "Pipeline<IWordAllow>", "name": "pipeline"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckNone.java\n// --------------------------------------------------\n// public static WordCheckResult getNoneResult(){\n//   return NONE_RESULT;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckResult.java\n// --------------------------------------------------\n// public static WordCheckResult newInstance(){\n//   return new WordCheckResult();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckResult.java\n// --------------------------------------------------\n// public WordCheckResult index(int index){\n//   this.index=index;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckResult.java\n// --------------------------------------------------\n// public WordCheckResult checkClass(Class<? extends IWordCheck> checkClass){\n//   this.checkClass=checkClass;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckResult.java\n// --------------------------------------------------\n// public WordCheckResult type(String type){\n//   this.type=type;\n//   return this;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/api/IWordCheck.java\n// --------------------------------------------------\n// /** \n//  * \u68c0\u67e5\u654f\u611f\u8bcd\u6570\u91cf <p> \uff081\uff09\u5982\u679c\u672a\u547d\u4e2d\u654f\u611f\u8bcd\uff0c\u76f4\u63a5\u8fd4\u56de 0 \uff082\uff09\u547d\u4e2d\u654f\u611f\u8bcd\uff0c\u5219\u8fd4\u56de\u654f\u611f\u8bcd\u7684\u957f\u5ea6\u3002 <p> ps: \u8fd9\u91cc\u7ed3\u679c\u8fdb\u884c\u4f18\u5316\uff0c 1. \u662f\u5426\u5305\u542b\u654f\u611f\u8bcd\u3002 2. \u654f\u611f\u8bcd\u7684\u957f\u5ea6 3. \u6b63\u5e38\u8d70\u8fc7\u5b57\u6bb5\u7684\u957f\u5ea6\uff08\u4fbf\u4e8e\u540e\u671f\u66ff\u6362\u4f18\u5316\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5faa\u73af\u91cd\u590d\uff09\n//  * @param beginIndex    \u5f00\u59cb\u4e0b\u6807\n//  * @param context       \u6267\u884c\u4e0a\u4e0b\u6587\n//  * @return \u654f\u611f\u4fe1\u606f\u5bf9\u5e94\u7684\u957f\u5ea6\n//  * @since 0.0.5\n//  */\n// WordCheckResult sensitiveCheck(final int beginIndex,final InnerSensitiveWordContext context);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckInit.java\n// --------------------------------------------------\n// @Override public WordCheckResult sensitiveCheck(final int beginIndex,final InnerSensitiveWordContext checkContext){\n//   Pipeline<IWordCheck> pipeline=new DefaultPipeline<>();\n//   this.init(pipeline);\n//   List<IWordCheck> sensitiveChecks=pipeline.list();\n//   for (  IWordCheck sensitiveCheck : sensitiveChecks) {\n//     WordCheckResult result=sensitiveCheck.sensitiveCheck(beginIndex,checkContext);\n//     if (result.index() > 0) {\n//       return result;\n//     }\n//   }\n//   return WordCheckNone.getNoneResult();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/check/WordCheckNone.java\n// --------------------------------------------------\n// @Override public WordCheckResult sensitiveCheck(int beginIndex,InnerSensitiveWordContext context){\n//   return NONE_RESULT;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractWordCheck implements IWordCheck {\n\n    /**\n     * \u83b7\u53d6\u6821\u9a8c\u7c7b\n     * @return \u7c7b\n     * @since 0.3.2\n     */\n    protected abstract Class<? extends IWordCheck> getSensitiveCheckClass();\n\n    /**\n     * \u83b7\u53d6\u786e\u5207\u7684\u957f\u5ea6\n     * @param beginIndex \u5f00\u59cb\n     * @param checkContext \u4e0a\u4e0b\u6587\n     * @return \u957f\u5ea6\n     * @since 0.4.0\n     */\n    protected abstract int getActualLength(int beginIndex, final InnerSensitiveWordContext checkContext);\n\n    /**\n     * \u83b7\u53d6\u7c7b\u522b\n     * @return \u7c7b\u522b\n     * @since 0.14.0\n     */\n    protected abstract String getType();\n\n    @Override\n    public WordCheckResult sensitiveCheck(int beginIndex,\n                                          final InnerSensitiveWordContext checkContext) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/69", "ground_truth": "\n        Class<? extends IWordCheck> clazz = getSensitiveCheckClass();\n        final String txt = checkContext.originalText();\n        if(StringUtil.isEmpty(txt)) {\n            return WordCheckResult.newInstance()\n                    .index(0)\n                    .type(getType())\n                    .checkClass(clazz);\n        }\n\n        int actualLength = getActualLength(beginIndex, checkContext);\n\n        return WordCheckResult.newInstance()\n                .index(actualLength)\n                .type(getType())\n                .checkClass(clazz);\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "check", "AbstractWordCheck.java"], "context_start_lineno": 0, "function_name": "sensitiveCheck", "left_context": "class AbstractWordCheck implements IWordCheck {\n\n    /**\n     * \u83b7\u53d6\u6821\u9a8c\u7c7b\n     * @return \u7c7b\n     * @since 0.3.2\n     */\n    protected abstract Class<? extends IWordCheck> getSensitiveCheckClass();\n\n    /**\n     * \u83b7\u53d6\u786e\u5207\u7684\u957f\u5ea6\n     * @param beginIndex \u5f00\u59cb\n     * @param checkContext \u4e0a\u4e0b\u6587\n     * @return \u957f\u5ea6\n     * @since 0.4.0\n     */\n    protected abstract int getActualLength(int beginIndex, final InnerSensitiveWordContext checkContext);\n\n    /**\n     * \u83b7\u53d6\u7c7b\u522b\n     * @return \u7c7b\u522b\n     * @since 0.14.0\n     */\n    protected abstract String getType();\n\n    @Override\n    public WordCheckResult sensitiveCheck(int beginIndex,\n                                          final InnerSensitiveWordContext checkContext) {", "right_context": "}\n\n}", "class_name": "AbstractWordCheck", "return_type": "WordCheckResult", "parameters": [{"type": "int", "name": "beginIndex"}, {"type": "InnerSensitiveWordContext", "name": "checkContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/api/context/InnerSensitiveWordContext.java\n// --------------------------------------------------\n// public Map<Character,Character> formatCharMapping(){\n//   return formatCharMapping;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InnerWordFormatUtils {\n\n    private InnerWordFormatUtils(){}\n\n    /**\n     * \u7a7a\u5b57\u7b26\u6570\u7ec4\n     * @since 0.6.0\n     */\n    private static final char[] EMPTY_CHARS = new char[0];\n\n    /**\n     * \u683c\u5f0f\u5316\n     * @param original \u539f\u59cb\n     * @param context \u4e0a\u4e0b\u6587\n     * @return \u7ed3\u679c\n     * @since 0.1.1\n     */\n    public static String format(final String original, final IWordContext context) {\n        if(StringUtil.isEmpty(original)) {\n            return original;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        IWordFormat charFormat = context.wordFormat();\n        char[] chars = original.toCharArray();\n        for(char c : chars) {\n            char cf = charFormat.format(c, context);\n            stringBuilder.append(cf);\n        }\n\n        return stringBuilder.toString();\n    }\n\n    /**\n     * \u5b57\u7b26\u4e32\u7edf\u4e00\u7684\u683c\u5f0f\u5316\u5904\u7406\n     * @param original \u539f\u59cb\u6587\u672c\n     * @param context \u4e0a\u4e0b\u6587\n     * @return \u7ed3\u679c\n     * @since 0.6.0\n     */\n    public static Map<Character, Character> formatCharsMapping(final String original, final IWordContext context) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u683c\u5f0f\u5316\u5217\u8868\n     * @param list \u5217\u8868\n     * @param context \u4e0a\u4e0b\u6587\n     * @return \u7ed3\u679c\n     * @since 0\u30023.0\n     */\n    public static List<String> formatWordList(List<String> list,\n                                              final IWordContext context) {\n        if(CollectionUtil.isEmpty(list)) {\n            return list;\n        }\n\n        List<String> resultList = new ArrayList<>(list.size());\n        for(String word : list) {\n            String formatWord = InnerWordFormatUtils.format(word, context);\n            resultList.add(formatWord);\n        }\n\n        return resultList;\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/105", "ground_truth": "\n        if(StringUtil.isEmpty(original)) {\n            return Collections.emptyMap();\n        }\n\n        final int len = original.length();\n\n        char[] rawChars = original.toCharArray();\n        Map<Character, Character> map = new HashMap<>(rawChars.length);\n\n        IWordFormat charFormat = context.wordFormat();\n        for(int i = 0; i < len; i++) {\n            final char currentChar = rawChars[i];\n            char formatChar = charFormat.format(currentChar, context);\n            map.put(currentChar, formatChar);\n        }\n\n        return map;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "utils", "InnerWordFormatUtils.java"], "context_start_lineno": 0, "function_name": "formatCharsMapping", "left_context": "class InnerWordFormatUtils {\n\n    private InnerWordFormatUtils(){}\n\n    /**\n     * \u7a7a\u5b57\u7b26\u6570\u7ec4\n     * @since 0.6.0\n     */\n    private static final char[] EMPTY_CHARS = new char[0];\n\n    /**\n     * \u683c\u5f0f\u5316\n     * @param original \u539f\u59cb\n     * @param context \u4e0a\u4e0b\u6587\n     * @return \u7ed3\u679c\n     * @since 0.1.1\n     */\n    public static String format(final String original, final IWordContext context) {\n        if(StringUtil.isEmpty(original)) {\n            return original;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        IWordFormat charFormat = context.wordFormat();\n        char[] chars = original.toCharArray();\n        for(char c : chars) {\n            char cf = charFormat.format(c, context);\n            stringBuilder.append(cf);\n        }\n\n        return stringBuilder.toString();\n    }\n\n    /**\n     * \u5b57\u7b26\u4e32\u7edf\u4e00\u7684\u683c\u5f0f\u5316\u5904\u7406\n     * @param original \u539f\u59cb\u6587\u672c\n     * @param context \u4e0a\u4e0b\u6587\n     * @return \u7ed3\u679c\n     * @since 0.6.0\n     */\n    public static Map<Character, Character> formatCharsMapping(final String original, final IWordContext context) {", "right_context": "}\n\n    /**\n     * \u683c\u5f0f\u5316\u5217\u8868\n     * @param list \u5217\u8868\n     * @param context \u4e0a\u4e0b\u6587\n     * @return \u7ed3\u679c\n     * @since 0\u30023.0\n     */\n    public static List<String> formatWordList(List<String> list,\n                                              final IWordContext context) {\n        if(CollectionUtil.isEmpty(list)) {\n            return list;\n        }\n\n        List<String> resultList = new ArrayList<>(list.size());\n        for(String word : list) {\n            String formatWord = InnerWordFormatUtils.format(word, context);\n            resultList.add(formatWord);\n        }\n\n        return resultList;\n    }\n\n}", "class_name": "InnerWordFormatUtils", "return_type": "Map<Character,Character>", "parameters": [{"type": "String", "name": "original"}, {"type": "IWordContext", "name": "context"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass InnerWordCharUtils {\n\n    private InnerWordCharUtils() {\n    }\n\n    /**\n     * \u82f1\u6587\u5b57\u6bcd1\n     * @since 0.0.4\n     */\n    private static final String LETTERS_ONE =\n            \"\u24b6\u24b7\u24b8\u24b9\u24ba\u24bb\u24bc\u24bd\u24be\u24bf\u24c0\u24c1\u24c2\u24c3\u24c4\u24c5\u24c6\u24c7\u24c8\u24c9\u24ca\u24cb\u24cc\u24cd\u24ce\u24cf\" +\n                    \"\u24d0\u24d1\u24d2\u24d3\u24d4\u24d5\u24d6\u24d7\u24d8\u24d9\u24da\u24db\u24dc\u24dd\u24de\u24df\u24e0\u24e1\u24e2\u24e3\u24e4\u24e5\u24e6\u24e7\u24e8\u24e9\" +\n                    \"\u249c\u249d\u249e\u249f\u24a0\u24a1\u24a2\u24a3\u24a4\u24a5\u24a6\u24a7\u24a8\u24a9\u24aa\u24ab\u24ac\u24ad\u24ae\u24af\u24b0\u24b1\u24b2\u24b3\u24b4\u24b5\";\n\n    /**\n     * \u82f1\u6587\u5b57\u6bcd2\n     * @since 0.0.4\n     */\n    private static final String LETTERS_TWO =\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n                    \"abcdefghijklmnopqrstuvwxyz\" +\n                    \"abcdefghijklmnopqrstuvwxyz\";\n\n\n    /**\n     * \u82f1\u6587\u5b57\u6bcd map\n     * @since 0.0.4\n     */\n    private static final Map<Character, Character> LETTER_MAP = Guavas.newHashMap(LETTERS_ONE.length());\n\n    static {\n        final int size = LETTERS_ONE.length();\n\n        for(int i = 0; i < size; i++) {\n            LETTER_MAP.put(LETTERS_ONE.charAt(i), LETTERS_TWO.charAt(i));\n        }\n    }\n\n    /**\n     * \u6620\u5c04\u540e\u7684 char\n     * @param character \u5f85\u8f6c\u6362\u7684 char\n     * @return \u7ed3\u679c\n     * @since 0.0.4\n     */\n    public static Character getMappingChar(final Character character) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u6784\u5efa\u5b57\u7b26\u4e32\n     * @param chars \u5b57\u7b26\u6570\u7ec4\n     * @param startIndex \u5f00\u59cb\u4f4d\u7f6e\n     * @param endIndex \u7ed3\u675f\u4f4d\u7f6e\n     * @return \u7ed3\u679c\n     * @since 0.5.0\n     */\n    public static String getString(final char[] chars,\n                                   final int startIndex,\n                                   final int endIndex) {\n        // \u622a\u53d6\n        int len = endIndex - startIndex;\n        return new String(chars, startIndex, len);\n    }\n\n    /**\n     * \u6784\u5efa\u5b57\u7b26\u4e32\n     * @param chars \u5b57\u7b26\u6570\u7ec4\n     * @param wordResult \u7ed3\u679c\n     * @return \u7ed3\u679c\n     * @since 0.5.0\n     */\n    public static String getString(final char[] chars,\n                                   final IWordResult wordResult) {\n        return getString(chars, wordResult.startIndex(), wordResult.endIndex());\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/121", "ground_truth": "\n        final Character mapChar = LETTER_MAP.get(character);\n        if(ObjectUtil.isNotNull(mapChar)) {\n            return mapChar;\n        }\n\n        return character;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "utils", "InnerWordCharUtils.java"], "context_start_lineno": 0, "function_name": "getMappingChar", "left_context": "class InnerWordCharUtils {\n\n    private InnerWordCharUtils() {\n    }\n\n    /**\n     * \u82f1\u6587\u5b57\u6bcd1\n     * @since 0.0.4\n     */\n    private static final String LETTERS_ONE =\n            \"\u24b6\u24b7\u24b8\u24b9\u24ba\u24bb\u24bc\u24bd\u24be\u24bf\u24c0\u24c1\u24c2\u24c3\u24c4\u24c5\u24c6\u24c7\u24c8\u24c9\u24ca\u24cb\u24cc\u24cd\u24ce\u24cf\" +\n                    \"\u24d0\u24d1\u24d2\u24d3\u24d4\u24d5\u24d6\u24d7\u24d8\u24d9\u24da\u24db\u24dc\u24dd\u24de\u24df\u24e0\u24e1\u24e2\u24e3\u24e4\u24e5\u24e6\u24e7\u24e8\u24e9\" +\n                    \"\u249c\u249d\u249e\u249f\u24a0\u24a1\u24a2\u24a3\u24a4\u24a5\u24a6\u24a7\u24a8\u24a9\u24aa\u24ab\u24ac\u24ad\u24ae\u24af\u24b0\u24b1\u24b2\u24b3\u24b4\u24b5\";\n\n    /**\n     * \u82f1\u6587\u5b57\u6bcd2\n     * @since 0.0.4\n     */\n    private static final String LETTERS_TWO =\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n                    \"abcdefghijklmnopqrstuvwxyz\" +\n                    \"abcdefghijklmnopqrstuvwxyz\";\n\n\n    /**\n     * \u82f1\u6587\u5b57\u6bcd map\n     * @since 0.0.4\n     */\n    private static final Map<Character, Character> LETTER_MAP = Guavas.newHashMap(LETTERS_ONE.length());\n\n    static {\n        final int size = LETTERS_ONE.length();\n\n        for(int i = 0; i < size; i++) {\n            LETTER_MAP.put(LETTERS_ONE.charAt(i), LETTERS_TWO.charAt(i));\n        }\n    }\n\n    /**\n     * \u6620\u5c04\u540e\u7684 char\n     * @param character \u5f85\u8f6c\u6362\u7684 char\n     * @return \u7ed3\u679c\n     * @since 0.0.4\n     */\n    public static Character getMappingChar(final Character character) {", "right_context": "}\n\n    /**\n     * \u6784\u5efa\u5b57\u7b26\u4e32\n     * @param chars \u5b57\u7b26\u6570\u7ec4\n     * @param startIndex \u5f00\u59cb\u4f4d\u7f6e\n     * @param endIndex \u7ed3\u675f\u4f4d\u7f6e\n     * @return \u7ed3\u679c\n     * @since 0.5.0\n     */\n    public static String getString(final char[] chars,\n                                   final int startIndex,\n                                   final int endIndex) {\n        // \u622a\u53d6\n        int len = endIndex - startIndex;\n        return new String(chars, startIndex, len);\n    }\n\n    /**\n     * \u6784\u5efa\u5b57\u7b26\u4e32\n     * @param chars \u5b57\u7b26\u6570\u7ec4\n     * @param wordResult \u7ed3\u679c\n     * @return \u7ed3\u679c\n     * @since 0.5.0\n     */\n    public static String getString(final char[] chars,\n                                   final IWordResult wordResult) {\n        return getString(chars, wordResult.startIndex(), wordResult.endIndex());\n    }\n\n}", "class_name": "InnerWordCharUtils", "return_type": "Character", "parameters": [{"type": "Character", "name": "character"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordResult implements IWordResult {\n\n    private int startIndex;\n\n    private int endIndex;\n\n    /**\n     * \u8bcd\u7c7b\u522b\n     * @since 0.14.0\n     */\n    private String type;\n\n    private WordResult(){}\n\n    public static WordResult newInstance() {\n        return new WordResult();\n    }\n\n    @Override\n    public int startIndex() {\n        return startIndex;\n    }\n\n    public WordResult startIndex(int startIndex) {\n        this.startIndex = startIndex;\n        return this;\n    }\n\n    @Override\n    public int endIndex() {\n        return endIndex;\n    }\n\n    public WordResult endIndex(int endIndex) {\n        this.endIndex = endIndex;\n        return this;\n    }\n\n    @Override\n    public String type() {\n        return type;\n    }\n\n    public WordResult type(String type) {\n        this.type = type;\n        return this;\n    }\n\n    @Override\n    public String toString() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/127", "ground_truth": "\n        return \"WordResult{\" +\n                \"startIndex=\" + startIndex +\n                \", endIndex=\" + endIndex +\n                \", type='\" + type + '\\'' +\n                '}';\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "result", "WordResult.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class WordResult implements IWordResult {\n\n    private int startIndex;\n\n    private int endIndex;\n\n    /**\n     * \u8bcd\u7c7b\u522b\n     * @since 0.14.0\n     */\n    private String type;\n\n    private WordResult(){}\n\n    public static WordResult newInstance() {\n        return new WordResult();\n    }\n\n    @Override\n    public int startIndex() {\n        return startIndex;\n    }\n\n    public WordResult startIndex(int startIndex) {\n        this.startIndex = startIndex;\n        return this;\n    }\n\n    @Override\n    public int endIndex() {\n        return endIndex;\n    }\n\n    public WordResult endIndex(int endIndex) {\n        this.endIndex = endIndex;\n        return this;\n    }\n\n    @Override\n    public String type() {\n        return type;\n    }\n\n    public WordResult type(String type) {\n        this.type = type;\n        return this;\n    }\n\n    @Override\n    public String toString() {", "right_context": "}\n\n}", "class_name": "WordResult", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FileWordTag extends AbstractWordTag {\n\n    /**\n     * \u6587\u4ef6\u8def\u5f84\n     */\n    protected final String filePath;\n    /**\n     * \u8bcd\u548c\u6807\u7b7e\u7684\u5206\u9694\u7b26\n     */\n    protected final String wordSplit;\n    /**\n     * \u6807\u7b7e\u7684\u5206\u9694\u7b26\n     */\n    protected final String tagSplit;\n\n    protected Map<String, Set<String>> wordTagMap = new HashMap<>();\n\n    public FileWordTag(String filePath) {\n        this(filePath, \" \", \",\");\n    }\n\n    public FileWordTag(String filePath, String wordSplit, String tagSplit) {\n        ArgUtil.notEmpty(filePath, \"filePath\");\n        ArgUtil.notEmpty(wordSplit, \"wordSplit\");\n        ArgUtil.notEmpty(tagSplit, \"tagSplit\");\n\n        this.wordSplit = wordSplit;\n        this.tagSplit = tagSplit;\n        this.filePath = filePath;\n\n        this.initWordTagMap();\n    }\n\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    protected synchronized void initWordTagMap() {<FILL_FUNCTION_BODY>}\n\n    protected synchronized void handleInitLine(String line) {\n        String[] strings = line.split(wordSplit);\n        if(strings.length < 2) {\n            return;\n        }\n\n        String word = strings[0];\n        String tagText = strings[1];\n\n\n        String[] tags = tagText.split(tagSplit);\n        Set<String> tagSet = new HashSet<>(Arrays.asList(tags));\n        wordTagMap.put(word, tagSet);\n    }\n\n    @Override\n    protected Set<String> doGetTag(String word) {\n        return wordTagMap.get(word);\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/166", "ground_truth": "\n        List<String> lines = FileUtil.readAllLines(filePath);\n        if(CollectionUtil.isEmpty(lines)) {\n            return;\n        }\n\n        for(String line : lines) {\n            if(StringUtil.isEmpty(line)) {\n                continue;\n            }\n\n            // \u5904\u7406\u6bcf\u4e00\u884c\n            handleInitLine(line);\n        }\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "tag", "FileWordTag.java"], "context_start_lineno": 0, "function_name": "initWordTagMap", "left_context": "class FileWordTag extends AbstractWordTag {\n\n    /**\n     * \u6587\u4ef6\u8def\u5f84\n     */\n    protected final String filePath;\n    /**\n     * \u8bcd\u548c\u6807\u7b7e\u7684\u5206\u9694\u7b26\n     */\n    protected final String wordSplit;\n    /**\n     * \u6807\u7b7e\u7684\u5206\u9694\u7b26\n     */\n    protected final String tagSplit;\n\n    protected Map<String, Set<String>> wordTagMap = new HashMap<>();\n\n    public FileWordTag(String filePath) {\n        this(filePath, \" \", \",\");\n    }\n\n    public FileWordTag(String filePath, String wordSplit, String tagSplit) {\n        ArgUtil.notEmpty(filePath, \"filePath\");\n        ArgUtil.notEmpty(wordSplit, \"wordSplit\");\n        ArgUtil.notEmpty(tagSplit, \"tagSplit\");\n\n        this.wordSplit = wordSplit;\n        this.tagSplit = tagSplit;\n        this.filePath = filePath;\n\n        this.initWordTagMap();\n    }\n\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    protected synchronized void initWordTagMap() {", "right_context": "}\n\n    protected synchronized void handleInitLine(String line) {\n        String[] strings = line.split(wordSplit);\n        if(strings.length < 2) {\n            return;\n        }\n\n        String word = strings[0];\n        String tagText = strings[1];\n\n\n        String[] tags = tagText.split(tagSplit);\n        Set<String> tagSet = new HashSet<>(Arrays.asList(tags));\n        wordTagMap.put(word, tagSet);\n    }\n\n    @Override\n    protected Set<String> doGetTag(String word) {\n        return wordTagMap.get(word);\n    }\n\n}", "class_name": "FileWordTag", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordTagsDto implements Serializable {\n\n    private String word;\n\n    private Set<String> tags;\n\n    public String getWord() {\n        return word;\n    }\n\n    public void setWord(String word) {\n        this.word = word;\n    }\n\n    public Set<String> getTags() {\n        return tags;\n    }\n\n    public void setTags(Set<String> tags) {\n        this.tags = tags;\n    }\n\n    @Override\n    public String toString() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/203", "ground_truth": "\n        return \"WordTagsDto{\" +\n                \"word='\" + word + '\\'' +\n                \", tags=\" + tags +\n                '}';\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "result", "WordTagsDto.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class WordTagsDto implements Serializable {\n\n    private String word;\n\n    private Set<String> tags;\n\n    public String getWord() {\n        return word;\n    }\n\n    public void setWord(String word) {\n        this.word = word;\n    }\n\n    public Set<String> getTags() {\n        return tags;\n    }\n\n    public void setTags(Set<String> tags) {\n        this.tags = tags;\n    }\n\n    @Override\n    public String toString() {", "right_context": "}\n\n}", "class_name": "WordTagsDto", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/deny/WordDenySystem.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   List<String> results=StreamUtil.readAllLines(\"/dict.txt\");\n//   results.addAll(StreamUtil.readAllLines(\"/dict_en.txt\"));\n//   results.addAll(StreamUtil.readAllLines(\"/sensitive_word_deny.txt\"));\n//   return results;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/utils/InnerWordFormatUtils.java\n// --------------------------------------------------\n// /** \n//  * \u683c\u5f0f\u5316\u5217\u8868\n//  * @param list \u5217\u8868\n//  * @param context \u4e0a\u4e0b\u6587\n//  * @return \u7ed3\u679c\n//  * @since 0\u30023.0\n//  */\n// public static List<String> formatWordList(List<String> list,final IWordContext context){\n//   if (CollectionUtil.isEmpty(list)) {\n//     return list;\n//   }\n//   List<String> resultList=new ArrayList<>(list.size());\n//   for (  String word : list) {\n//     String formatWord=InnerWordFormatUtils.format(word,context);\n//     resultList.add(formatWord);\n//   }\n//   return resultList;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bs/SensitiveWordBsResultConditionTest.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Collections.singletonList(\"av\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bs/SensitiveWordBsResultConditionTest.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Collections.singletonList(\"av\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bs/SensitiveWordBsResultConditionTest.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"av\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bs/SensitiveWordBsResultConditionTest.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"av\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bs/SensitiveWordBsResultConditionTest.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"av\",\"day\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bs/SensitiveWordBsResultConditionTest.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"national Congress\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bugs/b20211211/MyWordDeny.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"\u5c3c\u739b\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bugs/b32/MyWordDenyChineseNum.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"\u4e09\u4e09\u4e5d\u4e58\u5143\u529f\",\"\u4e00\u519b\u4e24\u7b56\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/data/DataInitTest.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u5bf9\u5e94\u6587\u4ef6\u7684\u72ec\u4e00\u65e0\u4e8c\u5185\u5bb9\n//  * @param name \u540d\u79f0\n//  * @return \u7ed3\u679c\n//  * @since 0.0.1\n//  */\n// private List<String> distinctLines(final String name){\n//   final String dir=\"D:\\\\github\\\\sensitive-word\\\\src\\\\main\\\\resources\\\\\";\n//   final String path=dir + name;\n//   List<String> lines=FileUtil.readAllLines(path);\n//   return CollectionUtil.distinct(lines);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/data/DataUtil.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u5bf9\u5e94\u6587\u4ef6\u7684\u72ec\u4e00\u65e0\u4e8c\u5185\u5bb9\n//  * @param name \u540d\u79f0\n//  * @return \u7ed3\u679c\n//  * @since 0.0.1\n//  */\n// public static List<String> distinctLines(final String name){\n//   final String dir=\"D:\\\\github\\\\sensitive-word\\\\src\\\\main\\\\resources\\\\\";\n//   final String path=dir + name;\n//   List<String> lines=FileUtil.readAllLines(path);\n//   return CollectionUtil.distinct(lines);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/data/DataUtil.java\n// --------------------------------------------------\n// public static List<String> disctinctAndSort(final Collection<String> collection){\n//   List<String> stringList=CollectionUtil.distinct(collection);\n//   Collections.sort(stringList);\n//   return stringList;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/define/MyWordDeny.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"\u6211\u7684\u81ea\u5b9a\u4e49\u654f\u611f\u8bcd\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/spring/database/MyDdWordDeny.java\n// --------------------------------------------------\n// @Override public List<String> deny(){\n//   return Arrays.asList(\"\u5e7f\u544a\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/api/IWordAllow.java\n// --------------------------------------------------\n// /** \n//  * \u83b7\u53d6\u7ed3\u679c\n//  * @return \u7ed3\u679c\n//  * @since 0.0.13\n//  */\n// List<String> allow();\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/allow/WordAllowSystem.java\n// --------------------------------------------------\n// @Override public List<String> allow(){\n//   return StreamUtil.readAllLines(\"/sensitive_word_allow.txt\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/bugs/b20211211/MyWordAllow.java\n// --------------------------------------------------\n// @Override public List<String> allow(){\n//   return Arrays.asList(\"\u4e94\u661f\u7ea2\u65d7\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/define/MyWordAllow.java\n// --------------------------------------------------\n// @Override public List<String> allow(){\n//   return Arrays.asList(\"\u6d4b\u8bd5\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/test/java/com/github/houbb/sensitive/word/spring/database/MyDdWordAllow.java\n// --------------------------------------------------\n// @Override public List<String> allow(){\n//   return Arrays.asList(\"\u5b66\u4e60\");\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordAllowInit implements IWordAllow {\n\n    /**\n     * \u521d\u59cb\u5316\u5217\u8868\n     *\n     * @param pipeline \u5f53\u524d\u5217\u8868\u6cf3\u9053\n     * @since 0.0.13\n     */\n    protected abstract void init(final Pipeline<IWordAllow> pipeline);\n\n    @Override\n    public List<String> allow() {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/220", "ground_truth": "\n        Pipeline<IWordAllow> pipeline = new DefaultPipeline<>();\n        this.init(pipeline);\n\n        List<String> results = new ArrayList<>();\n        List<IWordAllow> wordAllows = pipeline.list();\n        for (IWordAllow wordAllow : wordAllows) {\n            List<String> allowList = wordAllow.allow();\n            results.addAll(allowList);\n        }\n\n        return results;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "allow", "WordAllowInit.java"], "context_start_lineno": 0, "function_name": "allow", "left_context": "class WordAllowInit implements IWordAllow {\n\n    /**\n     * \u521d\u59cb\u5316\u5217\u8868\n     *\n     * @param pipeline \u5f53\u524d\u5217\u8868\u6cf3\u9053\n     * @since 0.0.13\n     */\n    protected abstract void init(final Pipeline<IWordAllow> pipeline);\n\n    @Override\n    public List<String> allow() {", "right_context": "}\n\n}", "class_name": "WordAllowInit", "return_type": "List<String>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/support/deny/WordDenySystem.java\n// --------------------------------------------------\n// public static IWordDeny getInstance(){\n//   return INSTANCE;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordDenys {\n\n    private WordDenys(){}\n\n    /**\n     * \u8d23\u4efb\u94fe\n     * @param wordDeny \u62d2\u7edd\n     * @param others \u5176\u4ed6\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordDeny chains(final IWordDeny wordDeny,\n                                   final IWordDeny... others) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u7cfb\u7edf\u5b9e\u73b0\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordDeny defaults() {\n        return WordDenySystem.getInstance();\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/274", "ground_truth": "\n        return new WordDenyInit() {\n            @Override\n            protected void init(Pipeline<IWordDeny> pipeline) {\n                pipeline.addLast(wordDeny);\n\n                if(ArrayUtil.isNotEmpty(others)) {\n                    for(IWordDeny other : others) {\n                        pipeline.addLast(other);\n                    }\n                }\n            }\n        };\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "deny", "WordDenys.java"], "context_start_lineno": 0, "function_name": "chains", "left_context": "class WordDenys {\n\n    private WordDenys(){}\n\n    /**\n     * \u8d23\u4efb\u94fe\n     * @param wordDeny \u62d2\u7edd\n     * @param others \u5176\u4ed6\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordDeny chains(final IWordDeny wordDeny,\n                                   final IWordDeny... others) {", "right_context": "}\n\n    /**\n     * \u7cfb\u7edf\u5b9e\u73b0\n     * @return \u7ed3\u679c\n     * @since 0.0.13\n     */\n    public static IWordDeny defaults() {\n        return WordDenySystem.getInstance();\n    }\n\n}", "class_name": "WordDenys", "return_type": "IWordDeny", "parameters": [{"type": "IWordDeny", "name": "wordDeny"}, {"type": "IWordDeny", "name": "others"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordResultHandlerWordTags extends AbstractWordResultHandler<WordTagsDto> {\n\n    @Override\n    protected WordTagsDto doHandle(IWordResult wordResult, IWordContext wordContext, String originalText) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/414", "ground_truth": "\n        // \u622a\u53d6\n        String word = InnerWordCharUtils.getString(originalText.toCharArray(), wordResult);\n        // \u6807\u7b7e\n\n        WordTagsDto dto = new WordTagsDto();\n        dto.setWord(word);\n        // \u83b7\u53d6 tags\n        Set<String> wordTags = wordContext.wordTag().getTag(word);\n        dto.setTags(wordTags);\n        return dto;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "result", "WordResultHandlerWordTags.java"], "context_start_lineno": 0, "function_name": "doHandle", "left_context": "class WordResultHandlerWordTags extends AbstractWordResultHandler<WordTagsDto> {\n\n    @Override\n    protected WordTagsDto doHandle(IWordResult wordResult, IWordContext wordContext, String originalText) {", "right_context": "}\n\n}", "class_name": "WordResultHandlerWordTags", "return_type": "WordTagsDto", "parameters": [{"type": "IWordResult", "name": "wordResult"}, {"type": "IWordContext", "name": "wordContext"}, {"type": "String", "name": "originalText"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordFormatInit implements IWordFormat {\n\n    /**\n     * \u521d\u59cb\u5316\u5217\u8868\n     *\n     * @param pipeline \u5f53\u524d\u5217\u8868\u6cf3\u9053\n     * @since 0.0.13\n     */\n    protected abstract void init(final Pipeline<IWordFormat> pipeline);\n\n    @Override\n    public char format(char original, IWordContext context) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/478", "ground_truth": "\n        Pipeline<IWordFormat> pipeline = new DefaultPipeline<>();\n        init(pipeline);\n\n        char result = original;\n\n        // \u5faa\u73af\u6267\u884c\n        List<IWordFormat> charFormats = pipeline.list();\n        for(IWordFormat charFormat : charFormats) {\n            result = charFormat.format(result, context);\n        }\n\n        return result;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "format", "WordFormatInit.java"], "context_start_lineno": 0, "function_name": "format", "left_context": "class WordFormatInit implements IWordFormat {\n\n    /**\n     * \u521d\u59cb\u5316\u5217\u8868\n     *\n     * @param pipeline \u5f53\u524d\u5217\u8868\u6cf3\u9053\n     * @since 0.0.13\n     */\n    protected abstract void init(final Pipeline<IWordFormat> pipeline);\n\n    @Override\n    public char format(char original, IWordContext context) {", "right_context": "}\n\n}", "class_name": "WordFormatInit", "return_type": "char", "parameters": [{"type": "char", "name": "original"}, {"type": "IWordContext", "name": "context"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WordCheckWord extends AbstractWordCheck {\n\n    /**\n     * @since 0.3.0\n     */\n    private static final IWordCheck INSTANCE = new WordCheckWord();\n\n    public static IWordCheck getInstance() {\n        return INSTANCE;\n    }\n\n    @Override\n    protected Class<? extends IWordCheck> getSensitiveCheckClass() {\n        return WordCheckWord.class;\n    }\n\n    @Override\n    protected int getActualLength(int beginIndex, InnerSensitiveWordContext innerContext) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    protected String getType() {\n        return WordTypeEnum.WORD.getCode();\n    }\n\n}", "metadata": {"task_id": "houbb_sensitive-word/485", "ground_truth": "\n        final String txt = innerContext.originalText();\n        final Map<Character, Character> formatCharMapping = innerContext.formatCharMapping();\n        final WordValidModeEnum wordValidModeEnum = innerContext.modeEnum();\n        final IWordContext context = innerContext.wordContext();\n\n        // \u91c7\u7528 ThreadLocal \u5e94\u8be5\u53ef\u4ee5\u63d0\u5347\u6027\u80fd\uff0c\u51cf\u5c11\u5bf9\u8c61\u7684\u521b\u5efa\u3002\n        int actualLength = 0;\n        final IWordData wordData = context.wordData();\n\n        // \u524d\u4e00\u4e2a\u6761\u4ef6\n        StringBuilder stringBuilder = new StringBuilder();\n        char[] rawChars = txt.toCharArray();\n\n        final ISensitiveWordCharIgnore wordCharIgnore = context.charIgnore();\n        int tempLen = 0;\n        for(int i = beginIndex; i < rawChars.length; i++) {\n            // \u5224\u65ad\u662f\u5426\u8df3\u8fc7\uff1f\n            if(wordCharIgnore.ignore(i, rawChars, innerContext)) {\n                tempLen++;\n                continue;\n            }\n\n            // \u6620\u5c04\u5904\u7406\n            final char currentChar = rawChars[i];\n            char mappingChar = formatCharMapping.get(currentChar);\n            stringBuilder.append(mappingChar);\n            tempLen++;\n\n            // \u5224\u65ad\u662f\u5426\u5b58\u5728\n            WordContainsTypeEnum wordContainsTypeEnum = wordData.contains(stringBuilder, innerContext);\n            if(WordContainsTypeEnum.CONTAINS_END.equals(wordContainsTypeEnum)) {\n                actualLength = tempLen;\n\n                // \u662f\u5426\u904d\u5386\u5168\u90e8\u5339\u914d\u7684\u6a21\u5f0f\n                if(WordValidModeEnum.FAIL_FAST.equals(wordValidModeEnum)) {\n                    break;\n                }\n            }\n\n            // \u5982\u679c\u4e0d\u5305\u542b\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u3002\u540e\u7eed\u904d\u5386\u65e0\u610f\u4e49\n            if(WordContainsTypeEnum.NOT_FOUND.equals(wordContainsTypeEnum)) {\n                break;\n            }\n        }\n\n        return actualLength;\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "check", "WordCheckWord.java"], "context_start_lineno": 0, "function_name": "getActualLength", "left_context": "class WordCheckWord extends AbstractWordCheck {\n\n    /**\n     * @since 0.3.0\n     */\n    private static final IWordCheck INSTANCE = new WordCheckWord();\n\n    public static IWordCheck getInstance() {\n        return INSTANCE;\n    }\n\n    @Override\n    protected Class<? extends IWordCheck> getSensitiveCheckClass() {\n        return WordCheckWord.class;\n    }\n\n    @Override\n    protected int getActualLength(int beginIndex, InnerSensitiveWordContext innerContext) {", "right_context": "}\n\n    @Override\n    protected String getType() {\n        return WordTypeEnum.WORD.getCode();\n    }\n\n}", "class_name": "WordCheckWord", "return_type": "int", "parameters": [{"type": "int", "name": "beginIndex"}, {"type": "InnerSensitiveWordContext", "name": "innerContext"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/bs/SensitiveWordBs.java\n// --------------------------------------------------\n// /** \n//  * \u8fd4\u56de\u7b2c\u4e00\u4e2a\u654f\u611f\u8bcd \uff081\uff09\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de  {@code null}\n//  * @param target \u76ee\u6807\u5b57\u7b26\u4e32\n//  * @param handler \u5904\u7406\u7c7b\n//  * @param < R > \u6cdb\u578b\n//  * @return \u654f\u611f\u8bcd\n//  * @since 0.0.1\n//  */\n// public <R>R findFirst(final String target,final IWordResultHandler<R> handler){\n//   ArgUtil.notNull(handler,\"handler\");\n//   IWordResult wordResult=sensitiveWord.findFirst(target,context);\n//   return handler.handle(wordResult,context,target);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/core/SensitiveWordHelper.java\n// --------------------------------------------------\n// /** \n//  * \u8fd4\u56de\u7b2c\u4e00\u4e2a\u654f\u611f\u8bcd \uff081\uff09\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de  {@code null}\n//  * @param target  \u76ee\u6807\u5b57\u7b26\u4e32\n//  * @param handler \u7ed3\u679c\u5904\u7406\u7c7b\n//  * @param < R > \u6cdb\u578b\n//  * @return \u654f\u611f\u8bcd\n//  * @since 0.1.0\n//  */\n// public static <R>R findFirst(final String target,final IWordResultHandler<R> handler){\n//   return WORD_BS.findFirst(target,handler);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/api/IWordResultHandler.java\n// --------------------------------------------------\n// /** \n//  * \u5bf9\u4e8e\u7ed3\u679c\u7684\u5904\u7406\n//  * @param wordResult \u7ed3\u679c\n//  * @param wordContext \u4e0a\u4e0b\u6587\n//  * @param originalText \u539f\u59cb\u6587\u672c\n//  * @return \u5904\u7406\u7ed3\u679c\n//  * @since 0.1.0\n//  */\n// R handle(final IWordResult wordResult,final IWordContext wordContext,final String originalText);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// sensitive-word/src/main/java/com/github/houbb/sensitive/word/bs/SensitiveWordBs.java\n// --------------------------------------------------\n// @Override public R handle(IWordResult wordResult){\n//   return handler.handle(wordResult,context,target);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractWordResultHandler<R> implements IWordResultHandler<R> {\n\n    protected abstract R doHandle(IWordResult wordResult, IWordContext wordContext, String originalText);\n\n    @Override\n    public R handle(IWordResult wordResult, IWordContext wordContext, String originalText) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "houbb_sensitive-word/495", "ground_truth": "\n        if(wordResult == null) {\n            return null;\n        }\n\n        return doHandle(wordResult, wordContext, originalText);\n    ", "fpath_tuple": ["houbb_sensitive-word", "sensitive-word", "src", "main", "java", "com", "github", "houbb", "sensitive", "word", "support", "result", "AbstractWordResultHandler.java"], "context_start_lineno": 0, "function_name": "handle", "left_context": "class AbstractWordResultHandler<R> implements IWordResultHandler<R> {\n\n    protected abstract R doHandle(IWordResult wordResult, IWordContext wordContext, String originalText);\n\n    @Override\n    public R handle(IWordResult wordResult, IWordContext wordContext, String originalText) {", "right_context": "}\n\n}", "class_name": "AbstractWordResultHandler", "return_type": "R", "parameters": [{"type": "IWordResult", "name": "wordResult"}, {"type": "IWordContext", "name": "wordContext"}, {"type": "String", "name": "originalText"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GlobalCustomFieldsJsonProvider<Event extends DeferredProcessingAware> extends AbstractJsonProvider<Event> implements JsonFactoryAware {\n    \n    /**\n     * The un-parsed custom fields string to use to initialize customFields\n     * when the formatter is started.\n     */\n    private String customFields;\n\n    /**\n     * When non-null, the fields in this JsonNode will be embedded in the logstash json.\n     */\n    private ObjectNode customFieldsNode;\n    \n    /**\n     * The factory used to convert the JSON string into a valid {@link ObjectNode} when custom\n     * fields are set as text instead of a pre-parsed Jackson ObjectNode.\n     */\n    private JsonFactory jsonFactory;\n\n    @Override\n    public void writeTo(JsonGenerator generator, Event event) throws IOException {\n        writeFieldsOfNode(generator, customFieldsNode);\n    }\n\n    /**\n     * Writes the fields of the given node into the generator.\n     */\n    private void writeFieldsOfNode(JsonGenerator generator, JsonNode node) throws IOException {\n        if (node != null) {\n            for (Iterator<Entry<String, JsonNode>> fields = node.fields(); fields.hasNext();) {\n                Entry<String, JsonNode> field = fields.next();\n                generator.writeFieldName(field.getKey());\n                generator.writeTree(field.getValue());\n            }\n        }\n    }\n    \n    /**\n     * Start the provider.\n     * \n     * <p>The provider is started even when it fails to parse the {@link #customFields} JSON string.\n     * An ERROR status is emitted instead and no exception is thrown.\n     */\n    @Override\n    public void start() {\n        initializeCustomFields();\n        super.start();\n    }\n    \n    private void initializeCustomFields() {\n        if (customFieldsNode != null || customFields == null) {\n            return;\n        }\n        if (jsonFactory == null) {\n            throw new IllegalStateException(\"JsonFactory has not been set\");\n        }\n        \n        try {\n            this.customFieldsNode = JsonReadingUtils.readFullyAsObjectNode(this.jsonFactory, this.customFields);\n        } catch (IOException e) {\n            addError(\"[customFields] is not a valid JSON object\", e);\n        }\n    }\n\n    /**\n     * Set the custom fields as a JSON string.\n     * The string will be parsed when the provider is {@link #start()}.\n     * \n     * @param customFields the custom fields as JSON string.\n     */\n    public void setCustomFields(String customFields) {\n        if (isStarted()) {\n            throw new IllegalStateException(\"Configuration cannot be changed while the provider is started\");\n        }\n        \n        this.customFields = customFields;\n        this.customFieldsNode = null;\n    }\n    \n    public String getCustomFields() {\n        return customFields;\n    }\n    \n    public ObjectNode getCustomFieldsNode() {\n        return this.customFieldsNode;\n    }\n\n    /**\n     * Set the custom JSON fields.\n     * Must be a valid JsonNode that maps to a JSON object structure, i.e. an {@link ObjectNode}.\n     * \n     * @param customFields a {@link JsonNode} whose properties must be added as custom fields.\n     * @deprecated use {@link #setCustomFieldsNode(ObjectNode)}\u00a0instead.\n     * @throws IllegalArgumentException if the argument is not a {@link ObjectNode}.\n     */\n    @Deprecated\n    public void setCustomFieldsNode(JsonNode customFields) {\n        if (customFields != null && !(customFields instanceof ObjectNode)) {\n            throw new IllegalArgumentException(\"Must be an ObjectNode\");\n        }\n        setCustomFieldsNode((ObjectNode) customFields);\n    }\n    \n    \n    /**\n     * Use the fields of the given {@link ObjectNode} (may be empty).\n     * \n     * @param customFields the JSON object whose fields as added as custom fields\n     */\n    public void setCustomFieldsNode(ObjectNode customFields) {<FILL_FUNCTION_BODY>}\n    \n    \n    @Override\n    public void setJsonFactory(JsonFactory jsonFactory) {\n        this.jsonFactory = Objects.requireNonNull(jsonFactory);\n    }\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/17", "ground_truth": "\n        if (isStarted()) {\n            throw new IllegalStateException(\"Configuration cannot be changed while the provider is started\");\n        }\n        \n        this.customFieldsNode = customFields;\n        this.customFields = null;\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "GlobalCustomFieldsJsonProvider.java"], "context_start_lineno": 0, "function_name": "setCustomFieldsNode", "left_context": "class GlobalCustomFieldsJsonProvider<Event extends DeferredProcessingAware> extends AbstractJsonProvider<Event> implements JsonFactoryAware {\n    \n    /**\n     * The un-parsed custom fields string to use to initialize customFields\n     * when the formatter is started.\n     */\n    private String customFields;\n\n    /**\n     * When non-null, the fields in this JsonNode will be embedded in the logstash json.\n     */\n    private ObjectNode customFieldsNode;\n    \n    /**\n     * The factory used to convert the JSON string into a valid {@link ObjectNode} when custom\n     * fields are set as text instead of a pre-parsed Jackson ObjectNode.\n     */\n    private JsonFactory jsonFactory;\n\n    @Override\n    public void writeTo(JsonGenerator generator, Event event) throws IOException {\n        writeFieldsOfNode(generator, customFieldsNode);\n    }\n\n    /**\n     * Writes the fields of the given node into the generator.\n     */\n    private void writeFieldsOfNode(JsonGenerator generator, JsonNode node) throws IOException {\n        if (node != null) {\n            for (Iterator<Entry<String, JsonNode>> fields = node.fields(); fields.hasNext();) {\n                Entry<String, JsonNode> field = fields.next();\n                generator.writeFieldName(field.getKey());\n                generator.writeTree(field.getValue());\n            }\n        }\n    }\n    \n    /**\n     * Start the provider.\n     * \n     * <p>The provider is started even when it fails to parse the {@link #customFields} JSON string.\n     * An ERROR status is emitted instead and no exception is thrown.\n     */\n    @Override\n    public void start() {\n        initializeCustomFields();\n        super.start();\n    }\n    \n    private void initializeCustomFields() {\n        if (customFieldsNode != null || customFields == null) {\n            return;\n        }\n        if (jsonFactory == null) {\n            throw new IllegalStateException(\"JsonFactory has not been set\");\n        }\n        \n        try {\n            this.customFieldsNode = JsonReadingUtils.readFullyAsObjectNode(this.jsonFactory, this.customFields);\n        } catch (IOException e) {\n            addError(\"[customFields] is not a valid JSON object\", e);\n        }\n    }\n\n    /**\n     * Set the custom fields as a JSON string.\n     * The string will be parsed when the provider is {@link #start()}.\n     * \n     * @param customFields the custom fields as JSON string.\n     */\n    public void setCustomFields(String customFields) {\n        if (isStarted()) {\n            throw new IllegalStateException(\"Configuration cannot be changed while the provider is started\");\n        }\n        \n        this.customFields = customFields;\n        this.customFieldsNode = null;\n    }\n    \n    public String getCustomFields() {\n        return customFields;\n    }\n    \n    public ObjectNode getCustomFieldsNode() {\n        return this.customFieldsNode;\n    }\n\n    /**\n     * Set the custom JSON fields.\n     * Must be a valid JsonNode that maps to a JSON object structure, i.e. an {@link ObjectNode}.\n     * \n     * @param customFields a {@link JsonNode} whose properties must be added as custom fields.\n     * @deprecated use {@link #setCustomFieldsNode(ObjectNode)}\u00a0instead.\n     * @throws IllegalArgumentException if the argument is not a {@link ObjectNode}.\n     */\n    @Deprecated\n    public void setCustomFieldsNode(JsonNode customFields) {\n        if (customFields != null && !(customFields instanceof ObjectNode)) {\n            throw new IllegalArgumentException(\"Must be an ObjectNode\");\n        }\n        setCustomFieldsNode((ObjectNode) customFields);\n    }\n    \n    \n    /**\n     * Use the fields of the given {@link ObjectNode} (may be empty).\n     * \n     * @param customFields the JSON object whose fields as added as custom fields\n     */\n    public void setCustomFieldsNode(ObjectNode customFields) {", "right_context": "}\n    \n    \n    @Override\n    public void setJsonFactory(JsonFactory jsonFactory) {\n        this.jsonFactory = Objects.requireNonNull(jsonFactory);\n    }\n}", "class_name": "GlobalCustomFieldsJsonProvider", "return_type": "void", "parameters": [{"type": "ObjectNode", "name": "customFields"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass RegexValueMasker implements ValueMasker {\n\n    private final Pattern pattern;\n    private final Object mask;\n\n    /**\n     * @param regex the regex used to identify values to mask\n     * @param mask the value to write for values that match the regex (can contain back references to capture groups in the regex)\n     */\n    public RegexValueMasker(String regex, Object mask) {\n        this(Pattern.compile(regex), mask);\n    }\n\n    /**\n     * @param pattern the pattern used to identify values to mask\n     * @param mask the value to write for values that match the regex (can contain back references to capture groups in the regex)\n     */\n    public RegexValueMasker(Pattern pattern, Object mask) {\n        this.pattern = Objects.requireNonNull(pattern, \"pattern must not be null\");\n        this.mask = Objects.requireNonNull(mask, \"mask must not be null\");\n    }\n\n    @Override\n    public Object mask(JsonStreamContext context, Object o) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/23", "ground_truth": "\n        if (o instanceof CharSequence) {\n            Matcher matcher = pattern.matcher((CharSequence) o);\n            if (mask instanceof String) {\n                String replaced = matcher.replaceAll((String) mask);\n                if (replaced != o) {\n                    return replaced;\n                }\n            } else if (matcher.matches()) {\n                return mask;\n            }\n        }\n        return null;\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "mask", "RegexValueMasker.java"], "context_start_lineno": 0, "function_name": "mask", "left_context": "class RegexValueMasker implements ValueMasker {\n\n    private final Pattern pattern;\n    private final Object mask;\n\n    /**\n     * @param regex the regex used to identify values to mask\n     * @param mask the value to write for values that match the regex (can contain back references to capture groups in the regex)\n     */\n    public RegexValueMasker(String regex, Object mask) {\n        this(Pattern.compile(regex), mask);\n    }\n\n    /**\n     * @param pattern the pattern used to identify values to mask\n     * @param mask the value to write for values that match the regex (can contain back references to capture groups in the regex)\n     */\n    public RegexValueMasker(Pattern pattern, Object mask) {\n        this.pattern = Objects.requireNonNull(pattern, \"pattern must not be null\");\n        this.mask = Objects.requireNonNull(mask, \"mask must not be null\");\n    }\n\n    @Override\n    public Object mask(JsonStreamContext context, Object o) {", "right_context": "}\n}", "class_name": "RegexValueMasker", "return_type": "Object", "parameters": [{"type": "JsonStreamContext", "name": "context"}, {"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MessageJsonProvider extends AbstractFieldJsonProvider<ILoggingEvent> implements FieldNamesAware<LogstashFieldNames> {\n    \n    public static final String FIELD_MESSAGE = \"message\";\n\n    private Pattern messageSplitPattern = null;\n\n    public MessageJsonProvider() {\n        setFieldName(FIELD_MESSAGE);\n    }\n\n    @Override\n    public void writeTo(JsonGenerator generator, ILoggingEvent event) throws IOException {<FILL_FUNCTION_BODY>}\n    \n    @Override\n    public void setFieldNames(LogstashFieldNames fieldNames) {\n        setFieldName(fieldNames.getMessage());\n    }\n\n    /**\n     * Write the message as a JSON array by splitting the message text using the specified regex.\n     *\n     * @return The regex used to split the message text\n     */\n    public String getMessageSplitRegex() {\n        return messageSplitPattern != null ? messageSplitPattern.pattern() : null;\n    }\n\n    /**\n     * Write the message as a JSON array by splitting the message text using the specified regex.\n     *\n     * <p>The allowed values are:\n     * <ul>\n     *     <li>Null/Empty : Disable message splitting. This is also the default behavior.</li>\n     *     <li>Any valid regex : Use the specified regex.</li>\n     *     <li>{@code SYSTEM} : Use the system-default line separator.</li>\n     *     <li>{@code UNIX} : Use {@code \\n}.</li>\n     *     <li>{@code WINDOWS} : Use {@code \\r\\n}.</li>\n     * </ul>\n     * \n     * For example, if this parameter is set to the regex {@code #+}, then the logging statement:\n     * \n     * <pre>\n     * log.info(\"First line##Second line###Third line\")\n     * </pre>\n     * \n     * will produce:\n     * <pre>\n     * {\n     *     ...\n     *     \"message\": [\n     *         \"First line\",\n     *         \"Second line\",\n     *         \"Third line\"\n     *     ],\n     *     ...\n     * }\n     * </pre>\n     *\n     * @param messageSplitRegex The regex used to split the message text\n     */\n    public void setMessageSplitRegex(String messageSplitRegex) {\n        String parsedMessageSplitRegex = SeparatorParser.parseSeparator(messageSplitRegex);\n        this.messageSplitPattern = parsedMessageSplitRegex != null ? Pattern.compile(parsedMessageSplitRegex) : null;\n    }\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/37", "ground_truth": "\n        if (messageSplitPattern != null) {\n            String[] multiLineMessage = messageSplitPattern.split(event.getFormattedMessage());\n            JsonWritingUtils.writeStringArrayField(generator, getFieldName(), multiLineMessage);\n        } else {\n            JsonWritingUtils.writeStringField(generator, getFieldName(), event.getFormattedMessage());\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "loggingevent", "MessageJsonProvider.java"], "context_start_lineno": 0, "function_name": "writeTo", "left_context": "class MessageJsonProvider extends AbstractFieldJsonProvider<ILoggingEvent> implements FieldNamesAware<LogstashFieldNames> {\n    \n    public static final String FIELD_MESSAGE = \"message\";\n\n    private Pattern messageSplitPattern = null;\n\n    public MessageJsonProvider() {\n        setFieldName(FIELD_MESSAGE);\n    }\n\n    @Override\n    public void writeTo(JsonGenerator generator, ILoggingEvent event) throws IOException {", "right_context": "}\n    \n    @Override\n    public void setFieldNames(LogstashFieldNames fieldNames) {\n        setFieldName(fieldNames.getMessage());\n    }\n\n    /**\n     * Write the message as a JSON array by splitting the message text using the specified regex.\n     *\n     * @return The regex used to split the message text\n     */\n    public String getMessageSplitRegex() {\n        return messageSplitPattern != null ? messageSplitPattern.pattern() : null;\n    }\n\n    /**\n     * Write the message as a JSON array by splitting the message text using the specified regex.\n     *\n     * <p>The allowed values are:\n     * <ul>\n     *     <li>Null/Empty : Disable message splitting. This is also the default behavior.</li>\n     *     <li>Any valid regex : Use the specified regex.</li>\n     *     <li>{@code SYSTEM} : Use the system-default line separator.</li>\n     *     <li>{@code UNIX} : Use {@code \\n}.</li>\n     *     <li>{@code WINDOWS} : Use {@code \\r\\n}.</li>\n     * </ul>\n     * \n     * For example, if this parameter is set to the regex {@code #+}, then the logging statement:\n     * \n     * <pre>\n     * log.info(\"First line##Second line###Third line\")\n     * </pre>\n     * \n     * will produce:\n     * <pre>\n     * {\n     *     ...\n     *     \"message\": [\n     *         \"First line\",\n     *         \"Second line\",\n     *         \"Third line\"\n     *     ],\n     *     ...\n     * }\n     * </pre>\n     *\n     * @param messageSplitRegex The regex used to split the message text\n     */\n    public void setMessageSplitRegex(String messageSplitRegex) {\n        String parsedMessageSplitRegex = SeparatorParser.parseSeparator(messageSplitRegex);\n        this.messageSplitPattern = parsedMessageSplitRegex != null ? Pattern.compile(parsedMessageSplitRegex) : null;\n    }\n}", "class_name": "MessageJsonProvider", "return_type": "void", "parameters": [{"type": "JsonGenerator", "name": "generator"}, {"type": "ILoggingEvent", "name": "event"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FailureSummaryLoggingAppenderListener<Event extends DeferredProcessingAware> extends FailureSummaryAppenderListener<Event> {\n\n    private volatile Logger logger = LoggerFactory.getLogger(FailureSummaryLoggingAppenderListener.class);\n\n    /**\n     * Logs a message with the details from the given {@link FailureSummaryAppenderListener.FailureSummary}\n     * with the given callback type.\n     *\n     * @param failureSummary contains summary details of all the consecutive failures\n     * @param callbackType the type of failure (append/send/connect)\n     */\n    @Override\n    protected void handleFailureSummary(FailureSummary failureSummary, CallbackType callbackType) {<FILL_FUNCTION_BODY>}\n\n    public String getLoggerName() {\n        return logger.getName();\n    }\n\n    /**\n     * Sets the slf4j logger name to which to log.\n     * Defaults to the fully qualified name of {@link FailureSummaryLoggingAppenderListener}.\n     *\n     * @param loggerName the name of the logger to which to log.\n     */\n    public void setLoggerName(String loggerName) {\n        logger = LoggerFactory.getLogger(Objects.requireNonNull(loggerName));\n    }\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/94", "ground_truth": "\n        if (logger.isWarnEnabled()) {\n            if (failureSummary.getFirstFailure() != failureSummary.getMostRecentFailure()) {\n                failureSummary.getMostRecentFailure().addSuppressed(failureSummary.getFirstFailure());\n            }\n            logger.warn(\"{} {} failures since {} for {}.\",\n                    StructuredArguments.value(\"failEventCount\", failureSummary.getConsecutiveFailures()),\n                    StructuredArguments.value(\"failType\", callbackType.name().toLowerCase()),\n                    StructuredArguments.value(\"failStartTime\", DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(TimeZone.getDefault().toZoneId()).format(Instant.ofEpochMilli(failureSummary.getFirstFailureTime()))),\n                    StructuredArguments.value(\"failDuration\", Duration.ofMillis(System.currentTimeMillis() - failureSummary.getFirstFailureTime()).toString()),\n                    failureSummary.getMostRecentFailure());\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "appender", "listener", "FailureSummaryLoggingAppenderListener.java"], "context_start_lineno": 0, "function_name": "handleFailureSummary", "left_context": "class FailureSummaryLoggingAppenderListener<Event extends DeferredProcessingAware> extends FailureSummaryAppenderListener<Event> {\n\n    private volatile Logger logger = LoggerFactory.getLogger(FailureSummaryLoggingAppenderListener.class);\n\n    /**\n     * Logs a message with the details from the given {@link FailureSummaryAppenderListener.FailureSummary}\n     * with the given callback type.\n     *\n     * @param failureSummary contains summary details of all the consecutive failures\n     * @param callbackType the type of failure (append/send/connect)\n     */\n    @Override\n    protected void handleFailureSummary(FailureSummary failureSummary, CallbackType callbackType) {", "right_context": "}\n\n    public String getLoggerName() {\n        return logger.getName();\n    }\n\n    /**\n     * Sets the slf4j logger name to which to log.\n     * Defaults to the fully qualified name of {@link FailureSummaryLoggingAppenderListener}.\n     *\n     * @param loggerName the name of the logger to which to log.\n     */\n    public void setLoggerName(String loggerName) {\n        logger = LoggerFactory.getLogger(Objects.requireNonNull(loggerName));\n    }\n}", "class_name": "FailureSummaryLoggingAppenderListener", "return_type": "void", "parameters": [{"type": "FailureSummary", "name": "failureSummary"}, {"type": "CallbackType", "name": "callbackType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FailingState implements State, FailureSummary {\n\n        private final Throwable firstThrowable;\n        private final long firstFailureTime;\n        private final AtomicLong consecutiveFailures = new AtomicLong();\n        private volatile Throwable mostRecentThrowable;\n\n        private FailingState(Throwable firstThrowable) {\n            this.firstThrowable = firstThrowable;\n            this.firstFailureTime = System.currentTimeMillis();\n            recordThrowable(firstThrowable);\n        }\n\n        @Override\n        public boolean isSucceeding() {\n            return false;\n        }\n\n        @Override\n        public Throwable getFirstFailure() {\n            return firstThrowable;\n        }\n\n        @Override\n        public long getFirstFailureTime() {\n            return firstFailureTime;\n        }\n\n        @Override\n        public Throwable getMostRecentFailure() {\n            return mostRecentThrowable;\n        }\n\n        @Override\n        public long getConsecutiveFailures() {\n            return consecutiveFailures.get();\n        }\n\n        private void recordThrowable(Throwable throwable) {\n            consecutiveFailures.incrementAndGet();\n            mostRecentThrowable = throwable;\n        }\n    }\n\n    @Override\n    public void eventAppended(Appender<Event> appender, Event event, long durationInNanos) {\n        recordSuccess(this.appendState, CallbackType.APPEND);\n    }\n\n    @Override\n    public void eventAppendFailed(Appender<Event> appender, Event event, Throwable reason) {\n        recordFailure(this.appendState, reason);\n    }\n\n    @Override\n    public void eventSent(Appender<Event> appender, Socket socket, Event event, long durationInNanos) {\n        recordSuccess(this.sendState, CallbackType.SEND);\n    }\n\n    @Override\n    public void eventSendFailure(Appender<Event> appender, Event event, Throwable reason) {\n        recordFailure(this.sendState, reason);\n    }\n\n    @Override\n    public void connectionOpened(Appender<Event> appender, Socket socket) {\n        recordSuccess(this.connectState, CallbackType.CONNECT);\n    }\n\n    @Override\n    public void connectionFailed(Appender<Event> appender, InetSocketAddress address, Throwable reason) {\n        recordFailure(this.connectState, reason);\n    }\n\n    private void recordSuccess(AtomicReference<State> stateRef, CallbackType callbackType) {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "logfellow_logstash-logback-encoder/122", "ground_truth": "\n        State currentState = stateRef.get();\n        if (!currentState.isSucceeding() && stateRef.compareAndSet(currentState, SUCCEEDING_STATE)) {\n            FailingState oldFailingState = (FailingState) currentState;\n            handleFailureSummary(oldFailingState, callbackType);\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "appender", "listener", "FailureSummaryAppenderListener.java"], "context_start_lineno": 0, "function_name": "recordSuccess", "left_context": "class FailingState implements State, FailureSummary {\n\n        private final Throwable firstThrowable;\n        private final long firstFailureTime;\n        private final AtomicLong consecutiveFailures = new AtomicLong();\n        private volatile Throwable mostRecentThrowable;\n\n        private FailingState(Throwable firstThrowable) {\n            this.firstThrowable = firstThrowable;\n            this.firstFailureTime = System.currentTimeMillis();\n            recordThrowable(firstThrowable);\n        }\n\n        @Override\n        public boolean isSucceeding() {\n            return false;\n        }\n\n        @Override\n        public Throwable getFirstFailure() {\n            return firstThrowable;\n        }\n\n        @Override\n        public long getFirstFailureTime() {\n            return firstFailureTime;\n        }\n\n        @Override\n        public Throwable getMostRecentFailure() {\n            return mostRecentThrowable;\n        }\n\n        @Override\n        public long getConsecutiveFailures() {\n            return consecutiveFailures.get();\n        }\n\n        private void recordThrowable(Throwable throwable) {\n            consecutiveFailures.incrementAndGet();\n            mostRecentThrowable = throwable;\n        }\n    }\n\n    @Override\n    public void eventAppended(Appender<Event> appender, Event event, long durationInNanos) {\n        recordSuccess(this.appendState, CallbackType.APPEND);\n    }\n\n    @Override\n    public void eventAppendFailed(Appender<Event> appender, Event event, Throwable reason) {\n        recordFailure(this.appendState, reason);\n    }\n\n    @Override\n    public void eventSent(Appender<Event> appender, Socket socket, Event event, long durationInNanos) {\n        recordSuccess(this.sendState, CallbackType.SEND);\n    }\n\n    @Override\n    public void eventSendFailure(Appender<Event> appender, Event event, Throwable reason) {\n        recordFailure(this.sendState, reason);\n    }\n\n    @Override\n    public void connectionOpened(Appender<Event> appender, Socket socket) {\n        recordSuccess(this.connectState, CallbackType.CONNECT);\n    }\n\n    @Override\n    public void connectionFailed(Appender<Event> appender, InetSocketAddress address, Throwable reason) {\n        recordFailure(this.connectState, reason);\n    }\n\n    private void recordSuccess(AtomicReference<State> stateRef, CallbackType callbackType) {", "right_context": "", "class_name": "FailingState", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass DisconnectedOutputStream extends ProxyOutputStream {\n        DisconnectedOutputStream() {\n            super(null);\n        }\n        \n        public void connect(OutputStream out) {\n            this.delegate = out;\n        }\n        \n        public void disconnect() {\n            this.delegate = null;\n        }\n    }\n    \n    private JsonFactory createJsonFactory() {\n        ObjectMapper objectMapper = new ObjectMapper()\n                /*\n                 * Assume empty beans are ok.\n                 */\n                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n\n        if (findAndRegisterJacksonModules) {\n            try {\n                objectMapper.findAndRegisterModules();\n            } catch (ServiceConfigurationError serviceConfigurationError) {\n                addError(\"Error occurred while dynamically loading jackson modules\", serviceConfigurationError);\n            }\n        }\n\n        return decorateFactory(objectMapper.getFactory());\n    }\n\n    private JsonFactory decorateFactory(JsonFactory factory) {\n        JsonFactory factoryToDecorate = factory\n                /*\n                 * When generators are flushed, don't flush the underlying outputStream.\n                 *\n                 * This allows some streaming optimizations when using an encoder.\n                 *\n                 * The encoder generally determines when the stream should be flushed\n                 * by an 'immediateFlush' property.\n                 *\n                 * The 'immediateFlush' property of the encoder can be set to false\n                 * when the appender performs the flushes at appropriate times\n                 * (such as the end of a batch in the AbstractLogstashTcpSocketAppender).\n                 *\n                 * Set this prior to decorating, because some generators require\n                 * FLUSH_PASSED_TO_STREAM to work properly (e.g. YAML)\n                 */\n                .disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n\n        return this.jsonFactoryDecorator.decorate(factoryToDecorate)\n                /*\n                 * Jackson buffer recycling works by maintaining a pool of buffers per thread. This\n                 * feature works best when one JsonGenerator is created per thread, typically in J2EE\n                 * environments.\n                 * \n                 * Each JsonFormatter uses its own instance of JsonGenerator and is reused multiple times\n                 * possibly on different threads. The memory buffers allocated by the JsonGenerator do\n                 * not belong to a particular thread - hence the recycling feature should be disabled.\n                 */\n                .disable(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING);\n    }\n    \n    protected void writeEventToGenerator(JsonGenerator generator, Event event) throws IOException {\n        generator.writeStartObject();\n        jsonProviders.writeTo(generator, event);\n        generator.writeEndObject();\n        generator.flush();\n    }\n\n    protected void prepareForDeferredProcessing(Event event) {\n        event.prepareForDeferredProcessing();\n        jsonProviders.prepareForDeferredProcessing(event);\n    }\n\n    private JsonGenerator createGenerator(OutputStream outputStream) throws IOException {\n        return decorateGenerator(jsonFactory.createGenerator(outputStream, encoding));\n    }\n\n    private JsonGenerator decorateGenerator(JsonGenerator generator) {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "logfellow_logstash-logback-encoder/230", "ground_truth": "\n        JsonGenerator decorated = jsonGeneratorDecorator.decorate(new SimpleObjectJsonGeneratorDelegate(generator))\n                /*\n                 * Don't let the json generator close the underlying outputStream and let the\n                 * encoder managed it.\n                 */\n                .disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n\n        try {\n            decorated = decorated\n                /*\n                 * JsonGenerator are reused to serialize multiple log events.\n                 * Change the default root value separator to an empty string instead of a single space.\n                 */\n                .setRootValueSeparator(new SerializedString(CoreConstants.EMPTY_STRING));\n        } catch (UnsupportedOperationException e) {\n            /*\n             * Ignore.\n             * Some generators do not support setting the rootValueSeparator.\n             */\n        }\n\n        return decorated;\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "AbstractCompositeJsonFormatter.java"], "context_start_lineno": 0, "function_name": "decorateGenerator", "left_context": "class DisconnectedOutputStream extends ProxyOutputStream {\n        DisconnectedOutputStream() {\n            super(null);\n        }\n        \n        public void connect(OutputStream out) {\n            this.delegate = out;\n        }\n        \n        public void disconnect() {\n            this.delegate = null;\n        }\n    }\n    \n    private JsonFactory createJsonFactory() {\n        ObjectMapper objectMapper = new ObjectMapper()\n                /*\n                 * Assume empty beans are ok.\n                 */\n                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n\n        if (findAndRegisterJacksonModules) {\n            try {\n                objectMapper.findAndRegisterModules();\n            } catch (ServiceConfigurationError serviceConfigurationError) {\n                addError(\"Error occurred while dynamically loading jackson modules\", serviceConfigurationError);\n            }\n        }\n\n        return decorateFactory(objectMapper.getFactory());\n    }\n\n    private JsonFactory decorateFactory(JsonFactory factory) {\n        JsonFactory factoryToDecorate = factory\n                /*\n                 * When generators are flushed, don't flush the underlying outputStream.\n                 *\n                 * This allows some streaming optimizations when using an encoder.\n                 *\n                 * The encoder generally determines when the stream should be flushed\n                 * by an 'immediateFlush' property.\n                 *\n                 * The 'immediateFlush' property of the encoder can be set to false\n                 * when the appender performs the flushes at appropriate times\n                 * (such as the end of a batch in the AbstractLogstashTcpSocketAppender).\n                 *\n                 * Set this prior to decorating, because some generators require\n                 * FLUSH_PASSED_TO_STREAM to work properly (e.g. YAML)\n                 */\n                .disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n\n        return this.jsonFactoryDecorator.decorate(factoryToDecorate)\n                /*\n                 * Jackson buffer recycling works by maintaining a pool of buffers per thread. This\n                 * feature works best when one JsonGenerator is created per thread, typically in J2EE\n                 * environments.\n                 * \n                 * Each JsonFormatter uses its own instance of JsonGenerator and is reused multiple times\n                 * possibly on different threads. The memory buffers allocated by the JsonGenerator do\n                 * not belong to a particular thread - hence the recycling feature should be disabled.\n                 */\n                .disable(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING);\n    }\n    \n    protected void writeEventToGenerator(JsonGenerator generator, Event event) throws IOException {\n        generator.writeStartObject();\n        jsonProviders.writeTo(generator, event);\n        generator.writeEndObject();\n        generator.flush();\n    }\n\n    protected void prepareForDeferredProcessing(Event event) {\n        event.prepareForDeferredProcessing();\n        jsonProviders.prepareForDeferredProcessing(event);\n    }\n\n    private JsonGenerator createGenerator(OutputStream outputStream) throws IOException {\n        return decorateGenerator(jsonFactory.createGenerator(outputStream, encoding));\n    }\n\n    private JsonGenerator decorateGenerator(JsonGenerator generator) {", "right_context": "", "class_name": "DisconnectedOutputStream", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LogstashMarkersJsonProvider extends AbstractJsonProvider<ILoggingEvent> {\n\n    @Override\n    public void writeTo(JsonGenerator generator, ILoggingEvent event) throws IOException {\n        writeLogstashMarkerIfNecessary(generator, event.getMarkerList());\n    }\n    \n    private void writeLogstashMarkerIfNecessary(JsonGenerator generator, List<Marker> markers) throws IOException {\n        if (markers != null) {\n            for (Marker marker: markers) {\n                writeLogstashMarkerIfNecessary(generator, marker);\n            }\n        }\n    }\n    \n    private void writeLogstashMarkerIfNecessary(JsonGenerator generator, Marker marker) throws IOException {<FILL_FUNCTION_BODY>}\n\n    public static boolean isLogstashMarker(Marker marker) {\n        return marker instanceof LogstashMarker;\n    }\n    \n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/284", "ground_truth": "\n        if (marker != null) {\n            if (isLogstashMarker(marker)) {\n                ((LogstashMarker) marker).writeTo(generator);\n            }\n            \n            if (marker.hasReferences()) {\n                for (Iterator<?> i = marker.iterator(); i.hasNext();) {\n                    Marker next = (Marker) i.next();\n                    writeLogstashMarkerIfNecessary(generator, next);\n                }\n            }\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "loggingevent", "LogstashMarkersJsonProvider.java"], "context_start_lineno": 0, "function_name": "writeLogstashMarkerIfNecessary", "left_context": "class LogstashMarkersJsonProvider extends AbstractJsonProvider<ILoggingEvent> {\n\n    @Override\n    public void writeTo(JsonGenerator generator, ILoggingEvent event) throws IOException {\n        writeLogstashMarkerIfNecessary(generator, event.getMarkerList());\n    }\n    \n    private void writeLogstashMarkerIfNecessary(JsonGenerator generator, List<Marker> markers) throws IOException {\n        if (markers != null) {\n            for (Marker marker: markers) {\n                writeLogstashMarkerIfNecessary(generator, marker);\n            }\n        }\n    }\n    \n    private void writeLogstashMarkerIfNecessary(JsonGenerator generator, Marker marker) throws IOException {", "right_context": "}\n\n    public static boolean isLogstashMarker(Marker marker) {\n        return marker instanceof LogstashMarker;\n    }\n    \n}", "class_name": "LogstashMarkersJsonProvider", "return_type": "void", "parameters": [{"type": "JsonGenerator", "name": "generator"}, {"type": "Marker", "name": "marker"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LogstashVersionJsonProvider<Event extends DeferredProcessingAware> extends AbstractFieldJsonProvider<Event> implements FieldNamesAware<LogstashCommonFieldNames> {\n    \n    public static final String FIELD_VERSION = \"@version\";\n    \n    public static final String DEFAULT_VERSION = \"1\";\n    \n    private String version;\n    private long versionAsInteger;\n    \n    /**\n     * When false (the default), the version will be written as a string value.\n     * When true, the version will be written as a numeric integer value.\n     */\n    private boolean writeAsInteger;\n    \n    public LogstashVersionJsonProvider() {\n        setFieldName(FIELD_VERSION);\n        setVersion(DEFAULT_VERSION);\n    }\n\n    @Override\n    public void writeTo(JsonGenerator generator, Event event) throws IOException {<FILL_FUNCTION_BODY>}\n    \n    @Override\n    public void setFieldNames(LogstashCommonFieldNames fieldNames) {\n        setFieldName(fieldNames.getVersion());\n    }\n    \n    public String getVersion() {\n        return version;\n    }\n    \n    public void setVersion(String version) {\n        this.version = version;\n        if (writeAsInteger) {\n            this.versionAsInteger = Integer.parseInt(version);\n        }\n    }\n    \n    public boolean isWriteAsInteger() {\n        return writeAsInteger;\n    }\n    \n    public void setWriteAsInteger(boolean writeAsInteger) {\n        this.writeAsInteger = writeAsInteger;\n        if (writeAsInteger) {\n            this.versionAsInteger = Integer.parseInt(version);\n        }\n    }\n    \n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/310", "ground_truth": "\n        if (writeAsInteger) {\n            JsonWritingUtils.writeNumberField(generator, getFieldName(), versionAsInteger);\n        } else {\n            JsonWritingUtils.writeStringField(generator, getFieldName(), version);\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "LogstashVersionJsonProvider.java"], "context_start_lineno": 0, "function_name": "writeTo", "left_context": "class LogstashVersionJsonProvider<Event extends DeferredProcessingAware> extends AbstractFieldJsonProvider<Event> implements FieldNamesAware<LogstashCommonFieldNames> {\n    \n    public static final String FIELD_VERSION = \"@version\";\n    \n    public static final String DEFAULT_VERSION = \"1\";\n    \n    private String version;\n    private long versionAsInteger;\n    \n    /**\n     * When false (the default), the version will be written as a string value.\n     * When true, the version will be written as a numeric integer value.\n     */\n    private boolean writeAsInteger;\n    \n    public LogstashVersionJsonProvider() {\n        setFieldName(FIELD_VERSION);\n        setVersion(DEFAULT_VERSION);\n    }\n\n    @Override\n    public void writeTo(JsonGenerator generator, Event event) throws IOException {", "right_context": "}\n    \n    @Override\n    public void setFieldNames(LogstashCommonFieldNames fieldNames) {\n        setFieldName(fieldNames.getVersion());\n    }\n    \n    public String getVersion() {\n        return version;\n    }\n    \n    public void setVersion(String version) {\n        this.version = version;\n        if (writeAsInteger) {\n            this.versionAsInteger = Integer.parseInt(version);\n        }\n    }\n    \n    public boolean isWriteAsInteger() {\n        return writeAsInteger;\n    }\n    \n    public void setWriteAsInteger(boolean writeAsInteger) {\n        this.writeAsInteger = writeAsInteger;\n        if (writeAsInteger) {\n            this.versionAsInteger = Integer.parseInt(version);\n        }\n    }\n    \n}", "class_name": "LogstashVersionJsonProvider", "return_type": "void", "parameters": [{"type": "JsonGenerator", "name": "generator"}, {"type": "Event", "name": "event"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StackElementFilter {\n    /**\n     * Tests whether or not the specified {@link StackTraceElement} should be\n     * accepted when computing a stack hash.\n     *\n     * @param element The {@link StackTraceElement} to be tested\n     * @return {@code true} if and only if {@code element} should be accepted\n     */\n    public abstract boolean accept(StackTraceElement element);\n\n    /**\n     * Creates a {@link StackElementFilter} that accepts any stack trace elements\n     * \n     * @return the filter\n     */\n    public static final StackElementFilter any() {\n        return new StackElementFilter() {\n            @Override\n            public boolean accept(StackTraceElement element) {\n                return true;\n            }\n        };\n    }\n\n    /**\n     * Creates a {@link StackElementFilter} that accepts all stack trace elements with a non {@code null}\n     * {@code {@link StackTraceElement#getFileName()} filename} and positive {@link StackTraceElement#getLineNumber()} line number}\n     * \n     * @return the filter\n     */\n    public static final StackElementFilter withSourceInfo() {\n        return new StackElementFilter() {\n            @Override\n            public boolean accept(StackTraceElement element) {\n                return element.getFileName() != null && element.getLineNumber() >= 0;\n            }\n        };\n    }\n\n    /**\n     * Creates a {@link StackElementFilter} by exclusion {@link Pattern patterns}\n     *\n     * @param excludes regular expressions matching {@link StackTraceElement} to filter out\n     * @return the filter\n     */\n    public static final StackElementFilter byPattern(final List<Pattern> excludes) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/326", "ground_truth": "\n        return new StackElementFilter() {\n            @Override\n            public boolean accept(StackTraceElement element) {\n                if (!excludes.isEmpty()) {\n                    String classNameAndMethod = element.getClassName() + \".\" + element.getMethodName();\n                    for (Pattern exclusionPattern : excludes) {\n                        if (exclusionPattern.matcher(classNameAndMethod).find()) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n        };\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "stacktrace", "StackElementFilter.java"], "context_start_lineno": 0, "function_name": "byPattern", "left_context": "class StackElementFilter {\n    /**\n     * Tests whether or not the specified {@link StackTraceElement} should be\n     * accepted when computing a stack hash.\n     *\n     * @param element The {@link StackTraceElement} to be tested\n     * @return {@code true} if and only if {@code element} should be accepted\n     */\n    public abstract boolean accept(StackTraceElement element);\n\n    /**\n     * Creates a {@link StackElementFilter} that accepts any stack trace elements\n     * \n     * @return the filter\n     */\n    public static final StackElementFilter any() {\n        return new StackElementFilter() {\n            @Override\n            public boolean accept(StackTraceElement element) {\n                return true;\n            }\n        };\n    }\n\n    /**\n     * Creates a {@link StackElementFilter} that accepts all stack trace elements with a non {@code null}\n     * {@code {@link StackTraceElement#getFileName()} filename} and positive {@link StackTraceElement#getLineNumber()} line number}\n     * \n     * @return the filter\n     */\n    public static final StackElementFilter withSourceInfo() {\n        return new StackElementFilter() {\n            @Override\n            public boolean accept(StackTraceElement element) {\n                return element.getFileName() != null && element.getLineNumber() >= 0;\n            }\n        };\n    }\n\n    /**\n     * Creates a {@link StackElementFilter} by exclusion {@link Pattern patterns}\n     *\n     * @param excludes regular expressions matching {@link StackTraceElement} to filter out\n     * @return the filter\n     */\n    public static final StackElementFilter byPattern(final List<Pattern> excludes) {", "right_context": "}\n}", "class_name": "StackElementFilter", "return_type": "StackElementFilter", "parameters": [{"type": "List<Pattern>", "name": "excludes"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractJsonProvider<Event extends DeferredProcessingAware> extends ContextAwareBase implements JsonProvider<Event> {\n\n    private volatile boolean started;\n\n    @Override\n    public void start() {\n        started = true;\n    }\n    \n    @Override\n    public void stop() {\n        started = false;\n    }\n    \n    @Override\n    public boolean isStarted() {\n        return started;\n    }\n    \n    @Override\n    public void prepareForDeferredProcessing(Event event) {\n    }\n\n    \n    /**\n     * Assert the component is started and throw {@link IllegalStateException}\u00a0if not\n     * \n     * @throws IllegalStateException if component is not started\n     */\n    protected void assertIsStarted() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/355", "ground_truth": "\n        if (!isStarted()) {\n            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not started\");\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "AbstractJsonProvider.java"], "context_start_lineno": 0, "function_name": "assertIsStarted", "left_context": "class AbstractJsonProvider<Event extends DeferredProcessingAware> extends ContextAwareBase implements JsonProvider<Event> {\n\n    private volatile boolean started;\n\n    @Override\n    public void start() {\n        started = true;\n    }\n    \n    @Override\n    public void stop() {\n        started = false;\n    }\n    \n    @Override\n    public boolean isStarted() {\n        return started;\n    }\n    \n    @Override\n    public void prepareForDeferredProcessing(Event event) {\n    }\n\n    \n    /**\n     * Assert the component is started and throw {@link IllegalStateException}\u00a0if not\n     * \n     * @throws IllegalStateException if component is not started\n     */\n    protected void assertIsStarted() {", "right_context": "}\n}", "class_name": "AbstractJsonProvider", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/composite/AbstractCompositeJsonFormatter.java\n// --------------------------------------------------\n// private JsonFactory createJsonFactory(){\n//   ObjectMapper objectMapper=new ObjectMapper().disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n//   if (findAndRegisterJacksonModules) {\n//     try {\n//       objectMapper.findAndRegisterModules();\n//     }\n//  catch (    ServiceConfigurationError serviceConfigurationError) {\n//       addError(\"Error occurred while dynamically loading jackson modules\",serviceConfigurationError);\n//     }\n//   }\n//   return decorateFactory(objectMapper.getFactory());\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/composite/AbstractCompositeJsonFormatter.java\n// --------------------------------------------------\n// public JsonFactory getJsonFactory(){\n//   return jsonFactory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/composite/AbstractCompositeJsonFormatter.java\n// --------------------------------------------------\n// private JsonFactory decorateFactory(JsonFactory factory){\n//   JsonFactory factoryToDecorate=factory.disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n//   return this.jsonFactoryDecorator.decorate(factoryToDecorate).disable(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/CharacterEscapesJsonFactoryDecorator.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   if (needsInitialization) {\n//     characterEscapes=new CustomizedCharacterEscapes(includeStandardAsciiEscapesForJSON,escapes);\n//     needsInitialization=false;\n//   }\n//   return factory.setCharacterEscapes(characterEscapes);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/CompositeJsonFactoryDecorator.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   JsonFactory decoratedFactory=factory;\n//   for (  JsonFactoryDecorator decorator : decorators) {\n//     decoratedFactory=decorator.decorate(decoratedFactory);\n//   }\n//   return decoratedFactory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/EscapeNonAsciiJsonFactoryDecorator.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   return factory.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/JsonFactoryDecorator.java\n// --------------------------------------------------\n// /** \n//  * Decorates the given  {@link JsonFactory}. <p>By default, returns the given factory unchanged.</p> <p>Note that the default  {@link JsonFactory} created by logstash-logback-encoderis a  {@link MappingJsonFactory}, but can be changed by  {@link JsonFactoryDecorator}s to any subclass of  {@link JsonFactory}.</p>\n//  * @param factory the factory to decorate\n//  * @return the decorated {@link JsonFactory}\n//  */\n// default JsonFactory decorate(JsonFactory factory){\n//   return factory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/NullJsonFactoryDecorator.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   return factory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/cbor/CborJsonFactoryDecorator.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   CBORFactory cborFactory=new CBORFactory();\n//   ObjectMapper mapper=new ObjectMapper(cborFactory);\n//   cborFactory.setCodec(mapper);\n//   return cborFactory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/main/java/net/logstash/logback/decorate/yaml/YamlJsonFactoryDecorator.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   YAMLFactory yamlFactory=new YAMLFactory();\n//   ObjectMapper mapper=new ObjectMapper(yamlFactory);\n//   yamlFactory.setCodec(mapper);\n//   yamlFactory.enable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n//   return yamlFactory;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// logstash-logback-encoder/src/test/java/net/logstash/logback/encoder/LogstashEncoderTest.java\n// --------------------------------------------------\n// @Override public JsonFactory decorate(JsonFactory factory){\n//   return factory.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SmileJsonFactoryDecorator implements JsonFactoryDecorator {\n\n    @Override\n    public JsonFactory decorate(JsonFactory factory) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/370", "ground_truth": "\n        SmileFactory smileFactory = new SmileFactory();\n        ObjectMapper mapper = new ObjectMapper(smileFactory);\n        smileFactory.setCodec(mapper);\n        return smileFactory;\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "decorate", "smile", "SmileJsonFactoryDecorator.java"], "context_start_lineno": 0, "function_name": "decorate", "left_context": "class SmileJsonFactoryDecorator implements JsonFactoryDecorator {\n\n    @Override\n    public JsonFactory decorate(JsonFactory factory) {", "right_context": "}\n}", "class_name": "SmileJsonFactoryDecorator", "return_type": "JsonFactory", "parameters": [{"type": "JsonFactory", "name": "factory"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StackTraceJsonProvider extends AbstractFieldJsonProvider<ILoggingEvent> implements FieldNamesAware<LogstashFieldNames> {\n\n    public static final String FIELD_STACK_TRACE = \"stack_trace\";\n\n    /**\n     * Used to format throwables as Strings.\n     *\n     * Uses an {@link ExtendedThrowableProxyConverter} from logstash by default.\n     *\n     * Consider using a\n     * {@link net.logstash.logback.stacktrace.ShortenedThrowableConverter ShortenedThrowableConverter}\n     * for more customization options.\n     */\n    private ThrowableHandlingConverter throwableConverter = new ExtendedThrowableProxyConverter();\n\n    public StackTraceJsonProvider() {\n        setFieldName(FIELD_STACK_TRACE);\n    }\n\n    @Override\n    public void start() {\n        this.throwableConverter.start();\n        super.start();\n    }\n\n    @Override\n    public void stop() {\n        this.throwableConverter.stop();\n        super.stop();\n    }\n\n    @Override\n    public void writeTo(JsonGenerator generator, ILoggingEvent event) throws IOException {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public void setFieldNames(LogstashFieldNames fieldNames) {\n        setFieldName(fieldNames.getStackTrace());\n    }\n\n    public ThrowableHandlingConverter getThrowableConverter() {\n        return throwableConverter;\n    }\n    public void setThrowableConverter(ThrowableHandlingConverter throwableConverter) {\n        this.throwableConverter = throwableConverter;\n    }\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/380", "ground_truth": "\n        IThrowableProxy throwableProxy = event.getThrowableProxy();\n        if (throwableProxy != null) {\n            JsonWritingUtils.writeStringField(generator, getFieldName(), throwableConverter.convert(event));\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "composite", "loggingevent", "StackTraceJsonProvider.java"], "context_start_lineno": 0, "function_name": "writeTo", "left_context": "class StackTraceJsonProvider extends AbstractFieldJsonProvider<ILoggingEvent> implements FieldNamesAware<LogstashFieldNames> {\n\n    public static final String FIELD_STACK_TRACE = \"stack_trace\";\n\n    /**\n     * Used to format throwables as Strings.\n     *\n     * Uses an {@link ExtendedThrowableProxyConverter} from logstash by default.\n     *\n     * Consider using a\n     * {@link net.logstash.logback.stacktrace.ShortenedThrowableConverter ShortenedThrowableConverter}\n     * for more customization options.\n     */\n    private ThrowableHandlingConverter throwableConverter = new ExtendedThrowableProxyConverter();\n\n    public StackTraceJsonProvider() {\n        setFieldName(FIELD_STACK_TRACE);\n    }\n\n    @Override\n    public void start() {\n        this.throwableConverter.start();\n        super.start();\n    }\n\n    @Override\n    public void stop() {\n        this.throwableConverter.stop();\n        super.stop();\n    }\n\n    @Override\n    public void writeTo(JsonGenerator generator, ILoggingEvent event) throws IOException {", "right_context": "}\n\n    @Override\n    public void setFieldNames(LogstashFieldNames fieldNames) {\n        setFieldName(fieldNames.getStackTrace());\n    }\n\n    public ThrowableHandlingConverter getThrowableConverter() {\n        return throwableConverter;\n    }\n    public void setThrowableConverter(ThrowableHandlingConverter throwableConverter) {\n        this.throwableConverter = throwableConverter;\n    }\n}", "class_name": "StackTraceJsonProvider", "return_type": "void", "parameters": [{"type": "JsonGenerator", "name": "generator"}, {"type": "ILoggingEvent", "name": "event"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EventClearingEventHandler<Event> implements SequenceReportingEventHandler<LogEvent<Event>>, LifecycleAware {\n\n        private final EventHandler<LogEvent<Event>> delegate;\n        private Sequence sequenceCallback;\n\n        EventClearingEventHandler(EventHandler<LogEvent<Event>> delegate) {\n            super();\n            this.delegate = delegate;\n        }\n\n        @Override\n        public void onEvent(LogEvent<Event> event, long sequence, boolean endOfBatch) throws Exception {\n            try {\n                delegate.onEvent(event, sequence, endOfBatch);\n            } finally {\n                /*\n                 * Clear the event so that it can be garbage collected.\n                 */\n                event.recycle();\n                \n                /*\n                 * Notify the BatchEventProcessor that the sequence has progressed.\n                 * Without this callback the sequence would not be progressed\n                 * until the batch has completely finished.\n                 */\n                sequenceCallback.set(sequence);\n            }\n        }\n\n        @Override\n        public void onStart() {\n            if (delegate instanceof LifecycleAware) {\n                ((LifecycleAware) delegate).onStart();\n            }\n        }\n\n        @Override\n        public void onShutdown() {\n            if (delegate instanceof LifecycleAware) {\n                ((LifecycleAware) delegate).onShutdown();\n            }\n        }\n\n        @Override\n        public void setSequenceCallback(final Sequence sequenceCallback) {\n            this.sequenceCallback = sequenceCallback;\n        }\n    }\n\n    @Override\n    public void start() {\n        if (addDefaultStatusListener && getStatusManager() != null && getStatusManager().getCopyOfStatusListenerList().isEmpty()) {\n            LevelFilteringStatusListener statusListener = new LevelFilteringStatusListener();\n            statusListener.setLevelValue(Status.WARN);\n            statusListener.setDelegate(new OnConsoleStatusListener());\n            statusListener.setContext(getContext());\n            statusListener.start();\n            getStatusManager().add(statusListener);\n        }\n\n        this.disruptor = new Disruptor<>(\n                this.eventFactory,\n                this.ringBufferSize,\n                this.threadFactory,\n                this.producerType,\n                this.waitStrategy);\n\n        /*\n         * Define the exceptionHandler first, so that it applies\n         * to all future eventHandlers.\n         */\n        this.disruptor.setDefaultExceptionHandler(this.exceptionHandler);\n\n        this.disruptor.handleEventsWith(new EventClearingEventHandler<>(createEventHandler()));\n\n        this.disruptor.start();\n        super.start();\n        fireAppenderStarted();\n    }\n\n    @Override\n    public void stop() {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "logfellow_logstash-logback-encoder/403", "ground_truth": "\n        /*\n         * Check super.isStarted() instead of isStarted() because subclasses\n         * might override isStarted() to perform other comparisons that we don't\n         * want to check here.  Those should be checked by subclasses\n         * prior to calling super.stop()\n         */\n        if (!super.isStarted()) {\n            return;\n        }\n        \n        /*\n         * Don't allow any more events to be appended.\n         */\n        super.stop();\n\n        \n        /*\n         * Shutdown Disruptor\n         *\n         * Calling Disruptor#shutdown() will wait until all enqueued events are fully processed,\n         * but this waiting happens in a busy-spin. To avoid wasting CPU we wait for at most the configured\n         * grace period before asking the Disruptor for an immediate shutdown.\n         */\n        long deadline = getShutdownGracePeriod().getMilliseconds() < 0 ? Long.MAX_VALUE : System.currentTimeMillis() + getShutdownGracePeriod().getMilliseconds();\n        while (!isRingBufferEmpty() && (System.currentTimeMillis() < deadline)) {\n            LockSupport.parkNanos(SLEEP_TIME_DURING_SHUTDOWN);\n        }\n        \n        this.disruptor.halt();\n\n        if (!isRingBufferEmpty()) {\n            addWarn(\"Some queued events have not been logged due to requested shutdown\");\n        }\n        fireAppenderStopped();\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "appender", "AsyncDisruptorAppender.java"], "context_start_lineno": 0, "function_name": "stop", "left_context": "class EventClearingEventHandler<Event> implements SequenceReportingEventHandler<LogEvent<Event>>, LifecycleAware {\n\n        private final EventHandler<LogEvent<Event>> delegate;\n        private Sequence sequenceCallback;\n\n        EventClearingEventHandler(EventHandler<LogEvent<Event>> delegate) {\n            super();\n            this.delegate = delegate;\n        }\n\n        @Override\n        public void onEvent(LogEvent<Event> event, long sequence, boolean endOfBatch) throws Exception {\n            try {\n                delegate.onEvent(event, sequence, endOfBatch);\n            } finally {\n                /*\n                 * Clear the event so that it can be garbage collected.\n                 */\n                event.recycle();\n                \n                /*\n                 * Notify the BatchEventProcessor that the sequence has progressed.\n                 * Without this callback the sequence would not be progressed\n                 * until the batch has completely finished.\n                 */\n                sequenceCallback.set(sequence);\n            }\n        }\n\n        @Override\n        public void onStart() {\n            if (delegate instanceof LifecycleAware) {\n                ((LifecycleAware) delegate).onStart();\n            }\n        }\n\n        @Override\n        public void onShutdown() {\n            if (delegate instanceof LifecycleAware) {\n                ((LifecycleAware) delegate).onShutdown();\n            }\n        }\n\n        @Override\n        public void setSequenceCallback(final Sequence sequenceCallback) {\n            this.sequenceCallback = sequenceCallback;\n        }\n    }\n\n    @Override\n    public void start() {\n        if (addDefaultStatusListener && getStatusManager() != null && getStatusManager().getCopyOfStatusListenerList().isEmpty()) {\n            LevelFilteringStatusListener statusListener = new LevelFilteringStatusListener();\n            statusListener.setLevelValue(Status.WARN);\n            statusListener.setDelegate(new OnConsoleStatusListener());\n            statusListener.setContext(getContext());\n            statusListener.start();\n            getStatusManager().add(statusListener);\n        }\n\n        this.disruptor = new Disruptor<>(\n                this.eventFactory,\n                this.ringBufferSize,\n                this.threadFactory,\n                this.producerType,\n                this.waitStrategy);\n\n        /*\n         * Define the exceptionHandler first, so that it applies\n         * to all future eventHandlers.\n         */\n        this.disruptor.setDefaultExceptionHandler(this.exceptionHandler);\n\n        this.disruptor.handleEventsWith(new EventClearingEventHandler<>(createEventHandler()));\n\n        this.disruptor.start();\n        super.start();\n        fireAppenderStarted();\n    }\n\n    @Override\n    public void stop() {", "right_context": "", "class_name": "EventClearingEventHandler", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SingleFieldAppendingMarker extends LogstashMarker implements StructuredArgument {\n\n    public static final String MARKER_NAME_PREFIX = LogstashMarker.MARKER_NAME_PREFIX + \"APPEND_\";\n\n    /**\n     * Name of the field to append.\n     *\n     * Note that the value of the field is provided by subclasses via {@link #writeFieldValue(JsonGenerator)}.\n     */\n    private final String fieldName;\n\n    /**\n     * Pattern to use when appending the field/value in {@link #toString()}.\n     * <p>\n     * {@link #getFieldName()} will be substituted in {0}.\n     * {@link #getFieldValue()} will be substituted in {1}.\n     */\n    private final String messageFormatPattern;\n\n    public SingleFieldAppendingMarker(String markerName, String fieldName) {\n        this(markerName, fieldName, StructuredArguments.DEFAULT_KEY_VALUE_MESSAGE_FORMAT_PATTERN);\n    }\n\n    public SingleFieldAppendingMarker(String markerName, String fieldName, String messageFormatPattern) {\n        super(markerName);\n        this.fieldName = Objects.requireNonNull(fieldName, \"fieldName must not be null\");\n        this.messageFormatPattern = Objects.requireNonNull(messageFormatPattern, \"messageFormatPattern must not be null\");\n    }\n\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    public void writeTo(JsonGenerator generator) throws IOException {\n        writeFieldName(generator);\n        writeFieldValue(generator);\n    }\n\n    /**\n     * Writes the field name to the generator.\n     * \n     * @param generator the generator to write JSON\n     * @throws IOException if an I/O error occurs\n     */\n    protected void writeFieldName(JsonGenerator generator) throws IOException {\n        generator.writeFieldName(getFieldName());\n    }\n\n    /**\n     * Writes the field value to the generator.\n     * \n     * @param generator the generator to write JSON\n     * @throws IOException if an I/O error occurs\n     */\n    protected abstract void writeFieldValue(JsonGenerator generator) throws IOException;\n\n    @Override\n    public String toStringSelf() {\n        final String fieldValueString = StructuredArguments.toString(getFieldValue());\n        /*\n         * Optimize for commonly used messageFormatPattern\n         */\n        if (StructuredArguments.VALUE_ONLY_MESSAGE_FORMAT_PATTERN.equals(messageFormatPattern)) {\n            return fieldValueString;\n        }\n        if (StructuredArguments.DEFAULT_KEY_VALUE_MESSAGE_FORMAT_PATTERN.equals(messageFormatPattern)) {\n            return getFieldName()\n                    + \"=\"\n                    + fieldValueString;\n        }\n        /*\n         * Custom messageFormatPattern\n         */\n        return MessageFormatCache.INSTANCE.getMessageFormat(this.messageFormatPattern)\n                .format(new Object[] {getFieldName(), fieldValueString});\n    }\n\n    /**\n     * Return the value that should be included in the output of {@link #toString()}.\n     * \n     * @return the field value\n     */\n    protected abstract Object getFieldValue();\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof SingleFieldAppendingMarker)) {\n            return false;\n        }\n\n        SingleFieldAppendingMarker other = (SingleFieldAppendingMarker) obj;\n        return this.fieldName.equals(other.fieldName);\n    }\n\n    @Override\n    public int hashCode() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/425", "ground_truth": "\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + super.hashCode();\n        result = prime * result + this.fieldName.hashCode();\n        return result;\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "marker", "SingleFieldAppendingMarker.java"], "context_start_lineno": 0, "function_name": "hashCode", "left_context": "class SingleFieldAppendingMarker extends LogstashMarker implements StructuredArgument {\n\n    public static final String MARKER_NAME_PREFIX = LogstashMarker.MARKER_NAME_PREFIX + \"APPEND_\";\n\n    /**\n     * Name of the field to append.\n     *\n     * Note that the value of the field is provided by subclasses via {@link #writeFieldValue(JsonGenerator)}.\n     */\n    private final String fieldName;\n\n    /**\n     * Pattern to use when appending the field/value in {@link #toString()}.\n     * <p>\n     * {@link #getFieldName()} will be substituted in {0}.\n     * {@link #getFieldValue()} will be substituted in {1}.\n     */\n    private final String messageFormatPattern;\n\n    public SingleFieldAppendingMarker(String markerName, String fieldName) {\n        this(markerName, fieldName, StructuredArguments.DEFAULT_KEY_VALUE_MESSAGE_FORMAT_PATTERN);\n    }\n\n    public SingleFieldAppendingMarker(String markerName, String fieldName, String messageFormatPattern) {\n        super(markerName);\n        this.fieldName = Objects.requireNonNull(fieldName, \"fieldName must not be null\");\n        this.messageFormatPattern = Objects.requireNonNull(messageFormatPattern, \"messageFormatPattern must not be null\");\n    }\n\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    public void writeTo(JsonGenerator generator) throws IOException {\n        writeFieldName(generator);\n        writeFieldValue(generator);\n    }\n\n    /**\n     * Writes the field name to the generator.\n     * \n     * @param generator the generator to write JSON\n     * @throws IOException if an I/O error occurs\n     */\n    protected void writeFieldName(JsonGenerator generator) throws IOException {\n        generator.writeFieldName(getFieldName());\n    }\n\n    /**\n     * Writes the field value to the generator.\n     * \n     * @param generator the generator to write JSON\n     * @throws IOException if an I/O error occurs\n     */\n    protected abstract void writeFieldValue(JsonGenerator generator) throws IOException;\n\n    @Override\n    public String toStringSelf() {\n        final String fieldValueString = StructuredArguments.toString(getFieldValue());\n        /*\n         * Optimize for commonly used messageFormatPattern\n         */\n        if (StructuredArguments.VALUE_ONLY_MESSAGE_FORMAT_PATTERN.equals(messageFormatPattern)) {\n            return fieldValueString;\n        }\n        if (StructuredArguments.DEFAULT_KEY_VALUE_MESSAGE_FORMAT_PATTERN.equals(messageFormatPattern)) {\n            return getFieldName()\n                    + \"=\"\n                    + fieldValueString;\n        }\n        /*\n         * Custom messageFormatPattern\n         */\n        return MessageFormatCache.INSTANCE.getMessageFormat(this.messageFormatPattern)\n                .format(new Object[] {getFieldName(), fieldValueString});\n    }\n\n    /**\n     * Return the value that should be included in the output of {@link #toString()}.\n     * \n     * @return the field value\n     */\n    protected abstract Object getFieldValue();\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof SingleFieldAppendingMarker)) {\n            return false;\n        }\n\n        SingleFieldAppendingMarker other = (SingleFieldAppendingMarker) obj;\n        return this.fieldName.equals(other.fieldName);\n    }\n\n    @Override\n    public int hashCode() {", "right_context": "}\n}", "class_name": "SingleFieldAppendingMarker", "return_type": "int", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass EnhancedPropertyConverter extends ClassicConverter {\n    /**\n     * Regex pattern used to extract the optional default value from the key name (split\n     * at the first :-).\n     */\n    private static final Pattern PATTERN = Pattern.compile(\"(.+?):-(.*)\");\n    \n    /**\n     * The property name.\n     */\n    private String propertyName;\n    \n    /**\n     * The default value to use when the property is not defined.\n     */\n    private String defaultValue = \"\";\n    \n    public void start() {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public String convert(ILoggingEvent event) {\n        LoggerContextVO lcvo = event.getLoggerContextVO();\n        Map<String, String> map = lcvo.getPropertyMap();\n        String val = map.get(propertyName);\n        \n        if (val == null) {\n            val = System.getProperty(propertyName);\n        }\n\n        if (val == null) {\n            val = defaultValue;\n        }\n        \n        return val;\n    }\n}", "metadata": {"task_id": "logfellow_logstash-logback-encoder/484", "ground_truth": "\n        String optStr = getFirstOption();\n        if (optStr != null) {\n            propertyName = optStr;\n            super.start();\n        }\n        if (propertyName == null) {\n            throw new IllegalStateException(\"Property name is not specified\");\n        }\n        \n        Matcher matcher = PATTERN.matcher(propertyName);\n        if (matcher.matches()) {\n            propertyName = matcher.group(1);\n            defaultValue = matcher.group(2);\n        }\n    ", "fpath_tuple": ["logfellow_logstash-logback-encoder", "logstash-logback-encoder", "src", "main", "java", "net", "logstash", "logback", "pattern", "EnhancedPropertyConverter.java"], "context_start_lineno": 0, "function_name": "start", "left_context": "class EnhancedPropertyConverter extends ClassicConverter {\n    /**\n     * Regex pattern used to extract the optional default value from the key name (split\n     * at the first :-).\n     */\n    private static final Pattern PATTERN = Pattern.compile(\"(.+?):-(.*)\");\n    \n    /**\n     * The property name.\n     */\n    private String propertyName;\n    \n    /**\n     * The default value to use when the property is not defined.\n     */\n    private String defaultValue = \"\";\n    \n    public void start() {", "right_context": "}\n\n    @Override\n    public String convert(ILoggingEvent event) {\n        LoggerContextVO lcvo = event.getLoggerContextVO();\n        Map<String, String> map = lcvo.getPropertyMap();\n        String val = map.get(propertyName);\n        \n        if (val == null) {\n            val = System.getProperty(propertyName);\n        }\n\n        if (val == null) {\n            val = defaultValue;\n        }\n        \n        return val;\n    }\n}", "class_name": "EnhancedPropertyConverter", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_GAME_OVER extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "ainilili_ratel/58", "ground_truth": "\n\t\tMap<String, Object> map = MapHelper.parser(data);\n\t\tSimplePrinter.printNotice(\"\\nPlayer \" + map.get(\"winnerNickname\") + \"[\" + map.get(\"winnerType\") + \"]\" + \" won the game\");\n\n\t\tif (map.containsKey(\"scores\")){\n\t\t\tList<Map<String, Object>> scores = Noson.convert(map.get(\"scores\"), new NoType<List<Map<String, Object>>>() {});\n\t\t\tfor (Map<String, Object> score : scores) {\n\t\t\t\tif (! Objects.equals(score.get(\"clientId\"), SimpleClient.id)) {\n\t\t\t\t\tSimplePrinter.printNotice(score.get(\"nickName\").toString() + \"'s rest poker is:\");\n\t\t\t\t\tSimplePrinter.printPokers(Noson.convert(score.get(\"pokers\"), new NoType<List<Poker>>() {}));\n\t\t\t\t}\n\t\t\t}\n\t\t\tSimplePrinter.printNotice(\"\\n\");\n\t\t\t// print score\n\t\t\tfor (Map<String, Object> score : scores) {\n\t\t\t\tString scoreInc = score.get(\"scoreInc\").toString();\n\t\t\t\tString scoreTotal = score.get(\"score\").toString();\n\t\t\t\tif (SimpleClient.id != (int) score.get(\"clientId\")) {\n\t\t\t\t\tSimplePrinter.printNotice(score.get(\"nickName\").toString() + \"'s score is \" + scoreInc + \", total score is \" + scoreTotal);\n\t\t\t\t} else {\n\t\t\t\t\tSimplePrinter.printNotice(\"your score is \" + scoreInc + \", total score is \" + scoreTotal);\n\t\t\t\t}\n\t\t\t}\n\t\t\tClientEventListener_CODE_GAME_READY.gameReady(channel);\n\t\t}\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_GAME_OVER.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_GAME_OVER extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {", "right_context": "}\n}", "class_name": "ClientEventListener_CODE_GAME_OVER", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OptionsUtils {\n\n\tpublic static int getOptions(String line) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "ainilili_ratel/103", "ground_truth": "\n\t\tint option = -1;\n\t\ttry {\n\t\t\toption = Integer.parseInt(line);\n\t\t} catch (Exception ignored) {}\n\t\treturn option;\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-common", "src", "main", "java", "org", "nico", "ratel", "landlords", "utils", "OptionsUtils.java"], "context_start_lineno": 0, "function_name": "getOptions", "left_context": "class OptionsUtils {\n\n\tpublic static int getOptions(String line) {", "right_context": "}\n}", "class_name": "OptionsUtils", "return_type": "int", "parameters": [{"type": "String", "name": "line"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServerEventListener_CODE_GAME_WATCH_EXIT implements ServerEventListener {\n\n    @Override\n    public void call(ClientSide clientSide, String data) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "ainilili_ratel/126", "ground_truth": "\n        Room room = ServerContains.getRoom(clientSide.getRoomId());\n\n        if (room != null) {\n            // \u623f\u95f4\u5982\u679c\u5b58\u5728\uff0c\u5219\u5c06\u89c2\u6218\u8005\u4ece\u623f\u95f4\u89c2\u6218\u5217\u8868\u4e2d\u79fb\u9664\n            clientSide.setRoomId(room.getId());\n            boolean successful = room.getWatcherList().remove(clientSide);\n            if (successful) {\n                SimplePrinter.serverLog(clientSide.getNickname() + \" exit room \" + room.getId());\n            }\n        }\n    ", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-server", "src", "main", "java", "org", "nico", "ratel", "landlords", "server", "event", "ServerEventListener_CODE_GAME_WATCH_EXIT.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ServerEventListener_CODE_GAME_WATCH_EXIT implements ServerEventListener {\n\n    @Override\n    public void call(ClientSide clientSide, String data) {", "right_context": "}\n}", "class_name": "ServerEventListener_CODE_GAME_WATCH_EXIT", "return_type": "void", "parameters": [{"type": "ClientSide", "name": "clientSide"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_CLIENT_KICK extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "ainilili_ratel/170", "ground_truth": "\n\n\t\tSimplePrinter.printNotice(\"You have been kicked from the room for being idle.\\n\");\n\n\t\tget(ClientEventCode.CODE_SHOW_OPTIONS).call(channel, data);\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_CLIENT_KICK.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_CLIENT_KICK extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {", "right_context": "}\n\n}", "class_name": "ClientEventListener_CODE_CLIENT_KICK", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_GAME_READY extends ClientEventListener {\n    @Override\n    public void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n\n    static void gameReady(Channel channel) {\n        SimplePrinter.printNotice(\"\\nDo you want to continue the game? [Y/N]\");\n        String line = SimpleWriter.write(User.INSTANCE.getNickname(), \"notReady\");\n        if (line.equals(\"Y\") || line.equals(\"y\")) {\n            ChannelUtils.pushToServer(channel, ServerEventCode.CODE_GAME_READY, \"\");\n            return;\n        }\n        ChannelUtils.pushToServer(channel, ServerEventCode.CODE_CLIENT_EXIT, \"\");\n    }\n}", "metadata": {"task_id": "ainilili_ratel/213", "ground_truth": "\n        Map<String, Object> map = MapHelper.parser(data);\n        if (SimpleClient.id == (int) map.get(\"clientId\")) {\n            SimplePrinter.printNotice(\"you are ready to play game.\");\n            return;\n        }\n        SimplePrinter.printNotice(map.get(\"clientNickName\").toString() + \" is ready to play game.\");\n    ", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_GAME_READY.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_GAME_READY extends ClientEventListener {\n    @Override\n    public void call(Channel channel, String data) {", "right_context": "}\n\n    static void gameReady(Channel channel) {\n        SimplePrinter.printNotice(\"\\nDo you want to continue the game? [Y/N]\");\n        String line = SimpleWriter.write(User.INSTANCE.getNickname(), \"notReady\");\n        if (line.equals(\"Y\") || line.equals(\"y\")) {\n            ChannelUtils.pushToServer(channel, ServerEventCode.CODE_GAME_READY, \"\");\n            return;\n        }\n        ChannelUtils.pushToServer(channel, ServerEventCode.CODE_CLIENT_EXIT, \"\");\n    }\n}", "class_name": "ClientEventListener_CODE_GAME_READY", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SimpleClient {\n\n\tpublic static int id = -1;\n\n\tpublic final static String VERSION = Features.VERSION_1_3_0;\n\n\tpublic static String serverAddress;\n\n\tpublic static int port = 1024;\n\n\tpublic static String protocol = \"pb\";\n\n\tprivate final static String[] serverAddressSource = new String[]{\n\t\t\t\"https://raw.githubusercontent.com/ainilili/ratel/master/serverlist.json\",\t\t\t//Source\n\t\t\t\"https://cdn.jsdelivr.net/gh/ainilili/ratel@master/serverlist.json\",\t\t\t\t//CN CDN\n\t\t\t\"https://raw.fastgit.org/ainilili/ratel/master/serverlist.json\",\t\t\t\t//HongKong CDN\n\t\t\t\"https://cdn.staticaly.com/gh/ainilili/ratel/master/serverlist.json\",\t\t\t\t//Japanese CDN\n\t\t\t\"https://ghproxy.com/https://raw.githubusercontent.com/ainilili/ratel/master/serverlist.json\",\t//Korea CDN\n\t\t\t\"https://gitee.com/ainilili/ratel/raw/master/serverlist.json\"\t\t\t\t\t//CN Gitee\n\t};\n\n\tpublic static void main(String[] args) throws InterruptedException, IOException, URISyntaxException {<FILL_FUNCTION_BODY>}\n\n\tprivate static List<String> getServerAddressList() {\n\t\tfor (String serverAddressSource : serverAddressSource) {\n\t\t\ttry {\n\t\t\t\tString serverInfo = StreamUtils.convertToString(new URL(serverAddressSource));\n\t\t\t\treturn Noson.convert(serverInfo, new NoType<List<String>>() {});\n\t\t\t} catch (IOException e) {\n\t\t\t\tSimplePrinter.printNotice(\"Try connected \" + serverAddressSource + \" failed: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}", "metadata": {"task_id": "ainilili_ratel/235", "ground_truth": "\n\t\tif (args != null && args.length > 0) {\n\t\t\tfor (int index = 0; index < args.length; index = index + 2) {\n\t\t\t\tif (index + 1 < args.length) {\n\t\t\t\t\tif (args[index].equalsIgnoreCase(\"-p\") || args[index].equalsIgnoreCase(\"-port\")) {\n\t\t\t\t\t\tport = Integer.parseInt(args[index + 1]);\n\t\t\t\t\t}\n\t\t\t\t\tif (args[index].equalsIgnoreCase(\"-h\") || args[index].equalsIgnoreCase(\"-host\")) {\n\t\t\t\t\t\tserverAddress = args[index + 1];\n\t\t\t\t\t}\n\t\t\t\t\tif (args[index].equalsIgnoreCase(\"-ptl\") || args[index].equalsIgnoreCase(\"-protocol\")) {\n\t\t\t\t\t\tprotocol = args[index + 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (serverAddress == null) {\n\t\t\tList<String> serverAddressList = getServerAddressList();\n\t\t\tif (serverAddressList == null || serverAddressList.size() == 0) {\n\t\t\t\tthrow new RuntimeException(\"Please use '-host' to setting server address.\");\n\t\t\t}\n\n\t\t\tSimplePrinter.printNotice(\"Please select a server:\");\n\t\t\tfor (int i = 0; i < serverAddressList.size(); i++) {\n\t\t\t\tSimplePrinter.printNotice((i + 1) + \". \" + serverAddressList.get(i));\n\t\t\t}\n\t\t\tint serverPick = Integer.parseInt(SimpleWriter.write(User.INSTANCE.getNickname(), \"option\"));\n\t\t\twhile (serverPick < 1 || serverPick > serverAddressList.size()) {\n\t\t\t\ttry {\n\t\t\t\t\tSimplePrinter.printNotice(\"The server address does not exist!\");\n\t\t\t\t\tserverPick = Integer.parseInt(SimpleWriter.write(User.INSTANCE.getNickname(), \"option\"));\n\t\t\t\t} catch (NumberFormatException ignore) {}\n\t\t\t}\n\t\t\tserverAddress = serverAddressList.get(serverPick - 1);\n\t\t\tString[] elements = serverAddress.split(\":\");\n\t\t\tserverAddress = elements[0];\n\t\t\tport = Integer.parseInt(elements[1]);\n\t\t}\n\n\t\tif (Objects.equals(protocol, \"pb\")) {\n\t\t\tnew ProtobufProxy().connect(serverAddress, port);\n\t\t} else if (Objects.equals(protocol, \"ws\")) {\n\t\t\tnew WebsocketProxy().connect(serverAddress, port + 1);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported protocol \" + protocol);\n\t\t}\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "SimpleClient.java"], "context_start_lineno": 0, "function_name": "main", "left_context": "class SimpleClient {\n\n\tpublic static int id = -1;\n\n\tpublic final static String VERSION = Features.VERSION_1_3_0;\n\n\tpublic static String serverAddress;\n\n\tpublic static int port = 1024;\n\n\tpublic static String protocol = \"pb\";\n\n\tprivate final static String[] serverAddressSource = new String[]{\n\t\t\t\"https://raw.githubusercontent.com/ainilili/ratel/master/serverlist.json\",\t\t\t//Source\n\t\t\t\"https://cdn.jsdelivr.net/gh/ainilili/ratel@master/serverlist.json\",\t\t\t\t//CN CDN\n\t\t\t\"https://raw.fastgit.org/ainilili/ratel/master/serverlist.json\",\t\t\t\t//HongKong CDN\n\t\t\t\"https://cdn.staticaly.com/gh/ainilili/ratel/master/serverlist.json\",\t\t\t\t//Japanese CDN\n\t\t\t\"https://ghproxy.com/https://raw.githubusercontent.com/ainilili/ratel/master/serverlist.json\",\t//Korea CDN\n\t\t\t\"https://gitee.com/ainilili/ratel/raw/master/serverlist.json\"\t\t\t\t\t//CN Gitee\n\t};\n\n\tpublic static void main(String[] args) throws InterruptedException, IOException, URISyntaxException {", "right_context": "}\n\n\tprivate static List<String> getServerAddressList() {\n\t\tfor (String serverAddressSource : serverAddressSource) {\n\t\t\ttry {\n\t\t\t\tString serverInfo = StreamUtils.convertToString(new URL(serverAddressSource));\n\t\t\t\treturn Noson.convert(serverInfo, new NoType<List<String>>() {});\n\t\t\t} catch (IOException e) {\n\t\t\t\tSimplePrinter.printNotice(\"Try connected \" + serverAddressSource + \" failed: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}", "class_name": "SimpleClient", "return_type": "void", "parameters": [{"type": "String[]", "name": "args"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/JsonUtils.java\n// --------------------------------------------------\n// public static <T>T fromJson(String json,Class<T> clazz){\n//   return GSON.fromJson(json,clazz);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TransferProtocolUtils {\n\n\n\t/**\n\t * A protocol header that represents the beginning of an available stream of data\n\t */\n\tpublic static final byte PROTOCOL_HAED = \"#\".getBytes()[0];\n\n\t/**\n\t * The end of the protocol used to represent the end of an available stream of data\n\t */\n\tpublic static final byte PROTOCOL_TAIL = \"$\".getBytes()[0];\n\n\t/**\n\t * Serialize the poker list to transportable bytes\n\t *\n\t * @param obj Poker list\n\t * @return Transportable byte array\n\t */\n\tpublic static byte[] serialize(Object obj) {\n\t\tByteLink bl = new ByteLink();\n\t\tbl.append(PROTOCOL_HAED);\n\t\tbl.append(Noson.reversal(obj).getBytes());\n\t\tbl.append(PROTOCOL_TAIL);\n\t\treturn bl.toArray();\n\t}\n\n\t/**\n\t * Deserialize the byte stream as an object\n\t *\n\t * @param bytes Byte array\n\t * @return Genericity\n\t */\n\tpublic static <T> T unserialize(byte[] bytes, Class<T> clazz) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "ainilili_ratel/289", "ground_truth": "\n\t\tByteKit bk = new ByteKit(bytes);\n\t\tint start = -1;\n\t\tint end = -1;\n\n\t\tint index = bk.indexOf(PROTOCOL_HAED, 0);\n\t\tif (index != -1) start = index + 1;\n\n\t\tindex = bk.indexOf(PROTOCOL_TAIL, 0);\n\t\tif (index != -1) end = index;\n\n\t\tif (start != -1 && end != -1 && start > end) {\n\t\t\tthrow new LandlordException(\"Message format error, head and tail error.\");\n\t\t} else {\n\t\t\tbyte[] content = new byte[end - start];\n\t\t\tSystem.arraycopy(bytes, start, content, 0, content.length);\n\t\t\treturn Noson.convert(new String(content), clazz);\n\t\t}\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-common", "src", "main", "java", "org", "nico", "ratel", "landlords", "transfer", "TransferProtocolUtils.java"], "context_start_lineno": 0, "function_name": "unserialize", "left_context": "class TransferProtocolUtils {\n\n\n\t/**\n\t * A protocol header that represents the beginning of an available stream of data\n\t */\n\tpublic static final byte PROTOCOL_HAED = \"#\".getBytes()[0];\n\n\t/**\n\t * The end of the protocol used to represent the end of an available stream of data\n\t */\n\tpublic static final byte PROTOCOL_TAIL = \"$\".getBytes()[0];\n\n\t/**\n\t * Serialize the poker list to transportable bytes\n\t *\n\t * @param obj Poker list\n\t * @return Transportable byte array\n\t */\n\tpublic static byte[] serialize(Object obj) {\n\t\tByteLink bl = new ByteLink();\n\t\tbl.append(PROTOCOL_HAED);\n\t\tbl.append(Noson.reversal(obj).getBytes());\n\t\tbl.append(PROTOCOL_TAIL);\n\t\treturn bl.toArray();\n\t}\n\n\t/**\n\t * Deserialize the byte stream as an object\n\t *\n\t * @param bytes Byte array\n\t * @return Genericity\n\t */\n\tpublic static <T> T unserialize(byte[] bytes, Class<T> clazz) {", "right_context": "}\n\n}", "class_name": "TransferProtocolUtils", "return_type": "T", "parameters": [{"type": "byte[]", "name": "bytes"}, {"type": "Class<T>", "name": "clazz"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServerEventListener_CODE_ROOM_JOIN implements ServerEventListener {\n\n\t@Override\n\tpublic void call(ClientSide clientSide, String data) {<FILL_FUNCTION_BODY>}\n\n\t/**\n\t * \u901a\u77e5\u89c2\u6218\u8005\u73a9\u5bb6\u52a0\u5165\u623f\u95f4\n\t *\n\t * @param room\t\u623f\u95f4\n\t * @param clientSide\t\u73a9\u5bb6\n\t */\n\tprivate void notifyWatcherJoinRoom(Room room, ClientSide clientSide) {\n\t\tfor (ClientSide watcher : room.getWatcherList()) {\n\t\t\tChannelUtils.pushToClient(watcher.getChannel(), ClientEventCode.CODE_ROOM_JOIN_SUCCESS, clientSide.getNickname());\n\t\t}\n\t}\n}", "metadata": {"task_id": "ainilili_ratel/301", "ground_truth": "\n\n\t\tRoom room = ServerContains.getRoom(Integer.parseInt(data));\n\n\t\tif (room == null) {\n\t\t\tString result = MapHelper.newInstance()\n\t\t\t\t\t.put(\"roomId\", data)\n\t\t\t\t\t.json();\n\t\t\tChannelUtils.pushToClient(clientSide.getChannel(), ClientEventCode.CODE_ROOM_JOIN_FAIL_BY_INEXIST, result);\n\t\t\treturn;\n\t\t}\n\t\tif (room.getClientSideList().size() == 3) {\n\t\t\tString result = MapHelper.newInstance()\n\t\t\t\t\t.put(\"roomId\", room.getId())\n\t\t\t\t\t.put(\"roomOwner\", room.getRoomOwner())\n\t\t\t\t\t.json();\n\t\t\tChannelUtils.pushToClient(clientSide.getChannel(), ClientEventCode.CODE_ROOM_JOIN_FAIL_BY_FULL, result);\n\t\t\treturn;\n\t\t}\n\t\t// join default ready\n\t\tclientSide.setStatus(ClientStatus.READY);\n\t\tclientSide.setRoomId(room.getId());\n\n\t\tConcurrentSkipListMap<Integer, ClientSide> roomClientMap = (ConcurrentSkipListMap<Integer, ClientSide>) room.getClientSideMap();\n\t\tLinkedList<ClientSide> roomClientList = room.getClientSideList();\n\n\t\tif (roomClientList.size() > 0) {\n\t\t\tClientSide pre = roomClientList.getLast();\n\t\t\tpre.setNext(clientSide);\n\t\t\tclientSide.setPre(pre);\n\t\t}\n\n\t\troomClientList.add(clientSide);\n\t\troomClientMap.put(clientSide.getId(), clientSide);\n\t\troom.setStatus(RoomStatus.WAIT);\n\t\tString result = MapHelper.newInstance()\n\t\t\t\t.put(\"clientId\", clientSide.getId())\n\t\t\t\t.put(\"clientNickname\", clientSide.getNickname())\n\t\t\t\t.put(\"roomId\", room.getId())\n\t\t\t\t.put(\"roomOwner\", room.getRoomOwner())\n\t\t\t\t.put(\"roomClientCount\", room.getClientSideList().size())\n\t\t\t\t.json();\n\t\tfor (ClientSide client : roomClientMap.values()) {\n\t\t\tChannelUtils.pushToClient(client.getChannel(), ClientEventCode.CODE_ROOM_JOIN_SUCCESS, result);\n\t\t}\n\n\t\tif (roomClientMap.size() == 3) {\n\t\t\tclientSide.setNext(roomClientList.getFirst());\n\t\t\troomClientList.getFirst().setPre(clientSide);\n\n\t\t\tServerEventListener.get(ServerEventCode.CODE_GAME_STARTING).call(clientSide, String.valueOf(room.getId()));\n\t\t\treturn;\n\t\t}\n\n\t\tnotifyWatcherJoinRoom(room, clientSide);\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-server", "src", "main", "java", "org", "nico", "ratel", "landlords", "server", "event", "ServerEventListener_CODE_ROOM_JOIN.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ServerEventListener_CODE_ROOM_JOIN implements ServerEventListener {\n\n\t@Override\n\tpublic void call(ClientSide clientSide, String data) {", "right_context": "}\n\n\t/**\n\t * \u901a\u77e5\u89c2\u6218\u8005\u73a9\u5bb6\u52a0\u5165\u623f\u95f4\n\t *\n\t * @param room\t\u623f\u95f4\n\t * @param clientSide\t\u73a9\u5bb6\n\t */\n\tprivate void notifyWatcherJoinRoom(Room room, ClientSide clientSide) {\n\t\tfor (ClientSide watcher : room.getWatcherList()) {\n\t\t\tChannelUtils.pushToClient(watcher.getChannel(), ClientEventCode.CODE_ROOM_JOIN_SUCCESS, clientSide.getNickname());\n\t\t}\n\t}\n}", "class_name": "ServerEventListener_CODE_ROOM_JOIN", "return_type": "void", "parameters": [{"type": "ClientSide", "name": "clientSide"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_SHOW_OPTIONS_PVP extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n\n\tprivate void parseInvalid(Channel channel, String data) {\n\t\tSimplePrinter.printNotice(\"Invalid options, please choose again\uff1a\");\n\t\tcall(channel, data);\n\t}\n\n\tprivate void handleJoinRoom(Channel channel, String data) {\n\t\thandleJoinRoom(channel, data, false);\n\t}\n\n\tprivate void handleJoinRoom(Channel channel, String data, Boolean watchMode) {\n\t\tString notice = String.format(\"Please enter the room id you want to %s (enter [back|b] return options list)\", watchMode ? \"spectate\" : \"join\");\n\n\t\tSimplePrinter.printNotice(notice);\n\t\tString line = SimpleWriter.write(User.INSTANCE.getNickname(), \"roomid\");\n\t\tif (line == null) {\n\t\t\tparseInvalid(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tif (line.equalsIgnoreCase(\"BACK\") || line.equalsIgnoreCase(\"b\")) {\n\t\t\tcall(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tint option = OptionsUtils.getOptions(line);\n\t\tif (option < 1) {\n\t\t\tparseInvalid(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tpushToServer(channel, watchMode? ServerEventCode.CODE_GAME_WATCH : ServerEventCode.CODE_ROOM_JOIN, String.valueOf(option));\n\t}\n}", "metadata": {"task_id": "ainilili_ratel/311", "ground_truth": "\n\t\tSimplePrinter.printNotice(\"PVP: \");\n\t\tSimplePrinter.printNotice(\"1. Create Room\");\n\t\tSimplePrinter.printNotice(\"2. Room List\");\n\t\tSimplePrinter.printNotice(\"3. Join Room\");\n\t\tSimplePrinter.printNotice(\"4. Spectate Game\");\n\t\tSimplePrinter.printNotice(\"Please select an option above (enter [back|b] to return to options list)\");\n\t\tString line = SimpleWriter.write(User.INSTANCE.getNickname(), \"pvp\");\n\t\tif (line == null) {\n\t\t\tSimplePrinter.printNotice(\"Invalid options, please choose again\uff1a\");\n\t\t\tcall(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tif (line.equalsIgnoreCase(\"BACK\") || line.equalsIgnoreCase(\"b\")) {\n\t\t\tget(ClientEventCode.CODE_SHOW_OPTIONS).call(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tint choose = OptionsUtils.getOptions(line);\n\t\tswitch (choose) {\n\t\t\tcase 1:\n\t\t\t\tpushToServer(channel, ServerEventCode.CODE_ROOM_CREATE, null);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tpushToServer(channel, ServerEventCode.CODE_GET_ROOMS, null);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\thandleJoinRoom(channel, data);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\thandleJoinRoom(channel, data, true);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSimplePrinter.printNotice(\"Invalid option, please choose again\uff1a\");\n\t\t\t\tcall(channel, data);\n\t\t}\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_SHOW_OPTIONS_PVP.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_SHOW_OPTIONS_PVP extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {", "right_context": "}\n\n\tprivate void parseInvalid(Channel channel, String data) {\n\t\tSimplePrinter.printNotice(\"Invalid options, please choose again\uff1a\");\n\t\tcall(channel, data);\n\t}\n\n\tprivate void handleJoinRoom(Channel channel, String data) {\n\t\thandleJoinRoom(channel, data, false);\n\t}\n\n\tprivate void handleJoinRoom(Channel channel, String data, Boolean watchMode) {\n\t\tString notice = String.format(\"Please enter the room id you want to %s (enter [back|b] return options list)\", watchMode ? \"spectate\" : \"join\");\n\n\t\tSimplePrinter.printNotice(notice);\n\t\tString line = SimpleWriter.write(User.INSTANCE.getNickname(), \"roomid\");\n\t\tif (line == null) {\n\t\t\tparseInvalid(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tif (line.equalsIgnoreCase(\"BACK\") || line.equalsIgnoreCase(\"b\")) {\n\t\t\tcall(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tint option = OptionsUtils.getOptions(line);\n\t\tif (option < 1) {\n\t\t\tparseInvalid(channel, data);\n\t\t\treturn;\n\t\t}\n\n\t\tpushToServer(channel, watchMode? ServerEventCode.CODE_GAME_WATCH : ServerEventCode.CODE_ROOM_JOIN, String.valueOf(option));\n\t}\n}", "class_name": "ClientEventListener_CODE_SHOW_OPTIONS_PVP", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_GAME_LANDLORD_ELECT extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "ainilili_ratel/324", "ground_truth": "\n\t\tMap<String, Object> map = MapHelper.parser(data);\n\t\tint turnClientId = (int) map.get(\"nextClientId\");\n\t\tint highestScore = (int) map.get(\"highestScore\");\n\t\tif (map.containsKey(\"preClientNickname\")) {\n\t\t\tif (highestScore != 0 && map.get(\"preClientId\") == map.get(\"currentLandlordId\")) {\n\t\t\t\tSimplePrinter.printNotice(map.get(\"preClientNickname\") + \" robs the landlord with \" + highestScore + \" score\" + (highestScore == 1 ? \"\" : \"s\") + \"!\");\n\t\t\t} else {\n\t\t\t\tSimplePrinter.printNotice(map.get(\"preClientNickname\") + \" don't rob the landlord!\");\n\t\t\t}\n\t\t}\n\n\t\tif (turnClientId != SimpleClient.id) {\n\t\t\tSimplePrinter.printNotice(\"It's \" + map.get(\"nextClientNickname\") + \"'s turn. Please wait patiently for his/her confirmation !\");\n\t\t} else {\n\t\t\tString message = \"It's your turn. What score do you want to rob the landlord? [0\";\n\n\t\t\tfor(int i = highestScore + 1; i <= 3; ++i) {\n\t\t\t\tmessage = message + \"/\" + i;\n\t\t\t}\n\n\t\t\tmessage = message + \"] (enter [exit|e] to exit current room)\";\n\t\t\tSimplePrinter.printNotice(message);\n\t\t\tString line = SimpleWriter.write(\"getScore\");\n\t\t\tif (!line.equalsIgnoreCase(\"exit\") && !line.equalsIgnoreCase(\"e\")) {\n\t\t\t\ttry {\n\t\t\t\t\tint currentScore = Integer.parseInt(line);\n\t\t\t\t\tif (currentScore <= highestScore && currentScore != 0 || currentScore > 3) {\n\t\t\t\t\t\tSimplePrinter.printNotice(\"Invalid options\");\n\t\t\t\t\t\tthis.call(channel, data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tString result;\n\t\t\t\t\tif (currentScore > highestScore) {\n\t\t\t\t\t\tresult = MapHelper.newInstance()\n\t\t\t\t\t\t\t.put(\"highestScore\", currentScore)\n\t\t\t\t\t\t\t.put(\"currentLandlordId\", SimpleClient.id)\n\t\t\t\t\t\t\t.json();\n\t\t\t\t\t} else if (map.containsKey(\"currentLandlordId\")) {\n\t\t\t\t\t\tresult = MapHelper.newInstance()\n\t\t\t\t\t\t\t.put(\"highestScore\", highestScore)\n\t\t\t\t\t\t\t.put(\"currentLandlordId\", (int) map.get(\"currentLandlordId\"))\n\t\t\t\t\t\t\t.json();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = MapHelper.newInstance()\n\t\t\t\t\t\t\t.put(\"highestScore\", 0)\n\t\t\t\t\t\t\t.json();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.pushToServer(channel, ServerEventCode.CODE_GAME_LANDLORD_ELECT, result);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSimplePrinter.printNotice(\"Invalid options\");\n\t\t\t\t\tthis.call(channel, data);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.pushToServer(channel, ServerEventCode.CODE_CLIENT_EXIT);\n\t\t\t}\n\t\t}\n\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_GAME_LANDLORD_ELECT.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_GAME_LANDLORD_ELECT extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {", "right_context": "}\n\n}", "class_name": "ClientEventListener_CODE_GAME_LANDLORD_ELECT", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_CLIENT_EXIT extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "ainilili_ratel/329", "ground_truth": "\n\t\tMap<String, Object> map = MapHelper.parser(data);\n\n\t\tInteger exitClientId = (Integer) map.get(\"exitClientId\");\n\n\t\tString role;\n\t\tif (exitClientId == SimpleClient.id) {\n\t\t\trole = \"You\";\n\t\t} else {\n\t\t\trole = String.valueOf(map.get(\"exitClientNickname\"));\n\t\t}\n\t\tSimplePrinter.printNotice(role + \" left the room. Room disbanded!\\n\");\n\t\t\n\t\tget(ClientEventCode.CODE_SHOW_OPTIONS).call(channel, data);\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_CLIENT_EXIT.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_CLIENT_EXIT extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {", "right_context": "}\n}", "class_name": "ClientEventListener_CODE_CLIENT_EXIT", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServerEventListener_CODE_CLIENT_EXIT implements ServerEventListener {\n\n\tprivate static final Object locked = new Object();\n\n\t@Override\n\tpublic void call(ClientSide clientSide, String data) {\n\t\tsynchronized (locked){\n\t\t\tRoom room = ServerContains.getRoom(clientSide.getRoomId());\n\t\t\tif (room == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString result = MapHelper.newInstance()\n\t\t\t\t\t.put(\"roomId\", room.getId())\n\t\t\t\t\t.put(\"exitClientId\", clientSide.getId())\n\t\t\t\t\t.put(\"exitClientNickname\", clientSide.getNickname())\n\t\t\t\t\t.json();\n\t\t\tfor (ClientSide client : room.getClientSideList()) {\n\t\t\t\tif (client.getRole() == ClientRole.PLAYER) {\n\t\t\t\t\tChannelUtils.pushToClient(client.getChannel(), ClientEventCode.CODE_CLIENT_EXIT, result);\n\t\t\t\t\tclient.init();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnotifyWatcherClientExit(room, clientSide);\n\t\t\tServerContains.removeRoom(room.getId());\n\t\t}\n\t}\n\n\t/**\n\t * \u901a\u77e5\u6240\u6709\u89c2\u6218\u8005\u73a9\u5bb6\u9000\u51fa\u6e38\u620f\n\t *\n\t * @param room \u623f\u95f4\n\t * @param player \u9000\u51fa\u6e38\u620f\u73a9\u5bb6\n\t */\n\tprivate void notifyWatcherClientExit(Room room, ClientSide player) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "ainilili_ratel/349", "ground_truth": "\n\t\tfor (ClientSide watcher : room.getWatcherList()) {\n\t\t\tChannelUtils.pushToClient(watcher.getChannel(), ClientEventCode.CODE_CLIENT_EXIT, player.getNickname());\n\t\t}\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-server", "src", "main", "java", "org", "nico", "ratel", "landlords", "server", "event", "ServerEventListener_CODE_CLIENT_EXIT.java"], "context_start_lineno": 0, "function_name": "notifyWatcherClientExit", "left_context": "class ServerEventListener_CODE_CLIENT_EXIT implements ServerEventListener {\n\n\tprivate static final Object locked = new Object();\n\n\t@Override\n\tpublic void call(ClientSide clientSide, String data) {\n\t\tsynchronized (locked){\n\t\t\tRoom room = ServerContains.getRoom(clientSide.getRoomId());\n\t\t\tif (room == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString result = MapHelper.newInstance()\n\t\t\t\t\t.put(\"roomId\", room.getId())\n\t\t\t\t\t.put(\"exitClientId\", clientSide.getId())\n\t\t\t\t\t.put(\"exitClientNickname\", clientSide.getNickname())\n\t\t\t\t\t.json();\n\t\t\tfor (ClientSide client : room.getClientSideList()) {\n\t\t\t\tif (client.getRole() == ClientRole.PLAYER) {\n\t\t\t\t\tChannelUtils.pushToClient(client.getChannel(), ClientEventCode.CODE_CLIENT_EXIT, result);\n\t\t\t\t\tclient.init();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnotifyWatcherClientExit(room, clientSide);\n\t\t\tServerContains.removeRoom(room.getId());\n\t\t}\n\t}\n\n\t/**\n\t * \u901a\u77e5\u6240\u6709\u89c2\u6218\u8005\u73a9\u5bb6\u9000\u51fa\u6e38\u620f\n\t *\n\t * @param room \u623f\u95f4\n\t * @param player \u9000\u51fa\u6e38\u620f\u73a9\u5bb6\n\t */\n\tprivate void notifyWatcherClientExit(Room room, ClientSide player) {", "right_context": "}\n}", "class_name": "ServerEventListener_CODE_CLIENT_EXIT", "return_type": "void", "parameters": [{"type": "Room", "name": "room"}, {"type": "ClientSide", "name": "player"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ClientEventListener_CODE_GAME_POKER_PLAY extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "ainilili_ratel/364", "ground_truth": "\n\t\tMap<String, Object> map = MapHelper.parser(data);\n\n\t\tSimplePrinter.printNotice(\"It's your turn to play, your cards are as follows: \");\n\t\tList<Poker> pokers = Noson.convert(map.get(\"pokers\"), new NoType<List<Poker>>() {\n\t\t});\n\t\tSimplePrinter.printPokers(pokers);\n\t\tSimplePrinter.printNotice(\"Last cards are\");\n\t\tSimplePrinter.printNotice(map.containsKey(\"lastPokers\")?map.get(\"lastPokers\").toString():\"\");\n\n\t\tSimplePrinter.printNotice(\"Please enter the combination you came up with (enter [exit|e] to exit current room, enter [pass|p] to jump current round, enter [view|v] to show all valid combinations.)\");\n\t\tString line = SimpleWriter.write(User.INSTANCE.getNickname(), \"combination\");\n\n\t\tif (line == null) {\n\t\t\tSimplePrinter.printNotice(\"Invalid enter\");\n\t\t\tcall(channel, data);\n\t\t} else {\n\t\t\tif (line.equalsIgnoreCase(\"pass\") || line.equalsIgnoreCase(\"p\")) {\n\t\t\t\tpushToServer(channel, ServerEventCode.CODE_GAME_POKER_PLAY_PASS);\n\t\t\t} else if (line.equalsIgnoreCase(\"exit\") || line.equalsIgnoreCase(\"e\")) {\n\t\t\t\tpushToServer(channel, ServerEventCode.CODE_CLIENT_EXIT);\n\t\t\t} else if (line.equalsIgnoreCase(\"view\") || line.equalsIgnoreCase(\"v\")) {\n\t\t\t\tif (!map.containsKey(\"lastSellPokers\") || !map.containsKey(\"lastSellClientId\")) {\n\t\t\t\t\tSimplePrinter.printNotice(\"Current server version unsupport this feature, need more than v1.2.4.\");\n\t\t\t\t\tcall(channel, data);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tObject lastSellPokersObj = map.get(\"lastSellPokers\");\n\t\t\t\tif (lastSellPokersObj == null || Integer.valueOf(SimpleClient.id).equals(map.get(\"lastSellClientId\"))) {\n\t\t\t\t\tSimplePrinter.printNotice(\"Up to you !\");\n\t\t\t\t\tcall(channel, data);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tList<Poker> lastSellPokers = Noson.convert(lastSellPokersObj, new NoType<List<Poker>>() {});\n\t\t\t\t\tList<PokerSell> sells = PokerHelper.validSells(PokerHelper.checkPokerType(lastSellPokers), pokers);\n\t\t\t\t\tif (sells.size() == 0) {\n\t\t\t\t\t\tSimplePrinter.printNotice(\"It is a pity that, there is no winning combination...\");\n\t\t\t\t\t\tcall(channel, data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < sells.size(); i++) {\n\t\t\t\t\t\tSimplePrinter.printNotice(i + 1 + \". \" + PokerHelper.textOnlyNoType(sells.get(i).getSellPokers()));\n\t\t\t\t\t}\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tSimplePrinter.printNotice(\"You can enter index to choose anyone.(enter [back|b] to go back.)\");\n\t\t\t\t\t\tline = SimpleWriter.write(User.INSTANCE.getNickname(), \"choose\");\n\t\t\t\t\t\tif (line.equalsIgnoreCase(\"back\") || line.equalsIgnoreCase(\"b\")) {\n\t\t\t\t\t\t\tcall(channel, data);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tint choose = Integer.valueOf(line);\n\t\t\t\t\t\t\t\tif (choose < 1 || choose > sells.size()) {\n\t\t\t\t\t\t\t\t\tSimplePrinter.printNotice(\"The input number must be in the range of 1 to \" + sells.size() + \".\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tList<Poker> choosePokers = sells.get(choose - 1).getSellPokers();\n\t\t\t\t\t\t\t\t\tList<Character> options = new ArrayList<>();\n\t\t\t\t\t\t\t\t\tfor (Poker poker : choosePokers) {\n\t\t\t\t\t\t\t\t\t\toptions.add(poker.getLevel().getAlias()[0]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpushToServer(channel, ServerEventCode.CODE_GAME_POKER_PLAY, Noson.reversal(options.toArray(new Character[]{})));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t\t\tSimplePrinter.printNotice(\"Please input a number.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n//\t\t\t\tPokerHelper.validSells(lastPokerSell, pokers);\n\t\t\t} else {\n\t\t\t\tString[] strs = line.split(\" \");\n\t\t\t\tList<Character> options = new ArrayList<>();\n\t\t\t\tboolean access = true;\n\t\t\t\tfor (int index = 0; index < strs.length; index++) {\n\t\t\t\t\tString str = strs[index];\n\t\t\t\t\tfor (char c : str.toCharArray()) {\n\t\t\t\t\t\tif (c == ' ' || c == '\\t') {\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!PokerLevel.aliasContains(c)) {\n\t\t\t\t\t\t\t\taccess = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\toptions.add(c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (access) {\n\t\t\t\t\tpushToServer(channel, ServerEventCode.CODE_GAME_POKER_PLAY, Noson.reversal(options.toArray(new Character[]{})));\n\t\t\t\t} else {\n\t\t\t\t\tSimplePrinter.printNotice(\"Invalid enter\");\n\n\t\t\t\t\tif (lastPokers != null) {\n\t\t\t\t\t\tSimplePrinter.printNotice(lastSellClientNickname + \"[\" + lastSellClientType + \"] played:\");\n\t\t\t\t\t\tSimplePrinter.printPokers(lastPokers);\n\t\t\t\t\t}\n\n\t\t\t\t\tcall(channel, data);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-client", "src", "main", "java", "org", "nico", "ratel", "landlords", "client", "event", "ClientEventListener_CODE_GAME_POKER_PLAY.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ClientEventListener_CODE_GAME_POKER_PLAY extends ClientEventListener {\n\n\t@Override\n\tpublic void call(Channel channel, String data) {", "right_context": "}\n\n}", "class_name": "ClientEventListener_CODE_GAME_POKER_PLAY", "return_type": "void", "parameters": [{"type": "Channel", "name": "channel"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServerEventListener_CODE_CLIENT_INFO_SET implements ServerEventListener {\n\n\tprivate static final String DEFAULT_VERSION = \"v1.2.8\";\n\n\t@Override\n\tpublic void call(ClientSide client, String info) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "ainilili_ratel/441", "ground_truth": "\n\t\tMap<?,?> infos = JsonUtils.fromJson(info, Map.class);\n\t\t// Get client version\n\t\tclient.setVersion(DEFAULT_VERSION);\n\t\tif (infos.containsKey(\"version\")){\n\t\t\tclient.setVersion(String.valueOf(infos.get(\"version\")));\n\t\t}\n\t", "fpath_tuple": ["ainilili_ratel", "ratel", "landlords-server", "src", "main", "java", "org", "nico", "ratel", "landlords", "server", "event", "ServerEventListener_CODE_CLIENT_INFO_SET.java"], "context_start_lineno": 0, "function_name": "call", "left_context": "class ServerEventListener_CODE_CLIENT_INFO_SET implements ServerEventListener {\n\n\tprivate static final String DEFAULT_VERSION = \"v1.2.8\";\n\n\t@Override\n\tpublic void call(ClientSide client, String info) {", "right_context": "}\n\n}", "class_name": "ServerEventListener_CODE_CLIENT_INFO_SET", "return_type": "void", "parameters": [{"type": "ClientSide", "name": "client"}, {"type": "String", "name": "info"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u56de\u8c03\n//  * @param request\n//  * @return\n//  */\n// PayResponse syncNotify(HttpServletRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u56de\u8c03\n//  * @param notifyData\n//  * @return\n//  */\n// PayResponse asyncNotify(String notifyData);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u8fd4\u56de\n//  * @param request\n//  * @return\n//  */\n// @Override public PayResponse syncNotify(HttpServletRequest request){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u56de\u8c03\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   if (notifyData.startsWith(\"<xml>\")) {\n//     WxPayServiceImpl wxPayService=new WxPayServiceImpl();\n//     wxPayService.setWxPayConfig(this.wxPayConfig);\n//     return wxPayService.asyncNotify(notifyData);\n//   }\n//  else {\n//     AliPayServiceImpl aliPayService=new AliPayServiceImpl();\n//     aliPayService.setAliPayConfig(aliPayConfig);\n//     return aliPayService.asyncNotify(notifyData);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse syncNotify(HttpServletRequest request){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u901a\u77e5\n//  * @param notifyData\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   if (!WxPaySignature.verify(XmlUtil.toMap(notifyData),wxPayConfig.getMchKey())) {\n//     log.error(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\",notifyData);\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n//   }\n//   WxPayAsyncResponse asyncResponse=(WxPayAsyncResponse)XmlUtil.toObject(notifyData,WxPayAsyncResponse.class);\n//   if (!asyncResponse.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + asyncResponse.getReturnMsg());\n//   }\n//   if (!asyncResponse.getResultCode().equals(WxPayConstants.SUCCESS) && asyncResponse.getErrCode().equals(\"ORDERPAID\")) {\n//     return buildPayResponse(asyncResponse);\n//   }\n//   if (!asyncResponse.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + asyncResponse.getErrCode() + \" err_code_des=\"+ asyncResponse.getErrCodeDes());\n//   }\n//   return buildPayResponse(asyncResponse);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// private PayResponse buildPayResponse(WxPayAsyncResponse response){\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setReturnCode(response.getReturnCode());\n//   payResponse.setReturnMsg(response.getReturnMsg());\n//   payResponse.setResultCode(response.getResultCode());\n//   payResponse.setErrCode(response.getErrCode());\n//   payResponse.setErrCodeDes(response.getErrCodeDes());\n//   payResponse.setPayPlatformEnum(BestPayPlatformEnum.WX);\n//   payResponse.setOrderAmount(MoneyUtil.Fen2Yuan(response.getTotalFee()));\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   payResponse.setOutTradeNo(response.getTransactionId());\n//   payResponse.setAttach(response.getAttach());\n//   payResponse.setMwebUrl(response.getMwebUrl());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u8fd4\u56de\u7ed9h5\u7684\u53c2\u6570\n//  * @param response\n//  * @return\n//  */\n// protected PayResponse buildPayResponse(WxPaySyncResponse response){\n//   String timeStamp=String.valueOf(System.currentTimeMillis() / 1000);\n//   String nonceStr=RandomUtil.getRandomStr();\n//   String prepayId=response.getPrepayId();\n//   Map<String,String> map=new HashMap<>();\n//   String signType=\"MD5\";\n//   map.put(\"appId\",response.getAppid());\n//   map.put(\"timeStamp\",timeStamp);\n//   map.put(\"nonceStr\",nonceStr);\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setReturnCode(response.getReturnCode());\n//   payResponse.setReturnMsg(response.getReturnMsg());\n//   payResponse.setResultCode(response.getResultCode());\n//   payResponse.setErrCode(response.getErrCode());\n//   payResponse.setErrCodeDes(response.getErrCodeDes());\n//   payResponse.setAppId(response.getAppid());\n//   payResponse.setTimeStamp(timeStamp);\n//   payResponse.setNonceStr(nonceStr);\n//   payResponse.setSignType(signType);\n//   payResponse.setMwebUrl(response.getMwebUrl());\n//   payResponse.setCodeUrl(response.getCodeUrl());\n//   if (response.getTradeType().equals(BestPayTypeEnum.WXPAY_APP.getCode())) {\n//     String packAge=\"Sign=WXPay\";\n//     map.put(\"package\",packAge);\n//     map.put(\"prepayid\",prepayId);\n//     map.put(\"partnerid\",response.getMchId());\n//     payResponse.setPackAge(packAge);\n//     payResponse.setPaySign(WxPaySignature.signForApp(map,wxPayConfig.getMchKey()));\n//     payResponse.setPrepayId(prepayId);\n//     return payResponse;\n//   }\n//  else {\n//     prepayId=\"prepay_id=\" + prepayId;\n//     map.put(\"package\",prepayId);\n//     map.put(\"signType\",signType);\n//     payResponse.setPackAge(prepayId);\n//     payResponse.setPaySign(WxPaySignature.sign(map,wxPayConfig.getMchKey()));\n//     return payResponse;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u901a\u77e5\n//  * @param notifyData\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   try {\n//     notifyData=URLDecoder.decode(notifyData,\"UTF-8\");\n//   }\n//  catch (  UnsupportedEncodingException e) {\n//     e.printStackTrace();\n//   }\n//   if (!AliPaySignature.verify(MapUtil.form2Map(notifyData),aliPayConfig.getAliPayPublicKey())) {\n//     log.error(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\",notifyData);\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n//   }\n//   HashMap<String,String> params=MapUtil.form2MapWithCamelCase(notifyData);\n//   AliPayAsyncResponse response=MapUtil.mapToObject(params,AliPayAsyncResponse.class);\n//   String tradeStatus=response.getTradeStatus();\n//   if (!tradeStatus.equals(AliPayConstants.TRADE_FINISHED) && !tradeStatus.equals(AliPayConstants.TRADE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, trade_status != SUCCESS | FINISHED\");\n//   }\n//   return buildPayResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// private PayResponse buildPayResponse(AliPayAsyncResponse response){\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setPayPlatformEnum(BestPayPlatformEnum.ALIPAY);\n//   payResponse.setOrderAmount(Double.valueOf(response.getTotalAmount()));\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setAttach(response.getPassbackParams());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u53d1\u8d77\u652f\u4ed8.\n//  */\n// PayResponse pay(PayRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   Objects.requireNonNull(request,\"request params must not be null\");\n//   if (BestPayPlatformEnum.WX == request.getPayTypeEnum().getPlatform()) {\n//     WxPayServiceImpl wxPayService=new WxPayServiceImpl();\n//     wxPayService.setWxPayConfig(this.wxPayConfig);\n//     return wxPayService.pay(request);\n//   }\n//  else   if (BestPayPlatformEnum.ALIPAY == request.getPayTypeEnum().getPlatform()) {\n//     AliPayServiceImpl aliPayService=new AliPayServiceImpl();\n//     aliPayService.setAliPayConfig(aliPayConfig);\n//     return aliPayService.pay(request);\n//   }\n//   throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u65b9\u5f0f\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_MICRO) {\n//     WxPayMicroServiceImpl wxPayMicroService=new WxPayMicroServiceImpl();\n//     wxPayMicroService.setWxPayConfig(wxPayConfig);\n//     return wxPayMicroService.pay(request);\n//   }\n//   WxPayUnifiedorderRequest wxRequest=new WxPayUnifiedorderRequest();\n//   wxRequest.setOutTradeNo(request.getOrderId());\n//   wxRequest.setTotalFee(MoneyUtil.Yuan2Fen(request.getOrderAmount()));\n//   wxRequest.setBody(request.getOrderName());\n//   wxRequest.setOpenid(request.getOpenid());\n//   wxRequest.setTradeType(request.getPayTypeEnum().getCode());\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_MINI) {\n//     wxRequest.setAppid(wxPayConfig.getMiniAppId());\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_APP) {\n//     wxRequest.setAppid(wxPayConfig.getAppAppId());\n//   }\n//  else {\n//     wxRequest.setAppid(wxPayConfig.getAppId());\n//   }\n//   wxRequest.setMchId(wxPayConfig.getMchId());\n//   wxRequest.setNotifyUrl(wxPayConfig.getNotifyUrl());\n//   wxRequest.setNonceStr(RandomUtil.getRandomStr());\n//   wxRequest.setSpbillCreateIp(StringUtils.isEmpty(request.getSpbillCreateIp()) ? \"8.8.8.8\" : request.getSpbillCreateIp());\n//   wxRequest.setAttach(request.getAttach());\n//   wxRequest.setSign(WxPaySignature.sign(MapUtil.buildMap(wxRequest),wxPayConfig.getMchKey()));\n//   wxRequest.setAuthCode(\"\");\n//   RequestBody body=RequestBody.create(MediaType.parse(\"application/xml; charset=utf-8\"),XmlUtil.toString(wxRequest));\n//   WxPayApi api=null;\n//   if (wxPayConfig.isSandbox()) {\n//     api=devRetrofit.create(WxPayApi.class);\n//   }\n//  else {\n//     api=retrofit.create(WxPayApi.class);\n//   }\n//   Call<WxPaySyncResponse> call=api.unifiedorder(body);\n//   Response<WxPaySyncResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, \u7f51\u7edc\u5f02\u5e38\");\n//   }\n//   WxPaySyncResponse response=retrofitResponse.body();\n//   assert response != null;\n//   if (!response.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + response.getReturnMsg());\n//   }\n//   if (!response.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + response.getErrCode() + \" err_code_des=\"+ response.getErrCodeDes());\n//   }\n//   return buildPayResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_H5) {\n//     AlipayH5ServiceImpl alipayH5Service=new AlipayH5ServiceImpl();\n//     alipayH5Service.setAliPayConfig(aliPayConfig);\n//     return alipayH5Service.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_QRCODE) {\n//     AlipayQRCodeServiceImpl alipayQRCodeService=new AlipayQRCodeServiceImpl();\n//     alipayQRCodeService.setAliPayConfig(aliPayConfig);\n//     return alipayQRCodeService.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_BARCODE) {\n//     AlipayBarCodeServiceImpl alipayBarCodeService=new AlipayBarCodeServiceImpl();\n//     alipayBarCodeService.setAliPayConfig(aliPayConfig);\n//     return alipayBarCodeService.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_APP) {\n//     AlipayAppServiceImpl alipayAppService=new AlipayAppServiceImpl();\n//     alipayAppService.setAliPayConfig(aliPayConfig);\n//     return alipayAppService.pay(request);\n//   }\n//   Map<String,String> requestParams=new HashMap<>();\n//   requestParams.put(\"out_trade_no\",request.getOrderId());\n//   AliPayPcRequest aliPayRequest=new AliPayPcRequest();\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_PC) {\n//     requestParams.put(\"product_code\",AliPayConstants.FAST_INSTANT_TRADE_PAY);\n//     aliPayRequest.setMethod(AliPayConstants.ALIPAY_TRADE_PAGE_PAY);\n//   }\n//  else {\n//     requestParams.put(\"product_code\",AliPayConstants.QUICK_WAP_PAY);\n//     aliPayRequest.setMethod(AliPayConstants.ALIPAY_TRADE_WAP_PAY);\n//   }\n//   requestParams.put(\"total_amount\",String.valueOf(request.getOrderAmount()));\n//   requestParams.put(\"subject\",String.valueOf(request.getOrderName()));\n//   requestParams.put(\"passback_params\",request.getAttach());\n//   aliPayRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayRequest.setCharset(\"utf-8\");\n//   aliPayRequest.setSignType(AliPayConstants.SIGN_TYPE_RSA2);\n//   aliPayRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   aliPayRequest.setReturnUrl(StringUtils.isEmpty(request.getReturnUrl()) ? aliPayConfig.getReturnUrl() : request.getReturnUrl());\n//   aliPayRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayRequest.setVersion(\"1.0\");\n//   aliPayRequest.setBizContent(JsonUtil.toJson(requestParams).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayRequest),aliPayConfig.getPrivateKey()));\n//   Map<String,String> parameters=MapUtil.object2MapWithUnderline(aliPayRequest);\n//   Map<String,String> applicationParams=new HashMap<>();\n//   applicationParams.put(\"biz_content\",aliPayRequest.getBizContent());\n//   parameters.remove(\"biz_content\");\n//   String baseUrl=WebUtil.getRequestUrl(parameters,aliPayConfig.isSandbox());\n//   String body=WebUtil.buildForm(baseUrl,applicationParams);\n//   PayResponse response=new PayResponse();\n//   response.setBody(body);\n//   return response;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AlipayAppServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   AliPayTradeCreateRequest aliPayOrderQueryRequest=new AliPayTradeCreateRequest();\n//   aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_APP_PAY);\n//   aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   AliPayTradeCreateRequest.BizContent bizContent=new AliPayTradeCreateRequest.BizContent();\n//   bizContent.setOutTradeNo(request.getOrderId());\n//   bizContent.setTotalAmount(request.getOrderAmount());\n//   bizContent.setSubject(request.getOrderName());\n//   bizContent.setPassbackParams(request.getAttach());\n//   aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   String sign=AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest),aliPayConfig.getPrivateKey());\n//   aliPayOrderQueryRequest.setSign(URLEncoder.encode(sign));\n//   Map<String,String> stringStringMap=MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest);\n//   String body=MapUtil.toUrl(stringStringMap);\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setBody(body);\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AlipayBarCodeServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   AliPayTradeCreateRequest aliPayOrderQueryRequest=new AliPayTradeCreateRequest();\n//   aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_BARCODE_PAY);\n//   aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   AliPayTradeCreateRequest.BizContent bizContent=new AliPayTradeCreateRequest.BizContent();\n//   bizContent.setOutTradeNo(request.getOrderId());\n//   bizContent.setTotalAmount(request.getOrderAmount());\n//   bizContent.setSubject(request.getOrderName());\n//   bizContent.setAuthCode(request.getAuthCode());\n//   bizContent.setIsAsyncPay(true);\n//   aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayOrderQueryRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest),aliPayConfig.getPrivateKey()));\n//   Call<AliPayOrderCreateResponse> call;\n//   if (aliPayConfig.isSandbox()) {\n//     call=devRetrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   }\n//  else {\n//     call=retrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   }\n//   Response<AliPayOrderCreateResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011\u7f51\u7edc\u5f02\u5e38. alipay.trade.pay\");\n//   }\n//   assert retrofitResponse.body() != null;\n//   AliPayOrderCreateResponse.AlipayTradeCreateResponse response=retrofitResponse.body().getAlipayTradePayResponse();\n//   if (!response.getCode().equals(AliPayConstants.RESPONSE_CODE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011alipay.trade.pay. code=\" + response.getCode() + \", returnMsg=\"+ response.getMsg()+ String.format(\"|%s|%s\",response.getSubCode(),response.getSubMsg()));\n//   }\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WxPayMicroServiceImpl extends WxPayServiceImpl {\n\n    /**\n     * \u5fae\u4fe1\u4ed8\u6b3e\u7801\u652f\u4ed8\n     * \u63d0\u4ea4\u652f\u4ed8\u8bf7\u6c42\u540e\u5fae\u4fe1\u4f1a\u540c\u6b65\u8fd4\u56de\u652f\u4ed8\u7ed3\u679c\u3002\n     * \u5f53\u8fd4\u56de\u7ed3\u679c\u4e3a\u201c\u7cfb\u7edf\u9519\u8bef {@link WxPayConstants#SYSTEMERROR}\u201d\u65f6\uff0c\u5546\u6237\u7cfb\u7edf\u7b49\u5f855\u79d2\u540e\u8c03\u7528\u3010\u67e5\u8be2\u8ba2\u5355API {@link WxPayServiceImpl#query(OrderQueryRequest)}\u3011\uff0c\u67e5\u8be2\u652f\u4ed8\u5b9e\u9645\u4ea4\u6613\u7ed3\u679c\uff1b\n     * \u5f53\u8fd4\u56de\u7ed3\u679c\u4e3a\u201c\u6b63\u5728\u652f\u4ed8 {@link WxPayConstants#USERPAYING}\u201d\u65f6\uff0c\u5546\u6237\u7cfb\u7edf\u53ef\u8bbe\u7f6e\u95f4\u9694\u65f6\u95f4(\u5efa\u8bae10\u79d2)\u91cd\u65b0\u67e5\u8be2\u652f\u4ed8\u7ed3\u679c\uff0c\u76f4\u5230\u652f\u4ed8\u6210\u529f\u6216\u8d85\u65f6(\u5efa\u8bae30\u79d2)\uff1b\n     *\n     * @param request\n     * @return\n     */\n    @Override\n    public PayResponse pay(PayRequest request) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/5", "ground_truth": "\n        WxPayUnifiedorderRequest wxRequest = new WxPayUnifiedorderRequest();\n        wxRequest.setOutTradeNo(request.getOrderId());\n        wxRequest.setTotalFee(MoneyUtil.Yuan2Fen(request.getOrderAmount()));\n        wxRequest.setBody(request.getOrderName());\n        wxRequest.setOpenid(request.getOpenid());\n        wxRequest.setAuthCode(request.getAuthCode());\n\n        wxRequest.setAppid(wxPayConfig.getAppId());\n        wxRequest.setMchId(wxPayConfig.getMchId());\n        wxRequest.setNonceStr(RandomUtil.getRandomStr());\n        wxRequest.setSpbillCreateIp(StringUtils.isEmpty(request.getSpbillCreateIp()) ? \"8.8.8.8\" : request.getSpbillCreateIp());\n        wxRequest.setAttach(request.getAttach());\n        wxRequest.setSign(WxPaySignature.sign(MapUtil.buildMap(wxRequest), wxPayConfig.getMchKey()));\n\n        //\u5bf9\u4ed8\u6b3e\u7801\u652f\u4ed8\u65e0\u7528\u7684\u5b57\u6bb5\n        wxRequest.setNotifyUrl(\"\");\n        wxRequest.setTradeType(\"\");\n\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/xml; charset=utf-8\"), XmlUtil.toString(wxRequest));\n\n        WxPayApi api = null;\n        if (wxPayConfig.isSandbox()) {\n            api = devRetrofit.create(WxPayApi.class);\n        } else {\n            api = retrofit.create(WxPayApi.class);\n        }\n\n        Call<WxPaySyncResponse> call = api.micropay(body);\n\n        Response<WxPaySyncResponse> retrofitResponse = null;\n        try {\n            retrofitResponse = call.execute();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        assert retrofitResponse != null;\n        if (!retrofitResponse.isSuccessful()) {\n            throw new RuntimeException(\"\u3010\u5fae\u4fe1\u4ed8\u6b3e\u7801\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, \u7f51\u7edc\u5f02\u5e38\");\n        }\n        return buildPayResponse(retrofitResponse.body());\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "service", "impl", "wx", "WxPayMicroServiceImpl.java"], "context_start_lineno": 0, "function_name": "pay", "left_context": "class WxPayMicroServiceImpl extends WxPayServiceImpl {\n\n    /**\n     * \u5fae\u4fe1\u4ed8\u6b3e\u7801\u652f\u4ed8\n     * \u63d0\u4ea4\u652f\u4ed8\u8bf7\u6c42\u540e\u5fae\u4fe1\u4f1a\u540c\u6b65\u8fd4\u56de\u652f\u4ed8\u7ed3\u679c\u3002\n     * \u5f53\u8fd4\u56de\u7ed3\u679c\u4e3a\u201c\u7cfb\u7edf\u9519\u8bef {@link WxPayConstants#SYSTEMERROR}\u201d\u65f6\uff0c\u5546\u6237\u7cfb\u7edf\u7b49\u5f855\u79d2\u540e\u8c03\u7528\u3010\u67e5\u8be2\u8ba2\u5355API {@link WxPayServiceImpl#query(OrderQueryRequest)}\u3011\uff0c\u67e5\u8be2\u652f\u4ed8\u5b9e\u9645\u4ea4\u6613\u7ed3\u679c\uff1b\n     * \u5f53\u8fd4\u56de\u7ed3\u679c\u4e3a\u201c\u6b63\u5728\u652f\u4ed8 {@link WxPayConstants#USERPAYING}\u201d\u65f6\uff0c\u5546\u6237\u7cfb\u7edf\u53ef\u8bbe\u7f6e\u95f4\u9694\u65f6\u95f4(\u5efa\u8bae10\u79d2)\u91cd\u65b0\u67e5\u8be2\u652f\u4ed8\u7ed3\u679c\uff0c\u76f4\u5230\u652f\u4ed8\u6210\u529f\u6216\u8d85\u65f6(\u5efa\u8bae30\u79d2)\uff1b\n     *\n     * @param request\n     * @return\n     */\n    @Override\n    public PayResponse pay(PayRequest request) {", "right_context": "}\n}", "class_name": "WxPayMicroServiceImpl", "return_type": "PayResponse", "parameters": [{"type": "PayRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WxEncryptAndDecryptServiceImpl extends AbstractEncryptAndDecryptServiceImpl {\n    /**\n     * \u5bc6\u94a5\u7b97\u6cd5\n     */\n    private static final String ALGORITHM = \"AES\";\n    /**\n     * \u52a0\u89e3\u5bc6\u7b97\u6cd5/\u5de5\u4f5c\u6a21\u5f0f/\u586b\u5145\u65b9\u5f0f\n     */\n    private static final String ALGORITHM_MODE_PADDING = \"AES/ECB/PKCS5Padding\";\n\n    /**\n     * \u52a0\u5bc6\n     *\n     * @param key\n     * @param data\n     * @return\n     */\n    @Override\n    public Object encrypt(String key, String data) {\n        return super.encrypt(key, data);\n    }\n\n    /**\n     * \u89e3\u5bc6\n     * https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_16#menu1\n     *\n     * @param key\n     * @param data\n     * @return\n     */\n    @Override\n    public Object decrypt(String key, String data) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/28", "ground_truth": "\n        Security.addProvider(new BouncyCastleProvider());\n        SecretKeySpec aesKey = new SecretKeySpec(DigestUtils.md5Hex(key).toLowerCase().getBytes(), ALGORITHM);\n        Cipher cipher = null;\n        try {\n            cipher = Cipher.getInstance(ALGORITHM_MODE_PADDING);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n        try {\n            return new String(cipher.doFinal(Base64.getDecoder().decode(data)));\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "service", "impl", "WxEncryptAndDecryptServiceImpl.java"], "context_start_lineno": 0, "function_name": "decrypt", "left_context": "class WxEncryptAndDecryptServiceImpl extends AbstractEncryptAndDecryptServiceImpl {\n    /**\n     * \u5bc6\u94a5\u7b97\u6cd5\n     */\n    private static final String ALGORITHM = \"AES\";\n    /**\n     * \u52a0\u89e3\u5bc6\u7b97\u6cd5/\u5de5\u4f5c\u6a21\u5f0f/\u586b\u5145\u65b9\u5f0f\n     */\n    private static final String ALGORITHM_MODE_PADDING = \"AES/ECB/PKCS5Padding\";\n\n    /**\n     * \u52a0\u5bc6\n     *\n     * @param key\n     * @param data\n     * @return\n     */\n    @Override\n    public Object encrypt(String key, String data) {\n        return super.encrypt(key, data);\n    }\n\n    /**\n     * \u89e3\u5bc6\n     * https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_16#menu1\n     *\n     * @param key\n     * @param data\n     * @return\n     */\n    @Override\n    public Object decrypt(String key, String data) {", "right_context": "}\n}", "class_name": "WxEncryptAndDecryptServiceImpl", "return_type": "Object", "parameters": [{"type": "String", "name": "key"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass NameValuePairUtil {\n\n    /**\n     * \u5c06Map\u8f6c\u6362\u4e3aList<{@link NameValuePair}>.\n     * \n     * @param map\n     * @return\n     */\n    public static List<NameValuePair> convert(Map<String, String> map) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/31", "ground_truth": "\n        List<NameValuePair> nameValuePairs = new ArrayList<>();\n        map.forEach((key, value) -> {\n            nameValuePairs.add(new BasicNameValuePair(key, value));\n        });\n\n        return nameValuePairs;\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "utils", "NameValuePairUtil.java"], "context_start_lineno": 0, "function_name": "convert", "left_context": "class NameValuePairUtil {\n\n    /**\n     * \u5c06Map\u8f6c\u6362\u4e3aList<{@link NameValuePair}>.\n     * \n     * @param map\n     * @return\n     */\n    public static List<NameValuePair> convert(Map<String, String> map) {", "right_context": "}\n\n}", "class_name": "NameValuePairUtil", "return_type": "List<NameValuePair>", "parameters": [{"type": "Map<String,String>", "name": "map"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u8fd4\u56de\u7ed9\u4f01\u4e1a\u4ed8\u6b3e\u5230\u94f6\u884c\u5361\u7684\u53c2\u6570\n//  * @param response\n//  * @return\n//  */\n// private PayBankResponse buildPayBankResponse(WxPaySyncResponse response){\n//   return PayBankResponse.builder().returnCode(response.getReturnCode()).returnMsg(response.getReturnMsg()).resultCode(response.getResultCode()).errCode(response.getErrCode()).errCodeDes(response.getErrCodeDes()).amount(MoneyUtil.Fen2Yuan(response.getAmount())).cmmsAmt(MoneyUtil.Fen2Yuan(response.getCmmsAmt())).orderId(response.getPartnerTradeNo()).mchId(response.getMchId()).outTradeNo(response.getPaymentNo()).build();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u4f01\u4e1a\u4ed8\u6b3e\u5230\u7528\u6237\u94f6\u884c\u5361\n//  * @param request\n//  * @return\n//  */\n// PayBankResponse payBank(PayBankRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayBankResponse payBank(PayBankRequest request){\n//   WxPayBankRequest wxPayBankRequest=WxPayBankRequest.builder().mchId(wxPayConfig.getMchId()).partnerTradeNo(request.getOrderId()).encBankNo(request.getBankNo()).encTrueName(request.getTrueName()).bankCode(request.getBankCode()).amount(MoneyUtil.Yuan2Fen(request.getOrderAmount())).desc(request.getDesc()).nonceStr(RandomUtil.getRandomStr()).build();\n//   wxPayBankRequest.setSign(WxPaySignature.sign(MapUtil.buildMap(wxPayBankRequest),wxPayConfig.getMchKey()));\n//   RequestBody body=RequestBody.create(MediaType.parse(\"application/xml; charset=utf-8\"),XmlUtil.toString(wxPayBankRequest));\n//   Call<WxPaySyncResponse> call=retrofit.create(WxPayApi.class).unifiedorder(body);\n//   Response<WxPaySyncResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u4ed8\u6b3e\u5230\u7528\u6237\u3011\u53d1\u8d77\u652f\u4ed8, \u7f51\u7edc\u5f02\u5e38\");\n//   }\n//   WxPaySyncResponse response=retrofitResponse.body();\n//   assert response != null;\n//   if (!response.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u4ed8\u6b3e\u5230\u7528\u6237\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + response.getReturnMsg());\n//   }\n//   if (!response.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u4ed8\u6b3e\u5230\u7528\u6237\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + response.getErrCode() + \" err_code_des=\"+ response.getErrCodeDes());\n//   }\n//   return buildPayBankResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayBankResponse payBank(PayBankRequest request){\n//   AliPayBankRequest aliPayBankRequest=new AliPayBankRequest();\n//   aliPayBankRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayBankRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   AliPayBankRequest.BizContent bizContent=new AliPayBankRequest.BizContent();\n//   bizContent.setOutBizNo(request.getOrderId());\n//   bizContent.setProductCode(\"TRANS_BANKCARD_NO_PWD\");\n//   bizContent.setOrderTitle(request.getDesc());\n//   bizContent.setRemark(request.getDesc());\n//   AliPayBankRequest.BizContent.Participant participant=new AliPayBankRequest.BizContent.Participant();\n//   participant.setIdentity(request.getBankNo());\n//   participant.setName(request.getTrueName());\n//   participant.setIdentityType(\"BANKCARD_ACCOUNT\");\n//   AliPayBankRequest.BizContent.Participant.BankcardExtInfo bankcardExtInfo=new AliPayBankRequest.BizContent.Participant.BankcardExtInfo();\n//   bankcardExtInfo.setAccountType(2);\n//   bankcardExtInfo.setBankCode(request.getBankCode());\n//   participant.setBankcardExtInfo(bankcardExtInfo);\n//   bizContent.setPayeeInfo(participant);\n//   aliPayBankRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayBankRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayBankRequest),aliPayConfig.getPrivateKey()));\n//   Call<AliPayBankResponse> call=retrofit.create(AliPayApi.class).payBank((MapUtil.object2MapWithUnderline(aliPayBankRequest)));\n//   Response<AliPayBankResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u8f6c\u8d26\u5230\u94f6\u884c\u5361\u3011\u7f51\u7edc\u5f02\u5e38\");\n//   }\n//   assert retrofitResponse.body() != null;\n//   AliPayBankResponse.AlipayFundTransUniTransferResponse response=retrofitResponse.body().getAlipayFundTransUniTransferResponse();\n//   if (!response.getCode().equals(AliPayConstants.RESPONSE_CODE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u8f6c\u8d26\u5230\u94f6\u884c\u5361\u3011code=\" + response.getCode() + \", returnMsg=\"+ response.getMsg());\n//   }\n//   return PayBankResponse.builder().orderId(response.getOutBizNo()).outTradeNo(response.getOrderId()).payFundOrderId(response.getPayRundOrderId()).status(response.getStatus()).build();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BestPayServiceImpl implements BestPayService {\n\n    /**\n     * TODO \u91cd\u6784\n     * \u6682\u65f6\u5148\u518d\u5f15\u5165\u4e00\u4e2aconfig\n     */\n    private WxPayConfig wxPayConfig;\n    private AliPayConfig aliPayConfig;\n\n    public void setWxPayConfig(WxPayConfig wxPayConfig) {\n        this.wxPayConfig = wxPayConfig;\n    }\n\n    public void setAliPayConfig(AliPayConfig aliPayConfig) {\n        this.aliPayConfig = aliPayConfig;\n    }\n\n    @Override\n    public PayResponse pay(PayRequest request) {\n        Objects.requireNonNull(request, \"request params must not be null\");\n        //\u5fae\u4fe1\u652f\u4ed8\n        if (BestPayPlatformEnum.WX == request.getPayTypeEnum().getPlatform()) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.pay(request);\n        }\n        // \u652f\u4ed8\u5b9d\u652f\u4ed8\n        else if (BestPayPlatformEnum.ALIPAY == request.getPayTypeEnum().getPlatform()) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(aliPayConfig);\n            return aliPayService.pay(request);\n        }\n        throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u65b9\u5f0f\");\n\n    }\n\n    /**\n     * \u540c\u6b65\u8fd4\u56de\n     *\n     * @param request\n     * @return\n     */\n    @Override\n    public PayResponse syncNotify(HttpServletRequest request) {\n        return null;\n    }\n\n    @Override\n    public boolean verify(Map<String, String> toBeVerifiedParamMap, SignType signType, String sign) {\n        return false;\n    }\n\n    /**\n     * \u5f02\u6b65\u56de\u8c03\n     *\n     * @return\n     */\n    @Override\n    public PayResponse asyncNotify(String notifyData) {\n        //<xml>\u5f00\u5934\u7684\u662f\u5fae\u4fe1\u901a\u77e5\n        if (notifyData.startsWith(\"<xml>\")) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.asyncNotify(notifyData);\n        } else {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(aliPayConfig);\n            return aliPayService.asyncNotify(notifyData);\n        }\n    }\n\n    @Override\n    public RefundResponse refund(RefundRequest request) {\n        if (request.getPayPlatformEnum() == BestPayPlatformEnum.WX) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.refund(request);\n        } else if (request.getPayPlatformEnum() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.refund(request);\n        }\n        throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u5e73\u53f0\");\n    }\n\n    /**\n     * \u67e5\u8be2\u8ba2\u5355\n     *\n     * @param request\n     * @return\n     */\n    @Override\n    public OrderQueryResponse query(OrderQueryRequest request) {\n        if (request.getPlatformEnum() == BestPayPlatformEnum.WX) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.query(request);\n        } else if (request.getPlatformEnum() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.query(request);\n        }\n        throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u5e73\u53f0\");\n    }\n\n    @Override\n    public String downloadBill(DownloadBillRequest request) {\n\n        WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n        wxPayService.setWxPayConfig(this.wxPayConfig);\n\n\n        return wxPayService.downloadBill(request);\n    }\n\n    @Override\n    public String getQrCodeUrl(String productId) {\n        WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n        wxPayService.setWxPayConfig(this.wxPayConfig);\n\n        return wxPayService.getQrCodeUrl(productId);\n    }\n\n    @Override\n    public CloseResponse close(CloseRequest request) {\n        if (request.getPayTypeEnum().getPlatform() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.close(request);\n        }\n        throw new RuntimeException(\"\u5c1a\u672a\u652f\u6301\u8be5\u79cd\u652f\u4ed8\u65b9\u5f0f\");\n    }\n\n    @Override\n    public PayBankResponse payBank(PayBankRequest request) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/56", "ground_truth": "\n        if (request.getPayTypeEnum().getPlatform() == BestPayPlatformEnum.WX) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.payBank(request);\n        } else if (request.getPayTypeEnum().getPlatform() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.payBank(request);\n        }\n        throw new RuntimeException(\"\u5c1a\u672a\u652f\u6301\u8be5\u79cd\u652f\u4ed8\u65b9\u5f0f\");\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "service", "impl", "BestPayServiceImpl.java"], "context_start_lineno": 0, "function_name": "payBank", "left_context": "class BestPayServiceImpl implements BestPayService {\n\n    /**\n     * TODO \u91cd\u6784\n     * \u6682\u65f6\u5148\u518d\u5f15\u5165\u4e00\u4e2aconfig\n     */\n    private WxPayConfig wxPayConfig;\n    private AliPayConfig aliPayConfig;\n\n    public void setWxPayConfig(WxPayConfig wxPayConfig) {\n        this.wxPayConfig = wxPayConfig;\n    }\n\n    public void setAliPayConfig(AliPayConfig aliPayConfig) {\n        this.aliPayConfig = aliPayConfig;\n    }\n\n    @Override\n    public PayResponse pay(PayRequest request) {\n        Objects.requireNonNull(request, \"request params must not be null\");\n        //\u5fae\u4fe1\u652f\u4ed8\n        if (BestPayPlatformEnum.WX == request.getPayTypeEnum().getPlatform()) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.pay(request);\n        }\n        // \u652f\u4ed8\u5b9d\u652f\u4ed8\n        else if (BestPayPlatformEnum.ALIPAY == request.getPayTypeEnum().getPlatform()) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(aliPayConfig);\n            return aliPayService.pay(request);\n        }\n        throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u65b9\u5f0f\");\n\n    }\n\n    /**\n     * \u540c\u6b65\u8fd4\u56de\n     *\n     * @param request\n     * @return\n     */\n    @Override\n    public PayResponse syncNotify(HttpServletRequest request) {\n        return null;\n    }\n\n    @Override\n    public boolean verify(Map<String, String> toBeVerifiedParamMap, SignType signType, String sign) {\n        return false;\n    }\n\n    /**\n     * \u5f02\u6b65\u56de\u8c03\n     *\n     * @return\n     */\n    @Override\n    public PayResponse asyncNotify(String notifyData) {\n        //<xml>\u5f00\u5934\u7684\u662f\u5fae\u4fe1\u901a\u77e5\n        if (notifyData.startsWith(\"<xml>\")) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.asyncNotify(notifyData);\n        } else {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(aliPayConfig);\n            return aliPayService.asyncNotify(notifyData);\n        }\n    }\n\n    @Override\n    public RefundResponse refund(RefundRequest request) {\n        if (request.getPayPlatformEnum() == BestPayPlatformEnum.WX) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.refund(request);\n        } else if (request.getPayPlatformEnum() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.refund(request);\n        }\n        throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u5e73\u53f0\");\n    }\n\n    /**\n     * \u67e5\u8be2\u8ba2\u5355\n     *\n     * @param request\n     * @return\n     */\n    @Override\n    public OrderQueryResponse query(OrderQueryRequest request) {\n        if (request.getPlatformEnum() == BestPayPlatformEnum.WX) {\n            WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n            wxPayService.setWxPayConfig(this.wxPayConfig);\n            return wxPayService.query(request);\n        } else if (request.getPlatformEnum() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.query(request);\n        }\n        throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u5e73\u53f0\");\n    }\n\n    @Override\n    public String downloadBill(DownloadBillRequest request) {\n\n        WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n        wxPayService.setWxPayConfig(this.wxPayConfig);\n\n\n        return wxPayService.downloadBill(request);\n    }\n\n    @Override\n    public String getQrCodeUrl(String productId) {\n        WxPayServiceImpl wxPayService = new WxPayServiceImpl();\n        wxPayService.setWxPayConfig(this.wxPayConfig);\n\n        return wxPayService.getQrCodeUrl(productId);\n    }\n\n    @Override\n    public CloseResponse close(CloseRequest request) {\n        if (request.getPayTypeEnum().getPlatform() == BestPayPlatformEnum.ALIPAY) {\n            AliPayServiceImpl aliPayService = new AliPayServiceImpl();\n            aliPayService.setAliPayConfig(this.aliPayConfig);\n            return aliPayService.close(request);\n        }\n        throw new RuntimeException(\"\u5c1a\u672a\u652f\u6301\u8be5\u79cd\u652f\u4ed8\u65b9\u5f0f\");\n    }\n\n    @Override\n    public PayBankResponse payBank(PayBankRequest request) {", "right_context": "}\n}", "class_name": "BestPayServiceImpl", "return_type": "PayBankResponse", "parameters": [{"type": "PayBankRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WebUtil {\n\n    public static String buildForm(String baseUrl,Map<String, String> parameters) {<FILL_FUNCTION_BODY>}\n\n    private static String buildHiddenFields(Map<String, String> parameters) {\n        if (parameters != null && !parameters.isEmpty()) {\n            StringBuffer sb = new StringBuffer();\n            Set<String> keys = parameters.keySet();\n            Iterator var3 = keys.iterator();\n\n            while(var3.hasNext()) {\n                String key = (String)var3.next();\n                String value = (String)parameters.get(key);\n                if (key != null && value != null) {\n                    sb.append(buildHiddenField(key, value));\n                }\n            }\n\n            String result = sb.toString();\n            return result;\n        } else {\n            return \"\";\n        }\n    }\n\n    private static String buildHiddenField(String key, String value) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"<input type=\\\"hidden\\\" name=\\\"\");\n        sb.append(key);\n        sb.append(\"\\\" value=\\\"\");\n        String a = value.replace(\"\\\"\", \"&quot;\");\n        sb.append(a).append(\"\\\">\\n\");\n        return sb.toString();\n    }\n\n    public static String buildQuery(Map<String, String> params, String charset) throws IOException {\n        if (params != null && !params.isEmpty()) {\n            StringBuilder query = new StringBuilder();\n            Set<Map.Entry<String, String>> entries = params.entrySet();\n            boolean hasParam = false;\n            Iterator var5 = entries.iterator();\n\n            while(var5.hasNext()) {\n                Map.Entry<String, String> entry = (Map.Entry)var5.next();\n                String name = entry.getKey();\n                String value = entry.getValue();\n                if (StringUtil.areNotEmpty(new String[]{name, value})) {\n                    if (hasParam) {\n                        query.append(\"&\");\n                    } else {\n                        hasParam = true;\n                    }\n                    query.append(name).append(\"=\").append(URLEncoder.encode(value, charset));\n                }\n            }\n            return query.toString();\n        } else {\n            return null;\n        }\n    }\n\n    public static String getRequestUrl(Map<String,String> parameters,Boolean isSandbox)  {\n        StringBuffer urlSb;\n        if(isSandbox)\n            urlSb = new StringBuffer(AliPayConstants.ALIPAY_GATEWAY_OPEN_DEV);\n        else\n            urlSb = new StringBuffer(AliPayConstants.ALIPAY_GATEWAY_OPEN);\n\n        urlSb.append(\"/gateway.do\");\n        try {\n            String charset = null != parameters.get(\"charset\") ? parameters.get(\"charset\") : \"utf-8\";\n            String sysMustQuery = WebUtil.buildQuery(parameters, charset);\n            urlSb.append(\"?\");\n            urlSb.append(sysMustQuery);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return urlSb.toString();\n    }\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/66", "ground_truth": "\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"<form id='bestPayForm' name=\\\"punchout_form\\\" method=\\\"post\\\" action=\\\"\");\n        sb.append(baseUrl);\n        sb.append(\"\\\">\\n\");\n        sb.append(buildHiddenFields(parameters));\n        sb.append(\"<input type=\\\"submit\\\" value=\\\"\u7acb\u5373\u652f\u4ed8\\\" style=\\\"display:none\\\" >\\n\");\n        sb.append(\"</form>\\n\");\n        sb.append(\"<script>document.getElementById('bestPayForm').submit();</script>\");\n        String form = sb.toString();\n        return form;\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "utils", "WebUtil.java"], "context_start_lineno": 0, "function_name": "buildForm", "left_context": "class WebUtil {\n\n    public static String buildForm(String baseUrl,Map<String, String> parameters) {", "right_context": "}\n\n    private static String buildHiddenFields(Map<String, String> parameters) {\n        if (parameters != null && !parameters.isEmpty()) {\n            StringBuffer sb = new StringBuffer();\n            Set<String> keys = parameters.keySet();\n            Iterator var3 = keys.iterator();\n\n            while(var3.hasNext()) {\n                String key = (String)var3.next();\n                String value = (String)parameters.get(key);\n                if (key != null && value != null) {\n                    sb.append(buildHiddenField(key, value));\n                }\n            }\n\n            String result = sb.toString();\n            return result;\n        } else {\n            return \"\";\n        }\n    }\n\n    private static String buildHiddenField(String key, String value) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"<input type=\\\"hidden\\\" name=\\\"\");\n        sb.append(key);\n        sb.append(\"\\\" value=\\\"\");\n        String a = value.replace(\"\\\"\", \"&quot;\");\n        sb.append(a).append(\"\\\">\\n\");\n        return sb.toString();\n    }\n\n    public static String buildQuery(Map<String, String> params, String charset) throws IOException {\n        if (params != null && !params.isEmpty()) {\n            StringBuilder query = new StringBuilder();\n            Set<Map.Entry<String, String>> entries = params.entrySet();\n            boolean hasParam = false;\n            Iterator var5 = entries.iterator();\n\n            while(var5.hasNext()) {\n                Map.Entry<String, String> entry = (Map.Entry)var5.next();\n                String name = entry.getKey();\n                String value = entry.getValue();\n                if (StringUtil.areNotEmpty(new String[]{name, value})) {\n                    if (hasParam) {\n                        query.append(\"&\");\n                    } else {\n                        hasParam = true;\n                    }\n                    query.append(name).append(\"=\").append(URLEncoder.encode(value, charset));\n                }\n            }\n            return query.toString();\n        } else {\n            return null;\n        }\n    }\n\n    public static String getRequestUrl(Map<String,String> parameters,Boolean isSandbox)  {\n        StringBuffer urlSb;\n        if(isSandbox)\n            urlSb = new StringBuffer(AliPayConstants.ALIPAY_GATEWAY_OPEN_DEV);\n        else\n            urlSb = new StringBuffer(AliPayConstants.ALIPAY_GATEWAY_OPEN);\n\n        urlSb.append(\"/gateway.do\");\n        try {\n            String charset = null != parameters.get(\"charset\") ? parameters.get(\"charset\") : \"utf-8\";\n            String sysMustQuery = WebUtil.buildQuery(parameters, charset);\n            urlSb.append(\"?\");\n            urlSb.append(sysMustQuery);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return urlSb.toString();\n    }\n}", "class_name": "WebUtil", "return_type": "String", "parameters": [{"type": "String", "name": "baseUrl"}, {"type": "Map<String,String>", "name": "parameters"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java\n// --------------------------------------------------\n// public static <T>T mapToObject(Object obj,Class<T> clazz){\n//   try {\n//     return objectMapper.readValue(serialize(obj),clazz);\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   return null;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass JsonUtil {\n\n    private static final ObjectMapper mapper = new ObjectMapper();\n\n    private static GsonBuilder gsonBuilder = new GsonBuilder();\n\n    /**\n     * Convert target object to json string.\n     *\n     * @param obj target object.\n     * @return converted json string.\n     */\n    public static String toJson(Object obj) {\n        gsonBuilder.setPrettyPrinting();\n        return gsonBuilder.create().toJson(obj);\n    }\n\n    public static String toJsonWithUnderscores(Object obj) {\n        gsonBuilder.setPrettyPrinting();\n        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n        return gsonBuilder.create().toJson(obj);\n    }\n\n    /**\n     * Convert json string to target object.\n     *\n     * @param json      json string.\n     * @param valueType target object class type.\n     * @param <T>       target class type.\n     * @return converted target object.\n     */\n    public static <T> T toObject(String json, Class<T> valueType) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/80", "ground_truth": "\n        Objects.requireNonNull(json, \"json is null.\");\n        Objects.requireNonNull(valueType, \"value type is null.\");\n\n        try {\n            return mapper.readValue(json, valueType);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"fail to convert [\" + json + \"] to [\" + valueType + \"].\", e);\n        }\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "utils", "JsonUtil.java"], "context_start_lineno": 0, "function_name": "toObject", "left_context": "class JsonUtil {\n\n    private static final ObjectMapper mapper = new ObjectMapper();\n\n    private static GsonBuilder gsonBuilder = new GsonBuilder();\n\n    /**\n     * Convert target object to json string.\n     *\n     * @param obj target object.\n     * @return converted json string.\n     */\n    public static String toJson(Object obj) {\n        gsonBuilder.setPrettyPrinting();\n        return gsonBuilder.create().toJson(obj);\n    }\n\n    public static String toJsonWithUnderscores(Object obj) {\n        gsonBuilder.setPrettyPrinting();\n        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n        return gsonBuilder.create().toJson(obj);\n    }\n\n    /**\n     * Convert json string to target object.\n     *\n     * @param json      json string.\n     * @param valueType target object class type.\n     * @param <T>       target class type.\n     * @return converted target object.\n     */\n    public static <T> T toObject(String json, Class<T> valueType) {", "right_context": "}\n\n}", "class_name": "JsonUtil", "return_type": "T", "parameters": [{"type": "String", "name": "json"}, {"type": "Class<T>", "name": "valueType"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u56de\u8c03\n//  * @param request\n//  * @return\n//  */\n// PayResponse syncNotify(HttpServletRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u56de\u8c03\n//  * @param notifyData\n//  * @return\n//  */\n// PayResponse asyncNotify(String notifyData);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u8fd4\u56de\n//  * @param request\n//  * @return\n//  */\n// @Override public PayResponse syncNotify(HttpServletRequest request){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u56de\u8c03\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   if (notifyData.startsWith(\"<xml>\")) {\n//     WxPayServiceImpl wxPayService=new WxPayServiceImpl();\n//     wxPayService.setWxPayConfig(this.wxPayConfig);\n//     return wxPayService.asyncNotify(notifyData);\n//   }\n//  else {\n//     AliPayServiceImpl aliPayService=new AliPayServiceImpl();\n//     aliPayService.setAliPayConfig(aliPayConfig);\n//     return aliPayService.asyncNotify(notifyData);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse syncNotify(HttpServletRequest request){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u901a\u77e5\n//  * @param notifyData\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   if (!WxPaySignature.verify(XmlUtil.toMap(notifyData),wxPayConfig.getMchKey())) {\n//     log.error(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\",notifyData);\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n//   }\n//   WxPayAsyncResponse asyncResponse=(WxPayAsyncResponse)XmlUtil.toObject(notifyData,WxPayAsyncResponse.class);\n//   if (!asyncResponse.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + asyncResponse.getReturnMsg());\n//   }\n//   if (!asyncResponse.getResultCode().equals(WxPayConstants.SUCCESS) && asyncResponse.getErrCode().equals(\"ORDERPAID\")) {\n//     return buildPayResponse(asyncResponse);\n//   }\n//   if (!asyncResponse.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + asyncResponse.getErrCode() + \" err_code_des=\"+ asyncResponse.getErrCodeDes());\n//   }\n//   return buildPayResponse(asyncResponse);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// private PayResponse buildPayResponse(WxPayAsyncResponse response){\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setReturnCode(response.getReturnCode());\n//   payResponse.setReturnMsg(response.getReturnMsg());\n//   payResponse.setResultCode(response.getResultCode());\n//   payResponse.setErrCode(response.getErrCode());\n//   payResponse.setErrCodeDes(response.getErrCodeDes());\n//   payResponse.setPayPlatformEnum(BestPayPlatformEnum.WX);\n//   payResponse.setOrderAmount(MoneyUtil.Fen2Yuan(response.getTotalFee()));\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   payResponse.setOutTradeNo(response.getTransactionId());\n//   payResponse.setAttach(response.getAttach());\n//   payResponse.setMwebUrl(response.getMwebUrl());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u8fd4\u56de\u7ed9h5\u7684\u53c2\u6570\n//  * @param response\n//  * @return\n//  */\n// protected PayResponse buildPayResponse(WxPaySyncResponse response){\n//   String timeStamp=String.valueOf(System.currentTimeMillis() / 1000);\n//   String nonceStr=RandomUtil.getRandomStr();\n//   String prepayId=response.getPrepayId();\n//   Map<String,String> map=new HashMap<>();\n//   String signType=\"MD5\";\n//   map.put(\"appId\",response.getAppid());\n//   map.put(\"timeStamp\",timeStamp);\n//   map.put(\"nonceStr\",nonceStr);\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setReturnCode(response.getReturnCode());\n//   payResponse.setReturnMsg(response.getReturnMsg());\n//   payResponse.setResultCode(response.getResultCode());\n//   payResponse.setErrCode(response.getErrCode());\n//   payResponse.setErrCodeDes(response.getErrCodeDes());\n//   payResponse.setAppId(response.getAppid());\n//   payResponse.setTimeStamp(timeStamp);\n//   payResponse.setNonceStr(nonceStr);\n//   payResponse.setSignType(signType);\n//   payResponse.setMwebUrl(response.getMwebUrl());\n//   payResponse.setCodeUrl(response.getCodeUrl());\n//   if (response.getTradeType().equals(BestPayTypeEnum.WXPAY_APP.getCode())) {\n//     String packAge=\"Sign=WXPay\";\n//     map.put(\"package\",packAge);\n//     map.put(\"prepayid\",prepayId);\n//     map.put(\"partnerid\",response.getMchId());\n//     payResponse.setPackAge(packAge);\n//     payResponse.setPaySign(WxPaySignature.signForApp(map,wxPayConfig.getMchKey()));\n//     payResponse.setPrepayId(prepayId);\n//     return payResponse;\n//   }\n//  else {\n//     prepayId=\"prepay_id=\" + prepayId;\n//     map.put(\"package\",prepayId);\n//     map.put(\"signType\",signType);\n//     payResponse.setPackAge(prepayId);\n//     payResponse.setPaySign(WxPaySignature.sign(map,wxPayConfig.getMchKey()));\n//     return payResponse;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u901a\u77e5\n//  * @param notifyData\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   try {\n//     notifyData=URLDecoder.decode(notifyData,\"UTF-8\");\n//   }\n//  catch (  UnsupportedEncodingException e) {\n//     e.printStackTrace();\n//   }\n//   if (!AliPaySignature.verify(MapUtil.form2Map(notifyData),aliPayConfig.getAliPayPublicKey())) {\n//     log.error(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\",notifyData);\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n//   }\n//   HashMap<String,String> params=MapUtil.form2MapWithCamelCase(notifyData);\n//   AliPayAsyncResponse response=MapUtil.mapToObject(params,AliPayAsyncResponse.class);\n//   String tradeStatus=response.getTradeStatus();\n//   if (!tradeStatus.equals(AliPayConstants.TRADE_FINISHED) && !tradeStatus.equals(AliPayConstants.TRADE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, trade_status != SUCCESS | FINISHED\");\n//   }\n//   return buildPayResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// private PayResponse buildPayResponse(AliPayAsyncResponse response){\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setPayPlatformEnum(BestPayPlatformEnum.ALIPAY);\n//   payResponse.setOrderAmount(Double.valueOf(response.getTotalAmount()));\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setAttach(response.getPassbackParams());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u53d1\u8d77\u652f\u4ed8.\n//  */\n// PayResponse pay(PayRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   Objects.requireNonNull(request,\"request params must not be null\");\n//   if (BestPayPlatformEnum.WX == request.getPayTypeEnum().getPlatform()) {\n//     WxPayServiceImpl wxPayService=new WxPayServiceImpl();\n//     wxPayService.setWxPayConfig(this.wxPayConfig);\n//     return wxPayService.pay(request);\n//   }\n//  else   if (BestPayPlatformEnum.ALIPAY == request.getPayTypeEnum().getPlatform()) {\n//     AliPayServiceImpl aliPayService=new AliPayServiceImpl();\n//     aliPayService.setAliPayConfig(aliPayConfig);\n//     return aliPayService.pay(request);\n//   }\n//   throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u65b9\u5f0f\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_MICRO) {\n//     WxPayMicroServiceImpl wxPayMicroService=new WxPayMicroServiceImpl();\n//     wxPayMicroService.setWxPayConfig(wxPayConfig);\n//     return wxPayMicroService.pay(request);\n//   }\n//   WxPayUnifiedorderRequest wxRequest=new WxPayUnifiedorderRequest();\n//   wxRequest.setOutTradeNo(request.getOrderId());\n//   wxRequest.setTotalFee(MoneyUtil.Yuan2Fen(request.getOrderAmount()));\n//   wxRequest.setBody(request.getOrderName());\n//   wxRequest.setOpenid(request.getOpenid());\n//   wxRequest.setTradeType(request.getPayTypeEnum().getCode());\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_MINI) {\n//     wxRequest.setAppid(wxPayConfig.getMiniAppId());\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_APP) {\n//     wxRequest.setAppid(wxPayConfig.getAppAppId());\n//   }\n//  else {\n//     wxRequest.setAppid(wxPayConfig.getAppId());\n//   }\n//   wxRequest.setMchId(wxPayConfig.getMchId());\n//   wxRequest.setNotifyUrl(wxPayConfig.getNotifyUrl());\n//   wxRequest.setNonceStr(RandomUtil.getRandomStr());\n//   wxRequest.setSpbillCreateIp(StringUtils.isEmpty(request.getSpbillCreateIp()) ? \"8.8.8.8\" : request.getSpbillCreateIp());\n//   wxRequest.setAttach(request.getAttach());\n//   wxRequest.setSign(WxPaySignature.sign(MapUtil.buildMap(wxRequest),wxPayConfig.getMchKey()));\n//   wxRequest.setAuthCode(\"\");\n//   RequestBody body=RequestBody.create(MediaType.parse(\"application/xml; charset=utf-8\"),XmlUtil.toString(wxRequest));\n//   WxPayApi api=null;\n//   if (wxPayConfig.isSandbox()) {\n//     api=devRetrofit.create(WxPayApi.class);\n//   }\n//  else {\n//     api=retrofit.create(WxPayApi.class);\n//   }\n//   Call<WxPaySyncResponse> call=api.unifiedorder(body);\n//   Response<WxPaySyncResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, \u7f51\u7edc\u5f02\u5e38\");\n//   }\n//   WxPaySyncResponse response=retrofitResponse.body();\n//   assert response != null;\n//   if (!response.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + response.getReturnMsg());\n//   }\n//   if (!response.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + response.getErrCode() + \" err_code_des=\"+ response.getErrCodeDes());\n//   }\n//   return buildPayResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_H5) {\n//     AlipayH5ServiceImpl alipayH5Service=new AlipayH5ServiceImpl();\n//     alipayH5Service.setAliPayConfig(aliPayConfig);\n//     return alipayH5Service.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_QRCODE) {\n//     AlipayQRCodeServiceImpl alipayQRCodeService=new AlipayQRCodeServiceImpl();\n//     alipayQRCodeService.setAliPayConfig(aliPayConfig);\n//     return alipayQRCodeService.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_BARCODE) {\n//     AlipayBarCodeServiceImpl alipayBarCodeService=new AlipayBarCodeServiceImpl();\n//     alipayBarCodeService.setAliPayConfig(aliPayConfig);\n//     return alipayBarCodeService.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_APP) {\n//     AlipayAppServiceImpl alipayAppService=new AlipayAppServiceImpl();\n//     alipayAppService.setAliPayConfig(aliPayConfig);\n//     return alipayAppService.pay(request);\n//   }\n//   Map<String,String> requestParams=new HashMap<>();\n//   requestParams.put(\"out_trade_no\",request.getOrderId());\n//   AliPayPcRequest aliPayRequest=new AliPayPcRequest();\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_PC) {\n//     requestParams.put(\"product_code\",AliPayConstants.FAST_INSTANT_TRADE_PAY);\n//     aliPayRequest.setMethod(AliPayConstants.ALIPAY_TRADE_PAGE_PAY);\n//   }\n//  else {\n//     requestParams.put(\"product_code\",AliPayConstants.QUICK_WAP_PAY);\n//     aliPayRequest.setMethod(AliPayConstants.ALIPAY_TRADE_WAP_PAY);\n//   }\n//   requestParams.put(\"total_amount\",String.valueOf(request.getOrderAmount()));\n//   requestParams.put(\"subject\",String.valueOf(request.getOrderName()));\n//   requestParams.put(\"passback_params\",request.getAttach());\n//   aliPayRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayRequest.setCharset(\"utf-8\");\n//   aliPayRequest.setSignType(AliPayConstants.SIGN_TYPE_RSA2);\n//   aliPayRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   aliPayRequest.setReturnUrl(StringUtils.isEmpty(request.getReturnUrl()) ? aliPayConfig.getReturnUrl() : request.getReturnUrl());\n//   aliPayRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayRequest.setVersion(\"1.0\");\n//   aliPayRequest.setBizContent(JsonUtil.toJson(requestParams).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayRequest),aliPayConfig.getPrivateKey()));\n//   Map<String,String> parameters=MapUtil.object2MapWithUnderline(aliPayRequest);\n//   Map<String,String> applicationParams=new HashMap<>();\n//   applicationParams.put(\"biz_content\",aliPayRequest.getBizContent());\n//   parameters.remove(\"biz_content\");\n//   String baseUrl=WebUtil.getRequestUrl(parameters,aliPayConfig.isSandbox());\n//   String body=WebUtil.buildForm(baseUrl,applicationParams);\n//   PayResponse response=new PayResponse();\n//   response.setBody(body);\n//   return response;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AlipayBarCodeServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   AliPayTradeCreateRequest aliPayOrderQueryRequest=new AliPayTradeCreateRequest();\n//   aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_BARCODE_PAY);\n//   aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   AliPayTradeCreateRequest.BizContent bizContent=new AliPayTradeCreateRequest.BizContent();\n//   bizContent.setOutTradeNo(request.getOrderId());\n//   bizContent.setTotalAmount(request.getOrderAmount());\n//   bizContent.setSubject(request.getOrderName());\n//   bizContent.setAuthCode(request.getAuthCode());\n//   bizContent.setIsAsyncPay(true);\n//   aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayOrderQueryRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest),aliPayConfig.getPrivateKey()));\n//   Call<AliPayOrderCreateResponse> call;\n//   if (aliPayConfig.isSandbox()) {\n//     call=devRetrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   }\n//  else {\n//     call=retrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   }\n//   Response<AliPayOrderCreateResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011\u7f51\u7edc\u5f02\u5e38. alipay.trade.pay\");\n//   }\n//   assert retrofitResponse.body() != null;\n//   AliPayOrderCreateResponse.AlipayTradeCreateResponse response=retrofitResponse.body().getAlipayTradePayResponse();\n//   if (!response.getCode().equals(AliPayConstants.RESPONSE_CODE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011alipay.trade.pay. code=\" + response.getCode() + \", returnMsg=\"+ response.getMsg()+ String.format(\"|%s|%s\",response.getSubCode(),response.getSubMsg()));\n//   }\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AlipayH5ServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   AliPayTradeCreateRequest aliPayOrderQueryRequest=new AliPayTradeCreateRequest();\n//   aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   AliPayTradeCreateRequest.BizContent bizContent=new AliPayTradeCreateRequest.BizContent();\n//   bizContent.setOutTradeNo(request.getOrderId());\n//   bizContent.setTotalAmount(request.getOrderAmount());\n//   bizContent.setSubject(request.getOrderName());\n//   bizContent.setBuyerLogonId(request.getBuyerLogonId());\n//   bizContent.setBuyerId(request.getBuyerId());\n//   bizContent.setPassbackParams(request.getAttach());\n//   if (StringUtil.isEmpty(bizContent.getBuyerId()) && StringUtil.isEmpty(bizContent.getBuyerLogonId())) {\n//     throw new RuntimeException(\"alipay.trade.create: buyer_logon_id \u548c buyer_id\u4e0d\u80fd\u540c\u65f6\u4e3a\u7a7a\");\n//   }\n//   aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayOrderQueryRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest),aliPayConfig.getPrivateKey()));\n//   Call<AliPayOrderCreateResponse> call=retrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   Response<AliPayOrderCreateResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011\u7f51\u7edc\u5f02\u5e38. alipay.trade.create\");\n//   }\n//   assert retrofitResponse.body() != null;\n//   AliPayOrderCreateResponse.AlipayTradeCreateResponse response=retrofitResponse.body().getAlipayTradeCreateResponse();\n//   if (!response.getCode().equals(AliPayConstants.RESPONSE_CODE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011alipay.trade.create. code=\" + response.getCode() + \", returnMsg=\"+ response.getMsg()+ String.format(\"|%s|%s\",response.getSubCode(),response.getSubMsg()));\n//   }\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AlipayAppServiceImpl extends AliPayServiceImpl {\n\n    private final Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .followRedirects(false)  //\u7981\u5236OkHttp\u7684\u91cd\u5b9a\u5411\u64cd\u4f5c\uff0c\u6211\u4eec\u81ea\u5df1\u5904\u7406\u91cd\u5b9a\u5411\n                    .followSslRedirects(false)\n                    .build()\n            )\n            .build();\n\n    private final Retrofit devRetrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN_DEV)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .build()\n            )\n            .build();\n\n    @Override\n    public PayResponse pay(PayRequest request) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/143", "ground_truth": "\n        AliPayTradeCreateRequest aliPayOrderQueryRequest = new AliPayTradeCreateRequest();\n        aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_APP_PAY);\n        aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n        aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n        aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n        AliPayTradeCreateRequest.BizContent bizContent = new AliPayTradeCreateRequest.BizContent();\n        bizContent.setOutTradeNo(request.getOrderId());\n        bizContent.setTotalAmount(request.getOrderAmount());\n        bizContent.setSubject(request.getOrderName());\n        bizContent.setPassbackParams(request.getAttach());\n\n        aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\", \"\"));\n        String sign = AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest), aliPayConfig.getPrivateKey());\n        aliPayOrderQueryRequest.setSign(URLEncoder.encode(sign));\n\n        Map<String, String> stringStringMap = MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest);\n        String body = MapUtil.toUrl(stringStringMap);\n        PayResponse payResponse = new PayResponse();\n        payResponse.setBody(body);\n        return payResponse;\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "service", "impl", "alipay", "AlipayAppServiceImpl.java"], "context_start_lineno": 0, "function_name": "pay", "left_context": "class AlipayAppServiceImpl extends AliPayServiceImpl {\n\n    private final Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .followRedirects(false)  //\u7981\u5236OkHttp\u7684\u91cd\u5b9a\u5411\u64cd\u4f5c\uff0c\u6211\u4eec\u81ea\u5df1\u5904\u7406\u91cd\u5b9a\u5411\n                    .followSslRedirects(false)\n                    .build()\n            )\n            .build();\n\n    private final Retrofit devRetrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN_DEV)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .build()\n            )\n            .build();\n\n    @Override\n    public PayResponse pay(PayRequest request) {", "right_context": "}\n}", "class_name": "AlipayAppServiceImpl", "return_type": "PayResponse", "parameters": [{"type": "PayRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PayConfig {\n\n    /**\n     * \u652f\u4ed8\u5b8c\u6210\u540e\u7684\u5f02\u6b65\u901a\u77e5\u5730\u5740.\n     */\n    private String notifyUrl;\n\n    /**\n     * \u652f\u4ed8\u5b8c\u6210\u540e\u7684\u540c\u6b65\u8fd4\u56de\u5730\u5740.\n     */\n    private String returnUrl;\n\n    /**\n     * \u9ed8\u8ba4\u975e\u6c99\u7bb1\u6d4b\u8bd5\n     */\n    private boolean sandbox = false;\n\n    public boolean isSandbox() {\n        return sandbox;\n    }\n\n    public void setSandbox(boolean sandbox) {\n        this.sandbox = sandbox;\n    }\n\n    public String getNotifyUrl() {\n        return notifyUrl;\n    }\n\n    public void setNotifyUrl(String notifyUrl) {\n        this.notifyUrl = notifyUrl;\n    }\n\n    public String getReturnUrl() {\n        return returnUrl;\n    }\n\n    public void setReturnUrl(String returnUrl) {\n        this.returnUrl = returnUrl;\n    }\n\n    public void check() {<FILL_FUNCTION_BODY>}\n\n\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/161", "ground_truth": "\n        Objects.requireNonNull(notifyUrl, \"config param 'notifyUrl' is null.\");\n        if (!notifyUrl.startsWith(\"http\") && !notifyUrl.startsWith(\"https\")) {\n            throw new IllegalArgumentException(\"config param 'notifyUrl' does not start with http/https.\");\n        }\n        if (notifyUrl.length() > 256) {\n            throw new IllegalArgumentException(\"config param 'notifyUrl' is incorrect: size exceeds 256.\");\n        }\n        if (returnUrl != null) {\n            if (!returnUrl.startsWith(\"http\") && !returnUrl.startsWith(\"https\")) {\n                throw new IllegalArgumentException(\"config param 'returnUrl' does not start with http/https.\");\n            }\n            if (returnUrl.length() > 256) {\n                throw new IllegalArgumentException(\"config param 'returnUrl' is incorrect: size exceeds 256.\");\n            }\n        }\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "config", "PayConfig.java"], "context_start_lineno": 0, "function_name": "check", "left_context": "class PayConfig {\n\n    /**\n     * \u652f\u4ed8\u5b8c\u6210\u540e\u7684\u5f02\u6b65\u901a\u77e5\u5730\u5740.\n     */\n    private String notifyUrl;\n\n    /**\n     * \u652f\u4ed8\u5b8c\u6210\u540e\u7684\u540c\u6b65\u8fd4\u56de\u5730\u5740.\n     */\n    private String returnUrl;\n\n    /**\n     * \u9ed8\u8ba4\u975e\u6c99\u7bb1\u6d4b\u8bd5\n     */\n    private boolean sandbox = false;\n\n    public boolean isSandbox() {\n        return sandbox;\n    }\n\n    public void setSandbox(boolean sandbox) {\n        this.sandbox = sandbox;\n    }\n\n    public String getNotifyUrl() {\n        return notifyUrl;\n    }\n\n    public void setNotifyUrl(String notifyUrl) {\n        this.notifyUrl = notifyUrl;\n    }\n\n    public String getReturnUrl() {\n        return returnUrl;\n    }\n\n    public void setReturnUrl(String returnUrl) {\n        this.returnUrl = returnUrl;\n    }\n\n    public void check() {", "right_context": "}\n\n\n}", "class_name": "PayConfig", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StreamUtil {\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n\n    public static void io(InputStream in, OutputStream out) throws IOException {\n        io(in, out, -1);\n    }\n\n    public static void io(InputStream in, OutputStream out, int bufferSize) throws IOException {\n        if (bufferSize == -1) {\n            bufferSize = DEFAULT_BUFFER_SIZE;\n        }\n\n        byte[] buffer = new byte[bufferSize];\n        int amount;\n\n        while ((amount = in.read(buffer)) >= 0) {\n            out.write(buffer, 0, amount);\n        }\n    }\n\n    public static void io(Reader in, Writer out) throws IOException {\n        io(in, out, -1);\n    }\n\n    public static void io(Reader in, Writer out, int bufferSize) throws IOException {<FILL_FUNCTION_BODY>}\n\n    public static OutputStream synchronizedOutputStream(OutputStream out) {\n        return new SynchronizedOutputStream(out);\n    }\n\n    public static OutputStream synchronizedOutputStream(OutputStream out, Object lock) {\n        return new SynchronizedOutputStream(out, lock);\n    }\n\n    public static String readText(InputStream in) throws IOException {\n        return readText(in, null, -1);\n    }\n\n    public static String readText(InputStream in, String encoding) throws IOException {\n        return readText(in, encoding, -1);\n    }\n\n    public static String readText(InputStream in, String encoding, int bufferSize)\n            throws IOException {\n        Reader reader = (encoding == null) ? new InputStreamReader(in) : new InputStreamReader(in,\n                encoding);\n\n        return readText(reader, bufferSize);\n    }\n\n    public static String readText(Reader reader) throws IOException {\n        return readText(reader, -1);\n    }\n\n    public static String readText(Reader reader, int bufferSize) throws IOException {\n        StringWriter writer = new StringWriter();\n\n        io(reader, writer, bufferSize);\n        return writer.toString();\n    }\n\n    private static class SynchronizedOutputStream extends OutputStream {\n        private OutputStream out;\n        private Object       lock;\n\n        SynchronizedOutputStream(OutputStream out) {\n            this(out, out);\n        }\n\n        SynchronizedOutputStream(OutputStream out, Object lock) {\n            this.out = out;\n            this.lock = lock;\n        }\n\n        public void write(int datum) throws IOException {\n            synchronized (lock) {\n                out.write(datum);\n            }\n        }\n\n        public void write(byte[] data) throws IOException {\n            synchronized (lock) {\n                out.write(data);\n            }\n        }\n\n        public void write(byte[] data, int offset, int length) throws IOException {\n            synchronized (lock) {\n                out.write(data, offset, length);\n            }\n        }\n\n        public void flush() throws IOException {\n            synchronized (lock) {\n                out.flush();\n            }\n        }\n\n        public void close() throws IOException {\n            synchronized (lock) {\n                out.close();\n            }\n        }\n    }\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/319", "ground_truth": "\n        if (bufferSize == -1) {\n            bufferSize = DEFAULT_BUFFER_SIZE >> 1;\n        }\n\n        char[] buffer = new char[bufferSize];\n        int amount;\n\n        while ((amount = in.read(buffer)) >= 0) {\n            out.write(buffer, 0, amount);\n        }\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "utils", "StreamUtil.java"], "context_start_lineno": 0, "function_name": "io", "left_context": "class StreamUtil {\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n\n    public static void io(InputStream in, OutputStream out) throws IOException {\n        io(in, out, -1);\n    }\n\n    public static void io(InputStream in, OutputStream out, int bufferSize) throws IOException {\n        if (bufferSize == -1) {\n            bufferSize = DEFAULT_BUFFER_SIZE;\n        }\n\n        byte[] buffer = new byte[bufferSize];\n        int amount;\n\n        while ((amount = in.read(buffer)) >= 0) {\n            out.write(buffer, 0, amount);\n        }\n    }\n\n    public static void io(Reader in, Writer out) throws IOException {\n        io(in, out, -1);\n    }\n\n    public static void io(Reader in, Writer out, int bufferSize) throws IOException {", "right_context": "}\n\n    public static OutputStream synchronizedOutputStream(OutputStream out) {\n        return new SynchronizedOutputStream(out);\n    }\n\n    public static OutputStream synchronizedOutputStream(OutputStream out, Object lock) {\n        return new SynchronizedOutputStream(out, lock);\n    }\n\n    public static String readText(InputStream in) throws IOException {\n        return readText(in, null, -1);\n    }\n\n    public static String readText(InputStream in, String encoding) throws IOException {\n        return readText(in, encoding, -1);\n    }\n\n    public static String readText(InputStream in, String encoding, int bufferSize)\n            throws IOException {\n        Reader reader = (encoding == null) ? new InputStreamReader(in) : new InputStreamReader(in,\n                encoding);\n\n        return readText(reader, bufferSize);\n    }\n\n    public static String readText(Reader reader) throws IOException {\n        return readText(reader, -1);\n    }\n\n    public static String readText(Reader reader, int bufferSize) throws IOException {\n        StringWriter writer = new StringWriter();\n\n        io(reader, writer, bufferSize);\n        return writer.toString();\n    }\n\n    private static class SynchronizedOutputStream extends OutputStream {\n        private OutputStream out;\n        private Object       lock;\n\n        SynchronizedOutputStream(OutputStream out) {\n            this(out, out);\n        }\n\n        SynchronizedOutputStream(OutputStream out, Object lock) {\n            this.out = out;\n            this.lock = lock;\n        }\n\n        public void write(int datum) throws IOException {\n            synchronized (lock) {\n                out.write(datum);\n            }\n        }\n\n        public void write(byte[] data) throws IOException {\n            synchronized (lock) {\n                out.write(data);\n            }\n        }\n\n        public void write(byte[] data, int offset, int length) throws IOException {\n            synchronized (lock) {\n                out.write(data, offset, length);\n            }\n        }\n\n        public void flush() throws IOException {\n            synchronized (lock) {\n                out.flush();\n            }\n        }\n\n        public void close() throws IOException {\n            synchronized (lock) {\n                out.close();\n            }\n        }\n    }\n}", "class_name": "StreamUtil", "return_type": "void", "parameters": [{"type": "Reader", "name": "in"}, {"type": "Writer", "name": "out"}, {"type": "int", "name": "bufferSize"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ServletRequestUtils {\n\n    public static TreeMap<String, String> getParameterMap(ServletRequest request) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/332", "ground_truth": "\n        Objects.requireNonNull(request, \"request is null.\");\n        TreeMap<String, String> map = new TreeMap<>();\n        Enumeration enu = request.getParameterNames();\n        while (enu.hasMoreElements()) {\n            String paraName = (String) enu.nextElement();\n            map.put(paraName, request.getParameter(paraName));\n        }\n\n        return map;\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "utils", "ServletRequestUtils.java"], "context_start_lineno": 0, "function_name": "getParameterMap", "left_context": "class ServletRequestUtils {\n\n    public static TreeMap<String, String> getParameterMap(ServletRequest request) {", "right_context": "}\n\n}", "class_name": "ServletRequestUtils", "return_type": "TreeMap<String,String>", "parameters": [{"type": "ServletRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u56de\u8c03\n//  * @param request\n//  * @return\n//  */\n// PayResponse syncNotify(HttpServletRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u56de\u8c03\n//  * @param notifyData\n//  * @return\n//  */\n// PayResponse asyncNotify(String notifyData);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u540c\u6b65\u8fd4\u56de\n//  * @param request\n//  * @return\n//  */\n// @Override public PayResponse syncNotify(HttpServletRequest request){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u56de\u8c03\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   if (notifyData.startsWith(\"<xml>\")) {\n//     WxPayServiceImpl wxPayService=new WxPayServiceImpl();\n//     wxPayService.setWxPayConfig(this.wxPayConfig);\n//     return wxPayService.asyncNotify(notifyData);\n//   }\n//  else {\n//     AliPayServiceImpl aliPayService=new AliPayServiceImpl();\n//     aliPayService.setAliPayConfig(aliPayConfig);\n//     return aliPayService.asyncNotify(notifyData);\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse syncNotify(HttpServletRequest request){\n//   return null;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u901a\u77e5\n//  * @param notifyData\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   if (!WxPaySignature.verify(XmlUtil.toMap(notifyData),wxPayConfig.getMchKey())) {\n//     log.error(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\",notifyData);\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n//   }\n//   WxPayAsyncResponse asyncResponse=(WxPayAsyncResponse)XmlUtil.toObject(notifyData,WxPayAsyncResponse.class);\n//   if (!asyncResponse.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + asyncResponse.getReturnMsg());\n//   }\n//   if (!asyncResponse.getResultCode().equals(WxPayConstants.SUCCESS) && asyncResponse.getErrCode().equals(\"ORDERPAID\")) {\n//     return buildPayResponse(asyncResponse);\n//   }\n//   if (!asyncResponse.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + asyncResponse.getErrCode() + \" err_code_des=\"+ asyncResponse.getErrCodeDes());\n//   }\n//   return buildPayResponse(asyncResponse);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// private PayResponse buildPayResponse(WxPayAsyncResponse response){\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setReturnCode(response.getReturnCode());\n//   payResponse.setReturnMsg(response.getReturnMsg());\n//   payResponse.setResultCode(response.getResultCode());\n//   payResponse.setErrCode(response.getErrCode());\n//   payResponse.setErrCodeDes(response.getErrCodeDes());\n//   payResponse.setPayPlatformEnum(BestPayPlatformEnum.WX);\n//   payResponse.setOrderAmount(MoneyUtil.Fen2Yuan(response.getTotalFee()));\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   payResponse.setOutTradeNo(response.getTransactionId());\n//   payResponse.setAttach(response.getAttach());\n//   payResponse.setMwebUrl(response.getMwebUrl());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u8fd4\u56de\u7ed9h5\u7684\u53c2\u6570\n//  * @param response\n//  * @return\n//  */\n// protected PayResponse buildPayResponse(WxPaySyncResponse response){\n//   String timeStamp=String.valueOf(System.currentTimeMillis() / 1000);\n//   String nonceStr=RandomUtil.getRandomStr();\n//   String prepayId=response.getPrepayId();\n//   Map<String,String> map=new HashMap<>();\n//   String signType=\"MD5\";\n//   map.put(\"appId\",response.getAppid());\n//   map.put(\"timeStamp\",timeStamp);\n//   map.put(\"nonceStr\",nonceStr);\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setReturnCode(response.getReturnCode());\n//   payResponse.setReturnMsg(response.getReturnMsg());\n//   payResponse.setResultCode(response.getResultCode());\n//   payResponse.setErrCode(response.getErrCode());\n//   payResponse.setErrCodeDes(response.getErrCodeDes());\n//   payResponse.setAppId(response.getAppid());\n//   payResponse.setTimeStamp(timeStamp);\n//   payResponse.setNonceStr(nonceStr);\n//   payResponse.setSignType(signType);\n//   payResponse.setMwebUrl(response.getMwebUrl());\n//   payResponse.setCodeUrl(response.getCodeUrl());\n//   if (response.getTradeType().equals(BestPayTypeEnum.WXPAY_APP.getCode())) {\n//     String packAge=\"Sign=WXPay\";\n//     map.put(\"package\",packAge);\n//     map.put(\"prepayid\",prepayId);\n//     map.put(\"partnerid\",response.getMchId());\n//     payResponse.setPackAge(packAge);\n//     payResponse.setPaySign(WxPaySignature.signForApp(map,wxPayConfig.getMchKey()));\n//     payResponse.setPrepayId(prepayId);\n//     return payResponse;\n//   }\n//  else {\n//     prepayId=\"prepay_id=\" + prepayId;\n//     map.put(\"package\",prepayId);\n//     map.put(\"signType\",signType);\n//     payResponse.setPackAge(prepayId);\n//     payResponse.setPaySign(WxPaySignature.sign(map,wxPayConfig.getMchKey()));\n//     return payResponse;\n//   }\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// /** \n//  * \u5f02\u6b65\u901a\u77e5\n//  * @param notifyData\n//  * @return\n//  */\n// @Override public PayResponse asyncNotify(String notifyData){\n//   try {\n//     notifyData=URLDecoder.decode(notifyData,\"UTF-8\");\n//   }\n//  catch (  UnsupportedEncodingException e) {\n//     e.printStackTrace();\n//   }\n//   if (!AliPaySignature.verify(MapUtil.form2Map(notifyData),aliPayConfig.getAliPayPublicKey())) {\n//     log.error(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\",notifyData);\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n//   }\n//   HashMap<String,String> params=MapUtil.form2MapWithCamelCase(notifyData);\n//   AliPayAsyncResponse response=MapUtil.mapToObject(params,AliPayAsyncResponse.class);\n//   String tradeStatus=response.getTradeStatus();\n//   if (!tradeStatus.equals(AliPayConstants.TRADE_FINISHED) && !tradeStatus.equals(AliPayConstants.TRADE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, trade_status != SUCCESS | FINISHED\");\n//   }\n//   return buildPayResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// private PayResponse buildPayResponse(AliPayAsyncResponse response){\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setPayPlatformEnum(BestPayPlatformEnum.ALIPAY);\n//   payResponse.setOrderAmount(Double.valueOf(response.getTotalAmount()));\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setAttach(response.getPassbackParams());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/BestPayService.java\n// --------------------------------------------------\n// /** \n//  * \u53d1\u8d77\u652f\u4ed8.\n//  */\n// PayResponse pay(PayRequest request);\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/BestPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   Objects.requireNonNull(request,\"request params must not be null\");\n//   if (BestPayPlatformEnum.WX == request.getPayTypeEnum().getPlatform()) {\n//     WxPayServiceImpl wxPayService=new WxPayServiceImpl();\n//     wxPayService.setWxPayConfig(this.wxPayConfig);\n//     return wxPayService.pay(request);\n//   }\n//  else   if (BestPayPlatformEnum.ALIPAY == request.getPayTypeEnum().getPlatform()) {\n//     AliPayServiceImpl aliPayService=new AliPayServiceImpl();\n//     aliPayService.setAliPayConfig(aliPayConfig);\n//     return aliPayService.pay(request);\n//   }\n//   throw new RuntimeException(\"\u9519\u8bef\u7684\u652f\u4ed8\u65b9\u5f0f\");\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_MICRO) {\n//     WxPayMicroServiceImpl wxPayMicroService=new WxPayMicroServiceImpl();\n//     wxPayMicroService.setWxPayConfig(wxPayConfig);\n//     return wxPayMicroService.pay(request);\n//   }\n//   WxPayUnifiedorderRequest wxRequest=new WxPayUnifiedorderRequest();\n//   wxRequest.setOutTradeNo(request.getOrderId());\n//   wxRequest.setTotalFee(MoneyUtil.Yuan2Fen(request.getOrderAmount()));\n//   wxRequest.setBody(request.getOrderName());\n//   wxRequest.setOpenid(request.getOpenid());\n//   wxRequest.setTradeType(request.getPayTypeEnum().getCode());\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_MINI) {\n//     wxRequest.setAppid(wxPayConfig.getMiniAppId());\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.WXPAY_APP) {\n//     wxRequest.setAppid(wxPayConfig.getAppAppId());\n//   }\n//  else {\n//     wxRequest.setAppid(wxPayConfig.getAppId());\n//   }\n//   wxRequest.setMchId(wxPayConfig.getMchId());\n//   wxRequest.setNotifyUrl(wxPayConfig.getNotifyUrl());\n//   wxRequest.setNonceStr(RandomUtil.getRandomStr());\n//   wxRequest.setSpbillCreateIp(StringUtils.isEmpty(request.getSpbillCreateIp()) ? \"8.8.8.8\" : request.getSpbillCreateIp());\n//   wxRequest.setAttach(request.getAttach());\n//   wxRequest.setSign(WxPaySignature.sign(MapUtil.buildMap(wxRequest),wxPayConfig.getMchKey()));\n//   wxRequest.setAuthCode(\"\");\n//   RequestBody body=RequestBody.create(MediaType.parse(\"application/xml; charset=utf-8\"),XmlUtil.toString(wxRequest));\n//   WxPayApi api=null;\n//   if (wxPayConfig.isSandbox()) {\n//     api=devRetrofit.create(WxPayApi.class);\n//   }\n//  else {\n//     api=retrofit.create(WxPayApi.class);\n//   }\n//   Call<WxPaySyncResponse> call=api.unifiedorder(body);\n//   Response<WxPaySyncResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, \u7f51\u7edc\u5f02\u5e38\");\n//   }\n//   WxPaySyncResponse response=retrofitResponse.body();\n//   assert response != null;\n//   if (!response.getReturnCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, returnCode != SUCCESS, returnMsg = \" + response.getReturnMsg());\n//   }\n//   if (!response.getResultCode().equals(WxPayConstants.SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u5fae\u4fe1\u7edf\u4e00\u652f\u4ed8\u3011\u53d1\u8d77\u652f\u4ed8, resultCode != SUCCESS, err_code = \" + response.getErrCode() + \" err_code_des=\"+ response.getErrCodeDes());\n//   }\n//   return buildPayResponse(response);\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_H5) {\n//     AlipayH5ServiceImpl alipayH5Service=new AlipayH5ServiceImpl();\n//     alipayH5Service.setAliPayConfig(aliPayConfig);\n//     return alipayH5Service.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_QRCODE) {\n//     AlipayQRCodeServiceImpl alipayQRCodeService=new AlipayQRCodeServiceImpl();\n//     alipayQRCodeService.setAliPayConfig(aliPayConfig);\n//     return alipayQRCodeService.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_BARCODE) {\n//     AlipayBarCodeServiceImpl alipayBarCodeService=new AlipayBarCodeServiceImpl();\n//     alipayBarCodeService.setAliPayConfig(aliPayConfig);\n//     return alipayBarCodeService.pay(request);\n//   }\n//  else   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_APP) {\n//     AlipayAppServiceImpl alipayAppService=new AlipayAppServiceImpl();\n//     alipayAppService.setAliPayConfig(aliPayConfig);\n//     return alipayAppService.pay(request);\n//   }\n//   Map<String,String> requestParams=new HashMap<>();\n//   requestParams.put(\"out_trade_no\",request.getOrderId());\n//   AliPayPcRequest aliPayRequest=new AliPayPcRequest();\n//   if (request.getPayTypeEnum() == BestPayTypeEnum.ALIPAY_PC) {\n//     requestParams.put(\"product_code\",AliPayConstants.FAST_INSTANT_TRADE_PAY);\n//     aliPayRequest.setMethod(AliPayConstants.ALIPAY_TRADE_PAGE_PAY);\n//   }\n//  else {\n//     requestParams.put(\"product_code\",AliPayConstants.QUICK_WAP_PAY);\n//     aliPayRequest.setMethod(AliPayConstants.ALIPAY_TRADE_WAP_PAY);\n//   }\n//   requestParams.put(\"total_amount\",String.valueOf(request.getOrderAmount()));\n//   requestParams.put(\"subject\",String.valueOf(request.getOrderName()));\n//   requestParams.put(\"passback_params\",request.getAttach());\n//   aliPayRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayRequest.setCharset(\"utf-8\");\n//   aliPayRequest.setSignType(AliPayConstants.SIGN_TYPE_RSA2);\n//   aliPayRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   aliPayRequest.setReturnUrl(StringUtils.isEmpty(request.getReturnUrl()) ? aliPayConfig.getReturnUrl() : request.getReturnUrl());\n//   aliPayRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayRequest.setVersion(\"1.0\");\n//   aliPayRequest.setBizContent(JsonUtil.toJson(requestParams).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayRequest),aliPayConfig.getPrivateKey()));\n//   Map<String,String> parameters=MapUtil.object2MapWithUnderline(aliPayRequest);\n//   Map<String,String> applicationParams=new HashMap<>();\n//   applicationParams.put(\"biz_content\",aliPayRequest.getBizContent());\n//   parameters.remove(\"biz_content\");\n//   String baseUrl=WebUtil.getRequestUrl(parameters,aliPayConfig.isSandbox());\n//   String body=WebUtil.buildForm(baseUrl,applicationParams);\n//   PayResponse response=new PayResponse();\n//   response.setBody(body);\n//   return response;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AlipayAppServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   AliPayTradeCreateRequest aliPayOrderQueryRequest=new AliPayTradeCreateRequest();\n//   aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_APP_PAY);\n//   aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   AliPayTradeCreateRequest.BizContent bizContent=new AliPayTradeCreateRequest.BizContent();\n//   bizContent.setOutTradeNo(request.getOrderId());\n//   bizContent.setTotalAmount(request.getOrderAmount());\n//   bizContent.setSubject(request.getOrderName());\n//   bizContent.setPassbackParams(request.getAttach());\n//   aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   String sign=AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest),aliPayConfig.getPrivateKey());\n//   aliPayOrderQueryRequest.setSign(URLEncoder.encode(sign));\n//   Map<String,String> stringStringMap=MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest);\n//   String body=MapUtil.toUrl(stringStringMap);\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setBody(body);\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AlipayBarCodeServiceImpl.java\n// --------------------------------------------------\n// @Override public PayResponse pay(PayRequest request){\n//   AliPayTradeCreateRequest aliPayOrderQueryRequest=new AliPayTradeCreateRequest();\n//   aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_BARCODE_PAY);\n//   aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n//   aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n//   aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n//   AliPayTradeCreateRequest.BizContent bizContent=new AliPayTradeCreateRequest.BizContent();\n//   bizContent.setOutTradeNo(request.getOrderId());\n//   bizContent.setTotalAmount(request.getOrderAmount());\n//   bizContent.setSubject(request.getOrderName());\n//   bizContent.setAuthCode(request.getAuthCode());\n//   bizContent.setIsAsyncPay(true);\n//   aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\",\"\"));\n//   aliPayOrderQueryRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest),aliPayConfig.getPrivateKey()));\n//   Call<AliPayOrderCreateResponse> call;\n//   if (aliPayConfig.isSandbox()) {\n//     call=devRetrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   }\n//  else {\n//     call=retrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n//   }\n//   Response<AliPayOrderCreateResponse> retrofitResponse=null;\n//   try {\n//     retrofitResponse=call.execute();\n//   }\n//  catch (  IOException e) {\n//     e.printStackTrace();\n//   }\n//   assert retrofitResponse != null;\n//   if (!retrofitResponse.isSuccessful()) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011\u7f51\u7edc\u5f02\u5e38. alipay.trade.pay\");\n//   }\n//   assert retrofitResponse.body() != null;\n//   AliPayOrderCreateResponse.AlipayTradeCreateResponse response=retrofitResponse.body().getAlipayTradePayResponse();\n//   if (!response.getCode().equals(AliPayConstants.RESPONSE_CODE_SUCCESS)) {\n//     throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011alipay.trade.pay. code=\" + response.getCode() + \", returnMsg=\"+ response.getMsg()+ String.format(\"|%s|%s\",response.getSubCode(),response.getSubMsg()));\n//   }\n//   PayResponse payResponse=new PayResponse();\n//   payResponse.setOutTradeNo(response.getTradeNo());\n//   payResponse.setOrderId(response.getOutTradeNo());\n//   return payResponse;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AlipayQRCodeServiceImpl extends AliPayServiceImpl {\n\n    private final Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .build()\n            )\n            .build();\n\n    private final Retrofit devRetrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN_DEV)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .build()\n            )\n            .build();\n\n    @Override\n    public PayResponse pay(PayRequest request) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/378", "ground_truth": "\n        AliPayTradeCreateRequest aliPayOrderQueryRequest = new AliPayTradeCreateRequest();\n        aliPayOrderQueryRequest.setMethod(AliPayConstants.ALIPAY_TRADE_QRCODE_PAY);\n        aliPayOrderQueryRequest.setAppId(aliPayConfig.getAppId());\n        aliPayOrderQueryRequest.setTimestamp(LocalDateTime.now().format(formatter));\n        aliPayOrderQueryRequest.setNotifyUrl(aliPayConfig.getNotifyUrl());\n        AliPayTradeCreateRequest.BizContent bizContent = new AliPayTradeCreateRequest.BizContent();\n        bizContent.setOutTradeNo(request.getOrderId());\n        bizContent.setTotalAmount(request.getOrderAmount());\n        bizContent.setSubject(request.getOrderName());\n\n        aliPayOrderQueryRequest.setBizContent(JsonUtil.toJsonWithUnderscores(bizContent).replaceAll(\"\\\\s*\", \"\"));\n        aliPayOrderQueryRequest.setSign(AliPaySignature.sign(MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest), aliPayConfig.getPrivateKey()));\n\n        Call<AliPayOrderCreateResponse> call;\n        if (aliPayConfig.isSandbox()) {\n            call = devRetrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n        } else {\n            call = retrofit.create(AliPayApi.class).tradeCreate((MapUtil.object2MapWithUnderline(aliPayOrderQueryRequest)));\n        }\n        Response<AliPayOrderCreateResponse> retrofitResponse = null;\n        try {\n            retrofitResponse = call.execute();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        assert retrofitResponse != null;\n        if (!retrofitResponse.isSuccessful()) {\n            throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011\u7f51\u7edc\u5f02\u5e38. alipay.trade.precreate\");\n        }\n        assert retrofitResponse.body() != null;\n        AliPayOrderCreateResponse.AlipayTradeCreateResponse response = retrofitResponse.body().getAlipayTradePrecreateResponse();\n        if (!response.getCode().equals(AliPayConstants.RESPONSE_CODE_SUCCESS)) {\n            throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u521b\u5efa\u8ba2\u5355\u3011alipay.trade.precreate. code=\" + response.getCode() + \", returnMsg=\" + response.getMsg() + String.format(\"|%s|%s\", response.getSubCode(), response.getSubMsg()));\n        }\n\n        PayResponse payResponse = new PayResponse();\n        payResponse.setOutTradeNo(response.getTradeNo());\n        payResponse.setOrderId(response.getOutTradeNo());\n        payResponse.setCodeUrl(response.getQrCode());\n        return payResponse;\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "service", "impl", "alipay", "AlipayQRCodeServiceImpl.java"], "context_start_lineno": 0, "function_name": "pay", "left_context": "class AlipayQRCodeServiceImpl extends AliPayServiceImpl {\n\n    private final Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .build()\n            )\n            .build();\n\n    private final Retrofit devRetrofit = new Retrofit.Builder()\n            .baseUrl(AliPayConstants.ALIPAY_GATEWAY_OPEN_DEV)\n            .addConverterFactory(GsonConverterFactory.create(\n                    //\u4e0b\u5212\u7ebf\u9a7c\u5cf0\u4e92\u8f6c\n                    new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()\n            ))\n            .client(new OkHttpClient.Builder()\n                    .addInterceptor((new HttpLoggingInterceptor()\n                            .setLevel(HttpLoggingInterceptor.Level.BODY)))\n                    .build()\n            )\n            .build();\n\n    @Override\n    public PayResponse pay(PayRequest request) {", "right_context": "}\n}", "class_name": "AlipayQRCodeServiceImpl", "return_type": "PayResponse", "parameters": [{"type": "PayRequest", "name": "request"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass StringUtil {\n\n    public static boolean areNotEmpty(String... values) {\n        boolean result = true;\n        if (values != null && values.length != 0) {\n            String[] var2 = values;\n            int var3 = values.length;\n\n            for(int var4 = 0; var4 < var3; ++var4) {\n                String value = var2[var4];\n                result &= !isEmpty(value);\n            }\n        } else {\n            result = false;\n        }\n\n        return result;\n    }\n\n    public static boolean isEmpty(String value) {<FILL_FUNCTION_BODY>}\n\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/388", "ground_truth": "\n        int strLen;\n        if (value != null && (strLen = value.length()) != 0) {\n            for(int i = 0; i < strLen; ++i) {\n                if (!Character.isWhitespace(value.charAt(i))) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return true;\n        }\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "utils", "StringUtil.java"], "context_start_lineno": 0, "function_name": "isEmpty", "left_context": "class StringUtil {\n\n    public static boolean areNotEmpty(String... values) {\n        boolean result = true;\n        if (values != null && values.length != 0) {\n            String[] var2 = values;\n            int var3 = values.length;\n\n            for(int var4 = 0; var4 < var3; ++var4) {\n                String value = var2[var4];\n                result &= !isEmpty(value);\n            }\n        } else {\n            result = false;\n        }\n\n        return result;\n    }\n\n    public static boolean isEmpty(String value) {", "right_context": "}\n\n}", "class_name": "StringUtil", "return_type": "boolean", "parameters": [{"type": "String", "name": "value"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass WxPayConfig extends PayConfig {\n\n    /**\n     * \u516c\u4f17\u53f7appId\n     */\n    private String appId;\n\n    /**\n     * \u516c\u4f17\u53f7appSecret\n     */\n    private String appSecret;\n\n    /**\n     * \u5c0f\u7a0b\u5e8fappId\n     */\n    private String miniAppId;\n\n    /**\n     * app\u5e94\u7528appid\n     */\n    private String appAppId;\n\n    /**\n     * \u5546\u6237\u53f7\n     */\n    private String mchId;\n\n    /**\n     * \u5546\u6237\u5bc6\u94a5\n     */\n    private String mchKey;\n\n    /**\n     * \u5546\u6237\u8bc1\u4e66\u8def\u5f84\n     */\n    private String keyPath;\n\n    /**\n     * \u8bc1\u4e66\u5185\u5bb9\n     */\n    private SSLContext sslContext;\n\n    /**\n     * \u521d\u59cb\u5316\u8bc1\u4e66\n     * @return\n     */\n    public SSLContext initSSLContext() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "Pay-Group_best-pay-sdk/416", "ground_truth": "\n        FileInputStream inputStream = null;\n        try {\n            inputStream = new FileInputStream(new File(this.keyPath));\n        } catch (IOException e) {\n            throw new RuntimeException(\"\u8bfb\u53d6\u5fae\u4fe1\u5546\u6237\u8bc1\u4e66\u6587\u4ef6\u51fa\u9519\", e);\n        }\n\n        try {\n            KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\n            char[] partnerId2charArray = mchId.toCharArray();\n            keystore.load(inputStream, partnerId2charArray);\n            this.sslContext = SSLContexts.custom().loadKeyMaterial(keystore, partnerId2charArray).build();\n            return this.sslContext;\n        } catch (Exception e) {\n            throw new RuntimeException(\"\u8bc1\u4e66\u6587\u4ef6\u6709\u95ee\u9898\uff0c\u8bf7\u6838\u5b9e\uff01\", e);\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n    ", "fpath_tuple": ["Pay-Group_best-pay-sdk", "best-pay-sdk", "src", "main", "java", "com", "lly835", "bestpay", "config", "WxPayConfig.java"], "context_start_lineno": 0, "function_name": "initSSLContext", "left_context": "class WxPayConfig extends PayConfig {\n\n    /**\n     * \u516c\u4f17\u53f7appId\n     */\n    private String appId;\n\n    /**\n     * \u516c\u4f17\u53f7appSecret\n     */\n    private String appSecret;\n\n    /**\n     * \u5c0f\u7a0b\u5e8fappId\n     */\n    private String miniAppId;\n\n    /**\n     * app\u5e94\u7528appid\n     */\n    private String appAppId;\n\n    /**\n     * \u5546\u6237\u53f7\n     */\n    private String mchId;\n\n    /**\n     * \u5546\u6237\u5bc6\u94a5\n     */\n    private String mchKey;\n\n    /**\n     * \u5546\u6237\u8bc1\u4e66\u8def\u5f84\n     */\n    private String keyPath;\n\n    /**\n     * \u8bc1\u4e66\u5185\u5bb9\n     */\n    private SSLContext sslContext;\n\n    /**\n     * \u521d\u59cb\u5316\u8bc1\u4e66\n     * @return\n     */\n    public SSLContext initSSLContext() {", "right_context": "}\n}", "class_name": "WxPayConfig", "return_type": "SSLContext", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SingularField extends RecursableDiffEntity.WithResultCode\n      implements ProtoPrintable {\n    /** The type information for this field. May be absent if result code is {@code IGNORED}. */\n    abstract Optional<SubScopeId> subScopeId();\n\n    /** The display name for this field. May include an array-index specifier. */\n    abstract String fieldName();\n\n    /** The field under test. */\n    abstract Optional<Object> actual();\n\n    /** The expected value of said field. */\n    abstract Optional<Object> expected();\n\n    /**\n     * The detailed breakdown of the comparison, only present if both objects are set on this\n     * instance and they are messages.\n     *\n     * <p>This does not necessarily mean the messages were set on the input protos.\n     */\n    abstract Optional<DiffResult> breakdown();\n\n    /**\n     * The detailed breakdown of the comparison, only present if both objects are set and they are\n     * {@link UnknownFieldSet}s.\n     *\n     * <p>This will only ever be set inside a parent {@link UnknownFieldSetDiff}. The top {@link\n     * UnknownFieldSetDiff} is set on the {@link DiffResult}, not here.\n     */\n    abstract Optional<UnknownFieldSetDiff> unknownsBreakdown();\n\n    /** Returns {@code actual().get()}, or {@code expected().get()}, whichever is available. */\n    @Memoized\n    Object actualOrExpected() {\n      return actual().or(expected()).get();\n    }\n\n    @Memoized\n    @Override\n    Iterable<? extends RecursableDiffEntity> childEntities() {\n      return ImmutableList.copyOf(\n          Iterables.concat(breakdown().asSet(), unknownsBreakdown().asSet()));\n    }\n\n    @Override\n    final void printContents(boolean includeMatches, String fieldPrefix, StringBuilder sb) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    final boolean isContentEmpty() {\n      return false;\n    }\n\n    static SingularField ignored(String fieldName) {\n      return newBuilder()\n          .setFieldName(fieldName)\n          .setResult(Result.IGNORED)\n          // Ignored fields don't need a customized proto printer.\n          .setProtoPrinter(TextFormat.printer())\n          .build();\n    }\n\n    static Builder newBuilder() {\n      return new AutoValue_DiffResult_SingularField.Builder();\n    }\n\n    /** Builder for {@link SingularField}. */\n    @AutoValue.Builder\n    abstract static class Builder {\n      abstract Builder setResult(Result result);\n\n      abstract Builder setSubScopeId(SubScopeId subScopeId);\n\n      abstract Builder setFieldName(String fieldName);\n\n      abstract Builder setActual(Object actual);\n\n      abstract Builder setExpected(Object expected);\n\n      abstract Builder setBreakdown(DiffResult breakdown);\n\n      abstract Builder setUnknownsBreakdown(UnknownFieldSetDiff unknownsBreakdown);\n\n      abstract Builder setProtoPrinter(TextFormat.Printer value);\n\n      abstract SingularField build();\n    }\n  }", "metadata": {"task_id": "google_truth/42", "ground_truth": "\n      if (!includeMatches && isMatched()) {\n        return;\n      }\n\n      fieldPrefix = newFieldPrefix(fieldPrefix, fieldName());\n      switch (result()) {\n        case ADDED:\n          sb.append(\"added: \").append(fieldPrefix).append(\": \");\n          if (actual().get() instanceof Message) {\n            sb.append(\"\\n\");\n            printMessage((Message) actual().get(), sb);\n          } else {\n            printFieldValue(subScopeId().get(), actual().get(), sb);\n            sb.append(\"\\n\");\n          }\n          return;\n        case IGNORED:\n          sb.append(\"ignored: \").append(fieldPrefix).append(\"\\n\");\n          return;\n        case MATCHED:\n          sb.append(\"matched: \").append(fieldPrefix);\n          if (actualOrExpected() instanceof Message) {\n            sb.append(\"\\n\");\n            printChildContents(includeMatches, fieldPrefix, sb);\n          } else {\n            sb.append(\": \");\n            printFieldValue(subScopeId().get(), actualOrExpected(), sb);\n            sb.append(\"\\n\");\n          }\n          return;\n        case MODIFIED:\n          sb.append(\"modified: \").append(fieldPrefix);\n          if (actualOrExpected() instanceof Message) {\n            sb.append(\"\\n\");\n            printChildContents(includeMatches, fieldPrefix, sb);\n          } else {\n            sb.append(\": \");\n            printFieldValue(subScopeId().get(), expected().get(), sb);\n            sb.append(\" -> \");\n            printFieldValue(subScopeId().get(), actual().get(), sb);\n            sb.append(\"\\n\");\n          }\n          return;\n        case REMOVED:\n          sb.append(\"deleted: \").append(fieldPrefix).append(\": \");\n          if (expected().get() instanceof Message) {\n            sb.append(\"\\n\");\n            printMessage((Message) expected().get(), sb);\n          } else {\n            printFieldValue(subScopeId().get(), expected().get(), sb);\n            sb.append(\"\\n\");\n          }\n          return;\n        default:\n          throw new AssertionError(\"Impossible: \" + result());\n      }\n    ", "fpath_tuple": ["google_truth", "truth", "extensions", "proto", "src", "main", "java", "com", "google", "common", "truth", "extensions", "proto", "DiffResult.java"], "context_start_lineno": 0, "function_name": "printContents", "left_context": "class SingularField extends RecursableDiffEntity.WithResultCode\n      implements ProtoPrintable {\n    /** The type information for this field. May be absent if result code is {@code IGNORED}. */\n    abstract Optional<SubScopeId> subScopeId();\n\n    /** The display name for this field. May include an array-index specifier. */\n    abstract String fieldName();\n\n    /** The field under test. */\n    abstract Optional<Object> actual();\n\n    /** The expected value of said field. */\n    abstract Optional<Object> expected();\n\n    /**\n     * The detailed breakdown of the comparison, only present if both objects are set on this\n     * instance and they are messages.\n     *\n     * <p>This does not necessarily mean the messages were set on the input protos.\n     */\n    abstract Optional<DiffResult> breakdown();\n\n    /**\n     * The detailed breakdown of the comparison, only present if both objects are set and they are\n     * {@link UnknownFieldSet}s.\n     *\n     * <p>This will only ever be set inside a parent {@link UnknownFieldSetDiff}. The top {@link\n     * UnknownFieldSetDiff} is set on the {@link DiffResult}, not here.\n     */\n    abstract Optional<UnknownFieldSetDiff> unknownsBreakdown();\n\n    /** Returns {@code actual().get()}, or {@code expected().get()}, whichever is available. */\n    @Memoized\n    Object actualOrExpected() {\n      return actual().or(expected()).get();\n    }\n\n    @Memoized\n    @Override\n    Iterable<? extends RecursableDiffEntity> childEntities() {\n      return ImmutableList.copyOf(\n          Iterables.concat(breakdown().asSet(), unknownsBreakdown().asSet()));\n    }\n\n    @Override\n    final void printContents(boolean includeMatches, String fieldPrefix, StringBuilder sb) {", "right_context": "}\n\n    @Override\n    final boolean isContentEmpty() {\n      return false;\n    }\n\n    static SingularField ignored(String fieldName) {\n      return newBuilder()\n          .setFieldName(fieldName)\n          .setResult(Result.IGNORED)\n          // Ignored fields don't need a customized proto printer.\n          .setProtoPrinter(TextFormat.printer())\n          .build();\n    }\n\n    static Builder newBuilder() {\n      return new AutoValue_DiffResult_SingularField.Builder();\n    }\n\n    /** Builder for {@link SingularField}. */\n    @AutoValue.Builder\n    abstract static class Builder {\n      abstract Builder setResult(Result result);\n\n      abstract Builder setSubScopeId(SubScopeId subScopeId);\n\n      abstract Builder setFieldName(String fieldName);\n\n      abstract Builder setActual(Object actual);\n\n      abstract Builder setExpected(Object expected);\n\n      abstract Builder setBreakdown(DiffResult breakdown);\n\n      abstract Builder setUnknownsBreakdown(UnknownFieldSetDiff unknownsBreakdown);\n\n      abstract Builder setProtoPrinter(TextFormat.Printer value);\n\n      abstract SingularField build();\n    }\n  }", "class_name": "SingularField", "return_type": "void", "parameters": [{"type": "boolean", "name": "includeMatches"}, {"type": "String", "name": "fieldPrefix"}, {"type": "StringBuilder", "name": "sb"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OptionalDoubleSubject extends Subject {\n\n  private final OptionalDouble actual;\n\n  OptionalDoubleSubject(\n      FailureMetadata failureMetadata,\n      @Nullable OptionalDouble subject,\n      @Nullable String typeDescription) {\n    super(failureMetadata, subject, typeDescription);\n    this.actual = subject;\n  }\n\n  /** Fails if the {@link OptionalDouble} is empty or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link OptionalDouble} is present or the subject is null. */\n  public void isEmpty() {<FILL_FUNCTION_BODY>}\n\n  /**\n   * Fails if the {@link OptionalDouble} does not have the given value or the subject is null. This\n   * method is <i>not</i> recommended when the code under test is doing any kind of arithmetic,\n   * since the exact result of floating point arithmetic is sensitive to apparently trivial changes.\n   * More sophisticated comparisons can be done using {@code assertThat(optional.getAsDouble())\u2026}.\n   * This method is recommended when the code under test is specified as either copying a value\n   * without modification from its input or returning a well-defined literal or constant value.\n   */\n  public void hasValue(double expected) {\n    if (actual == null) {\n      failWithActual(\"expected an optional with value\", expected);\n    } else if (!actual.isPresent()) {\n      failWithoutActual(fact(\"expected to have value\", expected), simpleFact(\"but was absent\"));\n    } else {\n      checkNoNeedToDisplayBothValues(\"getAsDouble()\")\n          .that(actual.getAsDouble())\n          .isEqualTo(expected);\n    }\n  }\n\n  /**\n   * Obsolete factory instance. This factory was previously necessary for assertions like {@code\n   * assertWithMessage(...).about(optionalDoubles()).that(optional)....}. Now, you can perform\n   * assertions like that without the {@code about(...)} call.\n   *\n   * @deprecated Instead of {@code about(optionalDoubles()).that(...)}, use just {@code that(...)}.\n   *     Similarly, instead of {@code assertAbout(optionalDoubles()).that(...)}, use just {@code\n   *     assertThat(...)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"InlineMeSuggester\") // We want users to remove the surrounding call entirely.\n  public static Factory<OptionalDoubleSubject, OptionalDouble> optionalDoubles() {\n    return (metadata, subject) -> new OptionalDoubleSubject(metadata, subject, \"optionalDouble\");\n  }\n}", "metadata": {"task_id": "google_truth/102", "ground_truth": "\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected empty optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be empty\"),\n          fact(\"but was present with value\", actual.getAsDouble()));\n    }\n  ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "OptionalDoubleSubject.java"], "context_start_lineno": 0, "function_name": "isEmpty", "left_context": "class OptionalDoubleSubject extends Subject {\n\n  private final OptionalDouble actual;\n\n  OptionalDoubleSubject(\n      FailureMetadata failureMetadata,\n      @Nullable OptionalDouble subject,\n      @Nullable String typeDescription) {\n    super(failureMetadata, subject, typeDescription);\n    this.actual = subject;\n  }\n\n  /** Fails if the {@link OptionalDouble} is empty or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link OptionalDouble} is present or the subject is null. */\n  public void isEmpty() {", "right_context": "}\n\n  /**\n   * Fails if the {@link OptionalDouble} does not have the given value or the subject is null. This\n   * method is <i>not</i> recommended when the code under test is doing any kind of arithmetic,\n   * since the exact result of floating point arithmetic is sensitive to apparently trivial changes.\n   * More sophisticated comparisons can be done using {@code assertThat(optional.getAsDouble())\u2026}.\n   * This method is recommended when the code under test is specified as either copying a value\n   * without modification from its input or returning a well-defined literal or constant value.\n   */\n  public void hasValue(double expected) {\n    if (actual == null) {\n      failWithActual(\"expected an optional with value\", expected);\n    } else if (!actual.isPresent()) {\n      failWithoutActual(fact(\"expected to have value\", expected), simpleFact(\"but was absent\"));\n    } else {\n      checkNoNeedToDisplayBothValues(\"getAsDouble()\")\n          .that(actual.getAsDouble())\n          .isEqualTo(expected);\n    }\n  }\n\n  /**\n   * Obsolete factory instance. This factory was previously necessary for assertions like {@code\n   * assertWithMessage(...).about(optionalDoubles()).that(optional)....}. Now, you can perform\n   * assertions like that without the {@code about(...)} call.\n   *\n   * @deprecated Instead of {@code about(optionalDoubles()).that(...)}, use just {@code that(...)}.\n   *     Similarly, instead of {@code assertAbout(optionalDoubles()).that(...)}, use just {@code\n   *     assertThat(...)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"InlineMeSuggester\") // We want users to remove the surrounding call entirely.\n  public static Factory<OptionalDoubleSubject, OptionalDouble> optionalDoubles() {\n    return (metadata, subject) -> new OptionalDoubleSubject(metadata, subject, \"optionalDouble\");\n  }\n}", "class_name": "OptionalDoubleSubject", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OptionalSubject extends Subject {\n  @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n  private final @Nullable Optional<?> actual;\n\n  OptionalSubject(\n      FailureMetadata failureMetadata,\n      @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n          @Nullable Optional<?> subject,\n      @Nullable String typeDescription) {\n    super(failureMetadata, subject, typeDescription);\n    this.actual = subject;\n  }\n\n  // TODO(cpovirk): Consider making OptionalIntSubject and OptionalLongSubject delegate to this.\n\n  /** Fails if the {@link Optional}{@code <T>} is empty or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link Optional}{@code <T>} is present or the subject is null. */\n  public void isEmpty() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected empty optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be empty\"), fact(\"but was present with value\", actual.get()));\n    }\n  }\n\n  /**\n   * Fails if the {@link Optional}{@code <T>} does not have the given value or the subject is null.\n   *\n   * <p>To make more complex assertions on the optional's value split your assertion in two:\n   *\n   * <pre>{@code\n   * assertThat(myOptional).isPresent();\n   * assertThat(myOptional.get()).contains(\"foo\");\n   * }</pre>\n   */\n  public void hasValue(@Nullable Object expected) {<FILL_FUNCTION_BODY>}\n\n  /**\n   * Obsolete factory instance. This factory was previously necessary for assertions like {@code\n   * assertWithMessage(...).about(paths()).that(path)....}. Now, you can perform assertions like\n   * that without the {@code about(...)} call.\n   *\n   * @deprecated Instead of {@code about(optionals()).that(...)}, use just {@code that(...)}.\n   *     Similarly, instead of {@code assertAbout(optionals()).that(...)}, use just {@code\n   *     assertThat(...)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"InlineMeSuggester\") // We want users to remove the surrounding call entirely.\n  public static Factory<OptionalSubject, Optional<?>> optionals() {\n    return (metadata, subject) -> new OptionalSubject(metadata, subject, \"optional\");\n  }\n}", "metadata": {"task_id": "google_truth/136", "ground_truth": "\n    if (expected == null) {\n      throw new NullPointerException(\"Optional cannot have a null value.\");\n    }\n    if (actual == null) {\n      failWithActual(\"expected an optional with value\", expected);\n    } else if (!actual.isPresent()) {\n      failWithoutActual(fact(\"expected to have value\", expected), simpleFact(\"but was empty\"));\n    } else {\n      checkNoNeedToDisplayBothValues(\"get()\").that(actual.get()).isEqualTo(expected);\n    }\n  ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "OptionalSubject.java"], "context_start_lineno": 0, "function_name": "hasValue", "left_context": "class OptionalSubject extends Subject {\n  @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n  private final @Nullable Optional<?> actual;\n\n  OptionalSubject(\n      FailureMetadata failureMetadata,\n      @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n          @Nullable Optional<?> subject,\n      @Nullable String typeDescription) {\n    super(failureMetadata, subject, typeDescription);\n    this.actual = subject;\n  }\n\n  // TODO(cpovirk): Consider making OptionalIntSubject and OptionalLongSubject delegate to this.\n\n  /** Fails if the {@link Optional}{@code <T>} is empty or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link Optional}{@code <T>} is present or the subject is null. */\n  public void isEmpty() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected empty optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be empty\"), fact(\"but was present with value\", actual.get()));\n    }\n  }\n\n  /**\n   * Fails if the {@link Optional}{@code <T>} does not have the given value or the subject is null.\n   *\n   * <p>To make more complex assertions on the optional's value split your assertion in two:\n   *\n   * <pre>{@code\n   * assertThat(myOptional).isPresent();\n   * assertThat(myOptional.get()).contains(\"foo\");\n   * }</pre>\n   */\n  public void hasValue(@Nullable Object expected) {", "right_context": "}\n\n  /**\n   * Obsolete factory instance. This factory was previously necessary for assertions like {@code\n   * assertWithMessage(...).about(paths()).that(path)....}. Now, you can perform assertions like\n   * that without the {@code about(...)} call.\n   *\n   * @deprecated Instead of {@code about(optionals()).that(...)}, use just {@code that(...)}.\n   *     Similarly, instead of {@code assertAbout(optionals()).that(...)}, use just {@code\n   *     assertThat(...)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"InlineMeSuggester\") // We want users to remove the surrounding call entirely.\n  public static Factory<OptionalSubject, Optional<?>> optionals() {\n    return (metadata, subject) -> new OptionalSubject(metadata, subject, \"optional\");\n  }\n}", "class_name": "OptionalSubject", "return_type": "void", "parameters": [{"type": "Object", "name": "expected"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ExpectationGatherer implements FailureStrategy {\n    @GuardedBy(\"this\")\n    private final List<AssertionError> failures = new ArrayList<>();\n\n    @GuardedBy(\"this\")\n    private TestPhase inRuleContext = BEFORE;\n\n    ExpectationGatherer() {}\n\n    @Override\n    public synchronized void fail(AssertionError failure) {\n      record(failure);\n    }\n\n    synchronized void enterRuleContext() {\n      checkState(inRuleContext == BEFORE);\n      inRuleContext = DURING;\n    }\n\n    synchronized void leaveRuleContext(@Nullable Throwable caught) throws Throwable {\n      try {\n        if (caught == null) {\n          doLeaveRuleContext();\n        } else {\n          doLeaveRuleContext(caught);\n        }\n        /*\n         * We'd like to check this even if an exception was thrown, but we don't want to override\n         * the \"real\" failure. TODO(cpovirk): Maybe attach as a suppressed exception once we require\n         * a newer version of Android.\n         */\n        checkState(inRuleContext == DURING);\n      } finally {\n        inRuleContext = AFTER;\n      }\n    }\n\n    synchronized void checkInRuleContext() {\n      doCheckInRuleContext(null);\n    }\n\n    synchronized boolean hasFailures() {\n      return !failures.isEmpty();\n    }\n\n    @Override\n    public synchronized String toString() {\n      if (failures.isEmpty()) {\n        return \"No expectation failed.\";\n      }\n      int numFailures = failures.size();\n      StringBuilder message =\n          new StringBuilder()\n              .append(numFailures)\n              .append(numFailures > 1 ? \" expectations\" : \" expectation\")\n              .append(\" failed:\\n\");\n      int countLength = String.valueOf(failures.size() + 1).length();\n      int count = 0;\n      for (AssertionError failure : failures) {\n        count++;\n        message.append(\"  \");\n        message.append(padStart(String.valueOf(count), countLength, ' '));\n        message.append(\". \");\n        if (count == 1) {\n          appendIndented(countLength, message, getStackTraceAsString(failure));\n        } else {\n          appendIndented(\n              countLength,\n              message,\n              printSubsequentFailure(failures.get(0).getStackTrace(), failure));\n        }\n        message.append(\"\\n\");\n      }\n\n      return message.toString();\n    }\n\n    // String.repeat is not available under Java 8 and old versions of Android.\n    @SuppressWarnings({\"StringsRepeat\", \"InlineMeInliner\"})\n    private static void appendIndented(int countLength, StringBuilder builder, String toAppend) {\n      int indent = countLength + 4; // \"  \" and \". \"\n      builder.append(toAppend.replace(\"\\n\", \"\\n\" + repeat(\" \", indent)));\n    }\n\n    private String printSubsequentFailure(\n        StackTraceElement[] baseTraceFrames, AssertionError toPrint) {\n      Exception e = new RuntimeException(\"__EXCEPTION_MARKER__\", toPrint);\n      e.setStackTrace(baseTraceFrames);\n      String s = Throwables.getStackTraceAsString(e);\n      // Force single line reluctant matching\n      return s.replaceFirst(\"(?s)^.*?__EXCEPTION_MARKER__.*?Caused by:\\\\s+\", \"\");\n    }\n\n    @GuardedBy(\"this\")\n    private void doCheckInRuleContext(@Nullable AssertionError failure) {<FILL_FUNCTION_BODY>}\n\n    @GuardedBy(\"this\")\n    private void doLeaveRuleContext() {\n      if (hasFailures()) {\n        throw SimpleAssertionError.createWithNoStack(this.toString());\n      }\n    }\n\n    @GuardedBy(\"this\")\n    private void doLeaveRuleContext(Throwable caught) throws Throwable {\n      if (hasFailures()) {\n        String message =\n            caught instanceof AssumptionViolatedException\n                ? \"Also, after those failures, an assumption was violated:\"\n                : \"Also, after those failures, an exception was thrown:\";\n        record(SimpleAssertionError.createWithNoStack(message, caught));\n        throw SimpleAssertionError.createWithNoStack(this.toString());\n      } else {\n        throw caught;\n      }\n    }\n\n    @GuardedBy(\"this\")\n    private void record(AssertionError failure) {\n      doCheckInRuleContext(failure);\n      failures.add(failure);\n    }\n  }", "metadata": {"task_id": "google_truth/146", "ground_truth": "\n      switch (inRuleContext) {\n        case BEFORE:\n          throw new IllegalStateException(\n              \"assertion made on Expect instance, but it's not enabled as a @Rule.\", failure);\n        case DURING:\n          return;\n        case AFTER:\n          throw new IllegalStateException(\n              \"assertion made on Expect instance, but its @Rule has already completed. Maybe \"\n                  + \"you're making assertions from a background thread and not waiting for them to \"\n                  + \"complete, or maybe you've shared an Expect instance across multiple tests? \"\n                  + \"We're throwing this exception to warn you that your assertion would have been \"\n                  + \"ignored. However, this exception might not cause any test to fail, or it \"\n                  + \"might cause some subsequent test to fail rather than the test that caused the \"\n                  + \"problem.\",\n              failure);\n      }\n      throw new AssertionError();\n    ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "Expect.java"], "context_start_lineno": 0, "function_name": "doCheckInRuleContext", "left_context": "class ExpectationGatherer implements FailureStrategy {\n    @GuardedBy(\"this\")\n    private final List<AssertionError> failures = new ArrayList<>();\n\n    @GuardedBy(\"this\")\n    private TestPhase inRuleContext = BEFORE;\n\n    ExpectationGatherer() {}\n\n    @Override\n    public synchronized void fail(AssertionError failure) {\n      record(failure);\n    }\n\n    synchronized void enterRuleContext() {\n      checkState(inRuleContext == BEFORE);\n      inRuleContext = DURING;\n    }\n\n    synchronized void leaveRuleContext(@Nullable Throwable caught) throws Throwable {\n      try {\n        if (caught == null) {\n          doLeaveRuleContext();\n        } else {\n          doLeaveRuleContext(caught);\n        }\n        /*\n         * We'd like to check this even if an exception was thrown, but we don't want to override\n         * the \"real\" failure. TODO(cpovirk): Maybe attach as a suppressed exception once we require\n         * a newer version of Android.\n         */\n        checkState(inRuleContext == DURING);\n      } finally {\n        inRuleContext = AFTER;\n      }\n    }\n\n    synchronized void checkInRuleContext() {\n      doCheckInRuleContext(null);\n    }\n\n    synchronized boolean hasFailures() {\n      return !failures.isEmpty();\n    }\n\n    @Override\n    public synchronized String toString() {\n      if (failures.isEmpty()) {\n        return \"No expectation failed.\";\n      }\n      int numFailures = failures.size();\n      StringBuilder message =\n          new StringBuilder()\n              .append(numFailures)\n              .append(numFailures > 1 ? \" expectations\" : \" expectation\")\n              .append(\" failed:\\n\");\n      int countLength = String.valueOf(failures.size() + 1).length();\n      int count = 0;\n      for (AssertionError failure : failures) {\n        count++;\n        message.append(\"  \");\n        message.append(padStart(String.valueOf(count), countLength, ' '));\n        message.append(\". \");\n        if (count == 1) {\n          appendIndented(countLength, message, getStackTraceAsString(failure));\n        } else {\n          appendIndented(\n              countLength,\n              message,\n              printSubsequentFailure(failures.get(0).getStackTrace(), failure));\n        }\n        message.append(\"\\n\");\n      }\n\n      return message.toString();\n    }\n\n    // String.repeat is not available under Java 8 and old versions of Android.\n    @SuppressWarnings({\"StringsRepeat\", \"InlineMeInliner\"})\n    private static void appendIndented(int countLength, StringBuilder builder, String toAppend) {\n      int indent = countLength + 4; // \"  \" and \". \"\n      builder.append(toAppend.replace(\"\\n\", \"\\n\" + repeat(\" \", indent)));\n    }\n\n    private String printSubsequentFailure(\n        StackTraceElement[] baseTraceFrames, AssertionError toPrint) {\n      Exception e = new RuntimeException(\"__EXCEPTION_MARKER__\", toPrint);\n      e.setStackTrace(baseTraceFrames);\n      String s = Throwables.getStackTraceAsString(e);\n      // Force single line reluctant matching\n      return s.replaceFirst(\"(?s)^.*?__EXCEPTION_MARKER__.*?Caused by:\\\\s+\", \"\");\n    }\n\n    @GuardedBy(\"this\")\n    private void doCheckInRuleContext(@Nullable AssertionError failure) {", "right_context": "}\n\n    @GuardedBy(\"this\")\n    private void doLeaveRuleContext() {\n      if (hasFailures()) {\n        throw SimpleAssertionError.createWithNoStack(this.toString());\n      }\n    }\n\n    @GuardedBy(\"this\")\n    private void doLeaveRuleContext(Throwable caught) throws Throwable {\n      if (hasFailures()) {\n        String message =\n            caught instanceof AssumptionViolatedException\n                ? \"Also, after those failures, an assumption was violated:\"\n                : \"Also, after those failures, an exception was thrown:\";\n        record(SimpleAssertionError.createWithNoStack(message, caught));\n        throw SimpleAssertionError.createWithNoStack(this.toString());\n      } else {\n        throw caught;\n      }\n    }\n\n    @GuardedBy(\"this\")\n    private void record(AssertionError failure) {\n      doCheckInRuleContext(failure);\n      failures.add(failure);\n    }\n  }", "class_name": "ExpectationGatherer", "return_type": "void", "parameters": [{"type": "AssertionError", "name": "failure"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass GuavaOptionalSubject extends Subject {\n  @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n  private final @Nullable Optional<?> actual;\n\n  GuavaOptionalSubject(\n      FailureMetadata metadata,\n      @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n          @Nullable Optional<?> actual,\n      @Nullable String typeDescription) {\n    super(metadata, actual, typeDescription);\n    this.actual = actual;\n  }\n\n  /** Fails if the {@link Optional}{@code <T>} is absent or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link Optional}{@code <T>} is present or the subject is null. */\n  public void isAbsent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected absent optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be absent\"), fact(\"but was present with value\", actual.get()));\n    }\n  }\n\n  /**\n   * Fails if the {@link Optional}{@code <T>} does not have the given value or the subject is null.\n   *\n   * <p>To make more complex assertions on the optional's value split your assertion in two:\n   *\n   * <pre>{@code\n   * assertThat(myOptional).isPresent();\n   * assertThat(myOptional.get()).contains(\"foo\");\n   * }</pre>\n   */\n  public void hasValue(@Nullable Object expected) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "google_truth/150", "ground_truth": "\n    if (expected == null) {\n      throw new NullPointerException(\"Optional cannot have a null value.\");\n    }\n    if (actual == null) {\n      failWithActual(\"expected an optional with value\", expected);\n    } else if (!actual.isPresent()) {\n      failWithoutActual(fact(\"expected to have value\", expected), simpleFact(\"but was absent\"));\n    } else {\n      checkNoNeedToDisplayBothValues(\"get()\").that(actual.get()).isEqualTo(expected);\n    }\n  ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "GuavaOptionalSubject.java"], "context_start_lineno": 0, "function_name": "hasValue", "left_context": "class GuavaOptionalSubject extends Subject {\n  @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n  private final @Nullable Optional<?> actual;\n\n  GuavaOptionalSubject(\n      FailureMetadata metadata,\n      @SuppressWarnings(\"NullableOptional\") // Truth always accepts nulls, no matter the type\n          @Nullable Optional<?> actual,\n      @Nullable String typeDescription) {\n    super(metadata, actual, typeDescription);\n    this.actual = actual;\n  }\n\n  /** Fails if the {@link Optional}{@code <T>} is absent or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link Optional}{@code <T>} is present or the subject is null. */\n  public void isAbsent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected absent optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be absent\"), fact(\"but was present with value\", actual.get()));\n    }\n  }\n\n  /**\n   * Fails if the {@link Optional}{@code <T>} does not have the given value or the subject is null.\n   *\n   * <p>To make more complex assertions on the optional's value split your assertion in two:\n   *\n   * <pre>{@code\n   * assertThat(myOptional).isPresent();\n   * assertThat(myOptional.get()).contains(\"foo\");\n   * }</pre>\n   */\n  public void hasValue(@Nullable Object expected) {", "right_context": "}\n}", "class_name": "GuavaOptionalSubject", "return_type": "void", "parameters": [{"type": "Object", "name": "expected"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ExceptionStore {\n\n    private final String argumentLabel;\n    private @Nullable StoredException firstCompareException = null;\n    private @Nullable StoredException firstPairingException = null;\n    private @Nullable StoredException firstFormatDiffException = null;\n\n    static ExceptionStore forIterable() {\n      return new ExceptionStore(\"elements\");\n    }\n\n    static ExceptionStore forMapValues() {\n      return new ExceptionStore(\"values\");\n    }\n\n    private ExceptionStore(String argumentLabel) {\n      this.argumentLabel = argumentLabel;\n    }\n\n    /**\n     * Adds an exception that was thrown during a {@code compare} call.\n     *\n     * @param callingClass The class from which the {@code compare} method was called. When\n     *     reporting failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param actual The {@code actual} argument to the {@code compare} call during which the\n     *     exception was encountered\n     * @param expected The {@code expected} argument to the {@code compare} call during which the\n     *     exception was encountered\n     */\n    void addCompareException(\n        Class<?> callingClass,\n        Exception exception,\n        @Nullable Object actual,\n        @Nullable Object expected) {\n      if (firstCompareException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstCompareException = new StoredException(exception, \"compare\", asList(actual, expected));\n      }\n    }\n\n    /**\n     * Adds an exception that was thrown during an {@code apply} call on the function used to key\n     * actual elements.\n     *\n     * @param callingClass The class from which the {@code apply} method was called. When reporting\n     *     failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param actual The {@code actual} argument to the {@code apply} call during which the\n     *     exception was encountered\n     */\n    void addActualKeyFunctionException(\n        Class<?> callingClass, Exception exception, @Nullable Object actual) {\n      if (firstPairingException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstPairingException =\n            new StoredException(exception, \"actualKeyFunction.apply\", asList(actual));\n      }\n    }\n\n    /**\n     * Adds an exception that was thrown during an {@code apply} call on the function used to key\n     * expected elements.\n     *\n     * @param callingClass The class from which the {@code apply} method was called. When reporting\n     *     failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param expected The {@code expected} argument to the {@code apply} call during which the\n     *     exception was encountered\n     */\n    void addExpectedKeyFunctionException(\n        Class<?> callingClass, Exception exception, @Nullable Object expected) {\n      if (firstPairingException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstPairingException =\n            new StoredException(exception, \"expectedKeyFunction.apply\", asList(expected));\n      }\n    }\n\n    /**\n     * Adds an exception that was thrown during a {@code formatDiff} call.\n     *\n     * @param callingClass The class from which the {@code formatDiff} method was called. When\n     *     reporting failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param actual The {@code actual} argument to the {@code formatDiff} call during which the\n     *     exception was encountered\n     * @param expected The {@code expected} argument to the {@code formatDiff} call during which the\n     *     exception was encountered\n     */\n    void addFormatDiffException(\n        Class<?> callingClass,\n        Exception exception,\n        @Nullable Object actual,\n        @Nullable Object expected) {\n      if (firstFormatDiffException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstFormatDiffException =\n            new StoredException(exception, \"formatDiff\", asList(actual, expected));\n      }\n    }\n\n    /** Returns whether any exceptions thrown during {@code compare} calls were stored. */\n    boolean hasCompareException() {\n      return firstCompareException != null;\n    }\n\n    /**\n     * Returns facts to use in a failure message when the exceptions from {@code compare} calls are\n     * the main cause of the failure. At least one exception thrown during a {@code compare} call\n     * must have been stored, and no exceptions from a {@code formatDiff} call. Assertions should\n     * use this when exceptions were thrown while comparing elements and no more meaningful failure\n     * was discovered by assuming a false return and continuing (see the javadoc for {@link\n     * Correspondence#compare}). C.f. {@link #describeAsAdditionalInfo}.\n     */\n    ImmutableList<Fact> describeAsMainCause() {\n      checkState(firstCompareException != null);\n      // We won't do pairing or diff formatting unless a more meaningful failure was found, and if a\n      // more meaningful failure was found then we shouldn't be using this method:\n      checkState(firstPairingException == null);\n      checkState(firstFormatDiffException == null);\n      return ImmutableList.of(\n          simpleFact(\"one or more exceptions were thrown while comparing \" + argumentLabel),\n          fact(\"first exception\", firstCompareException.describe()));\n    }\n\n    /**\n     * If any exceptions are stored, returns facts to use in a failure message when the exceptions\n     * should be noted as additional info; if empty, returns an empty list. Assertions should use\n     * this when exceptions were thrown while comparing elements but more meaningful failures were\n     * discovered by assuming a false return and continuing (see the javadoc for {@link\n     * Correspondence#compare}), or when exceptions were thrown by other methods while generating\n     * the failure message. C.f. {@link #describeAsMainCause}.\n     */\n    ImmutableList<Fact> describeAsAdditionalInfo() {\n      ImmutableList.Builder<Fact> builder = ImmutableList.builder();\n      if (firstCompareException != null) {\n        builder.add(\n            simpleFact(\n                \"additionally, one or more exceptions were thrown while comparing \"\n                    + argumentLabel));\n        builder.add(fact(\"first exception\", firstCompareException.describe()));\n      }\n      if (firstPairingException != null) {\n        builder.add(\n            simpleFact(\n                \"additionally, one or more exceptions were thrown while keying \"\n                    + argumentLabel\n                    + \" for pairing\"));\n        builder.add(fact(\"first exception\", firstPairingException.describe()));\n      }\n      if (firstFormatDiffException != null) {\n        builder.add(\n            simpleFact(\"additionally, one or more exceptions were thrown while formatting diffs\"));\n        builder.add(fact(\"first exception\", firstFormatDiffException.describe()));\n      }\n      return builder.build();\n    }\n\n    private static void truncateStackTrace(Exception exception, Class<?> callingClass) {<FILL_FUNCTION_BODY>}\n  }", "metadata": {"task_id": "google_truth/153", "ground_truth": "\n      StackTraceElement[] original = exception.getStackTrace();\n      int keep = 0;\n      while (keep < original.length\n          && !original[keep].getClassName().equals(callingClass.getName())) {\n        keep++;\n      }\n      exception.setStackTrace(Arrays.copyOf(original, keep));\n    ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "Correspondence.java"], "context_start_lineno": 0, "function_name": "truncateStackTrace", "left_context": "class ExceptionStore {\n\n    private final String argumentLabel;\n    private @Nullable StoredException firstCompareException = null;\n    private @Nullable StoredException firstPairingException = null;\n    private @Nullable StoredException firstFormatDiffException = null;\n\n    static ExceptionStore forIterable() {\n      return new ExceptionStore(\"elements\");\n    }\n\n    static ExceptionStore forMapValues() {\n      return new ExceptionStore(\"values\");\n    }\n\n    private ExceptionStore(String argumentLabel) {\n      this.argumentLabel = argumentLabel;\n    }\n\n    /**\n     * Adds an exception that was thrown during a {@code compare} call.\n     *\n     * @param callingClass The class from which the {@code compare} method was called. When\n     *     reporting failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param actual The {@code actual} argument to the {@code compare} call during which the\n     *     exception was encountered\n     * @param expected The {@code expected} argument to the {@code compare} call during which the\n     *     exception was encountered\n     */\n    void addCompareException(\n        Class<?> callingClass,\n        Exception exception,\n        @Nullable Object actual,\n        @Nullable Object expected) {\n      if (firstCompareException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstCompareException = new StoredException(exception, \"compare\", asList(actual, expected));\n      }\n    }\n\n    /**\n     * Adds an exception that was thrown during an {@code apply} call on the function used to key\n     * actual elements.\n     *\n     * @param callingClass The class from which the {@code apply} method was called. When reporting\n     *     failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param actual The {@code actual} argument to the {@code apply} call during which the\n     *     exception was encountered\n     */\n    void addActualKeyFunctionException(\n        Class<?> callingClass, Exception exception, @Nullable Object actual) {\n      if (firstPairingException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstPairingException =\n            new StoredException(exception, \"actualKeyFunction.apply\", asList(actual));\n      }\n    }\n\n    /**\n     * Adds an exception that was thrown during an {@code apply} call on the function used to key\n     * expected elements.\n     *\n     * @param callingClass The class from which the {@code apply} method was called. When reporting\n     *     failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param expected The {@code expected} argument to the {@code apply} call during which the\n     *     exception was encountered\n     */\n    void addExpectedKeyFunctionException(\n        Class<?> callingClass, Exception exception, @Nullable Object expected) {\n      if (firstPairingException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstPairingException =\n            new StoredException(exception, \"expectedKeyFunction.apply\", asList(expected));\n      }\n    }\n\n    /**\n     * Adds an exception that was thrown during a {@code formatDiff} call.\n     *\n     * @param callingClass The class from which the {@code formatDiff} method was called. When\n     *     reporting failures, stack traces will be truncated above elements in this class.\n     * @param exception The exception encountered\n     * @param actual The {@code actual} argument to the {@code formatDiff} call during which the\n     *     exception was encountered\n     * @param expected The {@code expected} argument to the {@code formatDiff} call during which the\n     *     exception was encountered\n     */\n    void addFormatDiffException(\n        Class<?> callingClass,\n        Exception exception,\n        @Nullable Object actual,\n        @Nullable Object expected) {\n      if (firstFormatDiffException == null) {\n        truncateStackTrace(exception, callingClass);\n        firstFormatDiffException =\n            new StoredException(exception, \"formatDiff\", asList(actual, expected));\n      }\n    }\n\n    /** Returns whether any exceptions thrown during {@code compare} calls were stored. */\n    boolean hasCompareException() {\n      return firstCompareException != null;\n    }\n\n    /**\n     * Returns facts to use in a failure message when the exceptions from {@code compare} calls are\n     * the main cause of the failure. At least one exception thrown during a {@code compare} call\n     * must have been stored, and no exceptions from a {@code formatDiff} call. Assertions should\n     * use this when exceptions were thrown while comparing elements and no more meaningful failure\n     * was discovered by assuming a false return and continuing (see the javadoc for {@link\n     * Correspondence#compare}). C.f. {@link #describeAsAdditionalInfo}.\n     */\n    ImmutableList<Fact> describeAsMainCause() {\n      checkState(firstCompareException != null);\n      // We won't do pairing or diff formatting unless a more meaningful failure was found, and if a\n      // more meaningful failure was found then we shouldn't be using this method:\n      checkState(firstPairingException == null);\n      checkState(firstFormatDiffException == null);\n      return ImmutableList.of(\n          simpleFact(\"one or more exceptions were thrown while comparing \" + argumentLabel),\n          fact(\"first exception\", firstCompareException.describe()));\n    }\n\n    /**\n     * If any exceptions are stored, returns facts to use in a failure message when the exceptions\n     * should be noted as additional info; if empty, returns an empty list. Assertions should use\n     * this when exceptions were thrown while comparing elements but more meaningful failures were\n     * discovered by assuming a false return and continuing (see the javadoc for {@link\n     * Correspondence#compare}), or when exceptions were thrown by other methods while generating\n     * the failure message. C.f. {@link #describeAsMainCause}.\n     */\n    ImmutableList<Fact> describeAsAdditionalInfo() {\n      ImmutableList.Builder<Fact> builder = ImmutableList.builder();\n      if (firstCompareException != null) {\n        builder.add(\n            simpleFact(\n                \"additionally, one or more exceptions were thrown while comparing \"\n                    + argumentLabel));\n        builder.add(fact(\"first exception\", firstCompareException.describe()));\n      }\n      if (firstPairingException != null) {\n        builder.add(\n            simpleFact(\n                \"additionally, one or more exceptions were thrown while keying \"\n                    + argumentLabel\n                    + \" for pairing\"));\n        builder.add(fact(\"first exception\", firstPairingException.describe()));\n      }\n      if (firstFormatDiffException != null) {\n        builder.add(\n            simpleFact(\"additionally, one or more exceptions were thrown while formatting diffs\"));\n        builder.add(fact(\"first exception\", firstFormatDiffException.describe()));\n      }\n      return builder.build();\n    }\n\n    private static void truncateStackTrace(Exception exception, Class<?> callingClass) {", "right_context": "}\n  }", "class_name": "ExceptionStore", "return_type": "void", "parameters": [{"type": "Exception", "name": "exception"}, {"type": "Class<?>", "name": "callingClass"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AnyUtils {\n  private static final FieldDescriptor TYPE_URL_FIELD_DESCRIPTOR =\n      Any.getDescriptor().findFieldByNumber(Any.TYPE_URL_FIELD_NUMBER);\n\n  static FieldDescriptor typeUrlFieldDescriptor() {\n    return TYPE_URL_FIELD_DESCRIPTOR;\n  }\n\n  private static final SubScopeId TYPE_URL_SUB_SCOPE_ID = SubScopeId.of(TYPE_URL_FIELD_DESCRIPTOR);\n\n  static SubScopeId typeUrlSubScopeId() {\n    return TYPE_URL_SUB_SCOPE_ID;\n  }\n\n  private static final FieldDescriptor VALUE_FIELD_DESCRIPTOR =\n      Any.getDescriptor().findFieldByNumber(Any.VALUE_FIELD_NUMBER);\n\n  static FieldDescriptor valueFieldDescriptor() {\n    return VALUE_FIELD_DESCRIPTOR;\n  }\n\n  private static final SubScopeId VALUE_SUB_SCOPE_ID = SubScopeId.of(VALUE_FIELD_DESCRIPTOR);\n\n  static SubScopeId valueSubScopeId() {\n    return VALUE_SUB_SCOPE_ID;\n  }\n\n  private static final TypeRegistry DEFAULT_TYPE_REGISTRY = TypeRegistry.getEmptyTypeRegistry();\n\n  static TypeRegistry defaultTypeRegistry() {\n    return DEFAULT_TYPE_REGISTRY;\n  }\n\n  private static final ExtensionRegistry DEFAULT_EXTENSION_REGISTRY =\n      ExtensionRegistry.getEmptyRegistry();\n\n  static ExtensionRegistry defaultExtensionRegistry() {\n    return DEFAULT_EXTENSION_REGISTRY;\n  }\n\n  /** Unpack an `Any` proto using the given TypeRegistry and ExtensionRegistry. */\n  static Optional<Message> unpack(\n      Message any, TypeRegistry typeRegistry, ExtensionRegistry extensionRegistry) {<FILL_FUNCTION_BODY>}\n\n  private AnyUtils() {}\n}", "metadata": {"task_id": "google_truth/177", "ground_truth": "\n    Preconditions.checkArgument(\n        any.getDescriptorForType().equals(Any.getDescriptor()),\n        \"Expected type google.protobuf.Any, but was: %s\",\n        any.getDescriptorForType().getFullName());\n\n    String typeUrl = (String) any.getField(typeUrlFieldDescriptor());\n    ByteString value = (ByteString) any.getField(valueFieldDescriptor());\n\n    try {\n      Descriptor descriptor = typeRegistry.getDescriptorForTypeUrl(typeUrl);\n      if (descriptor == null) {\n        return Optional.absent();\n      }\n\n      Message defaultMessage = DynamicMessage.parseFrom(descriptor, value, extensionRegistry);\n      return Optional.of(defaultMessage);\n    } catch (InvalidProtocolBufferException e) {\n      return Optional.absent();\n    }\n  ", "fpath_tuple": ["google_truth", "truth", "extensions", "proto", "src", "main", "java", "com", "google", "common", "truth", "extensions", "proto", "AnyUtils.java"], "context_start_lineno": 0, "function_name": "unpack", "left_context": "class AnyUtils {\n  private static final FieldDescriptor TYPE_URL_FIELD_DESCRIPTOR =\n      Any.getDescriptor().findFieldByNumber(Any.TYPE_URL_FIELD_NUMBER);\n\n  static FieldDescriptor typeUrlFieldDescriptor() {\n    return TYPE_URL_FIELD_DESCRIPTOR;\n  }\n\n  private static final SubScopeId TYPE_URL_SUB_SCOPE_ID = SubScopeId.of(TYPE_URL_FIELD_DESCRIPTOR);\n\n  static SubScopeId typeUrlSubScopeId() {\n    return TYPE_URL_SUB_SCOPE_ID;\n  }\n\n  private static final FieldDescriptor VALUE_FIELD_DESCRIPTOR =\n      Any.getDescriptor().findFieldByNumber(Any.VALUE_FIELD_NUMBER);\n\n  static FieldDescriptor valueFieldDescriptor() {\n    return VALUE_FIELD_DESCRIPTOR;\n  }\n\n  private static final SubScopeId VALUE_SUB_SCOPE_ID = SubScopeId.of(VALUE_FIELD_DESCRIPTOR);\n\n  static SubScopeId valueSubScopeId() {\n    return VALUE_SUB_SCOPE_ID;\n  }\n\n  private static final TypeRegistry DEFAULT_TYPE_REGISTRY = TypeRegistry.getEmptyTypeRegistry();\n\n  static TypeRegistry defaultTypeRegistry() {\n    return DEFAULT_TYPE_REGISTRY;\n  }\n\n  private static final ExtensionRegistry DEFAULT_EXTENSION_REGISTRY =\n      ExtensionRegistry.getEmptyRegistry();\n\n  static ExtensionRegistry defaultExtensionRegistry() {\n    return DEFAULT_EXTENSION_REGISTRY;\n  }\n\n  /** Unpack an `Any` proto using the given TypeRegistry and ExtensionRegistry. */\n  static Optional<Message> unpack(\n      Message any, TypeRegistry typeRegistry, ExtensionRegistry extensionRegistry) {", "right_context": "}\n\n  private AnyUtils() {}\n}", "class_name": "AnyUtils", "return_type": "Optional<Message>", "parameters": [{"type": "Message", "name": "any"}, {"type": "TypeRegistry", "name": "typeRegistry"}, {"type": "ExtensionRegistry", "name": "extensionRegistry"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass UsingCorrespondence<M extends Message>\n      implements IterableOfProtosUsingCorrespondence<M> {\n    private final IterableOfProtosSubject<M> subject;\n    private final @Nullable Function<? super M, ? extends Object> keyFunction;\n\n    UsingCorrespondence(\n        IterableOfProtosSubject<M> subject,\n        @Nullable Function<? super M, ? extends Object> keyFunction) {\n      this.subject = checkNotNull(subject);\n      this.keyFunction = keyFunction;\n    }\n\n    private IterableSubject.UsingCorrespondence<M, M> delegate(Iterable<? extends M> messages) {<FILL_FUNCTION_BODY>}\n\n    @Override\n    public IterableOfProtosUsingCorrespondence<M> displayingDiffsPairedBy(\n        Function<? super M, ?> keyFunction) {\n      return new UsingCorrespondence<M>(subject, checkNotNull(keyFunction));\n    }\n\n    @Override\n    public void contains(@Nullable M expected) {\n      delegate(Arrays.asList(expected)).contains(expected);\n    }\n\n    @Override\n    public void doesNotContain(@Nullable M excluded) {\n      delegate(Arrays.asList(excluded)).doesNotContain(excluded);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsExactly(@Nullable M... expected) {\n      return delegate(Arrays.asList(expected)).containsExactly(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsExactlyElementsIn(Iterable<? extends M> expected) {\n      return delegate(expected).containsExactlyElementsIn(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsExactlyElementsIn(M[] expected) {\n      return delegate(Arrays.asList(expected)).containsExactlyElementsIn(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsAtLeast(@Nullable M first, @Nullable M second, @Nullable M... rest) {\n      return delegate(Lists.asList(first, second, rest)).containsAtLeast(first, second, rest);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsAtLeastElementsIn(Iterable<? extends M> expected) {\n      return delegate(expected).containsAtLeastElementsIn(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsAtLeastElementsIn(M[] expected) {\n      return delegate(Arrays.asList(expected)).containsAtLeastElementsIn(expected);\n    }\n\n    @Override\n    public void containsAnyOf(@Nullable M first, @Nullable M second, @Nullable M... rest) {\n      delegate(Lists.asList(first, second, rest)).containsAnyOf(first, second, rest);\n    }\n\n    @Override\n    public void containsAnyIn(Iterable<? extends M> expected) {\n      delegate(expected).containsAnyIn(expected);\n    }\n\n    @Override\n    public void containsAnyIn(M[] expected) {\n      delegate(Arrays.asList(expected)).containsAnyIn(expected);\n    }\n\n    @Override\n    public void containsNoneOf(\n        @Nullable M firstExcluded, @Nullable M secondExcluded, @Nullable M... restOfExcluded) {\n      delegate(Lists.asList(firstExcluded, secondExcluded, restOfExcluded))\n          .containsNoneOf(firstExcluded, secondExcluded, restOfExcluded);\n    }\n\n    @Override\n    public void containsNoneIn(Iterable<? extends M> excluded) {\n      delegate(excluded).containsNoneIn(excluded);\n    }\n\n    @Override\n    public void containsNoneIn(M[] excluded) {\n      delegate(Arrays.asList(excluded)).containsNoneIn(excluded);\n    }\n  }", "metadata": {"task_id": "google_truth/210", "ground_truth": "\n      IterableSubject.UsingCorrespondence<M, M> usingCorrespondence =\n          subject.comparingElementsUsing(\n              subject\n                  .config\n                  .withExpectedMessages(messages)\n                  .<M>toCorrespondence(FieldScopeUtil.getSingleDescriptor(subject.actual)));\n      if (keyFunction != null) {\n        usingCorrespondence = usingCorrespondence.displayingDiffsPairedBy(keyFunction);\n      }\n      return usingCorrespondence;\n    ", "fpath_tuple": ["google_truth", "truth", "extensions", "proto", "src", "main", "java", "com", "google", "common", "truth", "extensions", "proto", "IterableOfProtosSubject.java"], "context_start_lineno": 0, "function_name": "delegate", "left_context": "class UsingCorrespondence<M extends Message>\n      implements IterableOfProtosUsingCorrespondence<M> {\n    private final IterableOfProtosSubject<M> subject;\n    private final @Nullable Function<? super M, ? extends Object> keyFunction;\n\n    UsingCorrespondence(\n        IterableOfProtosSubject<M> subject,\n        @Nullable Function<? super M, ? extends Object> keyFunction) {\n      this.subject = checkNotNull(subject);\n      this.keyFunction = keyFunction;\n    }\n\n    private IterableSubject.UsingCorrespondence<M, M> delegate(Iterable<? extends M> messages) {", "right_context": "}\n\n    @Override\n    public IterableOfProtosUsingCorrespondence<M> displayingDiffsPairedBy(\n        Function<? super M, ?> keyFunction) {\n      return new UsingCorrespondence<M>(subject, checkNotNull(keyFunction));\n    }\n\n    @Override\n    public void contains(@Nullable M expected) {\n      delegate(Arrays.asList(expected)).contains(expected);\n    }\n\n    @Override\n    public void doesNotContain(@Nullable M excluded) {\n      delegate(Arrays.asList(excluded)).doesNotContain(excluded);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsExactly(@Nullable M... expected) {\n      return delegate(Arrays.asList(expected)).containsExactly(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsExactlyElementsIn(Iterable<? extends M> expected) {\n      return delegate(expected).containsExactlyElementsIn(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsExactlyElementsIn(M[] expected) {\n      return delegate(Arrays.asList(expected)).containsExactlyElementsIn(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsAtLeast(@Nullable M first, @Nullable M second, @Nullable M... rest) {\n      return delegate(Lists.asList(first, second, rest)).containsAtLeast(first, second, rest);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsAtLeastElementsIn(Iterable<? extends M> expected) {\n      return delegate(expected).containsAtLeastElementsIn(expected);\n    }\n\n    @Override\n    @CanIgnoreReturnValue\n    public Ordered containsAtLeastElementsIn(M[] expected) {\n      return delegate(Arrays.asList(expected)).containsAtLeastElementsIn(expected);\n    }\n\n    @Override\n    public void containsAnyOf(@Nullable M first, @Nullable M second, @Nullable M... rest) {\n      delegate(Lists.asList(first, second, rest)).containsAnyOf(first, second, rest);\n    }\n\n    @Override\n    public void containsAnyIn(Iterable<? extends M> expected) {\n      delegate(expected).containsAnyIn(expected);\n    }\n\n    @Override\n    public void containsAnyIn(M[] expected) {\n      delegate(Arrays.asList(expected)).containsAnyIn(expected);\n    }\n\n    @Override\n    public void containsNoneOf(\n        @Nullable M firstExcluded, @Nullable M secondExcluded, @Nullable M... restOfExcluded) {\n      delegate(Lists.asList(firstExcluded, secondExcluded, restOfExcluded))\n          .containsNoneOf(firstExcluded, secondExcluded, restOfExcluded);\n    }\n\n    @Override\n    public void containsNoneIn(Iterable<? extends M> excluded) {\n      delegate(excluded).containsNoneIn(excluded);\n    }\n\n    @Override\n    public void containsNoneIn(M[] excluded) {\n      delegate(Arrays.asList(excluded)).containsNoneIn(excluded);\n    }\n  }", "class_name": "UsingCorrespondence", "return_type": "IterableSubject.UsingCorrespondence<M,M>", "parameters": [{"type": "Iterable<? extends M>", "name": "messages"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// truth/core/target/gwt-sources/com/google/common/truth/super/com/google/common/truth/IterableSubject.java\n// --------------------------------------------------\n// /** \n//  * Returns a  {@link Pairing} of the given expected and actual values, or {@code null} if theexpected values are not uniquely keyed.\n//  */\n// Pairing pair(List<? extends E> expectedValues,List<? extends A> actualValues,Correspondence.ExceptionStore exceptions){\n//   Pairing pairing=new Pairing();\n//   List<Object> expectedKeys=new ArrayList<>(expectedValues.size());\n//   for (  E expected : expectedValues) {\n//     expectedKeys.add(expectedKey(expected,exceptions));\n//   }\n//   for (int i=0; i < expectedValues.size(); i++) {\n//     E expected=expectedValues.get(i);\n//     Object key=expectedKeys.get(i);\n//     if (key != null) {\n//       if (pairing.pairedKeysToExpectedValues.containsKey(key)) {\n//         return null;\n//       }\n//  else {\n//         pairing.pairedKeysToExpectedValues.put(key,expected);\n//       }\n//     }\n//   }\n//   for (  A actual : actualValues) {\n//     Object key=actualKey(actual,exceptions);\n//     if (pairing.pairedKeysToExpectedValues.containsKey(key)) {\n//       pairing.pairedKeysToActualValues.put(checkNotNull(key),actual);\n//     }\n//  else {\n//       pairing.unpairedActualValues.add(actual);\n//     }\n//   }\n//   for (int i=0; i < expectedValues.size(); i++) {\n//     E expected=expectedValues.get(i);\n//     Object key=expectedKeys.get(i);\n//     if (!pairing.pairedKeysToActualValues.containsKey(key)) {\n//       pairing.unpairedExpectedValues.add(expected);\n//       pairing.pairedKeysToExpectedValues.remove(key);\n//     }\n//   }\n//   return pairing;\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Pairer {\n\n      private final Function<? super A, ?> actualKeyFunction;\n      private final Function<? super E, ?> expectedKeyFunction;\n\n      Pairer(Function<? super A, ?> actualKeyFunction, Function<? super E, ?> expectedKeyFunction) {\n        this.actualKeyFunction = actualKeyFunction;\n        this.expectedKeyFunction = expectedKeyFunction;\n      }\n\n      /**\n       * Returns a {@link Pairing} of the given expected and actual values, or {@code null} if the\n       * expected values are not uniquely keyed.\n       */\n      @Nullable Pairing pair(\n          List<? extends E> expectedValues,\n          List<? extends A> actualValues,\n          Correspondence.ExceptionStore exceptions) {<FILL_FUNCTION_BODY>}\n\n      List<A> pairOne(\n          E expectedValue,\n          Iterable<? extends A> actualValues,\n          Correspondence.ExceptionStore exceptions) {\n        Object key = expectedKey(expectedValue, exceptions);\n        List<A> matches = new ArrayList<>();\n        if (key != null) {\n          for (A actual : actualValues) {\n            if (key.equals(actualKey(actual, exceptions))) {\n              matches.add(actual);\n            }\n          }\n        }\n        return matches;\n      }\n\n      private @Nullable Object actualKey(A actual, Correspondence.ExceptionStore exceptions) {\n        try {\n          return actualKeyFunction.apply(actual);\n        } catch (RuntimeException e) {\n          exceptions.addActualKeyFunctionException(\n              IterableSubject.UsingCorrespondence.Pairer.class, e, actual);\n          return null;\n        }\n      }\n\n      private @Nullable Object expectedKey(E expected, Correspondence.ExceptionStore exceptions) {\n        try {\n          return expectedKeyFunction.apply(expected);\n        } catch (RuntimeException e) {\n          exceptions.addExpectedKeyFunctionException(\n              IterableSubject.UsingCorrespondence.Pairer.class, e, expected);\n          return null;\n        }\n      }\n    }", "metadata": {"task_id": "google_truth/211", "ground_truth": "\n        Pairing pairing = new Pairing();\n\n        // Populate expectedKeys with the keys of the corresponding elements of expectedValues.\n        // We do this ahead of time to avoid invoking the key function twice for each element.\n        List<@Nullable Object> expectedKeys = new ArrayList<>(expectedValues.size());\n        for (E expected : expectedValues) {\n          expectedKeys.add(expectedKey(expected, exceptions));\n        }\n\n        // Populate pairedKeysToExpectedValues with *all* the expected values with non-null keys.\n        // We will remove the unpaired keys later. Return null if we find a duplicate key.\n        for (int i = 0; i < expectedValues.size(); i++) {\n          E expected = expectedValues.get(i);\n          Object key = expectedKeys.get(i);\n          if (key != null) {\n            if (pairing.pairedKeysToExpectedValues.containsKey(key)) {\n              return null;\n            } else {\n              pairing.pairedKeysToExpectedValues.put(key, expected);\n            }\n          }\n        }\n\n        // Populate pairedKeysToActualValues and unpairedActualValues.\n        for (A actual : actualValues) {\n          Object key = actualKey(actual, exceptions);\n          if (pairing.pairedKeysToExpectedValues.containsKey(key)) {\n            pairing.pairedKeysToActualValues.put(checkNotNull(key), actual);\n          } else {\n            pairing.unpairedActualValues.add(actual);\n          }\n        }\n\n        // Populate unpairedExpectedValues and remove unpaired keys from pairedKeysToExpectedValues.\n        for (int i = 0; i < expectedValues.size(); i++) {\n          E expected = expectedValues.get(i);\n          Object key = expectedKeys.get(i);\n          if (!pairing.pairedKeysToActualValues.containsKey(key)) {\n            pairing.unpairedExpectedValues.add(expected);\n            pairing.pairedKeysToExpectedValues.remove(key);\n          }\n        }\n\n        return pairing;\n      ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "IterableSubject.java"], "context_start_lineno": 0, "function_name": "pair", "left_context": "class Pairer {\n\n      private final Function<? super A, ?> actualKeyFunction;\n      private final Function<? super E, ?> expectedKeyFunction;\n\n      Pairer(Function<? super A, ?> actualKeyFunction, Function<? super E, ?> expectedKeyFunction) {\n        this.actualKeyFunction = actualKeyFunction;\n        this.expectedKeyFunction = expectedKeyFunction;\n      }\n\n      /**\n       * Returns a {@link Pairing} of the given expected and actual values, or {@code null} if the\n       * expected values are not uniquely keyed.\n       */\n      @Nullable Pairing pair(\n          List<? extends E> expectedValues,\n          List<? extends A> actualValues,\n          Correspondence.ExceptionStore exceptions) {", "right_context": "}\n\n      List<A> pairOne(\n          E expectedValue,\n          Iterable<? extends A> actualValues,\n          Correspondence.ExceptionStore exceptions) {\n        Object key = expectedKey(expectedValue, exceptions);\n        List<A> matches = new ArrayList<>();\n        if (key != null) {\n          for (A actual : actualValues) {\n            if (key.equals(actualKey(actual, exceptions))) {\n              matches.add(actual);\n            }\n          }\n        }\n        return matches;\n      }\n\n      private @Nullable Object actualKey(A actual, Correspondence.ExceptionStore exceptions) {\n        try {\n          return actualKeyFunction.apply(actual);\n        } catch (RuntimeException e) {\n          exceptions.addActualKeyFunctionException(\n              IterableSubject.UsingCorrespondence.Pairer.class, e, actual);\n          return null;\n        }\n      }\n\n      private @Nullable Object expectedKey(E expected, Correspondence.ExceptionStore exceptions) {\n        try {\n          return expectedKeyFunction.apply(expected);\n        } catch (RuntimeException e) {\n          exceptions.addExpectedKeyFunctionException(\n              IterableSubject.UsingCorrespondence.Pairer.class, e, expected);\n          return null;\n        }\n      }\n    }", "class_name": "Pairer", "return_type": "Pairing", "parameters": [{"type": "List<? extends E>", "name": "expectedValues"}, {"type": "List<? extends A>", "name": "actualValues"}, {"type": "Correspondence.ExceptionStore", "name": "exceptions"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass OptionalIntSubject extends Subject {\n  private final OptionalInt actual;\n\n  OptionalIntSubject(\n      FailureMetadata failureMetadata,\n      @Nullable OptionalInt subject,\n      @Nullable String typeDescription) {\n    super(failureMetadata, subject, typeDescription);\n    this.actual = subject;\n  }\n\n  /** Fails if the {@link OptionalInt} is empty or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link OptionalInt} is present or the subject is null. */\n  public void isEmpty() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected empty optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be empty\"),\n          fact(\"but was present with value\", actual.getAsInt()));\n    }\n  }\n\n  /**\n   * Fails if the {@link OptionalInt} does not have the given value or the subject is null. More\n   * sophisticated comparisons can be done using {@code assertThat(optional.getAsInt())\u2026}.\n   */\n  public void hasValue(int expected) {<FILL_FUNCTION_BODY>}\n\n  /**\n   * Obsolete factory instance. This factory was previously necessary for assertions like {@code\n   * assertWithMessage(...).about(optionalInts()).that(optional)....}. Now, you can perform\n   * assertions like that without the {@code about(...)} call.\n   *\n   * @deprecated Instead of {@code about(optionalInts()).that(...)}, use just {@code that(...)}.\n   *     Similarly, instead of {@code assertAbout(optionalInts()).that(...)}, use just {@code\n   *     assertThat(...)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"InlineMeSuggester\") // We want users to remove the surrounding call entirely.\n  public static Factory<OptionalIntSubject, OptionalInt> optionalInts() {\n    return (metadata, subject) -> new OptionalIntSubject(metadata, subject, \"optionalInt\");\n  }\n}", "metadata": {"task_id": "google_truth/292", "ground_truth": "\n    if (actual == null) {\n      failWithActual(\"expected an optional with value\", expected);\n    } else if (!actual.isPresent()) {\n      failWithoutActual(fact(\"expected to have value\", expected), simpleFact(\"but was absent\"));\n    } else {\n      checkNoNeedToDisplayBothValues(\"getAsInt()\").that(actual.getAsInt()).isEqualTo(expected);\n    }\n  ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "OptionalIntSubject.java"], "context_start_lineno": 0, "function_name": "hasValue", "left_context": "class OptionalIntSubject extends Subject {\n  private final OptionalInt actual;\n\n  OptionalIntSubject(\n      FailureMetadata failureMetadata,\n      @Nullable OptionalInt subject,\n      @Nullable String typeDescription) {\n    super(failureMetadata, subject, typeDescription);\n    this.actual = subject;\n  }\n\n  /** Fails if the {@link OptionalInt} is empty or the subject is null. */\n  public void isPresent() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected present optional\"));\n    } else if (!actual.isPresent()) {\n      failWithoutActual(simpleFact(\"expected to be present\"));\n    }\n  }\n\n  /** Fails if the {@link OptionalInt} is present or the subject is null. */\n  public void isEmpty() {\n    if (actual == null) {\n      failWithActual(simpleFact(\"expected empty optional\"));\n    } else if (actual.isPresent()) {\n      failWithoutActual(\n          simpleFact(\"expected to be empty\"),\n          fact(\"but was present with value\", actual.getAsInt()));\n    }\n  }\n\n  /**\n   * Fails if the {@link OptionalInt} does not have the given value or the subject is null. More\n   * sophisticated comparisons can be done using {@code assertThat(optional.getAsInt())\u2026}.\n   */\n  public void hasValue(int expected) {", "right_context": "}\n\n  /**\n   * Obsolete factory instance. This factory was previously necessary for assertions like {@code\n   * assertWithMessage(...).about(optionalInts()).that(optional)....}. Now, you can perform\n   * assertions like that without the {@code about(...)} call.\n   *\n   * @deprecated Instead of {@code about(optionalInts()).that(...)}, use just {@code that(...)}.\n   *     Similarly, instead of {@code assertAbout(optionalInts()).that(...)}, use just {@code\n   *     assertThat(...)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"InlineMeSuggester\") // We want users to remove the surrounding call entirely.\n  public static Factory<OptionalIntSubject, OptionalInt> optionalInts() {\n    return (metadata, subject) -> new OptionalIntSubject(metadata, subject, \"optionalInt\");\n  }\n}", "class_name": "OptionalIntSubject", "return_type": "void", "parameters": [{"type": "int", "name": "expected"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MultisetSubject extends IterableSubject {\n\n  private final @Nullable Multiset<?> actual;\n\n  MultisetSubject(FailureMetadata metadata, @Nullable Multiset<?> multiset) {\n    super(metadata, multiset, /* typeDescriptionOverride= */ \"multiset\");\n    this.actual = multiset;\n  }\n\n  /** Fails if the element does not have the given count. */\n  public final void hasCount(@Nullable Object element, int expectedCount) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "google_truth/302", "ground_truth": "\n    checkArgument(expectedCount >= 0, \"expectedCount(%s) must be >= 0\", expectedCount);\n    int actualCount = checkNotNull(actual).count(element);\n    check(\"count(%s)\", element).that(actualCount).isEqualTo(expectedCount);\n  ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "MultisetSubject.java"], "context_start_lineno": 0, "function_name": "hasCount", "left_context": "class MultisetSubject extends IterableSubject {\n\n  private final @Nullable Multiset<?> actual;\n\n  MultisetSubject(FailureMetadata metadata, @Nullable Multiset<?> multiset) {\n    super(metadata, multiset, /* typeDescriptionOverride= */ \"multiset\");\n    this.actual = multiset;\n  }\n\n  /** Fails if the element does not have the given count. */\n  public final void hasCount(@Nullable Object element, int expectedCount) {", "right_context": "}\n}", "class_name": "MultisetSubject", "return_type": "void", "parameters": [{"type": "Object", "name": "element"}, {"type": "int", "name": "expectedCount"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass FieldNumberTree {\n\n  private static final FieldNumberTree EMPTY = new FieldNumberTree();\n\n  /** A {@code FieldNumberTree} with no children. */\n  static FieldNumberTree empty() {\n    return EMPTY;\n  }\n\n  // Modified only during [factory] construction, never changed afterwards.\n  private final Map<SubScopeId, FieldNumberTree> children = Maps.newHashMap();\n\n  /** Returns whether this {@code FieldNumberTree} has no children. */\n  boolean isEmpty() {\n    return children.isEmpty();\n  }\n\n  /**\n   * Returns the {@code FieldNumberTree} corresponding to this sub-field.\n   *\n   * <p>{@code empty()} if there is none.\n   */\n  FieldNumberTree child(SubScopeId subScopeId) {\n    FieldNumberTree child = children.get(subScopeId);\n    return child == null ? EMPTY : child;\n  }\n\n  /** Returns whether this tree has a child for this node. */\n  boolean hasChild(SubScopeId subScopeId) {\n    return children.containsKey(subScopeId);\n  }\n\n  static FieldNumberTree fromMessage(\n      Message message, TypeRegistry typeRegistry, ExtensionRegistry extensionRegistry) {<FILL_FUNCTION_BODY>}\n\n  static FieldNumberTree fromMessages(\n      Iterable<? extends Message> messages,\n      TypeRegistry typeRegistry,\n      ExtensionRegistry extensionRegistry) {\n    FieldNumberTree tree = new FieldNumberTree();\n    for (Message message : messages) {\n      if (message != null) {\n        tree.merge(fromMessage(message, typeRegistry, extensionRegistry));\n      }\n    }\n    return tree;\n  }\n\n  private static FieldNumberTree fromUnknownFieldSet(UnknownFieldSet unknownFieldSet) {\n    FieldNumberTree tree = new FieldNumberTree();\n    for (int fieldNumber : unknownFieldSet.asMap().keySet()) {\n      UnknownFieldSet.Field unknownField = unknownFieldSet.asMap().get(fieldNumber);\n      for (UnknownFieldDescriptor unknownFieldDescriptor :\n          UnknownFieldDescriptor.descriptors(fieldNumber, unknownField)) {\n        SubScopeId subScopeId = SubScopeId.of(unknownFieldDescriptor);\n        FieldNumberTree childTree = new FieldNumberTree();\n        tree.children.put(subScopeId, childTree);\n\n        if (unknownFieldDescriptor.type() == UnknownFieldDescriptor.Type.GROUP) {\n          for (Object group : unknownFieldDescriptor.type().getValues(unknownField)) {\n            childTree.merge(fromUnknownFieldSet((UnknownFieldSet) group));\n          }\n        }\n      }\n    }\n\n    return tree;\n  }\n\n  /** Adds the other tree onto this one. May destroy {@code other} in the process. */\n  private void merge(FieldNumberTree other) {\n    for (SubScopeId subScopeId : other.children.keySet()) {\n      FieldNumberTree value = other.children.get(subScopeId);\n      if (!this.children.containsKey(subScopeId)) {\n        this.children.put(subScopeId, value);\n      } else {\n        this.children.get(subScopeId).merge(value);\n      }\n    }\n  }\n}", "metadata": {"task_id": "google_truth/444", "ground_truth": "\n    FieldNumberTree tree = new FieldNumberTree();\n\n    // Known fields.\n    Map<FieldDescriptor, Object> knownFieldValues = message.getAllFields();\n    for (FieldDescriptor field : knownFieldValues.keySet()) {\n      SubScopeId subScopeId = SubScopeId.of(field);\n      FieldNumberTree childTree = new FieldNumberTree();\n      tree.children.put(subScopeId, childTree);\n\n      if (field.equals(AnyUtils.valueFieldDescriptor())) {\n        // Handle Any protos specially.\n        Optional<Message> unpackedAny = AnyUtils.unpack(message, typeRegistry, extensionRegistry);\n        if (unpackedAny.isPresent()) {\n          tree.children.put(\n              SubScopeId.ofUnpackedAnyValueType(unpackedAny.get().getDescriptorForType()),\n              fromMessage(unpackedAny.get(), typeRegistry, extensionRegistry));\n        }\n      } else {\n        Object fieldValue = knownFieldValues.get(field);\n        if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n          if (field.isRepeated()) {\n            List<?> valueList = (List<?>) fieldValue;\n            for (Object value : valueList) {\n              childTree.merge(fromMessage((Message) value, typeRegistry, extensionRegistry));\n            }\n          } else {\n            childTree.merge(fromMessage((Message) fieldValue, typeRegistry, extensionRegistry));\n          }\n        }\n      }\n    }\n\n    // Unknown fields.\n    tree.merge(fromUnknownFieldSet(message.getUnknownFields()));\n\n    return tree;\n  ", "fpath_tuple": ["google_truth", "truth", "extensions", "proto", "src", "main", "java", "com", "google", "common", "truth", "extensions", "proto", "FieldNumberTree.java"], "context_start_lineno": 0, "function_name": "fromMessage", "left_context": "class FieldNumberTree {\n\n  private static final FieldNumberTree EMPTY = new FieldNumberTree();\n\n  /** A {@code FieldNumberTree} with no children. */\n  static FieldNumberTree empty() {\n    return EMPTY;\n  }\n\n  // Modified only during [factory] construction, never changed afterwards.\n  private final Map<SubScopeId, FieldNumberTree> children = Maps.newHashMap();\n\n  /** Returns whether this {@code FieldNumberTree} has no children. */\n  boolean isEmpty() {\n    return children.isEmpty();\n  }\n\n  /**\n   * Returns the {@code FieldNumberTree} corresponding to this sub-field.\n   *\n   * <p>{@code empty()} if there is none.\n   */\n  FieldNumberTree child(SubScopeId subScopeId) {\n    FieldNumberTree child = children.get(subScopeId);\n    return child == null ? EMPTY : child;\n  }\n\n  /** Returns whether this tree has a child for this node. */\n  boolean hasChild(SubScopeId subScopeId) {\n    return children.containsKey(subScopeId);\n  }\n\n  static FieldNumberTree fromMessage(\n      Message message, TypeRegistry typeRegistry, ExtensionRegistry extensionRegistry) {", "right_context": "}\n\n  static FieldNumberTree fromMessages(\n      Iterable<? extends Message> messages,\n      TypeRegistry typeRegistry,\n      ExtensionRegistry extensionRegistry) {\n    FieldNumberTree tree = new FieldNumberTree();\n    for (Message message : messages) {\n      if (message != null) {\n        tree.merge(fromMessage(message, typeRegistry, extensionRegistry));\n      }\n    }\n    return tree;\n  }\n\n  private static FieldNumberTree fromUnknownFieldSet(UnknownFieldSet unknownFieldSet) {\n    FieldNumberTree tree = new FieldNumberTree();\n    for (int fieldNumber : unknownFieldSet.asMap().keySet()) {\n      UnknownFieldSet.Field unknownField = unknownFieldSet.asMap().get(fieldNumber);\n      for (UnknownFieldDescriptor unknownFieldDescriptor :\n          UnknownFieldDescriptor.descriptors(fieldNumber, unknownField)) {\n        SubScopeId subScopeId = SubScopeId.of(unknownFieldDescriptor);\n        FieldNumberTree childTree = new FieldNumberTree();\n        tree.children.put(subScopeId, childTree);\n\n        if (unknownFieldDescriptor.type() == UnknownFieldDescriptor.Type.GROUP) {\n          for (Object group : unknownFieldDescriptor.type().getValues(unknownField)) {\n            childTree.merge(fromUnknownFieldSet((UnknownFieldSet) group));\n          }\n        }\n      }\n    }\n\n    return tree;\n  }\n\n  /** Adds the other tree onto this one. May destroy {@code other} in the process. */\n  private void merge(FieldNumberTree other) {\n    for (SubScopeId subScopeId : other.children.keySet()) {\n      FieldNumberTree value = other.children.get(subScopeId);\n      if (!this.children.containsKey(subScopeId)) {\n        this.children.put(subScopeId, value);\n      } else {\n        this.children.get(subScopeId).merge(value);\n      }\n    }\n  }\n}", "class_name": "FieldNumberTree", "return_type": "FieldNumberTree", "parameters": [{"type": "Message", "name": "message"}, {"type": "TypeRegistry", "name": "typeRegistry"}, {"type": "ExtensionRegistry", "name": "extensionRegistry"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// truth/core/src/main/java/com/google/common/truth/Platform.java\n// --------------------------------------------------\n// private static ImmutableList<String> splitLines(String s){\n//   return ImmutableList.copyOf(Splitter.onPattern(\"\\r?\\n\").split(s));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// truth/core/src/main/java/com/google/common/truth/TruthFailureSubject.java\n// --------------------------------------------------\n// private static ImmutableList<String> getFactKeys(ErrorWithFacts error){\n//   ImmutableList.Builder<String> facts=ImmutableList.builder();\n//   for (  Fact fact : error.facts()) {\n//     facts.add(fact.key);\n//   }\n//   return facts.build();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// truth/core/target/gwt-sources/com/google/common/truth/super/com/google/common/truth/TruthFailureSubject.java\n// --------------------------------------------------\n// private static ImmutableList<String> getFactKeys(ErrorWithFacts error){\n//   ImmutableList.Builder<String> facts=ImmutableList.builder();\n//   for (  Fact fact : error.facts()) {\n//     facts.add(fact.key);\n//   }\n//   return facts.build();\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// truth/core/target/gwt-sources/com/google/common/truth/super/com/google/common/truth/LazyMessage.java\n// --------------------------------------------------\n// static ImmutableList<String> evaluateAll(ImmutableList<LazyMessage> messages){\n//   ImmutableList.Builder<String> result=ImmutableList.builder();\n//   for (  LazyMessage message : messages) {\n//     result.add(message.toString());\n//   }\n//   return result.build();\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass LazyMessage {\n  private final String format;\n  private final @Nullable Object[] args;\n\n  LazyMessage(String format, @Nullable Object... args) {\n    this.format = format;\n    this.args = args;\n    int placeholders = countPlaceholders(format);\n    checkArgument(\n        placeholders == args.length,\n        \"Incorrect number of args (%s) for the given placeholders (%s) in string template:\\\"%s\\\"\",\n        args.length,\n        placeholders,\n        format);\n  }\n\n  @Override\n  public String toString() {\n    return lenientFormat(format, args);\n  }\n\n  @VisibleForTesting\n  static int countPlaceholders(String template) {\n    int index = 0;\n    int count = 0;\n    while (true) {\n      index = template.indexOf(\"%s\", index);\n      if (index == -1) {\n        break;\n      }\n      index++;\n      count++;\n    }\n    return count;\n  }\n\n  static ImmutableList<String> evaluateAll(ImmutableList<LazyMessage> messages) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "google_truth/458", "ground_truth": "\n    ImmutableList.Builder<String> result = ImmutableList.builder();\n    for (LazyMessage message : messages) {\n      result.add(message.toString());\n    }\n    return result.build();\n  ", "fpath_tuple": ["google_truth", "truth", "core", "src", "main", "java", "com", "google", "common", "truth", "LazyMessage.java"], "context_start_lineno": 0, "function_name": "evaluateAll", "left_context": "class LazyMessage {\n  private final String format;\n  private final @Nullable Object[] args;\n\n  LazyMessage(String format, @Nullable Object... args) {\n    this.format = format;\n    this.args = args;\n    int placeholders = countPlaceholders(format);\n    checkArgument(\n        placeholders == args.length,\n        \"Incorrect number of args (%s) for the given placeholders (%s) in string template:\\\"%s\\\"\",\n        args.length,\n        placeholders,\n        format);\n  }\n\n  @Override\n  public String toString() {\n    return lenientFormat(format, args);\n  }\n\n  @VisibleForTesting\n  static int countPlaceholders(String template) {\n    int index = 0;\n    int count = 0;\n    while (true) {\n      index = template.indexOf(\"%s\", index);\n      if (index == -1) {\n        break;\n      }\n      index++;\n      count++;\n    }\n    return count;\n  }\n\n  static ImmutableList<String> evaluateAll(ImmutableList<LazyMessage> messages) {", "right_context": "}\n}", "class_name": "LazyMessage", "return_type": "ImmutableList<String>", "parameters": [{"type": "ImmutableList<LazyMessage>", "name": "messages"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConsumerPartitionVO {\n  private final String groupId;\n  private final String topic;\n  private final int partitionId;\n  private long offset;\n  private long size;\n  private long firstOffset;\n\n  public ConsumerPartitionVO(String groupId, String topic, int partitionId) {\n    this.groupId = groupId;\n    this.topic = topic;\n    this.partitionId = partitionId;\n  }\n\n  public String getTopic() {\n    return topic;\n  }\n\n  public int getPartitionId() {\n    return partitionId;\n  }\n\n  public long getSize() {\n    return size;\n  }\n\n  public void setSize(long size) {\n    this.size = size;\n  }\n\n  public long getFirstOffset() {\n    return firstOffset;\n  }\n\n  public void setFirstOffset(long firstOffset) {\n    this.firstOffset = firstOffset;\n  }\n\n  public long getLag() {\n    if (size < 0 || firstOffset < 0) {\n      return 0;\n    } else if (offset < firstOffset) {\n      return size - firstOffset;\n    } else {\n      return size - offset;\n    }\n  }\n\n  public long getOffset() {\n    return offset;\n  }\n\n  public void setOffset(long offset) {\n    this.offset = offset;\n  }\n\n  @Override\n  public String toString() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/20", "ground_truth": "\n    return ConsumerPartitionVO.class.getSimpleName() + \" [groupId=\" + groupId +\n      \", topic=\" + topic + \", partitionId=\" + partitionId + \", offset=\" + offset +\n      \", size=\" + size + \", firstOffset=\" + firstOffset + \"]\";\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "model", "ConsumerPartitionVO.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class ConsumerPartitionVO {\n  private final String groupId;\n  private final String topic;\n  private final int partitionId;\n  private long offset;\n  private long size;\n  private long firstOffset;\n\n  public ConsumerPartitionVO(String groupId, String topic, int partitionId) {\n    this.groupId = groupId;\n    this.topic = topic;\n    this.partitionId = partitionId;\n  }\n\n  public String getTopic() {\n    return topic;\n  }\n\n  public int getPartitionId() {\n    return partitionId;\n  }\n\n  public long getSize() {\n    return size;\n  }\n\n  public void setSize(long size) {\n    this.size = size;\n  }\n\n  public long getFirstOffset() {\n    return firstOffset;\n  }\n\n  public void setFirstOffset(long firstOffset) {\n    this.firstOffset = firstOffset;\n  }\n\n  public long getLag() {\n    if (size < 0 || firstOffset < 0) {\n      return 0;\n    } else if (offset < firstOffset) {\n      return size - firstOffset;\n    } else {\n      return size - offset;\n    }\n  }\n\n  public long getOffset() {\n    return offset;\n  }\n\n  public void setOffset(long offset) {\n    this.offset = offset;\n  }\n\n  @Override\n  public String toString() {", "right_context": "}\n}", "class_name": "ConsumerPartitionVO", "return_type": "String", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass MessageFormatProperties {\n    private MessageFormat format;\n    private MessageFormat keyFormat;\n\n    @PostConstruct\n    public void init() {<FILL_FUNCTION_BODY>}\n\n    public MessageFormat getFormat() {\n      return format;\n    }\n\n    public void setFormat(MessageFormat format) {\n      this.format = format;\n    }\n\n    public MessageFormat getKeyFormat() {\n      return keyFormat;\n    }\n\n    public void setKeyFormat(MessageFormat keyFormat) {\n      this.keyFormat = keyFormat;\n    }\n  }", "metadata": {"task_id": "obsidiandynamics_kafdrop/38", "ground_truth": "\n      // Set a default message format if not configured.\n      if (format == null) {\n        format = MessageFormat.DEFAULT;\n      }\n      if (keyFormat == null) {\n        keyFormat = format; //fallback\n      }\n    ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "config", "MessageFormatConfiguration.java"], "context_start_lineno": 0, "function_name": "init", "left_context": "class MessageFormatProperties {\n    private MessageFormat format;\n    private MessageFormat keyFormat;\n\n    @PostConstruct\n    public void init() {", "right_context": "}\n\n    public MessageFormat getFormat() {\n      return format;\n    }\n\n    public void setFormat(MessageFormat format) {\n      this.format = format;\n    }\n\n    public MessageFormat getKeyFormat() {\n      return keyFormat;\n    }\n\n    public void setKeyFormat(MessageFormat keyFormat) {\n      this.keyFormat = keyFormat;\n    }\n  }", "class_name": "MessageFormatProperties", "return_type": "void", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConsumerTopicVO {\n  private final String topic;\n  private final Map<Integer, ConsumerPartitionVO> offsets = new TreeMap<>();\n\n  public ConsumerTopicVO(String topic) {\n    this.topic = topic;\n  }\n\n  public String getTopic() {\n    return topic;\n  }\n\n  public void addOffset(ConsumerPartitionVO offset) {\n    offsets.put(offset.getPartitionId(), offset);\n  }\n\n  public long getLag() {<FILL_FUNCTION_BODY>}\n\n  public Collection<ConsumerPartitionVO> getPartitions() {\n    return offsets.values();\n  }\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/64", "ground_truth": "\n    return offsets.values().stream()\n      .map(ConsumerPartitionVO::getLag)\n      .filter(lag -> lag >= 0)\n      .reduce(0L, Long::sum);\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "model", "ConsumerTopicVO.java"], "context_start_lineno": 0, "function_name": "getLag", "left_context": "class ConsumerTopicVO {\n  private final String topic;\n  private final Map<Integer, ConsumerPartitionVO> offsets = new TreeMap<>();\n\n  public ConsumerTopicVO(String topic) {\n    this.topic = topic;\n  }\n\n  public String getTopic() {\n    return topic;\n  }\n\n  public void addOffset(ConsumerPartitionVO offset) {\n    offsets.put(offset.getPartitionId(), offset);\n  }\n\n  public long getLag() {", "right_context": "}\n\n  public Collection<ConsumerPartitionVO> getPartitions() {\n    return offsets.values();\n  }\n}", "class_name": "ConsumerTopicVO", "return_type": "long", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Kafdrop {\n  private static final Logger LOG = LoggerFactory.getLogger(Kafdrop.class);\n\n  public static void main(String[] args) {\n    createApplicationBuilder()\n      .run(args);\n  }\n\n  public static SpringApplicationBuilder createApplicationBuilder() {\n    return new SpringApplicationBuilder(Kafdrop.class)\n      .bannerMode(Mode.OFF)\n      .listeners(new EnvironmentSetupListener(),\n        new LoggingConfigurationListener());\n  }\n\n  @Bean\n  public WebServerFactoryCustomizer<UndertowServletWebServerFactory> deploymentCustomizer() {<FILL_FUNCTION_BODY>}\n\n  @Bean\n  public WebMvcConfigurer webConfig() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n        configurer.favorPathExtension(false);\n      }\n    };\n  }\n\n  private static final class LoggingConfigurationListener\n    implements ApplicationListener<ApplicationEnvironmentPreparedEvent>, Ordered {\n    private static final String PROP_LOGGING_FILE = \"logging.file\";\n    private static final String PROP_LOGGER = \"LOGGER\";\n    private static final String PROP_SPRING_BOOT_LOG_LEVEL = \"logging.level.org.springframework.boot\";\n\n    @Override\n    public int getOrder() {\n      // LoggingApplicationListener runs at HIGHEST_PRECEDENCE + 11.  This needs to run before that.\n      return Ordered.HIGHEST_PRECEDENCE;\n    }\n\n    @Override\n    public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n      final var environment = event.getEnvironment();\n      final var loggingFile = environment.getProperty(PROP_LOGGING_FILE);\n      if (loggingFile != null) {\n        System.setProperty(PROP_LOGGER, \"FILE\");\n        try {\n          System.setProperty(\"logging.dir\", new File(loggingFile).getParent());\n        } catch (Exception ex) {\n          LOG.error(\"Unable to set up logging.dir from logging.file {}\", loggingFile, ex);\n        }\n      }\n      if (environment.containsProperty(\"debug\") &&\n        !\"false\".equalsIgnoreCase(environment.getProperty(\"debug\", String.class))) {\n        System.setProperty(PROP_SPRING_BOOT_LOG_LEVEL, \"DEBUG\");\n      }\n    }\n  }\n\n  private static final class EnvironmentSetupListener\n    implements ApplicationListener<ApplicationEnvironmentPreparedEvent>, Ordered {\n    private static final String SM_CONFIG_DIR = \"sm.config.dir\";\n    private static final String CONFIG_SUFFIX = \"-config.ini\";\n\n    @Override\n    public int getOrder() {\n      return Ordered.HIGHEST_PRECEDENCE + 10;\n    }\n\n    @Override\n    public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n      final var environment = event.getEnvironment();\n\n      LOG.info(\"Initializing JAAS config\");\n      final String env = environment.getProperty(\"kafka.env\");\n      LOG.info(\"Env: {}\", env);\n      String path;\n\n      if (environment.containsProperty(SM_CONFIG_DIR)) {\n        Stream.of(\"kafdrop\", \"global\")\n          .map(name -> readProperties(environment, name))\n          .filter(Objects::nonNull)\n          .forEach(iniPropSource -> environment.getPropertySources()\n            .addBefore(\"applicationConfigurationProperties\", iniPropSource));\n      }\n    }\n\n    private static IniFilePropertySource readProperties(Environment environment, String name) {\n      final var file = new File(environment.getProperty(SM_CONFIG_DIR), name + CONFIG_SUFFIX);\n      if (file.exists() && file.canRead()) {\n        try (var in = new FileInputStream(file);\n             var reader = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n          return new IniFilePropertySource(name, new IniFileReader().read(reader), environment.getActiveProfiles());\n        } catch (IOException ex) {\n          LOG.error(\"Unable to read configuration file {}: {}\", file, ex);\n        }\n      }\n      return null;\n    }\n  }\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/76", "ground_truth": "\n    return factory -> {\n      final UndertowDeploymentInfoCustomizer customizer = deploymentInfo -> {\n        var inf = new WebSocketDeploymentInfo();\n        inf.setBuffers(new DefaultByteBufferPool(false, 64));\n        deploymentInfo.addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME, inf);\n        // see https://stackoverflow.com/a/54129696\n        deploymentInfo.addInitialHandlerChainWrapper(new HandlerWrapper() {\n          @Override\n          public HttpHandler wrap(HttpHandler handler) {\n            HttpString[] disallowedHttpMethods = {\n              HttpString.tryFromString(\"TRACE\"),\n              HttpString.tryFromString(\"TRACK\")\n            };\n            return new DisallowedMethodsHandler(handler, disallowedHttpMethods);\n          }\n        });\n      };\n      factory.addDeploymentInfoCustomizers(customizer);\n    };\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "Kafdrop.java"], "context_start_lineno": 0, "function_name": "deploymentCustomizer", "left_context": "class Kafdrop {\n  private static final Logger LOG = LoggerFactory.getLogger(Kafdrop.class);\n\n  public static void main(String[] args) {\n    createApplicationBuilder()\n      .run(args);\n  }\n\n  public static SpringApplicationBuilder createApplicationBuilder() {\n    return new SpringApplicationBuilder(Kafdrop.class)\n      .bannerMode(Mode.OFF)\n      .listeners(new EnvironmentSetupListener(),\n        new LoggingConfigurationListener());\n  }\n\n  @Bean\n  public WebServerFactoryCustomizer<UndertowServletWebServerFactory> deploymentCustomizer() {", "right_context": "}\n\n  @Bean\n  public WebMvcConfigurer webConfig() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n        configurer.favorPathExtension(false);\n      }\n    };\n  }\n\n  private static final class LoggingConfigurationListener\n    implements ApplicationListener<ApplicationEnvironmentPreparedEvent>, Ordered {\n    private static final String PROP_LOGGING_FILE = \"logging.file\";\n    private static final String PROP_LOGGER = \"LOGGER\";\n    private static final String PROP_SPRING_BOOT_LOG_LEVEL = \"logging.level.org.springframework.boot\";\n\n    @Override\n    public int getOrder() {\n      // LoggingApplicationListener runs at HIGHEST_PRECEDENCE + 11.  This needs to run before that.\n      return Ordered.HIGHEST_PRECEDENCE;\n    }\n\n    @Override\n    public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n      final var environment = event.getEnvironment();\n      final var loggingFile = environment.getProperty(PROP_LOGGING_FILE);\n      if (loggingFile != null) {\n        System.setProperty(PROP_LOGGER, \"FILE\");\n        try {\n          System.setProperty(\"logging.dir\", new File(loggingFile).getParent());\n        } catch (Exception ex) {\n          LOG.error(\"Unable to set up logging.dir from logging.file {}\", loggingFile, ex);\n        }\n      }\n      if (environment.containsProperty(\"debug\") &&\n        !\"false\".equalsIgnoreCase(environment.getProperty(\"debug\", String.class))) {\n        System.setProperty(PROP_SPRING_BOOT_LOG_LEVEL, \"DEBUG\");\n      }\n    }\n  }\n\n  private static final class EnvironmentSetupListener\n    implements ApplicationListener<ApplicationEnvironmentPreparedEvent>, Ordered {\n    private static final String SM_CONFIG_DIR = \"sm.config.dir\";\n    private static final String CONFIG_SUFFIX = \"-config.ini\";\n\n    @Override\n    public int getOrder() {\n      return Ordered.HIGHEST_PRECEDENCE + 10;\n    }\n\n    @Override\n    public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n      final var environment = event.getEnvironment();\n\n      LOG.info(\"Initializing JAAS config\");\n      final String env = environment.getProperty(\"kafka.env\");\n      LOG.info(\"Env: {}\", env);\n      String path;\n\n      if (environment.containsProperty(SM_CONFIG_DIR)) {\n        Stream.of(\"kafdrop\", \"global\")\n          .map(name -> readProperties(environment, name))\n          .filter(Objects::nonNull)\n          .forEach(iniPropSource -> environment.getPropertySources()\n            .addBefore(\"applicationConfigurationProperties\", iniPropSource));\n      }\n    }\n\n    private static IniFilePropertySource readProperties(Environment environment, String name) {\n      final var file = new File(environment.getProperty(SM_CONFIG_DIR), name + CONFIG_SUFFIX);\n      if (file.exists() && file.canRead()) {\n        try (var in = new FileInputStream(file);\n             var reader = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n          return new IniFilePropertySource(name, new IniFileReader().read(reader), environment.getActiveProfiles());\n        } catch (IOException ex) {\n          LOG.error(\"Unable to read configuration file {}: {}\", file, ex);\n        }\n      }\n      return null;\n    }\n  }\n}", "class_name": "Kafdrop", "return_type": "WebServerFactoryCustomizer<UndertowServletWebServerFactory>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ProfileHandlerInterceptor implements AsyncHandlerInterceptor {\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n                           ModelAndView modelAndView) {<FILL_FUNCTION_BODY>}\n  }", "metadata": {"task_id": "obsidiandynamics_kafdrop/87", "ground_truth": "\n      final var activeProfiles = environment.getActiveProfiles();\n      if (modelAndView != null && activeProfiles != null && activeProfiles.length > 0) {\n        modelAndView.addObject(\"profile\", String.join(\",\", activeProfiles));\n      }\n    ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "config", "InterceptorConfiguration.java"], "context_start_lineno": 0, "function_name": "postHandle", "left_context": "class ProfileHandlerInterceptor implements AsyncHandlerInterceptor {\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n                           ModelAndView modelAndView) {", "right_context": "}\n  }", "class_name": "ProfileHandlerInterceptor", "return_type": "void", "parameters": [{"type": "HttpServletRequest", "name": "request"}, {"type": "HttpServletResponse", "name": "response"}, {"type": "Object", "name": "handler"}, {"type": "ModelAndView", "name": "modelAndView"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass PartitionReplica {\n    private final Integer id;\n    private final boolean inSync;\n    private final boolean leader;\n    private final boolean offline;\n\n    public PartitionReplica(Integer id, boolean inSync, boolean leader, boolean offline) {\n      this.id = id;\n      this.inSync = inSync;\n      this.leader = leader;\n      this.offline = offline;\n    }\n\n    public Integer getId() {\n      return id;\n    }\n\n    boolean isInSync() {\n      return inSync;\n    }\n\n    boolean isLeader() {\n      return leader;\n    }\n\n    boolean isOffline() {\n      return offline;\n    }\n  }\n\n  @Override\n  public String toString() {<FILL_FUNCTION_BODY>", "metadata": {"task_id": "obsidiandynamics_kafdrop/147", "ground_truth": "\n    return TopicPartitionVO.class.getSimpleName() + \" [id=\" + id + \", firstOffset=\" + firstOffset + \", size=\" + size\n      + \"]\";\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "model", "TopicPartitionVO.java"], "context_start_lineno": 0, "function_name": "toString", "left_context": "class PartitionReplica {\n    private final Integer id;\n    private final boolean inSync;\n    private final boolean leader;\n    private final boolean offline;\n\n    public PartitionReplica(Integer id, boolean inSync, boolean leader, boolean offline) {\n      this.id = id;\n      this.inSync = inSync;\n      this.leader = leader;\n      this.offline = offline;\n    }\n\n    public Integer getId() {\n      return id;\n    }\n\n    boolean isInSync() {\n      return inSync;\n    }\n\n    boolean isLeader() {\n      return leader;\n    }\n\n    boolean isOffline() {\n      return offline;\n    }\n  }\n\n  @Override\n  public String toString() {", "right_context": "", "class_name": "PartitionReplica", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AclVO implements Comparable<AclVO> {\n  private final String name;\n  private final String resourceType;\n  private final String patternType;\n\n  private final String principal;\n  private final String host;\n  private final String operation;\n  private final String permissionType;\n\n  public AclVO(String resourceType, String name, String patternType, String principal, String host, String operation,\n               String permissionType) {\n    this.resourceType = resourceType;\n    this.name = name;\n    this.patternType = patternType;\n    this.principal = principal;\n    this.host = host;\n    this.operation = operation;\n    this.permissionType = permissionType;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getResourceType() {\n    return resourceType;\n  }\n\n  public String getPatternType() {\n    return patternType;\n  }\n\n  public String getPrincipal() {\n    return principal;\n  }\n\n  public String getHost() {\n    return host;\n  }\n\n  public String getOperation() {\n    return operation;\n  }\n\n  public String getPermissionType() {\n    return permissionType;\n  }\n\n  @Override\n  public int compareTo(AclVO that) {\n    return this.name.compareTo(that.name);\n  }\n\n  @Override\n  public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(name);\n  }\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/172", "ground_truth": "\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    AclVO aclVO = (AclVO) o;\n    return name.equals(aclVO.name);\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "model", "AclVO.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class AclVO implements Comparable<AclVO> {\n  private final String name;\n  private final String resourceType;\n  private final String patternType;\n\n  private final String principal;\n  private final String host;\n  private final String operation;\n  private final String permissionType;\n\n  public AclVO(String resourceType, String name, String patternType, String principal, String host, String operation,\n               String permissionType) {\n    this.resourceType = resourceType;\n    this.name = name;\n    this.patternType = patternType;\n    this.principal = principal;\n    this.host = host;\n    this.operation = operation;\n    this.permissionType = permissionType;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getResourceType() {\n    return resourceType;\n  }\n\n  public String getPatternType() {\n    return patternType;\n  }\n\n  public String getPrincipal() {\n    return principal;\n  }\n\n  public String getHost() {\n    return host;\n  }\n\n  public String getOperation() {\n    return operation;\n  }\n\n  public String getPermissionType() {\n    return permissionType;\n  }\n\n  @Override\n  public int compareTo(AclVO that) {\n    return this.name.compareTo(that.name);\n  }\n\n  @Override\n  public boolean equals(Object o) {", "right_context": "}\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(name);\n  }\n}", "class_name": "AclVO", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// kafdrop/src/main/java/kafdrop/config/HealthCheckConfiguration.java\n// --------------------------------------------------\n// @ManagedAttribute public Map<String,Object> getHealth(){\n//   final var health=(Health)healthEndpoint.health();\n//   final var healthMap=new LinkedHashMap<String,Object>();\n//   healthMap.put(\"status\",getStatus(health));\n//   healthMap.put(\"detail\",getDetails(health.getDetails()));\n//   return healthMap;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// kafdrop/src/main/java/kafdrop/config/HealthCheckConfiguration.java\n// --------------------------------------------------\n// private Map<String,Object> getDetails(Map<String,Object> details){\n//   return details.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,e -> {\n//     final var health=(Health)e.getValue();\n//     final var detail=new LinkedHashMap<String,Object>();\n//     final var healthy=Status.UP.equals(health.getStatus());\n//     detail.put(\"healthy\",healthy);\n//     detail.put(\"message\",health.getDetails().toString());\n//     return detail;\n//   }\n// ));\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// kafdrop/src/test/java/kafdrop/AbstractIntegrationTest.java\n// --------------------------------------------------\n// public static Map<String,Object> getProperties(){\n//   Startables.deepStart(List.of(kafka)).join();\n//   return Map.of(\"kafka.brokerConnect\",kafka.getBootstrapServers(),\"protobufdesc.directory\",\"./src/test/resources\",\"protobufdesc.parseAnyProto\",true);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass IniFilePropertySource extends MapPropertySource {\n  public IniFilePropertySource(String name, IniFileProperties source, String[] activeProfiles) {\n    super(name, loadPropertiesForIniFile(source, activeProfiles));\n  }\n\n  private static Map<String, Object> loadPropertiesForIniFile(IniFileProperties iniProperties,\n                                                              String[] activeProfiles) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/271", "ground_truth": "\n    final Map<String, Object> properties = Maps.newLinkedHashMap();\n    properties.putAll(iniProperties.getDefaultProperties());\n\n    if (activeProfiles != null && activeProfiles.length > 0) {\n      for (String profile : activeProfiles) {\n        final Map<String, String> sectionProperties = iniProperties.getSectionProperties(profile);\n        if (sectionProperties != null) {\n          properties.putAll(sectionProperties);\n        }\n      }\n    }\n    return properties;\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "config", "ini", "IniFilePropertySource.java"], "context_start_lineno": 0, "function_name": "loadPropertiesForIniFile", "left_context": "class IniFilePropertySource extends MapPropertySource {\n  public IniFilePropertySource(String name, IniFileProperties source, String[] activeProfiles) {\n    super(name, loadPropertiesForIniFile(source, activeProfiles));\n  }\n\n  private static Map<String, Object> loadPropertiesForIniFile(IniFileProperties iniProperties,\n                                                              String[] activeProfiles) {", "right_context": "}\n}", "class_name": "IniFilePropertySource", "return_type": "Map<String,Object>", "parameters": [{"type": "IniFileProperties", "name": "iniProperties"}, {"type": "String[]", "name": "activeProfiles"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// the below code fragment can be found in:\n// kafdrop/src/main/java/kafdrop/config/ini/IniFilePropertySource.java\n// --------------------------------------------------\n// private static Map<String,Object> loadPropertiesForIniFile(IniFileProperties iniProperties,String[] activeProfiles){\n//   final Map<String,Object> properties=Maps.newLinkedHashMap();\n//   properties.putAll(iniProperties.getDefaultProperties());\n//   if (activeProfiles != null && activeProfiles.length > 0) {\n//     for (    String profile : activeProfiles) {\n//       final Map<String,String> sectionProperties=iniProperties.getSectionProperties(profile);\n//       if (sectionProperties != null) {\n//         properties.putAll(sectionProperties);\n//       }\n//     }\n//   }\n//   return properties;\n// }\n// \n// --------------------------------------------------\n// the below code fragment can be found in:\n// kafdrop/src/test/java/kafdrop/AbstractIntegrationTest.java\n// --------------------------------------------------\n// public static Map<String,Object> getProperties(){\n//   Startables.deepStart(List.of(kafka)).join();\n//   return Map.of(\"kafka.brokerConnect\",kafka.getBootstrapServers(),\"protobufdesc.directory\",\"./src/test/resources\",\"protobufdesc.parseAnyProto\",true);\n// }\n// \n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass HealthCheck {\n    private final HealthEndpoint healthEndpoint;\n\n    public HealthCheck(HealthEndpoint healthEndpoint) {\n      this.healthEndpoint = healthEndpoint;\n    }\n\n    @ManagedAttribute\n    public Map<String, Object> getHealth() {<FILL_FUNCTION_BODY>}\n\n    private Map<String, Object> getDetails(Map<String, Object> details) {\n      return details.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getKey,\n          e -> {\n            final var health = (Health) e.getValue();\n            final var detail = new LinkedHashMap<String, Object>();\n            final var healthy = Status.UP.equals(health.getStatus());\n            detail.put(\"healthy\", healthy);\n            detail.put(\"message\", health.getDetails().toString());\n            return detail;\n          }));\n    }\n\n    private String getStatus(Health health) {\n      final var status = health.getStatus();\n      if (Status.UP.equals(status) || Status.DOWN.equals(status)) {\n        return status.toString();\n      } else {\n        return \"ERROR\";\n      }\n    }\n  }", "metadata": {"task_id": "obsidiandynamics_kafdrop/340", "ground_truth": "\n      final var health = (Health) healthEndpoint.health();\n      final var healthMap = new LinkedHashMap<String, Object>();\n      healthMap.put(\"status\", getStatus(health));\n      healthMap.put(\"detail\", getDetails(health.getDetails()));\n      return healthMap;\n    ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "config", "HealthCheckConfiguration.java"], "context_start_lineno": 0, "function_name": "getHealth", "left_context": "class HealthCheck {\n    private final HealthEndpoint healthEndpoint;\n\n    public HealthCheck(HealthEndpoint healthEndpoint) {\n      this.healthEndpoint = healthEndpoint;\n    }\n\n    @ManagedAttribute\n    public Map<String, Object> getHealth() {", "right_context": "}\n\n    private Map<String, Object> getDetails(Map<String, Object> details) {\n      return details.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getKey,\n          e -> {\n            final var health = (Health) e.getValue();\n            final var detail = new LinkedHashMap<String, Object>();\n            final var healthy = Status.UP.equals(health.getStatus());\n            detail.put(\"healthy\", healthy);\n            detail.put(\"message\", health.getDetails().toString());\n            return detail;\n          }));\n    }\n\n    private String getStatus(Health health) {\n      final var status = health.getStatus();\n      if (Status.UP.equals(status) || Status.DOWN.equals(status)) {\n        return status.toString();\n      } else {\n        return \"ERROR\";\n      }\n    }\n  }", "class_name": "HealthCheck", "return_type": "Map<String,Object>", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass CorsConfiguration {\n  @Value(\"${cors.allowOrigins:*}\")\n  private String corsAllowOrigins;\n\n  @Value(\"${cors.allowMethods:GET,POST,PUT,DELETE}\")\n  private String corsAllowMethods;\n\n  @Value(\"${cors.maxAge:3600}\")\n  private String corsMaxAge;\n\n  @Value(\"${cors.allowCredentials:true}\")\n  private String corsAllowCredentials;\n\n  @Value(\"${cors.allowHeaders:Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,\" +\n    \"Access-Control-Request-Headers,Authorization}\")\n  private String corsAllowHeaders;\n\n  @Bean\n  @Order(Ordered.HIGHEST_PRECEDENCE)\n  public Filter corsFilter() {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/383", "ground_truth": "\n    return new Filter() {\n      @Override\n      public void init(FilterConfig filterConfig) {\n        // nothing to init\n      }\n\n      @Override\n      public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n        ServletException {\n        final var response = (HttpServletResponse) res;\n        final var request = (HttpServletRequest) req;\n\n        response.setHeader(\"Access-Control-Allow-Origin\", corsAllowOrigins);\n        response.setHeader(\"Access-Control-Allow-Methods\", corsAllowMethods);\n        response.setHeader(\"Access-Control-Max-Age\", corsMaxAge);\n        response.setHeader(\"Access-Control-Allow-Credentials\", corsAllowCredentials);\n        response.setHeader(\"Access-Control-Allow-Headers\", corsAllowHeaders);\n\n        if (request.getMethod().equals(HttpMethod.OPTIONS.name())) {\n          response.setStatus(HttpStatus.NO_CONTENT.value());\n        } else {\n          chain.doFilter(req, res);\n        }\n      }\n\n      @Override\n      public void destroy() {\n        // nothing to destroy\n      }\n    };\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "config", "CorsConfiguration.java"], "context_start_lineno": 0, "function_name": "corsFilter", "left_context": "class CorsConfiguration {\n  @Value(\"${cors.allowOrigins:*}\")\n  private String corsAllowOrigins;\n\n  @Value(\"${cors.allowMethods:GET,POST,PUT,DELETE}\")\n  private String corsAllowMethods;\n\n  @Value(\"${cors.maxAge:3600}\")\n  private String corsMaxAge;\n\n  @Value(\"${cors.allowCredentials:true}\")\n  private String corsAllowCredentials;\n\n  @Value(\"${cors.allowHeaders:Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,\" +\n    \"Access-Control-Request-Headers,Authorization}\")\n  private String corsAllowHeaders;\n\n  @Bean\n  @Order(Ordered.HIGHEST_PRECEDENCE)\n  public Filter corsFilter() {", "right_context": "}\n}", "class_name": "CorsConfiguration", "return_type": "Filter", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConsumerVO implements Comparable<ConsumerVO> {\n  private final String groupId;\n  private final Map<String, ConsumerTopicVO> topics = new TreeMap<>();\n\n  public ConsumerVO(String groupId) {\n    Validate.notEmpty(\"groupId is required\");\n    this.groupId = groupId;\n  }\n\n  public String getGroupId() {\n    return groupId;\n  }\n\n  public void addTopic(ConsumerTopicVO topic) {\n    topics.put(topic.getTopic(), topic);\n  }\n\n  public ConsumerTopicVO getTopic(String topic) {\n    return topics.get(topic);\n  }\n\n  public Collection<ConsumerTopicVO> getTopics() {\n    return topics.values();\n  }\n\n  @Override\n  public int compareTo(ConsumerVO that) {\n    return this.groupId.compareTo(that.groupId);\n  }\n\n  @Override\n  public boolean equals(Object o) {<FILL_FUNCTION_BODY>}\n\n  @Override\n  public int hashCode() {\n    return Objects.hashCode(groupId);\n  }\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/384", "ground_truth": "\n    if (this == o) {\n      return true;\n    } else if (o instanceof ConsumerVO) {\n      final var that = (ConsumerVO) o;\n      return Objects.equals(groupId, that.groupId);\n    } else {\n      return false;\n    }\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "model", "ConsumerVO.java"], "context_start_lineno": 0, "function_name": "equals", "left_context": "class ConsumerVO implements Comparable<ConsumerVO> {\n  private final String groupId;\n  private final Map<String, ConsumerTopicVO> topics = new TreeMap<>();\n\n  public ConsumerVO(String groupId) {\n    Validate.notEmpty(\"groupId is required\");\n    this.groupId = groupId;\n  }\n\n  public String getGroupId() {\n    return groupId;\n  }\n\n  public void addTopic(ConsumerTopicVO topic) {\n    topics.put(topic.getTopic(), topic);\n  }\n\n  public ConsumerTopicVO getTopic(String topic) {\n    return topics.get(topic);\n  }\n\n  public Collection<ConsumerTopicVO> getTopics() {\n    return topics.values();\n  }\n\n  @Override\n  public int compareTo(ConsumerVO that) {\n    return this.groupId.compareTo(that.groupId);\n  }\n\n  @Override\n  public boolean equals(Object o) {", "right_context": "}\n\n  @Override\n  public int hashCode() {\n    return Objects.hashCode(groupId);\n  }\n}", "class_name": "ConsumerVO", "return_type": "boolean", "parameters": [{"type": "Object", "name": "o"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass KafkaConfiguration {\n  private static final Logger LOG = LoggerFactory.getLogger(KafkaConfiguration.class);\n\n  private String brokerConnect;\n  private String saslMechanism;\n  private String securityProtocol;\n  private String truststoreFile;\n  private String propertiesFile;\n  private String keystoreFile;\n\n  public void applyCommon(Properties properties) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/453", "ground_truth": "\n    properties.setProperty(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, brokerConnect);\n\n    if (securityProtocol.equals(\"SSL\")) {\n      properties.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, securityProtocol);\n    }\n\n    LOG.info(\"Checking truststore file {}\", truststoreFile);\n    if (new File(truststoreFile).isFile()) {\n      LOG.info(\"Assigning truststore location to {}\", truststoreFile);\n      properties.put(\"ssl.truststore.location\", truststoreFile);\n    }\n\n    LOG.info(\"Checking keystore file {}\", keystoreFile);\n    if (new File(keystoreFile).isFile()) {\n      LOG.info(\"Assigning keystore location to {}\", keystoreFile);\n      properties.put(\"ssl.keystore.location\", keystoreFile);\n    }\n\n    LOG.info(\"Checking properties file {}\", propertiesFile);\n    final var propertiesFile = new File(this.propertiesFile);\n    if (propertiesFile.isFile()) {\n      LOG.info(\"Loading properties from {}\", this.propertiesFile);\n      final var propertyOverrides = new Properties();\n      try (var propsReader = new BufferedReader(new FileReader(propertiesFile))) {\n        propertyOverrides.load(propsReader);\n      } catch (IOException e) {\n        throw new KafkaConfigurationException(e);\n      }\n      properties.putAll(propertyOverrides);\n    }\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "config", "KafkaConfiguration.java"], "context_start_lineno": 0, "function_name": "applyCommon", "left_context": "class KafkaConfiguration {\n  private static final Logger LOG = LoggerFactory.getLogger(KafkaConfiguration.class);\n\n  private String brokerConnect;\n  private String saslMechanism;\n  private String securityProtocol;\n  private String truststoreFile;\n  private String propertiesFile;\n  private String keystoreFile;\n\n  public void applyCommon(Properties properties) {", "right_context": "}\n}", "class_name": "KafkaConfiguration", "return_type": "void", "parameters": [{"type": "Properties", "name": "properties"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass BrokerController {\n  private final KafkaMonitor kafkaMonitor;\n\n  public BrokerController(KafkaMonitor kafkaMonitor) {\n    this.kafkaMonitor = kafkaMonitor;\n  }\n\n  @RequestMapping(\"/broker/{id}\")\n  public String brokerDetails(@PathVariable(\"id\") int brokerId, Model model) {<FILL_FUNCTION_BODY>}\n\n  @Operation(summary = \"getBroker\", description = \"Get details for a specific Kafka broker\")\n  @ApiResponses(value = {\n    @ApiResponse(responseCode = \"200\", description = \"Success\"),\n    @ApiResponse(responseCode = \"404\", description = \"Invalid Broker ID\")\n  })\n  @GetMapping(path = \"/broker/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n  public @ResponseBody BrokerVO brokerDetailsJson(@PathVariable(\"id\") int brokerId) {\n    return kafkaMonitor.getBroker(brokerId).orElseThrow(() ->\n      new BrokerNotFoundException(\"No such broker \" + brokerId));\n  }\n\n  @Operation(summary = \"getAllBrokers\", description = \"Get details for all known Kafka brokers\")\n  @ApiResponses(value = {\n    @ApiResponse(responseCode = \"200\", description = \"Success\")\n  })\n  @GetMapping(path = \"/broker\", produces = MediaType.APPLICATION_JSON_VALUE)\n  public @ResponseBody List<BrokerVO> brokerDetailsJson() {\n    return kafkaMonitor.getBrokers();\n  }\n}", "metadata": {"task_id": "obsidiandynamics_kafdrop/467", "ground_truth": "\n    model.addAttribute(\"broker\", kafkaMonitor.getBroker(brokerId)\n      .orElseThrow(() -> new BrokerNotFoundException(\"No such broker \" + brokerId)));\n    model.addAttribute(\"topics\", kafkaMonitor.getTopics());\n    return \"broker-detail\";\n  ", "fpath_tuple": ["obsidiandynamics_kafdrop", "kafdrop", "src", "main", "java", "kafdrop", "controller", "BrokerController.java"], "context_start_lineno": 0, "function_name": "brokerDetails", "left_context": "class BrokerController {\n  private final KafkaMonitor kafkaMonitor;\n\n  public BrokerController(KafkaMonitor kafkaMonitor) {\n    this.kafkaMonitor = kafkaMonitor;\n  }\n\n  @RequestMapping(\"/broker/{id}\")\n  public String brokerDetails(@PathVariable(\"id\") int brokerId, Model model) {", "right_context": "}\n\n  @Operation(summary = \"getBroker\", description = \"Get details for a specific Kafka broker\")\n  @ApiResponses(value = {\n    @ApiResponse(responseCode = \"200\", description = \"Success\"),\n    @ApiResponse(responseCode = \"404\", description = \"Invalid Broker ID\")\n  })\n  @GetMapping(path = \"/broker/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n  public @ResponseBody BrokerVO brokerDetailsJson(@PathVariable(\"id\") int brokerId) {\n    return kafkaMonitor.getBroker(brokerId).orElseThrow(() ->\n      new BrokerNotFoundException(\"No such broker \" + brokerId));\n  }\n\n  @Operation(summary = \"getAllBrokers\", description = \"Get details for all known Kafka brokers\")\n  @ApiResponses(value = {\n    @ApiResponse(responseCode = \"200\", description = \"Success\")\n  })\n  @GetMapping(path = \"/broker\", produces = MediaType.APPLICATION_JSON_VALUE)\n  public @ResponseBody List<BrokerVO> brokerDetailsJson() {\n    return kafkaMonitor.getBrokers();\n  }\n}", "class_name": "BrokerController", "return_type": "String", "parameters": [{"type": "int", "name": "brokerId"}, {"type": "Model", "name": "model"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Images {\n    /**\n     * keys\n     */\n    private String apiKey;\n\n    private List<String> apiKeyList;\n    /**\n     * \u81ea\u5b9a\u4e49api host\u4f7f\u7528builder\u7684\u65b9\u5f0f\u6784\u9020client\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n    private Api apiClient;\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8d85\u65f6 \u9ed8\u8ba4300\n     */\n    @Builder.Default\n    private long timeout = 300;\n    /**\n     * okhttp \u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    public Images init() {<FILL_FUNCTION_BODY>}\n\n    public ImagesRensponse generations(Generations generations){\n        Single<ImagesRensponse> imagesRensponse =\n                this.apiClient.imageGenerations(generations);\n        return imagesRensponse.blockingGet();\n    }\n\n    public ImagesRensponse edits(File image,File mask,Edits edits){\n        RequestBody i = RequestBody.create(MediaType.parse(\"multipart/form-data;charset=UTF-8\"), image);\n        MultipartBody.Part iPart = MultipartBody.Part.createFormData(\"image\", image.getName(), i);\n\n        RequestBody m = RequestBody.create(MediaType.parse(\"multipart/form-data;charset=UTF-8\"), mask);\n        MultipartBody.Part mPart = MultipartBody.Part.createFormData(\"mask\", mask.getName(), m);\n\n        Single<ImagesRensponse> imagesRensponse =\n                this.apiClient.imageEdits(iPart,mPart,edits);\n        return imagesRensponse.blockingGet();\n    }\n\n    public ImagesRensponse variations(File image,Variations variations){\n        RequestBody i = RequestBody.create(MediaType.parse(\"multipart/form-data;charset=UTF-8\"), image);\n        MultipartBody.Part iPart = MultipartBody.Part.createFormData(\"image\", image.getName(), i);\n        Single<ImagesRensponse> imagesRensponse =\n                this.apiClient.imageVariations(iPart,variations);\n        return imagesRensponse.blockingGet();\n    }\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/9", "ground_truth": "\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.addInterceptor(chain -> {\n            Request original = chain.request();\n            String key = apiKey;\n            if (apiKeyList != null && !apiKeyList.isEmpty()) {\n                key = RandomUtil.randomEle(apiKeyList);\n            }\n\n            Request request = original.newBuilder()\n                    .header(Header.AUTHORIZATION.getValue(), \"Bearer \" + key)\n                    .header(Header.CONTENT_TYPE.getValue(), ContentType.JSON.getValue())\n                    .method(original.method(), original.body())\n                    .build();\n            return chain.proceed(request);\n        }).addInterceptor(chain -> {\n            Request original = chain.request();\n            Response response = chain.proceed(original);\n            if (!response.isSuccessful()) {\n                String errorMsg = response.body().string();\n\n                log.error(\"\u8bf7\u6c42\u5f02\u5e38\uff1a{}\", errorMsg);\n                BaseResponse baseResponse = JSON.parseObject(errorMsg, BaseResponse.class);\n                if (Objects.nonNull(baseResponse.getError())) {\n                    log.error(baseResponse.getError().getMessage());\n                    throw new ChatException(baseResponse.getError().getMessage());\n                }\n                throw new ChatException(\"error\");\n            }\n            return response;\n        });\n\n        client.connectTimeout(timeout, TimeUnit.SECONDS);\n        client.writeTimeout(timeout, TimeUnit.SECONDS);\n        client.readTimeout(timeout, TimeUnit.SECONDS);\n        if (Objects.nonNull(proxy)) {\n            client.proxy(proxy);\n        }\n        OkHttpClient httpClient = client.build();\n        this.okHttpClient = httpClient;\n\n\n        this.apiClient = new Retrofit.Builder()\n                .baseUrl(this.apiHost)\n                .client(okHttpClient)\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .addConverterFactory(JacksonConverterFactory.create())\n                .build()\n                .create(Api.class);\n\n        return this;\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "Images.java"], "context_start_lineno": 0, "function_name": "init", "left_context": "class Images {\n    /**\n     * keys\n     */\n    private String apiKey;\n\n    private List<String> apiKeyList;\n    /**\n     * \u81ea\u5b9a\u4e49api host\u4f7f\u7528builder\u7684\u65b9\u5f0f\u6784\u9020client\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n    private Api apiClient;\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8d85\u65f6 \u9ed8\u8ba4300\n     */\n    @Builder.Default\n    private long timeout = 300;\n    /**\n     * okhttp \u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    public Images init() {", "right_context": "}\n\n    public ImagesRensponse generations(Generations generations){\n        Single<ImagesRensponse> imagesRensponse =\n                this.apiClient.imageGenerations(generations);\n        return imagesRensponse.blockingGet();\n    }\n\n    public ImagesRensponse edits(File image,File mask,Edits edits){\n        RequestBody i = RequestBody.create(MediaType.parse(\"multipart/form-data;charset=UTF-8\"), image);\n        MultipartBody.Part iPart = MultipartBody.Part.createFormData(\"image\", image.getName(), i);\n\n        RequestBody m = RequestBody.create(MediaType.parse(\"multipart/form-data;charset=UTF-8\"), mask);\n        MultipartBody.Part mPart = MultipartBody.Part.createFormData(\"mask\", mask.getName(), m);\n\n        Single<ImagesRensponse> imagesRensponse =\n                this.apiClient.imageEdits(iPart,mPart,edits);\n        return imagesRensponse.blockingGet();\n    }\n\n    public ImagesRensponse variations(File image,Variations variations){\n        RequestBody i = RequestBody.create(MediaType.parse(\"multipart/form-data;charset=UTF-8\"), image);\n        MultipartBody.Part iPart = MultipartBody.Part.createFormData(\"image\", image.getName(), i);\n        Single<ImagesRensponse> imagesRensponse =\n                this.apiClient.imageVariations(iPart,variations);\n        return imagesRensponse.blockingGet();\n    }\n}", "class_name": "Images", "return_type": "Images", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass SseHelper {\n\n\n    public void complete(SseEmitter sseEmitter) {<FILL_FUNCTION_BODY>}\n\n    public void send(SseEmitter sseEmitter, Object data) {\n\n        try {\n            sseEmitter.send(data);\n        } catch (Exception e) {\n\n        }\n    }\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/40", "ground_truth": "\n\n        try {\n            sseEmitter.complete();\n        } catch (Exception e) {\n\n        }\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "util", "SseHelper.java"], "context_start_lineno": 0, "function_name": "complete", "left_context": "class SseHelper {\n\n\n    public void complete(SseEmitter sseEmitter) {", "right_context": "}\n\n    public void send(SseEmitter sseEmitter, Object data) {\n\n        try {\n            sseEmitter.send(data);\n        } catch (Exception e) {\n\n        }\n    }\n}", "class_name": "SseHelper", "return_type": "void", "parameters": [{"type": "SseEmitter", "name": "sseEmitter"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ChatGPT {\n    /**\n     * keys\n     */\n    private String apiKey;\n\n    private List<String> apiKeyList;\n    /**\n     * \u81ea\u5b9a\u4e49api host\u4f7f\u7528builder\u7684\u65b9\u5f0f\u6784\u9020client\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n    private Api apiClient;\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8d85\u65f6 \u9ed8\u8ba4300\n     */\n    @Builder.Default\n    private long timeout = 300;\n    /**\n     * okhttp \u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n\n\n    /**\n     * \u521d\u59cb\u5316\uff1a\u4e0e\u670d\u52a1\u7aef\u5efa\u7acb\u8fde\u63a5\uff0c\u6210\u529f\u540e\u53ef\u76f4\u63a5\u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u5bf9\u8bdd\n     */\n    public ChatGPT init() {<FILL_FUNCTION_BODY>}\n\n\n    /**\n     * \u6700\u65b0\u7248\u7684GPT-3.5 chat completion \u66f4\u52a0\u8d34\u8fd1\u5b98\u65b9\u7f51\u7ad9\u7684\u95ee\u7b54\u6a21\u578b\n     *\n     * @param chatCompletion \u95ee\u7b54\u53c2\u6570\uff0c\u5373\u54a8\u8be2\u7684\u5185\u5bb9\n     * @return \u670d\u52a1\u7aef\u7684\u95ee\u7b54\u54cd\u5e94\n     */\n    public ChatCompletionResponse chatCompletion(ChatCompletion chatCompletion) {\n        Single<ChatCompletionResponse> chatCompletionResponse =\n                this.apiClient.chatCompletion(chatCompletion);\n        return chatCompletionResponse.blockingGet();\n    }\n\n    /**\n     * \u652f\u6301\u591a\u4e2a\u95ee\u7b54\u53c2\u6570\u6765\u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u5bf9\u8bdd\n     *\n     * @param messages  \u95ee\u7b54\u53c2\u6570\uff0c\u5373\u54a8\u8be2\u7684\u5185\u5bb9\n     * @return \u670d\u52a1\u7aef\u7684\u95ee\u7b54\u54cd\u5e94\n     */\n    public ChatCompletionResponse chatCompletion(List<Message> messages) {\n        ChatCompletion chatCompletion = ChatCompletion.builder().messages(messages).build();\n        return this.chatCompletion(chatCompletion);\n    }\n\n    /**\n     * \u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u5bf9\u8bdd\n     * @param message \u95ee\u7b54\u53c2\u6570\uff0c\u5373\u54a8\u8be2\u7684\u5185\u5bb9\n     * @return \u670d\u52a1\u7aef\u7684\u95ee\u7b54\u54cd\u5e94\n     */\n    public String chat(String message) {\n        ChatCompletion chatCompletion = ChatCompletion.builder()\n                .messages(Arrays.asList(Message.of(message)))\n                .build();\n        ChatCompletionResponse response = this.chatCompletion(chatCompletion);\n        return response.getChoices().get(0).getMessage().getContent();\n    }\n\n    /**\n     * \u4f59\u989d\u67e5\u8be2\n     *\n     * @return \u4f59\u989d\u603b\u91d1\u989d\u53ca\u660e\u7ec6\n     */\n    public CreditGrantsResponse creditGrants() {\n        Single<CreditGrantsResponse> creditGrants = this.apiClient.creditGrants();\n        return creditGrants.blockingGet();\n    }\n\n\n    /**\n     * \u4f59\u989d\u67e5\u8be2\n     *\n     * @return \u4f59\u989d\u603b\u91d1\u989d\n     */\n    public BigDecimal balance() {\n        Single<SubscriptionData> subscription = apiClient.subscription();\n        SubscriptionData subscriptionData = subscription.blockingGet();\n        BigDecimal total = subscriptionData.getHardLimitUsd();\n        DateTime start = DateUtil.offsetDay(new Date(), -90);\n        DateTime end = DateUtil.offsetDay(new Date(), 1);\n\n        Single<UseageResponse> usage = apiClient.usage(formatDate(start), formatDate(end));\n        UseageResponse useageResponse = usage.blockingGet();\n        BigDecimal used = useageResponse.getTotalUsage().divide(BigDecimal.valueOf(100));\n\n        return total.subtract(used);\n    }\n\n    /**\n     * \u65b0\u5efa\u8fde\u63a5\u8fdb\u884c\u4f59\u989d\u67e5\u8be2\n     *\n     * @return \u4f59\u989d\u603b\u91d1\u989d\n     */\n    public static BigDecimal balance(String key) {\n        ChatGPT chatGPT = ChatGPT.builder()\n                .apiKey(key)\n                .build()\n                .init();\n\n        return chatGPT.balance();\n    }\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/70", "ground_truth": "\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.addInterceptor(chain -> {\n            Request original = chain.request();\n            String key = apiKey;\n            if (apiKeyList != null && !apiKeyList.isEmpty()) {\n                key = RandomUtil.randomEle(apiKeyList);\n            }\n\n            Request request = original.newBuilder()\n                    .header(Header.AUTHORIZATION.getValue(), \"Bearer \" + key)\n                    .header(Header.CONTENT_TYPE.getValue(), ContentType.JSON.getValue())\n                    .method(original.method(), original.body())\n                    .build();\n            return chain.proceed(request);\n        }).addInterceptor(chain -> {\n            Request original = chain.request();\n            Response response = chain.proceed(original);\n            if (!response.isSuccessful()) {\n                String errorMsg = response.body().string();\n\n                log.error(\"\u8bf7\u6c42\u5f02\u5e38\uff1a{}\", errorMsg);\n                BaseResponse baseResponse = JSON.parseObject(errorMsg, BaseResponse.class);\n                if (Objects.nonNull(baseResponse.getError())) {\n                    log.error(baseResponse.getError().getMessage());\n                    throw new ChatException(baseResponse.getError().getMessage());\n                }\n                throw new ChatException(\"ChatGPT init error!\");\n            }\n            return response;\n        });\n\n        client.connectTimeout(timeout, TimeUnit.SECONDS);\n        client.writeTimeout(timeout, TimeUnit.SECONDS);\n        client.readTimeout(timeout, TimeUnit.SECONDS);\n        if (Objects.nonNull(proxy)) {\n            client.proxy(proxy);\n        }\n        OkHttpClient httpClient = client.build();\n        this.okHttpClient = httpClient;\n\n\n        this.apiClient = new Retrofit.Builder()\n                .baseUrl(this.apiHost)\n                .client(okHttpClient)\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .addConverterFactory(JacksonConverterFactory.create())\n                .build()\n                .create(Api.class);\n\n        return this;\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "ChatGPT.java"], "context_start_lineno": 0, "function_name": "init", "left_context": "class ChatGPT {\n    /**\n     * keys\n     */\n    private String apiKey;\n\n    private List<String> apiKeyList;\n    /**\n     * \u81ea\u5b9a\u4e49api host\u4f7f\u7528builder\u7684\u65b9\u5f0f\u6784\u9020client\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n    private Api apiClient;\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8d85\u65f6 \u9ed8\u8ba4300\n     */\n    @Builder.Default\n    private long timeout = 300;\n    /**\n     * okhttp \u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n\n\n    /**\n     * \u521d\u59cb\u5316\uff1a\u4e0e\u670d\u52a1\u7aef\u5efa\u7acb\u8fde\u63a5\uff0c\u6210\u529f\u540e\u53ef\u76f4\u63a5\u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u5bf9\u8bdd\n     */\n    public ChatGPT init() {", "right_context": "}\n\n\n    /**\n     * \u6700\u65b0\u7248\u7684GPT-3.5 chat completion \u66f4\u52a0\u8d34\u8fd1\u5b98\u65b9\u7f51\u7ad9\u7684\u95ee\u7b54\u6a21\u578b\n     *\n     * @param chatCompletion \u95ee\u7b54\u53c2\u6570\uff0c\u5373\u54a8\u8be2\u7684\u5185\u5bb9\n     * @return \u670d\u52a1\u7aef\u7684\u95ee\u7b54\u54cd\u5e94\n     */\n    public ChatCompletionResponse chatCompletion(ChatCompletion chatCompletion) {\n        Single<ChatCompletionResponse> chatCompletionResponse =\n                this.apiClient.chatCompletion(chatCompletion);\n        return chatCompletionResponse.blockingGet();\n    }\n\n    /**\n     * \u652f\u6301\u591a\u4e2a\u95ee\u7b54\u53c2\u6570\u6765\u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u5bf9\u8bdd\n     *\n     * @param messages  \u95ee\u7b54\u53c2\u6570\uff0c\u5373\u54a8\u8be2\u7684\u5185\u5bb9\n     * @return \u670d\u52a1\u7aef\u7684\u95ee\u7b54\u54cd\u5e94\n     */\n    public ChatCompletionResponse chatCompletion(List<Message> messages) {\n        ChatCompletion chatCompletion = ChatCompletion.builder().messages(messages).build();\n        return this.chatCompletion(chatCompletion);\n    }\n\n    /**\n     * \u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u5bf9\u8bdd\n     * @param message \u95ee\u7b54\u53c2\u6570\uff0c\u5373\u54a8\u8be2\u7684\u5185\u5bb9\n     * @return \u670d\u52a1\u7aef\u7684\u95ee\u7b54\u54cd\u5e94\n     */\n    public String chat(String message) {\n        ChatCompletion chatCompletion = ChatCompletion.builder()\n                .messages(Arrays.asList(Message.of(message)))\n                .build();\n        ChatCompletionResponse response = this.chatCompletion(chatCompletion);\n        return response.getChoices().get(0).getMessage().getContent();\n    }\n\n    /**\n     * \u4f59\u989d\u67e5\u8be2\n     *\n     * @return \u4f59\u989d\u603b\u91d1\u989d\u53ca\u660e\u7ec6\n     */\n    public CreditGrantsResponse creditGrants() {\n        Single<CreditGrantsResponse> creditGrants = this.apiClient.creditGrants();\n        return creditGrants.blockingGet();\n    }\n\n\n    /**\n     * \u4f59\u989d\u67e5\u8be2\n     *\n     * @return \u4f59\u989d\u603b\u91d1\u989d\n     */\n    public BigDecimal balance() {\n        Single<SubscriptionData> subscription = apiClient.subscription();\n        SubscriptionData subscriptionData = subscription.blockingGet();\n        BigDecimal total = subscriptionData.getHardLimitUsd();\n        DateTime start = DateUtil.offsetDay(new Date(), -90);\n        DateTime end = DateUtil.offsetDay(new Date(), 1);\n\n        Single<UseageResponse> usage = apiClient.usage(formatDate(start), formatDate(end));\n        UseageResponse useageResponse = usage.blockingGet();\n        BigDecimal used = useageResponse.getTotalUsage().divide(BigDecimal.valueOf(100));\n\n        return total.subtract(used);\n    }\n\n    /**\n     * \u65b0\u5efa\u8fde\u63a5\u8fdb\u884c\u4f59\u989d\u67e5\u8be2\n     *\n     * @return \u4f59\u989d\u603b\u91d1\u989d\n     */\n    public static BigDecimal balance(String key) {\n        ChatGPT chatGPT = ChatGPT.builder()\n                .apiKey(key)\n                .build()\n                .init();\n\n        return chatGPT.balance();\n    }\n}", "class_name": "ChatGPT", "return_type": "ChatGPT", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass AbstractStreamListener extends EventSourceListener {\n\n    protected String lastMessage = \"\";\n\n\n    /**\n     * Called when all new message are received.\n     *\n     * @param message the new message\n     */\n    @Setter\n    @Getter\n    protected Consumer<String> onComplate = s -> {\n\n    };\n\n    /**\n     * Called when a new message is received.\n     * \u6536\u5230\u6d88\u606f \u5355\u4e2a\u5b57\n     *\n     * @param message the new message\n     */\n    public abstract void onMsg(String message);\n\n    /**\n     * Called when an error occurs.\n     * \u51fa\u9519\u65f6\u8c03\u7528\n     *\n     * @param throwable the throwable that caused the error\n     * @param response  the response associated with the error, if any\n     */\n    public abstract void onError(Throwable throwable, String response);\n\n    @Override\n    public void onOpen(EventSource eventSource, Response response) {\n        // do nothing\n    }\n\n    @Override\n    public void onClosed(EventSource eventSource) {\n        // do nothing\n    }\n\n    @Override\n    public void onEvent(EventSource eventSource, String id, String type, String data) {<FILL_FUNCTION_BODY>}\n\n\n    @SneakyThrows\n    @Override\n    public void onFailure(EventSource eventSource, Throwable throwable, Response response) {\n\n        try {\n            log.error(\"Stream connection error: {}\", throwable);\n\n            String responseText = \"\";\n\n            if (Objects.nonNull(response)) {\n                responseText = response.body().string();\n            }\n\n            log.error(\"response\uff1a{}\", responseText);\n\n            String forbiddenText = \"Your access was terminated due to violation of our policies\";\n\n            if (StrUtil.contains(responseText, forbiddenText)) {\n                log.error(\"Chat session has been terminated due to policy violation\");\n                log.error(\"\u68c0\u6d4b\u5230\u53f7\u88ab\u5c01\u4e86\");\n            }\n\n            String overloadedText = \"That model is currently overloaded with other requests.\";\n\n            if (StrUtil.contains(responseText, overloadedText)) {\n                log.error(\"\u68c0\u6d4b\u5230\u5b98\u65b9\u8d85\u8f7d\u4e86\uff0c\u8d76\u7d27\u4f18\u5316\u4f60\u7684\u4ee3\u7801\uff0c\u505a\u91cd\u8bd5\u5427\");\n            }\n\n            this.onError(throwable, responseText);\n\n        } catch (Exception e) {\n            log.warn(\"onFailure error:{}\", e);\n            // do nothing\n\n        } finally {\n            eventSource.cancel();\n        }\n    }\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/95", "ground_truth": "\n        if (data.equals(\"[DONE]\")) {\n            onComplate.accept(lastMessage);\n            return;\n        }\n\n        ChatCompletionResponse response = JSON.parseObject(data, ChatCompletionResponse.class);\n        // \u8bfb\u53d6Json\n        List<ChatChoice> choices = response.getChoices();\n        if (choices == null || choices.isEmpty()) {\n            return;\n        }\n        Message delta = choices.get(0).getDelta();\n        String text = delta.getContent();\n\n        if (text != null) {\n            lastMessage += text;\n\n            onMsg(text);\n\n        }\n\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "listener", "AbstractStreamListener.java"], "context_start_lineno": 0, "function_name": "onEvent", "left_context": "class AbstractStreamListener extends EventSourceListener {\n\n    protected String lastMessage = \"\";\n\n\n    /**\n     * Called when all new message are received.\n     *\n     * @param message the new message\n     */\n    @Setter\n    @Getter\n    protected Consumer<String> onComplate = s -> {\n\n    };\n\n    /**\n     * Called when a new message is received.\n     * \u6536\u5230\u6d88\u606f \u5355\u4e2a\u5b57\n     *\n     * @param message the new message\n     */\n    public abstract void onMsg(String message);\n\n    /**\n     * Called when an error occurs.\n     * \u51fa\u9519\u65f6\u8c03\u7528\n     *\n     * @param throwable the throwable that caused the error\n     * @param response  the response associated with the error, if any\n     */\n    public abstract void onError(Throwable throwable, String response);\n\n    @Override\n    public void onOpen(EventSource eventSource, Response response) {\n        // do nothing\n    }\n\n    @Override\n    public void onClosed(EventSource eventSource) {\n        // do nothing\n    }\n\n    @Override\n    public void onEvent(EventSource eventSource, String id, String type, String data) {", "right_context": "}\n\n\n    @SneakyThrows\n    @Override\n    public void onFailure(EventSource eventSource, Throwable throwable, Response response) {\n\n        try {\n            log.error(\"Stream connection error: {}\", throwable);\n\n            String responseText = \"\";\n\n            if (Objects.nonNull(response)) {\n                responseText = response.body().string();\n            }\n\n            log.error(\"response\uff1a{}\", responseText);\n\n            String forbiddenText = \"Your access was terminated due to violation of our policies\";\n\n            if (StrUtil.contains(responseText, forbiddenText)) {\n                log.error(\"Chat session has been terminated due to policy violation\");\n                log.error(\"\u68c0\u6d4b\u5230\u53f7\u88ab\u5c01\u4e86\");\n            }\n\n            String overloadedText = \"That model is currently overloaded with other requests.\";\n\n            if (StrUtil.contains(responseText, overloadedText)) {\n                log.error(\"\u68c0\u6d4b\u5230\u5b98\u65b9\u8d85\u8f7d\u4e86\uff0c\u8d76\u7d27\u4f18\u5316\u4f60\u7684\u4ee3\u7801\uff0c\u505a\u91cd\u8bd5\u5427\");\n            }\n\n            this.onError(throwable, responseText);\n\n        } catch (Exception e) {\n            log.warn(\"onFailure error:{}\", e);\n            // do nothing\n\n        } finally {\n            eventSource.cancel();\n        }\n    }\n}", "class_name": "AbstractStreamListener", "return_type": "void", "parameters": [{"type": "EventSource", "name": "eventSource"}, {"type": "String", "name": "id"}, {"type": "String", "name": "type"}, {"type": "String", "name": "data"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ChatContextHolder {\n\n    private static Map<String, List<Message>> context = new HashMap<>();\n\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2\n     *\n     * @param id\n     * @return\n     */\n    public static List<Message> get(String id) {\n        List<Message> messages = context.get(id);\n        if (messages == null) {\n            messages = new ArrayList<>();\n            context.put(id, messages);\n        }\n\n        return messages;\n    }\n\n\n    /**\n     * \u6dfb\u52a0\u5bf9\u8bdd\n     *\n     * @param id\n     * @return\n     */\n    public static void add(String id, String msg) {\n\n        Message message = Message.builder().content(msg).build();\n        add(id, message);\n    }\n\n\n    /**\n     * \u6dfb\u52a0\u5bf9\u8bdd\n     *\n     * @param id\n     * @return\n     */\n    public static void add(String id, Message message) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u6e05\u9664\u5bf9\u8bdd\n     * @param id\n     */\n    public static void remove(String id) {\n        context.remove(id);\n    }\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/97", "ground_truth": "\n        List<Message> messages = context.get(id);\n        if (messages == null) {\n            messages = new ArrayList<>();\n            context.put(id, messages);\n        }\n        messages.add(message);\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "util", "ChatContextHolder.java"], "context_start_lineno": 0, "function_name": "add", "left_context": "class ChatContextHolder {\n\n    private static Map<String, List<Message>> context = new HashMap<>();\n\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2\n     *\n     * @param id\n     * @return\n     */\n    public static List<Message> get(String id) {\n        List<Message> messages = context.get(id);\n        if (messages == null) {\n            messages = new ArrayList<>();\n            context.put(id, messages);\n        }\n\n        return messages;\n    }\n\n\n    /**\n     * \u6dfb\u52a0\u5bf9\u8bdd\n     *\n     * @param id\n     * @return\n     */\n    public static void add(String id, String msg) {\n\n        Message message = Message.builder().content(msg).build();\n        add(id, message);\n    }\n\n\n    /**\n     * \u6dfb\u52a0\u5bf9\u8bdd\n     *\n     * @param id\n     * @return\n     */\n    public static void add(String id, Message message) {", "right_context": "}\n\n    /**\n     * \u6e05\u9664\u5bf9\u8bdd\n     * @param id\n     */\n    public static void remove(String id) {\n        context.remove(id);\n    }\n}", "class_name": "ChatContextHolder", "return_type": "void", "parameters": [{"type": "String", "name": "id"}, {"type": "Message", "name": "message"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass TokensUtil {\n\n    private static final Map<String, Encoding> modelEncodingMap = new HashMap<>();\n    private static final EncodingRegistry encodingRegistry = Encodings.newDefaultEncodingRegistry();\n\n    static {\n        for (ChatCompletion.Model model : ChatCompletion.Model.values()) {\n            Optional<Encoding> encodingForModel = encodingRegistry.getEncodingForModel(model.getName());\n            encodingForModel.ifPresent(encoding -> modelEncodingMap.put(model.getName(), encoding));\n        }\n    }\n\n    /**\n     * \u8ba1\u7b97tokens\n     * @param modelName \u6a21\u578b\u540d\u79f0\n     * @param messages \u6d88\u606f\u5217\u8868\n     * @return \u8ba1\u7b97\u51fa\u7684tokens\u6570\u91cf\n     */\n\n    public static int tokens(String modelName, List<Message> messages) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/140", "ground_truth": "\n        Encoding encoding = modelEncodingMap.get(modelName);\n        if (encoding == null) {\n            throw new IllegalArgumentException(\"Unsupported model: \" + modelName);\n        }\n\n        int tokensPerMessage = 0;\n        int tokensPerName = 0;\n        if (modelName.startsWith(\"gpt-4\")) {\n            tokensPerMessage = 3;\n            tokensPerName = 1;\n        } else if (modelName.startsWith(\"gpt-3.5-turbo\")) {\n            tokensPerMessage = 4; // every message follows <|start|>{role/name}\\n{content}<|end|>\\n\n            tokensPerName = -1; // if there's a name, the role is omitted\n        }\n        int sum = 0;\n        for (Message message : messages) {\n            sum += tokensPerMessage;\n            sum += encoding.countTokens(message.getContent());\n            sum += encoding.countTokens(message.getRole());\n            if (StrUtil.isNotBlank(message.getName())) {\n                sum += encoding.countTokens(message.getName());\n                sum += tokensPerName;\n            }\n        }\n        sum += 3;\n        return sum;\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "util", "TokensUtil.java"], "context_start_lineno": 0, "function_name": "tokens", "left_context": "class TokensUtil {\n\n    private static final Map<String, Encoding> modelEncodingMap = new HashMap<>();\n    private static final EncodingRegistry encodingRegistry = Encodings.newDefaultEncodingRegistry();\n\n    static {\n        for (ChatCompletion.Model model : ChatCompletion.Model.values()) {\n            Optional<Encoding> encodingForModel = encodingRegistry.getEncodingForModel(model.getName());\n            encodingForModel.ifPresent(encoding -> modelEncodingMap.put(model.getName(), encoding));\n        }\n    }\n\n    /**\n     * \u8ba1\u7b97tokens\n     * @param modelName \u6a21\u578b\u540d\u79f0\n     * @param messages \u6d88\u606f\u5217\u8868\n     * @return \u8ba1\u7b97\u51fa\u7684tokens\u6570\u91cf\n     */\n\n    public static int tokens(String modelName, List<Message> messages) {", "right_context": "}\n}", "class_name": "TokensUtil", "return_type": "int", "parameters": [{"type": "String", "name": "modelName"}, {"type": "List<Message>", "name": "messages"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Embedding {\n\n    /**\n     * keys\n     */\n    private String apiKey;\n\n    private List<String> apiKeyList;\n    /**\n     * \u81ea\u5b9a\u4e49api host\u4f7f\u7528builder\u7684\u65b9\u5f0f\u6784\u9020client\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n    private Api apiClient;\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8d85\u65f6 \u9ed8\u8ba4300\n     */\n    @Builder.Default\n    private long timeout = 300;\n    /**\n     * okhttp \u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n\n\n    public Embedding init() {<FILL_FUNCTION_BODY>}\n\n\n    /**\n     * \u751f\u6210\u5411\u91cf\n     */\n    public EmbeddingResult createEmbeddings(EmbeddingRequest request) {\n        Single<EmbeddingResult> embeddingResultSingle = this.apiClient.createEmbeddings(request);\n        return embeddingResultSingle.blockingGet();\n    }\n\n\n    /**\n     * \u751f\u6210\u5411\u91cf\n     */\n    public EmbeddingResult createEmbeddings(String input, String user) {\n        EmbeddingRequest request = EmbeddingRequest.builder()\n                .input(Collections.singletonList(input))\n                .model(EmbeddingRequest.EmbeddingModelEnum.TEXT_EMBEDDING_ADA_002.getModelName())\n                .user(user)\n                .build();\n        Single<EmbeddingResult> embeddingResultSingle = this.apiClient.createEmbeddings(request);\n        return embeddingResultSingle.blockingGet();\n    }\n\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/164", "ground_truth": "\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.addInterceptor(chain -> {\n            Request original = chain.request();\n            String key = apiKey;\n            if (apiKeyList != null && !apiKeyList.isEmpty()) {\n                key = RandomUtil.randomEle(apiKeyList);\n            }\n            Request request = original.newBuilder()\n                    .header(Header.AUTHORIZATION.getValue(), \"Bearer \" + key)\n                    .header(Header.CONTENT_TYPE.getValue(), ContentType.JSON.getValue())\n                    .method(original.method(), original.body())\n                    .build();\n            return chain.proceed(request);\n        }).addInterceptor(chain -> {\n            Request original = chain.request();\n            Response response = chain.proceed(original);\n            if (!response.isSuccessful()) {\n                String errorMsg = response.body().string();\n                log.error(\"\u8bf7\u6c42\u5f02\u5e38\uff1a{}\", errorMsg);\n                BaseResponse baseResponse = JSON.parseObject(errorMsg, BaseResponse.class);\n                if (Objects.nonNull(baseResponse.getError())) {\n                    log.error(baseResponse.getError().getMessage());\n                    throw new ChatException(baseResponse.getError().getMessage());\n                }\n                throw new ChatException(\"error\");\n            }\n            return response;\n        });\n\n        client.connectTimeout(timeout, TimeUnit.SECONDS);\n        client.writeTimeout(timeout, TimeUnit.SECONDS);\n        client.readTimeout(timeout, TimeUnit.SECONDS);\n        if (Objects.nonNull(proxy)) {\n            client.proxy(proxy);\n        }\n        this.okHttpClient = client.build();\n        this.apiClient = new Retrofit.Builder()\n                .baseUrl(this.apiHost)\n                .client(okHttpClient)\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .addConverterFactory(JacksonConverterFactory.create())\n                .build()\n                .create(Api.class);\n        return this;\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "Embedding.java"], "context_start_lineno": 0, "function_name": "init", "left_context": "class Embedding {\n\n    /**\n     * keys\n     */\n    private String apiKey;\n\n    private List<String> apiKeyList;\n    /**\n     * \u81ea\u5b9a\u4e49api host\u4f7f\u7528builder\u7684\u65b9\u5f0f\u6784\u9020client\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n    private Api apiClient;\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8d85\u65f6 \u9ed8\u8ba4300\n     */\n    @Builder.Default\n    private long timeout = 300;\n    /**\n     * okhttp \u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n\n\n    public Embedding init() {", "right_context": "}\n\n\n    /**\n     * \u751f\u6210\u5411\u91cf\n     */\n    public EmbeddingResult createEmbeddings(EmbeddingRequest request) {\n        Single<EmbeddingResult> embeddingResultSingle = this.apiClient.createEmbeddings(request);\n        return embeddingResultSingle.blockingGet();\n    }\n\n\n    /**\n     * \u751f\u6210\u5411\u91cf\n     */\n    public EmbeddingResult createEmbeddings(String input, String user) {\n        EmbeddingRequest request = EmbeddingRequest.builder()\n                .input(Collections.singletonList(input))\n                .model(EmbeddingRequest.EmbeddingModelEnum.TEXT_EMBEDDING_ADA_002.getModelName())\n                .user(user)\n                .build();\n        Single<EmbeddingResult> embeddingResultSingle = this.apiClient.createEmbeddings(request);\n        return embeddingResultSingle.blockingGet();\n    }\n\n}", "class_name": "Embedding", "return_type": "Embedding", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ChatGPTStream {\n\n    private String apiKey;\n    private List<String> apiKeyList;\n\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8fde\u63a5\u8d85\u65f6\n     */\n    @Builder.Default\n    private long timeout = 90;\n\n    /**\n     * \u7f51\u7edc\u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n    /**\n     * \u53cd\u5411\u4ee3\u7406\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    public ChatGPTStream init() {\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(timeout, TimeUnit.SECONDS);\n        client.writeTimeout(timeout, TimeUnit.SECONDS);\n        client.readTimeout(timeout, TimeUnit.SECONDS);\n        if (Objects.nonNull(proxy)) {\n            client.proxy(proxy);\n        }\n\n        okHttpClient = client.build();\n\n        return this;\n    }\n\n\n    /**\n     * \u6d41\u5f0f\u8f93\u51fa\n     */\n    public void streamChatCompletion(ChatCompletion chatCompletion,\n                                     EventSourceListener eventSourceListener) {<FILL_FUNCTION_BODY>}\n\n    /**\n     * \u6d41\u5f0f\u8f93\u51fa\n     */\n    public void streamChatCompletion(List<Message> messages,\n                                     EventSourceListener eventSourceListener) {\n        ChatCompletion chatCompletion = ChatCompletion.builder()\n                .messages(messages)\n                .stream(true)\n                .build();\n        streamChatCompletion(chatCompletion, eventSourceListener);\n    }\n\n\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/196", "ground_truth": "\n\n        chatCompletion.setStream(true);\n\n        try {\n            EventSource.Factory factory = EventSources.createFactory(okHttpClient);\n            ObjectMapper mapper = new ObjectMapper();\n            String requestBody = mapper.writeValueAsString(chatCompletion);\n            String key = apiKey;\n            if (apiKeyList != null && !apiKeyList.isEmpty()) {\n                key = RandomUtil.randomEle(apiKeyList);\n            }\n\n\n            Request request = new Request.Builder()\n                    .url(apiHost + \"v1/chat/completions\")\n                    .post(RequestBody.create(MediaType.parse(ContentType.JSON.getValue()),\n                            requestBody))\n                    .header(\"Authorization\", \"Bearer \" + key)\n                    .build();\n            factory.newEventSource(request, eventSourceListener);\n\n        } catch (Exception e) {\n            log.error(\"\u8bf7\u6c42\u51fa\u9519\uff1a{}\", e);\n        }\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "ChatGPTStream.java"], "context_start_lineno": 0, "function_name": "streamChatCompletion", "left_context": "class ChatGPTStream {\n\n    private String apiKey;\n    private List<String> apiKeyList;\n\n    private OkHttpClient okHttpClient;\n    /**\n     * \u8fde\u63a5\u8d85\u65f6\n     */\n    @Builder.Default\n    private long timeout = 90;\n\n    /**\n     * \u7f51\u7edc\u4ee3\u7406\n     */\n    @Builder.Default\n    private Proxy proxy = Proxy.NO_PROXY;\n    /**\n     * \u53cd\u5411\u4ee3\u7406\n     */\n    @Builder.Default\n    private String apiHost = Api.DEFAULT_API_HOST;\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    public ChatGPTStream init() {\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(timeout, TimeUnit.SECONDS);\n        client.writeTimeout(timeout, TimeUnit.SECONDS);\n        client.readTimeout(timeout, TimeUnit.SECONDS);\n        if (Objects.nonNull(proxy)) {\n            client.proxy(proxy);\n        }\n\n        okHttpClient = client.build();\n\n        return this;\n    }\n\n\n    /**\n     * \u6d41\u5f0f\u8f93\u51fa\n     */\n    public void streamChatCompletion(ChatCompletion chatCompletion,\n                                     EventSourceListener eventSourceListener) {", "right_context": "}\n\n    /**\n     * \u6d41\u5f0f\u8f93\u51fa\n     */\n    public void streamChatCompletion(List<Message> messages,\n                                     EventSourceListener eventSourceListener) {\n        ChatCompletion chatCompletion = ChatCompletion.builder()\n                .messages(messages)\n                .stream(true)\n                .build();\n        streamChatCompletion(chatCompletion, eventSourceListener);\n    }\n\n\n}", "class_name": "ChatGPTStream", "return_type": "void", "parameters": [{"type": "ChatCompletion", "name": "chatCompletion"}, {"type": "EventSourceListener", "name": "eventSourceListener"}]}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass Test {\n    public static void main(String[] args) {<FILL_FUNCTION_BODY>}\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/222", "ground_truth": "\n        Proxy proxys = Proxys.http(\"127.0.0.1\",10809);\n        Images images = Images.builder()\n                .proxy(proxys)\n                .apiKey(\"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\")\n                .apiHost(\"https://api.openai.com/\")\n                .timeout(900)\n                .build()\n                .init();\n\n        File file = new File(\"C:\\\\Users\\\\\u9a6c\u540c\u5fbd\\\\Pictures\\\\\u5fae\u4fe1\u56fe\u7247_20230606140621.png\");\n        Variations variations = Variations.ofURL(1,\"256x256\");\n        Generations generations = Generations.ofURL(\"\u4e00\u53ea\u9ca8\u9c7c\u548c\u4e00\u76f4\u871c\u8702\u7ed3\u5408\u6210\u4e00\u79cd\u52a8\u7269\",1,\"256x256\");\n        ImagesRensponse imagesRensponse = images.variations(file,variations);\n        System.out.println(imagesRensponse.getCreated());\n        System.out.println(imagesRensponse.getCode());\n        System.out.println(imagesRensponse.getMsg());\n        List<Object> data = imagesRensponse.getData();\n        for(Object o:data){\n            System.out.println(o.toString());\n        }\n        /*Audio audio = Audio.builder()\n                .proxy(proxys)\n                .apiKey(\"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\")\n                .apiHost(\"https://api.openai.com/\")\n                .timeout(900)\n                .build()\n                .init();\n        File file = new File(\"D:\\\\Jenny.mp3\");\n        Transcriptions transcriptions = Transcriptions.of(file, AudioModel.WHISPER1.getValue());\n        AudioResponse response = audio.transcriptions(transcriptions);\n        System.out.println(response.getText());*/\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "Test.java"], "context_start_lineno": 0, "function_name": "main", "left_context": "class Test {\n    public static void main(String[] args) {", "right_context": "}\n}", "class_name": "Test", "return_type": "", "parameters": []}}
{"prompt": "// Here are some relevant code fragments from other files of the repo:\n// --------------------------------------------------\n// Based on above, complete the method body of the class\n\nclass ConsoleChatGPT {\n\n    public static Proxy proxy = Proxy.NO_PROXY;\n\n    public static void main(String[] args) {<FILL_FUNCTION_BODY>}\n\n    private static BigDecimal getBalance(String key) {\n\n        ChatGPT chatGPT = ChatGPT.builder()\n                .apiKey(key)\n                .proxy(proxy)\n                .build()\n                .init();\n\n        return chatGPT.balance();\n    }\n\n    private static void check(String key) {\n        if (key == null || key.isEmpty()) {\n            throw new RuntimeException(\"\u8bf7\u8f93\u5165\u6b63\u786e\u7684KEY\");\n        }\n    }\n\n    @SneakyThrows\n    public static String getInput(String prompt) {\n        System.out.print(prompt);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        List<String> lines = new ArrayList<>();\n        String line;\n        try {\n            while ((line = reader.readLine()) != null && !line.isEmpty()) {\n                lines.add(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return lines.stream().collect(Collectors.joining(\"\\n\"));\n    }\n\n}", "metadata": {"task_id": "PlexPt_chatgpt-java/365", "ground_truth": "\n\n        System.out.println(\"ChatGPT - Java command-line interface\");\n        System.out.println(\"Press enter twice to submit your question.\");\n        System.out.println();\n        System.out.println(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4\u60a8\u7684\u95ee\u9898\uff01\uff01\uff01\");\n        System.out.println(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4\u60a8\u7684\u95ee\u9898\uff01\uff01\uff01\");\n        System.out.println(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4\u60a8\u7684\u95ee\u9898\uff01\uff01\uff01\");\n\n\n        System.out.println();\n        System.out.println(\"Please enter APIKEY, press Enter twice to submit:\");\n        String key = getInput(\"\u8bf7\u8f93\u5165APIKEY\uff0c\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4:\\n\");\n        check(key);\n\n        // \u8be2\u95ee\u7528\u6237\u662f\u5426\u4f7f\u7528\u4ee3\u7406  \u56fd\u5185\u9700\u8981\u4ee3\u7406\n        System.out.println(\"\u662f\u5426\u4f7f\u7528\u4ee3\u7406\uff1f(y/n): \");\n        System.out.println(\"use proxy\uff1f(y/n): \");\n        String useProxy = getInput(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4:\\n\");\n        if (useProxy.equalsIgnoreCase(\"y\")) {\n\n            // \u8f93\u5165\u4ee3\u7406\u5730\u5740\n            System.out.println(\"\u8bf7\u8f93\u5165\u4ee3\u7406\u7c7b\u578b(http/socks): \");\n            String type = getInput(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4:\\n\");\n\n            // \u8f93\u5165\u4ee3\u7406\u5730\u5740\n            System.out.println(\"\u8bf7\u8f93\u5165\u4ee3\u7406IP: \");\n            String proxyHost = getInput(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4:\\n\");\n\n            // \u8f93\u5165\u4ee3\u7406\u7aef\u53e3\n            System.out.println(\"\u8bf7\u8f93\u5165\u4ee3\u7406\u7aef\u53e3: \");\n            String portStr = getInput(\"\u6309\u4e24\u6b21\u56de\u8f66\u4ee5\u63d0\u4ea4:\\n\");\n            Integer proxyPort = Integer.parseInt(portStr);\n\n            if (type.equals(\"http\")) {\n                proxy = Proxys.http(proxyHost, proxyPort);\n            } else {\n                proxy = Proxys.socks5(proxyHost, proxyPort);\n            }\n\n        }\n\n//        System.out.println(\"Inquiry balance...\");\n//        System.out.println(\"\u67e5\u8be2\u4f59\u989d\u4e2d...\");\n//        BigDecimal balance = getBalance(key);\n//        System.out.println(\"API KEY balance: \" + balance.toPlainString());\n//\n//        if (!NumberUtil.isGreater(balance, BigDecimal.ZERO)) {\n//            System.out.println(\"API KEY \u4f59\u989d\u4e0d\u8db3: \");\n//            return;\n//        }\n\n\n        while (true) {\n            String prompt = getInput(\"\\nYou:\\n\");\n\n            ChatGPTStream chatGPT = ChatGPTStream.builder()\n                    .apiKey(key)\n                    .proxy(proxy)\n                    .build()\n                    .init();\n\n            System.out.println(\"AI: \");\n\n\n            //\u5361\u4f4f\n            CountDownLatch countDownLatch = new CountDownLatch(1);\n\n            Message message = Message.of(prompt);\n            ConsoleStreamListener listener = new ConsoleStreamListener() {\n                @Override\n                public void onError(Throwable throwable, String response) {\n                    throwable.printStackTrace();\n                    countDownLatch.countDown();\n                }\n            };\n\n            listener.setOnComplate(msg -> {\n                countDownLatch.countDown();\n            });\n            chatGPT.streamChatCompletion(Arrays.asList(message), listener);\n\n            try {\n                countDownLatch.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n\n    ", "fpath_tuple": ["PlexPt_chatgpt-java", "chatgpt-java", "src", "main", "java", "com", "plexpt", "chatgpt", "ConsoleChatGPT.java"], "context_start_lineno": 0, "function_name": "main", "left_context": "class ConsoleChatGPT {\n\n    public static Proxy proxy = Proxy.NO_PROXY;\n\n    public static void main(String[] args) {", "right_context": "}\n\n    private static BigDecimal getBalance(String key) {\n\n        ChatGPT chatGPT = ChatGPT.builder()\n                .apiKey(key)\n                .proxy(proxy)\n                .build()\n                .init();\n\n        return chatGPT.balance();\n    }\n\n    private static void check(String key) {\n        if (key == null || key.isEmpty()) {\n            throw new RuntimeException(\"\u8bf7\u8f93\u5165\u6b63\u786e\u7684KEY\");\n        }\n    }\n\n    @SneakyThrows\n    public static String getInput(String prompt) {\n        System.out.print(prompt);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        List<String> lines = new ArrayList<>();\n        String line;\n        try {\n            while ((line = reader.readLine()) != null && !line.isEmpty()) {\n                lines.add(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return lines.stream().collect(Collectors.joining(\"\\n\"));\n    }\n\n}", "class_name": "ConsoleChatGPT", "return_type": "void", "parameters": [{"type": "String[]", "name": "args"}]}}
